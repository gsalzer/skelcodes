{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/QueenDecks.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// Stake (deposit) ERC-20 tokens to get more tokens as reward (interest).\\r\\n// Note the `treasury` account that borrows tokens (and pays rewards).\\r\\ncontract QueenDecks is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // The amount to return to a user (i.e. a stake holder) is calculated as:\\r\\n    // `amountDue = Stake.amount * TermSheet.rewardFactor/1e+6` (1)\\r\\n\\r\\n    struct TermSheet {\\r\\n        // Min token amount to stake\\r\\n        uint176 minAmount;\\r\\n        // Max stake amount multiplier, scaled by 1e+4:\\r\\n        // `maxAmount = minAmount * maxAmountFactor/1e4`\\r\\n        // (if set to 0, the stake amount is unlimited)\\r\\n        uint32 maxAmountFactor;\\r\\n        // Reward multiplier, scaled by 1e+6 (see (1))\\r\\n        uint32 rewardFactor;\\r\\n        // Staking period in hours\\r\\n        uint16 lockHours;\\r\\n        // Min time between accrued reward withdrawals\\r\\n        // (set to 0 to disallow interim withdrawals)\\r\\n        uint16 rewardLockHours;\\r\\n        // ERC-20 contract of the token to stake\\r\\n        address token;\\r\\n        // If staking is enabled\\r\\n        bool enabled;\\r\\n    }\\r\\n\\r\\n    struct Stake {\\r\\n        // Amount staked, in token units\\r\\n        uint256 amount;\\r\\n        // UNIX-time the stake may be withdrawn since\\r\\n        uint32 unlockTime;\\r\\n        // UNIX-time the reward last time withdrawn at\\r\\n        uint32 lastRewardTime;\\r\\n        uint32 rewardFactor; // see TermSheet.rewardFactor\\r\\n        uint16 rewardLockHours; // see TermSheet.rewardLockHours\\r\\n        uint16 lockHours; // see TermSheet.lockHours\\r\\n        uint256 termsheetId;\\r\\n    }\\r\\n\\r\\n    // All stakes of a user\\r\\n    // (note, the stake ID includes the address of the token staked)\\r\\n    struct UserStakes {\\r\\n        // Set of (unique) stake IDs (see `encodeStakeId` function)\\r\\n        uint256[] ids;\\r\\n        // Mapping from stake ID to stake data\\r\\n        mapping(uint256 => Stake) data;\\r\\n    }\\r\\n\\r\\n    // Emergency withdrawals enabled by default\\r\\n    bool public emergencyWithdrawEnabled = true;\\r\\n\\r\\n    // Emergency fees factor, scaled by 1e+4:\\r\\n    // `fees = Stake.amount * emergencyFeesFactor / 1e+4`\\r\\n    uint16 public emergencyFeesFactor = 500; // i.e. 5%\\r\\n\\r\\n    // Number of stakes made so far\\r\\n    uint48 public stakeQty;\\r\\n\\r\\n    // Account that controls the tokens staked\\r\\n    address public treasury;\\r\\n\\r\\n    // Info on each TermSheet\\r\\n    TermSheet[] internal termSheets;\\r\\n\\r\\n    // Mappings from staked token address to amount staked\\r\\n    mapping(address => uint256) public amountsStaked; // in token units\\r\\n    // Mappings from staked token address to amount due\\r\\n    mapping(address => uint256) public amountsDue; // in token units\\r\\n\\r\\n    // Mapping from user account to user stakes\\r\\n    mapping(address => UserStakes) internal stakes;\\r\\n\\r\\n    event Deposit(\\r\\n        address indexed token,\\r\\n        address indexed user,\\r\\n        uint256 stakeId,\\r\\n        uint256 termsId,\\r\\n        uint256 amount, // amount staked\\r\\n        uint256 amountDue, // amount to be returned\\r\\n        uint256 unlockTime // UNIX-time when the stake is unlocked\\r\\n    );\\r\\n\\r\\n    // User withdraws the stake (including reward due)\\r\\n    event Withdraw(\\r\\n        address indexed user,\\r\\n        uint256 stakeId,\\r\\n        uint256 amount // amount sent to user (in token units)\\r\\n    );\\r\\n\\r\\n    // User withdraws interim reward\\r\\n    event Reward(\\r\\n        address indexed user,\\r\\n        uint256 stakeId,\\r\\n        uint256 amount // amount sent to user (in token units)\\r\\n    );\\r\\n\\r\\n    event Emergency(bool enabled);\\r\\n    event EmergencyFactor(uint256 factor);\\r\\n\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 stakeId,\\r\\n        uint256 amount, // amount sent to user (in token units)\\r\\n        uint256 reward, // cancelled reward (in token units)\\r\\n        uint256 fees // withheld fees (in token units)\\r\\n    );\\r\\n\\r\\n    event NewTermSheet(\\r\\n        uint256 indexed termsId, // index in the `termSheets` array\\r\\n        address indexed token, // here and further - see `struct TermSheet`\\r\\n        uint256 minAmount,\\r\\n        uint256 maxAmountFactor,\\r\\n        uint256 lockHours,\\r\\n        uint256 rewardLockHours,\\r\\n        uint256 rewardFactor\\r\\n    );\\r\\n\\r\\n    event TermsEnabled(uint256 indexed termsId);\\r\\n    event TermsDisabled(uint256 indexed termsId);\\r\\n\\r\\n    constructor(address _treasury) public {\\r\\n        _setTreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        revert(\\\"QDeck:can't receive ethers\\\");\\r\\n    }\\r\\n\\r\\n    // Stake ID uniquely identifies a stake\\r\\n    // (note, `stakeNum` uniquely identifies a stake, rest is for UI sake)\\r\\n    function encodeStakeId(\\r\\n        address token, // token contract address\\r\\n        uint256 stakeNum, // uniq nonce (limited to 48 bits)\\r\\n        uint256 unlockTime, // UNIX time (limited to 32 bits)\\r\\n        uint256 stakeHours // Stake duration (limited to 16 bits)\\r\\n    ) public pure returns (uint256) {\\r\\n        require(stakeNum < 2**48, \\\"QDeck:stakeNum_EXCEEDS_48_BITS\\\");\\r\\n        require(unlockTime < 2**32, \\\"QDeck:unlockTime_EXCEEDS_32_BITS\\\");\\r\\n        require(stakeHours < 2**16, \\\"QDeck:stakeHours_EXCEEDS_16_BITS\\\");\\r\\n        return _encodeStakeId(token, stakeNum, unlockTime, stakeHours);\\r\\n    }\\r\\n\\r\\n    function decodeStakeId(uint256 stakeId)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            address token,\\r\\n            uint256 stakeNum,\\r\\n            uint256 unlockTime,\\r\\n            uint256 stakeHours\\r\\n        )\\r\\n    {\\r\\n        token = address(stakeId >> 96);\\r\\n        stakeNum = (stakeId >> 48) & (2**48 - 1);\\r\\n        unlockTime = (stakeId >> 16) & (2**32 - 1);\\r\\n        stakeHours = stakeId & (2**16 - 1);\\r\\n    }\\r\\n\\r\\n    function stakeIds(address user) external view returns (uint256[] memory) {\\r\\n        _revertZeroAddress(user);\\r\\n        UserStakes storage userStakes = stakes[user];\\r\\n        return userStakes.ids;\\r\\n    }\\r\\n\\r\\n    function stakeData(address user, uint256 stakeId)\\r\\n        external\\r\\n        view\\r\\n        returns (Stake memory)\\r\\n    {\\r\\n        return stakes[_nonZeroAddr(user)].data[stakeId];\\r\\n    }\\r\\n\\r\\n    function getAmountDue(address user, uint256 stakeId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 totalDue, uint256 rewardDue)\\r\\n    {\\r\\n        Stake memory stake = stakes[_nonZeroAddr(user)].data[stakeId];\\r\\n        (totalDue, rewardDue) = _amountDueOn(stake, now);\\r\\n    }\\r\\n\\r\\n    function termSheet(uint256 termsId)\\r\\n        external\\r\\n        view\\r\\n        returns (TermSheet memory)\\r\\n    {\\r\\n        return termSheets[_validTermsID(termsId)];\\r\\n    }\\r\\n\\r\\n    function termsLength() external view returns (uint256) {\\r\\n        return termSheets.length;\\r\\n    }\\r\\n\\r\\n    function allTermSheets() external view returns(TermSheet[] memory) {\\r\\n        return termSheets;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 termsId, uint256 amount) public nonReentrant {\\r\\n        TermSheet memory tS = termSheets[_validTermsID(termsId)];\\r\\n        require(tS.enabled, \\\"deposit: terms disabled\\\");\\r\\n\\r\\n        require(amount >= tS.minAmount, \\\"deposit: too small amount\\\");\\r\\n        if (tS.maxAmountFactor != 0) {\\r\\n            require(\\r\\n                amount <=\\r\\n                    uint256(tS.minAmount).mul(tS.maxAmountFactor).div(1e4),\\r\\n                \\\"deposit: too big amount\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint48 stakeNum = stakeQty + 1;\\r\\n        require(stakeNum != 0, \\\"QDeck:stakeQty_OVERFLOW\\\");\\r\\n\\r\\n        uint256 amountDue = amount.mul(tS.rewardFactor).div(1e6);\\r\\n        uint32 unlockTime = safe32(now.add(uint256(tS.lockHours) * 3600));\\r\\n\\r\\n        uint256 stakeId = _encodeStakeId(tS.token, stakeNum, now, tS.lockHours);\\r\\n\\r\\n        IERC20(tS.token).safeTransferFrom(msg.sender, treasury, amount);\\r\\n\\r\\n        _addUserStake(\\r\\n            stakes[msg.sender],\\r\\n            stakeId,\\r\\n            Stake(\\r\\n                amount,\\r\\n                unlockTime,\\r\\n                safe32(now),\\r\\n                tS.rewardFactor,\\r\\n                tS.rewardLockHours,\\r\\n                tS.lockHours,\\r\\n                termsId\\r\\n            )\\r\\n        );\\r\\n        stakeQty = stakeNum;\\r\\n        amountsStaked[tS.token] = amountsStaked[tS.token].add(amount);\\r\\n        amountsDue[tS.token] = amountsDue[tS.token].add(amountDue);\\r\\n\\r\\n        emit Deposit(\\r\\n            tS.token,\\r\\n            msg.sender,\\r\\n            stakeId,\\r\\n            termsId,\\r\\n            amount,\\r\\n            amountDue,\\r\\n            unlockTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Withdraw the staked amount and the reward due (when stake period passed)\\r\\n    function withdraw(uint256 stakeId) public nonReentrant {\\r\\n        _withdraw(stakeId, false);\\r\\n    }\\r\\n\\r\\n    // Withdraw reward accrued so far (if interim withdrawals allowed)\\r\\n    function withdrawReward(uint256 stakeId) public {\\r\\n        _withdrawReward(stakeId);\\r\\n    }\\r\\n\\r\\n    // Withdraw the staked amount - w/o the reward, less fees (if applicable)\\r\\n    // Rewards entitled be lost. Fees may be charged. Use in emergency only !!!\\r\\n    function emergencyWithdraw(uint256 stakeId) public nonReentrant {\\r\\n        _withdraw(stakeId, true);\\r\\n    }\\r\\n\\r\\n    function addTerms(TermSheet[] memory _termSheets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _termSheets.length; i++) {\\r\\n            _addTermSheet(_termSheets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableTerms(uint256 termsId) external onlyOwner {\\r\\n        termSheets[_validTermsID(termsId)].enabled = true;\\r\\n        emit TermsEnabled(termsId);\\r\\n    }\\r\\n\\r\\n    function disableTerms(uint256 termsId) external onlyOwner {\\r\\n        termSheets[_validTermsID(termsId)].enabled = false;\\r\\n        emit TermsDisabled(termsId);\\r\\n    }\\r\\n\\r\\n    function enableEmergencyWithdraw() external onlyOwner {\\r\\n        emergencyWithdrawEnabled = true;\\r\\n        emit Emergency(true);\\r\\n    }\\r\\n\\r\\n    function disableEmergencyWithdraw() external onlyOwner {\\r\\n        emergencyWithdrawEnabled = false;\\r\\n        emit Emergency(false);\\r\\n    }\\r\\n\\r\\n    function setEmergencyFeesFactor(uint256 factor) external onlyOwner {\\r\\n        require(factor < 5000, \\\"QDeck:INVALID_factor\\\"); // less then 50%\\r\\n        emergencyFeesFactor = uint16(factor);\\r\\n        emit EmergencyFactor(factor);\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) public onlyOwner {\\r\\n        _setTreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    // Save occasional airdrop or mistakenly transferred tokens\\r\\n    function transferFromContract(\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external onlyOwner {\\r\\n        _revertZeroAddress(to);\\r\\n        token.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 stakeId, bool isEmergency) internal {\\r\\n        address token = _tokenFromId(stakeId);\\r\\n        UserStakes storage userStakes = stakes[msg.sender];\\r\\n        Stake memory stake = userStakes.data[stakeId];\\r\\n\\r\\n        require(stake.amount != 0, \\\"QDeck:unknown or returned stake\\\");\\r\\n        (uint256 amountDue, uint256 reward) = _amountDueOn(stake, now);\\r\\n\\r\\n        uint256 amountToUser;\\r\\n        if (isEmergency) {\\r\\n            require(emergencyWithdrawEnabled, \\\"withdraw: emergency disabled\\\");\\r\\n            uint256 fees = stake.amount.mul(emergencyFeesFactor).div(1e4);\\r\\n            amountToUser = stake.amount.sub(fees);\\r\\n            emit EmergencyWithdraw(\\r\\n                msg.sender,\\r\\n                stakeId,\\r\\n                amountToUser,\\r\\n                reward,\\r\\n                fees\\r\\n            );\\r\\n        } else {\\r\\n            require(now >= stake.unlockTime, \\\"withdraw: stake is locked\\\");\\r\\n            amountToUser = amountDue;\\r\\n            emit Withdraw(msg.sender, stakeId, amountToUser);\\r\\n        }\\r\\n\\r\\n        if (now > stake.lastRewardTime) {\\r\\n            userStakes.data[stakeId].lastRewardTime = safe32(now);\\r\\n        }\\r\\n\\r\\n        _removeUserStake(userStakes, stakeId);\\r\\n        amountsStaked[token] = amountsStaked[token].sub(stake.amount);\\r\\n        amountsDue[token] = amountsDue[token].sub(amountDue);\\r\\n\\r\\n        IERC20(token).safeTransferFrom(treasury, msg.sender, amountToUser);\\r\\n    }\\r\\n\\r\\n    function _withdrawReward(uint256 stakeId) internal {\\r\\n        address token = _tokenFromId(stakeId);\\r\\n        UserStakes storage userStakes = stakes[msg.sender];\\r\\n        Stake memory stake = userStakes.data[stakeId];\\r\\n        require(stake.amount != 0, \\\"QDeck:unknown or returned stake\\\");\\r\\n        require(stake.rewardLockHours != 0, \\\"QDeck:reward is locked\\\");\\r\\n\\r\\n        uint256 allowedTime = stake.lastRewardTime +\\r\\n            stake.rewardLockHours *\\r\\n            3600;\\r\\n        require(now >= allowedTime, \\\"QDeck:reward withdrawal not yet allowed\\\");\\r\\n\\r\\n        (, uint256 reward) = _amountDueOn(stake, now);\\r\\n        if (reward == 0) return;\\r\\n\\r\\n        stakes[msg.sender].data[stakeId].lastRewardTime = safe32(now);\\r\\n        amountsDue[token] = amountsDue[token].sub(reward);\\r\\n\\r\\n        IERC20(token).safeTransferFrom(treasury, msg.sender, reward);\\r\\n        emit Reward(msg.sender, stakeId, reward);\\r\\n    }\\r\\n\\r\\n    function _amountDueOn (Stake memory stake, uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 totalDue, uint256 rewardAccrued)\\r\\n    {\\r\\n        totalDue = stake.amount;\\r\\n        rewardAccrued = 0;\\r\\n        if (\\r\\n            (stake.amount != 0) &&\\r\\n            (timestamp > stake.lastRewardTime) &&\\r\\n            (stake.lastRewardTime < stake.unlockTime)\\r\\n        ) {\\r\\n            uint256 end = timestamp > stake.unlockTime\\r\\n                ? stake.unlockTime\\r\\n                : timestamp;\\r\\n            uint256 fullyDue = stake.amount.mul(stake.rewardFactor).div(1e6);\\r\\n\\r\\n            rewardAccrued = fullyDue\\r\\n                .sub(stake.amount)\\r\\n                .mul(end.sub(stake.lastRewardTime))\\r\\n                .div(uint256(stake.lockHours) * 3600);\\r\\n            totalDue = totalDue.add(rewardAccrued);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addTermSheet(TermSheet memory tS) internal {\\r\\n        _revertZeroAddress(tS.token);\\r\\n        require(\\r\\n            tS.minAmount != 0 && tS.lockHours != 0 && tS.rewardFactor >= 1e6,\\r\\n            \\\"QDeck:add:INVALID_ZERO_PARAM\\\"\\r\\n        );\\r\\n        require(_isMissingTerms(tS), \\\"QDeck:add:TERMS_DUPLICATED\\\");\\r\\n\\r\\n        termSheets.push(tS);\\r\\n\\r\\n        emit NewTermSheet(\\r\\n            termSheets.length - 1,\\r\\n            tS.token,\\r\\n            tS.minAmount,\\r\\n            tS.maxAmountFactor,\\r\\n            tS.lockHours,\\r\\n            tS.rewardLockHours,\\r\\n            tS.rewardFactor\\r\\n        );\\r\\n        if (tS.enabled) emit TermsEnabled(termSheets.length);\\r\\n    }\\r\\n\\r\\n    // Returns `true` if the term sheet has NOT been yet added.\\r\\n    function _isMissingTerms(TermSheet memory newSheet)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < termSheets.length; i++) {\\r\\n            TermSheet memory sheet = termSheets[i];\\r\\n            if (\\r\\n                sheet.token == newSheet.token &&\\r\\n                sheet.minAmount == newSheet.minAmount &&\\r\\n                sheet.maxAmountFactor == newSheet.maxAmountFactor &&\\r\\n                sheet.lockHours == newSheet.lockHours &&\\r\\n                sheet.rewardLockHours == newSheet.rewardLockHours &&\\r\\n                sheet.rewardFactor == newSheet.rewardFactor\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _addUserStake(\\r\\n        UserStakes storage userStakes,\\r\\n        uint256 stakeId,\\r\\n        Stake memory stake\\r\\n    ) internal {\\r\\n        require(\\r\\n            userStakes.data[stakeId].amount == 0,\\r\\n            \\\"QDeck:DUPLICATED_STAKE_ID\\\"\\r\\n        );\\r\\n        userStakes.data[stakeId] = stake;\\r\\n        userStakes.ids.push(stakeId);\\r\\n    }\\r\\n\\r\\n    function _removeUserStake(UserStakes storage userStakes, uint256 stakeId)\\r\\n        internal\\r\\n    {\\r\\n        require(userStakes.data[stakeId].amount != 0, \\\"QDeck:INVALID_STAKE_ID\\\");\\r\\n        userStakes.data[stakeId].amount = 0;\\r\\n        _removeArrayElement(userStakes.ids, stakeId);\\r\\n    }\\r\\n\\r\\n    // Assuming the given array does contain the given element\\r\\n    function _removeArrayElement(uint256[] storage arr, uint256 el) internal {\\r\\n        uint256 lastIndex = arr.length - 1;\\r\\n        if (lastIndex != 0) {\\r\\n            uint256 replaced = arr[lastIndex];\\r\\n            if (replaced != el) {\\r\\n                // Shift elements until the one being removed is replaced\\r\\n                do {\\r\\n                    uint256 replacing = replaced;\\r\\n                    replaced = arr[lastIndex - 1];\\r\\n                    lastIndex--;\\r\\n                    arr[lastIndex] = replacing;\\r\\n                } while (replaced != el && lastIndex != 0);\\r\\n            }\\r\\n        }\\r\\n        // Remove the last (and quite probably the only) element\\r\\n        arr.pop();\\r\\n    }\\r\\n\\r\\n    function _setTreasury(address _treasury) internal {\\r\\n        _revertZeroAddress(_treasury);\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function _encodeStakeId(\\r\\n        address token,\\r\\n        uint256 stakeNum,\\r\\n        uint256 unlockTime,\\r\\n        uint256 stakeHours\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(stakeNum < 2**48, \\\"QDeck:stakeNum_EXCEEDS_48_BITS\\\");\\r\\n        return\\r\\n            (uint256(token) << 96) |\\r\\n            (stakeNum << 48) |\\r\\n            (unlockTime << 16) |\\r\\n            stakeHours;\\r\\n    }\\r\\n\\r\\n    function _tokenFromId(uint256 stakeId) internal pure returns (address) {\\r\\n        address token = address(stakeId >> 96);\\r\\n        _revertZeroAddress(token);\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    function _revertZeroAddress(address _address) internal pure {\\r\\n        require(_address != address(0), \\\"QDeck:ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    function _nonZeroAddr(address _address) private pure returns (address) {\\r\\n        _revertZeroAddress(_address);\\r\\n        return _address;\\r\\n    }\\r\\n\\r\\n    function _validTermsID(uint256 termsId) private view returns (uint256) {\\r\\n        require(termsId < termSheets.length, \\\"QDeck:INVALID_TERMS_ID\\\");\\r\\n        return termsId;\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n) private pure returns (uint32) {\\r\\n        require(n < 2**32, \\\"QDeck:UNSAFE_UINT32\\\");\\r\\n        return uint32(n);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Emergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"EmergencyFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardLockHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFactor\",\"type\":\"uint256\"}],\"name\":\"NewTermSheet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"TermsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint176\",\"name\":\"minAmount\",\"type\":\"uint176\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rewardLockHours\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct QueenDecks.TermSheet[]\",\"name\":\"_termSheets\",\"type\":\"tuple[]\"}],\"name\":\"addTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTermSheets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint176\",\"name\":\"minAmount\",\"type\":\"uint176\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rewardLockHours\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct QueenDecks.TermSheet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountsDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"decodeStakeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHours\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"disableTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyFeesFactor\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"enableTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeHours\",\"type\":\"uint256\"}],\"name\":\"encodeStakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getAmountDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"setEmergencyFeesFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakeData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastRewardTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"rewardLockHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"termsheetId\",\"type\":\"uint256\"}],\"internalType\":\"struct QueenDecks.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeQty\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termsId\",\"type\":\"uint256\"}],\"name\":\"termSheet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint176\",\"name\":\"minAmount\",\"type\":\"uint176\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"lockHours\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rewardLockHours\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct QueenDecks.TermSheet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"QueenDecks","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d31e459ac72e2ccad9a35b5b3367cfb4bab0274f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}