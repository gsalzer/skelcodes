{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ncontract DSMath {\r\n    uint256 constant WAD = 10 ** 18;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n}\r\n\r\ncontract Setup is DSMath {\r\n\r\n     /**\r\n     * @dev Return InstAaMemory Address.\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n     /**\r\n     * @dev Connector ID and Type\r\n     */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 67);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract FeeResolver is Setup {\r\n\r\n    /**\r\n     * @dev Calculate fee\r\n     * @param amount token amount to caculate fee.\r\n     * @param fee fee percentage. Eg: 1% => 1e17, 100% => 1e18.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set total amount at this ID in `InstaMemory` Contract.\r\n     * @param setIdFee Set only fee amount at this ID in `InstaMemory` Contract.\r\n     */\r\n    function calculateFee(uint amount, uint fee, uint getId, uint setId, uint setIdFee) external payable {\r\n        uint _amt = getUint(getId, amount);\r\n\r\n        uint feeAmt = wmul(_amt, fee);\r\n\r\n        uint totalAmt = add(_amt, feeAmt);\r\n\r\n        setUint(setId, totalAmt);\r\n        setUint(setIdFee, feeAmt);\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectFee is FeeResolver {\r\n    string public constant name = \"Fee-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdFee\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectFee","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4e6567be5ff627c503cf99d13b12b850479c1a4625cf3847f073eed1a452166b"}]}