{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/contracts/keep3r/HegicKeep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/hegic/IHegic.sol\\\";\\nimport \\\"../../interfaces/Keep3r/IHegicKeep3r.sol\\\";\\nimport \\\"../../interfaces/IKeep3rV1Helper.sol\\\";\\nimport \\\"../../interfaces/IUniswapV2SlidingOracle.sol\\\";\\nimport \\\"../utils/Governable.sol\\\";\\nimport \\\"../utils/CollectableDust.sol\\\";\\n\\nimport \\\"./Keep3rAbstract.sol\\\";\\n\\ncontract HegicKeep3r is Governable, CollectableDust, Keep3r, IHegicKeep3r {\\n    using SafeMath for uint256;\\n\\n    address public keep3rHelper;\\n    address public slidingOracle;\\n    address public ethOptions;\\n    address public wbtcOptions;\\n\\n    uint256 public unlockGasCost;\\n    uint256 public unlockValueMultiplier;\\n\\n    address public constant KP3R = address(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address public constant WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n\\n    constructor(\\n        address _keep3r,\\n        address _keep3rHelper,\\n        address _slidingOracle,\\n        address _ethOptions,\\n        address _wbtcOptions,\\n        uint256 _unlockGasCost,\\n        uint256 _unlockValueMultiplier\\n    ) public Governable(msg.sender) CollectableDust() Keep3r(_keep3r) {\\n        keep3rHelper = _keep3rHelper;\\n        slidingOracle = _slidingOracle;\\n        ethOptions = _ethOptions;\\n        wbtcOptions = _wbtcOptions;\\n        unlockGasCost = _unlockGasCost;\\n        unlockValueMultiplier = _unlockValueMultiplier;\\n    }\\n\\n    // Getters\\n    function name() external pure override returns (string memory) {\\n        return \\\"Hegic Keep3r\\\";\\n    }\\n\\n    function ethOptionsUnlockable(uint256[] calldata optionIDs) external override view returns (bool) {\\n        uint256 _ethTotalUnlock = this.ethTotalUnlock(optionIDs);\\n\\n        // If _ethTotalUnlock is 0 that means that one of the options was\\n        // not in the correct state.\\n        if (_ethTotalUnlock == 0) {\\n            return false;\\n        }\\n\\n        uint256 _ethPoolUsage = this.ethPoolUsage();\\n        uint256 _unlockValue = this.unlockValue(_ethTotalUnlock);\\n        uint256 _callCost = this.ethCallCost(optionIDs.length);\\n        uint256 _weightedUnlockValue = this.weightedUnlockValue(_ethPoolUsage, _unlockValue);\\n\\n        return _callCost <= _weightedUnlockValue;\\n    }\\n\\n    function wbtcOptionsUnlockable(uint256[] calldata optionIDs) external override view returns (bool) {\\n        uint256 _wbtcTotalUnlock = this.wbtcTotalUnlock(optionIDs);\\n\\n        // If _wbtcTotalUnlock is 0 that means that one of the options was\\n        // not in the correct state.\\n        if (_wbtcTotalUnlock == 0) {\\n            return false;\\n        }\\n\\n        uint256 _wbtcPoolUsage = this.wbtcPoolUsage();\\n        uint256 _unlockValue = this.unlockValue(_wbtcTotalUnlock);\\n        uint256 _callCost = this.wbtcCallCost(optionIDs.length);\\n        uint256 _weightedUnlockValue = this.weightedUnlockValue(_wbtcPoolUsage, _unlockValue);\\n\\n        return _callCost <= _weightedUnlockValue;\\n    }\\n\\n    // Keep3r actions\\n    function ethUnlockAll(uint256[] calldata optionIDs) external override paysKeeper {\\n        require(this.ethOptionsUnlockable(optionIDs));\\n        IHegicOptions(ethOptions).unlockAll(optionIDs);\\n    }\\n\\n    function wbtcUnlockAll(uint256[] calldata optionIDs) external override paysKeeper {\\n      require(this.wbtcOptionsUnlockable(optionIDs));\\n      IHegicOptions(wbtcOptions).unlockAll(optionIDs);\\n    }\\n\\n    // Helpers\\n    function weightedUnlockValue(uint256 poolUsage, uint256 unlockValue) external override view returns (uint256) {\\n        require(poolUsage <= 80);\\n        return poolUsage.mul(unlockValue).div(80);\\n    }\\n\\n    function unlockValue(uint256 totalUnlock) external override view returns (uint256) {\\n        return totalUnlock.mul(unlockValueMultiplier).div(100);\\n    }\\n\\n    function ethCallCost(uint256 optionsQty) external override view returns (uint256) {\\n        require(optionsQty > 0);\\n\\n        uint256 kp3rCallCost = IKeep3rV1Helper(keep3rHelper).getQuoteLimit(optionsQty.mul(unlockGasCost));\\n        return IUniswapV2SlidingOracle(slidingOracle).current(KP3R, kp3rCallCost, WETH);\\n    }\\n\\n    function wbtcCallCost(uint256 optionsQty) external override view returns (uint256) {\\n        uint256 _ethCallCost = this.ethCallCost(optionsQty);\\n        return IUniswapV2SlidingOracle(slidingOracle).current(WETH, _ethCallCost, WBTC);\\n    }\\n\\n    function ethPoolUsage() external override view returns (uint256) {\\n        return _poolUsage(ethOptions);\\n    }\\n\\n    function wbtcPoolUsage() external override view returns (uint256) {\\n        return _poolUsage(wbtcOptions);\\n    }\\n\\n    function _poolUsage(address hegic) internal view returns (uint256) {\\n        address pool = IHegicOptions(hegic).pool();\\n        uint256 availableBalance = IHegicPool(pool).availableBalance();\\n        uint256 totalBalance = IHegicPool(pool).totalBalance();\\n\\n        // Shouldn't happen\\n        if (totalBalance == 0) {\\n            return 0;\\n        }\\n\\n        return uint256(100).sub(availableBalance.mul(100).div(totalBalance));\\n    }\\n\\n    function ethTotalUnlock(uint256[] calldata optionIDs) external override view returns (uint256) {\\n        return _totalUnlock(ethOptions, optionIDs);\\n    }\\n\\n    function wbtcTotalUnlock(uint256[] calldata optionIDs) external override view returns (uint256) {\\n        return _totalUnlock(wbtcOptions, optionIDs);\\n    }\\n\\n    function _totalUnlock(address hegic, uint256[] calldata optionIDs) internal view returns (uint256) {\\n        uint256 len = optionIDs.length;\\n        uint256 totalUnlock = 0;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            Option memory option = IHegicOptions(hegic).options(optionIDs[i]);\\n\\n            // if one of the options is not active or not expired, do not continue\\n            if (option.state != State.Active || option.expiration >= block.timestamp) {\\n                return 0;\\n            }\\n\\n            totalUnlock += option.lockedAmount;\\n            totalUnlock += option.premium;\\n        }\\n\\n        return totalUnlock;\\n    }\\n\\n    // Governable\\n    function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n        _setPendingGovernor(_pendingGovernor);\\n    }\\n\\n    function acceptGovernor() external override onlyPendingGovernor {\\n        _acceptGovernor();\\n    }\\n\\n    // Setters\\n    function setUnlockValueMultiplier(uint256 _unlockValueMultiplier) external override onlyGovernor {\\n        require(_unlockValueMultiplier > 0 && _unlockValueMultiplier < 100);\\n        unlockValueMultiplier = _unlockValueMultiplier;\\n        emit UnlockValueMultiplierSet(_unlockValueMultiplier);\\n    }\\n\\n    function setUnlockGasCost(uint256 _unlockGasCost) external override onlyGovernor {\\n        unlockGasCost = _unlockGasCost;\\n        emit UnlockGasCostSet(_unlockGasCost);\\n    }\\n\\n    function setKeep3r(address _keep3r) external override onlyGovernor {\\n        _setKeep3r(_keep3r);\\n        emit Keep3rSet(_keep3r);\\n    }\\n\\n    function setKeep3rHelper(address _keep3rHelper) external override onlyGovernor {\\n        keep3rHelper = _keep3rHelper;\\n        emit Keep3rHelperSet(_keep3rHelper);\\n    }\\n\\n    function setSlidingOracle(address _slidingOracle) external override onlyGovernor {\\n        slidingOracle = _slidingOracle;\\n        emit SlidingOracleSet(_slidingOracle);\\n    }\\n\\n    // Collectable Dust\\n    function sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyGovernor {\\n        _sendDust(_to, _token, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/contracts/keep3r/Keep3rAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"../../interfaces/IKeep3rV1.sol\\\";\\n\\nabstract contract Keep3r {\\n    IKeep3rV1 public keep3r;\\n\\n    constructor(address _keep3r) public {\\n        _setKeep3r(_keep3r);\\n    }\\n\\n    function _setKeep3r(address _keep3r) internal {\\n        keep3r = IKeep3rV1(_keep3r);\\n    }\\n\\n    function _isKeeper() internal {\\n        require(keep3r.isKeeper(msg.sender), \\\"keep3r::isKeeper:keeper-is-not-registered\\\");\\n    }\\n\\n    // Only checks if caller is a valid keeper, payment should be handled manually\\n    modifier onlyKeeper() {\\n        _isKeeper();\\n        _;\\n    }\\n\\n    // Checks if caller is a valid keeper, handles default payment after execution\\n    modifier paysKeeper() {\\n        _isKeeper();\\n        _;\\n        keep3r.worked(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/contracts/utils/CollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/utils/ICollectableDust.sol\\\";\\n\\nabstract contract CollectableDust is ICollectableDust {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    EnumerableSet.AddressSet internal protocolTokens;\\n\\n    constructor() public {}\\n\\n    function _addProtocolToken(address _token) internal {\\n        require(!protocolTokens.contains(_token), \\\"collectable-dust::token-is-part-of-the-protocol\\\");\\n        protocolTokens.add(_token);\\n    }\\n\\n    function _removeProtocolToken(address _token) internal {\\n        require(protocolTokens.contains(_token), \\\"collectable-dust::token-not-part-of-the-protocol\\\");\\n        protocolTokens.remove(_token);\\n    }\\n\\n    function _sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0), \\\"collectable-dust::cant-send-dust-to-zero-address\\\");\\n        require(!protocolTokens.contains(_token), \\\"collectable-dust::token-is-part-of-the-protocol\\\");\\n        if (_token == ETH_ADDRESS) {\\n            payable(_to).transfer(_amount);\\n        } else {\\n            IERC20(_token).transfer(_to, _amount);\\n        }\\n        emit DustSent(_to, _token, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/contracts/utils/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"../../interfaces/utils/IGovernable.sol\\\";\\n\\nabstract contract Governable is IGovernable {\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    constructor(address _governor) public {\\n        require(_governor != address(0), \\\"governable::governor-should-not-be-zero-address\\\");\\n        governor = _governor;\\n    }\\n\\n    function _setPendingGovernor(address _pendingGovernor) internal {\\n        require(_pendingGovernor != address(0), \\\"governable::pending-governor-should-not-be-zero-addres\\\");\\n        pendingGovernor = _pendingGovernor;\\n        emit PendingGovernorSet(_pendingGovernor);\\n    }\\n\\n    function _acceptGovernor() internal {\\n        governor = pendingGovernor;\\n        pendingGovernor = address(0);\\n        emit GovernorAccepted();\\n    }\\n\\n    modifier onlyGovernor {\\n        require(msg.sender == governor, \\\"governable::only-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingGovernor {\\n        require(msg.sender == pendingGovernor, \\\"governable::only-pending-governor\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/IKeep3rV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IKeep3rV1 {\\n    function KPRH() external returns (address);\\n\\n    function name() external returns (string memory);\\n\\n    function isKeeper(address) external returns (bool);\\n\\n    function worked(address keeper) external;\\n\\n    function addKPRCredit(address job, uint256 amount) external;\\n\\n    function addJob(address job) external;\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/IKeep3rV1Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IKeep3rV1Helper {\\n    function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/IUniswapV2SlidingOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IUniswapV2SlidingOracle {\\n    function current(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/Keep3r/IHegicKeep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IHegicKeep3r {\\n    event Keep3rSet(address keep3r);\\n    event Keep3rHelperSet(address keep3rHelper);\\n    event SlidingOracleSet(address slidingOracle);\\n    event UnlockGasCostSet(uint256 unlockGasCost);\\n    event UnlockValueMultiplierSet(uint256 unlockValueMultiplier);\\n\\n    // Actions by Keeper\\n    event EthOptionUnlockedByKeeper(uint256 _optionId);\\n    event WbtcOptionUnlockedByKeeper(uint256 _optionId);\\n\\n    // Setters\\n    function setKeep3r(address _keep3r) external;\\n    function setKeep3rHelper(address _keep3rHelper) external;\\n    function setSlidingOracle(address _slidingOracle) external;\\n    function setUnlockGasCost(uint256 _unlockGasCost) external;\\n    function setUnlockValueMultiplier(uint256 _unlockValueMultiplier) external;\\n\\n    // Getters\\n    function ethOptionsUnlockable(uint256[] calldata optionIDs) external view returns (bool);\\n    function wbtcOptionsUnlockable(uint256[] calldata optionIDs) external view returns (bool);\\n\\n    // Keep3r actions\\n    function ethUnlockAll(uint256[] calldata optionIDs) external;\\n    function wbtcUnlockAll(uint256[] calldata optionIDs) external;\\n\\n    // Helpers\\n    function weightedUnlockValue(uint256 poolUsage, uint256 unlockValue) external view returns (uint256);\\n    function unlockValue(uint256 totalUnlock) external view returns (uint256);\\n    function ethCallCost(uint256 optionsQty) external view returns (uint256);\\n    function wbtcCallCost(uint256 optionsQty) external view returns (uint256);\\n    function ethPoolUsage() external view returns (uint256);\\n    function wbtcPoolUsage() external view returns (uint256);\\n\\n    function ethTotalUnlock(uint256[] calldata optionIDs) external view returns (uint256);\\n    function wbtcTotalUnlock(uint256[] calldata optionIDs) external view returns (uint256);\\n\\n    // Name of the Keep3r\\n    function name() external pure returns (string memory);\\n\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/hegic/IHegic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nenum State {Inactive, Active, Exercised, Expired}\\nenum OptionType {Invalid, Put, Call}\\n\\nstruct Option {\\n    State state;\\n    address payable holder;\\n    uint256 strike;\\n    uint256 amount;\\n    uint256 lockedAmount;\\n    uint256 premium;\\n    uint256 expiration;\\n    OptionType optionType;\\n}\\n\\ninterface IHegicPool {\\n    function totalBalance() external view returns (uint256 amount);\\n\\n    function availableBalance() external view returns (uint256 amount);\\n}\\n\\ninterface IHegicOptions {\\n\\n    function pool() external view returns (address poolAddress);\\n\\n    function unlockAll(uint256[] calldata optionsIDs) external;\\n\\n    function options(uint256) external view returns (Option memory);\\n\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/utils/ICollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface ICollectableDust {\\n    event DustSent(address _to, address token, uint256 amount);\\n\\n    function sendDust(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/csessa/dev/yearn-truffle-verify2/interfaces/utils/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IGovernable {\\n    event PendingGovernorSet(address pendingGovernor);\\n    event GovernorAccepted();\\n\\n    function setPendingGovernor(address _pendingGovernor) external;\\n\\n    function acceptGovernor() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slidingOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethOptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcOptions\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockGasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockValueMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"EthOptionUnlockedByKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keep3rHelper\",\"type\":\"address\"}],\"name\":\"Keep3rHelperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keep3r\",\"type\":\"address\"}],\"name\":\"Keep3rSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slidingOracle\",\"type\":\"address\"}],\"name\":\"SlidingOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockGasCost\",\"type\":\"uint256\"}],\"name\":\"UnlockGasCostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockValueMultiplier\",\"type\":\"uint256\"}],\"name\":\"UnlockValueMultiplierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"WbtcOptionUnlockedByKeeper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionsQty\",\"type\":\"uint256\"}],\"name\":\"ethCallCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethOptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"ethOptionsUnlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPoolUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"ethTotalUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"ethUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slidingOracle\",\"type\":\"address\"}],\"name\":\"setSlidingOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockGasCost\",\"type\":\"uint256\"}],\"name\":\"setUnlockGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockValueMultiplier\",\"type\":\"uint256\"}],\"name\":\"setUnlockValueMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slidingOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnlock\",\"type\":\"uint256\"}],\"name\":\"unlockValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockValueMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionsQty\",\"type\":\"uint256\"}],\"name\":\"wbtcCallCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcOptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"wbtcOptionsUnlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcPoolUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"wbtcTotalUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"wbtcUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockValue\",\"type\":\"uint256\"}],\"name\":\"weightedUnlockValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HegicKeep3r","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ceb5cb57c4d4e2b2433641b95dd330a33185a4400000000000000000000000093747c4260e64507a213b4016e1d435c9928617f00000000000000000000000073353801921417f465377c8d898c6f4c0270282c000000000000000000000000efc0eeadc1132a12c9487d800112693bf49ecfa20000000000000000000000003961245db602ed7c03eeccda33ea3846bd8723bd000000000000000000000000000000000000000000000000000000000002ab980000000000000000000000000000000000000000000000000000000000000005","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}