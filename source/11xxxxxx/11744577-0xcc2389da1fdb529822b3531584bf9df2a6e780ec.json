{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\n\n\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value); \r\n}\n\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\n\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { \r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable){\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount,\"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success,\"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\n\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom( IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance( IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance( IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value,\"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // solhint-disable-next-line max-line-length\r\n            require( abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\n\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n}\n\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\n\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor() internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require( newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\n\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\n\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function withdraw(uint256) external;\r\n}\n\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);    \r\n}\n\ninterface IUniswapV2Router02 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function quote( uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n    function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\n\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n    function token1() external pure returns (address);\r\n    function getReserves() external view returns ( uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\n\ninterface Iuniswap {\r\n    function tokenToTokenTransferInput(    // converting ERC20 to ERC20 and transfer\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256 eth_bought);\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256 tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256 tokens_bought);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\n\n// SPDX-License-Identifier: unlicensed\ncontract UniswapV2AddLiquidity is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public stopped = false;\r\n    uint16 public goodwill = 0;\r\n\r\n    address public goodwillAddress                              = address(0);\r\n    address private constant wethTokenAddress                   = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint256 private constant deadline                           = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n       \r\n    IUniswapV2Factory private constant UniSwapV2FactoryAddress  = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUniswapV2Router02 private constant uniswapRouter           = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\r\n    constructor(uint16 _goodwill, address payable _goodwillAddress) public {\r\n        goodwill = _goodwill;\r\n        goodwillAddress = _goodwillAddress;\r\n    }\r\n\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function AddLiquidity(\r\n        address _FromTokenContractAddress, //ERC20 addr, address(0x00) if ether\r\n        address _pairAddress,\r\n        uint256 _amount, //ERC20 tokens amount to invest\r\n        uint256 _minPoolTokens, //Reverts if less tokens received than this\r\n        address _allowanceTarget, //Spender for the first swap\r\n        address _swapTarget, //swap address\r\n        bytes calldata swapData // swap call\r\n    ) external payable nonReentrant stopInEmergency returns (uint256) {\r\n        uint256 toInvest;\r\n\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            require(msg.value > 0, \"Error: ETH not sent\");\r\n            toInvest = msg.value;\r\n        } else {\r\n            require(msg.value == 0, \"Error: ETH sent\");\r\n            require(_amount > 0, \"Error: Invalid ERC amount\");\r\n            IERC20(_FromTokenContractAddress).safeTransferFrom(msg.sender, address(this), _amount);\r\n            toInvest = _amount;\r\n        }\r\n\r\n        uint256 LPBought = _performAddLiquidity(\r\n            _FromTokenContractAddress,\r\n            _pairAddress,\r\n            toInvest,\r\n            _allowanceTarget,\r\n            _swapTarget,\r\n            swapData\r\n        );\r\n\r\n        require(LPBought >= _minPoolTokens, \"ERR: High Slippage\");\r\n        uint256 goodwillPortion = _transferGoodwill(_pairAddress, LPBought);\r\n        IERC20(_pairAddress).safeTransfer(msg.sender, SafeMath.sub(LPBought, goodwillPortion));\r\n  \r\n        return SafeMath.sub(LPBought, goodwillPortion);\r\n    }\r\n\r\n    function _getPairTokens(address _pairAddress) internal pure returns (address token0, address token1){\r\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\r\n        token0 = uniPair.token0();\r\n        token1 = uniPair.token1();\r\n    }\r\n\r\n    function _performAddLiquidity(\r\n        address _FromTokenContractAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes memory swapData\r\n    ) internal returns (uint256) {\r\n        uint256 intermediateAmt;\r\n        address intermediateToken;\r\n        (address _ToUniswapToken0, address _ToUniswapToken1) = _getPairTokens( _pairAddress);\r\n           \r\n        if (_FromTokenContractAddress != _ToUniswapToken0 && _FromTokenContractAddress != _ToUniswapToken1) {\r\n            (intermediateAmt, intermediateToken) = _fillQuote(\r\n                _FromTokenContractAddress,\r\n                _pairAddress,\r\n                _amount,\r\n                _allowanceTarget,\r\n                _swapTarget,\r\n                swapData\r\n            );\r\n        } else {\r\n            intermediateToken = _FromTokenContractAddress;\r\n            intermediateAmt = _amount;\r\n        }\r\n\r\n        (uint256 token0Bought, uint256 token1Bought) = _swapIntermediate(\r\n            intermediateToken,\r\n            _ToUniswapToken0,\r\n            _ToUniswapToken1,\r\n            intermediateAmt\r\n        );\r\n\r\n        return _uniDeposit(\r\n            _ToUniswapToken0,\r\n            _ToUniswapToken1,\r\n            token0Bought,\r\n            token1Bought\r\n        );\r\n    }\r\n\r\n    function _uniDeposit(address _ToUnipoolToken0, address _ToUnipoolToken1, uint256 token0Bought, uint256 token1Bought) internal returns (uint256) {\r\n        IERC20(_ToUnipoolToken0).safeApprove(address(uniswapRouter), 0);\r\n        IERC20(_ToUnipoolToken1).safeApprove(address(uniswapRouter), 0);\r\n        IERC20(_ToUnipoolToken0).safeApprove(address(uniswapRouter), token0Bought);\r\n        IERC20(_ToUnipoolToken1).safeApprove(address(uniswapRouter), token1Bought);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 LP) = uniswapRouter.addLiquidity(\r\n            _ToUnipoolToken0,\r\n            _ToUnipoolToken1,\r\n            token0Bought,\r\n            token1Bought,\r\n            1,\r\n            1,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        if (token0Bought.sub(amountA) > 0) {\r\n            IERC20(_ToUnipoolToken0).safeTransfer(msg.sender, token0Bought.sub(amountA)); \r\n        }\r\n\r\n        if (token1Bought.sub(amountB) > 0) {\r\n            IERC20(_ToUnipoolToken1).safeTransfer( msg.sender, token1Bought.sub(amountB)); \r\n        }\r\n\r\n        return LP;\r\n    }\r\n\r\n    function _fillQuote(\r\n        address _fromTokenAddress,\r\n        address _pairAddress,\r\n        uint256 _amount,\r\n        address _allowanceTarget,\r\n        address _swapTarget,\r\n        bytes memory swapCallData\r\n    ) internal returns (uint256 amountBought, address intermediateToken) {\r\n        uint256 valueToSend;\r\n        if (_fromTokenAddress == address(0)) {\r\n            valueToSend = _amount;\r\n        } else {\r\n            IERC20 fromToken = IERC20(_fromTokenAddress);\r\n            fromToken.safeApprove(address(_allowanceTarget), 0);\r\n            fromToken.safeApprove(address(_allowanceTarget), _amount);\r\n        }\r\n\r\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\r\n        IERC20 token0 = IERC20(_token0);\r\n        IERC20 token1 = IERC20(_token1);\r\n        uint256 initialBalance0 = token0.balanceOf(address(this));\r\n        uint256 initialBalance1 = token1.balanceOf(address(this));\r\n\r\n        (bool success, ) = _swapTarget.call.value(valueToSend)(swapCallData);\r\n        require(success, \"Error Swapping Tokens 1\");\r\n\r\n\r\n        uint256 finalBalance0 = token0.balanceOf(address(this)).sub(initialBalance0);\r\n        uint256 finalBalance1 = token1.balanceOf(address(this)).sub(initialBalance1);\r\n            \r\n\r\n        if (finalBalance0 > finalBalance1) {\r\n            amountBought = finalBalance0;\r\n            intermediateToken = _token0;\r\n        } else {\r\n            amountBought = finalBalance1;\r\n            intermediateToken = _token1;\r\n        }\r\n\r\n        require(amountBought > 0, \"Swapped to Invalid Intermediate\");\r\n    }\r\n\r\n    function _swapIntermediate(address _toContractAddress, address _ToUnipoolToken0, address _ToUnipoolToken1,uint256 _amount) internal returns (uint256 token0Bought, uint256 token1Bought) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1));\r\n        \r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (_toContractAddress == _ToUnipoolToken0) {\r\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\r\n\r\n            if (amountToSwap <= 0) amountToSwap = _amount.div(2);\r\n            token1Bought = _token2Token(_toContractAddress, _ToUnipoolToken1, amountToSwap);\r\n            token0Bought = _amount.sub(amountToSwap);\r\n        } else {\r\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\r\n\r\n            if (amountToSwap <= 0) amountToSwap = _amount.div(2);\r\n            token0Bought = _token2Token(_toContractAddress, _ToUnipoolToken0, amountToSwap);\r\n            token1Bought = _amount.sub(amountToSwap);\r\n        }\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256){\r\n        return Babylonian.sqrt(reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))).sub(reserveIn.mul(1997)) / 1994;           \r\n    }\r\n\r\n    function _token2Token(address _FromTokenContractAddress, address _ToTokenContractAddress, uint256 tokens2Trade) internal returns (uint256 tokenBought) {\r\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\r\n            return tokens2Trade;\r\n        }\r\n\r\n        IERC20(_FromTokenContractAddress).safeApprove(address(uniswapRouter), 0);\r\n        IERC20(_FromTokenContractAddress).safeApprove(address(uniswapRouter), tokens2Trade);\r\n\r\n        address pair = UniSwapV2FactoryAddress.getPair(_FromTokenContractAddress, _ToTokenContractAddress);\r\n            \r\n        require(pair != address(0), \"No Swap Available\");\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = _FromTokenContractAddress;\r\n        path[1] = _ToTokenContractAddress;\r\n\r\n        tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n            tokens2Trade,\r\n            1,\r\n            path,\r\n            address(this),\r\n            deadline\r\n        )[path.length - 1];\r\n\r\n        require(tokenBought > 0, \"Error Swapping Tokens 2\");\r\n    }\r\n\r\n    function _transferGoodwill(address _tokenContractAddress, uint256 tokens2Trade) internal returns (uint256 goodwillPortion) {\r\n        goodwillPortion = SafeMath.div(SafeMath.mul(tokens2Trade, goodwill), 10000);\r\n\r\n        if (goodwillPortion == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20(_tokenContractAddress).safeTransfer(goodwillAddress, goodwillPortion); \r\n    }\r\n\r\n    function setNewGoodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(_new_goodwill >= 0 && _new_goodwill < 10000,\"GoodWill Value not allowed\");\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.safeTransfer(owner(), qty);\r\n    }\r\n\r\n    function setNewGoodwillAddress(address _newGoodwillAddress) public onlyOwner{\r\n        goodwillAddress = _newGoodwillAddress;\r\n    }\r\n\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_goodwillAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"AddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"setNewGoodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGoodwillAddress\",\"type\":\"address\"}],\"name\":\"setNewGoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV2AddLiquidity","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ebc02e71cd8c645129c0750c9a50a747f4598da","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}