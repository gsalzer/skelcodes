{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/AddressStringUtil.sol@v1.1.4\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary AddressStringUtil {\r\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\r\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\r\n        require(len % 2 == 0 && len > 0 && len <= 40, \"AddressStringUtil: INVALID_LEN\");\r\n\r\n        bytes memory s = new bytes(len);\r\n        uint addrNum = uint(addr);\r\n        for (uint i = 0; i < len / 2; i++) {\r\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\r\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\r\n            // first hex character is the most significant 4 bits\r\n            uint8 hi = b >> 4;\r\n            // second hex character is the least significant 4 bits\r\n            uint8 lo = b - (hi << 4);\r\n            s[2 * i] = char(hi);\r\n            s[2 * i + 1] = char(lo);\r\n        }\r\n        return string(s);\r\n    }\r\n\r\n    // hi and lo are only 4 bits and between 0 and 16\r\n    // this method converts those values to the unicode/ascii code point for the hex representation\r\n    // uses upper case for the characters\r\n    function char(uint8 b) pure private returns (byte c) {\r\n        if (b < 10) {\r\n            return byte(b + 0x30);\r\n        } else {\r\n            return byte(b + 0x37);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/SafeERC20Namer.sol@v1.1.4\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\r\n// this library will always produce a string symbol to represent the token\r\nlibrary SafeERC20Namer {\r\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = x[j];\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // assumes the data is in position 2\r\n    function parseStringData(bytes memory b) pure private returns (string memory) {\r\n        uint charCount = 0;\r\n        // first parse the charCount out of the data\r\n        for (uint i = 32; i < 64; i++) {\r\n            charCount <<= 8;\r\n            charCount += uint8(b[i]);\r\n        }\r\n\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint i = 0; i < charCount; i++) {\r\n            bytesStringTrimmed[i] = b[i + 64];\r\n        }\r\n\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // uses a heuristic to produce a token name from the address\r\n    // the heuristic returns the full hex of the address string in upper case\r\n    function addressToName(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 40);\r\n    }\r\n\r\n    // uses a heuristic to produce a token symbol from the address\r\n    // the heuristic returns the first 6 hex of the address string in upper case\r\n    function addressToSymbol(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 6);\r\n    }\r\n\r\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\r\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\r\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\r\n        // if not implemented, or returns empty data, return empty string\r\n        if (!success || data.length == 0) {\r\n            return \"\";\r\n        }\r\n        // bytes32 data always has length 32\r\n        if (data.length == 32) {\r\n            bytes32 decoded = abi.decode(data, (bytes32));\r\n            return bytes32ToString(decoded);\r\n        } else if (data.length > 64) {\r\n            return abi.decode(data, (string));\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\r\n    function tokenSymbol(address token) internal view returns (string memory) {\r\n        // 0x95d89b41 = bytes4(keccak256(\"symbol()\"))\r\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\r\n        if (bytes(symbol).length == 0) {\r\n            // fallback to 6 uppercase hex of address\r\n            return addressToSymbol(token);\r\n        }\r\n        return symbol;\r\n    }\r\n\r\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\r\n    function tokenName(address token) internal view returns (string memory) {\r\n        // 0x06fdde03 = bytes4(keccak256(\"name()\"))\r\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\r\n        if (bytes(name).length == 0) {\r\n            // fallback to full hex of address\r\n            return addressToName(token);\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/v612/ICOREGlobals.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREGlobalsAddress() external view returns (address);\r\n    function COREDelegatorAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function COREWETHUniPair() external view returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function addDelegatorStateChangePermission(address that, bool status) external;\r\n    function isStateChangeApprovedContract(address that)  external view returns (bool);\r\n    function FannyTokenAddress() external view returns (address); \r\n    function FannyVaultAddress() external view returns (address); \r\n    function isContract(address) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol@v3.0.0\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/v612/COREForkMigrator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n\r\n\r\ninterface ICOREVault {\r\n    function addPendingRewards(uint256 _) external; \r\n}\r\n\r\ninterface IUNICORE {\r\n    function viewGovernanceLevel(address) external returns (uint8);\r\n    function setVault(address) external;\r\n    function burnFromUni(uint256) external;\r\n    function viewUNIv2() external returns (address);\r\n    function viewUniBurnRatio() external returns (uint256);\r\n    function setGovernanceLevel(address, uint8) external;\r\n    function balanceOf(address) external returns (uint256);\r\n    function setUniBurnRatio(uint256) external;\r\n    function viewwWrappedUNIv2() external returns (address);\r\n    function burnToken(uint256) external;\r\n    function totalSupply() external returns (uint256);\r\n}\r\n\r\ninterface IUNICOREVault {\r\n    function userInfo(uint,address) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface IProxyAdmin {\r\n    function owner() external returns (address);\r\n    function transferOwnership(address) external;\r\n    function upgrade(address, address) external;\r\n}\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\ninterface ILGE {\r\n    function claimLP() external;\r\n}\r\n\r\ninterface ITransferContract {\r\n    function run(address) external;\r\n}\r\n\r\ninterface ICORE {\r\n    function setShouldTransferChecker(address) external;\r\n}\r\ninterface IFIX {\r\n    function unwrapAndSendToMigrator() external;\r\n}\r\n\r\ninterface ITimelockVault {\r\n    function LPContributed(address) external view returns (uint256);\r\n}\r\ninterface ILGE3 {\r\n    function addLiquidityETH() payable external ;\r\n}\r\n\r\ncontract TENSFeeApproverPermanent {\r\n    address public tokenETHPair;\r\n    constructor() public {\r\n            tokenETHPair = 0xB1b537B7272BA1EDa0086e2f480AdCA72c0B511C;\r\n    }\r\n\r\n    function calculateAmountsAfterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n        ) public  returns (uint256 transferToAmount, uint256 transferToFeeDistributorAmount, uint256 burn)\r\n        {\r\n\r\n            // Will block all buys and liquidity removals\r\n            if(sender == tokenETHPair || recipient == tokenETHPair) {\r\n                // This is how a legend dies\r\n                require(false, \"TENS is deprecated.\");\r\n            }\r\n\r\n            // No fees \r\n            // school is out\r\n            transferToAmount = amount;\r\n        \r\n        }\r\n}\r\n\r\n\r\ncontract COREForkMigrator is OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    /// EVENTS\r\n    event ETHSendToLGE(uint256);\r\n\r\n    ///Variables\r\n    bool public LPClaimedFromLGE;\r\n    bool private locked;\r\n    IERC20 public  CORE;\r\n    ICOREVault public  coreVault;\r\n    IUniswapV2Factory public  uniswapFactory;\r\n    IWETH wETH;\r\n    address public  CORExWETHPair;\r\n    address payable public CORE_MULTISIG;\r\n    address public postLGELPTokenAddress;\r\n    address public Fee_Approver_Permanent;\r\n    address public Vault_Permanent;\r\n    uint256 public totalLPClaimed;\r\n    uint256 public totalETHSent;\r\n    uint256 contractStartTimestamp;\r\n\r\n    mapping (address => bool) LPClaimed;\r\n\r\n    //// UNICORE Specific Variables\r\n    bool public UNICORE_Migrated;\r\n    bool public UNICORE_Liquidity_Transfered;\r\n    address public UNICORE_Vault;\r\n    address public UNICORE_Token;\r\n    address public UNICORE_Reactor_Token; // Slit token for liquidity\r\n    uint256 public UNICORE_Snapshot_Block;\r\n    uint256 public Ether_Total_For_UNICORE_LP;\r\n    uint256 public UNICORE_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceUNICOREReactor;\r\n    mapping (address => uint256) balanceUNICOREReactorInVaultOnSnapshot;\r\n\r\n\r\n    // ENCORE Specific variables\r\n    bool public ENCORE_Liquidity_Transfered;\r\n    bool public ENCORE_Transfers_Closed;\r\n    address public ENCORE_Vault;\r\n    address public ENCORE_Vault_Timelock;\r\n    address public ENCORE_Fee_Approver;\r\n    address public ENCORE_Token;\r\n    address public ENCORE_Timelock_Vault;\r\n    address public ENCORE_Proxy_Admin;\r\n    address public ENCORE_LP_Token;\r\n    address public ENCORE_Migrator;\r\n    uint256 public Ether_Credit_Per_ENCORE_LP;\r\n    uint256 public Ether_Total_For_Encore_LP;\r\n    uint256 public ENCORE_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceENCORELP;\r\n    // No need for snapshot\r\n\r\n\r\n    /// TENS Specific functions and variables\r\n    bool public TENS_Liquidity_Transfered;\r\n    address public TENS_Vault;\r\n    address public TENS_Token;\r\n    address public TENS_Proxy_Admin;\r\n    address public TENS_LP_Token;\r\n    address public TENS_Fee_Approver_Permanent;\r\n    uint256 public Ether_Total_For_TENS_LP;\r\n    uint256 public TENS_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceTENSLP;\r\n    // No need for snapshot\r\n\r\n    address public LGE3;\r\n\r\n\r\n    uint256 public UNICORE_Ether_Given;\r\n    uint256 public ENCORE_Ether_Given;\r\n    uint256 public TENS_Ether_Given;\r\n\r\n    /// Reentrancy modifier\r\n    modifier lock() {\r\n        require(locked == false, 'CORE Migrator: Execution Locked');\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n\r\n    //Enables recieving eth\r\n    receive() external payable{\r\n    }\r\n\r\n    function setLPTokenAddress(address _token) onlyOwner public {\r\n        postLGELPTokenAddress = _token;\r\n    }\r\n\r\n    function claimLP() lock public {\r\n        require(LPClaimedFromLGE == true, \"Nothing to claim yet\");\r\n        require(LPClaimed[msg.sender] == false, \"Already Claimed\");\r\n\r\n        (uint256 owedLP, uint256 encoreCreditedEth, uint256 unicoreCreditEth, uint256 tensCreditEth) = getOwedLP(msg.sender);\r\n        require(owedLP > 0, \"nothing to claim\");\r\n        \r\n        ENCORE_Ether_Given = ENCORE_Ether_Given.add(encoreCreditedEth);\r\n        UNICORE_Ether_Given = UNICORE_Ether_Given.add(unicoreCreditEth);\r\n        TENS_Ether_Given = TENS_Ether_Given.add(tensCreditEth);\r\n\r\n        require(ENCORE_Ether_Given <= Ether_Total_For_Encore_LP, \"Sanity failure 1 check, please contact an admin immediately\");\r\n        require(UNICORE_Ether_Given <= Ether_Total_For_UNICORE_LP, \"Sanity failure 2 check, please contact an admin immediately\");\r\n        require(TENS_Ether_Given <= Ether_Total_For_TENS_LP, \"Sanity failure 3 check, please contact an admin immediately\");\r\n\r\n        LPClaimed[msg.sender] = true;\r\n        require(IERC20(postLGELPTokenAddress).transfer(msg.sender, owedLP), \"Transfer FAILED\");\r\n    }\r\n\r\n    function getOwedLP(address user) public view returns (uint256 LPDebtForUser, \r\n            uint256 encoreCreditedEth, uint256 unicoreCreditedEth,uint256 tensCreditedEth) {\r\n\r\n        if(postLGELPTokenAddress == address (0)) return (0,0,0,0);\r\n        if(LPClaimedFromLGE == false) return (0,0,0,0);\r\n        if(LPClaimed[msg.sender] == true) return (0,0,0,0);\r\n\r\n        uint256 balanceUNICOREUser = viewCreditedUNICOREReactors(user);\r\n        uint256 balanceENCOREUser = viewCreditedENCORETokens(user);\r\n        uint256 balanceTENSUser = viewCreditedTENSTokens(user);\r\n\r\n        // console.log(\"balanceUNICOREUser\",balanceUNICOREUser);\r\n        // console.log(\"balanceENCOREUser\",balanceENCOREUser);\r\n        // console.log(\"balanceTENSUser\",balanceTENSUser);\r\n\r\n\r\n        if(balanceUNICOREUser == 0 && balanceENCOREUser == 0 && balanceTENSUser == 0) return (0,0,0,0);\r\n\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        uint256 totalETHEquivalent;\r\n\r\n        if(balanceUNICOREUser > 0){\r\n            unicoreCreditedEth = Ether_Total_For_UNICORE_LP.mul(balanceUNICOREUser).div(UNICORE_Total_LP_Supply);\r\n            totalETHEquivalent = unicoreCreditedEth;\r\n        }\r\n\r\n        if(balanceENCOREUser > 0){\r\n            encoreCreditedEth = Ether_Total_For_Encore_LP.mul(balanceENCOREUser).div(ENCORE_Total_LP_Supply);             \r\n            totalETHEquivalent = totalETHEquivalent.add(encoreCreditedEth);\r\n\r\n        }\r\n\r\n        if(balanceTENSUser > 0){\r\n            tensCreditedEth = Ether_Total_For_TENS_LP.mul(balanceTENSUser).div(TENS_Total_LP_Supply);\r\n            totalETHEquivalent = totalETHEquivalent.add(tensCreditedEth);\r\n        }\r\n\r\n        // Eg. We get 10 total ETH equivalent\r\n        // Times total LP claimed \r\n        // Divided total ETH gotten\r\n        LPDebtForUser = totalETHEquivalent.mul(totalLPClaimed).div(totalETH);\r\n        // console.log(\"totalETHEquivalent for user is\",totalETHEquivalent);\r\n        // console.log(\"totalLPClaimed is\",totalLPClaimed);\r\n        // console.log(\"LPDebtForUser is\", LPDebtForUser);\r\n        // console.log(block.timestamp);\r\n    }\r\n\r\n\r\n    ////////////\r\n    /// Unicore specific functions\r\n    //////////\r\n\r\n    function endClaimablePeriod() onlyOwner public {\r\n        require(block.timestamp > (1607860962 + 2 weeks), \"Time is not up yet\");\r\n        uint256 LPLeft = IERC20(postLGELPTokenAddress).balanceOf(address(this));\r\n        rescueUnsupportedTokens(postLGELPTokenAddress, LPLeft);\r\n    }\r\n\r\n\r\n    function getSecondsLeftToClaimLP() public view returns (uint256) {\r\n        return (1607860962 + 2 weeks) - block.timestamp;\r\n    }\r\n\r\n    function snapshotUNICORE(address[] memory _addresses, uint256[] memory balances) onlyOwner public {\r\n        \r\n        uint256 length = _addresses.length;\r\n        require(length == balances.length, \"Wrong input\");\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            balanceUNICOREReactorInVaultOnSnapshot[_addresses[i]] = balances[i];\r\n        }\r\n    }\r\n\r\n\r\n    function viewCreditedUNICOREReactors(address person) public view returns (uint256) {\r\n        return balanceUNICOREReactorInVaultOnSnapshot[person].add(balanceUNICOREReactor[person]);\r\n    }\r\n\r\n    \r\n    ////////////\r\n    /// ENCORE specific functions\r\n    //////////\r\n    function viewCreditedENCORETokens(address person) public view returns (uint256) {\r\n            (uint256 userAmount, ) = IUNICOREVault(ENCORE_Vault).userInfo(0, person);\r\n            uint256 userAmountTimelock = ITimelockVault(ENCORE_Vault_Timelock).LPContributed(person);\r\n            return balanceENCORELP[person].add(userAmount).add(userAmountTimelock);\r\n    }\r\n\r\n\r\n    ////////////\r\n    /// TENS specific functions\r\n    //////////\r\n    function viewCreditedTENSTokens(address person) public view returns (uint256) {\r\n\r\n        (uint256 userAmount, ) = IUNICOREVault(TENS_Vault).userInfo(0, person);\r\n        return balanceTENSLP[person].add(userAmount);\r\n    }\r\n\r\n\r\n  \r\n    ///////////////////\r\n    //// Helper functions\r\n    //////////////////\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FA Controller: TRANSFER_FAILED');\r\n    }\r\n\r\n\r\n\r\n    // A function that lets owner remove any tokens from this addrss\r\n    // note this address shoudn't hold any tokens\r\n    // And if it does that means someting already went wrong or someone send them to this address\r\n    function rescueUnsupportedTokens(address token, uint256 amt) public onlyOwner {\r\n        IERC20(token).transfer(CORE_MULTISIG, amt);\r\n    }\r\n\r\n   \r\n\r\n    function sendETHToTreasury(uint256 amt, address payable to) onlyOwner public {\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        require(totalETHSent == totalETH, \"Still money to send to LGE\");\r\n        require(to != address(0),\" no \");\r\n        sendETH(to, amt);\r\n    }\r\n\r\n    function sendETH(address payable to, uint256 amt) internal {\r\n        //\r\n        // throw exception on failure\r\n        to.transfer(amt);\r\n    }\r\n\r\n\r\n\r\n    function claimLPFromLGE(address lgeContract) onlyOwner public {\r\n        require(postLGELPTokenAddress != address(0), \"LP token address not set.\");\r\n        require(LPClaimedFromLGE == false, \"Already claimed\");\r\n        ILGE(lgeContract).claimLP();\r\n        \r\n        LPClaimedFromLGE = true;\r\n        totalLPClaimed = IERC20(postLGELPTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function setLGEAddress(address _LGE3) onlyOwner public {\r\n        LGE3 = _LGE3;\r\n    }\r\n\r\n}\r\ncontract fixWETH {\r\n    // 0x5DCA4093BFE88D6fD5511fb78F6a777d47314d35 migrator\r\n    address payable migrator = 0x5DCA4093BFE88D6fD5511fb78F6a777d47314d35;\r\n    IWETH wETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    receive() external payable{}\r\n\r\n    function unwrapAndSendToMigrator() public {\r\n        uint256 bal = IERC20(address(wETH)).balanceOf(address(this));\r\n        wETH.withdraw(bal);\r\n        selfdestruct(migrator);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETHSendToLGE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_MULTISIG\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORExWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Ether_Given\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Fee_Approver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_LP_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Proxy_Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Timelock_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Transfers_Closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Vault_Timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Credit_Per_ENCORE_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_Encore_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_TENS_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_UNICORE_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee_Approver_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGE3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPClaimedFromLGE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Ether_Given\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Fee_Approver_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_LP_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Proxy_Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Ether_Given\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Reactor_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Snapshot_Block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vault_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lgeContract\",\"type\":\"address\"}],\"name\":\"claimLPFromLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreVault\",\"outputs\":[{\"internalType\":\"contract ICOREVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endClaimablePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOwedLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LPDebtForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encoreCreditedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unicoreCreditedEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tensCreditedEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondsLeftToClaimLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postLGELPTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueUnsupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendETHToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LGE3\",\"type\":\"address\"}],\"name\":\"setLGEAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setLPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"snapshotUNICORE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedENCORETokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedTENSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedUNICOREReactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"COREForkMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c64f2cbe37069c430faada20bc7e635e030d2f084c1b4d78a79ea91614559a1"}]}