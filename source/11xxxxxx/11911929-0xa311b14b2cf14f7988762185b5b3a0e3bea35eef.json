{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n// Standard ERC-20 interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface GasToken {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (bool success);\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) external returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n//https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n//https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IWETH.sol\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract Whitelist {\r\n    mapping(address=>bool) whitelist;\r\n    constructor (address initOwner) {\r\n        whitelist[initOwner] = true;\r\n    }\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender] == true, \"not in whitelist\");\r\n        _;\r\n    }\r\n    function addToWhitelist(address newAddress) external onlyWhitelist() {\r\n        require(whitelist[newAddress] == false, \"already in whitelist\");\r\n        whitelist[newAddress] = true;\r\n    }\r\n}\r\n\r\ncontract GasTokenSwitcherV2 is Whitelist(tx.origin) {\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    //transfers ETH from this contract\r\n    function transferETH(address payable dest, uint256 amount) external onlyWhitelist() {\r\n        dest.transfer(amount);\r\n    }\r\n\r\n    //transfers ERC20 from this contract\r\n    function transferERC20(address tokenAddress, uint256 amountTokens, address dest) external onlyWhitelist() {\r\n        IERC20(tokenAddress).transfer(dest, amountTokens);\r\n    }\r\n\r\n    modifier discountGasToken(address burnToken) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        GasToken(burnToken).freeUpTo((gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    function mintAndBurn(address burnToken, address mintToken, uint256 newTokens)\r\n        external onlyWhitelist() discountGasToken(burnToken) {\r\n        GasToken(mintToken).mint(newTokens);\r\n    }\r\n\r\n    function burnMintSellChi(address burnToken, uint256 newTokens)\r\n        external onlyWhitelist() discountGasToken(burnToken) {\r\n        //mint CHI\r\n        GasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).mint(newTokens);\r\n        //CHI is token0 for the UniV2 ETH-CHI pool at 0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2\r\n        //emulate UniV2 getAmountOut functionality\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2).getReserves();\r\n        uint amountInWithFee = (newTokens * 997);\r\n        uint numerator = (amountInWithFee * reserve1);\r\n        uint denominator = (reserve0 * 1000) + amountInWithFee;\r\n        uint amountOut = numerator / denominator;\r\n        //transfer new CHI to UniV2 pool\r\n        IERC20(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).transfer(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2, newTokens);\r\n        //get the appropriate amount out in WETH\r\n        IUniswapV2Pair(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2).swap(newTokens, amountOut, address(this), new bytes(0));\r\n        //withdraw the WETH -- UniV2 uses WETH at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).withdraw(amountOut);\r\n    }\r\n\r\n    function burnAndDeploy(address burnToken, bytes memory data)\r\n        external onlyWhitelist() discountGasToken(burnToken) returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create(0, add(data, 32), mload(data))\r\n        }\r\n    }\r\n\r\n    function sendBatchedTransaction (address[] calldata dest, uint256[] calldata eth, bytes[] calldata hexData)\r\n        external onlyWhitelist() {\r\n        require(dest.length == eth.length && dest.length == hexData.length, \"unequal input lengths\");\r\n        for(uint256 i = 0; i < hexData.length; i++) {\r\n            (bool success,) = dest[i].call{value:eth[i]}(hexData[i]);\r\n            if (!success) revert(\"internal call failed\");\r\n        }\r\n    }\r\n\r\n    function discountBatchedTransaction (address burnToken, address[] calldata dest, uint256[] calldata eth, bytes[] calldata hexData)\r\n        external onlyWhitelist() discountGasToken(burnToken) {\r\n        require(dest.length == eth.length && dest.length == hexData.length, \"unequal input lengths\");\r\n        for(uint256 i = 0; i < hexData.length; i++) {\r\n            (bool success,) = dest[i].call{value:eth[i]}(hexData[i]);\r\n            if (!success) revert(\"internal call failed\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnAndDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokens\",\"type\":\"uint256\"}],\"name\":\"burnMintSellChi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"eth\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"hexData\",\"type\":\"bytes[]\"}],\"name\":\"discountBatchedTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokens\",\"type\":\"uint256\"}],\"name\":\"mintAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"eth\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"hexData\",\"type\":\"bytes[]\"}],\"name\":\"sendBatchedTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GasTokenSwitcherV2","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f177d84bb46f917062c3750b79fecca1c3da51f4dc206e85fc1e5b43428ce32"}]}