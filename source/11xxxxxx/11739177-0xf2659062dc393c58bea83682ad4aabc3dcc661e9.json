{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.5;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        //require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract STAKE_B2U is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct StakingInfo {\r\n        uint256 amount;\r\n        uint256 depositDate;\r\n        uint256 rewardPercent;\r\n    }\r\n\r\n    uint256 minStakeAmount = 10 * 10**18; \r\n    uint256 REWARD_DIVIDER = 10**8;\r\n    uint256 UNSTAKE_FEE = 0; // * 10**18; \r\n    uint256 CHANGE_REWARD = 1500000 * 10**18;\r\n\r\n    IERC20 stakingToken;\r\n    uint256 rewardPercent; \r\n    string name = \"Staking B2U\";\r\n\r\n    uint256 ownerTokensAmount;\r\n    address[] internal stakeholders;\r\n    mapping(address => StakingInfo[]) public stakes;\r\n\r\n    //  percent value for per second\r\n    //  set 192 if you want 2% per month reward (because it will be divided by 10^8 for getting the small float number)\r\n    //  2% per month = 2 / (30 * 24 * 60 * 60) ~ 0.00000077 (77 / 10^8)\r\n    constructor(IERC20 _stakingToken, uint256 _rewardPercent) {\r\n        stakingToken = _stakingToken;\r\n        rewardPercent = _rewardPercent;\r\n    }\r\n\r\n    event Staked(address staker, uint256 amount);\r\n    event Unstaked(address staker, uint256 amount);\r\n\r\n    function changeRewardPercent(uint256 _rewardPercent) public onlyOwner {\r\n        rewardPercent = _rewardPercent;\r\n    }\r\n\r\n    function changeMinStakeAmount(uint256 _minStakeAmount) public onlyOwner {\r\n        minStakeAmount = _minStakeAmount;\r\n    }\r\n\r\n    function totalStakes() public view returns (uint256) {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 i = 0; i < stakeholders.length; i += 1) {\r\n            for (uint256 j = 0; j < stakes[stakeholders[i]].length; j += 1)\r\n                _totalStakes = _totalStakes.add(\r\n                    stakes[stakeholders[i]][j].amount\r\n                );\r\n        }\r\n        return _totalStakes;\r\n    }\r\n\r\n    function isStakeholder(address _address)\r\n        public\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1) {\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function addStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if (!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n\r\n    function removeStakeholder(address _stakeholder) internal {\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if (_isStakeholder) {\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        }\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(_amount >= minStakeAmount);\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), _amount),\r\n            \"Stake required!\"\r\n        );\r\n        if (stakes[msg.sender].length == 0) {\r\n            addStakeholder(msg.sender);\r\n        }\r\n        \r\n        uint256 tvl = totalStakes();\r\n        if(tvl < CHANGE_REWARD) {\r\n            stakes[msg.sender].push(StakingInfo(_amount, block.timestamp, rewardPercent));\r\n            emit Staked(msg.sender, _amount);\r\n        } else {\r\n            stakes[msg.sender].push(StakingInfo(_amount, block.timestamp, 38));\r\n            emit Staked(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function unstake() public {\r\n        uint256 withdrawAmount = 0;\r\n        for (uint256 j = 0; j < stakes[msg.sender].length; j += 1) {\r\n            uint256 amount = stakes[msg.sender][j].amount;\r\n            withdrawAmount = withdrawAmount.add(amount);\r\n\r\n            uint256 rewardAmount = amount.mul(\r\n                (block.timestamp - stakes[msg.sender][j].depositDate).mul(\r\n                    stakes[msg.sender][j].rewardPercent\r\n                )\r\n            );\r\n            rewardAmount = rewardAmount.div(REWARD_DIVIDER);\r\n            withdrawAmount = withdrawAmount.add(rewardAmount.div(100));\r\n        }\r\n        \r\n        uint256 withAmount = withdrawAmount.sub(UNSTAKE_FEE);\r\n        \r\n        //require(stakingToken.transfer(owner, UNSTAKE_FEE),  \"Not enough tokens in contract!\");\r\n        \r\n        require(\r\n            stakingToken.transfer(msg.sender, withAmount),\r\n            \"Not enough tokens in contract!\"\r\n        );\r\n        delete stakes[msg.sender];\r\n        removeStakeholder(msg.sender);\r\n        emit Unstaked(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    function sendTokens(uint256 _amount) public onlyOwner {\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), _amount),\r\n            \"Transfering not approved!\"\r\n        );\r\n        ownerTokensAmount = ownerTokensAmount.add(_amount);\r\n    }\r\n\r\n    function withdrawTokens(address receiver, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        ownerTokensAmount = ownerTokensAmount.sub(_amount);\r\n        require(\r\n            stakingToken.transfer(receiver, _amount),\r\n            \"Not enough tokens on contract!\"\r\n        );\r\n    }\r\n   \r\n    function yourStakedB2U(address staker) public view returns(uint256 stakeAmountt){\r\n        require(staker != address(0), \"ERC20: sending to the zero address\");\r\n        uint256 stakeAmount = 0;\r\n        \r\n        for (uint256 j = 0; j < stakes[staker].length; j += 1) {\r\n            uint256 amount = stakes[staker][j].amount;\r\n            stakeAmount = stakeAmount.add(amount);\r\n        }\r\n        \r\n        return stakeAmount;\r\n    }\r\n    \r\n    function yourB2UBalance(address user) external view returns(uint256 B2UBalance){\r\n        require(user != address(0), \"ERC20: sending to the zero address\");\r\n        return stakingToken.balanceOf(user);\r\n    }\r\n       \r\n    function dailyStakeRewards(address _user) public view returns (uint256) {\r\n        /*uint256 amount = 0;\r\n        uint256 rewardAmount = 0;\r\n        for (uint256 j = 0; j < stakes[_user].length; j += 1) {\r\n            amount = stakes[_user][j].amount;\r\n            \r\n            uint256 rdAmount = amount.mul(\r\n                (block.timestamp - stakes[_user][j].depositDate).mul(\r\n                    stakes[_user][j].rewardPercent\r\n                )\r\n            );\r\n            \r\n            rewardAmount += rdAmount.div(REWARD_DIVIDER);\r\n            rewardAmount = rewardAmount; //.div(REWARD_DIVIDER);\r\n        }\r\n        \r\n        return rewardAmount;*/\r\n        address user = _user;\r\n        uint256 _amount = 0;\r\n        uint256 _rewardPercent = 0;\r\n        uint256 _depositeDate = 0 ;\r\n        uint256 _rewardAmount = 0;\r\n        for (uint256 i = 0; i < stakeholders.length; i += 1) {\r\n                \r\n            for (uint256 j = 0; j < stakes[user].length; j += 1)\r\n                _amount = _amount.add(\r\n                   \r\n                    stakes[user][j].amount\r\n                );\r\n            for (uint256 j = 0; j < stakes[user].length; j += 1)\r\n                _rewardPercent = _rewardPercent.add(\r\n                    stakes[user][j].rewardPercent\r\n                );\r\n            for (uint256 j = 0; j < stakes[user].length; j += 1)\r\n                _depositeDate = _depositeDate.add(\r\n                    stakes[user][j].depositDate\r\n                );   \r\n            uint256 _rewardcalculation = _amount.mul((block.timestamp - _depositeDate).mul(\r\n                _rewardPercent));\r\n                _rewardAmount =_rewardcalculation.div(REWARD_DIVIDER);\r\n                 \r\n        }   \r\n    \r\n        return _rewardAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercent\",\"type\":\"uint256\"}],\"name\":\"changeRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dailyStakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"yourB2UBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"B2UBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"yourStakedB2U\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmountt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"STAKE_B2U","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000350758e4a1256561fd0ee142dc7e0545f561fadc00000000000000000000000000000000000000000000000000000000000000c0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://737b56474b90052262b509141178703aaa2d05260c8b6463ab31d67147fce620"}]}