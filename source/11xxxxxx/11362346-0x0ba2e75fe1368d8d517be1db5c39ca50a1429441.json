{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nhttps://powerpool.finance/\r\n\r\n          wrrrw r wrr\r\n         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\r\n        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\r\n        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\r\n        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\r\n         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\r\n          wrr ww0rrrr\r\n\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/balancer-core/BConst.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract BConst {\r\n    uint public constant BONE              = 10**18;\r\n\r\n    uint public constant MIN_BOUND_TOKENS  = 2;\r\n    uint public constant MAX_BOUND_TOKENS  = 9;\r\n\r\n    uint public constant MIN_FEE           = BONE / 10**6;\r\n    uint public constant MAX_FEE           = BONE / 10;\r\n\r\n    uint public constant MIN_WEIGHT        = 1000000000;\r\n    uint public constant MAX_WEIGHT        = BONE * 50;\r\n    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\r\n    uint public constant MIN_BALANCE       = BONE / 10**12;\r\n\r\n    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\r\n\r\n    uint public constant MIN_BPOW_BASE     = 1 wei;\r\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\r\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\r\n\r\n    uint public constant MAX_IN_RATIO      = BONE / 2;\r\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\r\n}\r\n\r\n// File: contracts/balancer-core/BNum.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract BNum is BConst {\r\n\r\n    function btoi(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return a / BONE;\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * BONE;\r\n    }\r\n\r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b > 0, \"ERR_DIV_ZERO\");\r\n      return a / b;\r\n    }\r\n\r\n    // DSMath.wpow\r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : BONE;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\r\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\r\n    // of approximation of b^0.w\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint whole  = bfloor(exp);\r\n        uint remain = bsub(exp, whole);\r\n\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        // term 0:\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, BONE);\r\n        uint term = BONE;\r\n        uint sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        // term(k) = numer / denom\r\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\r\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\r\n        // continue until term is less than precision\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * BONE;\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/balancer-core/BToken.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract BTokenBase is BNum {\r\n\r\n    mapping(address => uint)                   internal _balance;\r\n    mapping(address => mapping(address=>uint)) internal _allowance;\r\n    uint internal _totalSupply;\r\n\r\n    event Approval(address indexed src, address indexed dst, uint amt);\r\n    event Transfer(address indexed src, address indexed dst, uint amt);\r\n\r\n    function _mint(uint amt) internal {\r\n        _balance[address(this)] = badd(_balance[address(this)], amt);\r\n        _totalSupply = badd(_totalSupply, amt);\r\n        emit Transfer(address(0), address(this), amt);\r\n    }\r\n\r\n    function _burn(uint amt) internal {\r\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\r\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\r\n        _totalSupply = bsub(_totalSupply, amt);\r\n        emit Transfer(address(this), address(0), amt);\r\n    }\r\n\r\n    function _move(address src, address dst, uint amt) internal {\r\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\r\n        _validateAddress(src);\r\n        _validateAddress(dst);\r\n        _balance[src] = bsub(_balance[src], amt);\r\n        _balance[dst] = badd(_balance[dst], amt);\r\n        emit Transfer(src, dst, amt);\r\n    }\r\n\r\n    function _push(address to, uint amt) internal {\r\n        _move(address(this), to, amt);\r\n    }\r\n\r\n    function _pull(address from, uint amt) internal {\r\n        _move(from, address(this), amt);\r\n    }\r\n\r\n    function _validateAddress(address addr) internal {\r\n        require(addr != address(0), \"ERR_NULL_ADDRESS\");\r\n    }\r\n}\r\n\r\ncontract BToken is BTokenBase, IERC20 {\r\n\r\n    string  internal _name;\r\n    string  internal _symbol;\r\n    uint8   private _decimals = 18;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function allowance(address src, address dst) external override view returns (uint) {\r\n        return _allowance[src][dst];\r\n    }\r\n\r\n    function balanceOf(address whom) external override view returns (uint) {\r\n        return _balance[whom];\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function approve(address dst, uint amt) external override returns (bool) {\r\n        _validateAddress(dst);\r\n        _allowance[msg.sender][dst] = amt;\r\n        emit Approval(msg.sender, dst, amt);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address dst, uint amt) external returns (bool) {\r\n        _validateAddress(dst);\r\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\r\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address dst, uint amt) external returns (bool) {\r\n        _validateAddress(dst);\r\n        uint oldValue = _allowance[msg.sender][dst];\r\n        if (amt > oldValue) {\r\n            _allowance[msg.sender][dst] = 0;\r\n        } else {\r\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\r\n        }\r\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint amt) external override returns (bool) {\r\n        _move(msg.sender, dst, amt);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amt) external override returns (bool) {\r\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\r\n        _move(src, dst, amt);\r\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\r\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\r\n            emit Approval(src, msg.sender, _allowance[src][msg.sender]);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/BMathInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface BMathInterface {\r\n  function calcInGivenOut(\r\n    uint256 tokenBalanceIn,\r\n    uint256 tokenWeightIn,\r\n    uint256 tokenBalanceOut,\r\n    uint256 tokenWeightOut,\r\n    uint256 tokenAmountOut,\r\n    uint256 swapFee\r\n  ) external pure returns (uint256 tokenAmountIn);\r\n}\r\n\r\n// File: contracts/balancer-core/BMath.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract BMath is BConst, BNum, BMathInterface {\r\n    /**********************************************************************************************\r\n    // calcSpotPrice                                                                             //\r\n    // sP = spotPrice                                                                            //\r\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\r\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\r\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint spotPrice)\r\n    {\r\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\r\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\r\n        uint ratio = bdiv(numer, denom);\r\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\r\n        return  (spotPrice = bmul(ratio, scale));\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcOutGivenIn                                                                            //\r\n    // aO = tokenAmountOut                                                                       //\r\n    // bO = tokenBalanceOut                                                                      //\r\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\r\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\r\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub(BONE, swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub(BONE, foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcInGivenOut                                                                            //\r\n    // aI = tokenAmountIn                                                                        //\r\n    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\r\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\r\n    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\r\n    // wI = tokenWeightIn           --------------------------------------------                 //\r\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        public pure override\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\r\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\r\n        uint y = bdiv(tokenBalanceOut, diff);\r\n        uint foo = bpow(y, weightRatio);\r\n        foo = bsub(foo, BONE);\r\n        tokenAmountIn = bsub(BONE, swapFee);\r\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolOutGivenSingleIn                                                                  //\r\n    // pAo = poolAmountOut         /                                              \\              //\r\n    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\r\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\r\n    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\r\n    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\r\n    // pS = poolSupply            \\\\                    tBi               /        /             //\r\n    // sF = swapFee                \\                                              /              //\r\n    **********************************************************************************************/\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint poolAmountOut)\r\n    {\r\n        // Charge the trading fee for the proportion of tokenAi\r\n        ///  which is implicitly traded to the other pool tokens.\r\n        // That proportion is (1- weightTokenIn)\r\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\r\n\r\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\r\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\r\n\r\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\r\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\r\n        return poolAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleInGivenPoolOut                                                                  //\r\n    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\r\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\r\n    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\r\n    // bI = balanceIn          tAi =  --------------------------------------------               //\r\n    // wI = weightIn                              /      wI  \\                                   //\r\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\r\n    // sF = swapFee                               \\      tW  /                                   //\r\n    **********************************************************************************************/\r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n\r\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\r\n        uint boo = bdiv(BONE, normalizedWeight);\r\n        uint tokenInRatio = bpow(poolRatio, boo);\r\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\r\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\r\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\r\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\r\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\r\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleOutGivenPoolIn                                                                  //\r\n    // tAo = tokenAmountOut            /      /                                             \\\\   //\r\n    // bO = tokenBalanceOut           /      //       pS - pAi        \\     /    1    \\      \\\\  //\r\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\r\n    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\r\n    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\r\n    // tW = totalWeight                    /     /      wO \\       \\                             //\r\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\r\n    // eF = exitFee                        \\     \\      tW /       /                             //\r\n    **********************************************************************************************/\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        uint newPoolSupply = bsub(poolSupply, poolAmountIn);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n\r\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\r\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\r\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\r\n\r\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\r\n\r\n        // charge swap fee on the output token side\r\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolInGivenSingleOut                                                                  //\r\n    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\r\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\r\n    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\r\n    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\r\n    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\r\n    // tW = totalWeight                                                                          //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint poolAmountIn)\r\n    {\r\n\r\n        // charge swap fee on the output token side\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\r\n        uint zoo = bsub(BONE, normalizedWeight);\r\n        uint zar = bmul(zoo, swapFee);\r\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\r\n\r\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\r\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\r\n\r\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\r\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        uint poolAmountIn = bsub(poolSupply, newPoolSupply);\r\n        return poolAmountIn;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPoolRestrictions.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IPoolRestrictions {\r\n  function getMaxTotalSupply(address _pool) external view returns (uint256);\r\n\r\n  function isVotingSignatureAllowed(address _votingAddress, bytes4 _signature) external view returns (bool);\r\n\r\n  function isVotingSenderAllowed(address _votingAddress, address _sender) external view returns (bool);\r\n\r\n  function isWithoutFee(address _addr) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/BPoolInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface BPoolInterface is IERC20, BMathInterface {\r\n  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n\r\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\r\n\r\n  function swapExactAmountIn(\r\n    address,\r\n    uint256,\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256, uint256);\r\n\r\n  function swapExactAmountOut(\r\n    address,\r\n    uint256,\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256, uint256);\r\n\r\n  function joinswapExternAmountIn(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256);\r\n\r\n  function joinswapPoolAmountOut(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256);\r\n\r\n  function exitswapPoolAmountIn(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256);\r\n\r\n  function exitswapExternAmountOut(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external returns (uint256);\r\n\r\n  function getDenormalizedWeight(address) external view returns (uint256);\r\n\r\n  function getBalance(address) external view returns (uint256);\r\n\r\n  function getSwapFee() external view returns (uint256);\r\n\r\n  function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n  function getCommunityFee()\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      address\r\n    );\r\n\r\n  function calcAmountWithCommunityFee(\r\n    uint256,\r\n    uint256,\r\n    address\r\n  ) external view returns (uint256, uint256);\r\n\r\n  function getRestrictions() external view returns (address);\r\n\r\n  function isPublicSwap() external view returns (bool);\r\n\r\n  function isFinalized() external view returns (bool);\r\n\r\n  function isBound(address t) external view returns (bool);\r\n\r\n  function getCurrentTokens() external view returns (address[] memory tokens);\r\n\r\n  function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n  function setSwapFee(uint256) external;\r\n\r\n  function setCommunityFeeAndReceiver(\r\n    uint256,\r\n    uint256,\r\n    uint256,\r\n    address\r\n  ) external;\r\n\r\n  function setController(address) external;\r\n\r\n  function setPublicSwap(bool) external;\r\n\r\n  function finalize() external;\r\n\r\n  function bind(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external;\r\n\r\n  function rebind(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) external;\r\n\r\n  function unbind(address) external;\r\n\r\n  function callVoting(\r\n    address voting,\r\n    bytes4 signature,\r\n    bytes calldata args,\r\n    uint256 value\r\n  ) external;\r\n\r\n  function getMinWeight() external view returns (uint256);\r\n\r\n  function getMaxBoundTokens() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/balancer-core/BPool.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract BPool is BToken, BMath, BPoolInterface {\r\n\r\n    struct Record {\r\n        bool bound;   // is token bound to pool\r\n        uint index;   // private\r\n        uint denorm;  // denormalized weight\r\n        uint balance;\r\n    }\r\n\r\n    event LOG_SWAP(\r\n        address indexed caller,\r\n        address indexed tokenIn,\r\n        address indexed tokenOut,\r\n        uint256         tokenAmountIn,\r\n        uint256         tokenAmountOut\r\n    );\r\n\r\n    event LOG_JOIN(\r\n        address indexed caller,\r\n        address indexed tokenIn,\r\n        uint256         tokenAmountIn\r\n    );\r\n\r\n    event LOG_EXIT(\r\n        address indexed caller,\r\n        address indexed tokenOut,\r\n        uint256         tokenAmountOut\r\n    );\r\n\r\n    event LOG_CALL(\r\n        bytes4  indexed sig,\r\n        address indexed caller,\r\n        bytes           data\r\n    ) anonymous;\r\n\r\n    event LOG_CALL_VOTING(\r\n        address indexed voting,\r\n        bool    indexed success,\r\n        bytes4  indexed inputSig,\r\n        bytes           inputData,\r\n        bytes           outputData\r\n    );\r\n\r\n    event LOG_COMMUNITY_FEE(\r\n        address indexed caller,\r\n        address indexed receiver,\r\n        address indexed token,\r\n        uint256         tokenAmount\r\n    );\r\n\r\n    modifier _logs_() {\r\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\r\n        _;\r\n    }\r\n\r\n    modifier _lock_() {\r\n        _preventReentrancy();\r\n        _mutex = true;\r\n        _;\r\n        _mutex = false;\r\n    }\r\n\r\n    modifier _viewlock_() {\r\n        _preventReentrancy();\r\n        _;\r\n    }\r\n\r\n    bool private _mutex;\r\n\r\n    address private _controller; // has CONTROL role\r\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\r\n\r\n    address private _wrapper; // can join, exit and swaps when _wrapperMode is true\r\n    bool private _wrapperMode;\r\n\r\n    IPoolRestrictions private _restrictions;\r\n\r\n    // `setSwapFee` and `finalize` require CONTROL\r\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\r\n    uint private _swapFee;\r\n    uint private _communitySwapFee;\r\n    uint private _communityJoinFee;\r\n    uint private _communityExitFee;\r\n    address private _communityFeeReceiver;\r\n    bool private _finalized;\r\n\r\n    address[] internal _tokens;\r\n    mapping(address => Record) internal _records;\r\n    uint internal _totalWeight;\r\n\r\n    mapping(address => uint256) internal _lastSwapBlock;\r\n\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _controller = msg.sender;\r\n        _swapFee = MIN_FEE;\r\n        _communitySwapFee = 0;\r\n        _communityJoinFee = 0;\r\n        _communityExitFee = 0;\r\n        _publicSwap = false;\r\n        _finalized = false;\r\n    }\r\n\r\n    function isPublicSwap()\r\n        external view override\r\n        returns (bool)\r\n    {\r\n        return _publicSwap;\r\n    }\r\n\r\n    function isFinalized()\r\n        external view override\r\n        returns (bool)\r\n    {\r\n        return _finalized;\r\n    }\r\n\r\n    function isBound(address t)\r\n        external view override\r\n        returns (bool)\r\n    {\r\n        return _records[t].bound;\r\n    }\r\n\r\n    function getNumTokens()\r\n        external view\r\n        returns (uint)\r\n    {\r\n        return _tokens.length;\r\n    }\r\n\r\n    function getCurrentTokens()\r\n        external view override\r\n        _viewlock_\r\n        returns (address[] memory tokens)\r\n    {\r\n        return _tokens;\r\n    }\r\n\r\n    function getFinalTokens()\r\n        external view override\r\n        _viewlock_\r\n        returns (address[] memory tokens)\r\n    {\r\n        _requireContractIsFinalized();\r\n        return _tokens;\r\n    }\r\n\r\n    function getDenormalizedWeight(address token)\r\n        external view override\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        _requireTokenIsBound(token);\r\n        return _getDenormWeight(token);\r\n    }\r\n\r\n    function getTotalDenormalizedWeight()\r\n        external view override\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n        return _getTotalWeight();\r\n    }\r\n\r\n    function getNormalizedWeight(address token)\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        _requireTokenIsBound(token);\r\n        return bdiv(_getDenormWeight(token), _getTotalWeight());\r\n    }\r\n\r\n    function getBalance(address token)\r\n        external view override\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        _requireTokenIsBound(token);\r\n        return _records[token].balance;\r\n    }\r\n\r\n    function getSwapFee()\r\n        external view override\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n        return _swapFee;\r\n    }\r\n\r\n    function getCommunityFee()\r\n        external view override\r\n        _viewlock_\r\n        returns (uint communitySwapFee, uint communityJoinFee, uint communityExitFee, address communityFeeReceiver)\r\n    {\r\n        return (_communitySwapFee, _communityJoinFee, _communityExitFee, _communityFeeReceiver);\r\n    }\r\n\r\n    function getController()\r\n        external view\r\n        _viewlock_\r\n        returns (address)\r\n    {\r\n        return _controller;\r\n    }\r\n\r\n    function getWrapper()\r\n        external view\r\n        _viewlock_\r\n        returns (address)\r\n    {\r\n        return _wrapper;\r\n    }\r\n\r\n    function getWrapperMode()\r\n        external view\r\n        _viewlock_\r\n        returns (bool)\r\n    {\r\n        return _wrapperMode;\r\n    }\r\n\r\n    function getRestrictions()\r\n        external view override\r\n        _viewlock_\r\n        returns (address)\r\n    {\r\n        return address(_restrictions);\r\n    }\r\n\r\n    function setSwapFee(uint swapFee)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _requireFeeInBounds(swapFee);\r\n        _swapFee = swapFee;\r\n    }\r\n\r\n    function setCommunityFeeAndReceiver(\r\n        uint communitySwapFee,\r\n        uint communityJoinFee,\r\n        uint communityExitFee,\r\n        address communityFeeReceiver\r\n    )\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _requireFeeInBounds(communitySwapFee);\r\n        _requireFeeInBounds(communityJoinFee);\r\n        _requireFeeInBounds(communityExitFee);\r\n        _communitySwapFee = communitySwapFee;\r\n        _communityJoinFee = communityJoinFee;\r\n        _communityExitFee = communityExitFee;\r\n        _communityFeeReceiver = communityFeeReceiver;\r\n    }\r\n\r\n    function setRestrictions(IPoolRestrictions restrictions)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _restrictions = restrictions;\r\n    }\r\n\r\n    function setController(address manager)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _controller = manager;\r\n    }\r\n\r\n    function setPublicSwap(bool public_)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _requireContractIsNotFinalized();\r\n        _onlyController();\r\n        _publicSwap = public_;\r\n    }\r\n\r\n    function setWrapper(address wrapper, bool wrapperMode)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _wrapper = wrapper;\r\n        _wrapperMode = wrapperMode;\r\n    }\r\n\r\n    function finalize()\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _requireContractIsNotFinalized();\r\n        require(_tokens.length >= MIN_BOUND_TOKENS, \"MIN_TOKENS\");\r\n\r\n        _finalized = true;\r\n        _publicSwap = true;\r\n\r\n        _mintPoolShare(INIT_POOL_SUPPLY);\r\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\r\n    }\r\n\r\n    function callVoting(address voting, bytes4 signature, bytes calldata args, uint256 value)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(_restrictions.isVotingSignatureAllowed(voting, signature), \"NOT_ALLOWED_SIG\");\r\n        _onlyController();\r\n\r\n        (bool success, bytes memory data) = voting.call{ value: value }(abi.encodePacked(signature, args));\r\n        require(success, \"NOT_SUCCESS\");\r\n        emit LOG_CALL_VOTING(voting, success, signature, args, data);\r\n    }\r\n\r\n    function bind(address token, uint balance, uint denorm)\r\n        public override\r\n        virtual\r\n        _logs_\r\n        // _lock_  Bind does not lock because it jumps to `rebind`, which does\r\n    {\r\n        _onlyController();\r\n        require(!_records[token].bound, \"IS_BOUND\");\r\n\r\n        require(_tokens.length < MAX_BOUND_TOKENS, \"MAX_TOKENS\");\r\n\r\n        _records[token] = Record({\r\n            bound: true,\r\n            index: _tokens.length,\r\n            denorm: 0,    // balance and denorm will be validated\r\n            balance: 0   // and set by `rebind`\r\n        });\r\n        _tokens.push(token);\r\n        rebind(token, balance, denorm);\r\n    }\r\n\r\n    function rebind(address token, uint balance, uint denorm)\r\n        public override\r\n        virtual\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _requireTokenIsBound(token);\r\n\r\n        require(denorm >= MIN_WEIGHT && denorm <= MAX_WEIGHT, \"WEIGHT_BOUNDS\");\r\n        require(balance >= MIN_BALANCE, \"MIN_BALANCE\");\r\n\r\n        // Adjust the denorm and totalWeight\r\n        uint oldWeight = _records[token].denorm;\r\n        if (denorm > oldWeight) {\r\n            _addTotalWeight(bsub(denorm, oldWeight));\r\n        } else if (denorm < oldWeight) {\r\n            _subTotalWeight(bsub(oldWeight, denorm));\r\n        }\r\n        _records[token].denorm = denorm;\r\n\r\n        // Adjust the balance record and actual token balance\r\n        uint oldBalance = _records[token].balance;\r\n        _records[token].balance = balance;\r\n        if (balance > oldBalance) {\r\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\r\n        } else if (balance < oldBalance) {\r\n            uint tokenBalanceWithdrawn = bsub(oldBalance, balance);\r\n            _pushUnderlying(token, msg.sender, tokenBalanceWithdrawn);\r\n        }\r\n    }\r\n\r\n    function unbind(address token)\r\n        public override\r\n        virtual\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _onlyController();\r\n        _requireTokenIsBound(token);\r\n\r\n        uint tokenBalance = _records[token].balance;\r\n\r\n        _subTotalWeight(_records[token].denorm);\r\n\r\n        // Swap the token-to-unbind with the last token,\r\n        // then delete the last token\r\n        uint index = _records[token].index;\r\n        uint last = _tokens.length - 1;\r\n        _tokens[index] = _tokens[last];\r\n        _records[_tokens[index]].index = index;\r\n        _tokens.pop();\r\n        _records[token] = Record({\r\n            bound: false,\r\n            index: 0,\r\n            denorm: 0,\r\n            balance: 0\r\n        });\r\n\r\n        _pushUnderlying(token, msg.sender, tokenBalance);\r\n    }\r\n\r\n    // Absorb any tokens that have been sent to this contract into the pool\r\n    function gulp(address token)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _requireTokenIsBound(token);\r\n        _records[token].balance = IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut)\r\n        external view\r\n        _viewlock_\r\n        returns (uint spotPrice)\r\n    {\r\n        require(_records[tokenIn].bound && _records[tokenOut].bound, \"NOT_BOUND\");\r\n        Record storage inRecord = _records[tokenIn];\r\n        Record storage outRecord = _records[tokenOut];\r\n        return calcSpotPrice(inRecord.balance, _getDenormWeight(tokenIn), outRecord.balance, _getDenormWeight(tokenOut), _swapFee);\r\n    }\r\n\r\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\r\n        external view\r\n        _viewlock_\r\n        returns (uint spotPrice)\r\n    {\r\n        _requireTokenIsBound(tokenIn);\r\n        _requireTokenIsBound(tokenOut);\r\n        Record storage inRecord = _records[tokenIn];\r\n        Record storage outRecord = _records[tokenOut];\r\n        return calcSpotPrice(inRecord.balance, _getDenormWeight(tokenIn), outRecord.balance, _getDenormWeight(tokenOut), 0);\r\n    }\r\n\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _preventSameTxOrigin();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireContractIsFinalized();\r\n\r\n        uint poolTotal = totalSupply();\r\n        uint ratio = bdiv(poolAmountOut, poolTotal);\r\n        _requireMathApprox(ratio);\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address t = _tokens[i];\r\n            uint bal = _records[t].balance;\r\n            uint tokenAmountIn = bmul(ratio, bal);\r\n            _requireMathApprox(tokenAmountIn);\r\n            require(tokenAmountIn <= maxAmountsIn[i], \"LIMIT_IN\");\r\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\r\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\r\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\r\n        }\r\n\r\n        (uint poolAmountOutAfterFee, uint poolAmountOutFee) = calcAmountWithCommunityFee(\r\n            poolAmountOut,\r\n            _communityJoinFee,\r\n            msg.sender\r\n        );\r\n\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOutAfterFee);\r\n        _pushPoolShare(_communityFeeReceiver, poolAmountOutFee);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, address(this), poolAmountOutFee);\r\n    }\r\n\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n    {\r\n        _preventSameTxOrigin();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireContractIsFinalized();\r\n\r\n        (uint poolAmountInAfterFee, uint poolAmountInFee) = calcAmountWithCommunityFee(\r\n            poolAmountIn,\r\n            _communityExitFee,\r\n            msg.sender\r\n        );\r\n\r\n        uint poolTotal = totalSupply();\r\n        uint ratio = bdiv(poolAmountInAfterFee, poolTotal);\r\n        _requireMathApprox(ratio);\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _pushPoolShare(_communityFeeReceiver, poolAmountInFee);\r\n        _burnPoolShare(poolAmountInAfterFee);\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address t = _tokens[i];\r\n            uint bal = _records[t].balance;\r\n            uint tokenAmountOut = bmul(ratio, bal);\r\n            _requireMathApprox(tokenAmountOut);\r\n            require(tokenAmountOut >= minAmountsOut[i], \"LIMIT_OUT\");\r\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\r\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\r\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\r\n        }\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, address(this), poolAmountInFee);\r\n    }\r\n\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    )\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountOut, uint spotPriceAfter)\r\n    {\r\n        _preventSameTxOrigin();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenIn);\r\n        _requireTokenIsBound(tokenOut);\r\n        require(_publicSwap, \"NOT_PUBLIC\");\r\n\r\n        Record storage inRecord = _records[address(tokenIn)];\r\n        Record storage outRecord = _records[address(tokenOut)];\r\n\r\n        uint spotPriceBefore = calcSpotPrice(\r\n                                    inRecord.balance,\r\n                                    _getDenormWeight(tokenIn),\r\n                                    outRecord.balance,\r\n                                    _getDenormWeight(tokenOut),\r\n                                    _swapFee\r\n                                );\r\n        require(spotPriceBefore <= maxPrice, \"LIMIT_PRICE\");\r\n\r\n        (uint tokenAmountInAfterFee, uint tokenAmountInFee) = calcAmountWithCommunityFee(\r\n                                                                tokenAmountIn,\r\n                                                                _communitySwapFee,\r\n                                                                msg.sender\r\n                                                            );\r\n\r\n        require(tokenAmountInAfterFee <= bmul(inRecord.balance, MAX_IN_RATIO), \"MAX_IN_RATIO\");\r\n\r\n        tokenAmountOut = calcOutGivenIn(\r\n                            inRecord.balance,\r\n                            _getDenormWeight(tokenIn),\r\n                            outRecord.balance,\r\n                            _getDenormWeight(tokenOut),\r\n                            tokenAmountInAfterFee,\r\n                            _swapFee\r\n                        );\r\n        require(tokenAmountOut >= minAmountOut, \"LIMIT_OUT\");\r\n\r\n        inRecord.balance = badd(inRecord.balance, tokenAmountInAfterFee);\r\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\r\n\r\n        spotPriceAfter = calcSpotPrice(\r\n                                inRecord.balance,\r\n                                _getDenormWeight(tokenIn),\r\n                                outRecord.balance,\r\n                                _getDenormWeight(tokenOut),\r\n                                _swapFee\r\n                            );\r\n        require(\r\n            spotPriceAfter >= spotPriceBefore &&\r\n            spotPriceBefore <= bdiv(tokenAmountInAfterFee, tokenAmountOut),\r\n            \"MATH_APPROX\"\r\n        );\r\n        require(spotPriceAfter <= maxPrice, \"LIMIT_PRICE\");\r\n\r\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountInAfterFee, tokenAmountOut);\r\n\r\n        _pullCommunityFeeUnderlying(tokenIn, msg.sender, tokenAmountInFee);\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountInAfterFee);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, tokenIn, tokenAmountInFee);\r\n\r\n        return (tokenAmountOut, spotPriceAfter);\r\n    }\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint maxAmountIn,\r\n        address tokenOut,\r\n        uint tokenAmountOut,\r\n        uint maxPrice\r\n    )\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountIn, uint spotPriceAfter)\r\n    {\r\n        _preventSameTxOrigin();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenIn);\r\n        _requireTokenIsBound(tokenOut);\r\n        require(_publicSwap, \"NOT_PUBLIC\");\r\n\r\n        Record storage inRecord = _records[address(tokenIn)];\r\n        Record storage outRecord = _records[address(tokenOut)];\r\n\r\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"OUT_RATIO\");\r\n\r\n        uint spotPriceBefore = calcSpotPrice(\r\n                                    inRecord.balance,\r\n                                    _getDenormWeight(tokenIn),\r\n                                    outRecord.balance,\r\n                                    _getDenormWeight(tokenOut),\r\n                                    _swapFee\r\n                                );\r\n        require(spotPriceBefore <= maxPrice, \"LIMIT_PRICE\");\r\n\r\n        (uint tokenAmountOutAfterFee, uint tokenAmountOutFee) = calcAmountWithCommunityFee(\r\n            tokenAmountOut,\r\n            _communitySwapFee,\r\n            msg.sender\r\n        );\r\n\r\n        tokenAmountIn = calcInGivenOut(\r\n                            inRecord.balance,\r\n                            _getDenormWeight(tokenIn),\r\n                            outRecord.balance,\r\n                            _getDenormWeight(tokenOut),\r\n                            tokenAmountOut,\r\n                            _swapFee\r\n                        );\r\n        require(tokenAmountIn <= maxAmountIn, \"LIMIT_IN\");\r\n\r\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\r\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\r\n\r\n        spotPriceAfter = calcSpotPrice(\r\n                                inRecord.balance,\r\n                                _getDenormWeight(tokenIn),\r\n                                outRecord.balance,\r\n                                _getDenormWeight(tokenOut),\r\n                                _swapFee\r\n                            );\r\n        require(\r\n            spotPriceAfter >= spotPriceBefore &&\r\n            spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOutAfterFee),\r\n            \"MATH_APPROX\"\r\n        );\r\n        require(spotPriceAfter <= maxPrice, \"LIMIT_PRICE\");\r\n\r\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOutAfterFee);\r\n\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOutAfterFee);\r\n        _pushUnderlying(tokenOut, _communityFeeReceiver, tokenAmountOutFee);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, tokenOut, tokenAmountOutFee);\r\n\r\n        return (tokenAmountIn, spotPriceAfter);\r\n    }\r\n\r\n\r\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint poolAmountOut)\r\n\r\n    {\r\n        _preventSameTxOrigin();\r\n        _requireContractIsFinalized();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenIn);\r\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \"MAX_IN_RATIO\");\r\n\r\n        (uint tokenAmountInAfterFee, uint tokenAmountInFee) = calcAmountWithCommunityFee(\r\n            tokenAmountIn,\r\n            _communityJoinFee,\r\n            msg.sender\r\n        );\r\n\r\n        Record storage inRecord = _records[tokenIn];\r\n\r\n        poolAmountOut = calcPoolOutGivenSingleIn(\r\n                            inRecord.balance,\r\n                            _getDenormWeight(tokenIn),\r\n                            _totalSupply,\r\n                            _getTotalWeight(),\r\n                            tokenAmountInAfterFee,\r\n                            _swapFee\r\n                        );\r\n\r\n        require(poolAmountOut >= minPoolAmountOut, \"LIMIT_OUT\");\r\n\r\n        inRecord.balance = badd(inRecord.balance, tokenAmountInAfterFee);\r\n\r\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountInAfterFee);\r\n\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOut);\r\n        _pullCommunityFeeUnderlying(tokenIn, msg.sender, tokenAmountInFee);\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountInAfterFee);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, tokenIn, tokenAmountInFee);\r\n\r\n        return poolAmountOut;\r\n    }\r\n\r\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        _preventSameTxOrigin();\r\n        _requireContractIsFinalized();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenIn);\r\n\r\n        Record storage inRecord = _records[tokenIn];\r\n\r\n        (uint poolAmountOutAfterFee, uint poolAmountOutFee) = calcAmountWithCommunityFee(\r\n            poolAmountOut,\r\n            _communityJoinFee,\r\n            msg.sender\r\n        );\r\n\r\n        tokenAmountIn = calcSingleInGivenPoolOut(\r\n                            inRecord.balance,\r\n                            _getDenormWeight(tokenIn),\r\n                            _totalSupply,\r\n                            _getTotalWeight(),\r\n                            poolAmountOut,\r\n                            _swapFee\r\n                        );\r\n\r\n        _requireMathApprox(tokenAmountIn);\r\n        require(tokenAmountIn <= maxAmountIn, \"LIMIT_IN\");\r\n\r\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \"MAX_IN_RATIO\");\r\n\r\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\r\n\r\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\r\n\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOutAfterFee);\r\n        _pushPoolShare(_communityFeeReceiver, poolAmountOutFee);\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, address(this), poolAmountOutFee);\r\n\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        _preventSameTxOrigin();\r\n        _requireContractIsFinalized();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenOut);\r\n\r\n        Record storage outRecord = _records[tokenOut];\r\n\r\n        tokenAmountOut = calcSingleOutGivenPoolIn(\r\n                            outRecord.balance,\r\n                            _getDenormWeight(tokenOut),\r\n                            _totalSupply,\r\n                            _getTotalWeight(),\r\n                            poolAmountIn,\r\n                            _swapFee\r\n                        );\r\n\r\n        require(tokenAmountOut >= minAmountOut, \"LIMIT_OUT\");\r\n\r\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \"OUT_RATIO\");\r\n\r\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\r\n\r\n        (uint tokenAmountOutAfterFee, uint tokenAmountOutFee) = calcAmountWithCommunityFee(\r\n            tokenAmountOut,\r\n            _communityExitFee,\r\n            msg.sender\r\n        );\r\n\r\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOutAfterFee);\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _burnPoolShare(poolAmountIn);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOutAfterFee);\r\n        _pushUnderlying(tokenOut, _communityFeeReceiver, tokenAmountOutFee);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, tokenOut, tokenAmountOutFee);\r\n\r\n        return tokenAmountOutAfterFee;\r\n    }\r\n\r\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn)\r\n        external override\r\n        _logs_\r\n        _lock_\r\n        returns (uint poolAmountIn)\r\n    {\r\n        _preventSameTxOrigin();\r\n        _requireContractIsFinalized();\r\n        _onlyWrapperOrNotWrapperMode();\r\n        _requireTokenIsBound(tokenOut);\r\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \"OUT_RATIO\");\r\n\r\n        Record storage outRecord = _records[tokenOut];\r\n\r\n        (uint tokenAmountOutAfterFee, uint tokenAmountOutFee) = calcAmountWithCommunityFee(\r\n            tokenAmountOut,\r\n            _communityExitFee,\r\n            msg.sender\r\n        );\r\n\r\n        poolAmountIn = calcPoolInGivenSingleOut(\r\n                            outRecord.balance,\r\n                            _getDenormWeight(tokenOut),\r\n                            _totalSupply,\r\n                            _getTotalWeight(),\r\n                            tokenAmountOut,\r\n                            _swapFee\r\n                        );\r\n\r\n        _requireMathApprox(poolAmountIn);\r\n        require(poolAmountIn <= maxPoolAmountIn, \"LIMIT_IN\");\r\n\r\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\r\n\r\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOutAfterFee);\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _burnPoolShare(poolAmountIn);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOutAfterFee);\r\n        _pushUnderlying(tokenOut, _communityFeeReceiver, tokenAmountOutFee);\r\n\r\n        emit LOG_COMMUNITY_FEE(msg.sender, _communityFeeReceiver, tokenOut, tokenAmountOutFee);\r\n\r\n        return poolAmountIn;\r\n    }\r\n\r\n\r\n    // ==\r\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\r\n    // You must `_lock_` or otherwise ensure reentry-safety\r\n\r\n    function _pullUnderlying(address erc20, address from, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\r\n        require(xfer, \"ERC20_FALSE\");\r\n    }\r\n\r\n    function _pushUnderlying(address erc20, address to, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transfer(to, amount);\r\n        require(xfer, \"ERC20_FALSE\");\r\n    }\r\n\r\n    function _pullCommunityFeeUnderlying(address erc20, address from, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transferFrom(from, _communityFeeReceiver, amount);\r\n        require(xfer, \"ERC20_FALSE\");\r\n    }\r\n\r\n    function _pullPoolShare(address from, uint amount)\r\n        internal\r\n    {\r\n        _pull(from, amount);\r\n    }\r\n\r\n    function _pushPoolShare(address to, uint amount)\r\n        internal\r\n    {\r\n        _push(to, amount);\r\n    }\r\n\r\n    function _mintPoolShare(uint amount)\r\n        internal\r\n    {\r\n        if(address(_restrictions) != address(0)) {\r\n            uint maxTotalSupply = _restrictions.getMaxTotalSupply(address(this));\r\n            require(badd(_totalSupply, amount) <= maxTotalSupply, \"MAX_SUPPLY\");\r\n        }\r\n        _mint(amount);\r\n    }\r\n\r\n    function _burnPoolShare(uint amount)\r\n        internal\r\n    {\r\n        _burn(amount);\r\n    }\r\n\r\n    function _requireTokenIsBound(address token)\r\n        internal view\r\n    {\r\n        require(_records[token].bound, \"NOT_BOUND\");\r\n    }\r\n\r\n    function _onlyController()\r\n        internal view\r\n    {\r\n        require(msg.sender == _controller, \"NOT_CONTROLLER\");\r\n    }\r\n\r\n    function _requireContractIsNotFinalized()\r\n        internal view\r\n    {\r\n        require(!_finalized, \"IS_FINALIZED\");\r\n    }\r\n\r\n    function _requireContractIsFinalized()\r\n        internal view\r\n    {\r\n        require(_finalized, \"NOT_FINALIZED\");\r\n    }\r\n\r\n    function _requireFeeInBounds(uint256 _fee)\r\n        internal pure\r\n    {\r\n        require(_fee >= MIN_FEE && _fee <= MAX_FEE, \"FEE_BOUNDS\");\r\n    }\r\n\r\n    function _requireMathApprox(uint256 _value)\r\n        internal pure\r\n    {\r\n        require(_value != 0, \"MATH_APPROX\");\r\n    }\r\n\r\n    function _preventReentrancy()\r\n        internal view\r\n    {\r\n        require(!_mutex, \"REENTRY\");\r\n    }\r\n\r\n    function _onlyWrapperOrNotWrapperMode()\r\n        internal view\r\n    {\r\n        require(!_wrapperMode || msg.sender == _wrapper, \"ONLY_WRAPPER\");\r\n    }\r\n\r\n    function _preventSameTxOrigin()\r\n      internal\r\n    {\r\n      require(block.number > _lastSwapBlock[tx.origin], \"SAME_TX_ORIGIN\");\r\n      _lastSwapBlock[tx.origin] = block.number;\r\n    }\r\n\r\n    function _getDenormWeight(address token)\r\n        internal view virtual\r\n        returns (uint)\r\n    {\r\n        return _records[token].denorm;\r\n    }\r\n\r\n    function _getTotalWeight()\r\n        internal view virtual\r\n        returns (uint)\r\n    {\r\n        return _totalWeight;\r\n    }\r\n\r\n    function _addTotalWeight(uint _amount) internal virtual {\r\n        _totalWeight = badd(_totalWeight, _amount);\r\n        require(_totalWeight <= MAX_TOTAL_WEIGHT, \"MAX_TOTAL_WEIGHT\");\r\n    }\r\n\r\n    function _subTotalWeight(uint _amount) internal virtual {\r\n        _totalWeight = bsub(_totalWeight, _amount);\r\n    }\r\n\r\n    function calcAmountWithCommunityFee(\r\n        uint tokenAmountIn,\r\n        uint communityFee,\r\n        address operator\r\n    )\r\n        public view override\r\n        returns (uint tokenAmountInAfterFee, uint tokenAmountFee)\r\n    {\r\n        if (address(_restrictions) != address(0) && _restrictions.isWithoutFee(operator)) {\r\n            return (tokenAmountIn, 0);\r\n        }\r\n        uint adjustedIn = bsub(BONE, communityFee);\r\n        tokenAmountInAfterFee = bmul(tokenAmountIn, adjustedIn);\r\n        tokenAmountFee = bsub(tokenAmountIn, tokenAmountInAfterFee);\r\n        return (tokenAmountInAfterFee, tokenAmountFee);\r\n    }\r\n\r\n    function getMinWeight()\r\n        external view override\r\n        returns (uint)\r\n    {\r\n        return MIN_WEIGHT;\r\n    }\r\n\r\n    function getMaxBoundTokens()\r\n        external view override\r\n        returns (uint)\r\n    {\r\n      return MAX_BOUND_TOKENS;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/PowerIndexPoolInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface PowerIndexPoolInterface is BPoolInterface {\r\n  function bind(\r\n    address,\r\n    uint256,\r\n    uint256,\r\n    uint256,\r\n    uint256\r\n  ) external;\r\n\r\n  function setDynamicWeight(\r\n    address token,\r\n    uint256 targetDenorm,\r\n    uint256 fromTimestamp,\r\n    uint256 targetTimestamp\r\n  ) external;\r\n\r\n  function getDynamicWeightSettings(address token)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 fromTimestamp,\r\n      uint256 targetTimestamp,\r\n      uint256 fromDenorm,\r\n      uint256 targetDenorm\r\n    );\r\n\r\n  function getMinWeight() external view override returns (uint256);\r\n}\r\n\r\n// File: contracts/PowerIndexPool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract PowerIndexPool is BPool {\r\n  /// @notice The event emitted when a dynamic weight set to token\r\n  event SetDynamicWeight(\r\n    address indexed token,\r\n    uint256 fromDenorm,\r\n    uint256 targetDenorm,\r\n    uint256 fromTimestamp,\r\n    uint256 targetTimestamp\r\n  );\r\n\r\n  /// @notice The event emitted when weight per second bounds set\r\n  event SetWeightPerSecondBounds(uint256 minWeightPerSecond, uint256 maxWeightPerSecond);\r\n\r\n  struct DynamicWeight {\r\n    uint256 fromTimestamp;\r\n    uint256 targetTimestamp;\r\n    uint256 targetDenorm;\r\n  }\r\n\r\n  /// @dev Mapping for storing dynamic weights settings. fromDenorm stored in _records mapping as denorm variable\r\n  mapping(address => DynamicWeight) private _dynamicWeights;\r\n\r\n  /// @dev Min weight per second limit\r\n  uint256 private _minWeightPerSecond;\r\n  /// @dev Max weight per second limit\r\n  uint256 private _maxWeightPerSecond;\r\n\r\n  constructor(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 minWeightPerSecond,\r\n    uint256 maxWeightPerSecond\r\n  ) public BPool(name, symbol) {\r\n    _minWeightPerSecond = minWeightPerSecond;\r\n    _maxWeightPerSecond = maxWeightPerSecond;\r\n  }\r\n\r\n  /*** Controller Interface ***/\r\n\r\n  /**\r\n   * @notice Set weight per second bounds by controller\r\n   * @param minWeightPerSecond Min weight per second\r\n   * @param maxWeightPerSecond Max weight per second\r\n   */\r\n  function setWeightPerSecondBounds(uint256 minWeightPerSecond, uint256 maxWeightPerSecond) public _logs_ _lock_ {\r\n    _onlyController();\r\n    _minWeightPerSecond = minWeightPerSecond;\r\n    _maxWeightPerSecond = maxWeightPerSecond;\r\n\r\n    emit SetWeightPerSecondBounds(minWeightPerSecond, maxWeightPerSecond);\r\n  }\r\n\r\n  /**\r\n   * @notice Set dynamic weight for token by controller\r\n   * @param token Token for change settings\r\n   * @param targetDenorm Target weight. fromDenorm will be fetch by current value of _getDenormWeight\r\n   * @param fromTimestamp From timestamp of dynamic weight\r\n   * @param targetTimestamp Target timestamp of dynamic weight\r\n   */\r\n  function setDynamicWeight(\r\n    address token,\r\n    uint256 targetDenorm,\r\n    uint256 fromTimestamp,\r\n    uint256 targetTimestamp\r\n  ) public _logs_ _lock_ {\r\n    _onlyController();\r\n    _requireTokenIsBound(token);\r\n\r\n    require(fromTimestamp > block.timestamp, \"CANT_SET_PAST_TIMESTAMP\");\r\n    require(targetTimestamp > fromTimestamp, \"TIMESTAMP_INCORRECT_DELTA\");\r\n    require(targetDenorm >= MIN_WEIGHT && targetDenorm <= MAX_WEIGHT, \"TARGET_WEIGHT_BOUNDS\");\r\n\r\n    uint256 fromDenorm = _getDenormWeight(token);\r\n    uint256 weightPerSecond = _getWeightPerSecond(fromDenorm, targetDenorm, fromTimestamp, targetTimestamp);\r\n    require(weightPerSecond <= _maxWeightPerSecond, \"MAX_WEIGHT_PER_SECOND\");\r\n    require(weightPerSecond >= _minWeightPerSecond, \"MIN_WEIGHT_PER_SECOND\");\r\n\r\n    _records[token].denorm = fromDenorm;\r\n\r\n    _dynamicWeights[token] = DynamicWeight({\r\n      fromTimestamp: fromTimestamp,\r\n      targetTimestamp: targetTimestamp,\r\n      targetDenorm: targetDenorm\r\n    });\r\n\r\n    uint256 denormSum = 0;\r\n    uint256 len = _tokens.length;\r\n    for (uint256 i = 0; i < len; i++) {\r\n      denormSum = badd(denormSum, _dynamicWeights[_tokens[i]].targetDenorm);\r\n    }\r\n\r\n    require(denormSum <= MAX_TOTAL_WEIGHT, \"MAX_TARGET_TOTAL_WEIGHT\");\r\n\r\n    emit SetDynamicWeight(token, fromDenorm, targetDenorm, fromTimestamp, targetTimestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Bind and setDynamicWeight at the same time\r\n   * @param token Token for bind\r\n   * @param balance Initial balance\r\n   * @param targetDenorm Target weight\r\n   * @param fromTimestamp From timestamp of dynamic weight\r\n   * @param targetTimestamp Target timestamp of dynamic weight\r\n   */\r\n  function bind(\r\n    address token,\r\n    uint256 balance,\r\n    uint256 targetDenorm,\r\n    uint256 fromTimestamp,\r\n    uint256 targetTimestamp\r\n  )\r\n    external\r\n    _logs_ // _lock_  Bind does not lock because it jumps to `rebind` and `setDynamicWeight`, which does\r\n  {\r\n    super.bind(token, balance, MIN_WEIGHT);\r\n\r\n    setDynamicWeight(token, targetDenorm, fromTimestamp, targetTimestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Override parent unbind function\r\n   * @param token Token for unbind\r\n   */\r\n  function unbind(address token) public override {\r\n    super.unbind(token);\r\n\r\n    _dynamicWeights[token] = DynamicWeight(0, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Override parent bind function and disable.\r\n   */\r\n  function bind(\r\n    address,\r\n    uint256,\r\n    uint256\r\n  ) public override {\r\n    revert(\"DISABLED\"); // Only new bind function is allowed\r\n  }\r\n\r\n  /**\r\n   * @notice Override parent rebind function. Allowed only for calling from bind function\r\n   * @param token Token for rebind\r\n   * @param balance Balance for rebind\r\n   * @param denorm Weight for rebind\r\n   */\r\n  function rebind(\r\n    address token,\r\n    uint256 balance,\r\n    uint256 denorm\r\n  ) public override {\r\n    require(denorm == MIN_WEIGHT && _dynamicWeights[token].fromTimestamp == 0, \"ONLY_NEW_TOKENS_ALLOWED\");\r\n    super.rebind(token, balance, denorm);\r\n  }\r\n\r\n  /*** View Functions ***/\r\n\r\n  function getDynamicWeightSettings(address token)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 fromTimestamp,\r\n      uint256 targetTimestamp,\r\n      uint256 fromDenorm,\r\n      uint256 targetDenorm\r\n    )\r\n  {\r\n    DynamicWeight storage dw = _dynamicWeights[token];\r\n    return (dw.fromTimestamp, dw.targetTimestamp, _records[token].denorm, dw.targetDenorm);\r\n  }\r\n\r\n  function getWeightPerSecondBounds() external view returns (uint256 minWeightPerSecond, uint256 maxWeightPerSecond) {\r\n    return (_minWeightPerSecond, _maxWeightPerSecond);\r\n  }\r\n\r\n  /*** Internal Functions ***/\r\n\r\n  function _getDenormWeight(address token) internal view override returns (uint256) {\r\n    DynamicWeight memory dw = _dynamicWeights[token];\r\n    uint256 fromDenorm = _records[token].denorm;\r\n\r\n    if (dw.fromTimestamp == 0 || dw.targetDenorm == fromDenorm || block.timestamp <= dw.fromTimestamp) {\r\n      return fromDenorm;\r\n    }\r\n    if (block.timestamp >= dw.targetTimestamp) {\r\n      return dw.targetDenorm;\r\n    }\r\n\r\n    uint256 weightPerSecond = _getWeightPerSecond(fromDenorm, dw.targetDenorm, dw.fromTimestamp, dw.targetTimestamp);\r\n    uint256 deltaCurrentTime = bsub(block.timestamp, dw.fromTimestamp);\r\n    if (dw.targetDenorm > fromDenorm) {\r\n      return badd(fromDenorm, deltaCurrentTime * weightPerSecond);\r\n    } else {\r\n      return bsub(fromDenorm, deltaCurrentTime * weightPerSecond);\r\n    }\r\n  }\r\n\r\n  function _getWeightPerSecond(\r\n    uint256 fromDenorm,\r\n    uint256 targetDenorm,\r\n    uint256 fromTimestamp,\r\n    uint256 targetTimestamp\r\n  ) internal pure returns (uint256) {\r\n    uint256 delta = targetDenorm > fromDenorm ? bsub(targetDenorm, fromDenorm) : bsub(fromDenorm, targetDenorm);\r\n    return div(delta, bsub(targetTimestamp, fromTimestamp));\r\n  }\r\n\r\n  function _getTotalWeight() internal view override returns (uint256) {\r\n    uint256 sum = 0;\r\n    uint256 len = _tokens.length;\r\n    for (uint256 i = 0; i < len; i++) {\r\n      sum = badd(sum, _getDenormWeight(_tokens[i]));\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  function _addTotalWeight(uint256 _amount) internal virtual override {\r\n    // storage total weight don't change, it's calculated only by _getTotalWeight()\r\n  }\r\n\r\n  function _subTotalWeight(uint256 _amount) internal virtual override {\r\n    // storage total weight don't change, it's calculated only by _getTotalWeight()\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/PowerIndexPoolFactoryInterface.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface PowerIndexPoolFactoryInterface {\r\n  function newPool(\r\n    string calldata name,\r\n    string calldata symbol,\r\n    uint256 minWeightPerSecond,\r\n    uint256 maxWeightPerSecond\r\n  ) external returns (PowerIndexPoolInterface);\r\n}\r\n\r\n// File: contracts/PowerIndexPoolFactory.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is disstributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\n// Builds new Power Index Pools, logging their addresses and providing `isPowerIndexPool(address) -> (bool)`\r\n\r\n\r\n\r\ncontract PowerIndexPoolFactory is PowerIndexPoolFactoryInterface {\r\n  event LOG_NEW_POOL(address indexed caller, address indexed pool);\r\n\r\n  mapping(address => bool) public isPowerIndexPool;\r\n\r\n  constructor() public {}\r\n\r\n  function newPool(\r\n    string calldata name,\r\n    string calldata symbol,\r\n    uint256 minWeightPerSecond,\r\n    uint256 maxWeightPerSecond\r\n  ) external override returns (PowerIndexPoolInterface) {\r\n    PowerIndexPool pool = new PowerIndexPool(name, symbol, minWeightPerSecond, maxWeightPerSecond);\r\n    isPowerIndexPool[address(pool)] = true;\r\n    emit LOG_NEW_POOL(msg.sender, address(pool));\r\n    pool.setController(msg.sender);\r\n    return PowerIndexPoolInterface(address(pool));\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LOG_NEW_POOL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPowerIndexPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minWeightPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeightPerSecond\",\"type\":\"uint256\"}],\"name\":\"newPool\",\"outputs\":[{\"internalType\":\"contract PowerIndexPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PowerIndexPoolFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9668ee03a4b95258dc05048fac6d13c41e3e5a96e25f10e57739a0739f5ac2b7"}]}