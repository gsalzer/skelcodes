{"status":"1","message":"OK","result":[{"SourceCode":"// --------------------------------\r\n// Smart Contract for Inferno Finance\r\n// \r\n// No Dev Share. No Team Tokens. No Marketing Fund. \r\n// No Airdrop. No Private Sale. No BS.\r\n// All tokens community owned.\r\n// \r\n// Incremental Burn every day up to 35%\r\n// Anti Whale Feature - Only 2% of the total supply can be traded at a time\r\n// \r\n// Telegram: https://t.me/inferno_finance\r\n// Website: https://infernofinance.com\r\n// Email: info@infernofinance.com\r\n// Medium: infernofinance.medium.com\r\n// --------------------------------\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context \r\n{\r\n    function _msgSender() internal view virtual returns (address payable) \r\n    {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) \r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// Owner is granted exclusive access to specific functions\r\n// Deployer account is by default owner account\r\n// Can be changed with transferOwnership\r\n\r\ncontract Ownable is Context \r\n{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t// Initializes contract setting deployer as initial owner\r\n    constructor () internal \r\n\t{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\t// Returns address of current owner\r\n    function owner() public view returns (address) \r\n\t{\r\n        return _owner;\r\n    }\r\n\r\n\t// Throw if called by any other account other than owner\r\n    modifier onlyOwner() \r\n\t{\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\t// Renounce ownership\r\n    function renounceOwnership() public virtual onlyOwner \r\n\t{\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\t// Transfer ownership\r\n    function transferOwnership(address newOwner) public virtual onlyOwner \r\n\t{\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 \r\n{\r\n\t// Amount of tokens in existence\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\t// Amount of tokens owned by account\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\t// Move amount tokens from caller to recipient, returns boolean and emits Transfer event\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t// Returns remaining number of tokens that spender is allowed to spend on behalf of owner via transferFrom function\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t// Sets amount as allowance of spender over caller's tokens, returns boolean and emits Approval event\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t// Moves amount tokens from sender to recipient using allowance mechanism, amount is then deducted from caller's allowance\r\n\t// Returns boolean and emits Transfer event\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t// Emitted when value of tokens are moved from one account to another\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// Emitted when allowance of spender for an owner is set by a call to approve\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath \r\n{\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) \r\n\t\t{\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \r\n\t{\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \r\n\t{\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\nlibrary Address \r\n{\r\n    // Returns true if account is a contract\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal \r\n\t{\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) \r\n\t{\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) \r\n\t{\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) \r\n\t{\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) \r\n\t{\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) \r\n\t{\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) \r\n\t\t{\r\n            return returndata;\r\n        } \r\n\t\t\r\n\t\telse \r\n\t\t{\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) \r\n\t\t\t{\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly \r\n\t\t\t\t{\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } \r\n\t\t\t\r\n\t\t\telse \r\n\t\t\t{\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract ERC20 is Context, IERC20 \r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public \r\n\t{\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n\t// Returns token name\r\n    function name() public view returns (string memory) \r\n\t{\r\n        return _name;\r\n    }\r\n\r\n\t// Returns token symbol\r\n    function symbol() public view returns (string memory) \r\n\t{\r\n        return _symbol;\r\n    }\r\n\r\n\t// Returns decimal\r\n    function decimals() public view returns (uint8) \r\n\t{\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) \r\n\t{\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) \r\n\t{\r\n        return _balances[account];\r\n    }\r\n\r\n\t// Recipient cannot be zero address, caller must have balance of at least amount\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) \r\n\t{\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\t// Spender cannot be zero address\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) \r\n\t{\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\t// Emits Approval event indicating updated allowance, (sender and recipient cannot be zero address), sender must have balance of \r\n\t// at least amount and caller must have allowance for sender's tokens of at least amount\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \r\n\t{\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\t// Automatically increase allowance granted to spender by caller\r\n\t// Emits Approval eent indicating updated allowance\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) \r\n\t{\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\t// Automatically decrease allowance granted to spender by caller\r\n\t// Emits Approval event indicating updated allowance\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) \r\n\t{\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\t// Move tokens from sender to recipient\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual \r\n\t{\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\t// Mint tokens\r\n    function _mint(address account, uint256 amount) internal virtual \r\n\t{\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\t// Burn tokens\r\n    function _burn(address account, uint256 amount) internal virtual\r\n\t{\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual \r\n\t{\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal \r\n\t{\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// --------------------------------\r\n// Inferno Finance\r\n// --------------------------------\r\npragma solidity ^0.6.2;\r\ncontract InfernoFinance is ERC20, Ownable \r\n{\r\n\t// Token Details\r\n\tstring constant tokenName = \"Inferno Finance\";\r\n\tstring constant tokenSymbol = \"INFNO\";\r\n\tuint8  constant tokenDecimals = 18;\r\n    uint256 private _totalSupply = 1000 * (10 ** 18);\r\n\tuint256 public basePercent = 100;\r\n\r\n\tconstructor() public ERC20(tokenName, tokenSymbol) \r\n\t{\r\n\t\t_mint(msg.sender, _totalSupply);\r\n\t}\r\n\r\n\t// Transfer Fee\r\n\tevent TransferFeeChanged(uint256 newFee);\r\n\tevent FeeRecipientChange(address account);\r\n\tevent AddFeeException(address account);\r\n\tevent RemoveFeeException(address account);\r\n\r\n\tbool private activeFee;\r\n\tuint256 public transferFee; // Fee as percentage, where 123 = 1.23%\r\n\taddress public feeRecipient; // Account or contract to send transfer fees to\r\n\r\n\t// Exception to transfer fees, for example for Uniswap contracts.\r\n\tmapping (address => bool) public feeException;\r\n\r\n\tfunction addFeeException(address account) public onlyOwner \r\n\t{\r\n\t\tfeeException[account] = true;\r\n\t\temit AddFeeException(account);\r\n\t}\r\n\r\n\tfunction removeFeeException(address account) public onlyOwner \r\n\t{\r\n\t\tfeeException[account] = false;\r\n\t\temit RemoveFeeException(account);\r\n\t}\r\n\r\n\tfunction setTransferFee(uint256 fee) public onlyOwner \r\n\t{\r\n\t\t// Maximum Possible Fee is 35%\r\n\t\trequire(fee <= 3500, \"Fee cannot be greater than 35%\");\r\n\t\tif (fee == 0) \r\n\t\t{\r\n\t\t\tactiveFee = false;\r\n\t\t} \r\n\t\t\r\n\t\telse \r\n\t\t{\r\n\t\t\tactiveFee = true;\r\n\t\t}\r\n\t\t\r\n\t\ttransferFee = fee;\r\n\t\temit TransferFeeChanged(fee);\r\n\t}\r\n\r\n\tfunction setTransferFeeRecipient(address account) public onlyOwner \r\n\t{\r\n\t\tfeeRecipient = account;\r\n\t\temit FeeRecipientChange(account);\r\n\t}\r\n\t\r\n\t// Get 2%\r\n\tfunction percentSupply(uint256 value) public view returns (uint256)  \r\n\t{\r\n\t\tuint256 roundValue = value.ceil(basePercent);\r\n\t\tuint256 onePercent = roundValue.mul(basePercent).div(5000);\r\n\t\treturn onePercent;\r\n\t}\r\n\r\n\t// Transfer recipient recives amount - fee\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) \r\n\t{\r\n\t\tif (activeFee && feeException[_msgSender()] == false) \r\n\t\t{\r\n\t\t\tuint256 twoPercent = percentSupply(_totalSupply);\r\n\t\t\r\n\t\t\t// Max transactable amount of 2% of total supply\r\n\t\t\trequire (amount <= twoPercent);\r\n\t\t\r\n\t\t\tuint256 fee = transferFee.mul(amount).div(10000);\r\n\t\t\tuint amountLessFee = amount.sub(fee);\r\n\t\t\t_transfer(_msgSender(), recipient, amountLessFee);\r\n\t\t\t_transfer(_msgSender(), feeRecipient, fee);\r\n\t\t} \r\n\t\t\r\n\t\telse \r\n\t\t{\r\n            _transfer(_msgSender(), recipient, amount);\r\n        }\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// TransferFrom recipient recives amount, sender's account is debited amount + fee\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) \r\n\t{\r\n\t\tif (activeFee && feeException[recipient] == false)\r\n\t\t{ \r\n\t\t    uint256 twoPercent = percentSupply(_totalSupply);\r\n\t\t\r\n\t\t\t// Max transactable amount of 2% of total supply\r\n\t\t\trequire (amount <= twoPercent);\r\n\t\t    \r\n\t\t\t_transfer(sender, recipient, amount);\r\n\t\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\t}\r\n\t    \r\n\t     _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddFeeException\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeRecipientChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveFeeException\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFeeException\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"percentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFeeException\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InfernoFinance","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6308910604b9889b928665866769998c3b14029c8d9e3910237de3b90be3b1cf"}]}