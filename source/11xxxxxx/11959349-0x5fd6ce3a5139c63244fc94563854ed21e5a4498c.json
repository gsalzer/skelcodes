{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function owner() external view returns (address);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function BONUS_MULTIPLIER() external view returns (uint256);\r\n    function bonusEndBlock() external view returns (uint256);\r\n    function devaddr() external view returns (address);\r\n    function migrator() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function startBlock() external view returns (uint256);\r\n    function sushi() external view returns (address);\r\n    function sushiPerBlock() external view returns (uint256);\r\n    function totalAllocPoint() external view returns (uint256);\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function poolInfo(uint256 nr)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\r\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\r\n}\r\n\r\ninterface IPair is IERC20 {\r\n    function token0() external view returns (IERC20);\r\n    function token1() external view returns (IERC20);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n\r\ninterface IFactory {\r\n    function allPairsLength() external view returns (uint256);\r\n    function allPairs(uint256 i) external view returns (IPair);\r\n    function getPair(IERC20 token0, IERC20 token1) external view returns (IPair);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n}\r\n\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public immutable owner;\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\nlibrary BoringERC20 {\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while(i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    } \r\n    \r\n    function symbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function name(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function decimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n}\r\n\r\nlibrary BoringPair {\r\n    function factory(IPair pair) internal view returns (IFactory) {\r\n        (bool success, bytes memory data) = address(pair).staticcall(abi.encodeWithSelector(0xc45a0155));\r\n        return success && data.length == 32 ? abi.decode(data, (IFactory)) : IFactory(0);\r\n    }\r\n}\r\n\r\ncontract BoringHelper is Ownable {\r\n    using BoringMath for uint256;\r\n    using BoringERC20 for IERC20;\r\n    using BoringERC20 for IPair;\r\n    using BoringPair for IPair;\r\n\r\n    IMasterChef public chef; // IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\r\n    address public maker; // ISushiMaker(0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50);\r\n    IERC20 public sushi; // ISushiToken(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\r\n    IERC20 public WETH; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IERC20 public WBTC; // 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    IFactory public sushiFactory; // IFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    IFactory public uniV2Factory; // IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IERC20 public bar; // 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\r\n\r\n    constructor(\r\n        IMasterChef chef_,\r\n        address maker_,\r\n        IERC20 sushi_,\r\n        IERC20 WETH_,\r\n        IERC20 WBTC_,\r\n        IFactory sushiFactory_,\r\n        IFactory uniV2Factory_,\r\n        IERC20 bar_\r\n    ) public {\r\n        chef = chef_;\r\n        maker = maker_;\r\n        sushi = sushi_;\r\n        WETH = WETH_;\r\n        WBTC = WBTC_;\r\n        sushiFactory = sushiFactory_;\r\n        uniV2Factory = uniV2Factory_;\r\n        bar = bar_;\r\n    }\r\n\r\n    function setContracts(\r\n        IMasterChef chef_,\r\n        address maker_,\r\n        IERC20 sushi_,\r\n        IERC20 WETH_,\r\n        IERC20 WBTC_,\r\n        IFactory sushiFactory_,\r\n        IFactory uniV2Factory_,\r\n        IERC20 bar_\r\n    ) public onlyOwner {\r\n        chef = chef_;\r\n        maker = maker_;\r\n        sushi = sushi_;\r\n        WETH = WETH_;\r\n        WBTC = WBTC_;\r\n        sushiFactory = sushiFactory_;\r\n        uniV2Factory = uniV2Factory_;\r\n        bar = bar_;\r\n    }\r\n\r\n    function getETHRate(IERC20 token) public view returns (uint256) {\r\n        if (token == WETH) {\r\n            return 1e18;\r\n        }\r\n        IPair pairUniV2 = IPair(uniV2Factory.getPair(token, WETH));\r\n        IPair pairSushi = IPair(sushiFactory.getPair(token, WETH));\r\n        if (address(pairUniV2) == address(0) && address(pairSushi) == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint112 reserve0;\r\n        uint112 reserve1;\r\n        IERC20 token0;\r\n        if (address(pairUniV2) != address(0)) {\r\n            (uint112 reserve0UniV2, uint112 reserve1UniV2, ) = pairUniV2.getReserves();\r\n            reserve0 += reserve0UniV2;\r\n            reserve1 += reserve1UniV2;\r\n            token0 = pairUniV2.token0();\r\n        }\r\n\r\n        if (address(pairSushi) != address(0)) {\r\n            (uint112 reserve0Sushi, uint112 reserve1Sushi, ) = pairSushi.getReserves();\r\n            reserve0 += reserve0Sushi;\r\n            reserve1 += reserve1Sushi;\r\n            if (token0 == IERC20(0)) {\r\n                token0 = pairSushi.token0();\r\n            }\r\n        }\r\n\r\n        if (token0 == WETH) {\r\n            return uint256(reserve1).mul(1e18) / reserve0;\r\n        } else {\r\n            return uint256(reserve0).mul(1e18) / reserve1;\r\n        }\r\n    }\r\n\r\n    struct Factory {\r\n        IFactory factory;\r\n        uint256 allPairsLength;\r\n    }\r\n\r\n    struct UIInfo {\r\n        uint256 ethBalance;\r\n        uint256 sushiBalance;\r\n        uint256 sushiBarBalance;\r\n        uint256 xsushiBalance;\r\n        uint256 xsushiSupply;\r\n        uint256 sushiBarAllowance;\r\n        Factory[] factories;\r\n        uint256 ethRate;\r\n        uint256 sushiRate;\r\n        uint256 btcRate;\r\n        uint256 pendingSushi;\r\n    }\r\n\r\n    function getUIInfo(\r\n        address who,\r\n        IFactory[] calldata factoryAddresses,\r\n        IERC20 currency\r\n    ) public view returns (UIInfo memory) {\r\n        UIInfo memory info;\r\n        info.ethBalance = who.balance;\r\n\r\n        info.factories = new Factory[](factoryAddresses.length);\r\n\r\n        for (uint256 i = 0; i < factoryAddresses.length; i++) {\r\n            IFactory factory = factoryAddresses[i];\r\n            info.factories[i].factory = factory;\r\n            info.factories[i].allPairsLength = factory.allPairsLength();\r\n        }\r\n\r\n        info.ethRate = getETHRate(currency);\r\n        info.sushiRate = getETHRate(sushi);\r\n        info.btcRate = getETHRate(WBTC);\r\n\r\n        info.sushiBalance = sushi.balanceOf(who);\r\n        info.sushiBarBalance = sushi.balanceOf(address(bar));\r\n        info.xsushiBalance = bar.balanceOf(who);\r\n        info.xsushiSupply = bar.totalSupply();\r\n        info.sushiBarAllowance = sushi.allowance(who, address(bar));\r\n\r\n        uint256 poolLength = chef.poolLength();\r\n        uint256 pendingSushi;\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            pendingSushi += chef.pendingSushi(i, who);\r\n        }\r\n        info.pendingSushi = pendingSushi;\r\n\r\n        return info;\r\n    }\r\n\r\n    struct Balance {\r\n        IERC20 token;\r\n        uint256 balance;\r\n        uint256 bentoBalance;\r\n    }\r\n\r\n    struct BalanceFull {\r\n        IERC20 token;\r\n        uint256 balance;\r\n        uint256 rate;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        IERC20 token;\r\n        uint256 decimals;\r\n        string name;\r\n        string symbol;\r\n    }\r\n\r\n    function getTokenInfo(address[] calldata addresses) public view returns (TokenInfo[] memory) {\r\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            infos[i].token = token;\r\n\r\n            infos[i].name = token.name();\r\n            infos[i].symbol = token.symbol();\r\n            infos[i].decimals = token.decimals();\r\n        }\r\n\r\n        return infos;\r\n    }\r\n\r\n    function findBalances(address who, address[] calldata addresses) public view returns (Balance[] memory) {\r\n        Balance[] memory balances = new Balance[](addresses.length);\r\n\r\n        uint256 len = addresses.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            balances[i].token = token;\r\n            balances[i].balance = token.balanceOf(who);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    function getBalances(address who, address[] calldata addresses) public view returns (BalanceFull[] memory) {\r\n        BalanceFull[] memory balances = new BalanceFull[](addresses.length);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            balances[i].token = token;\r\n            balances[i].balance = IERC20(token).balanceOf(who);\r\n            balances[i].rate = getETHRate(token);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    struct PairBase {\r\n        IPair token;\r\n        IERC20 token0;\r\n        IERC20 token1;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    function getPairs(\r\n        IFactory factory,\r\n        uint256 fromID,\r\n        uint256 toID\r\n    ) public view returns (PairBase[] memory) {\r\n        PairBase[] memory pairs = new PairBase[](toID - fromID);\r\n\r\n        for (uint256 id = fromID; id < toID; id++) {\r\n            IPair token = factory.allPairs(id);\r\n            uint256 i = id - fromID;\r\n            pairs[i].token = token;\r\n            pairs[i].token0 = token.token0();\r\n            pairs[i].token1 = token.token1();\r\n            pairs[i].totalSupply = token.totalSupply();\r\n        }\r\n        return pairs;\r\n    }\r\n\r\n    struct PairPoll {\r\n        IPair token;\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 totalSupply;\r\n        uint256 balance;\r\n    }\r\n\r\n    function pollPairs(address who, IPair[] calldata addresses) public view returns (PairPoll[] memory) {\r\n        PairPoll[] memory pairs = new PairPoll[](addresses.length);\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IPair token = addresses[i];\r\n            pairs[i].token = token;\r\n            (uint256 reserve0, uint256 reserve1, ) = token.getReserves();\r\n            pairs[i].reserve0 = reserve0;\r\n            pairs[i].reserve1 = reserve1;\r\n            pairs[i].balance = token.balanceOf(who);\r\n            pairs[i].totalSupply = token.totalSupply();\r\n        }\r\n        return pairs;\r\n    }\r\n\r\n    struct PoolsInfo {\r\n        uint256 totalAllocPoint;\r\n        uint256 poolLength;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 pid;\r\n        IPair lpToken;\r\n        uint256 allocPoint;\r\n        bool isPair;\r\n        IFactory factory;\r\n        IERC20 token0;\r\n        IERC20 token1;\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n    }\r\n\r\n    function getPools(uint256[] calldata pids) public view returns (PoolsInfo memory, PoolInfo[] memory) {\r\n        PoolsInfo memory info;\r\n        info.totalAllocPoint = chef.totalAllocPoint();\r\n        uint256 poolLength = chef.poolLength();\r\n        info.poolLength = poolLength;\r\n\r\n        PoolInfo[] memory pools = new PoolInfo[](pids.length);\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            pools[i].pid = pids[i];\r\n            (address lpToken, uint256 allocPoint, , ) = chef.poolInfo(pids[i]);\r\n            IPair uniV2 = IPair(lpToken);\r\n            pools[i].lpToken = uniV2;\r\n            pools[i].allocPoint = allocPoint;\r\n\r\n            pools[i].name = uniV2.name();\r\n            pools[i].symbol = uniV2.symbol();\r\n            pools[i].decimals = uniV2.decimals();\r\n\r\n            pools[i].factory = uniV2.factory();\r\n            if (pools[i].factory != IFactory(0)) {\r\n                pools[i].isPair = true;\r\n                pools[i].token0 = uniV2.token0();\r\n                pools[i].token1 = uniV2.token1();\r\n            }\r\n        }\r\n        return (info, pools);\r\n    }\r\n\r\n    struct PoolFound {\r\n        uint256 pid;\r\n        uint256 balance;\r\n    }\r\n\r\n    function findPools(address who, uint256[] calldata pids) public view returns (PoolFound[] memory) {\r\n        PoolFound[] memory pools = new PoolFound[](pids.length);\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            pools[i].pid = pids[i];\r\n            (pools[i].balance, ) = chef.userInfo(pids[i], who);\r\n        }\r\n\r\n        return pools;\r\n    }\r\n\r\n    struct UserPoolInfo {\r\n        uint256 pid;\r\n        uint256 balance; // Balance of pool tokens\r\n        uint256 totalSupply; // Token staked lp tokens\r\n        uint256 lpBalance; // Balance of lp tokens not staked\r\n        uint256 lpTotalSupply; // TotalSupply of lp tokens\r\n        uint256 lpAllowance; // LP tokens approved for masterchef\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 rewardDebt;\r\n        uint256 pending; // Pending SUSHI\r\n    }\r\n\r\n    function pollPools(address who, uint256[] calldata pids) public view returns (UserPoolInfo[] memory) {\r\n        UserPoolInfo[] memory pools = new UserPoolInfo[](pids.length);\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            (uint256 amount, ) = chef.userInfo(pids[i], who);\r\n            pools[i].balance = amount;\r\n            pools[i].pending = chef.pendingSushi(pids[i], who);\r\n\r\n            (address lpToken, , , ) = chef.poolInfo(pids[i]);\r\n            pools[i].pid = pids[i];\r\n            IPair uniV2 = IPair(lpToken);\r\n            IFactory factory = uniV2.factory();\r\n            if (factory != IFactory(0)) {\r\n                pools[i].totalSupply = uniV2.balanceOf(address(chef));\r\n                pools[i].lpAllowance = uniV2.allowance(who, address(chef));\r\n                pools[i].lpBalance = uniV2.balanceOf(who);\r\n                pools[i].lpTotalSupply = uniV2.totalSupply();\r\n\r\n                (uint112 reserve0, uint112 reserve1, ) = uniV2.getReserves();\r\n                pools[i].reserve0 = reserve0;\r\n                pools[i].reserve1 = reserve1;\r\n            }\r\n        }\r\n        return pools;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"findBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.Balance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"findPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PoolFound[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.BalanceFull[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getETHRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PairBase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PoolsInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IPair\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"},{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BoringHelper.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct BoringHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IFactory[]\",\"name\":\"factoryAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getUIInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarAllowance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.Factory[]\",\"name\":\"factories\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"ethRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.UIInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IPair[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"pollPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.PairPoll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"pollPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelper.UserPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BoringHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c2edad668740f1aa35e4d8f227fb8e17dca888cd000000000000000000000000e11fc0b43ab98eb91e9836129d1ee7c3bc95df500000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000008798249c2e607446efb7ad49ec89dd1865ff4272","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://81eb19a8365b156d163499182cb5befde9308b81dd21b5bf3ee08454a3122712"}]}