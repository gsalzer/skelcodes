{"status":"1","message":"OK","result":[{"SourceCode":"/*                                                                           \r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..       \r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.       \r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.       \r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.       \r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.       \r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.       \r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..       \r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.                   \r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.                    \r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.                     \r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....            \r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.         \r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.        \r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.       \r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.       \r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.        \r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..         \r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....            \r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.                               \r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.                                \r\n          ...'..     .';;;;;;;;;;;;;;,,,'.                                  \r\n                       ...............                                      \r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/truefi/common/Initializable.sol\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/truefi/interface/ILoanFactory.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\ninterface ILoanFactory {\r\n    function createLoanToken(\r\n        address _borrower,\r\n        uint256 _amount,\r\n        uint256 _term,\r\n        uint256 _apy\r\n    ) external;\r\n\r\n    function isLoanToken(address) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/truefi/interface/ILoanToken.sol\r\npragma solidity 0.6.10;\r\n\r\ninterface ILoanToken is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function borrowerFee() external view returns (uint256);\r\n\r\n    function receivedAmount() external view returns (uint256);\r\n\r\n    function isLoanToken() external pure returns (bool);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function close() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/truefi/LoanToken.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title LoanToken\r\n * @dev A token which represents share of a debt obligation\r\n *\r\n * Each LoanToken has:\r\n * - borrower address\r\n * - borrow amount\r\n * - loan term\r\n * - loan APY\r\n *\r\n * Loan progresses through the following states:\r\n * Awaiting:    Waiting for funding to meet capital requirements\r\n * Funded:      Capital requireme`nts met, borrower can withdraw\r\n * Withdrawn:   Borrower withdraws money, loan waiting to be repaid\r\n * Settled:     Loan has been paid back in full with interest\r\n * Defaulted:   Loan has not been paid back in full\r\n *\r\n * - LoanTokens are non-transferrable except for whitelisted addresses\r\n * - This version of LoanToken only supports a single funder\r\n */\r\ncontract LoanToken is ILoanToken, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address public override borrower;\r\n    uint256 public override amount;\r\n    uint256 public override term;\r\n    uint256 public override apy;\r\n\r\n    uint256 public override start;\r\n    address public override lender;\r\n    uint256 public override debt;\r\n\r\n    uint256 public redeemed;\r\n\r\n    // borrow fee -> 100 = 1%\r\n    uint256 public override borrowerFee = 25;\r\n\r\n    // whitelist for transfers\r\n    mapping(address => bool) public canTransfer;\r\n\r\n    Status public override status;\r\n\r\n    IERC20 public currencyToken;\r\n\r\n    /**\r\n     * @dev Emitted when the loan is funded\r\n     * @param lender Address which funded the loan\r\n     */\r\n    event Funded(address lender);\r\n\r\n    /**\r\n     * @dev Emitted when transfer whitelist is updated\r\n     * @param account Account to whitelist for transfers\r\n     * @param status New whitelist status\r\n     */\r\n    event TransferAllowanceChanged(address account, bool status);\r\n\r\n    /**\r\n     * @dev Emitted when borrower withdraws funds\r\n     * @param beneficiary Account which will receive funds\r\n     */\r\n    event Withdrawn(address beneficiary);\r\n\r\n    /**\r\n     * @dev Emitted when term is over\r\n     * @param status Final loan status\r\n     * @param returnedAmount Amount that was retured before expiry\r\n     */\r\n    event Closed(Status status, uint256 returnedAmount);\r\n\r\n    /**\r\n     * @dev Emitted when a LoanToken is redeemed for underlying currencyTokens\r\n     * @param receiver Receiver of currencyTokens\r\n     * @param burnedAmount Amount of LoanTokens burned\r\n     * @param redeemedAmound Amount of currencyToken received\r\n     */\r\n    event Redeemed(address receiver, uint256 burnedAmount, uint256 redeemedAmound);\r\n\r\n    /**\r\n     * @dev Create a Loan\r\n     * @param _currencyToken Token to lend\r\n     * @param _borrower Borrwer addresss\r\n     * @param _amount Borrow amount of currency tokens\r\n     * @param _term Loan length\r\n     * @param _apy Loan APY\r\n     */\r\n    constructor(\r\n        IERC20 _currencyToken,\r\n        address _borrower,\r\n        uint256 _amount,\r\n        uint256 _term,\r\n        uint256 _apy\r\n    ) public ERC20(\"Loan Token\", \"LOAN\") {\r\n        currencyToken = _currencyToken;\r\n        borrower = _borrower;\r\n        amount = _amount;\r\n        term = _term;\r\n        apy = _apy;\r\n        debt = interest(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Only borrwer can withdraw & repay loan\r\n     */\r\n    modifier onlyBorrower() {\r\n        require(msg.sender == borrower, \"LoanToken: Caller is not the borrower\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when loan is Settled\r\n     */\r\n    modifier onlyClosed() {\r\n        require(status == Status.Settled || status == Status.Defaulted, \"LoanToken: Current status should be Settled or Defaulted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when loan is Funded\r\n     */\r\n    modifier onlyOngoing() {\r\n        require(status == Status.Funded || status == Status.Withdrawn, \"LoanToken: Current status should be Funded or Withdrawn\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when loan is Funded\r\n     */\r\n    modifier onlyFunded() {\r\n        require(status == Status.Funded, \"LoanToken: Current status should be Funded\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when loan is Withdrawn\r\n     */\r\n    modifier onlyAfterWithdraw() {\r\n        require(status >= Status.Withdrawn, \"LoanToken: Only after loan has been withdrawn\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only when loan is Awaiting\r\n     */\r\n    modifier onlyAwaiting() {\r\n        require(status == Status.Awaiting, \"LoanToken: Current status should be Awaiting\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only whitelisted accounts or lender\r\n     */\r\n    modifier onlyWhoCanTransfer(address sender) {\r\n        require(\r\n            sender == lender || canTransfer[sender],\r\n            \"LoanToken: This can be performed only by lender or accounts allowed to transfer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only lender can perform certain actions\r\n     */\r\n    modifier onlyLender() {\r\n        require(msg.sender == lender, \"LoanToken: This can be performed only by lender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if this contract is a LoanToken\r\n     * @return True if this contract is a LoanToken\r\n     */\r\n    function isLoanToken() external override pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Get loan parameters\r\n     * @return amount, term, apy\r\n     */\r\n    function getParameters()\r\n        external\r\n        override\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (amount, apy, term);\r\n    }\r\n\r\n    /**\r\n     * @dev Get coupon value of this loan token in currencyToken\r\n     * This assumes the loan will be paid back on time, with interest\r\n     * @param _balance number of LoanTokens to get value for\r\n     * @return coupon value of _balance LoanTokens in currencyTokens\r\n     */\r\n    function value(uint256 _balance) external override view returns (uint256) {\r\n        if (_balance == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 passed = block.timestamp.sub(start);\r\n        if (passed > term) {\r\n            passed = term;\r\n        }\r\n\r\n        uint256 helper = amount.mul(apy).mul(passed).mul(_balance);\r\n        // assume month is 30 days\r\n        uint256 interest = helper.div(360 days).div(10000).div(totalSupply());\r\n\r\n        return amount.add(interest);\r\n    }\r\n\r\n    /**\r\n     * @dev Fund a loan\r\n     * Set status, start time, lender\r\n     */\r\n    function fund() external override onlyAwaiting {\r\n        status = Status.Funded;\r\n        start = block.timestamp;\r\n        lender = msg.sender;\r\n        _mint(msg.sender, debt);\r\n        require(currencyToken.transferFrom(msg.sender, address(this), receivedAmount()));\r\n\r\n        emit Funded(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist accounts to transfer\r\n     * @param account address to allow transfers for\r\n     * @param _status true allows transfers, false disables transfers\r\n     */\r\n    function allowTransfer(address account, bool _status) external override onlyLender {\r\n        canTransfer[account] = _status;\r\n        emit TransferAllowanceChanged(account, _status);\r\n    }\r\n\r\n    /**\r\n     * @dev Borrower calls this function to withdraw funds\r\n     * Sets the status of the loan to Withdrawn\r\n     * @param _beneficiary address to send funds to\r\n     */\r\n    function withdraw(address _beneficiary) external override onlyBorrower onlyFunded {\r\n        status = Status.Withdrawn;\r\n        require(currencyToken.transfer(_beneficiary, receivedAmount()));\r\n\r\n        emit Withdrawn(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev Close the loan and check if it has been repaid\r\n     */\r\n    function close() external override onlyOngoing {\r\n        require(start.add(term) <= block.timestamp, \"LoanToken: Loan cannot be closed yet\");\r\n        if (_balance() >= debt) {\r\n            status = Status.Settled;\r\n        } else {\r\n            status = Status.Defaulted;\r\n        }\r\n\r\n        emit Closed(status, _balance());\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem LoanToken balances for underlying currencyToken\r\n     * Can only call this function after the loan is Closed\r\n     * @param _amount amount to redeem\r\n     */\r\n    function redeem(uint256 _amount) external override onlyClosed {\r\n        uint256 amountToReturn = _amount.mul(_balance()).div(totalSupply());\r\n        redeemed = redeemed.add(amountToReturn);\r\n        _burn(msg.sender, _amount);\r\n        require(currencyToken.transfer(msg.sender, amountToReturn));\r\n\r\n        emit Redeemed(msg.sender, _amount, amountToReturn);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for borrower to repay the loan\r\n     * Borrower can repay at any time\r\n     * @param _sender account sending currencyToken to repay\r\n     * @param _amount amount of currencyToken to repay\r\n     */\r\n    function repay(address _sender, uint256 _amount) external override onlyAfterWithdraw {\r\n        require(currencyToken.transferFrom(_sender, address(this), _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Check if loan has been repaid\r\n     * @return Boolean representing whether the loan has been repaid or not\r\n     */\r\n    function repaid() external override view onlyAfterWithdraw returns (uint256) {\r\n        return _balance().add(redeemed);\r\n    }\r\n\r\n    /**\r\n     * @dev Public currency token balance function\r\n     * @return currencyToken balance of this contract\r\n     */\r\n    function balance() external override view returns (uint256) {\r\n        return _balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Get currency token balance for this contract\r\n     * @return currencyToken balance of this contract\r\n     */\r\n    function _balance() internal view returns (uint256) {\r\n        return currencyToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount borrowed minus fee\r\n     * @return Amount minus fees\r\n     */\r\n    function receivedAmount() public override view returns (uint256) {\r\n        return amount.sub(amount.mul(borrowerFee).div(10000));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate interest that will be paid by this loan for an amount\r\n     * (amount * apy * term) / (360 days / precision)\r\n     * @param _amount amount\r\n     * @return uint256 Amount of interest paid for _amount\r\n     */\r\n    function interest(uint256 _amount) internal view returns (uint256) {\r\n        return _amount.add(_amount.mul(apy).mul(term).div(360 days).div(10000));\r\n    }\r\n\r\n    /**\r\n     * @dev get profit for this loan\r\n     * @return profit for this loan\r\n     */\r\n    function profit() external override view returns (uint256) {\r\n        return debt.sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override ERC20 _transfer so only whitelisted addresses can transfer\r\n     * @param sender sender of the transaction\r\n     * @param recipient recipient of the transaction\r\n     * @param _amount amount to send\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 _amount\r\n    ) internal override onlyWhoCanTransfer(sender) {\r\n        return super._transfer(sender, recipient, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/truefi/LoanFactory.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title LoanFactory\r\n * @notice Deploy LoanTokens with this Contract\r\n * @dev LoanTokens are deployed through a factory to ensure that all\r\n * LoanTokens adhere to the same contract code, rather than using an interface.\r\n */\r\ncontract LoanFactory is ILoanFactory, Initializable {\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    IERC20 public currencyToken;\r\n\r\n    // @dev Track Valid LoanTokens\r\n    mapping(address => bool) public override isLoanToken;\r\n\r\n    // ======= STORAGE DECLARATION END ============\r\n\r\n    /**\r\n     * @dev Emitted when a LoanToken is created\r\n     * @param contractAddress LoanToken contract address\r\n     */\r\n    event LoanTokenCreated(address contractAddress);\r\n\r\n    /**\r\n     * @dev Initialize this contract and set currency token\r\n     * @param _currencyToken Currency token to lend\r\n     */\r\n    function initialize(IERC20 _currencyToken) external initializer {\r\n        currencyToken = _currencyToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Deploy LoanToken with parameters\r\n     * @param _borrower Borrower address\r\n     * @param _amount Amount to borrow\r\n     * @param _term Length of loan\r\n     * @param _apy Loan yield\r\n     */\r\n    function createLoanToken(\r\n        address _borrower,\r\n        uint256 _amount,\r\n        uint256 _term,\r\n        uint256 _apy\r\n    ) external override {\r\n        address newToken = address(new LoanToken(currencyToken, _borrower, _amount, _term, _apy));\r\n        isLoanToken[newToken] = true;\r\n\r\n        emit LoanTokenCreated(newToken);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LoanTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"createLoanToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_currencyToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLoanToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoanFactory","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa549bd0cd2d400e3f0e8b6bdf5fa8aec2691f4f65b8feea6d10883ce7ad249e"}]}