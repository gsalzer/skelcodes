{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC165 {\r\n    // This function call must use less than 30 000 gas\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Multi Token Standard\r\ncontract IERC1155 is IERC165 {\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _value\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _values\r\n    );\r\n\r\n    // Must emot when approval for a second party/operator address to manager all tokens for an owner address is enabled or disabled\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    // Get the balance of an account's Tokens\r\n    function balanceOf(address _owner, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    // Enable or disable approval for a third party to manage all of the caller's tokens.\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    // Queries the approval status of an operator for a given owner.\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\nlibrary UintLibrary {\r\n    function toString(uint256 _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint256 j = _i;\r\n        uint256 len;\r\n\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\r\n            _i /= 10;\r\n        }\r\n\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\nlibrary StringLibrary {\r\n    using UintLibrary for uint256;\r\n\r\n    function append(string memory _a, string memory _b)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory bab = new bytes(_ba.length + _bb.length);\r\n\r\n        uint256 k = 0;\r\n\r\n        for (uint256 i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\r\n\r\n        return string(bab);\r\n    }\r\n\r\n    function append(\r\n        string memory _a,\r\n        string memory _b,\r\n        string memory _c\r\n    ) internal pure returns (string memory) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory babc = new bytes(_ba.length + _bb.length + _bc.length);\r\n\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < _ba.length; i++) babc[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) babc[k++] = _bb[i];\r\n        for (uint256 i = 0; i < _bc.length; i++) babc[k++] = _bc[i];\r\n\r\n        return string(babc);\r\n    }\r\n\r\n    function recover(\r\n        string memory message,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        bytes memory msgBytes = bytes(message);\r\n        bytes memory fullMessage = concat(\r\n            bytes(\"\\x19Ethereum Signed Message:\\n\"),\r\n            bytes(msgBytes.length.toString()),\r\n            msgBytes,\r\n            new bytes(0),\r\n            new bytes(0),\r\n            new bytes(0),\r\n            new bytes(0)\r\n        );\r\n        return ecrecover(keccak256(fullMessage), v, r, s);\r\n    }\r\n\r\n    function concat(\r\n        bytes memory _ba,\r\n        bytes memory _bb,\r\n        bytes memory _bc,\r\n        bytes memory _bd,\r\n        bytes memory _be,\r\n        bytes memory _bf,\r\n        bytes memory _bg\r\n    ) internal pure returns (bytes memory) {\r\n        bytes memory resultBytes = new bytes(\r\n            _ba.length +\r\n                _bb.length +\r\n                _bc.length +\r\n                _bd.length +\r\n                _be.length +\r\n                _bf.length +\r\n                _bg.length\r\n        );\r\n\r\n        uint256 k = 0;\r\n\r\n        for (uint256 i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];\r\n        for (uint256 i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];\r\n        for (uint256 i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];\r\n        for (uint256 i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];\r\n        for (uint256 i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];\r\n        for (uint256 i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];\r\n\r\n        return resultBytes;\r\n    }\r\n}\r\n\r\nlibrary AddressLibrary {\r\n    function toString(address _addr) internal pure returns (string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory str = new bytes(42);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // Initialized the contract setting the deployer as the initial owner\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Returns the address of the current owner.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    // Leaves the contract without owner.It will not be possible to call \"onlyOwner\" function anymore.\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfers ownership of the contract to a new account\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Implementation of the IERC165 interface\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract HasSecondarySaleFees is ERC165 {\r\n    event SecondarySaleFees(\r\n        uint256 tokenId,\r\n        address[] recipients,\r\n        uint256[] bps\r\n    );\r\n\r\n    /*\r\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\r\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\r\n     *\r\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\r\n\r\n    constructor() public {\r\n        _registerInterface(_INTERFACE_ID_FEES);\r\n    }\r\n\r\n    function getFeeRecipients(uint256 id)\r\n        public\r\n        view\r\n        returns (address payable[] memory);\r\n\r\n    function getFeeBps(uint256 id) public view returns (uint256[] memory);\r\n}\r\n\r\ncontract AbstractSale is Ownable {\r\n    using UintLibrary for uint256;\r\n    using AddressLibrary for address;\r\n    using StringLibrary for string;\r\n    using SafeMath for uint256;\r\n\r\n    // HasSecondarySaleFees's interfaceId = 0xb7799584;\r\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\r\n\r\n    uint256 public buyerFee = 0;\r\n    address payable public beneficiary;\r\n\r\n    // An ECDSA signature\r\n    struct Sig {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    constructor(address payable _beneficiary) public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setBuyerFee(uint256 _buyerFee) public onlyOwner {\r\n        buyerFee = _buyerFee;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function prepareMessage(\r\n        address token,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 fee,\r\n        uint256 nonce\r\n    ) internal pure returns (string memory) {\r\n        string memory result = string(\r\n            strConcat(\r\n                bytes(token.toString()),\r\n                bytes(\". tokenId: \"),\r\n                bytes(tokenId.toString()),\r\n                bytes(\". price: \"),\r\n                bytes(price.toString()),\r\n                bytes(\". nonce: \"),\r\n                bytes(nonce.toString())\r\n            )\r\n        );\r\n\r\n        if (fee != 0) {\r\n            return result.append(\". fee: \", fee.toString());\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function prepareBidMessage(\r\n        address token, //代币合约的地址\r\n        uint256 tokenId,\r\n        uint256 fee,\r\n        uint256 nonce\r\n    ) internal pure returns (string memory) {\r\n        string memory result = string(\r\n            strBidConcat(\r\n                bytes(token.toString()),\r\n                bytes(\". tokenId: \"),\r\n                bytes(tokenId.toString()),\r\n                bytes(\". nonce: \"),\r\n                bytes(nonce.toString())\r\n            )\r\n        );\r\n        if (fee != 0) {\r\n            return result.append(\". fee: \", fee.toString());\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function strConcat(\r\n        bytes memory _ba,\r\n        bytes memory _bb,\r\n        bytes memory _bc,\r\n        bytes memory _bd,\r\n        bytes memory _be,\r\n        bytes memory _bf,\r\n        bytes memory _bg\r\n    ) internal pure returns (bytes memory) {\r\n        bytes memory resultBytes = new bytes(\r\n            _ba.length +\r\n                _bb.length +\r\n                _bc.length +\r\n                _bd.length +\r\n                _be.length +\r\n                _bf.length +\r\n                _bg.length\r\n        );\r\n\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];\r\n        for (uint256 i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];\r\n        for (uint256 i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];\r\n        for (uint256 i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];\r\n        for (uint256 i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];\r\n        for (uint256 i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];\r\n\r\n        return resultBytes;\r\n    }\r\n\r\n    function strBidConcat(\r\n        bytes memory _ba,\r\n        bytes memory _bb,\r\n        bytes memory _bc,\r\n        bytes memory _bd,\r\n        bytes memory _be\r\n    ) internal pure returns (bytes memory) {\r\n        bytes memory resultBytes = new bytes(\r\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\r\n        );\r\n\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];\r\n        for (uint256 i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];\r\n        for (uint256 i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];\r\n        for (uint256 i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];\r\n        for (uint256 i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];\r\n\r\n        return resultBytes;\r\n    }\r\n\r\n    function transferEther(\r\n        IERC165 token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 total,\r\n        uint256 sellerFee\r\n    ) internal {\r\n        // The remaining amount after deducting the handling fee\r\n        uint256 value = transferFeeToBeneficiary(total, sellerFee);\r\n\r\n        // if nft contaact support HasSecondarySaleFees\r\n\r\n        if (token.supportsInterface(_INTERFACE_ID_FEES)) {\r\n            HasSecondarySaleFees withFees = HasSecondarySaleFees(\r\n                address(token)\r\n            );\r\n            address payable[] memory recipients = withFees.getFeeRecipients(\r\n                tokenId\r\n            );\r\n            uint256[] memory fees = withFees.getFeeBps(tokenId);\r\n            require(fees.length == recipients.length);\r\n            for (uint256 i = 0; i < fees.length; i++) {\r\n                (uint256 newValue, uint256 current) = subFee(\r\n                    value,\r\n                    total.mul(fees[i]).div(10000)\r\n                );\r\n                value = newValue;\r\n                recipients[i].transfer(current);\r\n            }\r\n        }\r\n        owner.transfer(value);\r\n    }\r\n\r\n    function transferFeeToBeneficiary(uint256 total, uint256 sellerFee)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        (uint256 value, uint256 sellerFeeValue) = subFee(\r\n            total,\r\n            total.mul(sellerFee).div(10000)\r\n        );\r\n\r\n        uint256 buyerFeeValue = total.mul(buyerFee).div(10000);\r\n        uint256 beneficiaryFee = buyerFeeValue.add(sellerFeeValue);\r\n        if (beneficiaryFee > 0) {\r\n            beneficiary.transfer(beneficiaryFee);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function subFee(uint256 value, uint256 fee)\r\n        internal\r\n        pure\r\n        returns (uint256 newValue, uint256 realFee)\r\n    {\r\n        if (value > fee) {\r\n            newValue = value - fee;\r\n            realFee = fee;\r\n        } else {\r\n            newValue = 0;\r\n            realFee = value;\r\n        }\r\n    }\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public;\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public;\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles:account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract OperatorRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n\r\n    constructor() internal {}\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            isOperator(_msgSender()),\r\n            \"OperatorRole: caller does not have the operator role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    function _addOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function _removeOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n}\r\n\r\ncontract OwnableOperatorRole is Ownable, OperatorRole {\r\n    function addOperator(address account) public onlyOwner {\r\n        _addOperator(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOwner {\r\n        _removeOperator(account);\r\n    }\r\n}\r\n\r\ncontract TransferProxy is OwnableOperatorRole {\r\n    function erc721safeTransferFrom(\r\n        IERC721 token,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external onlyOperator {\r\n        token.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function erc1155safeTransferFrom(\r\n        IERC1155 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external onlyOperator {\r\n        _token.safeTransferFrom(_from, _to, _id, _value, _data);\r\n    }\r\n}\r\n\r\ncontract ERC1155SaleNonceHolder is OwnableOperatorRole {\r\n    // keccak256(token, owner, tokenId) => nonce\r\n    mapping(bytes32 => uint256) public nonces;\r\n\r\n    // keccak256(token, owner, tokenId, nonce) => completed amount\r\n    mapping(bytes32 => uint256) public completed;\r\n\r\n    function getNonce(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) public view returns (uint256) {\r\n        return nonces[getNonceKey(token, tokenId, owner)];\r\n    }\r\n\r\n    function setNonce(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner,\r\n        uint256 nonce\r\n    ) public onlyOperator {\r\n        nonces[getNonceKey(token, tokenId, owner)] = nonce;\r\n    }\r\n\r\n    function getNonceKey(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(token, tokenId, owner));\r\n    }\r\n\r\n    function getCompleted(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner,\r\n        uint256 nonce\r\n    ) public view returns (uint256) {\r\n        return completed[getCompletedKey(token, tokenId, owner, nonce)];\r\n    }\r\n\r\n    function setCompleted(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner,\r\n        uint256 nonce,\r\n        uint256 _completed\r\n    ) public onlyOperator {\r\n        completed[getCompletedKey(token, tokenId, owner, nonce)] = _completed;\r\n    }\r\n\r\n    function getCompletedKey(\r\n        address token,\r\n        uint256 tokenId,\r\n        address owner,\r\n        uint256 nonce\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(token, tokenId, owner, nonce));\r\n    }\r\n}\r\n\r\ncontract ERC1155Sale is Ownable, AbstractSale {\r\n    using StringLibrary for string;\r\n\r\n    event CloseOrder(\r\n        address indexed token,\r\n        uint256 indexed tokenId,\r\n        address owner,\r\n        uint256 nonce\r\n    );\r\n    event Buy(\r\n        address indexed token,\r\n        uint256 indexed tokenId,\r\n        address owner,\r\n        uint256 price,\r\n        address buyer,\r\n        uint256 value\r\n    );\r\n\r\n    event RecieveFromBid(\r\n        address indexed token,\r\n        uint256 indexed tokenId,\r\n        address owner,\r\n        uint256 price,\r\n        address buyer\r\n    );\r\n\r\n    event Bid(\r\n        address indexed token,\r\n        uint256 indexed tokenId,\r\n        address owner,\r\n        uint256 bidPrice,\r\n        address bidder\r\n    );\r\n\r\n    bytes constant EMPTY = \"\";\r\n\r\n    TransferProxy public transferProxy;\r\n    ERC1155SaleNonceHolder public nonceHolder;\r\n\r\n    mapping(uint256 => address payable) private auctionBidders;\r\n    mapping(uint256 => uint256) private auctionBidPrices;\r\n\r\n    constructor(\r\n        TransferProxy _transferProxy,\r\n        ERC1155SaleNonceHolder _nonceHolder,\r\n        address payable beneficiary\r\n    ) public AbstractSale(beneficiary) {\r\n        transferProxy = _transferProxy;\r\n        nonceHolder = _nonceHolder;\r\n    }\r\n\r\n    function hasBidder(uint256 tokenId) public view returns (bool) {\r\n        return auctionBidPrices[tokenId] != 0;\r\n    }\r\n\r\n    function bidderPrice(uint256 tokenId) public view returns (uint256) {\r\n        return auctionBidPrices[tokenId];\r\n    }\r\n\r\n    function bid(\r\n        IERC1155 token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 selling,\r\n        uint256 sellerFee,\r\n        Sig memory signature\r\n    ) public payable {\r\n        require(msg.value > 0, \"Bid: payamount cannot be zero\");\r\n\r\n        uint256 nonce = verifyBidSignature(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            selling,\r\n            sellerFee,\r\n            signature\r\n        );\r\n\r\n        if (hasBidder(tokenId)) {\r\n            address payable preBidder = auctionBidders[tokenId];\r\n            uint256 preBidderPrice = auctionBidPrices[tokenId];\r\n\r\n            require(msg.value > preBidderPrice, \"Bid: wrong amount of pay\");\r\n            //将资产原路返回\r\n            preBidder.transfer(preBidderPrice);\r\n        }\r\n\r\n        auctionBidders[tokenId] = msg.sender;\r\n        auctionBidPrices[tokenId] = msg.value;\r\n\r\n        emit Bid(address(token), tokenId, owner, msg.value, msg.sender);\r\n    }\r\n\r\n    function buy(\r\n        IERC1155 token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 selling, // 出售的总数量\r\n        uint256 buying, // 购买的数量\r\n        uint256 price,\r\n        uint256 sellerFee,\r\n        Sig memory signature //在交易创建时就已经签名成功,由服务器保存\r\n    ) public payable {\r\n        // 验证签名并且取回nonce,签名时传入owner,即\r\n        uint256 nonce = verifySignature(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            selling,\r\n            price,\r\n            sellerFee,\r\n            signature\r\n        );\r\n        uint256 total = price.mul(buying);\r\n        uint256 buyerFeeValue = total.mul(buyerFee).div(10000);\r\n        require(total + buyerFeeValue == msg.value, \"msg.value is incorrect\");\r\n        // 判断是否拥有出价,有出价则原路返回\r\n\r\n        if (hasBidder(tokenId)) {\r\n            address payable preBidder = auctionBidders[tokenId];\r\n            uint256 preBidderPrice = auctionBidPrices[tokenId];\r\n\r\n            //将资产原路返回\r\n            preBidder.transfer(preBidderPrice);\r\n        }\r\n\r\n        bool closed = verifyOpenAndModifyState(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            nonce,\r\n            selling,\r\n            buying\r\n        );\r\n\r\n        transferProxy.erc1155safeTransferFrom(\r\n            token,\r\n            owner,\r\n            msg.sender,\r\n            tokenId,\r\n            buying,\r\n            EMPTY\r\n        );\r\n\r\n        transferEther(token, tokenId, owner, total, sellerFee);\r\n        emit Buy(address(token), tokenId, owner, price, msg.sender, buying);\r\n        if (closed) {\r\n            emit CloseOrder(address(token), tokenId, owner, nonce + 1);\r\n        }\r\n    }\r\n\r\n    function recieveFromBid(\r\n        IERC1155 token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 selling,\r\n        uint256 sellerFee,\r\n        Sig memory signature\r\n    ) public {\r\n        require(hasBidder(tokenId), \"Recieve: Token has not bidder\");\r\n\r\n        uint256 nonce = verifyBidSignature(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            selling,\r\n            sellerFee,\r\n            signature\r\n        );\r\n\r\n        address preBidder = auctionBidders[tokenId];\r\n        uint256 preBidderPrice = auctionBidPrices[tokenId];\r\n\r\n        bool closed = verifyOpenAndModifyState(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            nonce,\r\n            selling,\r\n            1\r\n        );\r\n\r\n        transferProxy.erc1155safeTransferFrom(\r\n            token,\r\n            owner,\r\n            preBidder,\r\n            tokenId,\r\n            1,\r\n            EMPTY\r\n        );\r\n\r\n        transferEther(token, tokenId, owner, preBidderPrice, sellerFee);\r\n        emit RecieveFromBid(\r\n            address(token),\r\n            tokenId,\r\n            owner,\r\n            preBidderPrice,\r\n            preBidder\r\n        );\r\n        if (closed) {\r\n            emit CloseOrder(address(token), tokenId, owner, nonce + 1);\r\n        }\r\n    }\r\n\r\n    function cancel(address token, uint256 tokenId) public payable {\r\n        uint256 nonce = nonceHolder.getNonce(token, tokenId, msg.sender);\r\n        nonceHolder.setNonce(token, tokenId, msg.sender, nonce + 1);\r\n\r\n        emit CloseOrder(token, tokenId, msg.sender, nonce + 1);\r\n    }\r\n\r\n    function verifySignature(\r\n        address token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 selling,\r\n        uint256 price,\r\n        uint256 sellerFee,\r\n        Sig memory signature\r\n    ) internal view returns (uint256 nonce) {\r\n        nonce = nonceHolder.getNonce(token, tokenId, owner);\r\n        require(\r\n            prepareMessage(token, tokenId, price, selling, sellerFee, nonce)\r\n                .recover(signature.v, signature.r, signature.s) == owner,\r\n            \"incorrect signature\"\r\n        );\r\n    }\r\n\r\n    function verifyBidSignature(\r\n        address token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 selling,\r\n        uint256 sellerFee,\r\n        Sig memory signature\r\n    ) internal view returns (uint256 nonce) {\r\n        nonce = nonceHolder.getNonce(token, tokenId, owner);\r\n        require(\r\n            prepareBidMessage(token, tokenId, sellerFee, nonce).recover(\r\n                signature.v,\r\n                signature.r,\r\n                signature.s\r\n            ) == owner,\r\n            \"incorrect signature\"\r\n        );\r\n    }\r\n\r\n    function verifyOpenAndModifyState(\r\n        address token,\r\n        uint256 tokenId,\r\n        address payable owner,\r\n        uint256 nonce,\r\n        uint256 selling,\r\n        uint256 buying\r\n    ) internal returns (bool) {\r\n        uint256 comp = nonceHolder\r\n            .getCompleted(token, tokenId, owner, nonce)\r\n            .add(buying);\r\n        require(comp <= selling);\r\n        nonceHolder.setCompleted(token, tokenId, owner, nonce, comp);\r\n\r\n        if (comp == selling) {\r\n            nonceHolder.setNonce(token, tokenId, owner, nonce + 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function prepareMessage(\r\n        address token,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        uint256 value,\r\n        uint256 fee,\r\n        uint256 nonce\r\n    ) internal pure returns (string memory) {\r\n        return\r\n            prepareMessage(token, tokenId, price, fee, nonce).append(\r\n                \". value: \",\r\n                value.toString()\r\n            );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ERC1155SaleNonceHolder\",\"name\":\"_nonceHolder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CloseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"RecieveFromBid\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractSale.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractSale.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hasBidder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonceHolder\",\"outputs\":[{\"internalType\":\"contract ERC1155SaleNonceHolder\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractSale.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"recieveFromBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyerFee\",\"type\":\"uint256\"}],\"name\":\"setBuyerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC1155Sale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000df44ced13f845fe3c02ef0b8d5263c720751cfa00000000000000000000000007afbac1f87240fcc6de261297941503414c4f824000000000000000000000000becf3f0bbb20eb1f920e01794ed291d9e0cfa60b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e40d532cef8a02cf6e21f6902793e6c25adb414b8b6f5a04cedddb5cec92a335"}]}