{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/assetListing/AssetListingProposalGenericExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from './interfaces/IERC20.sol';\\nimport {ILendingPoolConfiguratorV2} from './interfaces/ILendingPoolConfiguratorV2.sol';\\nimport {IProposalGenericExecutor} from './interfaces/IProposalGenericExecutor.sol';\\nimport {IOverlyingAsset} from './interfaces/IOverlyingAsset.sol';\\n\\n/**\\n * @title AssetListingProposalGenericExecutor\\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\\n * @author Aave\\n **/\\ncontract AssetListingProposalGenericExecutor is IProposalGenericExecutor {\\n  event ProposalExecuted();\\n\\n  ILendingPoolConfiguratorV2 public constant LENDING_POOL_CONFIGURATOR_V2 =\\n    ILendingPoolConfiguratorV2(0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756);\\n\\n  /**\\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\\n   */\\n  function execute(\\n    address token,\\n    address aToken,\\n    address stableDebtToken,\\n    address variablDebtToken,\\n    address interestStrategy,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus,\\n    uint256 reserveFactor,\\n    uint8 decimals,\\n    bool enableBorrowOnReserve,\\n    bool enableAsCollateral\\n  ) external override {\\n    require(\\n      token == IOverlyingAsset(aToken).UNDERLYING_ASSET_ADDRESS(),\\n      'ATOKEN: WRONG_UNDERLYING_TOKEN'\\n    );\\n    require(\\n      token == IOverlyingAsset(stableDebtToken).UNDERLYING_ASSET_ADDRESS(),\\n      'STABLE_DEBT: WRONG_UNDERLYING_TOKEN'\\n    );\\n    require(\\n      token == IOverlyingAsset(variablDebtToken).UNDERLYING_ASSET_ADDRESS(),\\n      'VARIABLE_DEBT: WRONG_UNDERLYING_TOKEN'\\n    );\\n    LENDING_POOL_CONFIGURATOR_V2.initReserve(\\n      aToken,\\n      stableDebtToken,\\n      variablDebtToken,\\n      decimals,\\n      interestStrategy\\n    );\\n    LENDING_POOL_CONFIGURATOR_V2.enableBorrowingOnReserve(token, enableBorrowOnReserve);\\n    LENDING_POOL_CONFIGURATOR_V2.setReserveFactor(token, reserveFactor);\\n    if (enableAsCollateral) {\\n      LENDING_POOL_CONFIGURATOR_V2.configureReserveAsCollateral(\\n        token,\\n        ltv,\\n        liquidationThreshold,\\n        liquidationBonus\\n      );\\n    }\\n\\n    emit ProposalExecuted();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/assetListing/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/assetListing/interfaces/ILendingPoolConfiguratorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface ILendingPoolConfiguratorV2 {\\n  /**\\n   * @dev Initializes a reserve\\n   * @param aTokenImpl  The address of the aToken contract implementation\\n   * @param stableDebtTokenImpl The address of the stable debt token contract\\n   * @param variableDebtTokenImpl The address of the variable debt token contract\\n   * @param underlyingAssetDecimals The decimals of the reserve underlying asset\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract for this reserve\\n   **/\\n  function initReserve(\\n    address aTokenImpl,\\n    address stableDebtTokenImpl,\\n    address variableDebtTokenImpl,\\n    uint8 underlyingAssetDecimals,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @dev Configures the reserve collateralization parameters\\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n   * means the liquidator will receive a 5% bonus\\n   **/\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) external;\\n\\n  /**\\n   * @dev Enables borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n   **/\\n  function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external;\\n\\n  /**\\n   * @dev Updates the reserve factor of a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param reserveFactor The new reserve factor of the reserve\\n   **/\\n  function setReserveFactor(address asset, uint256 reserveFactor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/assetListing/interfaces/IOverlyingAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IOverlyingAsset {\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/assetListing/interfaces/IProposalGenericExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IProposalGenericExecutor {\\n  function execute(\\n    address token,\\n    address aToken,\\n    address stableDebtToken,\\n    address variablDebtToken,\\n    address interestStrategy,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus,\\n    uint256 reserveFactor,\\n    uint8 decimals,\\n    bool enableBorrowOnReserve,\\n    bool enableAsCollateral\\n  ) external;\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LENDING_POOL_CONFIGURATOR_V2\",\"outputs\":[{\"internalType\":\"contract ILendingPoolConfiguratorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variablDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enableBorrowOnReserve\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAsCollateral\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AssetListingProposalGenericExecutor","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}