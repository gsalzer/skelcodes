{"status":"1","message":"OK","result":[{"SourceCode":"// File: browser/IMoloch.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IMoloch {\r\n\r\n    function depositToken() external view returns(address);\r\n    function getProposalFlags(uint256 proposalId) external view\r\n        returns (bool[6] memory);\r\n    function members(address usr) external view\r\n        returns (address, uint256, uint256, bool, uint256, uint256);\r\n    function userTokenBalances(address user, address token) external view\r\n        returns (uint256);\r\n\r\n    function cancelProposal(uint256 proposalId) external;\r\n    function withdrawBalance(address token, uint256 amount) external;\r\n\r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        string calldata details\r\n    ) external returns (uint256 proposalId);\r\n}\r\n\r\n// File: browser/Minion.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ncontract Minion {\r\n\r\n    // --- Constants ---\r\n    string public constant MINION_ACTION_DETAILS = '{\"isMinion\": true, \"title\":\"MINION\", \"description\":\"';\r\n\r\n    // --- State and data structures ---\r\n    IMoloch public moloch;\r\n    address public molochApprovedToken;\r\n    mapping (uint256 => Action) public actions; // proposalId => Action\r\n\r\n    struct Action {\r\n        uint256 value;\r\n        address to;\r\n        address proposer;\r\n        bool executed;\r\n        bytes data;\r\n    }\r\n\r\n    // --- Events ---\r\n    event ActionProposed(uint256 proposalId, address proposer);\r\n    event ActionCanceled(uint256 proposalId);\r\n    event ActionExecuted(uint256 proposalId, address executor);\r\n\r\n    // --- Modifiers ---\r\n    modifier memberOnly() {\r\n        require(isMember(msg.sender), \"Minion::not member\");\r\n        _;\r\n    }\r\n\r\n    // --- Constructor ---\r\n    constructor(address _moloch) public {\r\n        moloch = IMoloch(_moloch);\r\n        molochApprovedToken = moloch.depositToken();\r\n    }\r\n\r\n    // --- Fallback function ---\r\n    function() external payable {}\r\n\r\n    // withdraw funds from the moloch\r\n    function doWithdraw(address _token, uint256 _amount) public {\r\n        moloch.withdrawBalance(_token, _amount);\r\n    }\r\n\r\n    function proposeAction(\r\n        address _actionTo,\r\n        uint256 _actionValue,\r\n        bytes calldata _actionData,\r\n        string calldata _description\r\n    )\r\n        external\r\n        memberOnly\r\n        returns (uint256)\r\n    {\r\n        // can't call arbitrary functions on parent moloch, and no calls to\r\n        // zero address allows us to check that Minion submitted\r\n        // the proposal without getting the proposal struct from the moloch\r\n        require(\r\n            !(_actionTo == address(0) || _actionTo == address(moloch)),\r\n            \"Minion::invalid _actionTo\"\r\n        );\r\n\r\n        string memory details = string(abi.encodePacked(MINION_ACTION_DETAILS, _description, '\"}'));\r\n\r\n        uint256 proposalId = moloch.submitProposal(\r\n            address(this),\r\n            0,\r\n            0,\r\n            0,\r\n            molochApprovedToken,\r\n            0,\r\n            molochApprovedToken,\r\n            details\r\n        );\r\n\r\n        Action memory action = Action({\r\n            value: _actionValue,\r\n            to: _actionTo,\r\n            proposer: msg.sender,\r\n            executed: false,\r\n            data: _actionData\r\n        });\r\n\r\n        actions[proposalId] = action;\r\n\r\n        emit ActionProposed(proposalId, msg.sender);\r\n        return proposalId;\r\n    }\r\n\r\n    function cancelAction(uint256 _proposalId) external {\r\n        Action memory action = actions[_proposalId];\r\n        require(msg.sender == action.proposer, \"Minion::not proposer\");\r\n        delete actions[_proposalId];\r\n        emit ActionCanceled(_proposalId);\r\n        moloch.cancelProposal(_proposalId);\r\n    }\r\n\r\n    function executeAction(uint256 _proposalId) external returns (bytes memory) {\r\n        Action memory action = actions[_proposalId];\r\n        bool[6] memory flags = moloch.getProposalFlags(_proposalId);\r\n\r\n        // minion did not submit this proposal\r\n        require(action.to != address(0), \"Minion::invalid _proposalId\");\r\n        require(!action.executed, \"Minion::action executed\");\r\n        require(address(this).balance >= action.value, \"Minion::insufficient eth\");\r\n        require(flags[2], \"Minion::proposal not passed\");\r\n\r\n        // execute call\r\n        actions[_proposalId].executed = true;\r\n        (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);\r\n        require(success, \"Minion::call failure\");\r\n        emit ActionExecuted(_proposalId, msg.sender);\r\n        return retData;\r\n    }\r\n\r\n    // --- View functions ---\r\n    function isMember(address usr) public view returns (bool) {\r\n        (, uint shares,,,,) = moloch.members(usr);\r\n        return shares > 0;\r\n    }\r\n}\r\n// File: browser/MinionFactory.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ncontract MinionFactory {\r\n\r\n   Minion private M;\r\n   \r\n    address[] public Minions;\r\n\r\n    event Summoned(address indexed minion, address indexed dao, address summoner, uint version);\r\n\r\n    function summonMinion(\r\n        address _dao,\r\n        uint256 _version) public {\r\n            \r\n        M = new Minion(_dao);\r\n\r\n        Minions.push(address(M));\r\n\r\n        emit Summoned(address(M), _dao, msg.sender, _version);\r\n\r\n    }\r\n\r\n    function getMinionCount() public view returns (uint256 MinionCount) {\r\n        return Minions.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Minions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"summonMinion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MinionCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minion\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"summoner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Summoned\",\"type\":\"event\"}]","ContractName":"MinionFactory","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cf638be079ead5ae9ca0e4ace66cc0808c5cb4b6737f914343420e8ec713f3c7"}]}