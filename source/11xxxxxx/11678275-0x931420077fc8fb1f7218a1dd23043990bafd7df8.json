{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBoostedVaultWithLockup {\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for the sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function stake(address _beneficiary, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function exit() external;\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function exit(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Withdraws given stake amount from the pool\r\n     * @param _amount Units of the staked token to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Claims only the tokens that have been immediately unlocked, not including\r\n     * those that are in the lockers.\r\n     */\r\n    function claimReward() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function claimRewards() external;\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function claimRewards(uint256 _first, uint256 _last) external;\r\n\r\n    /**\r\n     * @dev Pokes a given account to reset the boost\r\n     */\r\n    function pokeBoost(address _account) external;\r\n\r\n    /**\r\n     * @dev Gets the RewardsToken\r\n     */\r\n    function getRewardToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @dev Gets the last applicable timestamp for this reward period\r\n     */\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n     * and sums with stored to give the new cumulative reward per token\r\n     * @return 'Reward' per staked token\r\n     */\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\r\n     * does NOT include the majority of rewards which will be locked up.\r\n     * @param _account User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _account) external view  returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\r\n     * and those that have passed their time lock.\r\n     * @param _account User address\r\n     * @return amount Total units of unclaimed rewards\r\n     * @return first Index of the first userReward that has unlocked\r\n     * @return last Index of the last userReward that has unlocked\r\n     */\r\n    function unclaimedRewards(address _account) external view returns (uint256 amount, uint256 first, uint256 last);\r\n}\r\n\r\ncontract ModuleKeys {\r\n\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR = 0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract InitializableModule2 is ModuleKeys {\r\n\r\n    INexus public constant nexus = INexus(0xAFcE80b19A8cE13DEc0739a1aaB7A028d6845Eb3);\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\ninterface IRewardsDistributionRecipient {\r\n    function notifyRewardAmount(uint256 reward) external;\r\n    function getRewardToken() external view returns (IERC20);\r\n}\r\n\r\ncontract InitializableRewardsDistributionRecipient is IRewardsDistributionRecipient, InitializableModule2 {\r\n\r\n    // @abstract\r\n    function notifyRewardAmount(uint256 reward) external;\r\n    function getRewardToken() external view returns (IERC20);\r\n\r\n    // This address has the ability to distribute the rewards\r\n    address public rewardsDistributor;\r\n\r\n    /** @dev Recipient is a module, governed by mStable governance */\r\n    function _initialize(address _rewardsDistributor) internal {\r\n        rewardsDistributor = _rewardsDistributor;\r\n    }\r\n\r\n    /**\r\n     * @dev Only the rewards distributor can notify about rewards\r\n     */\r\n    modifier onlyRewardsDistributor() {\r\n        require(msg.sender == rewardsDistributor, \"Caller is not reward distributor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the rewardsDistributor - only called by mStable governor\r\n     * @param _rewardsDistributor   Address of the new distributor\r\n     */\r\n    function setRewardsDistribution(address _rewardsDistributor)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        rewardsDistributor = _rewardsDistributor;\r\n    }\r\n}\r\n\r\ncontract IERC20WithCheckpointing {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256);\r\n}\r\n\r\ncontract IIncentivisedVotingLockup is IERC20WithCheckpointing {\r\n\r\n    function getLastUserPoint(address _addr) external view returns(int128 bias, int128 slope, uint256 ts);\r\n    function createLock(uint256 _value, uint256 _unlockTime) external;\r\n    function withdraw() external;\r\n    function increaseLockAmount(uint256 _value) external;\r\n    function increaseLockLength(uint256 _unlockTime) external;\r\n    function eject(address _user) external;\r\n    function expireContract() external;\r\n\r\n    function claimReward() public;\r\n    function earned(address _account) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract InitializableReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    function _initialize() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\nlibrary Root {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Returns the square root of a given number\r\n     * @param x Input\r\n     * @return y Square root of Input\r\n     */\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x.add(1)).div(2);\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x.div(z).add(z)).div(2);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BoostedTokenWrapper is InitializableReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using StableMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public constant stakingToken = IERC20(0x30647a72Dc82d7Fbb1123EA74716aB8A317Eac19);\r\n    // mStable MTA Staking contract\r\n    IIncentivisedVotingLockup public constant stakingContract = IIncentivisedVotingLockup(0xaE8bC96DA4F9A9613c323478BE181FDb2Aa0E1BF);\r\n\r\n    uint256 private _totalBoostedSupply;\r\n    mapping(address => uint256) private _boostedBalances;\r\n    mapping(address => uint256) private _rawBalances;\r\n\r\n    // Vars for use in the boost calculations\r\n    uint256 private constant MIN_DEPOSIT = 1e18;\r\n    uint256 private constant MAX_BOOST = 15e17;\r\n    uint256 private constant MIN_BOOST = 5e17;\r\n    uint8 private constant BOOST_COEFF = 60;\r\n\r\n    /**\r\n     * @dev TokenWrapper constructor\r\n     **/\r\n    function _initialize(\r\n    ) internal {\r\n        InitializableReentrancyGuard._initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total boosted amount\r\n     * @return uint256 total supply\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalBoostedSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the boosted balance of a given account\r\n     * @param _account User for which to retrieve balance\r\n     */\r\n    function balanceOf(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _boostedBalances[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the RAW balance of a given account\r\n     * @param _account User for which to retrieve balance\r\n     */\r\n    function rawBalanceOf(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _rawBalances[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Read the boost for the given address\r\n     * @param _account User for which to return the boost\r\n     * @return boost where 1x == 1e18\r\n     */\r\n    function getBoost(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balanceOf(_account).divPrecisely(rawBalanceOf(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits a given amount of StakingToken from sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function _stakeRaw(address _beneficiary, uint256 _amount)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _rawBalances[_beneficiary] = _rawBalances[_beneficiary].add(_amount);\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a given stake from sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function _withdrawRaw(uint256 _amount)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _rawBalances[msg.sender] = _rawBalances[msg.sender].sub(_amount);\r\n        stakingToken.safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the boost for the given address according to the formula\r\n     * boost = min(0.5 + c * vMTA_balance / imUSD_locked^(7/8), 1.5)\r\n     * If rawBalance <= MIN_DEPOSIT, boost is 0\r\n     * @param _account User for which to update the boost\r\n     */\r\n    function _setBoost(address _account)\r\n        internal\r\n    {\r\n        uint256 rawBalance = _rawBalances[_account];\r\n        uint256 boostedBalance = _boostedBalances[_account];\r\n        uint256 boost = MIN_BOOST;\r\n\r\n        // Check whether balance is sufficient\r\n        // is_boosted is used to minimize gas usage\r\n        if(rawBalance >= MIN_DEPOSIT) {\r\n            uint256 votingWeight = stakingContract.balanceOf(_account);\r\n            boost = _computeBoost(rawBalance, votingWeight);\r\n        }\r\n\r\n        uint256 newBoostedBalance = rawBalance.mulTruncate(boost);\r\n\r\n        if(newBoostedBalance != boostedBalance) {\r\n            _totalBoostedSupply = _totalBoostedSupply.sub(boostedBalance).add(newBoostedBalance);\r\n            _boostedBalances[_account] = newBoostedBalance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the boost for\r\n     * boost = min(0.5 + c * voting_weight / deposit^(7/8), 1.5)\r\n     */\r\n    function _computeBoost(uint256 _deposit, uint256 _votingWeight)\r\n        private\r\n        pure\r\n        returns (uint256 boost)\r\n    {\r\n        if(_votingWeight == 0) return MIN_BOOST;\r\n\r\n        // Compute balance to the power 7/8\r\n        uint256 denominator = Root.sqrt(Root.sqrt(Root.sqrt(_deposit * 1e5)));\r\n        denominator = denominator.mul(\r\n            denominator.mul(\r\n                denominator.mul(\r\n                    denominator.mul(\r\n                        denominator.mul(\r\n                            denominator.mul(\r\n                                denominator)))))\r\n            );\r\n        denominator = denominator.div(1e3);\r\n        boost = _votingWeight.mul(BOOST_COEFF).div(10).divPrecisely(denominator);\r\n        boost = StableMath.min(\r\n            MIN_BOOST.add(boost),\r\n            MAX_BOOST\r\n        );\r\n    }\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n}\r\n\r\n// Internal\r\n// Libs\r\n/**\r\n * @title  BoostedSavingsVault\r\n * @author Stability Labs Pty. Ltd.\r\n * @notice Accrues rewards second by second, based on a users boosted balance\r\n * @dev    Forked from rewards/staking/StakingRewards.sol\r\n *         Changes:\r\n *          - Lockup implemented in `updateReward` hook (20% unlock immediately, 80% locked for 6 months)\r\n *          - `updateBoost` hook called after every external action to reset a users boost\r\n *          - Struct packing of common data\r\n *          - Searching for and claiming of unlocked rewards\r\n */\r\ncontract BoostedSavingsVault is\r\n    IBoostedVaultWithLockup,\r\n    Initializable,\r\n    InitializableRewardsDistributionRecipient,\r\n    BoostedTokenWrapper\r\n{\r\n    using StableMath for uint256;\r\n    using SafeCast for uint256;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount, address payer);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event Poked(address indexed user);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    IERC20 public constant rewardsToken = IERC20(0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2);\r\n\r\n    uint64 public constant DURATION = 7 days;\r\n    // Length of token lockup, after rewards are earned\r\n    uint256 public constant LOCKUP = 26 weeks;\r\n    // Percentage of earned tokens unlocked immediately\r\n    uint64 public constant UNLOCK = 2e17;\r\n\r\n    // Timestamp for current period finish\r\n    uint256 public periodFinish;\r\n    // RewardRate for the rest of the PERIOD\r\n    uint256 public rewardRate;\r\n    // Last time any user took action\r\n    uint256 public lastUpdateTime;\r\n    // Ever increasing rewardPerToken rate, based on % of total supply\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => UserData) public userData;\r\n    // Locked reward tracking\r\n    mapping(address => Reward[]) public userRewards;\r\n    mapping(address => uint64) public userClaim;\r\n\r\n    struct UserData {\r\n        uint128 rewardPerTokenPaid;\r\n        uint128 rewards;\r\n        uint64 lastAction;\r\n        uint64 rewardCount;\r\n    }\r\n\r\n    struct Reward {\r\n        uint64 start;\r\n        uint64 finish;\r\n        uint128 rate;\r\n    }\r\n\r\n    /**\r\n     * @dev StakingRewards is a TokenWrapper and RewardRecipient\r\n     * Constants added to bytecode at deployTime to reduce SLOAD cost\r\n     */\r\n    function initialize(\r\n        address _rewardsDistributor\r\n    )\r\n        external\r\n        initializer\r\n    {\r\n        InitializableRewardsDistributionRecipient._initialize(_rewardsDistributor);\r\n        BoostedTokenWrapper._initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the reward for a given address, before executing function.\r\n     * Locks 80% of new rewards up for 6 months, vesting linearly from (time of last action + 6 months) to\r\n     * (now + 6 months). This allows rewards to be distributed close to how they were accrued, as opposed\r\n     * to locking up for a flat 6 months from the time of this fn call (allowing more passive accrual).\r\n     */\r\n    modifier updateReward(address _account) {\r\n        uint256 currentTime = block.timestamp;\r\n        uint64 currentTime64 = SafeCast.toUint64(currentTime);\r\n\r\n        // Setting of global vars\r\n        (uint256 newRewardPerToken, uint256 lastApplicableTime) = _rewardPerToken();\r\n        // If statement protects against loss in initialisation case\r\n        if(newRewardPerToken > 0) {\r\n\r\n            rewardPerTokenStored = newRewardPerToken;\r\n            lastUpdateTime = lastApplicableTime;\r\n\r\n            // Setting of personal vars based on new globals\r\n            if (_account != address(0)) {\r\n\r\n                UserData memory data = userData[_account];\r\n                uint256 earned = _earned(_account, data.rewardPerTokenPaid, newRewardPerToken);\r\n\r\n                // If earned == 0, then it must either be the initial stake, or an action in the\r\n                // same block, since new rewards unlock after each block.\r\n                if(earned > 0){\r\n\r\n                    uint256 unlocked = earned.mulTruncate(UNLOCK);\r\n                    uint256 locked = earned.sub(unlocked);\r\n\r\n                    userRewards[_account].push(Reward({\r\n                        start: SafeCast.toUint64(LOCKUP.add(data.lastAction)),\r\n                        finish: SafeCast.toUint64(LOCKUP.add(currentTime)),\r\n                        rate: SafeCast.toUint128(locked.div(currentTime.sub(data.lastAction)))\r\n                    }));\r\n\r\n                    userData[_account] = UserData({\r\n                        rewardPerTokenPaid: SafeCast.toUint128(newRewardPerToken),\r\n                        rewards: SafeCast.toUint128(unlocked.add(data.rewards)),\r\n                        lastAction: currentTime64,\r\n                        rewardCount: data.rewardCount + 1\r\n                    });\r\n                } else {\r\n                    userData[_account] = UserData({\r\n                        rewardPerTokenPaid: SafeCast.toUint128(newRewardPerToken),\r\n                        rewards: data.rewards,\r\n                        lastAction: currentTime64,\r\n                        rewardCount: data.rewardCount\r\n                    });\r\n                }\r\n            }\r\n        } else if(_account != address(0)) {\r\n            // This should only be hit once, for first staker in initialisation case\r\n            userData[_account].lastAction = currentTime64;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /** @dev Updates the boost for a given address, after the rest of the function has executed */\r\n    modifier updateBoost(address _account) {\r\n        _;\r\n        _setBoost(_account);\r\n    }\r\n\r\n    /***************************************\r\n                ACTIONS - EXTERNAL\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for the sender\r\n     * @param _amount Units of StakingToken\r\n     */\r\n    function stake(uint256 _amount)\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        _stake(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes a given amount of the StakingToken for a given beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function stake(address _beneficiary, uint256 _amount)\r\n        external\r\n        updateReward(_beneficiary)\r\n        updateBoost(_beneficiary)\r\n    {\r\n        _stake(_beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function exit()\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        _withdraw(rawBalanceOf(msg.sender));\r\n        (uint256 first, uint256 last) = _unclaimedEpochs(msg.sender);\r\n        _claimRewards(first, last);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws stake from pool and claims any unlocked rewards.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function exit(uint256 _first, uint256 _last)\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        _withdraw(rawBalanceOf(msg.sender));\r\n        _claimRewards(_first, _last);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws given stake amount from the pool\r\n     * @param _amount Units of the staked token to withdraw\r\n     */\r\n    function withdraw(uint256 _amount)\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        _withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims only the tokens that have been immediately unlocked, not including\r\n     * those that are in the lockers.\r\n     */\r\n    function claimReward()\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        uint256 unlocked = userData[msg.sender].rewards;\r\n        userData[msg.sender].rewards = 0;\r\n\r\n        if(unlocked > 0){\r\n            rewardsToken.safeTransfer(msg.sender, unlocked);\r\n            emit RewardPaid(msg.sender, unlocked);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender.\r\n     * Note, this function is costly - the args for _claimRewards\r\n     * should be determined off chain and then passed to other fn\r\n     */\r\n    function claimRewards()\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        (uint256 first, uint256 last) = _unclaimedEpochs(msg.sender);\r\n\r\n        _claimRewards(first, last);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function claimRewards(uint256 _first, uint256 _last)\r\n        external\r\n        updateReward(msg.sender)\r\n        updateBoost(msg.sender)\r\n    {\r\n        _claimRewards(_first, _last);\r\n    }\r\n\r\n    /**\r\n     * @dev Pokes a given account to reset the boost\r\n     */\r\n    function pokeBoost(address _account)\r\n        external\r\n        updateReward(_account)\r\n        updateBoost(_account)\r\n    {\r\n        emit Poked(_account);\r\n    }\r\n\r\n    /***************************************\r\n                ACTIONS - INTERNAL\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\r\n     * rewards and also locked rewards past their time lock.\r\n     * @param _first    Index of the first array element to claim\r\n     * @param _last     Index of the last array element to claim\r\n     */\r\n    function _claimRewards(uint256 _first, uint256 _last)\r\n        internal\r\n    {\r\n        (uint256 unclaimed, uint256 lastTimestamp) = _unclaimedRewards(msg.sender, _first, _last);\r\n        userClaim[msg.sender] = uint64(lastTimestamp);\r\n\r\n        uint256 unlocked = userData[msg.sender].rewards;\r\n        userData[msg.sender].rewards = 0;\r\n\r\n        uint256 total = unclaimed.add(unlocked);\r\n\r\n        if(total > 0){\r\n            rewardsToken.safeTransfer(msg.sender, total);\r\n\r\n            emit RewardPaid(msg.sender, total);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internally stakes an amount by depositing from sender,\r\n     * and crediting to the specified beneficiary\r\n     * @param _beneficiary Staked tokens are credited to this address\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function _stake(address _beneficiary, uint256 _amount)\r\n        internal\r\n    {\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n        require(_beneficiary != address(0), \"Invalid beneficiary address\");\r\n\r\n        _stakeRaw(_beneficiary, _amount);\r\n        emit Staked(_beneficiary, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws raw units from the sender\r\n     * @param _amount      Units of StakingToken\r\n     */\r\n    function _withdraw(uint256 _amount)\r\n        internal\r\n    {\r\n        require(_amount > 0, \"Cannot withdraw 0\");\r\n        _withdrawRaw(_amount);\r\n        emit Withdrawn(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Gets the RewardsToken\r\n     */\r\n    function getRewardToken()\r\n        external\r\n        view\r\n        returns (IERC20)\r\n    {\r\n        return rewardsToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the last applicable timestamp for this reward period\r\n     */\r\n    function lastTimeRewardApplicable()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return StableMath.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n     * and sums with stored to give the new cumulative reward per token\r\n     * @return 'Reward' per staked token\r\n     */\r\n    function rewardPerToken()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint256 rewardPerToken_, ) = _rewardPerToken();\r\n        return rewardPerToken_;\r\n    }\r\n\r\n    function _rewardPerToken()\r\n        internal\r\n        view\r\n        returns (uint256 rewardPerToken_, uint256 lastTimeRewardApplicable_)\r\n    {\r\n        uint256 lastApplicableTime = lastTimeRewardApplicable(); // + 1 SLOAD\r\n        uint256 timeDelta = lastApplicableTime.sub(lastUpdateTime); // + 1 SLOAD\r\n        // If this has been called twice in the same block, shortcircuit to reduce gas\r\n        if(timeDelta == 0) {\r\n            return (rewardPerTokenStored, lastApplicableTime);\r\n        }\r\n        // new reward units to distribute = rewardRate * timeSinceLastUpdate\r\n        uint256 rewardUnitsToDistribute = rewardRate.mul(timeDelta); // + 1 SLOAD\r\n        uint256 supply = totalSupply(); // + 1 SLOAD\r\n        // If there is no StakingToken liquidity, avoid div(0)\r\n        // If there is nothing to distribute, short circuit\r\n        if (supply == 0 || rewardUnitsToDistribute == 0) {\r\n            return (rewardPerTokenStored, lastApplicableTime);\r\n        }\r\n        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\r\n        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(supply);\r\n        // return summed rate\r\n        return (rewardPerTokenStored.add(unitsToDistributePerToken), lastApplicableTime); // + 1 SLOAD\r\n    }\r\n\r\n    /**\r\n     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\r\n     * does NOT include the majority of rewards which will be locked up.\r\n     * @param _account User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 newEarned = _earned(_account, userData[_account].rewardPerTokenPaid, rewardPerToken());\r\n        uint256 immediatelyUnlocked = newEarned.mulTruncate(UNLOCK);\r\n        return immediatelyUnlocked.add(userData[_account].rewards);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\r\n     * and those that have passed their time lock.\r\n     * @param _account User address\r\n     * @return amount Total units of unclaimed rewards\r\n     * @return first Index of the first userReward that has unlocked\r\n     * @return last Index of the last userReward that has unlocked\r\n     */\r\n    function unclaimedRewards(address _account)\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 first, uint256 last)\r\n    {\r\n        (first, last) = _unclaimedEpochs(_account);\r\n        (uint256 unlocked, ) = _unclaimedRewards(_account, first, last);\r\n        amount = unlocked.add(earned(_account));\r\n    }\r\n\r\n    /** @dev Returns only the most recently earned rewards */\r\n    function _earned(address _account, uint256 _userRewardPerTokenPaid, uint256 _currentRewardPerToken)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // current rate per token - rate user previously received\r\n        uint256 userRewardDelta = _currentRewardPerToken.sub(_userRewardPerTokenPaid); // + 1 SLOAD\r\n        // Short circuit if there is nothing new to distribute\r\n        if(userRewardDelta == 0){\r\n            return 0;\r\n        }\r\n        // new reward = staked tokens * difference in rate\r\n        uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta); // + 1 SLOAD\r\n        // add to previous rewards\r\n        return userNewReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the first and last indexes of array elements containing unclaimed rewards\r\n     */\r\n    function _unclaimedEpochs(address _account)\r\n        internal\r\n        view\r\n        returns (uint256 first, uint256 last)\r\n    {\r\n        uint64 lastClaim = userClaim[_account];\r\n\r\n        uint256 firstUnclaimed = _findFirstUnclaimed(lastClaim, _account);\r\n        uint256 lastUnclaimed = _findLastUnclaimed(_account);\r\n\r\n        return (firstUnclaimed, lastUnclaimed);\r\n    }\r\n\r\n    /**\r\n     * @dev Sums the cumulative rewards from a valid range\r\n     */\r\n    function _unclaimedRewards(address _account, uint256 _first, uint256 _last)\r\n        internal\r\n        view\r\n        returns (uint256 amount, uint256 latestTimestamp)\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n        uint64 lastClaim = userClaim[_account];\r\n\r\n        // Check for no rewards unlocked\r\n        uint256 totalLen = userRewards[_account].length;\r\n        if(_first == 0 && _last == 0) {\r\n            if(totalLen == 0 || currentTime <= userRewards[_account][0].start){\r\n                return (0, currentTime);\r\n            }\r\n        }\r\n        // If there are previous unlocks, check for claims that would leave them untouchable\r\n        if(_first > 0){\r\n            require(lastClaim >= userRewards[_account][_first.sub(1)].finish, \"Invalid _first arg: Must claim earlier entries\");\r\n        }\r\n\r\n        uint256 count = _last.sub(_first).add(1);\r\n        for(uint256 i = 0; i < count; i++){\r\n\r\n            uint256 id = _first.add(i);\r\n            Reward memory rwd = userRewards[_account][id];\r\n\r\n            require(currentTime >= rwd.start && lastClaim <= rwd.finish, \"Invalid epoch\");\r\n\r\n            uint256 endTime = StableMath.min(rwd.finish, currentTime);\r\n            uint256 startTime = StableMath.max(rwd.start, lastClaim);\r\n            uint256 unclaimed = endTime.sub(startTime).mul(rwd.rate);\r\n\r\n            amount = amount.add(unclaimed);\r\n        }\r\n\r\n        // Calculate last relevant timestamp here to allow users to avoid issue of OOG errors\r\n        // by claiming rewards in batches.\r\n        latestTimestamp = StableMath.min(currentTime, userRewards[_account][_last].finish);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Uses binarysearch to find the unclaimed lockups for a given account\r\n     */\r\n    function _findFirstUnclaimed(uint64 _lastClaim, address _account)\r\n        internal\r\n        view\r\n        returns(uint256 first)\r\n    {\r\n        uint256 len = userRewards[_account].length;\r\n        if(len == 0) return 0;\r\n        // Binary search\r\n        uint256 min = 0;\r\n        uint256 max = len - 1;\r\n        // Will be always enough for 128-bit numbers\r\n        for(uint256 i = 0; i < 128; i++){\r\n            if (min >= max)\r\n                break;\r\n            uint256 mid = (min.add(max).add(1)).div(2);\r\n            if (_lastClaim > userRewards[_account][mid].start){\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * @dev Uses binarysearch to find the unclaimed lockups for a given account\r\n     */\r\n    function _findLastUnclaimed(address _account)\r\n        internal\r\n        view\r\n        returns(uint256 first)\r\n    {\r\n        uint256 len = userRewards[_account].length;\r\n        if(len == 0) return 0;\r\n        // Binary search\r\n        uint256 min = 0;\r\n        uint256 max = len - 1;\r\n        // Will be always enough for 128-bit numbers\r\n        for(uint256 i = 0; i < 128; i++){\r\n            if (min >= max)\r\n                break;\r\n            uint256 mid = (min.add(max).add(1)).div(2);\r\n            if (now > userRewards[_account][mid].start){\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Notifies the contract that new rewards have been added.\r\n     * Calculates an updated rewardRate based on the rewards in period.\r\n     * @param _reward Units of RewardToken that have been added to the pool\r\n     */\r\n    function notifyRewardAmount(uint256 _reward)\r\n        external\r\n        onlyRewardsDistributor\r\n        updateReward(address(0))\r\n    {\r\n        require(_reward < 1e24, \"Cannot notify with more than a million units\");\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        // If previous period over, reset rewardRate\r\n        if (currentTime >= periodFinish) {\r\n            rewardRate = _reward.div(DURATION);\r\n        }\r\n        // If additional reward to existing period, calc sum\r\n        else {\r\n            uint256 remaining = periodFinish.sub(currentTime);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = _reward.add(leftover).div(DURATION);\r\n        }\r\n\r\n        lastUpdateTime = currentTime;\r\n        periodFinish = currentTime.add(DURATION);\r\n\r\n        emit RewardAdded(_reward);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Poked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pokeBoost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"rawBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IIncentivisedVotingLockup\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaim\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastAction\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rewardCount\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finish\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BoostedSavingsVault","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d9abaafc98eb06e4f658be43df81591a7722e5440bc634116173c004b6aa9b1c"}]}