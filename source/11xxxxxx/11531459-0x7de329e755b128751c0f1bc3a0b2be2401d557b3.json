{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CurryStatic is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 public token;\r\n    \r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 stakeIndex;\r\n        uint256 lastclaimedBlock;\r\n        uint256 fee; \r\n        uint256 rewardWithdrawn;\r\n        \r\n    }\r\n    \r\n    uint256 constant FEE_TO_STAKE = 1;\r\n    uint256 FEE_TO_UNSTAKE = 4;\r\n    \r\n    address[] private stakingAddresses;\r\n    mapping(address => Stake) public addressToStakeMap;\r\n    mapping(uint256 => uint256) public cumulativeblockToReward;\r\n    uint256 public totalAmountForDistribution;\r\n    uint256 public totalStakes;\r\n    uint256 public lastRewardFromChefUpdatedBlock;\r\n    uint256 public totalNumberOfStakers;\r\n    \r\n    address public teamAddress =  address(0); // change address\r\n    address public chefAddress =  address(0); // change address\r\n    \r\n    constructor(IERC20 _token) public {\r\n         token = _token;\r\n    }\r\n     modifier onlyChef() {\r\n        require(chefAddress == _msgSender(), \"CurryStatic: caller is not the chefaddress\");\r\n        _;\r\n    }\r\n    \r\n     // distribute function called by chef contract only\r\n    function distribute(uint256 amount) external onlyChef {\r\n        // update the total cumulative rewards where the tokens are sent from chef contract\r\n        totalAmountForDistribution = totalAmountForDistribution.add(amount);\r\n        lastRewardFromChefUpdatedBlock = block.number;\r\n        cumulativeblockToReward[lastRewardFromChefUpdatedBlock] = cumulativeblockToReward[lastRewardFromChefUpdatedBlock].add(totalAmountForDistribution);\r\n        \r\n    }\r\n    \r\n    // stake function\r\n    function stake(uint256 amount) public {\r\n        require(\r\n            amount != 0,\r\n            \"amount cannot be zero\"\r\n        );\r\n      \r\n        \r\n        Stake storage _stake = addressToStakeMap[_msgSender()];\r\n        \r\n        if (_stake.amount == 0) {\r\n            _stake.stakeIndex = stakingAddresses.length;\r\n            stakingAddresses.push(_msgSender());\r\n            // update the lastrewardblock to keep track that , when he staked how much rewards came from chef contract\r\n            // only first time update, as multiple time stake applicable\r\n            _stake.lastclaimedBlock = lastRewardFromChefUpdatedBlock;\r\n             totalNumberOfStakers = totalNumberOfStakers.add(1);\r\n        }\r\n        \r\n        uint256 fee = amount.mul(FEE_TO_STAKE).div(100); // 1% stake fee\r\n        uint256 amountAfterFee = amount.sub(fee);  // actual staked amount\r\n        totalStakes = totalStakes.add(amountAfterFee); // update total stakes\r\n        _stake.amount = _stake.amount.add(amountAfterFee); // store the staking amount\r\n        \r\n        \r\n        \r\n        // transfer tokens to this address\r\n        require(\r\n            token.transferFrom(_msgSender(), address(this), amountAfterFee),  \r\n            \"transferFrom failed.\"\r\n        );\r\n        \r\n        // transfer the fee to teamaddress \r\n        require(\r\n            token.transferFrom(_msgSender(), teamAddress, fee),\r\n            \"transfer failed\"\r\n        );\r\n      \r\n    }\r\n    \r\n    // withdraw function\r\n    function withdraw() public  {\r\n        Stake storage _stake = addressToStakeMap[_msgSender()];\r\n        if (_stake.amount == 0) {\r\n            revert(\"no amount to withdraw\");\r\n        }\r\n        \r\n        uint256 fee = _stake.amount.mul(FEE_TO_UNSTAKE).div(100); // 4% unstake fee\r\n        uint256 amountAfterFee = _stake.amount.sub(fee);  // withdrawal amount \r\n        \r\n        \r\n        // Get the reward came from chef contract\r\n        // logic: last updated cumultaive reward - his staked time cumulative reward \r\n        _stake.reward = checkCurrentRewards(_msgSender());\r\n        \r\n        \r\n        // add the reward which got from chef contract via, distribute function calling from chef contract\r\n        uint256 withdrawlAmount = amountAfterFee.add(_stake.reward);\r\n        \r\n        // delete the user and update stake\r\n        totalStakes = totalStakes.sub(_stake.amount); // update stake\r\n        totalNumberOfStakers = totalNumberOfStakers.sub(1);\r\n        delete addressToStakeMap[_msgSender()];\r\n        \r\n         // transfer tokens to the user\r\n        require(\r\n            token.transfer(_msgSender(), withdrawlAmount),\r\n            \"transfer failed\"\r\n        );\r\n        \r\n        // transfer the fee to teamaddress\r\n        require(\r\n            token.transfer(teamAddress, fee),\r\n            \"transfer failed\"\r\n        );\r\n        \r\n       \r\n    \r\n    }\r\n    \r\n    // update token address called by owner only\r\n    function changeTokenAddress(IERC20 newAddr) public onlyOwner {\r\n        require(\r\n            newAddr != IERC20(0),\r\n            \"zero address is not allowed\"\r\n        );\r\n        \r\n        // token address can be changed when total stakers are 0\r\n        require(\r\n            totalNumberOfStakers == 0,\r\n            \"stakers are present, can not change token address\"\r\n        );\r\n        \r\n       token = newAddr;\r\n    }\r\n    \r\n      // update chef address called by owner only\r\n    function changeChefAddress(address newAddr) public onlyOwner {\r\n        require(\r\n            newAddr != address(0),\r\n            \"zero address is not allowed\"\r\n        );\r\n        \r\n       chefAddress = newAddr;\r\n    }\r\n    \r\n    // update team address called by owner only\r\n    function changeTeamAddress(address newAddr) public onlyOwner {\r\n        require(\r\n            newAddr != address(0),\r\n            \"zero address is not allowed\"\r\n        );\r\n        \r\n        teamAddress = newAddr;\r\n    }\r\n    \r\n    // withdraw tokens if no stakers are present\r\n     function withdrawUnClaimed() public onlyOwner {\r\n         require(\r\n            totalNumberOfStakers == 0,\r\n            \"stakers are present, can not withdraw unclaimed\"\r\n        );\r\n         require(\r\n            token.balanceOf(address(this)) != 0,\r\n            \"totalAmountForDistribution is 0, can not claim\"\r\n        );\r\n        \r\n         require(\r\n            token.transfer(teamAddress, token.balanceOf(address(this))),\r\n            \"transfer failed\"\r\n        );    \r\n      \r\n    }\r\n    \r\n    // check the current reward\r\n    function checkCurrentRewards(address user) public view returns (uint256) {\r\n        Stake storage _stake = addressToStakeMap[user];\r\n          // Get the reward came from chef contract\r\n        // logic: last updated cumultaive reward - his staked time cumulative reward \r\n        uint256 totalRewardInStakeperiod = cumulativeblockToReward[lastRewardFromChefUpdatedBlock].sub(cumulativeblockToReward[_stake.lastclaimedBlock]);\r\n        // calculate his reward according to his stake amount\r\n        uint256 currReward = totalRewardInStakeperiod.mul(_stake.amount).div(totalStakes);\r\n        return currReward;\r\n    }\r\n    \r\n     // check staking amount\r\n    function checkStakingAmount(address user) public view returns (uint256) {\r\n        Stake storage _stake = addressToStakeMap[user];\r\n        return _stake.amount;\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToStakeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastclaimedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeChefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkCurrentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cumulativeblockToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardFromChefUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountForDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurryStatic","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000028f30ee0e78ad94dfd0b6b04899223965c4b95cd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd5a4140a33e80cbb8f55c74e62abb322bc384da2edcb8b5e65b4a391de1077b"}]}