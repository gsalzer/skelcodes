{"status":"1","message":"OK","result":[{"SourceCode":"///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////################################################################/////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////THIS IS THE RPEPEBLU POOL OF KEK STAKING - rPepe Token Staking//////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////################################################################/////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\ninterface IKEK{\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function claimRewards(uint256 rewards, address rewardedTo) external returns(bool);\r\n    function stakingRewardsAvailable() external view returns(uint256 _rewardsAvailable);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\ncontract rPepeToKEK {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public currentStakingRate;\r\n    address public KEK = 0x31AEe7Db3b390bAaD34213C173A9df0dd11D84bd;\r\n    address public RPepe = 0x0e9b56D2233ea2b5883861754435f9C51Dbca141;\r\n    \r\n    uint256 public totalRewards;\r\n    uint256 private basePercent = 100;\r\n    \r\n    struct DepositedToken{\r\n        uint256 activeDeposit;\r\n        uint256 totalDeposits;\r\n        uint256 startTime;\r\n        uint256 pendingGains;\r\n        uint256 lastClaimedDate;\r\n        uint256 totalGained;\r\n        uint    rate;\r\n    }\r\n    \r\n    mapping(address => DepositedToken) users;\r\n    \r\n    event Staked(address indexed staker, uint256 indexed tokens);\r\n    event StakingRateChanged(uint256 indexed stakingRatePerHour);\r\n    event TokensClaimed(address indexed claimer, uint256 indexed stakedTokens);\r\n    event RewardClaimed(address indexed claimer, uint256 indexed reward);\r\n    \r\n    constructor() public{\r\n        currentStakingRate = 1e16; // 0.01 per hour\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Start staking\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function Stake(uint256 _amount) external {\r\n        \r\n        // transfer tokens from user to the contract balance\r\n        require(IKEK(RPepe).transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        uint256 tokensBurned = findTwoPointFivePercent(_amount);\r\n        uint256 tokensTransferred = _amount.sub(tokensBurned);\r\n    \r\n        // add new stake\r\n        _addToStake(tokensTransferred);\r\n        \r\n        emit Staked(msg.sender, _amount);\r\n        \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Claim reward and staked tokens\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function ClaimStakedTokens() public {\r\n        require(users[msg.sender].activeDeposit > 0, \"no running stake\");\r\n        \r\n        uint256 _currentDeposit = users[msg.sender].activeDeposit;\r\n        \r\n        // check if we have any pending reward, add it to pendingGains var\r\n        users[msg.sender].pendingGains = PendingReward(msg.sender);\r\n        // update amount \r\n        users[msg.sender].activeDeposit = 0;\r\n        \r\n        // transfer staked tokens\r\n        require(IKEK(RPepe).transfer(msg.sender, _currentDeposit));\r\n        \r\n        emit TokensClaimed(msg.sender, _currentDeposit);\r\n        \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Claim reward and staked tokens\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function ClaimReward() public {\r\n        require(PendingReward(msg.sender) > 0, \"nothing pending to claim\");\r\n    \r\n        uint256 _pendingReward = PendingReward(msg.sender);\r\n        \r\n        // add claimed reward to global stats\r\n        totalRewards = totalRewards.add(_pendingReward);\r\n        // add the reward to total claimed rewards\r\n        users[msg.sender].totalGained = users[msg.sender].totalGained.add(_pendingReward);\r\n        // update lastClaim amount\r\n        users[msg.sender].lastClaimedDate = now;\r\n        // reset previous rewards\r\n        users[msg.sender].pendingGains = 0;\r\n        \r\n        // send tokens from KEK to the user\r\n        require(IKEK(KEK).claimRewards(_pendingReward, msg.sender));\r\n        \r\n        _updateStakingRate();\r\n        // update staking rate\r\n        users[msg.sender].rate = currentStakingRate;\r\n        \r\n        emit RewardClaimed(msg.sender, _pendingReward);\r\n    }\r\n    \r\n    function Exit() external{\r\n        if(PendingReward(msg.sender) > 0)\r\n            ClaimReward();\r\n        if(users[msg.sender].activeDeposit > 0)\r\n            ClaimStakedTokens();\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Private function to update the staking rate\r\n    // ------------------------------------------------------------------------\r\n    function _updateStakingRate() private{\r\n        uint256 originalRewards = 49000000 * 10 ** 18;\r\n        \r\n        // check the current volume of the rewards\r\n        uint256 rewardsAvailable = IKEK(KEK).stakingRewardsAvailable();\r\n        uint256 rewardsRemoved = originalRewards.sub(rewardsAvailable);\r\n        \r\n        if(rewardsRemoved >= 12250000 * 10 ** 18 && rewardsRemoved < 24500000 * 10 ** 18) { // less than 25% but greater than 50%\r\n            currentStakingRate =  5e15; // 0.005 per hour\r\n        }\r\n        else if(rewardsRemoved >= 24500000 * 10 ** 18 && rewardsRemoved < 34300000 * 10 ** 18){ // less than equal to 50% but greater than 70%\r\n            currentStakingRate = 2e15; // 0.002 per hour\r\n        }\r\n        else if(rewardsRemoved >= 34300000 * 10 ** 18 && rewardsRemoved < 44100000 * 10 ** 18){ // less than equal to 70% but greater than 90%\r\n            currentStakingRate = 1e15; // 0.001 per hour\r\n        }\r\n        else if(rewardsRemoved >= 44100000 * 10 ** 18) {\r\n            currentStakingRate = 5e14; // 0.0005 per hour\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the pending reward\r\n    // ------------------------------------------------------------------------\r\n    function PendingReward(address _caller) public view returns(uint256 _pendingReward){\r\n        uint256 _totalStakedTime = (now.sub(users[_caller].lastClaimedDate)).div(1 hours); // in hours\r\n        \r\n        uint256 reward = ((users[_caller].activeDeposit).mul(_totalStakedTime.mul(users[_caller].rate)));\r\n        reward = reward.div(10 ** 18);\r\n        return reward.add(users[_caller].pendingGains);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the active stake of the user\r\n    // ------------------------------------------------------------------------\r\n    function YourActiveStake(address _user) external view returns(uint256 _activeStake){\r\n        return users[_user].activeDeposit;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the total stakes of the user\r\n    // ------------------------------------------------------------------------\r\n    function YourTotalStakes(address _user) external view returns(uint256 _totalStakes){\r\n        return users[_user].totalDeposits;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get total earned rewards from stake\r\n    // ------------------------------------------------------------------------\r\n    function TotalStakeRewardsClaimed(address _user) external view returns(uint256 _totalEarned){\r\n        return users[_user].totalGained;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the staking rate you staked at\r\n    // ------------------------------------------------------------------------\r\n    function YourStakingRate(address _user) external view returns(uint256 _stakingRate){\r\n        return users[_user].rate;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Internal function to add new deposit\r\n    // ------------------------------------------------------------------------        \r\n    function _addToStake(uint256 _amount) internal{\r\n        _updateStakingRate();\r\n        \r\n        // check if we have any pending reward, add it to pendingGains variable\r\n        users[msg.sender].pendingGains = PendingReward(msg.sender);\r\n        users[msg.sender].rate = currentStakingRate; // rate for stakers will be fixed at time of staking\r\n            \r\n        users[msg.sender].activeDeposit = _amount;\r\n        users[msg.sender].totalDeposits = users[msg.sender].totalDeposits.add(_amount);\r\n        users[msg.sender].startTime = now;\r\n        users[msg.sender].lastClaimedDate = now;\r\n        \r\n    }\r\n    \r\n    //// utility function from RPepe\r\n    function findTwoPointFivePercent(uint256 value) public view returns (uint256)  {\r\n        uint256 roundValue = value.ceil(basePercent);\r\n        uint256 twoPointFivePercent = roundValue.mul(basePercent).div(4000);\r\n        return twoPointFivePercent;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingRatePerHour\",\"type\":\"uint256\"}],\"name\":\"StakingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RPepe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalStakeRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findTwoPointFivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"rPepeToKEK","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a2422c21fba50d37dbca45e9f6e142a7d4208b76a0d089ddd6abe1271c3e50cf"}]}