{"status":"1","message":"OK","result":[{"SourceCode":"//   _    _ _   _                __ _                            \r\n//  | |  (_) | | |              / _(_)                           \r\n//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \r\n//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\r\n//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\r\n//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\r\n//\r\n//  LIQUID : a token with deep floor liquidity & ever-rising floor price\r\n//\r\n//  https://www.KittenSwap.org\r\n//\r\n//  https://www.Kitten.finance\r\n//\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract LIQUID is ERC20Detailed \r\n{\r\n    address public DEPLOYER = 0xD8d71629950cE53d7E9F94619b09058D9D9f5866;\r\n    uint public constant INITIAL_EthReserve = 2100 * (10 ** 18);\r\n    uint public constant INITIAL_TokenReserve = 21000 * (10 ** 18);\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    uint public MARKET_OPEN_STAGE = 0; // 0: closed; 1: open;\r\n    \r\n    uint public MARKET_BUY_ETH_LIMIT = (10 ** 18) / 1000; // 0: ignore; x: limit purchase amt;\r\n    \r\n    address public MARKET_WHITELIST_TOKEN = address(0);\r\n    uint public MARKET_WHITELIST_TOKEN_BP = 10 * 10000; // 0: ignore; x: require y TOKEN to hold [x * y / 10000] LIQUID\r\n    \r\n    uint public MARKET_WHITELIST_BASE_AMT = 10 * (10 ** 18); // can always own some LIQUID\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    uint public gTransferBurnBP = 60;\r\n    uint public gSellBurnBP = 60;\r\n    uint public gSellTreasuryBP = 0;\r\n    \r\n    // special BurnBP for some addresses\r\n    mapping (address => uint) public gTransferFromBurnBP;\r\n    mapping (address => uint) public gTransferToBurnBP;\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    uint public gContractCheckBuyLevel = 3; // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n    uint public gContractCheckSellLevel = 3; // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n    \r\n    mapping (address => uint) public gContractWhitelist; // 0: disableALL; 1: disableBUY; 2: disableSELL; 3: allowALL;\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    address constant tokenFactoryAddr = 0x1111111111111111111111111111111111111111;\r\n    \r\n    address public govAddr;\r\n    \r\n    address public treasuryAddr;\r\n    uint public treasuryAmtTotal = 0;\r\n\r\n    constructor () public ERC20Detailed(\"LIQUID\", \"LIQUID\", 18) {\r\n        if (msg.sender == DEPLOYER) {\r\n            govAddr = msg.sender;\r\n            treasuryAddr = msg.sender;\r\n            _mint(tokenFactoryAddr, INITIAL_TokenReserve);\r\n        }        \r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        //------------------------------------------------------------------------------\r\n\r\n        // 0         ===> default BurnBP\r\n        // 1 ~ 10000 ===> customized BurnBP\r\n        // >10000    ===> zero BurnBP\r\n        \r\n        uint fromBurnBP = gTransferFromBurnBP[sender];\r\n        if (fromBurnBP == 0)\r\n            fromBurnBP = gTransferBurnBP;\r\n        else if (fromBurnBP > 10000)\r\n            fromBurnBP = 0;\r\n\r\n        uint toBurnBP = gTransferToBurnBP[recipient];\r\n        if (toBurnBP == 0)\r\n            toBurnBP = gTransferBurnBP;\r\n        else if (toBurnBP > 10000)\r\n            toBurnBP = 0;\r\n\r\n        uint BurnBP = fromBurnBP; // BurnBP = min(fromBurnBP, toBurnBP)\r\n        if (BurnBP > toBurnBP)\r\n            BurnBP = toBurnBP;\r\n        \r\n        if (BurnBP > 0) {\r\n            uint burnAmt = amount.mul(BurnBP).div(10000);\r\n            _burn(recipient, burnAmt);\r\n        }\r\n    }\r\n    function _transferRawNoBurn(address sender, address recipient, uint amount) internal {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }    \r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        \r\n        if (amount == 0) return;\r\n        if (_balances[account] == 0) return;\r\n\r\n        if (account != tokenFactoryAddr) {\r\n\r\n            _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n            emit Transfer(account, address(0), amount);\r\n\r\n            //------------------------------------------------------------------------------\r\n            // AutoBoost : because totalSupply is reduced, we can burn tokenReserve to boost price\r\n            // Check our Medium on https://www.Kitten.finance for details\r\n            //------------------------------------------------------------------------------\r\n            \r\n            uint TokenReserve = _balances[tokenFactoryAddr];\r\n            \r\n            if (_totalSupply > TokenReserve) { // shall always satisfy\r\n                uint extraBurn = TokenReserve.mul(amount).div(_totalSupply.sub(TokenReserve));\r\n                _balances[tokenFactoryAddr] = TokenReserve.sub(extraBurn);\r\n                emit Transfer(tokenFactoryAddr, address(0), extraBurn);\r\n                \r\n                _totalSupply = _totalSupply.sub(amount).sub(extraBurn);\r\n            } else {\r\n                _totalSupply = _totalSupply.sub(amount);\r\n            }\r\n        }\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }    \r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function getEthReserve() public view returns (uint) {\r\n        return INITIAL_EthReserve.add(address(this).balance).sub(treasuryAmtTotal);\r\n    }\r\n\r\n    function getTokenReserve() public view returns (uint) {\r\n        return _balances[tokenFactoryAddr];\r\n    }\r\n    \r\n    event BuyToken(address indexed user, uint tokenAmt, uint ethAmt);\r\n    event SellToken(address indexed user, uint tokenAmt, uint ethAmt);\r\n\r\n    function buyToken(uint minTokenAmt, uint expireTimestamp) external payable \r\n    {\r\n        address user = msg.sender;\r\n\r\n        if (gContractWhitelist[user] < 2) { // 0: disableALL; 1: disableBUY; 2: disableSELL; 3: allowALL;\r\n            if (gContractCheckBuyLevel % 2 == 1) require(!isContract(user), '!human'); // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n            if (gContractCheckBuyLevel >= 2) require(user == tx.origin, '!human');     // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n        }\r\n\r\n        require ((MARKET_OPEN_STAGE > 0) || (user == govAddr), '!market'); // govAddr can test contract before market open\r\n        require (msg.value > 0, '!eth');\r\n        require (minTokenAmt > 0, '!minToken');\r\n        require ((expireTimestamp == 0) || (block.timestamp <= expireTimestamp), '!expire');\r\n        require ((MARKET_BUY_ETH_LIMIT == 0) || (msg.value <= MARKET_BUY_ETH_LIMIT), '!ethLimit');\r\n        \r\n        //------------------------------------------------------------------------------\r\n        \r\n        uint newEthReserve = INITIAL_EthReserve.add(address(this).balance).sub(treasuryAmtTotal);\r\n        uint oldEthReserve = newEthReserve.sub(msg.value);\r\n\r\n        uint oldTokenReserve = _balances[tokenFactoryAddr];\r\n        uint newTokenReserve = (oldEthReserve.mul(oldTokenReserve).add(newEthReserve / 2)).div(newEthReserve);\r\n        \r\n        uint outTokenAmt = oldTokenReserve.sub(newTokenReserve);\r\n        require (outTokenAmt > 0, '!outToken');\r\n        require (outTokenAmt >= minTokenAmt, \"KittenSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        \r\n        if ((MARKET_WHITELIST_TOKEN_BP > 0) && (MARKET_WHITELIST_TOKEN != address(0))) \r\n        {\r\n            uint amtWhitelistToken = IERC20(MARKET_WHITELIST_TOKEN).balanceOf(user);\r\n            uint amtLimit = amtWhitelistToken.mul(MARKET_WHITELIST_TOKEN_BP).div(10000);\r\n            \r\n            if (amtLimit < MARKET_WHITELIST_BASE_AMT) {\r\n                amtLimit = MARKET_WHITELIST_BASE_AMT;\r\n            }\r\n            \r\n            require (_balances[user].add(outTokenAmt) <= amtLimit, '!need-more-whitelist-token');\r\n        }\r\n\r\n        _transferRawNoBurn(tokenFactoryAddr, user, outTokenAmt);\r\n\r\n        //------------------------------------------------------------------------------\r\n        \r\n        emit BuyToken(user, outTokenAmt, msg.value);\r\n    }\r\n    \r\n    function sellToken(uint tokenAmt, uint minEthAmt, uint expireTimestamp) external \r\n    {\r\n        address payable user = msg.sender;\r\n\r\n        if (gContractWhitelist[user] % 2 == 0) { // 0: disableALL; 1: disableBUY; 2: disableSELL; 3: allowALL;\r\n            if (gContractCheckSellLevel % 2 == 1) require(!isContract(user), '!human'); // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n            if (gContractCheckSellLevel >= 2) require(user == tx.origin, '!human');     // 0: no check; 1: methodA; 2: methodB; 3: both;\r\n        }\r\n\r\n        require (tokenAmt > 0, '!token');\r\n        require (minEthAmt > 0, '!minEth');\r\n        require ((expireTimestamp == 0) || (block.timestamp <= expireTimestamp), '!expire');\r\n        \r\n        uint burnAmt = tokenAmt.mul(gSellBurnBP).div(10000);\r\n        _burn(user, burnAmt);\r\n        uint tokenAmtAfterBurn = tokenAmt.sub(burnAmt);\r\n\r\n        //------------------------------------------------------------------------------\r\n\r\n        uint oldEthReserve = INITIAL_EthReserve.add(address(this).balance).sub(treasuryAmtTotal);\r\n        uint oldTokenReserve = _balances[tokenFactoryAddr];\r\n\r\n        uint newTokenReserve = oldTokenReserve.add(tokenAmtAfterBurn);\r\n        uint newEthReserve = (oldEthReserve.mul(oldTokenReserve).add(newTokenReserve / 2)).div(newTokenReserve);\r\n        \r\n        uint outEthAmt = oldEthReserve.sub(newEthReserve);\r\n        require (outEthAmt > 0, '!outEth');\r\n        require (outEthAmt >= minEthAmt, \"KittenSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n\r\n        _transferRawNoBurn(user, tokenFactoryAddr, tokenAmtAfterBurn);\r\n\r\n        //------------------------------------------------------------------------------\r\n\r\n        if (gSellTreasuryBP > 0) \r\n        {\r\n            uint treasuryAmt = outEthAmt.mul(gSellTreasuryBP).div(10000);\r\n            treasuryAmtTotal = treasuryAmtTotal.add(treasuryAmt);\r\n            user.transfer(outEthAmt.sub(treasuryAmt));\r\n        } \r\n        else\r\n        {\r\n            user.transfer(outEthAmt);\r\n        }\r\n        \r\n        emit SellToken(user, tokenAmt, outEthAmt);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    modifier govOnly() \r\n    {\r\n    \trequire(msg.sender == govAddr, \"!gov\");\r\n    \t_;\r\n    }\r\n    \r\n    function govTransferAddr(address newAddr) external govOnly \r\n    {\r\n    \trequire(newAddr != address(0), \"!addr\");\r\n    \tgovAddr = newAddr;\r\n    }\r\n    \r\n    function govOpenMarket() external govOnly\r\n    {\r\n        MARKET_OPEN_STAGE = 1;\r\n    }\r\n\r\n    function govSetTreasury(address newAddr) external govOnly\r\n    {\r\n    \trequire(newAddr != address(0), \"!addr\");\r\n    \ttreasuryAddr = newAddr;\r\n    }    \r\n    \r\n    function govSetBurn(uint transferBurnBP, uint sellBurnBP, uint sellTreasuryBP) external govOnly\r\n    {\r\n        require (transferBurnBP <= 60);\r\n        require (sellBurnBP <= 60);\r\n        require (sellTreasuryBP <= 30);\r\n        require (sellTreasuryBP <= sellBurnBP);\r\n        require (sellBurnBP.add(sellTreasuryBP) <= 60);\r\n        \r\n        gTransferBurnBP = transferBurnBP;\r\n        gSellBurnBP = sellBurnBP;\r\n        gSellTreasuryBP = sellTreasuryBP;\r\n    }\r\n    \r\n    function govSetBurnForAddress(address addr, uint transferFromBurnBP, uint transferToBurnBP) external govOnly\r\n    {\r\n        // 0         ===> default BurnBP\r\n        // 1 ~ 10000 ===> customized BurnBP\r\n        // 10001     ===> zero BurnBP\r\n        require (transferFromBurnBP <= 10001);\r\n        require (transferToBurnBP <= 10001);\r\n        \r\n        gTransferFromBurnBP[addr] = transferFromBurnBP;\r\n        gTransferToBurnBP[addr] = transferToBurnBP;\r\n    }\r\n\r\n    function govSetContractCheckLevel(uint buyLevel, uint sellLevel) external govOnly\r\n    {\r\n        gContractCheckBuyLevel = buyLevel;\r\n        gContractCheckSellLevel = sellLevel;\r\n    }\r\n    function govSetContractWhiteList(address addr, uint state) external govOnly\r\n    {\r\n        gContractWhitelist[addr] = state;\r\n    }\r\n    \r\n    function govSetBuyLimit(uint new_MARKET_BUY_ETH_LIMIT) external govOnly \r\n    {\r\n        MARKET_BUY_ETH_LIMIT = new_MARKET_BUY_ETH_LIMIT;\r\n    }\r\n\r\n    function govSetWhitelistToken(address new_MARKET_WHITELIST_TOKEN, uint new_MARKET_WHITELIST_TOKEN_BP) external govOnly \r\n    {\r\n        MARKET_WHITELIST_TOKEN = new_MARKET_WHITELIST_TOKEN;\r\n        MARKET_WHITELIST_TOKEN_BP = new_MARKET_WHITELIST_TOKEN_BP;\r\n    }\r\n    \r\n    function govSetWhitelistBaseAmt(uint new_MARKET_WHITELIST_BASE_AMT) external govOnly \r\n    {\r\n        MARKET_WHITELIST_BASE_AMT = new_MARKET_WHITELIST_BASE_AMT;\r\n    }    \r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    modifier treasuryOnly() \r\n    {\r\n    \trequire(msg.sender == treasuryAddr, \"!treasury\");\r\n    \t_;\r\n    }    \r\n    \r\n    function treasurySend(uint amt) external treasuryOnly\r\n    {\r\n        require(amt <= treasuryAmtTotal);\r\n\r\n        treasuryAmtTotal = treasuryAmtTotal.sub(amt);\r\n        \r\n        address payable _treasuryAddr = address(uint160(treasuryAddr));\r\n        _treasuryAddr.transfer(amt);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_EthReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_TokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_BUY_ETH_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_OPEN_STAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_WHITELIST_BASE_AMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_WHITELIST_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_WHITELIST_TOKEN_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gContractCheckBuyLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gContractCheckSellLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gContractWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gSellBurnBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gSellTreasuryBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gTransferBurnBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gTransferFromBurnBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gTransferToBurnBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"govAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"govOpenMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferBurnBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTreasuryBP\",\"type\":\"uint256\"}],\"name\":\"govSetBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferFromBurnBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferToBurnBP\",\"type\":\"uint256\"}],\"name\":\"govSetBurnForAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_MARKET_BUY_ETH_LIMIT\",\"type\":\"uint256\"}],\"name\":\"govSetBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLevel\",\"type\":\"uint256\"}],\"name\":\"govSetContractCheckLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"govSetContractWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"govSetTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_MARKET_WHITELIST_BASE_AMT\",\"type\":\"uint256\"}],\"name\":\"govSetWhitelistBaseAmt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_MARKET_WHITELIST_TOKEN\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_MARKET_WHITELIST_TOKEN_BP\",\"type\":\"uint256\"}],\"name\":\"govSetWhitelistToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"govTransferAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAmtTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"treasurySend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LIQUID","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9f02fe762af55ad2d1716063cbaffebb244b86d4b2b16cc1ecde087e6f3492a4"}]}