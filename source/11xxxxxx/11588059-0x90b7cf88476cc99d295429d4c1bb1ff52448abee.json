{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n// \ncontract Pausable is Ownable {\r\n    bool pause;\r\n    \r\n    constructor() public {\r\n        pause = false;\r\n    }\r\n    \r\n    function setPauseStatus(bool _pauseStatus) public onlyOwner {\r\n        pause = _pauseStatus;\r\n    }\r\n    \r\n    function getPauseStatus() view public returns(bool)  {\r\n        return pause;\r\n    }\r\n    \r\n    modifier isPaused() {\r\n        require(pause==false, \"The system is paused\");\r\n        _;\r\n    }\r\n}\n\n// \nabstract contract ERC721Interface {\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public virtual;\r\n  function approve(address to, uint256 tokenId) public virtual;\r\n}\n\nabstract contract ERC721CustomInterface {\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external virtual;\r\n    function approve(address to, uint256 tokenId) external virtual;\r\n}\n\ncontract AtomicProxy is Ownable, Pausable {\r\n    // Importo i contatori\r\n    using Counters for Counters.Counter;\r\n    // Dichiaro contatori\r\n    Counters.Counter private _erc721DappIndex;\r\n    \r\n    // Struct per verificare se la dapp è gestita o meno\r\n    struct Erc721Dapp {\r\n        address dapp;\r\n        ERC721Interface erc721Interface;\r\n        ERC721CustomInterface erc721CustomInterface;\r\n        uint256 index;\r\n        bool enabled;\r\n        bool custom;\r\n    }\r\n    \r\n    mapping(uint256 => address) addressIndexErc721Map;\r\n    mapping(address => uint256) counterIndexErc721Map;\r\n    mapping(address => Erc721Dapp) erc721Map;\r\n    \r\n    address[] erc721Handled;\r\n    mapping(address => uint256) erc721IndexHandled;\r\n    \r\n    modifier erc721AddressIsAvailable(address _erc721address) {\r\n        require(erc721Map[_erc721address].enabled==false, \"erc721 address already available\");\r\n        _;\r\n    }\r\n    \r\n    modifier erc721AddressIsNotAvailable(address _erc721address) {\r\n        require(erc721Map[_erc721address].enabled==true, \"erc721 is not available\");\r\n        _;\r\n    }\r\n    \r\n    // Aggiungo un nuovo contratto ERC721\r\n    function addERC721Contract(address _erc721address, bool _custom) public onlyOwner isPaused erc721AddressIsAvailable(_erc721address) {\r\n        _erc721DappIndex.increment();\r\n        addressIndexErc721Map[_erc721DappIndex.current()] = _erc721address;\r\n        counterIndexErc721Map[_erc721address] = _erc721DappIndex.current();\r\n        if(_custom) {\r\n         erc721Map[_erc721address] = Erc721Dapp(_erc721address, ERC721Interface(address(0)), ERC721CustomInterface(_erc721address), _erc721DappIndex.current(), true, _custom);\r\n        }\r\n        else {\r\n         erc721Map[_erc721address] = Erc721Dapp(_erc721address, ERC721Interface(_erc721address), ERC721CustomInterface(address(0)), _erc721DappIndex.current(), true, _custom);\r\n        }\r\n        erc721Handled.push(_erc721address);\r\n        erc721IndexHandled[_erc721address] = erc721Handled.length - 1;\r\n    }\r\n    \r\n    // Rimuovo un contratto ERC721\r\n    function removeERC721Contract(address _erc721address, bool _custom) public onlyOwner isPaused erc721AddressIsNotAvailable(_erc721address) {\r\n        uint256 ausCounter;\r\n        ausCounter = counterIndexErc721Map[_erc721address];\r\n        addressIndexErc721Map[ausCounter] = address(0);\r\n        counterIndexErc721Map[_erc721address] = 0;\r\n        if(_custom) {\r\n         erc721Map[_erc721address] = Erc721Dapp(_erc721address, ERC721Interface(address(0)), ERC721CustomInterface(_erc721address), _erc721DappIndex.current(), false, _custom);\r\n        }\r\n        else {\r\n         erc721Map[_erc721address] = Erc721Dapp(_erc721address, ERC721Interface(_erc721address), ERC721CustomInterface(address(0)), _erc721DappIndex.current(), false, _custom);\r\n        }\r\n        _removeElementByIndex(erc721IndexHandled[_erc721address]);\r\n    }\r\n    \r\n    // Ottengo i contratti gestiti dalla nostra dapp\r\n    function getDappHandled() public view returns(address[] memory) {\r\n        return erc721Handled;\r\n    }\r\n    \r\n    // Rimuovo l'elemento dall'array\r\n    function _removeElementByIndex(uint index) internal onlyOwner isPaused {\r\n      require(index < erc721Handled.length);\r\n      uint256 ausIndex = erc721Handled.length-1;\r\n      address ausAddress = erc721Handled[erc721Handled.length-1];\r\n      erc721Handled[index] = erc721Handled[erc721Handled.length-1];\r\n      erc721Handled[ausIndex] = ausAddress;\r\n      erc721Handled.pop();\r\n    }\r\n    \r\n    // Controllo che i due indirizzi siano presenti sullo smart contract\r\n    function checkAddresses(address _dappAddressOne, address _dappAddressTwo) public view {\r\n        require(erc721Map[_dappAddressOne].enabled==true, \"_dappAddressOne not available\");\r\n        require(erc721Map[_dappAddressTwo].enabled==true, \"_dappAddressTwo not available\");\r\n    }\r\n    \r\n    // Gestisco lo swap verso AtomicSwap\r\n    function safeTransferFrom(address _dapp, address _from, address _to, uint256 _tokenId) public isPaused {\r\n        erc721Map[_dapp].erc721Interface.safeTransferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    // Gestisco lo swap verso AtomicSwap - Axies Infinity\r\n    function safeTransferFrom(uint256 _amount, address _dapp, address _from, address _to, uint256 _tokenId) public isPaused {\r\n        erc721Map[_dapp].erc721CustomInterface.transferFrom(_from, _to, _tokenId);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_custom\",\"type\":\"bool\"}],\"name\":\"addERC721Contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dappAddressOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dappAddressTwo\",\"type\":\"address\"}],\"name\":\"checkAddresses\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDappHandled\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_custom\",\"type\":\"bool\"}],\"name\":\"removeERC721Contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pauseStatus\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AtomicProxy","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}