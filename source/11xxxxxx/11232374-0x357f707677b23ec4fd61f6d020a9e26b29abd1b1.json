{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-20\r\n*/\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface ICoFixFactory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (IUniswapV2Pair pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/UniswapV2Helper.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract CoFixHelper {\r\n    \r\n    struct Pair {\r\n        address pair;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    ICoFixFactory constant factory =  ICoFixFactory(0x66C64ecC3A6014733325a8f2EBEE46B4CA3ED550);\r\n\r\n    function getPairs() external view returns (Pair[] memory pairs) {\r\n\r\n        uint256 pairsCount = factory.allPairsLength();\r\n        Pair[] memory allPairs = new Pair[](pairsCount);\r\n\r\n        uint256 notEmptyLength;\r\n        for (uint i; i < pairsCount; i++) {\r\n            IUniswapV2Pair pair = factory.allPairs(i);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n             \r\n            if (IERC20(token0).balanceOf(address(pair)) > 0) {\r\n                allPairs[notEmptyLength] = Pair({\r\n                    pair: address(pair),\r\n                    token0: token0,\r\n                    token1: token1\r\n                });\r\n                notEmptyLength++;\r\n            }\r\n        }\r\n\r\n        pairs = new Pair[](notEmptyLength);\r\n        for (uint i; i < notEmptyLength; i++) {\r\n            pairs[i] = allPairs[i];\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct CoFixHelper.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoFixHelper","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b8e7c848b6e6f04bfcd226ed7f97b2874206cd48c19c8b9f4288f9f6f9f9030a"}]}