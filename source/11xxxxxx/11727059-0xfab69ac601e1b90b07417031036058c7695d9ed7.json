{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IPriceConsumerV3 {\r\n    function getLatestPrice() external view returns (int);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n      \r\n    function WETH() external returns (address); \r\n    \r\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ncontract NexenPlatform is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    enum RequestState {None, LenderCreated, BorrowerCreated, Cancelled, Matched, Closed, Expired, Disabled}\r\n    enum Currency {DAI, USDT, ETH}\r\n    \r\n    IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    \r\n    IPriceConsumerV3 public priceConsumerDAI;\r\n    IPriceConsumerV3 public priceConsumerUSDT;\r\n\r\n    IERC20 public nexenToken;\r\n    \r\n    ERC20 daiToken = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); \r\n    ERC20 usdtToken = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    \r\n    bool public paused = false;\r\n    bool public genesisPhase = false;\r\n    uint256 public amountToReward = 1000 * 10 ** 18;\r\n    \r\n    uint public lenderFee = 1; //1%\r\n    uint public borrowerFee = 1; //1%\r\n    \r\n    mapping(uint256 => uint256) public interests;\r\n\r\n    mapping(address => uint256) public depositedDAI;\r\n    mapping(address => uint256) public depositedUSDT;\r\n    mapping(address => uint256) public depositedWEI;\r\n    \r\n    uint256 public daiFees;\r\n    uint256 public usdtFees;\r\n    uint256 public ethFees;\r\n    \r\n    struct Request {\r\n        // Internal fields\r\n        RequestState state;\r\n        address payable borrower;\r\n        address payable lender;\r\n        Currency currency;\r\n        // Fields for both parties\r\n        uint256 cryptoAmount;\r\n        uint256 durationInDays;\r\n        uint256 expireIfNotMatchedOn;\r\n        // Fields for borrower\r\n        uint256 ltv;\r\n        uint256 weiAmount;\r\n        uint256 daiVsWeiCurrentPrice;\r\n        uint256 usdtVsWeiCurrentPrice;\r\n        // Fields after matching\r\n        uint256 lendingFinishesOn;\r\n    }\r\n    \r\n    mapping (uint256 => Request) public requests;\r\n    \r\n    event OpenRequest(uint256 requestId, address indexed borrower, address indexed lender, uint256 cryptoAmount, uint256 durationInDays, uint256 expireIfNotMatchedOn, uint256 ltv, uint256 weiAmount, uint256 daiVsWeiCurrentPrice, uint256 usdtVsWeiCurrentPrice, uint256 lendingFinishesOn, RequestState state, Currency currency);\r\n    event CollateralSold(uint256 requestId, uint256 totalCollateral, uint256 totalSold, uint256 totalDAIBought);\r\n    event RequestMatchedBorrower(uint256 requestId, address indexed borrower, address indexed lender, uint256 cryptoAmount, uint256 weiAmount, uint256 daiVsWeiCurrentPrice, uint256 usdtVsWeiCurrentPrice);\r\n    event RequestMatchedLender(uint256 requestId, address indexed borrower, address indexed lender, uint256 cryptoAmount);\r\n    event RequestCancelled(uint256 requestId, address indexed borrower, address indexed lender, RequestState state, uint256 weiAmount, uint256 cryptoAmount);\r\n    event RequestFinishedForLender(uint256 requestId, address indexed lender, uint256 daiToTransfer, uint256 totalLenderFee);\r\n    event RequestFinishedForBorrower(uint256 requestId, address indexed borrower, uint256 daiToTransfer, uint256 weiAmount, uint256 totalBorrowerFee);\r\n    event CollateralSoldBorrower(uint256 requestId, address indexed borrower, uint256 weiAmount, uint256 amountSold, uint256 daiToTransfer, uint256 weiRecovered, uint256 totalBorrowerFee);\r\n    event CollateralSoldLender(uint256 requestId, address indexed lender, uint256 weiAmount, uint256 amountSold, uint256 daiToTransfer, uint256 daiRecovered, uint256 totalLenderFee);\r\n    event CoinDeposited(address indexed caller, uint256 value, Currency currency);\r\n    event CoinWithdrawn(address indexed caller, uint256 value, Currency currency);\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n    constructor(IPriceConsumerV3 _priceConsumerDAI, IPriceConsumerV3 _priceConsumerUSDT) {\r\n        priceConsumerDAI = _priceConsumerDAI;\r\n        priceConsumerUSDT = _priceConsumerUSDT;\r\n        \r\n        interests[20] = 4;\r\n        interests[40] = 6;\r\n        interests[60] = 8;\r\n    }\r\n    \r\n    function createRequest(bool lend, uint256 cryptoAmount, uint256 durationInDays, uint256 expireIfNotMatchedOn, uint256 ltv, Currency currency) public payable {\r\n        require(currency == Currency.USDT || currency == Currency.DAI, \"Invalid currency\");\r\n        require(expireIfNotMatchedOn > block.timestamp, \"Invalid expiration date\");\r\n        require(!paused, \"The contract is paused\");\r\n\r\n        if (currency == Currency.USDT) {\r\n            require(cryptoAmount >= 100 * 10 ** 6, \"Minimum amount is 100 USDT\");\r\n        } else {\r\n            require(cryptoAmount >= 100 * 10 ** 18, \"Minimum amount is 100 DAI\");\r\n        }\r\n        \r\n        Request memory r;\r\n        (r.cryptoAmount, r.durationInDays, r.expireIfNotMatchedOn, r.currency) = (cryptoAmount, durationInDays, expireIfNotMatchedOn, currency);\r\n        \r\n        if (lend) {\r\n            r.lender = msg.sender;\r\n            r.state = RequestState.LenderCreated;\r\n            \r\n            if (currency == Currency.USDT) {\r\n                require(depositedUSDT[msg.sender] >= r.cryptoAmount, \"Not enough USDT deposited\");\r\n                depositedUSDT[msg.sender] -= r.cryptoAmount;\r\n            } else {\r\n                require(depositedDAI[msg.sender] >= r.cryptoAmount, \"Not enough DAI deposited\");\r\n                depositedDAI[msg.sender] -= r.cryptoAmount;\r\n            }\r\n        } else {\r\n            require(interests[ltv] > 0, 'Invalid LTV');\r\n            \r\n            r.borrower = msg.sender;\r\n            r.state = RequestState.BorrowerCreated;\r\n            r.ltv = ltv;\r\n            \r\n            if (currency == Currency.USDT) {\r\n                r.usdtVsWeiCurrentPrice = uint256(priceConsumerUSDT.getLatestPrice());\r\n                r.weiAmount = calculateWeiAmountForUSDT(r.cryptoAmount, ltv, r.usdtVsWeiCurrentPrice);\r\n            } else {\r\n                r.daiVsWeiCurrentPrice = uint256(priceConsumerDAI.getLatestPrice());\r\n                r.weiAmount = calculateWeiAmountForDAI(r.cryptoAmount, ltv, r.daiVsWeiCurrentPrice);\r\n            }\r\n\r\n            //We take the payment from the msg.value or from the deposited WEI\r\n            if (msg.value > r.weiAmount) {\r\n                msg.sender.transfer(msg.value - r.weiAmount);\r\n            }\r\n            else if (msg.value < r.weiAmount) {\r\n                require(depositedWEI[msg.sender] > (r.weiAmount - msg.value), \"Not enough ETH deposited\");\r\n                depositedWEI[msg.sender] = depositedWEI[msg.sender] - r.weiAmount + msg.value;\r\n            }\r\n        }\r\n\r\n        uint256 requestId = uint256(keccak256(abi.encodePacked(r.borrower, r.lender, r.cryptoAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv, r.currency)));\r\n        \r\n        require(requests[requestId].state == RequestState.None, 'Request already exists');\r\n        \r\n        requests[requestId] = r;\r\n\r\n        emit OpenRequest(requestId, r.borrower, r.lender, r.cryptoAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv, r.weiAmount, r.daiVsWeiCurrentPrice, r.usdtVsWeiCurrentPrice, r.lendingFinishesOn, r.state, r.currency);\r\n    }\r\n    \r\n    function matchRequestAsLender(uint256 requestId) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.BorrowerCreated, 'Invalid request');\r\n        require(r.expireIfNotMatchedOn > block.timestamp, 'Request expired');\r\n        require(r.borrower != msg.sender, 'You cannot match yourself');\r\n\r\n        r.lender = msg.sender;\r\n        r.lendingFinishesOn = getExpirationAfter(r.durationInDays);\r\n        r.state = RequestState.Matched;\r\n        \r\n        if (r.currency == Currency.DAI) {\r\n            require(depositedDAI[msg.sender] >= r.cryptoAmount, \"Not enough DAI deposited\");\r\n            depositedDAI[msg.sender] = depositedDAI[msg.sender].sub(r.cryptoAmount);\r\n            depositedDAI[r.borrower] = depositedDAI[r.borrower].add(r.cryptoAmount);\r\n        } else {\r\n            require(depositedUSDT[msg.sender] >= r.cryptoAmount, \"Not enough USDT deposited\");\r\n            depositedUSDT[msg.sender] = depositedUSDT[msg.sender].sub(r.cryptoAmount);\r\n            depositedUSDT[r.borrower] = depositedUSDT[r.borrower].add(r.cryptoAmount);\r\n        }\r\n        \r\n        if (genesisPhase) {\r\n            require(nexenToken.transfer(msg.sender, amountToReward), 'Could not transfer tokens');\r\n            require(nexenToken.transfer(r.borrower, amountToReward), 'Could not transfer tokens');\r\n        }\r\n        \r\n        emit RequestMatchedLender(requestId, r.borrower, r.lender, r.cryptoAmount);\r\n    }\r\n    \r\n    function matchRequestAsBorrower(uint256 requestId, uint256 ltv) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.LenderCreated, 'Invalid request');\r\n        require(r.expireIfNotMatchedOn > block.timestamp, 'Request expired');\r\n        require(r.lender != msg.sender, 'You cannot match yourself');\r\n\r\n        r.borrower = msg.sender;\r\n        r.lendingFinishesOn = getExpirationAfter(r.durationInDays);\r\n        r.state = RequestState.Matched;\r\n        \r\n        r.ltv = ltv;\r\n        \r\n        if (r.currency == Currency.DAI) {\r\n            r.daiVsWeiCurrentPrice = uint256(priceConsumerDAI.getLatestPrice());\r\n            r.weiAmount = calculateWeiAmountForDAI(r.cryptoAmount, r.ltv, r.daiVsWeiCurrentPrice);\r\n            depositedDAI[r.borrower] = depositedDAI[r.borrower].add(r.cryptoAmount);\r\n        } else {\r\n            r.usdtVsWeiCurrentPrice = uint256(priceConsumerUSDT.getLatestPrice());\r\n            r.weiAmount = calculateWeiAmountForUSDT(r.cryptoAmount, r.ltv, r.usdtVsWeiCurrentPrice);\r\n            depositedUSDT[r.borrower] = depositedUSDT[r.borrower].add(r.cryptoAmount);\r\n        }\r\n        \r\n        require(depositedWEI[msg.sender] > r.weiAmount, \"Not enough WEI\");\r\n        depositedWEI[msg.sender] = depositedWEI[msg.sender].sub(r.weiAmount);\r\n\r\n        if (genesisPhase) {\r\n            require(nexenToken.transfer(msg.sender, amountToReward), 'Could not transfer tokens');\r\n            require(nexenToken.transfer(r.lender, amountToReward), 'Could not transfer tokens');\r\n        }\r\n\r\n        emit RequestMatchedBorrower(requestId, r.borrower, r.lender, r.cryptoAmount, r.weiAmount, r.daiVsWeiCurrentPrice, r.usdtVsWeiCurrentPrice);\r\n    }\r\n    \r\n    function cancelRequest(uint256 requestId) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.BorrowerCreated || r.state == RequestState.LenderCreated);\r\n        \r\n        r.state = RequestState.Cancelled;\r\n\r\n        if (msg.sender == r.borrower) {\r\n            depositedWEI[msg.sender] += r.weiAmount;\r\n        } else if (msg.sender == r.lender) {\r\n            if (r.currency == Currency.DAI) {\r\n                depositedDAI[msg.sender] += r.cryptoAmount;\r\n            } else {\r\n                depositedUSDT[msg.sender] += r.cryptoAmount;\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        emit RequestCancelled(requestId, r.borrower, r.lender, r.state, r.weiAmount, r.cryptoAmount);\r\n    }\r\n    \r\n    function finishRequest(uint256 _requestId) public {\r\n        Request storage r = requests[_requestId];\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        \r\n        require(msg.sender == r.borrower, 'Only borrower can call this');\r\n\r\n        r.state = RequestState.Closed;\r\n        \r\n        uint256 cryptoToTransfer = getInterest(r.ltv, r.cryptoAmount).add(r.cryptoAmount);\r\n        \r\n        uint256 totalLenderFee = computeLenderFee(r.cryptoAmount);\r\n        uint256 totalBorrowerFee = computeBorrowerFee(r.weiAmount);\r\n        ethFees = ethFees.add(totalBorrowerFee);\r\n\r\n        if (r.currency == Currency.DAI) {\r\n            require(depositedDAI[r.borrower] >= cryptoToTransfer, \"Not enough DAI deposited\");\r\n            daiFees = daiFees.add(totalLenderFee);\r\n            depositedDAI[r.lender] += cryptoToTransfer.sub(totalLenderFee);\r\n            depositedDAI[r.borrower] -= cryptoToTransfer;\r\n        } else {\r\n            require(depositedUSDT[r.borrower] >= cryptoToTransfer, \"Not enough USDT deposited\");\r\n            usdtFees = daiFees.add(totalLenderFee);\r\n            depositedUSDT[r.lender] += cryptoToTransfer.sub(totalLenderFee);\r\n            depositedUSDT[r.borrower] -= cryptoToTransfer;\r\n        }\r\n\r\n        depositedWEI[r.borrower] += r.weiAmount.sub(totalBorrowerFee);\r\n        \r\n        emit RequestFinishedForLender(_requestId, r.lender, cryptoToTransfer.sub(totalLenderFee), totalLenderFee);\r\n        emit RequestFinishedForBorrower(_requestId, r.borrower, cryptoToTransfer, r.weiAmount.sub(totalBorrowerFee), totalBorrowerFee);\r\n    }\r\n    \r\n    function expireNonFullfiledRequest(uint256 _requestId) public {\r\n        Request storage r = requests[_requestId];\r\n\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        require(msg.sender == r.lender, \"Only lender can call this\");\r\n        require(block.timestamp > r.lendingFinishesOn, \"Request not finished yet\");\r\n        \r\n        r.state = RequestState.Expired;\r\n        \r\n        burnCollateral(_requestId, r);\r\n    }\r\n    \r\n    function burnCollateral(uint256 _requestId, Request storage r) internal {\r\n        //Minimum that we should get according to Chainlink\r\n        //r.weiAmount.div(daiVsWeiCurrentPrice);\r\n\r\n        //But we will use as minimum the amount we need to return to the Borrower\r\n        uint256 cryptoToTransfer = getInterest(r.ltv, r.cryptoAmount).add(r.cryptoAmount);\r\n        \r\n        uint256[] memory amounts = sellCollateralInUniswap(cryptoToTransfer, r.weiAmount, r.currency);\r\n        //amounts[0] represents how much ETH was actually sold        \r\n        \r\n        uint256 dust = r.weiAmount.sub(amounts[0]);\r\n        \r\n        uint256 totalLenderFee = computeLenderFee(r.cryptoAmount);\r\n        uint256 totalBorrowerFee = computeBorrowerFee(r.weiAmount);\r\n\r\n        if (totalBorrowerFee > dust) {\r\n            totalBorrowerFee = dust;\r\n        }\r\n        \r\n        if (r.currency == Currency.DAI) {\r\n            daiFees = daiFees.add(totalLenderFee);\r\n            depositedDAI[r.lender] += cryptoToTransfer.sub(totalLenderFee);\r\n        } else {\r\n            usdtFees = usdtFees.add(totalLenderFee);\r\n            depositedUSDT[r.lender] += cryptoToTransfer.sub(totalLenderFee);\r\n        }\r\n\r\n        ethFees = ethFees.add(totalBorrowerFee);\r\n        depositedWEI[r.borrower] += dust.sub(totalBorrowerFee);\r\n        \r\n        emit CollateralSoldBorrower(_requestId, r.borrower, r.weiAmount, amounts[0], cryptoToTransfer, dust.sub(totalBorrowerFee), totalBorrowerFee);\r\n        emit CollateralSoldLender(_requestId, r.lender, r.weiAmount, amounts[0], cryptoToTransfer, cryptoToTransfer.sub(totalLenderFee), totalLenderFee);\r\n    }\r\n    \r\n    function sellCollateralInUniswap(uint256 tokensToTransfer, uint256 weiAmount, Currency currency) internal returns (uint256[] memory)  {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        \r\n        if (currency == Currency.DAI) {\r\n            path[1] = address(daiToken);\r\n        } else {\r\n            path[1] = address(usdtToken);\r\n        }\r\n        \r\n        return uniswapRouter.swapETHForExactTokens{value:weiAmount}(tokensToTransfer, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function canBurnCollateralForDAI(uint256 requestId, uint256 daiVsWeiCurrentPrice) public view returns (bool) {\r\n        Request memory r = requests[requestId];\r\n        \r\n        uint256 howMuchEthTheUserCanGet = r.cryptoAmount.mul(daiVsWeiCurrentPrice).div(1e18);\r\n        uint256 eigthyPercentOfCollateral = r.weiAmount.mul(8).div(10);\r\n        \r\n        return howMuchEthTheUserCanGet > eigthyPercentOfCollateral;\r\n    }    \r\n\r\n    function canBurnCollateralForUSDT(uint256 requestId, uint256 usdtVsWeiCurrentPrice) public view returns (bool) {\r\n        Request memory r = requests[requestId];\r\n        \r\n        uint256 howMuchEthTheUserCanGet = r.cryptoAmount.mul(usdtVsWeiCurrentPrice).div(1e6);\r\n        uint256 eigthyPercentOfCollateral = r.weiAmount.mul(8).div(10);\r\n        \r\n        return howMuchEthTheUserCanGet > eigthyPercentOfCollateral;\r\n    }    \r\n    \r\n    //Calculates the amount of WEI that is needed as a collateral for this amount of DAI and the chosen LTV\r\n    function calculateWeiAmountForDAI(uint256 _daiAmount, uint256 _ltv, uint256 _daiVsWeiCurrentPrice) public pure returns (uint256) {\r\n        //I calculate the collateral in DAI, then I change it to WEI and I remove the decimals from the token\r\n        return _daiAmount.mul(100).div(_ltv).mul(_daiVsWeiCurrentPrice).div(1e18);\r\n    }\r\n\r\n    //Calculates the amount of WEI that is needed as a collateral for this amount of USDT and the chosen LTV\r\n    function calculateWeiAmountForUSDT(uint256 _usdtAmount, uint256 _ltv, uint256 _usdtVsWeiCurrentPrice) public pure returns (uint256) {\r\n        //I calculate the collateral in USDT, then I change it to WEI and I remove the decimals from the token\r\n        return _usdtAmount.mul(100).div(_ltv).mul(_usdtVsWeiCurrentPrice).div(1e6);\r\n    }\r\n\r\n    function calculateCollateralForDAI(uint256 daiAmount, uint256 ltv) public view returns (uint256) {\r\n        //Gets the current price in WEI for 1 DAI\r\n        uint256 daiVsWeiCurrentPrice = uint256(priceConsumerDAI.getLatestPrice());\r\n        //Gets the collateral needed in WEI\r\n        return calculateWeiAmountForDAI(daiAmount, ltv, daiVsWeiCurrentPrice);\r\n    }\r\n    \r\n    function calculateCollateralForUSDT(uint256 usdtAmount, uint256 ltv) public view returns (uint256) {\r\n        //Gets the current price in WEI for 1 USDT\r\n        uint256 usdtVsWeiCurrentPrice = uint256(priceConsumerUSDT.getLatestPrice());\r\n        //Gets the collateral needed in WEI\r\n        return calculateWeiAmountForUSDT(usdtAmount, ltv, usdtVsWeiCurrentPrice);\r\n    }\r\n    \r\n    function getLatestDAIVsWeiPrice() public view returns (uint256) {\r\n        return uint256(priceConsumerDAI.getLatestPrice());\r\n    }\r\n\r\n    function getLatestUSDTVsWeiPrice() public view returns (uint256) {\r\n        return uint256(priceConsumerUSDT.getLatestPrice());\r\n    }\r\n    \r\n    function getInterest(uint256 _ltv, uint256 _amount) public view returns (uint256) {\r\n        require(interests[_ltv] > 0, \"invalid LTV\");\r\n        return _amount.mul(interests[_ltv]).div(100);\r\n    }\r\n    \r\n    function computeLenderFee(uint256 _value) public view returns (uint256) {\r\n        return _value.mul(lenderFee).div(100); \r\n    }\r\n\r\n    function computeBorrowerFee(uint256 _value) public view returns (uint256) {\r\n        return _value.mul(borrowerFee).div(100); \r\n    }\r\n    \r\n    function getExpirationAfter(uint256 amountOfDays) public view returns (uint256) {\r\n        return block.timestamp.add(amountOfDays.mul(1 days));\r\n    }\r\n    \r\n    // Withdraw and Deposit functions\r\n    \r\n    function withdrawUSDT(uint256 _amount) public {\r\n        require(depositedUSDT[msg.sender] >= _amount, \"Not enough USDT deposited\");\r\n        require(ERC20(usdtToken).balanceOf(address(this)) >= _amount, \"Not enough balance in contract\");\r\n        \r\n        depositedUSDT[msg.sender] = depositedUSDT[msg.sender].sub(_amount);\r\n        ERC20(usdtToken).safeTransfer(msg.sender, _amount);\r\n        \r\n        emit CoinWithdrawn(msg.sender, _amount, Currency.USDT);\r\n    }\r\n\r\n    function withdrawDAI(uint256 _amount) public {\r\n        require(depositedDAI[msg.sender] >= _amount, \"Not enough DAI deposited\");\r\n        require(daiToken.balanceOf(address(this)) >= _amount, \"Not enough balance in contract\");\r\n        \r\n        depositedDAI[msg.sender] = depositedDAI[msg.sender].sub(_amount);\r\n        require(daiToken.transfer(msg.sender, _amount));\r\n        \r\n        emit CoinWithdrawn(msg.sender, _amount, Currency.DAI);\r\n    }\r\n    \r\n    function withdrawETH(uint256 _amount) public {\r\n        require(depositedWEI[msg.sender] >= _amount, \"Not enough ETH deposited\");\r\n        require(address(this).balance >= _amount, \"Not enough balance in contract\");\r\n        \r\n        depositedWEI[msg.sender] = depositedWEI[msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit CoinWithdrawn(msg.sender, _amount, Currency.ETH);\r\n    }\r\n    \r\n        function _updateNexenTokenAddress(IERC20 _nexenToken) public onlyOwner {\r\n        nexenToken = _nexenToken;\r\n    }\r\n\r\n    function depositETH() public payable {\r\n        require(msg.value > 10000000000000000, 'Minimum is 0.01 ETH');\r\n        depositedWEI[msg.sender] += msg.value;\r\n\r\n        emit CoinDeposited(msg.sender, msg.value, Currency.ETH);\r\n    }\r\n\r\n    function depositDAI(uint256 _amount) public {\r\n        require(IERC20(daiToken).transferFrom(msg.sender, address(this), _amount), \"Couldn't take the DAI from the sender\");\r\n        depositedDAI[msg.sender] += _amount;\r\n\r\n        emit CoinDeposited(msg.sender, _amount, Currency.DAI);\r\n    }\r\n    \r\n    \r\n    function depositUSDT(uint256 _amount) public {\r\n        ERC20(usdtToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        depositedUSDT[msg.sender] += _amount;\r\n        \r\n        emit CoinDeposited(msg.sender, _amount, Currency.USDT);\r\n    }\r\n    \r\n    //Admin functions\r\n        \r\n    function _expireRequest(uint256 _requestId) public onlyOwner {\r\n        Request storage r = requests[_requestId];\r\n\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        \r\n        if (r.currency == Currency.DAI) {\r\n            uint256 daiVsWeiCurrentPrice = uint256(priceConsumerDAI.getLatestPrice());\r\n            require(canBurnCollateralForDAI(_requestId, daiVsWeiCurrentPrice), \"We cannot burn the collateral\");\r\n        } else {\r\n            uint256 usdtVsWeiCurrentPrice = uint256(priceConsumerUSDT.getLatestPrice());\r\n            require(canBurnCollateralForUSDT(_requestId, usdtVsWeiCurrentPrice), \"We cannot burn the collateral\");\r\n        }\r\n        \r\n        r.state = RequestState.Disabled;\r\n\r\n        burnCollateral(_requestId, r);\r\n    }\r\n    \r\n    function _setInterest(uint256 _ltv, uint256 _interest) public onlyOwner {\r\n        interests[_ltv] = _interest;\r\n    }\r\n    \r\n    function _withdrawFees(Currency currency) public onlyOwner {\r\n        if (currency == Currency.ETH) {\r\n            uint256 amount = ethFees;\r\n            ethFees = 0;\r\n            msg.sender.transfer(amount);\r\n        } else if (currency == Currency.USDT) {\r\n            uint256 amount = usdtFees;\r\n            usdtFees = 0;\r\n            ERC20(usdtToken).safeTransfer(msg.sender, amount);\r\n        } else { \r\n            uint256 amount = daiFees;\r\n            daiFees = 0;\r\n            require(daiToken.transfer(msg.sender, amount), \"Transfer failed\");\r\n        }\r\n    }\r\n    \r\n    function _setGenesisPhase(IERC20 _nexenToken, bool _genesisPhase, uint256 _amountToReward) public onlyOwner {\r\n        nexenToken = _nexenToken;\r\n        genesisPhase = _genesisPhase;\r\n        amountToReward = _amountToReward;\r\n    }\r\n    \r\n    function _setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n    \r\n    function _recoverNexenTokens(uint256 _amount) public onlyOwner {\r\n        require(nexenToken.transfer(msg.sender, _amount), 'Could not transfer tokens');\r\n    }\r\n    \r\n    function requestInfo(uint256 requestId) public view  returns (uint256 _tradeId, RequestState _state, address _borrower, address _lender, uint256 _cryptoAmount, uint256 _durationInDays, uint256 _expireIfNotMatchedOn, uint256 _ltv, uint256 _weiAmount, uint256 _tokenVsWeiCurrentPrice, uint256 _lendingFinishesOn, Currency currency) {\r\n        Request storage r = requests[requestId];\r\n        uint256 tokenVsWeiCurrentPrice = r.daiVsWeiCurrentPrice;\r\n        if (r.currency == Currency.USDT) {\r\n            tokenVsWeiCurrentPrice = r.usdtVsWeiCurrentPrice;\r\n        }\r\n        return (requestId, r.state, r.borrower, r.lender, r.cryptoAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv, r.weiAmount, tokenVsWeiCurrentPrice, r.lendingFinishesOn, r.currency);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPriceConsumerV3\",\"name\":\"_priceConsumerDAI\",\"type\":\"address\"},{\"internalType\":\"contract IPriceConsumerV3\",\"name\":\"_priceConsumerUSDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"CoinDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"CoinWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDAIBought\",\"type\":\"uint256\"}],\"name\":\"CollateralSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiRecovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrowerFee\",\"type\":\"uint256\"}],\"name\":\"CollateralSoldBorrower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiRecovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLenderFee\",\"type\":\"uint256\"}],\"name\":\"CollateralSoldLender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingFinishesOn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"OpenRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrowerFee\",\"type\":\"uint256\"}],\"name\":\"RequestFinishedForBorrower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiToTransfer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLenderFee\",\"type\":\"uint256\"}],\"name\":\"RequestFinishedForLender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"RequestMatchedBorrower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"}],\"name\":\"RequestMatchedLender\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"_expireRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_recoverNexenTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_nexenToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_genesisPhase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountToReward\",\"type\":\"uint256\"}],\"name\":\"_setGenesisPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"_setInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"_setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_nexenToken\",\"type\":\"address\"}],\"name\":\"_updateNexenTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"_withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"calculateCollateralForDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"calculateCollateralForUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"calculateWeiAmountForDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"calculateWeiAmountForUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"canBurnCollateralForDAI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"canBurnCollateralForUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"computeBorrowerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"computeLenderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lend\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"expireNonFullfiledRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"finishRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfDays\",\"type\":\"uint256\"}],\"name\":\"getExpirationAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDAIVsWeiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestUSDTVsWeiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"matchRequestAsBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"matchRequestAsLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexenToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceConsumerDAI\",\"outputs\":[{\"internalType\":\"contract IPriceConsumerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceConsumerUSDT\",\"outputs\":[{\"internalType\":\"contract IPriceConsumerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"},{\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"_state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cryptoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingFinishesOn\",\"type\":\"uint256\"},{\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"enum NexenPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cryptoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingFinishesOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NexenPlatform","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005df3a84a40670bbad448ce60c946bd332467a1680000000000000000000000005aaa0155c105c790c87fe90d5c2e0239effa5031","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4861828858e507692bfd6b087a82af4b48382ab696da48afaaf2ae77e8e4d875"}]}