{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED1\r\npragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract KatDataStore {\r\n    address public owner;\r\n    address payable public devAddr;\r\n    address public katAddr;\r\n    address public usdtAddr;\r\n    address public katMan;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    uint public curEpoch = 1;\r\n    uint public oneEth = 1 ether ;\r\n    uint public buyBackMin ;\r\n    uint public priceFirst;\r\n    uint public priceSecond;\r\n    uint public communitylen = 0;\r\n    bool public isInit;\r\n\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        devAddr = msg.sender;\r\n        userInfo[devAddr].registBlock = block.number;\r\n        \r\n    }\r\n    fallback() payable external {}\r\n    receive() payable external {}\r\n    \r\n    struct UserInfo {\r\n        address invitor;\r\n        uint registBlock;\r\n        uint totalInvest;\r\n        uint cid;\r\n    }\r\n    \r\n    struct DepositInfo {\r\n        uint depositVal;\r\n        uint depositTimes;\r\n        uint personReward;\r\n        uint dynamicReward;\r\n        bool isWithdraw;\r\n        \r\n    }\r\n    struct EpochInfo {\r\n        uint totalAmountToken;\r\n        uint totalLimitEth;\r\n        uint totalDeposit;\r\n        bool isOver;\r\n    }\r\n    \r\n    struct CommunityInfo{\r\n        uint totalDeposit;\r\n        uint totalUserCount;\r\n        uint registBlock;\r\n        string cname;\r\n        address cowner;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyKat(){\r\n        require(msg.sender == katMan);\r\n        _;\r\n    }\r\n    \r\n    mapping(address => address[]) public referArr;\r\n    mapping(address => mapping(uint => DepositInfo)) public depositInfo;\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(uint => EpochInfo) public epochInfo;\r\n    mapping(uint => CommunityInfo) public communityInfo;\r\n    mapping(string => bool) public cnameRegisted;\r\n\r\n    function transferOwnerShip(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n    function setBuyBackMin(uint _minNum) public onlyOwner {\r\n        buyBackMin = _minNum;\r\n    }\r\n    function setPriceFirst(uint _priceFirst) public onlyOwner {\r\n        priceFirst = _priceFirst;\r\n    }\r\n    function setPriceSecond(uint _priceSecond) public onlyOwner {\r\n        priceSecond = _priceSecond;\r\n    }\r\n    function setDevAddr(address payable _devAddr) public onlyOwner {\r\n        devAddr = _devAddr;\r\n    }\r\n    function setKatManager(address _katMan) public onlyOwner {\r\n        katMan = _katMan;\r\n    }\r\n    function initializeEpoch(address _katAddr,address _usdtAddr) public onlyOwner {\r\n        require(!isInit);\r\n        katAddr = _katAddr;\r\n        usdtAddr = _usdtAddr;\r\n        epochInfo[1] = EpochInfo(oneEth.mul(300_000),oneEth.mul(10_000),0,false );\r\n        epochInfo[2] = EpochInfo(oneEth.mul(800_000),oneEth.mul(100_000),0,false );\r\n        epochInfo[3] = EpochInfo(oneEth.mul(2200_000),oneEth.mul(1_000_000),0,false );\r\n        isInit = true;\r\n    }\r\n    function getOutUsdt(address _to,uint _amount) public onlyOwner {\r\n        safeTransferToken(usdtAddr,_to,_amount);\r\n    }\r\n    function getOutKat(address _to,uint _amount) public onlyOwner {\r\n        safeTransferToken(katAddr,_to,_amount);\r\n    }\r\n    function sellKatForUsdt(uint _amount) public  {\r\n        require(_amount >= buyBackMin);\r\n        IERC20(katAddr).safeTransferFrom(msg.sender,devAddr,_amount);\r\n        uint backUsdt = viewKatForUsdtAmount(_amount);\r\n        safeTransferToken(usdtAddr , msg.sender, backUsdt);\r\n    }\r\n    function createCommunity(address _user,string memory _cname) public onlyOwner{\r\n        require(!cnameRegisted[_cname]);\r\n        communitylen = communitylen.add(1);\r\n        communityInfo[communitylen] = CommunityInfo(0,0,block.number,_cname,_user);\r\n        cnameRegisted[_cname] = true;\r\n    }\r\n    function depositTodo(address _user,address _invitor,uint _cid,uint depositVal,bool isNew) public onlyKat{\r\n        EpochInfo storage epoch = epochInfo[curEpoch];\r\n        UserInfo storage user = userInfo[_user];\r\n        DepositInfo storage deposit = depositInfo[_user][curEpoch];\r\n        CommunityInfo storage comm = communityInfo[_cid];\r\n        epoch.totalDeposit = epoch.totalDeposit.add(depositVal);\r\n        \r\n        if(epoch.totalDeposit >= epoch.totalLimitEth){\r\n            curEpoch = curEpoch.add(1);\r\n            epoch.isOver = true;\r\n        }\r\n        \r\n        user.totalInvest = user.totalInvest.add(depositVal);\r\n        \r\n        deposit.depositVal = deposit.depositVal.add(depositVal);\r\n        deposit.depositTimes = deposit.depositTimes.add(1);\r\n        \r\n        comm.totalDeposit = comm.totalDeposit.add(depositVal);\r\n        // devAddr.transfer(depositVal.mul(1000).div(10000));\r\n        safeTransferEth(devAddr,depositVal.mul(1000).div(10000));\r\n        if(isNew){\r\n            user.invitor = _invitor;\r\n            user.registBlock = block.number;\r\n            user.cid = _cid;\r\n            comm.totalUserCount = comm.totalUserCount.add(1);\r\n            if(!findIsReffer(_invitor,_user)){\r\n                referArr[_invitor].push(_user);\r\n            }\r\n        }\r\n    }\r\n    function findIsReffer(address _user,address _invitor) public view returns(bool isInsert){\r\n        for(uint i;i< referArr[_user].length;i++){\r\n            if(_invitor == referArr[_user][i]){\r\n                isInsert = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function getEthTodo(address payable _user,uint _amount) public onlyKat{\r\n        EpochInfo storage epoch = epochInfo[curEpoch];\r\n        UserInfo storage user = userInfo[_user];\r\n        DepositInfo storage deposit = depositInfo[_user][curEpoch];\r\n        CommunityInfo storage comm = communityInfo[user.cid];\r\n        require(deposit.depositVal >= _amount);\r\n        require(user.totalInvest >= _amount);\r\n        deposit.depositVal = deposit.depositVal.sub(_amount);\r\n        epoch.totalDeposit = epoch.totalDeposit.sub(_amount);\r\n        user.totalInvest = user.totalInvest.sub(_amount);\r\n        comm.totalDeposit = comm.totalDeposit.sub(_amount);\r\n        \r\n        safeTransferEth(_user,_amount.mul(9000).div(10000));\r\n        if(user.totalInvest == 0){\r\n            user.cid = 0;\r\n            user.registBlock = 0;\r\n            user.invitor = address(0);\r\n            comm.totalUserCount = comm.totalUserCount.sub(1);\r\n        }\r\n    }\r\n    function getRewardTodo(address payable _user,uint _epoch) public onlyKat {\r\n        \r\n        DepositInfo storage deposit = depositInfo[_user][_epoch];\r\n        uint reward = calReward(deposit.depositVal,_epoch);\r\n        safeTransferEth(_user,deposit.depositVal.mul(9000).div(10000));\r\n        safeTransferToken(katAddr ,_user, reward);\r\n        deposit.personReward = reward;\r\n        deposit.isWithdraw = true;\r\n        execute(userInfo[_user].invitor, 1 ,reward.mul(5000).div(10000), _epoch);\r\n    }\r\n    function execute(address invitor,uint runtimes,uint _staticAm,uint epoch) private returns(uint) {\r\n        if(runtimes <= 8 && invitor != address(0) && invitor != address(devAddr) && IERC20(katAddr).balanceOf(address(this))>0){\r\n            DepositInfo storage deposit = depositInfo[invitor][epoch];\r\n            if(deposit.depositVal > 0){\r\n                safeTransferToken(katAddr , invitor, _staticAm);\r\n                deposit.dynamicReward = deposit.dynamicReward.add(_staticAm);\r\n            }\r\n            return execute(userInfo[invitor].invitor,runtimes+1,_staticAm.mul(5000).div(10000),epoch);\r\n        }\r\n        return uint(0);\r\n    }\r\n    function viewContractEth() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    function viewReward(address _user,uint _epoch) public view returns(uint){\r\n        if(epochInfo[_epoch].isOver){\r\n            DepositInfo memory deposit = depositInfo[_user][_epoch];\r\n            if(deposit.isWithdraw){\r\n                return deposit.dynamicReward.add(deposit.personReward);\r\n            }\r\n            uint reward = calReward(deposit.depositVal,_epoch);\r\n            return reward.add(deposit.dynamicReward);\r\n        }\r\n        return uint(0);\r\n    }\r\n    function viewKatForUsdtAmount(uint amount) public view returns(uint){\r\n        return uint(amount.mul(priceSecond).div(oneEth));\r\n    }\r\n    function calReward(uint amount,uint _epoch) public view returns(uint){\r\n        return epochInfo[_epoch].totalAmountToken.mul(amount).mul(5000).div(10000).div(epochInfo[_epoch].totalDeposit);\r\n    }\r\n    function isRegisted(address _user) public view returns(bool){\r\n        return userInfo[_user].registBlock > 0 ;\r\n    }\r\n    function safeTransferToken(address _token,address _user,uint _amount) private {\r\n        uint contBalToken = IERC20(_token).balanceOf(address(this));\r\n        if(contBalToken > _amount){\r\n            IERC20(_token).safeTransfer(_user,_amount);\r\n        }else{\r\n            IERC20(_token).safeTransfer(_user,contBalToken);\r\n        }\r\n    }\r\n    function safeTransferEth(address payable _user,uint _amount) private {\r\n        if(address(this).balance > _amount){\r\n            _user.transfer(_amount);\r\n        }else{\r\n            _user.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external ;\r\n    function transfer(address to, uint value) external ;\r\n    function transferFrom(address from, address to, uint value) external ;\r\n    function mint(address,uint) external;\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyBackMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"calReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"cnameRegisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"communityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUserCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cname\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"cowner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communitylen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cname\",\"type\":\"string\"}],\"name\":\"createCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositVal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNew\",\"type\":\"bool\"}],\"name\":\"depositTodo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLimitEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_invitor\",\"type\":\"address\"}],\"name\":\"findIsReffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInsert\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getEthTodo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getOutKat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getOutUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRewardTodo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_katAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddr\",\"type\":\"address\"}],\"name\":\"initializeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRegisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"katAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"katMan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellKatForUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNum\",\"type\":\"uint256\"}],\"name\":\"setBuyBackMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"setDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_katMan\",\"type\":\"address\"}],\"name\":\"setKatManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceFirst\",\"type\":\"uint256\"}],\"name\":\"setPriceFirst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceSecond\",\"type\":\"uint256\"}],\"name\":\"setPriceSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewContractEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewKatForUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KatDataStore","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6077938e63d1f5687be29289bc1a9f23f417204b28855de171ebe8f4e27270ce"}]}