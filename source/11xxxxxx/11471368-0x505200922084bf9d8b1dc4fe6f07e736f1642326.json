{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\nlibrary Strings {\r\n\r\n    // Key bytes.\r\n    // http://www.unicode.org/versions/Unicode10.0.0/UnicodeStandard-10.0.pdf\r\n    // Table 3-7, p 126, Well-Formed UTF-8 Byte Sequences\r\n\r\n    // Default 80..BF range\r\n    uint constant internal DL = 0x80;\r\n    uint constant internal DH = 0xBF;\r\n\r\n    // Row - number of bytes\r\n\r\n    // R1 - 1\r\n    uint constant internal B11L = 0x00;\r\n    uint constant internal B11H = 0x7F;\r\n\r\n    // R2 - 2\r\n    uint constant internal B21L = 0xC2;\r\n    uint constant internal B21H = 0xDF;\r\n\r\n    // R3 - 3\r\n    uint constant internal B31 = 0xE0;\r\n    uint constant internal B32L = 0xA0;\r\n    uint constant internal B32H = 0xBF;\r\n\r\n    // R4 - 3\r\n    uint constant internal B41L = 0xE1;\r\n    uint constant internal B41H = 0xEC;\r\n\r\n    // R5 - 3\r\n    uint constant internal B51 = 0xED;\r\n    uint constant internal B52L = 0x80;\r\n    uint constant internal B52H = 0x9F;\r\n\r\n    // R6 - 3\r\n    uint constant internal B61L = 0xEE;\r\n    uint constant internal B61H = 0xEF;\r\n\r\n    // R7 - 4\r\n    uint constant internal B71 = 0xF0;\r\n    uint constant internal B72L = 0x90;\r\n    uint constant internal B72H = 0xBF;\r\n\r\n    // R8 - 4\r\n    uint constant internal B81L = 0xF1;\r\n    uint constant internal B81H = 0xF3;\r\n\r\n    // R9 - 4\r\n    uint constant internal B91 = 0xF4;\r\n    uint constant internal B92L = 0x80;\r\n    uint constant internal B92H = 0x8F;\r\n\r\n    // Checks whether a string is valid UTF-8.\r\n    // If the string is not valid, the function will throw.\r\n    function validate(string memory self) internal pure {\r\n        uint addr;\r\n        uint len;\r\n        assembly {\r\n            addr := add(self, 0x20)\r\n            len := mload(self)\r\n        }\r\n        if (len == 0) {\r\n            return;\r\n        }\r\n        uint bytePos = 0;\r\n        while (bytePos < len) {\r\n            bytePos += parseRune(addr + bytePos);\r\n        }\r\n        require(bytePos == len);\r\n    }\r\n\r\n    // Parses a single character, or \"rune\" stored at address 'bytePos'\r\n    // in memory.\r\n    // Returns the length of the character in bytes.\r\n    // solhint-disable-next-line code-complexity\r\n    function parseRune(uint bytePos) internal pure returns (uint len) {\r\n        uint val;\r\n        assembly {\r\n            val := mload(bytePos)\r\n        }\r\n        val >>= 224; // Remove all but the first four bytes.\r\n        uint v0 = val >> 24; // Get first byte.\r\n        if (v0 <= B11H) { // Check a 1 byte character.\r\n            len = 1;\r\n        } else if (B21L <= v0 && v0 <= B21H) { // Check a 2 byte character.\r\n\r\n    }}}\r\n    \r\n    \r\n    \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary ConvertLib{\r\n\tfunction convert(uint amount,uint conversionRate)public returns (uint convertedAmount) \r\n\t{\r\n\t\treturn amount * conversionRate;\r\n\t}\r\n}\r\n\r\n\r\nlibrary ExactMath {\r\n\r\n    uint constant internal UINT_ZERO = 0;\r\n    uint constant internal UINT_ONE = 1;\r\n    uint constant internal UINT_TWO = 2;\r\n    uint constant internal UINT_MAX = ~uint(0);\r\n    uint constant internal UINT_MIN = 0;\r\n\r\n    int constant internal INT_ZERO = 0;\r\n    int constant internal INT_ONE = 1;\r\n    int constant internal INT_TWO = 2;\r\n    int constant internal INT_MINUS_ONE = -1;\r\n    int constant internal INT_MAX = int(2**255 - 1);\r\n    int constant internal INT_MIN = int(2**255);\r\n\r\n    // Calculates and returns 'self + other'\r\n    // The function will throw if the operation would result in an overflow.\r\n    function exactAdd(uint self, uint other) internal pure returns (uint sum) {\r\n        sum = self + other;\r\n        require(sum >= self);\r\n    }\r\n\r\n    // Calculates and returns 'self - other'\r\n    // The function will throw if the operation would result in an underflow.\r\n    function exactSub(uint self, uint other) internal pure returns (uint diff) {\r\n        require(other <= self);\r\n        diff = self - other;\r\n    }\r\n\r\n    // Calculates and returns 'self * other'\r\n    // The function will throw if the operation would result in an overflow.\r\n    function exactMul(uint self, uint other) internal pure returns (uint prod) {\r\n        prod = self * other;\r\n        require(self == 0 || prod / self == other);\r\n    }\r\n\r\n    // Calculates and returns 'self + other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactAdd(int self, int other) internal pure returns (int sum) {\r\n        sum = self + other;\r\n        if (self > 0 && other > 0) {\r\n            require(0 <= sum && sum <= INT_MAX);\r\n        } else if (self < 0 && other < 0) {\r\n            require(INT_MIN <= sum && sum <= 0);\r\n        }\r\n    }\r\n\r\n    // Calculates and returns 'self - other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactSub(int self, int other) internal pure returns (int diff) {\r\n        diff = self - other;\r\n        if (self > 0 && other < 0) {\r\n            require(0 <= diff && diff <= INT_MAX);\r\n        } else if (self < 0 && other > 0) {\r\n            require(INT_MIN <= diff && diff <= 0);\r\n        }\r\n    }\r\n\r\n    // Calculates and returns 'self * other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactMul(int self, int other) internal pure returns (int prod) {\r\n        prod = self * other;\r\n        require(self == 0 || ((other != INT_MIN || self != INT_MINUS_ONE) && prod / self == other));\r\n    }\r\n\r\n    // Calculates and returns 'self / other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactDiv(int self, int other) internal pure returns (int quot) {\r\n        require(self != INT_MIN || other != INT_MINUS_ONE);\r\n        quot = self / other;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract AdvancedBraveNewTokenContract is Context, IERC20 {\r\n    \r\n    \r\n    uint constant internal UINT_ZERO = 0;\r\n    uint constant internal UINT_ONE = 1;\r\n    uint constant internal UINT_TWO = 2;\r\n    uint constant internal UINT_MAX = ~uint(0);\r\n    uint constant internal UINT_MIN = 0;\r\n\r\n    int constant internal INT_ZERO = 0;\r\n    int constant internal INT_ONE = 1;\r\n    int constant internal INT_TWO = 2;\r\n    int constant internal INT_MINUS_ONE = -1;\r\n    int constant internal INT_MAX = int(2**255 - 1);\r\n    int constant internal INT_MIN = int(2**255);\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name; // Name\r\n    string private _symbol; // Symbol\r\n    uint8 private _decimals;  // Decimals\r\n    \r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;      // Name\r\n        _symbol = symbol; // Symbol\r\n        _decimals = 13;  // Decimals\r\n        _totalSupply = 10050000*10**13; // Token supply after zeros\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n   \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\tfunction getBalance(address addr) public returns(uint) {\r\n\t\treturn _balances[addr];\r\n\t}\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n        // Calculates and returns 'self - other'\r\n    // The function will throw if the operation would result in an underflow.\r\n    function exactSub(uint self, uint other) internal pure returns (uint diff) {\r\n        require(other <= self);\r\n        diff = self - other;\r\n    }\r\n\r\n    // Calculates and returns 'self * other'\r\n    // The function will throw if the operation would result in an overflow.\r\n    function exactMul(uint self, uint other) internal pure returns (uint prod) {\r\n        prod = self * other;\r\n        require(self == 0 || prod / self == other);\r\n    }\r\n\r\n    // Calculates and returns 'self + other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactAdd(int self, int other) internal pure returns (int sum) {\r\n        sum = self + other;\r\n        if (self > 0 && other > 0) {\r\n            require(0 <= sum && sum <= INT_MAX);\r\n        } else if (self < 0 && other < 0) {\r\n            require(INT_MIN <= sum && sum <= 0);\r\n        }\r\n    }\r\n\tfunction sendCoin(address receiver, uint amount) public returns(bool sufficient) {\r\n\t\tif (_balances[msg.sender] < amount) return false;\r\n\t\t_balances[msg.sender] -= amount;\r\n\t\t_balances[receiver] += amount;\r\n\t\tTransfer(msg.sender, receiver, amount);\r\n\t\treturn true;\r\n\t}\r\n    // Calculates and returns 'self - other'\r\n    // The function will throw if the operation would result in an over/underflow.\r\n    function exactSub(int self, int other) internal pure returns (int diff) {\r\n        diff = self - other;\r\n        if (self > 0 && other < 0) {\r\n            require(0 <= diff && diff <= INT_MAX);\r\n        } else if (self < 0 && other > 0) {\r\n            require(INT_MIN <= diff && diff <= 0);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sufficient\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdvancedBraveNewTokenContract","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001544696c6c20476f7665726e616e636520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000056d44494c4c000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4f6028914f69bce65662ad3e7f171d5d1a263a82a9ac8d2221dca560644892f3"}]}