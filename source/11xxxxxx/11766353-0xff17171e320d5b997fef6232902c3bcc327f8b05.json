{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ncontract DIAMONDHANDS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _diamondHandsValueOwned;\r\n    mapping (address => uint256) private _tokenValueOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    string private _name = 'DiamondHands';\r\n    string private _symbol = 'HODL';\r\n    uint8 private constant _decimals = 8;   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private  _totalSupply = 4200000000 * 10**uint256(_decimals);\r\n    uint256 private _maxSupplyGen = (MAX - (MAX % _totalSupply));\r\n    uint256 private _CurTotalFee;\r\n    uint256 private feePercent = 5;\r\n    bool private Buylimitactive = true;\r\n    uint256 private BuyLimit = 63000000 * 10**uint256(_decimals);\r\n\r\n \r\n\r\n    constructor () public {\r\n        _diamondHandsValueOwned[_msgSender()] = _maxSupplyGen;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tokenValueOwned[account];\r\n        return tokenFromBeingStrongHodler(_diamondHandsValueOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowed[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowed[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowed[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n   function setBuylimitactive (bool limitactivechanger) external onlyOwner() {\r\n\r\n    Buylimitactive = limitactivechanger;\r\n    \r\n    \r\n  }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _CurTotalFee;\r\n    }\r\n\r\n\r\n    //Update actual values of accounts and distribute on transfer, automatic getter and exec\r\n    function diamondHandReward(uint256 valueToken) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 valueDiamondHands,,,,) = _getValues(valueToken);\r\n        _diamondHandsValueOwned[sender] = _diamondHandsValueOwned[sender].sub(valueDiamondHands);\r\n        _maxSupplyGen = _maxSupplyGen.sub(valueDiamondHands);\r\n        _CurTotalFee = _CurTotalFee.add(valueToken);\r\n    }\r\n\r\n\r\n\r\n    function tokenFromBeingStrongHodler(uint256 valueDiamondHands) public view returns(uint256) {\r\n        require(valueDiamondHands <= _maxSupplyGen, \"Amount must be less than max Supply generated\");\r\n        uint256 currentRate =  _getRate();\r\n        return valueDiamondHands.div(currentRate);\r\n    }\r\n\r\n    function getActualBuyLimit() public view returns (uint256){\r\n    return BuyLimit;\r\n  }\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n        _excludeAccount(account);\r\n\r\n    }\r\n\r\n    function _excludeAccount(address account) internal{\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_diamondHandsValueOwned[account] > 0) {\r\n            _tokenValueOwned[account] = tokenFromBeingStrongHodler(_diamondHandsValueOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n\r\n\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tokenValueOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n       _allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // No limit on Dev wallet and UniSwap Contract so liquidity can be added\r\n        if(Buylimitactive && msg.sender != owner() && msg.sender != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D){\r\n        require(amount <= BuyLimit);           // Buylimit not allowed to be over actualBuylimit\r\n      }\r\n\r\n        if(_isExcluded[sender]){\r\n            if(_isExcluded[recipient]){\r\n                _transferBothExcluded(sender, recipient, amount); \r\n            }else{\r\n                _transferFromExcluded(sender, recipient, amount);\r\n            }\r\n        }else{\r\n            if(_isExcluded[recipient]){\r\n                _transferToExcluded(sender, recipient, amount);    \r\n            }else{\r\n                _transferStandard(sender, recipient, amount);  \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 valueToken) private {\r\n        (uint256 valueDiamondHands, uint256 valueDiamondHandsTransfer, uint256 valueDiamondHandsFee, uint256 valueTokenTransfer, uint256 valueTokenFee) = _getValues(valueToken);\r\n        _diamondHandsValueOwned[sender] = _diamondHandsValueOwned[sender].sub(valueDiamondHands);\r\n        _diamondHandsValueOwned[recipient] = _diamondHandsValueOwned[recipient].add(valueDiamondHandsTransfer);       \r\n        _tradingFee(valueDiamondHandsFee, valueTokenFee);\r\n        emit Transfer(sender, recipient, valueTokenTransfer);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 valueToken) private {\r\n        (uint256 valueDiamondHands, uint256 valueDiamondHandsTransfer, uint256 valueDiamondHandsFee, uint256 valueTokenTransfer, uint256 valueTokenFee) = _getValues(valueToken);\r\n        _diamondHandsValueOwned[sender] = _diamondHandsValueOwned[sender].sub(valueDiamondHands);\r\n        _tokenValueOwned[recipient] = _tokenValueOwned[recipient].add(valueTokenTransfer);\r\n        _diamondHandsValueOwned[recipient] = _diamondHandsValueOwned[recipient].add(valueDiamondHandsTransfer);           \r\n        _tradingFee(valueDiamondHandsFee, valueTokenFee);\r\n        emit Transfer(sender, recipient, valueTokenTransfer);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 valueToken) private {\r\n        (uint256 valueDiamondHands, uint256 valueDiamondHandsTransfer, uint256 valueDiamondHandsFee, uint256 valueTokenTransfer, uint256 valueTokenFee) = _getValues(valueToken);\r\n        _tokenValueOwned[sender] = _tokenValueOwned[sender].sub(valueToken);\r\n        _diamondHandsValueOwned[sender] = _diamondHandsValueOwned[sender].sub(valueDiamondHands);\r\n        _diamondHandsValueOwned[recipient] = _diamondHandsValueOwned[recipient].add(valueDiamondHandsTransfer);   \r\n        _tradingFee(valueDiamondHandsFee, valueTokenFee);\r\n        emit Transfer(sender, recipient, valueTokenTransfer);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 valueToken) private {\r\n        (uint256 valueDiamondHands, uint256 valueDiamondHandsTransfer, uint256 valueDiamondHandsFee, uint256 valueTokenTransfer, uint256 valueTokenFee) = _getValues(valueToken);\r\n        _tokenValueOwned[sender] = _tokenValueOwned[sender].sub(valueToken);\r\n        _diamondHandsValueOwned[sender] = _diamondHandsValueOwned[sender].sub(valueDiamondHands);\r\n        _tokenValueOwned[recipient] = _tokenValueOwned[recipient].add(valueTokenTransfer);\r\n        _diamondHandsValueOwned[recipient] = _diamondHandsValueOwned[recipient].add(valueDiamondHandsTransfer);        \r\n        _tradingFee(valueDiamondHandsFee, valueTokenFee);\r\n        emit Transfer(sender, recipient, valueTokenTransfer);\r\n    }\r\n\r\n    function _tradingFee(uint256 valueDiamondHandsFee, uint256 valueTokenFee) private {\r\n        _maxSupplyGen = _maxSupplyGen.sub(valueDiamondHandsFee);\r\n        _CurTotalFee = _CurTotalFee.add(valueTokenFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 diamondHandsSupply, uint256 tokenSupply) = _getCurrentSupply();\r\n        return diamondHandsSupply.div(tokenSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 diamondHandsSupply = _maxSupplyGen;\r\n        uint256 tokenSupply = _totalSupply;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_diamondHandsValueOwned[_excluded[i]] > diamondHandsSupply || _tokenValueOwned[_excluded[i]] > tokenSupply){\r\n                    return (_maxSupplyGen, _totalSupply);\r\n                } \r\n            diamondHandsSupply = diamondHandsSupply.sub(_diamondHandsValueOwned[_excluded[i]]);\r\n            tokenSupply = tokenSupply.sub(_tokenValueOwned[_excluded[i]]);\r\n        }\r\n        if (diamondHandsSupply < _maxSupplyGen.div(_totalSupply)){\r\n                return (_maxSupplyGen, _totalSupply);\r\n            } \r\n        return (diamondHandsSupply, tokenSupply);\r\n    }\r\n\r\n\r\n    function _getValues(uint256 valueToken) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 valueTokenTransfer, uint256 valueTokenFee) = _getTokenValues(valueToken,feePercent);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 valueDiamondHands, uint256 valueDiamondHandsTransfer, uint256 valueDiamondHandsFee) = _getDiamondHandsValues(valueToken, valueTokenFee, currentRate);\r\n        return (valueDiamondHands, valueDiamondHandsTransfer, valueDiamondHandsFee, valueTokenTransfer, valueTokenFee);\r\n    }\r\n\r\n    function _getTokenValues(uint256 valueToken, uint256 feePerc) private pure returns (uint256, uint256) {\r\n        uint256 valueTokenFee = valueToken.div(100/feePerc);\r\n        uint256 valueTokenTransfer = valueToken.sub(valueTokenFee);\r\n        return (valueTokenTransfer, valueTokenFee);\r\n    }\r\n\r\n    function _getDiamondHandsValues(uint256 valueToken, uint256 valueTokenFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 valueDiamondHands = valueToken.mul(currentRate);\r\n        uint256 valueDiamondHandsFee = valueTokenFee.mul(currentRate);\r\n        uint256 valueDiamondHandsTransfer = valueDiamondHands.sub(valueDiamondHandsFee);\r\n        return (valueDiamondHands, valueDiamondHandsTransfer, valueDiamondHandsFee);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueToken\",\"type\":\"uint256\"}],\"name\":\"diamondHandReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"limitactivechanger\",\"type\":\"bool\"}],\"name\":\"setBuylimitactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueDiamondHands\",\"type\":\"uint256\"}],\"name\":\"tokenFromBeingStrongHodler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DIAMONDHANDS","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c73a0ae807c98bcaff5ebbd9b0ce438a95e9e5ca6eb92b7e901319d0c5ec5b37"}]}