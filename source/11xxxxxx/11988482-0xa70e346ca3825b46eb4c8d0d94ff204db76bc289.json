{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @dev brief interface for sushi swapping ETH - based on Uniswap v2 router.\r\ninterface ISushiSwapETH {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n/// @dev brief interface for entering and leaving SUSHI bar (xSUSHI).\r\ninterface ISushiBar { \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function enter(uint256 amount) external;\r\n    function leave(uint256 share) external;\r\n}\r\n\r\n/// @dev brief interface for depositing into and withdrawing from Aave lending pool.\r\ninterface IAaveDepositWithdraw {\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    function withdraw(address token, uint256 amount, address destination) external;\r\n}\r\n\r\n/// @dev contract that batches ETH and SUSHI staking into Aave xSUSHI (aXSUSHI).\r\ncontract Swaave {\r\n    address constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Wrapped ETH token contract\r\n    ISushiSwapETH constant sushiSwapRouter = ISushiSwapETH(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // SushiSwap router contract\r\n    ISushiBar constant sushiToken = ISushiBar(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2); // SUSHI token contract\r\n    ISushiBar constant sushiBar = ISushiBar(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272); // xSUSHI staking contract for SUSHI\r\n    IAaveDepositWithdraw constant aave = IAaveDepositWithdraw(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9); // Aave lending pool contract for xSUSHI staking into aXSUSHI\r\n\r\n    constructor() public {\r\n        sushiToken.approve(address(sushiSwapRouter), type(uint256).max); // max approve `sushiSwapRouter` spender to swap SUSHI into ETH from this contract\r\n        sushiToken.approve(address(sushiBar), type(uint256).max); // max approve `sushiBar` spender to stake SUSHI into xSUSHI from this contract\r\n        sushiBar.approve(address(aave), type(uint256).max); // max approve `aave` spender to stake xSUSHI into aXSUSHI from this contract\r\n    }\r\n    \r\n    /*************\r\n    ETH -> AXSUSHI \r\n    *************/\r\n    /// @dev fallback - stake ETH `msg.value` into aXSUSHI by batching calls to `sushiSwapRouter`, `sushiBar` and `aave` lending pool.\r\n    receive() external payable {\r\n        address[] memory path = new address[](2); // load ETH-SUSHI swap `path` for `sushiSwapRouter`\r\n        path[0] = wETH;\r\n        path[1] = address(sushiToken);\r\n        sushiSwapRouter.swapExactETHForTokens{value: msg.value}(0, path, address(this), block.timestamp + 1200); // swap `msg.value` ETH into SUSHI with 20 minute deadline\r\n        sushiBar.enter(sushiToken.balanceOf(address(this))); // stake resulting SUSHI into `sushiBar` xSUSHI\r\n        aave.deposit(address(sushiBar), sushiBar.balanceOf(address(this)), msg.sender, 0); // stake resulting xSUSHI into `aave` aXSUSHI - transfer to `msg.sender`\r\n    }\r\n    \r\n    /// @dev stake ETH `msg.value` into aXSUSHI by batching calls to `sushiSwapRouter`, `sushiBar` and `aave` lending pool.\r\n    function swaave() external payable {\r\n        address[] memory path = new address[](2); // load ETH-SUSHI swap `path` for `sushiSwapRouter`\r\n        path[0] = wETH;\r\n        path[1] = address(sushiToken);\r\n        sushiSwapRouter.swapExactETHForTokens{value: msg.value}(0, path, address(this), block.timestamp + 1200); // swap `msg.value` ETH into SUSHI with 20 minute deadline\r\n        sushiBar.enter(sushiToken.balanceOf(address(this))); // stake resulting SUSHI into `sushiBar` xSUSHI\r\n        aave.deposit(address(sushiBar), sushiBar.balanceOf(address(this)), msg.sender, 0); // stake resulting xSUSHI into `aave` aXSUSHI - transfer to `msg.sender`\r\n    }\r\n    \r\n    /// @dev stake ETH `msg.value` into aXSUSHI for benefit of `to` by batching calls to `sushiSwapRouter`, `sushiBar` and `aave` lending pool.\r\n    function swaaveTo(address to) external payable {\r\n        address[] memory path = new address[](2); // load ETH-SUSHI swap `path` for `sushiSwapRouter`\r\n        path[0] = wETH;\r\n        path[1] = address(sushiToken);\r\n        sushiSwapRouter.swapExactETHForTokens{value: msg.value}(0, path, address(this), block.timestamp + 1200); // swap `msg.value` ETH into SUSHI with 20 minute deadline\r\n        sushiBar.enter(sushiToken.balanceOf(address(this))); // stake resulting SUSHI into `sushiBar` xSUSHI\r\n        aave.deposit(address(sushiBar), sushiBar.balanceOf(address(this)), to, 0); // stake resulting xSUSHI into `aave` aXSUSHI - transfer to `to`\r\n    }\r\n    \r\n    /*************\r\n    AXSUSHI -> ETH \r\n    *************/\r\n    /// @dev unstake aXSUSHI `amount` into ETH by batching calls to `aave` lending pool, `sushiBar` and `sushiSwapRouter`.\r\n    function unSwaave(uint256 amount) external {\r\n        aave.withdraw(address(sushiBar), amount, address(this)); // unstake aXSUSHI `amount` from `aave` into xSUSHI\r\n        sushiBar.leave(amount); // unstake resulting xSUSHI `amount` from `sushiBar` into SUSHI\r\n        address[] memory path = new address[](2); // load SUSHI-ETH swap `path` for `sushiSwapRouter`\r\n        path[0] = address(sushiToken);\r\n        path[1] = wETH;\r\n        sushiSwapRouter.swapExactTokensForETH(sushiToken.balanceOf(address(this)), 0, path, msg.sender, block.timestamp + 1200); // swap resulting SUSHI into ETH with 20 minute deadline - transfer to `msg.sender`\r\n    }\r\n    \r\n    /// @dev unstake aXSUSHI `amount` into ETH for benefit of `to` by batching calls to `aave` lending pool, `sushiBar` and `sushiSwapRouter`.\r\n    function unSwaaveTo(address to, uint256 amount) external {\r\n        aave.withdraw(address(sushiBar), amount, address(this)); // unstake aXSUSHI `amount` from `aave` into xSUSHI\r\n        sushiBar.leave(amount); // unstake resulting xSUSHI `amount` from `sushiBar` into SUSHI\r\n        address[] memory path = new address[](2); // load SUSHI-ETH swap `path` for `sushiSwapRouter`\r\n        path[0] = address(sushiToken);\r\n        path[1] = wETH;\r\n        sushiSwapRouter.swapExactTokensForETH(sushiToken.balanceOf(address(this)), 0, path, to, block.timestamp + 1200); // swap resulting SUSHI into ETH with 20 minute deadline - transfer to `to`\r\n    }\r\n    \r\n    /***************\r\n    SUSHI -> AXSUSHI \r\n    ***************/\r\n    /// @dev stake SUSHI `amount` into aXSUSHI by batching calls to `sushiBar` and `aave` lending pool.\r\n    function saave(uint256 amount) external {\r\n        sushiToken.transferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\r\n        sushiBar.enter(amount); // stake deposited SUSHI `amount` into `sushiBar` xSUSHI\r\n        aave.deposit(address(sushiBar), sushiBar.balanceOf(address(this)), msg.sender, 0); // stake resulting xSUSHI into `aave` aXSUSHI - transfer to `msg.sender`\r\n    }\r\n    \r\n    /// @dev stake SUSHI `amount` into aXSUSHI for benefit of `to` by batching calls to `sushiBar` and `aave` lending pool.\r\n    function saaveTo(address to, uint256 amount) external {\r\n        sushiToken.transferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\r\n        sushiBar.enter(amount); // stake deposited SUSHI `amount` into `sushiBar` xSUSHI\r\n        aave.deposit(address(sushiBar), sushiBar.balanceOf(address(this)), to, 0); // stake resulting xSUSHI into `aave` aXSUSHI - transfer to `to`\r\n    }\r\n    \r\n    /***************\r\n    AXSUSHI -> SUSHI \r\n    ***************/\r\n    /// @dev unstake aXSUSHI `amount` into SUSHI by batching calls to `aave` lending pool and `sushiBar`.\r\n    function unSaave(uint256 amount) external {\r\n        aave.withdraw(address(sushiBar), amount, address(this)); // unstake aXSUSHI `amount` from `aave` into xSUSHI\r\n        sushiBar.leave(amount); // unstake resulting xSUSHI `amount` from `sushiBar` into SUSHI\r\n        sushiToken.transfer(msg.sender, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `msg.sender`\r\n    }\r\n    \r\n    /// @dev unstake aXSUSHI `amount` into SUSHI for benefit of `to` by batching calls to `aave` lending pool and `sushiBar`.\r\n    function unSaaveTo(address to, uint256 amount) external {\r\n        aave.withdraw(address(sushiBar), amount, address(this)); // unstake aXSUSHI `amount` from `aave` into xSUSHI\r\n        sushiBar.leave(amount); // unstake resulting xSUSHI `amount` from `sushiBar` into SUSHI\r\n        sushiToken.transfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saaveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaave\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swaaveTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unSaave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unSaaveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unSwaave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unSwaaveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Swaave","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5bbf477649f078337c63ecaa9fcc2f25604745698930bfb27509a5d6519ff39c"}]}