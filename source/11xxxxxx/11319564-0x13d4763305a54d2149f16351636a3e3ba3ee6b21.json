{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    constructor () internal {}\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.5.5;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success,) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IFairStockEquity {\r\n    function business(address user, uint256 payAmount, uint256 bonusAmount,\r\n        uint256 loseAmountTotal, uint256 losePayAmount) external;\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IFSERandom {\r\n    function genRandom(uint256 seed) external returns (bytes32);\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract FSEGoldMiner is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IFairStockEquity public FairStockEquity;\r\n    IFSERandom public FSERandom;\r\n    IERC20 public mainToken;\r\n    uint256 public running = 1;\r\n    uint256 public stakeMin = 10 * (10 ** 18);\r\n    uint256 public stakeMax = 200 * (10 ** 18);\r\n    mapping(address => uint256) public users;\r\n\r\n    event ePlay(address indexed user, uint256 payAmount, uint256 bonusAmount, uint256 timestamp);\r\n\r\n    modifier onlyRunning() {\r\n        require(running == 1, \"Contract is not running!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisted() {\r\n        require(users[_msgSender()] > 0 && users[_msgSender()] < block.timestamp, \"User NOT regist!\");\r\n        require(!Address.isContract(_msgSender()), \"Illegal address!\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _fairStockEquity, address _fseRandom, address _mainToken) public {\r\n        mainToken = IERC20(_mainToken);\r\n        setFairStockEquity(_fairStockEquity);\r\n        setFSERandom(_fseRandom);\r\n    }\r\n\r\n    function setFairStockEquity(address addr)\r\n    public onlyOwner {\r\n        FairStockEquity = IFairStockEquity(addr);\r\n        _setTokenApprove(addr);\r\n    }\r\n\r\n    function setFSERandom(address addr)\r\n    public onlyOwner {\r\n        FSERandom = IFSERandom(addr);\r\n    }\r\n\r\n    function setRunning(uint256 _running)\r\n    public onlyOwner {\r\n        running = _running;\r\n    }\r\n\r\n    function _setTokenApprove(address addr)\r\n    internal {\r\n        mainToken.approve(address(addr), uint(- 1));\r\n    }\r\n\r\n    function setStakeAmounts(uint256 _stakeMin, uint256 _stakeMax)\r\n    public onlyOwner {\r\n        stakeMin = _stakeMin;\r\n        stakeMax = _stakeMax;\r\n    }\r\n\r\n    function initGame()\r\n    public {\r\n        users[_msgSender()] = block.timestamp;\r\n    }\r\n\r\n    function getStakeAmounts()\r\n    public view\r\n    returns (uint256 _stakeMin, uint256 _stakeMax){\r\n        return (stakeMin, stakeMax);\r\n    }\r\n\r\n    function play(uint256 payAmount)\r\n    public onlyRunning onlyRegisted {\r\n        require(payAmount >= stakeMin, \"The amount is too little!\");\r\n        require(mainToken.allowance(_msgSender(), address(this)) >= payAmount, \"The allowance is too little!\");\r\n        mainToken.safeTransferFrom(_msgSender(), address(this), payAmount);\r\n\r\n        uint256 randNumber = uint256(FSERandom.genRandom(uint256(\r\n                keccak256(abi.encodePacked(block.timestamp, block.difficulty, _msgSender(), payAmount, gasleft())))));\r\n\r\n        uint256 amount = payAmount;\r\n        uint256 bonusAmount = 0;\r\n        uint256 betAmount = 0;\r\n        uint256 bonus = 0;\r\n        uint256 loseAmountTotal = 0;\r\n        uint256 losePayAmount = 0;\r\n        while (amount > 0) {\r\n            if (amount > stakeMax) {\r\n                betAmount = stakeMax;\r\n            } else {\r\n                betAmount = amount;\r\n            }\r\n            amount = amount.sub(betAmount);\r\n\r\n            randNumber = uint256(keccak256(abi.encodePacked(block.difficulty, randNumber, bonusAmount, gasleft())));\r\n\r\n            bonus = betAmount.mul(randNumber % 100).div(55);\r\n            if (bonus < betAmount) {\r\n                loseAmountTotal = loseAmountTotal.add(betAmount.sub(bonus));\r\n                losePayAmount = losePayAmount.add(betAmount);\r\n            }\r\n            bonusAmount = bonusAmount + bonus;\r\n        }\r\n\r\n        FairStockEquity.business(_msgSender(), payAmount, bonusAmount, loseAmountTotal, losePayAmount);\r\n        emit ePlay(_msgSender(), payAmount, bonusAmount, block.timestamp);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fairStockEquity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fseRandom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ePlay\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"FSERandom\",\"outputs\":[{\"internalType\":\"contract IFSERandom\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FairStockEquity\",\"outputs\":[{\"internalType\":\"contract IFairStockEquity\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeMax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFSERandom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFairStockEquity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_running\",\"type\":\"uint256\"}],\"name\":\"setRunning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeMax\",\"type\":\"uint256\"}],\"name\":\"setStakeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FSEGoldMiner","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003cd435abb8fb4b2a755e1a1b837900d19fd47db9000000000000000000000000bc089c321559a98631b7cd68a24a1c9e9e78e47d0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b261a793bb65440713f93ea5f7bb6a41b1639aeba9059446c64c6fa7864f5ce9"}]}