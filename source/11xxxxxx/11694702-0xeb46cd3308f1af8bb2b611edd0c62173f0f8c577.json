{"status":"1","message":"OK","result":[{"SourceCode":"{\"4TB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\n\\r\\ncontract FourTBank is IERC20 {\\r\\n\\r\\n    mapping(address =\\u003e mapping (address =\\u003e uint256)) allowed;\\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n    \\r\\n    address _owner;\\r\\n    uint256 _totalSupply;\\r\\n    \\r\\n    uint8 public constant decimals = 4;\\r\\n    string public constant name = \\\"4TB Coin\\\";\\r\\n    string public constant symbol = \\\"4TB\\\";\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    constructor(uint256 total) {\\r\\n        _owner = msg.sender;\\r\\n        _totalSupply = total;\\r\\n        balances[msg.sender] = _totalSupply;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address delegate) public override view returns (uint) {\\r\\n        return allowed[owner][delegate];\\r\\n    }\\r\\n\\r\\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\\r\\n        allowed[msg.sender][delegate] = numTokens;\\r\\n        emit Approval(msg.sender, delegate, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        require(amount \\u003c= balances[msg.sender]);\\r\\n        _totalSupply -= amount;\\r\\n        balances[msg.sender] -= amount;\\r\\n        emit Transfer(msg.sender, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public {\\r\\n        require(msg.sender == _owner);\\r\\n        _totalSupply += amount;\\r\\n        balances[_owner] += amount;\\r\\n        emit Transfer(address(0), _owner, amount);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\\r\\n        require(numTokens \\u003c= balances[msg.sender]);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\\r\\n        balances[receiver] = balances[receiver].add(numTokens);\\r\\n        emit Transfer(msg.sender, receiver, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\\r\\n        require(numTokens \\u003c= balances[owner]);\\r\\n        require(numTokens \\u003c= allowed[owner][msg.sender]);\\r\\n\\r\\n        balances[owner] = balances[owner].sub(numTokens);\\r\\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\\r\\n        balances[buyer] = balances[buyer].add(numTokens);\\r\\n        emit Transfer(owner, buyer, numTokens);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      assert(b \\u003c= a);\\r\\n      return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n      uint256 c = a + b;\\r\\n      assert(c \\u003e= a);\\r\\n      return c;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FourTBank","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000a2fb405800","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c3c0063dd27d935b532595529ffc962343b75f1bc31967a080c7d0c0544a6c1"}]}