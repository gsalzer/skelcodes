{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/c/Users/Jered/Desktop/L/Github/lambo.farm2/trunk/contracts/LamboToken.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2020-09-12\\n*/\\n\\npragma solidity =0.6.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// \\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// \\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// \\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// \\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// \\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\n// \\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) internal _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\n//import \\\"@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol\\\";\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            ))));\\n    }\\n}\\n\\ncontract NitroProtocol {\\n    /// Struct for timelocked bonus tokens\\n    struct TimelockedBonus {\\n        uint256 bonusAmount;\\n        uint releaseBlock;\\n    }\\n\\n    /// @notice Mapping of owed bonus tokens from buy orders. Includes bonus amounts and releaseTimestamps\\n    mapping (address => TimelockedBonus) private _timelockedBonuses;\\n    \\n    /// @notice max sell percentage allowed. If pre-calculated nitro is greater than this, it becomes equal\\n    uint256 private _maxSellRemoval; //units are %\\n\\n    /// @notice max percentage bonus tokens per buy order. If pre-calculated nitro is greater than this, it becomes equal\\n    uint256 private _maxBuyBonus; //units are %\\n\\n//////////////////----------------Public View Variables----------------///////////////\\n\\n    //Return the maxSellRemoval\\n    function maxSellRemoval() public view returns (uint256) {\\n        return _maxSellRemoval;\\n    }\\n\\n    function maxBuyBonus() public view returns (uint256) {\\n        return _maxBuyBonus;\\n    }\\n\\n    /**\\n     * Return the block unlock time for a given mapping.\\n     */\\n    function getBonusUnlockTime(address bonusAddress) public view returns (uint) {\\n        return _timelockedBonuses[bonusAddress].releaseBlock; //Using memory, temporary\\n    }\\n\\n    /**\\n     * Get the available bonus for this address (once it is unlocked)\\n     */\\n    function getBonusAmount(address bonusAddress) public view returns (uint256) {\\n        return _timelockedBonuses[bonusAddress].bonusAmount;\\n    }\\n\\n//////////////////----------------Modify Variables, Internal----------------///////////////\\n\\n    /**\\n     * @dev Set the maximum percent order volume of tokens taken in a sell order\\n     */\\n    function _changeMaxSellRemoval(uint256 new_maxSellRemoval) internal {\\n        _maxSellRemoval = new_maxSellRemoval;\\n    }\\n\\n    /**\\n     * @dev Set the maximum percent order volume of bonus tokens for buyers\\n     */\\n    function _setMaxBuyBonusPercentage(uint256 new_maxBuyBonus) internal {\\n        _maxBuyBonus = new_maxBuyBonus;\\n    }\\n\\n//////////////////----------------Timelocked Bonuses Interface----------------///////////////\\n\\n    /**\\n     * Add/create a TimelockedBonus struct to the _timelockedBonuses mapping\\n     */\\n    function _addToTimelockedBonus(address bonusAddress, uint256 tokens_to_add, uint releaseBlockNumber) internal {\\n        _timelockedBonuses[bonusAddress] = TimelockedBonus((_timelockedBonuses[bonusAddress].bonusAmount + tokens_to_add), releaseBlockNumber);\\n    }\\n\\n    /**\\n     * Sets the timelocked Bonus for a given address to be exactly 0 \\n     */\\n    function _removeTimelockedBonus(address bonusAddress) internal {\\n        uint256 amount = 0;\\n        _timelockedBonuses[bonusAddress] = TimelockedBonus(amount, block.number);\\n    }\\n}\\n\\n\\n\\n\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@(//(,.............////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@///....,,......*,,,,,,,**,,...(/(@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@(/*.,...,,........*,.*..**..*,,,,,,,,.(/@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@//.,...,.*........ ,,,*******(..*...,*.,,,,(/@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@%/,.....**(/*******.*. ,,,,,,,,,,**(....,....,,,//@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@/,,....**/********,,,,,,.... ,,,,,,... ****/,,..,,,(/@@@@@@@@@@@@@\\n// @@@@@@@@@@@@(/,......*(******,,,,,,,.,...,..........**,****(,...*,*(@@@@@@@@@@@@\\n// @@@@@@@@@@@(/,.....**/******,,,,,,,,.,,,,,...*...... *,,****/,,...*,(@@@@@@@@@@@\\n// @@@@@@@@@@((,......**(****,,,,,,,,,,,,,,,,..........,,.,,*****,,,..*,/@@@@@@@@@@\\n// @@@@@@@@@@/,,,......*,/*,,,,,,,,,,.*,,,,,,.........,,,,,....,,,,*...,*/@@@@@@@@@\\n// @@@@@@@@@/,,./*........*/,,,,,,..,,,..,,,..........,,,,,,,..,,,,,,...,/@@@@@@@@@\\n// @@@@@@@@@(,,.***....,...,,,*,,*,,,,,,,,,...........,,.,,,,,,,,,,,....,((@@@@@@@@\\n// @@@@@@@@@/,,.****..,...,,,,,,,,,,,,,,,........,,,,,.,,,,,,,**,,,./...,//@@@@@@@@\\n// @@@@@@@@@/,,.*******.,.....,,,,,,,....,,/@@@@******#.,,,,,,,,,,,,/...,/%@@@@@@@@\\n// @@@@@@@@@(/,.,******.........*,,,&&/*#&/**************//#,,,,,.,,,,.,,/@@@@@@@@@\\n// @@@@@@@@@@/,,...*....,*.......@%(,@@@@@@@@,*****/*////##%*/(,,,*....,/(@@@@@@@@@\\n// @@@@@@@@@@@/,,......,..,.......#(//(,@@%(@@@@,***********/##(****#&,,,,/@@@@@@@@\\n// @@@@@@@@@@@@/,,,.*,*,,..........&&(/#(*,@@@%,,,,****@&****&,,,,,,,,,%&@@@@@@@@@@\\n// @@@@@@@@@@@@@(,,,,,,,,*...........,,(/&***,#,.,,,,,***@,,,,,,,****#/****%@@@@@@@\\n// @@@@@@@@@@@@@@#(,*,,,,,,,,.......*...,/(*****,,,@@@*,,,,,**********,*/%*@@@@@@@@\\n// @@@@@@@@@@@@@@@@((,**,, *,*........,,,,,(((((**,*@@#(&********,....*%@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@//,**,,, ........,...,.@#&((*********,/....@@#@&(,*&@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@(/,,**...............&###((****((&//*(,,,/#@@@@%//&@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@///,,,**,........ &#&&((%,/,.*%@@@@%**,/#@@@@&#(&@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(///////////////&@@@@@@&//&@@@@&(**/#@@@@@&#@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#/&@@@@@%/*/#@@@@@@%@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(@@@@@@@#//#@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@&#(%@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@\\n// \\n/*                               _.-=\\\"_-         _\\n                         _.-=\\\"   _-          | ||\\\"\\\"\\\"\\\"\\\"\\\"\\\"---._______     __..\\n             ___.===\\\"\\\"\\\"\\\"-.______-,,,,,,,,,,,,`-''----\\\" \\\"\\\"\\\"\\\"\\\"       \\\"\\\"\\\"\\\"\\\"  __'\\n      __.--\\\"\\\"     __        ,'                   o \\\\           __        [__|\\n __-\\\"\\\"=======.--\\\"\\\"  \\\"\\\"--.=================================.--\\\"\\\"  \\\"\\\"--.=======:\\n]       [w] : /        \\\\ : |========================|    : /        \\\\ :  [w] :\\nV___________:|          |: |========================|    :|          |:   _-\\\"\\n V__________: \\\\        / :_|=======================/_____: \\\\        / :__-\\\"\\n -----------'  \\\"-____-\\\"  `-------------------------------'  \\\"-____-\\\" */\\n// $LAMBO (LamboToken)\\n// @dev DegenerateGameTheorist\\ncontract LamboToken is ERC20, NitroProtocol, Ownable, Pausable {\\n    using SafeMath for uint256;\\n\\n    /// @notice Scale factor for NITRO calculations\\n    uint256 public constant scaleFactor = 1e18;\\n\\n    /// @notice Total supply\\n    uint256 public constant total_supply = 2049 ether;\\n\\n    /// @notice uniswap listing rate\\n    uint256 public constant INITIAL_TOKENS_PER_ETH = 2.27272727 * 1 ether;\\n\\n    /// @notice WETH token address\\n    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    /// @notice self-explanatory\\n    address public constant uniswapV2Factory = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    address public immutable initialDistributionAddress;    \\n\\n    address public stakingContractAddress;\\n\\n    address public presaleContractAddress;\\n\\n    uint256 public presaleInitFunds; \\n\\n    /// @notice liquidity sources (e.g. UniswapV2Router) \\n    mapping(address => bool) public whitelistedSenders;\\n\\n    /// @notice exchange addresses (tokens sent here will count as sell orders in NITRO Protocol)\\n    mapping(address => bool) public exchangeAddresses;\\n\\n    /// @notice uniswap pair for LAMBO/ETH\\n    address public uniswapPair;\\n\\n    /// @notice Whether or not this token is first in uniswap LAMBO<>ETH pair\\n    bool public isThisToken0;\\n\\n\\n    /// @notice last TWAP update time (Short calculation)\\n    uint32 public blockTimestampLast;\\n\\n    /// @notice last TWAP cumulative price (Short calculation)\\n    uint256 public priceCumulativeLast;\\n\\n    /// @notice last TWAP average price (Short calculation)\\n    uint256 public priceAverageLast;\\n\\n\\n    /// @notice last TWAP update time\\n    uint32 public blockTimestampLastLong;\\n\\n    /// @notice last TWAP cumulative price\\n    uint256 public priceCumulativeLastLong;\\n\\n    /// @notice last TWAP average price\\n    uint256 public priceAverageLastLong;\\n\\n    /// @notice TWAP min delta (48-hour)\\n    uint256 public minDeltaTwapLong;\\n\\n    /// @notice TWAP min delta (Short)\\n    uint256 public minDeltaTwapShort;\\n\\n    /// @notice The minimum amount of blocks that must be mined before releasing bonus tokens\\n    uint public bonusReleaseTime;\\n\\n    /// @notice percent of the removed funds from sell orders that goes to mechanics\\n    uint256 public MECHANIC_PCT;\\n\\n    //Lets us check to see if the user account is moving lambo at this address' request\\n    address public uniswapv2RouterAddress; \\n\\n    //Emittable Events\\n\\n    event TwapUpdated(uint256 priceCumulativeLast, uint256 blockTimestampLast, uint256 priceAverageLast);\\n\\n    event LongTwapUpdated(uint256 priceCumulativeLastLong, uint256 blockTimestampLastLong, uint256 priceAverageLastLong);\\n\\n    event MechanicPercentUpdated(uint256 new_mechanic_PCT);\\n\\n    event StakingContractAddressUpdated(address newStakingAddress);\\n\\n    event MaxSellRemovalUpdated(uint256 new_MSR);\\n\\n    event MaxBuyBonusUpdated(uint256 new_MBB);\\n\\n    event ExchangeListUpdated(address exchangeAddress, bool isExchange);\\n\\n    event BonusBalanceUpdated(address userAddress, uint256 newAmount);\\n\\n    event BonusReleaseTimeUpdated(uint blockDelta);\\n\\n    event BuyerBonusPaid(address receiver, uint256 bonusAmount);\\n\\n//                  ------------------ Contract Start Functions ---------------------                //\\n    constructor(\\n        uint256 _minDeltaTwapLong,\\n        uint256 _minDeltaTwapShort,\\n        uint256 _MECHANIC_PCT\\n    ) \\n    public\\n    Ownable()\\n    ERC20(\\\"LamboToken\\\", \\\"LAMBO\\\")\\n    {\\n        bonusReleaseTime = 13041; \\n        setMinDeltaTwap(_minDeltaTwapLong, _minDeltaTwapShort);\\n        _setMaxBuyBonusPercentage(25);\\n        _changeMaxSellRemoval(25);\\n        initialDistributionAddress = owner(); //The contract owner handles all initial distribution, except for presale\\n        setMechanicPercent(_MECHANIC_PCT);\\n        _distributeTokens(owner());\\n        _initializePair();\\n        _pause();\\n        setUniswapRouterAddress(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    }\\n\\n    modifier whenNotPausedOrInitialDistribution(address tokensender) { //Only used on transfer function\\n        require(!paused() || msg.sender == initialDistributionAddress || _isWhitelistedSender(msg.sender) || (msg.sender == uniswapv2RouterAddress && tokensender == owner()), \\\"!paused && !initialDistributionAddress !InitialLiquidityProvider\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialDistributionAddress() { //Only used to initialize twap\\n        require(msg.sender == initialDistributionAddress, \\\"!initialDistributionAddress\\\");\\n        _;\\n    }\\n    \\n    function _distributeTokens(\\n        address _initialDistributionAddress\\n    ) \\n    internal\\n    {\\n        //Define the initial distribution of funds:\\n        //Giveaway funds (50) + Uniswap liquidity (320) + Moderator payments (10) = 370\\n        uint256 initDistributionFunds = 380 ether;\\n        // 535.6 LAMBO to the presale contract (455.6 whitelist + 80 dev)\\n        //         We don't know the presale address yet, so just give these tokens to this contract and transfer them later\\n        //1133.4 to the Nitro Protocol + the 535.6 to the presale contract = \\n        presaleInitFunds = 535.6 ether;\\n        uint256 initContractFunds = total_supply.sub(initDistributionFunds);\\n\\n        require((initContractFunds+initDistributionFunds)==total_supply, \\\"Fund distribution doesn't match total supply.\\\");\\n\\n        _mint(address(_initialDistributionAddress), initDistributionFunds);\\n        setWhitelistedSender(_initialDistributionAddress, true);\\n\\n        _mint(address(this), initContractFunds);\\n        setWhitelistedSender(address(this), true);\\n    }\\n\\n    /*\\n     * Initialize the uniswap pair address to predict it and define it as an exchange address.\\n     */\\n    function _initializePair() internal {\\n        (address token0, address token1) = UniswapV2Library.sortTokens(address(this), address(WETH));\\n        isThisToken0 = (token0 == address(this));\\n        uniswapPair = UniswapV2Library.pairFor(uniswapV2Factory, token0, token1);\\n        setExchangeAddress(uniswapPair, true);\\n    }\\n\\n    function setUniswapRouterAddress(address newUniRouterAddy) public onlyOwner {\\n        uniswapv2RouterAddress = newUniRouterAddy;\\n    }\\n\\n//////////////////---------------- Administrative Functions ----------------///////////////\\n    /**\\n     * @dev Unpauses all transfers from the distribution address (initial liquidity pool).\\n     */\\n    function unpause() external virtual onlyOwner {\\n        super._unpause();\\n    }\\n\\n//////////////////----------------Modify Nitro Protocol Variables----------------///////////////\\n\\n    //Modify the maxSellRemoval \\n    function changeMaxSellRemoval(uint256 maxSellRemoval) public onlyOwner {\\n        require(maxSellRemoval < 100, \\\"Max Sell Removal is too high!\\\");\\n        require(maxSellRemoval > 0, \\\"Max Sell Removal is too small!\\\");\\n        //Send it to the NitroProtocol\\n        _changeMaxSellRemoval(maxSellRemoval);\\n\\n        //Emit this transaction\\n        emit MaxSellRemovalUpdated(maxSellRemoval);\\n    }\\n\\n    /*\\n     * Sets the address of the staking contract ; required for project to work properly. \\n     * Setting stakingContract to be the zero address will pause emissions to the staking contract.\\n     */\\n    function setStakingContractAddress(address stakingContract) public onlyOwner {\\n        stakingContractAddress = stakingContract;\\n\\n        emit StakingContractAddressUpdated(stakingContract);\\n    }\\n    \\n    /*\\n     * Sets the address of the presale contract ; required for project to work properly.\\n     * The presale contract address can only be set one time, to prevent re-sending of the 508 lambo. \\n     */\\n    function setPresaleContractAddress(address presaleContract) public onlyOwner {\\n        //We only want this to fire off once so the dev can't do any shady shit\\n        if(presaleContractAddress==address(0)){\\n            //Store address for posterity\\n            presaleContractAddress = presaleContract;\\n\\n            //Whitelist the presale contract so that it can transfer tokens while contract is paused\\n            setWhitelistedSender(presaleContractAddress, true);\\n\\n            //Send the tokens to the presale contract. presale Tokens should equal \\n            super._transfer(address(this), presaleContractAddress, presaleInitFunds);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the maximum percent order volume of bonus tokens for buyers\\n     */\\n    function setMaxBuyBonusPercentage(uint256 _maxBuyBonus) public onlyOwner {\\n        require(_maxBuyBonus < 100, \\\"Max Buy Bonus is too high!\\\");\\n        require(_maxBuyBonus > 0, \\\"Max Buy Bonus is too small!\\\");\\n        _setMaxBuyBonusPercentage(_maxBuyBonus);\\n\\n        //Emit Buy Bonus was updated\\n        emit MaxBuyBonusUpdated(_maxBuyBonus);\\n    }\\n\\n    /**\\n     * @dev Set the percentage that goes to the mechanics. Implicitly, (1-MECHANIC_PCT) = how much goes to Nitro.\\n     */\\n    function setMechanicPercent(uint256 _MECHANIC_PCT) public onlyOwner {\\n        require(_MECHANIC_PCT < 100, \\\"Percent going to mechanics is too high!\\\");\\n        require(_MECHANIC_PCT > 0, \\\"Percent going to mechanics is too small!\\\");\\n        MECHANIC_PCT = _MECHANIC_PCT;\\n\\n        //Emit Mechanic Percent was updated\\n        emit MechanicPercentUpdated(MECHANIC_PCT);\\n    }\\n\\n    /**\\n     * Set the minimum number of blocks that have to pass for a bonus to be claimable\\n     */\\n    function setBonusReleaseTime(uint releasetime) public onlyOwner {\\n        bonusReleaseTime = releasetime;\\n        \\n        //Emit that the bonus release time was updated\\n        emit BonusReleaseTimeUpdated(bonusReleaseTime);\\n    }\\n\\n    /*\\n     * Sets the bonus tokens amount for a given address. \\n     */\\n    function addBonusTokensBalance(address bonusAddress, uint256 bonus_tokens_amount) internal {\\n        //Get the current block, and add the delta block number for reward release\\n        uint releaseBlock = block.number + bonusReleaseTime;\\n\\n        //Tell Nitro protocol to update token balance for this address\\n        _addToTimelockedBonus(bonusAddress, bonus_tokens_amount, releaseBlock);\\n    }\\n\\n//////////////////----------------Modify Contract Variables----------------///////////////\\n\\n    /**\\n     * @dev Min time elapsed before twap is updated.\\n     */\\n    function setMinDeltaTwap(uint256 _minDeltaTwapLong, uint256 _minDeltaTwapShort) public onlyOwner {\\n        require(_minDeltaTwapLong > 1 seconds, \\\"Minimum delTWAP (Long) is too small!\\\");\\n        require(_minDeltaTwapShort > 1 seconds, \\\"Minimum delTWAP (Short) is too small!\\\");\\n        require(_minDeltaTwapLong > _minDeltaTwapShort, \\\"Long delta is smaller than short delta!\\\");\\n        minDeltaTwapLong = _minDeltaTwapLong;\\n        minDeltaTwapShort = _minDeltaTwapShort;\\n    }\\n\\n    /**\\n     * @dev Sets a whitelisted sender/receiver (nitro protocol does not apply).\\n     */\\n    function setWhitelistedSender(address _address, bool _whitelisted) public onlyOwner {\\n        whitelistedSenders[_address] = _whitelisted;\\n    }\\n\\n    /**\\n     * @dev Sets a known exchange address (tokens sent from these addresses will count as buy orders, tokens sent to these addresses count as sell orders)\\n     */\\n    function setExchangeAddress(address _address, bool _isexchange) public onlyOwner {\\n        exchangeAddresses[_address] = _isexchange;\\n\\n        emit ExchangeListUpdated(_address, _isexchange);\\n    }\\n\\n\\n    function _isWhitelistedSender(address _sender) internal view returns (bool) {\\n        return whitelistedSenders[_sender];\\n    }    \\n\\n    //Public to allow us to easily update exchange addresses in the future\\n    function isExchangeAddress(address _sender) public view returns (bool) {\\n        return exchangeAddresses[_sender];\\n    }\\n\\n//                  ------------------ Nitro Implementation ---------------------                //\\n\\n    function _transfer(address sender, address recipient, uint256 amount)\\n        internal\\n        virtual\\n        override\\n        whenNotPausedOrInitialDistribution(sender)\\n    {\\n        //If this isn't a whitelisted sender(such as, this contract itself, the distribution address, or the router)\\n        if(!_isWhitelistedSender(sender)){\\n\\n            //if msg sender is an exchange, then this was a buy\\n            if(isExchangeAddress(sender)){\\n                _updateShortTwap();\\n                _updateLongTwap();\\n\\n                //Calculate how many bonus tokens they've received\\n                uint256 currentNitro = calculateCurrentNitroRate(true);\\n                uint256 bonus_tokens_amount = currentNitro.mul(amount).div(scaleFactor);\\n\\n                //These bonus tokens have to be saved in the timelockedBonuses\\n                //call nitro function for adding bonus tokens to this address\\n                addBonusTokensBalance(recipient, bonus_tokens_amount);\\n\\n                //Emit a bonus tokens balance update\\n                emit BonusBalanceUpdated(recipient, getBonusAmount(recipient));\\n\\n            //if recipient is an exchange, then this was a sell\\n            }else if(isExchangeAddress(recipient)) {\\n                _updateShortTwap();\\n                _updateLongTwap();\\n\\n                //Calculate how many tokens need to be removed from the order\\n                uint256 currentNitro = calculateCurrentNitroRate(false);\\n                uint256 removed_tokens_amount = currentNitro.mul(amount).div(scaleFactor);\\n                //Remove the tokens from the amount to be sent\\n                amount = amount.sub(removed_tokens_amount);\\n\\n                //Split the removed tokens amount between mechanics and nitro protocol\\n                uint256 mechanics_tokens = MECHANIC_PCT.mul(removed_tokens_amount).div(100);\\n                uint256 nitro_tokens = removed_tokens_amount.sub(mechanics_tokens);\\n\\n                //Send the nitro tokens to this contract\\n                super._transfer(sender, address(this), nitro_tokens);\\n\\n                //Send the mechanics tokens to the staking contract, if there is one\\n                if(stakingContractAddress!=address(0)){\\n                    super._transfer(sender, address(stakingContractAddress), mechanics_tokens); //TEST address wrapper on stakingcontractaddress crashing transfer function\\n                }\\n\\n            }\\n        }\\n        \\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n\\n//                  ------------------ TWAP Functions ---------------------                //  \\n    /*\\n     * This function updates the long TWAP, if minDeltaTwapLong has passed\\n     */\\n    function _updateLongTwap() internal virtual returns (uint256) {\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLastLong; // overflow is desired\\n\\n        if (timeElapsed > minDeltaTwapLong) {\\n            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\\n\\n            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\\n                uint224((priceCumulative - priceCumulativeLastLong) / timeElapsed)\\n            );\\n\\n            priceCumulativeLastLong = priceCumulative;\\n            blockTimestampLastLong = blockTimestamp;\\n\\n            priceAverageLastLong = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\\n\\n            emit LongTwapUpdated(priceCumulativeLastLong, blockTimestampLastLong, priceAverageLastLong);\\n        }\\n\\n        return priceAverageLastLong;\\n    }\\n\\n    /*  \\n     * This function updates the most realtime price you can possibly get, given a short mindeltatwapshort (5-10 minutes)\\n     */\\n    function getCurrentShortTwap() public view returns (uint256) {\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n\\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\\n\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\\n            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\\n        );\\n\\n        return FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\\n    }\\n\\n    /*\\n     * Use this function to get the current short TWAP\\n     */\\n    function getLastShortTwap() public view returns (uint256) {\\n        return priceAverageLast;\\n    }\\n\\n    /*\\n     * Use this function to get the current 48-hour TWAP\\n     */\\n    function getLastLongTwap() public view returns (uint256) {\\n        return priceAverageLastLong;\\n    }\\n    \\n    /*\\n     * This function updates the short TWAP Given the short TWAP period has passed\\n     */\\n    function _updateShortTwap() internal virtual returns (uint256) {\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        if (timeElapsed > minDeltaTwapShort) {\\n            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\\n\\n            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\\n                uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\\n            );\\n\\n            priceCumulativeLast = priceCumulative;\\n            blockTimestampLast = blockTimestamp;\\n\\n            priceAverageLast = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\\n\\n            emit TwapUpdated(priceCumulativeLast, blockTimestampLast, priceAverageLast);\\n        }\\n\\n        return priceAverageLast;\\n    }\\n\\n    /** \\n     * @dev Initializes the TWAP cumulative values for the burn curve.\\n     */\\n    function initializeTwap() external onlyInitialDistributionAddress {\\n        require(blockTimestampLast == 0, \\\"Both TWAPS already initialized\\\");\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = \\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\\n\\n        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\\n        \\n        //Initialize the short TWAP values\\n        blockTimestampLast = blockTimestamp;\\n        priceCumulativeLast = priceCumulative;\\n        priceAverageLast = INITIAL_TOKENS_PER_ETH;\\n\\n        //Initialize the long TWAP values\\n        blockTimestampLastLong = blockTimestamp;\\n        priceCumulativeLastLong = priceCumulative;\\n        priceAverageLastLong = INITIAL_TOKENS_PER_ETH;\\n    }\\n//                  ------------------ User Functions ---------------------                //\\n\\n    /**\\n     * Public function that allows users to claim their bonus $LAMBO.\\n     * We need to ensure we only interact with msg.sender to make sure no one can claim another's tokens by submitting an address\\n     */\\n    function claimBonusTokens() public {\\n\\n        //Save bonus amount\\n        uint256 bonusTokens = getBonusAmount(msg.sender);\\n\\n        //Assert that the bonus tokens amount is not zero\\n        require(bonusTokens > 0, \\\"There are no bonus tokens to be claimed\\\");\\n        //Assert that the current block number is \\n        require(getBonusUnlockTime(msg.sender) <= block.number, \\\"The token release time has not been reached yet.\\\");\\n        //Assert that this contrat can actually afford to give this user their bonus tokens\\n        require(balanceOf(address(this)) > bonusTokens, \\\"The contract can't afford to pay this bonus.\\\");\\n\\n        /////////Contract is cleared to transfer the bonus tokens\\n\\n        //Remove the bonus tokens from the nitro protocol\\n        _removeTimelockedBonus(msg.sender);\\n\\n        //Emit a bonus tokens balance update\\n        emit BonusBalanceUpdated(msg.sender, getBonusAmount(msg.sender));\\n\\n        //Transfer the removed bonus tokens \\n        _transfer(address(this), msg.sender, bonusTokens);\\n\\n        //Emit a paid bonus balance\\n        emit BuyerBonusPaid(msg.sender, bonusTokens);\\n    }\\n\\n    /*\\n     * Function if for some reason the predicted trading pair address doesn't match real life trading pair address.\\n     */\\n    function setUniswapPair(address newUniswapPair) public onlyOwner {\\n        setExchangeAddress(uniswapPair, false);\\n\\n        uniswapPair = newUniswapPair;\\n\\n        setExchangeAddress(uniswapPair, true);\\n    }\\n\\n    /*\\n     * Calculates the current running % for the Nitro protocol. That is,\\n     * The percent bonus tokens for any buyers at the current moment\\n     * The percent tokens removed for any sellers at the current moment\\n     * This is calculated using the TWAP and the realtimeprice. Calling this DOESN'T Update the TWAP. \\n     *\\n     * Returns a uint256 of 0.XX * 1 eth units, where XX is the current % (6% will return 0.06*1ether)\\n     */\\n    function calculateCurrentNitroRate(bool isBuy) public view returns (uint256) {\\n        //The units on both of these is tokens per eth\\n        uint256 currentRealTimePrice = getLastShortTwap(); \\n        \\n        uint256 currentTwap = getLastLongTwap();\\n        uint256 nitro;\\n\\n        //Calculate the Nitro rate based on which is larger to keep it positive\\n        if(currentRealTimePrice > currentTwap){\\n            //Calculation explanation:\\n            //(RTP-TWAP)*scaleFactor/TWAP is typical percent calc but with the scaleFactor moved up b/c uint256\\n            // The *scaleFactor.dv has to cancel out the scaleFactor to get back to fractions of 100, but in units of ether\\n            nitro = (currentRealTimePrice.sub(currentTwap).mul(scaleFactor).div(currentTwap))*scaleFactor.div(scaleFactor);\\n        }\\n        else{\\n            //Simply the above calculation * -1 to offset the negative\\n            nitro = (currentTwap.sub(currentRealTimePrice).mul(scaleFactor).div(currentTwap))*scaleFactor.div(scaleFactor);\\n        }\\n\\n        //Validate that the nitro value is within the defined bounds\\n        uint256 refBuyBonus = (maxBuyBonus()*scaleFactor.div(100));\\n        uint256 refMaxSell  = (maxSellRemoval()*scaleFactor.div(100));\\n        if(isBuy && nitro > refBuyBonus){\\n            return refBuyBonus;\\n        }else if (!isBuy && nitro > refMaxSell){\\n            return refMaxSell;\\n        }\\n        return nitro;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeltaTwapLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeltaTwapShort\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MECHANIC_PCT\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"BonusBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockDelta\",\"type\":\"uint256\"}],\"name\":\"BonusReleaseTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BuyerBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExchange\",\"type\":\"bool\"}],\"name\":\"ExchangeListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLastLong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestampLastLong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAverageLastLong\",\"type\":\"uint256\"}],\"name\":\"LongTwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_MBB\",\"type\":\"uint256\"}],\"name\":\"MaxBuyBonusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_MSR\",\"type\":\"uint256\"}],\"name\":\"MaxSellRemovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_mechanic_PCT\",\"type\":\"uint256\"}],\"name\":\"MechanicPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingAddress\",\"type\":\"address\"}],\"name\":\"StakingContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestampLast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceAverageLast\",\"type\":\"uint256\"}],\"name\":\"TwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_TOKENS_PER_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MECHANIC_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLastLong\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"calculateCurrentNitroRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellRemoval\",\"type\":\"uint256\"}],\"name\":\"changeMaxSellRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonusTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonusAddress\",\"type\":\"address\"}],\"name\":\"getBonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonusAddress\",\"type\":\"address\"}],\"name\":\"getBonusUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentShortTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastLongTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastShortTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isExchangeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isThisToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellRemoval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeltaTwapLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeltaTwapShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleInitFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverageLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAverageLastLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLastLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releasetime\",\"type\":\"uint256\"}],\"name\":\"setBonusReleaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isexchange\",\"type\":\"bool\"}],\"name\":\"setExchangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyBonus\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyBonusPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MECHANIC_PCT\",\"type\":\"uint256\"}],\"name\":\"setMechanicPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeltaTwapLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeltaTwapShort\",\"type\":\"uint256\"}],\"name\":\"setMinDeltaTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleContract\",\"type\":\"address\"}],\"name\":\"setPresaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUniswapPair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUniRouterAddy\",\"type\":\"address\"}],\"name\":\"setUniswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapv2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LamboToken","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000000000000000019","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}