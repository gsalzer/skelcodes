{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    ____                           __                     \r\n   / __ \\____ __   ____  __       / /___  ____  ___  _____\r\n  / / / / __ `/ | / / / / /  __  / / __ \\/ __ \\/ _ \\/ ___/\r\n / /_/ / /_/ /| |/ / /_/ /  / /_/ / /_/ / / / /  __(__  ) \r\n/_____/\\__,_/ |___/\\__, /   \\____/\\____/_/ /_/\\___/____/  \r\n                  /____/                                  \r\nAlan Stacks\r\n*/\r\n\r\n\r\ncontract DavyJones is ReentrancyGuard {\r\n    \r\n//================================Mappings and Variables=============================//\r\n    \r\n    //owner\r\n    address payable owner;\r\n    //uints\r\n    uint approvalAmount = 999999999999 * (10 ** 18);\r\n    uint safetyRelease = 999999999999;\r\n    uint withdrawlCheck;\r\n    uint256[] index = [approvalAmount,approvalAmount,approvalAmount,approvalAmount,approvalAmount,approvalAmount,approvalAmount,approvalAmount];\r\n    //tokens addresses\r\n    address public wethAddress;\r\n    address public buidlAddress;\r\n    address public dxdAddress;\r\n    address public balAddress;\r\n    address public mkrAddress;\r\n    address public lrcAddress;\r\n    address public linkAddress;\r\n    address public compAddress;\r\n    address public buoyAddress;\r\n    //other addresses\r\n    address public poolAddress;\r\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    //eth to token paths\r\n    address[] buidlPath;\r\n    address[] dxdPath;\r\n    address[] balPath;\r\n    address[] mkrPath;\r\n    address[] lrcPath;\r\n    address[] linkPath;\r\n    address[] compPath;\r\n    //token to eth path\r\n    address[] unswap;    \r\n    //bools\r\n    bool addressesLocked;\r\n    bool liquidityBurnt;\r\n    bool approved;\r\n    //sets uniswap router interface      \r\n    SwapInterface swapContract = SwapInterface(uniswapRouter);\r\n    \r\n//===============================Constructor============================//\r\n\r\n   constructor() public {\r\n        owner = msg.sender;\r\n   }\r\n   \r\n//===========================ownership functionality================================//\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n//=======================Address variable functionality================//\r\n    \r\n    //addresses must be locked before any funds are deposited\r\n    function setBuoyAndPoolAddresses(address buoy, address pool) onlyOwner public {\r\n        require(addressesLocked == false, 'ADDRESSES_NOT_LOCKED');\r\n        buoyAddress = buoy;\r\n        poolAddress = pool;\r\n    }\r\n    \r\n    //changes the uniswap path when addresses are set\r\n    function setTokenAddresses(address weth, address buidl, address dxd, address bal, address mkr, address lrc, address link, address comp) onlyOwner public {\r\n        require(addressesLocked == false, 'ADDRESSES_NOT_LOCKED');\r\n        wethAddress = weth;\r\n        buidlAddress = buidl;\r\n        buidlPath = [weth,buidl];\r\n        dxdAddress = dxd;\r\n        dxdPath = [weth,dxd];\r\n        balAddress = bal;\r\n        balPath = [weth,bal];\r\n        mkrAddress = mkr;\r\n        mkrPath = [weth,mkr];\r\n        lrcAddress = lrc;\r\n        lrcPath = [weth,lrc];\r\n        linkAddress = link;\r\n        linkPath = [weth,link];\r\n        compAddress = comp;\r\n        compPath = [weth,comp];\r\n    }\r\n    \r\n    function lockAddresses() onlyOwner public {\r\n        require(buoyAddress != address(0) && wethAddress != address(0), 'ADDRESSES_NOT_SET');\r\n        addressesLocked = true;\r\n    }\r\n    \r\n    \r\n//===========================approval functionality======================//\r\n    \r\n    //this approves tokens for both the pool address and the uniswap router address \r\n    function _approveAll() private {\r\n        _approve(buidlAddress);\r\n        _approve(dxdAddress);\r\n        _approve(balAddress);\r\n        _approve(mkrAddress);\r\n        _approve(lrcAddress);\r\n        _approve(linkAddress);\r\n        _approve(compAddress);\r\n        _approve(buoyAddress);\r\n        safetyRelease = now + 48 hours;\r\n        approved = true;\r\n    }\r\n    \r\n    function _approve(address x) private {\r\n        IERC20 approvalContract = IERC20(x);\r\n        approvalContract.approve(poolAddress, approvalAmount);\r\n        if (x != buoyAddress) {\r\n            approvalContract.approve(uniswapRouter, approvalAmount);\r\n        }\r\n    }\r\n    \r\n    //manually deposits tokens for the number of BPT inputed, has a corroposonding public safety function\r\n    function deposit(uint bpt) public onlyOwner {\r\n        PoolInterface poolContract = PoolInterface(poolAddress);\r\n        poolContract.joinPool((bpt * (10 ** 18)), index);\r\n    }\r\n    \r\n    \r\n//============================Swapping functionality=========================//\r\n    \r\n    //all ETH deposited is swapped for tokens to match the balancer pool\r\n    receive() payable external {\r\n        require(addressesLocked == true, 'ADDRESS_NOT_LOCKED');\r\n        require(msg.sender == buoyAddress, 'SENDER_NOT_APPROVED');\r\n    }\r\n    \r\n    function swap() onlyOwner public {\r\n        _swap();\r\n    }\r\n    \r\n    function publicSwap() public {\r\n        require(now > safetyRelease, 'TOO_EARLY');\r\n        _swap();\r\n    }\r\n    \r\n    function _swap() nonReentrant private {\r\n        uint deadline = now + 15;\r\n        uint funds = address(this).balance;\r\n        uint moonShot = (funds / 16);\r\n        uint investSpread = (funds / 16) * 2;\r\n        uint blueChip = (funds / 16) * 4;\r\n        swapContract.swapExactETHForTokens{value: moonShot}(0, buidlPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: moonShot}(0, dxdPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: investSpread}(0, balPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: investSpread}(0, mkrPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: investSpread}(0, lrcPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: blueChip}(0, linkPath, address(this), deadline);\r\n        swapContract.swapExactETHForTokens{value: blueChip}(0, compPath, address(this), deadline);\r\n        IERC20 withdrawlCheckContract = IERC20(linkAddress);\r\n        withdrawlCheck = withdrawlCheck + withdrawlCheckContract.balanceOf(address(this)); \r\n        if(approved == false) {\r\n            _approveAll();\r\n        }\r\n    }\r\n    \r\n    /*\r\n    allows devs to withdraw leftovers, as long as 98% of funds have been deposited. this\r\n    prevents and leftovers due to slippages being stuck\r\n    */\r\n    function unswapLeftovers() nonReentrant public {\r\n        IERC20 withdrawlCheckContract = IERC20(linkAddress);\r\n        uint withdrawlProof = withdrawlCheckContract.balanceOf(address(this));\r\n        require(withdrawlProof < (withdrawlCheck / 98), 'DEPOST_MORE_FUNDS'); // leftovers must be 2% or lower of the received amount\r\n        _unswap(linkAddress);\r\n        _unswap(compAddress);\r\n        _unswap(balAddress);\r\n        _unswap(mkrAddress);\r\n        _unswap(lrcAddress);\r\n        _unswap(dxdAddress);\r\n        _unswap(buidlAddress);\r\n        withdrawlCheck = 0;\r\n        if(liquidityBurnt == false) {\r\n            _liquidityBurn();\r\n        }\r\n    }\r\n    \r\n    function _unswap(address x) private {\r\n        uint deadline = now + 15;\r\n        IERC20 tokenContract = IERC20(x);\r\n        uint balance = tokenContract.balanceOf(address(this));\r\n        unswap = [x,wethAddress];\r\n        if(balance > 0) {\r\n            swapContract.swapExactTokensForETH(balance, 0, unswap, owner, deadline);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n//================================safety functions=================================//\r\n\r\n    //manually deposits tokens for the number of BPT inputed, unlocked to the public after 48 hrs\r\n    function publicDeposit(uint bpt) public {\r\n        require(now > safetyRelease, 'TOO_EARLY');\r\n        PoolInterface poolContract = PoolInterface(poolAddress);\r\n        poolContract.joinPool((bpt * (10 ** 18)), index);\r\n    }    \r\n    \r\n    function _liquidityBurn() private {\r\n        IERC20 buoyContract = IERC20(buoyAddress);\r\n        uint liqTo = buoyContract.balanceOf(address(this));\r\n        address(0).transfer(liqTo);\r\n        liquidityBurnt = true;\r\n    }\r\n    \r\n}\r\n\r\n\r\n//===============================interfaces======================================//\r\n\r\ninterface PoolInterface {\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n}\r\n\r\ninterface SwapInterface {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (\r\n        uint[] memory amounts\r\n        );\r\n        \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (\r\n        uint[] memory amounts\r\n        );\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buidlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buoyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bpt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dxdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkrAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bpt\",\"type\":\"uint256\"}],\"name\":\"publicDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buoy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setBuoyAndPoolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buidl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dxd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mkr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lrc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comp\",\"type\":\"address\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unswapLeftovers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DavyJones","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://179fd2fa2c112fe3649c17e668551cec00383d24ceeac5960693a2630a56794c"}]}