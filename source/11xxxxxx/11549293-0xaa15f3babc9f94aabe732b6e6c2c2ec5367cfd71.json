{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/TWOBASED.sol\n\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\r\r\r\r\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"zero address\");\r\n        require(recipient != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"zero address\");\r\n        require(spender != address(0), \"zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n/*\r\n *\r\n * Copyright 2020 2based.finance. ALL RIGHTS RESERVED.\r\n *\r\n */\r\n\r\n\r\ncontract TWOBASED is ERC20UpgradeSafe, OwnableUpgradeSafe {\r\n\r\n\t// PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\r\n    // Anytime there is division, there is a risk of numerical instability from rounding errors. In\r\n    // order to minimize this risk, we adhere to the following guidelines:\r\n    // 1) The conversion rate adopted is the number of gons that equals 1 fragment.\r\n    //    The inverse rate must not be used--TOTAL_GONS is always the numerator and _totalSupply is\r\n    //    always the denominator. (i.e. If you want to convert gons to fragments instead of\r\n    //    multiplying by the inverse rate, you should divide by the normal rate)\r\n    // 2) Gon balances converted into Fragments are always rounded down (truncated).\r\n    //\r\n    // We make the following guarantees:\r\n    // - If address 'A' transfers x Fragments to address 'B'. A's resulting external balance will\r\n    //   be decreased by precisely x Fragments, and B's external balance will be precisely\r\n    //   increased by x Fragments.\r\n    //\r\n    // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\r\n    // This is because, for any conversion function 'f()' that has non-zero rounding error,\r\n    // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\r\n\t\r\n\r\n    using SafeMath for uint256;\r\n    using SafeCast for int256;\r\n    using Address for address;\r\n\t\r\n\tstruct Transaction {\r\n        bool enabled;\r\n        address destination;\r\n        bytes data;\r\n    }\r\n\r\n    event TransactionFailed(address indexed destination, uint index, bytes data);\r\n\t\r\n\t// Stable ordering is not guaranteed.\r\n\r\n    Transaction[] public transactions;\r\n\r\n    event Rebase(uint256 indexed epoch, uint256 priceUSD, int256 rebasePercent, uint256 totalSupply, uint8 jackpotLevel);\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 10**6 * 10**DECIMALS;\r\n\r\n\t// TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\r\n    // Use the highest value that fits in a uint256 for max granularity.\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n\t// MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\r\n\t\r\n\tuint256 private _epoch;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n\t\r\n\t// This is denominated in Fragments, because the gons-fragments conversion might change before\r\n    // it's fully paid.\r\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\r\n    \r\n    address public _router;\r\n    \r\n    address public _tokenQuote;\r\n    address public _tokenUSD;\r\n    \r\n    uint256 public _rebasingPriceUSD;\r\n    uint256 public _rebasingPriceLastBlock;\r\n    \r\n    bool public _rebasingPriceUseCurrent;\r\n    \r\n    uint256 public _limitExpiresTimestamp;\r\n    uint256 public _limitTransferAmount;\r\n    uint256 public _limitMaxBalance;\r\n    uint256 public _limitSellFeePercent;\r\n    \r\n    uint256 public _limitTimestamp;\r\n    \r\n    bool public _rebasePaused;\r\n    \r\n    int256 public _rebasePositivePercent;\r\n    uint256 public _rebasePositivePriceUSD;\r\n    \r\n    int256 public _rebaseNegativePercent;\r\n    uint256 public _rebaseNegativePriceUSD;\r\n    \r\n    uint256 public _rebaseTokensMinSupplyPercent;\r\n    \r\n    uint256 public _rebaseNextTimestamp;\r\n    uint256 public _rebaseNextSeconds;\r\n    \r\n    uint8 public _rebaseJackpotLevel;\r\n    uint256 public _rebaseJackpotLastBlock;\r\n    \r\n    uint256 public _rebaseJackpotRewardDivisor;\r\n    \r\n    uint256 public _rebaseLastPriceUSD;\r\n    uint256 public _rebasingPriceStartBlock;\r\n    uint256 public _rebaseLastPriceUSDCumulative;\r\n    \r\n    uint256 public _rebaseOptionsTimestamp;\r\n    \r\n    mapping (address => bool) private _isExchanger;\r\n    mapping (address => bool) private _isDistributor;\r\n    \r\n    address public _vault;\r\n    \r\n    uint256 public _sellFeePercent;\r\n    address public _sellFeeAddress;\r\n    \r\n    uint256 public _sellFeeTimestamp;\r\n    \r\n\r\n    function initialize(uint256 initialSupply, address router, address tokenQuote, address tokenUSD, address team, address dev, address eco, address vault) public initializer\r\n    {\r\n        __ERC20_init(\"2based.finance\", \"2BASED\");\r\n        _setupDecimals(uint8(DECIMALS));\r\n        __Ownable_init();\r\n        \r\n        _totalSupply = initialSupply;\r\n        _gonBalances[_msgSender()] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        \r\n        _router = router;\r\n        \r\n        _tokenQuote = tokenQuote;\r\n        _tokenUSD = tokenUSD;\r\n        \r\n        _vault = vault;\r\n        \r\n        _sellFeePercent = 200; //2%\r\n        _sellFeeAddress = vault;\r\n        \r\n        _rebasePositivePercent = 200;\r\n        _rebasePositivePriceUSD = 2 * 10**6;\r\n    \r\n        _rebaseNegativePercent = -200;\r\n        _rebaseNegativePriceUSD = 1 * 10**6;\r\n        \r\n        _rebaseTokensMinSupplyPercent = 100; // Precision 4 eg. 1 = 0.0001, 10 = 0.001 %\r\n        \r\n        _rebaseNextSeconds = 1342; // 22:22, 22 minutes 22 seconds\r\n        \r\n        _rebaseJackpotRewardDivisor = 2;\r\n        \r\n        setDistributor(_msgSender(), true);\r\n        setDistributor(team, true);\r\n        setDistributor(dev, true);\r\n        setDistributor(eco, true);\r\n        setDistributor(vault, true);\r\n        \r\n        //multisender\r\n        setDistributor(address(0xA5025FABA6E70B84F74e9b1113e5F7F4E7f4859f), true);\r\n        setDistributor(address(0xE7BD68547F41413A6bAa7609550A7eB58C84c406), true);\r\n\r\n        emit Transfer(address(0x0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function rebase()\r\n        external\r\n        returns (uint256)\r\n    {\r\n        require(!_rebasePaused, \"Paused\");\r\n        require(_rebaseJackpotLevel != 10, \"Paused until rewards released\");\r\n        require(now >= _rebaseNextTimestamp, \"Countdown > 0\");\r\n        require(balanceOf(_msgSender()) >= getMinTokensToRebase(), \"Sender must hold a minimum number of tokens to rebase\");\r\n\t   \r\n\t    uint256 priceUSD = _internalRebasingPriceUSD();\r\n\t   \r\n\t    require(priceUSD < _rebaseNegativePriceUSD || priceUSD > _rebasePositivePriceUSD, \"Err: Rebasing range\");\r\n\t    \r\n\t    uint256 totalSupplyNew = _totalSupply;\r\n\t    int256 rebasePercent = 0;\r\n\t   \r\n\t    if(priceUSD > _rebasePositivePriceUSD) {\r\n\t        rebasePercent = _rebasePositivePercent;\r\n\t    }\r\n\t   \r\n\t    if(priceUSD < _rebaseNegativePriceUSD) {\r\n\t        rebasePercent = _rebaseNegativePercent;\r\n\t    }\t        \r\n\t   \t\r\n\t   \ttotalSupplyNew = _totalSupply.mul((10000 + rebasePercent).toUint256()).div(10000);\r\n\r\n        if (totalSupplyNew > MAX_SUPPLY) {\r\n            totalSupplyNew = MAX_SUPPLY;\r\n        }\r\n        \r\n        _epoch = _epoch.add(1);\r\n        _totalSupply = totalSupplyNew;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        \r\n\t\t// From this point forward, _gonsPerFragment is taken as the source of truth.\r\n        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\r\n        // conversion rate.\r\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\r\n        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\r\n        //\r\n        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\r\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\r\n        // ever increased, it must be re-included.\r\n        // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)      \r\n        \r\n        _rebaseNextTimestamp = now + _rebaseNextSeconds;\r\n        \r\n        if (priceUSD > _rebasePositivePriceUSD && priceUSD > _rebaseLastPriceUSD && _rebaseLastPriceUSD > 0) {\r\n            _rebaseJackpotLevel++;\r\n            if(_rebaseJackpotLevel == 10) {\r\n                _rebaseJackpotLastBlock = block.number;\r\n                _rebaseNextTimestamp = now + 24 hours;\r\n            }\r\n        } else {\r\n            _rebaseJackpotLevel = 0;\r\n        }\r\n\r\n\t\tfor (uint i = 0; i < transactions.length; i++) {\r\n            Transaction storage t = transactions[i];\r\n            if (t.enabled) {\r\n                bool result = externalCall(t.destination, t.data);\r\n                if (!result) {\r\n                    emit TransactionFailed(t.destination, i, t.data);\r\n                    revert(\"Transaction Failed\");\r\n                }\r\n            }\r\n        }\r\n        \r\n        emit Rebase(_epoch, priceUSD, rebasePercent, _totalSupply, _rebaseJackpotLevel);\r\n        \r\n        _rebaseLastPriceUSD = _rebasePositivePriceUSD; //priceUSD;\r\n        _resetRebasingPrice();\r\n\t\t\r\n        return _totalSupply;\r\n    }\r\n\r\n    function setRebaseOptions(\r\n    \r\n        bool rebasePaused, \r\n        int256 rebasePositivePercent,\r\n        uint256 rebasePositivePriceUSD, \r\n        int256 rebaseNegativePercent,\r\n        uint256 rebaseNegativePriceUSD,\r\n        bool rebasingPriceUseCurrent,\r\n        uint256 rebaseTokensMinSupplyPercent,\r\n        uint256 rebaseNextTimestamp,\r\n        uint256 rebaseNextSeconds,\r\n        uint8 rebaseJackpotLevel,\r\n        uint256 rebaseJackpotLastBlock,\r\n        uint256 rebaseJackpotRewardDivisor,\r\n        uint256 rebaseLastPriceUSD\r\n        \r\n        ) external onlyOwner() {\r\n        \r\n        if(rebasePaused != _rebasePaused) _rebasePaused = rebasePaused;\r\n        \r\n        if(rebasePositivePercent != _rebasePositivePercent) _rebasePositivePercent = rebasePositivePercent;\r\n        \r\n        if(rebasePositivePriceUSD != _rebasePositivePriceUSD) _rebasePositivePriceUSD = rebasePositivePriceUSD;\r\n        \r\n        if(rebaseNegativePercent != _rebaseNegativePercent) _rebaseNegativePercent = rebaseNegativePercent;\r\n        \r\n        if(rebaseNegativePriceUSD != _rebaseNegativePriceUSD) _rebaseNegativePriceUSD = rebaseNegativePriceUSD;\r\n        \r\n        if(rebasingPriceUseCurrent != _rebasingPriceUseCurrent) _rebasingPriceUseCurrent = rebasingPriceUseCurrent;\r\n        \r\n        if(rebaseTokensMinSupplyPercent != _rebaseTokensMinSupplyPercent) _rebaseTokensMinSupplyPercent = rebaseTokensMinSupplyPercent;\r\n        \r\n        if(rebaseNextTimestamp != _rebaseNextTimestamp) _rebaseNextTimestamp = rebaseNextTimestamp;\r\n        \r\n        if(rebaseNextSeconds != _rebaseNextSeconds) _rebaseNextSeconds = rebaseNextSeconds;\r\n        \r\n        if(rebaseJackpotLevel != _rebaseJackpotLevel) _rebaseJackpotLevel = rebaseJackpotLevel;\r\n        \r\n        if(rebaseJackpotLastBlock != _rebaseJackpotLastBlock) _rebaseJackpotLastBlock = rebaseJackpotLastBlock;\r\n        \r\n        if(rebaseJackpotRewardDivisor != _rebaseJackpotRewardDivisor && rebaseJackpotRewardDivisor > 0) _rebaseJackpotRewardDivisor = rebaseJackpotRewardDivisor;\r\n        \r\n        if(rebaseLastPriceUSD != _rebaseLastPriceUSD) _rebaseLastPriceUSD = rebaseLastPriceUSD;\r\n        \r\n        _rebaseOptionsTimestamp = now;\r\n    }\r\n\r\n    function beforeLaunch(uint256 rebaseFirstTimestamp, uint256 limitExpiresTimestamp, uint256 limitTransferAmount, uint256 limitMaxBalance, uint256 limitSellFeePercent) public onlyOwner() {\r\n        _rebaseJackpotLevel = 0;\r\n        _rebaseNextTimestamp = rebaseFirstTimestamp;\r\n        _rebaseLastPriceUSD = _rebasePositivePriceUSD;\r\n        setLimit(limitExpiresTimestamp, limitTransferAmount, limitMaxBalance, limitSellFeePercent);\r\n    }\r\n    \r\n    function afterLaunch() public onlyOwner() {\r\n        _resetRebasingPrice();\r\n    }\r\n    \r\n    function resetJackpot() public onlyOwner() {\r\n        _rebaseJackpotLevel = 0;\r\n        _rebaseNextTimestamp = now + _rebaseNextSeconds;\r\n        _rebaseLastPriceUSD = _rebasePositivePriceUSD;\r\n        _resetRebasingPrice();\r\n    }\r\n    \r\n    function _resetRebasingPrice() internal {\r\n        _rebasingPriceStartBlock = block.number;\r\n        _rebaseLastPriceUSDCumulative = 0;\r\n        _rebasingPriceLastBlock = block.number;   \r\n    }\r\n    \r\n    function setVault(address vault) external onlyOwner() {\r\n        _vault = vault;\r\n    }\r\n    \r\n    function setSellFee(uint256 sellFeePercent, address sellFeeAddress) external onlyOwner() {\r\n        \r\n        _sellFeePercent = sellFeePercent;\r\n        _sellFeeAddress = sellFeeAddress;\r\n        \r\n        _sellFeeTimestamp = now;\r\n    }\r\n    \r\n    function setLimit(uint256 expiresTimestamp, uint256 transferAmount, uint256 maxBalance, uint256 sellFeePercent) public onlyOwner() {\r\n        \r\n        _limitExpiresTimestamp = expiresTimestamp;\r\n        _limitTransferAmount = transferAmount;\r\n        _limitMaxBalance = maxBalance;\r\n        _limitSellFeePercent = sellFeePercent;\r\n\r\n        _limitTimestamp = now;\r\n    }\r\n    \r\n    function setExchanger(address account, bool exchanger) public onlyOwner() {\r\n        _isExchanger[account] = exchanger;\r\n    }\r\n    \r\n    function setDistributor(address account, bool distributor) public onlyOwner() {\r\n        _isDistributor[account] = distributor;\r\n    }\r\n    \r\n    function setUniswapRouter(address router) external onlyOwner\r\n    {\r\n        require(address(router) != address(0));\r\n        \r\n        _router = router;\r\n    }\r\n    \r\n    function setTokenUSD(address token) external onlyOwner\r\n    {\r\n        require(address(token) != address(0));\r\n        \r\n        _tokenUSD = token;\r\n    }\r\n    \r\n    function _internalRebasingPriceUSD() internal returns (uint256) {\r\n        \r\n        uint256 priceUSD;\r\n        \r\n        if(_rebasingPriceUseCurrent) {\r\n            (priceUSD,) = getPrices();\r\n            return priceUSD;\r\n        } else {\r\n        \r\n            if(block.number > _rebasingPriceLastBlock) {\r\n                \r\n                (priceUSD,) = getPrices();\r\n                \r\n                if(_rebasingPriceStartBlock == 0) _rebasingPriceStartBlock = block.number;\r\n                \r\n                uint256 blocksSinceRebasingPriceStartBlock = block.number - _rebasingPriceStartBlock;\r\n                if(blocksSinceRebasingPriceStartBlock > 0) {\r\n                    uint256 blocksDiff = (_rebasingPriceLastBlock == 0 ? 0 : block.number - _rebasingPriceLastBlock);\r\n                    _rebaseLastPriceUSDCumulative = _rebaseLastPriceUSDCumulative.add(blocksDiff.mul(priceUSD));\r\n                    _rebasingPriceUSD = _rebaseLastPriceUSDCumulative.div(blocksSinceRebasingPriceStartBlock);\r\n                } else {\r\n                    _rebasingPriceUSD = priceUSD;\r\n                }\r\n                \r\n                _rebasingPriceLastBlock = block.number;\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n        return _rebasingPriceUSD;\r\n\r\n    }\r\n    \r\n    function externalRebasingPriceUSD() public view returns (uint256) {\r\n        \r\n        (uint256 priceUSD,) = getPrices();\r\n        \r\n        uint256 rebasingPriceUSD = priceUSD;\r\n        \r\n        if(!_rebasingPriceUseCurrent) {\r\n        \r\n            uint256 blocksSinceRebasingPriceStartBlock = (block.number - _rebasingPriceStartBlock)+1;\r\n            \r\n            uint256 blocksDiff = (_rebasingPriceLastBlock == 0 ? 0 : (block.number - _rebasingPriceLastBlock)+1);\r\n    \r\n            rebasingPriceUSD = _rebaseLastPriceUSDCumulative.add(blocksDiff.mul(priceUSD)).div(blocksSinceRebasingPriceStartBlock);\r\n        \r\n        }\r\n        \r\n        return rebasingPriceUSD;\r\n        \r\n    }\r\n    \r\n    function getJackpotValueUSD() public view returns (uint256) {\r\n        require(_rebaseJackpotRewardDivisor > 0, \"Reward Divisor must be > 0\");\r\n        \r\n        uint256 amount = balanceOf(_vault).div(_rebaseJackpotRewardDivisor);\r\n        (uint256 priceUSD,) = getPrices();\r\n        return amount.mul(priceUSD).div(10**DECIMALS);\r\n    }\r\n    \r\n    /**\r\n     * info() - called by frontend\r\n     * \r\n     * Returns :\r\n     * \r\n     * - $ price of 2BASED used for rebasing (6 DECIMALS)\r\n     * - current $ price of 2BASED (6 DECIMALS)\r\n     * - current ETH price of 2 BASED (18 DECIMALS)\r\n     * - next rebase UTC timestamp (seconds)\r\n     * - $ price of 2BASED at last rebase (6 DECIMALS)\r\n     * - senders balance of 2BASED (9 DECIMALS)\r\n     * - minimum sender balance of 2BASED required to call rebase() (9 DECIMALS)\r\n     * - current jackpot level (0-10)\r\n     * - current jackpot $ value (6 DECIMALS)\r\n     * - block number last jockpot was hit\r\n     * \r\n     */\r\n    \r\n    function info() public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint8, uint256, uint256) {\r\n        (uint256 priceUSD, uint256 priceETH) = getPrices();\r\n        return (externalRebasingPriceUSD(), priceUSD, priceETH, _rebaseNextTimestamp, _rebaseLastPriceUSD, balanceOf(_msgSender()), getMinTokensToRebase(), _rebaseJackpotLevel, getJackpotValueUSD(), _rebaseJackpotLastBlock);\r\n    }\r\n\r\n    \r\n    function getMinTokensToRebase() public view returns (uint256) {\r\n        return _totalSupply.mul(_rebaseTokensMinSupplyPercent).div(1000000); // 4dp\r\n    }\r\n    \r\n    \r\n    function getPrices() public view returns (uint256, uint256) {\r\n        \r\n        address[] memory path = new address[](3);\r\n        \r\n        path[0] = address(this);\r\n        path[1] = _tokenQuote;\r\n        path[2] = _tokenUSD;\r\n\r\n        uint256[] memory prices = IUniswapV2Router02(_router).getAmountsOut(10**DECIMALS, path);\r\n        \r\n        require(prices.length == 3, \"Error retreiving current prices\");\r\n        \r\n        return (prices[2], prices[1]);\r\n    }\r\n    \r\n\t/**\r\n     * @return The total number of fragments.\r\n     */\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\t\r\n\t/**\r\n     * @param who The address to query.\r\n     * @return The balance of the specified address.\r\n     */\r\n\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n\t/**\r\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\r\n     * @param owner_ The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the spender.\r\n     */\r\n\t \r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @return True on success, false otherwise.\r\n     */\r\n\t \r\n    function transfer(address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from The address you want to send tokens from.\r\n     * @param to The address you want to transfer to.\r\n     * @param value The amount of tokens to be transferred.\r\n     */\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[from][_msgSender()] = _allowedFragments[from][_msgSender()].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount)\r\n        internal\r\n        override\r\n    {\r\n        uint256 sellFeeAmount = 0;\r\n        uint256 transferAmount = amount;\r\n        \r\n        //no fees for distributors\r\n        if(!_isDistributor[sender] && !_isDistributor[recipient]) {\r\n        \r\n            //no fees between exchangers\r\n            if(!(_isExchanger[sender] && _isExchanger[recipient])) {\r\n                \r\n                if(_limitExpiresTimestamp >= now) {\r\n                    require(amount <= _limitTransferAmount, \"Initial Uniswap listing - amount exceeds transfer limit\");\r\n                    require(balanceOf(recipient).add(amount) <= _limitMaxBalance, \"Initial Uniswap listing - max balance limit\");\r\n                }\r\n                \r\n                if(!_isExchanger[sender] && _isExchanger[recipient]) {\r\n                    //selling\r\n    \r\n                    if(_limitExpiresTimestamp >= now) {\r\n                        sellFeeAmount = amount.mul(_limitSellFeePercent).div(10000);\r\n                    } else {\r\n                        sellFeeAmount = amount.mul(_sellFeePercent).div(10000);\r\n                    }\r\n                } else if (!_isExchanger[sender] && !_isExchanger[recipient]) {\r\n                    require(_limitExpiresTimestamp < now, \"Initial Uniswap listing - Wallet to Wallet transfers temporarily disabled\");\r\n                }\r\n                \r\n                \r\n                if((_isExchanger[sender] && !_isExchanger[recipient]) || (!_isExchanger[sender] && _isExchanger[recipient])) {\r\n                    //buying or selling\r\n                    uint256 rebasingPriceUSD = _internalRebasingPriceUSD();\r\n                    (uint256 priceUSD,) = getPrices();\r\n                    \r\n                    if(now > _rebaseNextTimestamp) {\r\n                        \r\n                        if(rebasingPriceUSD < _rebasePositivePriceUSD && priceUSD >= _rebasePositivePriceUSD) {\r\n                            \r\n                            _rebaseJackpotLevel = 0;\r\n                            \r\n                            _rebaseNextTimestamp = now + _rebaseNextSeconds;\r\n                            _rebaseLastPriceUSD = _rebasePositivePriceUSD;\r\n                            \r\n                            _resetRebasingPrice();\r\n                            \r\n                        } else if (rebasingPriceUSD > _rebaseNegativePriceUSD && priceUSD <= _rebaseNegativePriceUSD){\r\n\r\n                            _rebaseNextTimestamp = now + _rebaseNextSeconds;\r\n                            _rebaseLastPriceUSD = _rebaseNegativePriceUSD;\r\n                            \r\n                            _resetRebasingPrice();\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(sellFeeAmount > 0) {\r\n            \r\n            transferAmount = amount.sub(sellFeeAmount);\r\n            uint256 sellFeeGonValue = sellFeeAmount.mul(_gonsPerFragment);\r\n            \r\n             _gonBalances[_sellFeeAddress] = _gonBalances[_sellFeeAddress].add(sellFeeGonValue);\r\n             emit Transfer(sender, _sellFeeAddress, sellFeeAmount);\r\n        }\r\n        \r\n        \r\n        uint256 amountGonValue = amount.mul(_gonsPerFragment);\r\n        uint256 transferAmountGonValue = transferAmount.mul(_gonsPerFragment);\r\n        \r\n        _gonBalances[sender] = _gonBalances[sender].sub(amountGonValue);\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(transferAmountGonValue);\r\n        \r\n        emit Transfer(sender, recipient, transferAmount);\r\n        \r\n    }\r\n\t\r\n\t/**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n     * _msgSender(). This method is included for ERC20 compatibility.\r\n     * increaseAllowance and decreaseAllowance should be used instead.\r\n     * Changing an allowance with this method brings the risk that someone may transfer both\r\n     * the old and the new allowance - if they are both greater than zero - if a transfer\r\n     * transaction is mined before the later approve() call is mined.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[_msgSender()][spender] = value;\r\n        emit Approval(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability\r\n     * described above.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[_msgSender()][spender] =\r\n            _allowedFragments[_msgSender()][spender].add(addedValue);\r\n        emit Approval(_msgSender(), spender, _allowedFragments[_msgSender()][spender]);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[_msgSender()][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[_msgSender()][spender] = 0;\r\n        } else {\r\n            _allowedFragments[_msgSender()][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(_msgSender(), spender, _allowedFragments[_msgSender()][spender]);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @notice Adds a transaction that gets called for a downstream receiver of rebases\r\n     * @param destination Address of contract destination\r\n     * @param data Transaction data payload\r\n     */\r\n\t\r\n    function addTransaction(address destination, bytes memory data)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transactions.push(Transaction({\r\n            enabled: true,\r\n            destination: destination,\r\n            data: data\r\n        }));\r\n    }\r\n\t\r\n\t/**\r\n     * @param index Index of transaction to remove.\r\n     *              Transaction ordering may have changed since adding.\r\n     */\r\n\r\n    function removeTransaction(uint index)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(index < transactions.length, \"index out of bounds\");\r\n\r\n        if (index < transactions.length - 1) {\r\n            transactions[index] = transactions[transactions.length - 1];\r\n        }\r\n\r\n        transactions.pop();\r\n    }\r\n\t\r\n\t/**\r\n     * @param index Index of transaction. Transaction ordering may have changed since adding.\r\n     * @param enabled True for enabled, false for disabled.\r\n     */\r\n\r\n    function setTransactionEnabled(uint index, bool enabled)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(index < transactions.length, \"index must be in range of stored tx list\");\r\n        transactions[index].enabled = enabled;\r\n    }\r\n\t\r\n\t/**\r\n     * @return Number of transactions, both enabled and disabled, in transactions list.\r\n     */\r\n\r\n    function transactionsSize()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return transactions.length;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev wrapper to call the encoded transactions on downstream consumers.\r\n     * @param destination Address of destination contract.\r\n     * @param data The encoded data payload.\r\n     * @return True on success\r\n     */\r\n\r\n    function externalCall(address destination, bytes memory data)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bool result;\r\n        assembly {  // solhint-disable-line no-inline-assembly\r\n            // \"Allocate\" memory for output\r\n            // (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let outputAddress := mload(0x40)\r\n\r\n            // First 32 bytes are the padded length of data, so exclude that\r\n            let dataAddress := add(data, 32)\r\n\r\n            result := call(\r\n                // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\r\n                // + callValueTransferGas (9000) + callNewAccountGas\r\n                // (25000, in case the destination address does not exist and needs creating)\r\n                sub(gas(), 34710),\r\n\r\n\r\n                destination,\r\n                0, // transfer value in wei\r\n                dataAddress,\r\n                mload(data),  // Size of the input, in bytes. Stored in position 0 of the array.\r\n                outputAddress,\r\n                0  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n    \r\n\t/**\r\n     * refund any ERC20 tokens sent to contract by mistake\r\n     */\r\n    function transferERC20(IERC20 token, uint256 amount, address to) public onlyOwner returns (bool) {\r\n        require(token.balanceOf(address(this)) >= amount,\"Insufficent balance to transfer token amount.\");\r\n        return token.transfer(to, amount);\r\n    }\r\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"rebasePercent\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"jackpotLevel\",\"type\":\"uint8\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_limitExpiresTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitMaxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitSellFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseJackpotLastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseJackpotLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseJackpotRewardDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseLastPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseLastPriceUSDCumulative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseNegativePercent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseNegativePriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseNextSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseNextTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseOptionsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasePositivePercent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasePositivePriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseTokensMinSupplyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasingPriceLastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasingPriceStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasingPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebasingPriceUseCurrent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebaseFirstTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitExpiresTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitMaxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitSellFeePercent\",\"type\":\"uint256\"}],\"name\":\"beforeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalRebasingPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotValueUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTokensToRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenQuote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eco\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"distributor\",\"type\":\"bool\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exchanger\",\"type\":\"bool\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiresTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeePercent\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"rebasePaused\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"rebasePositivePercent\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"rebasePositivePriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rebaseNegativePercent\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseNegativePriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rebasingPriceUseCurrent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rebaseTokensMinSupplyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseNextTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseNextSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rebaseJackpotLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rebaseJackpotLastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseJackpotRewardDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseLastPriceUSD\",\"type\":\"uint256\"}],\"name\":\"setRebaseOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellFeeAddress\",\"type\":\"address\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setTokenUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransactionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TWOBASED","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}