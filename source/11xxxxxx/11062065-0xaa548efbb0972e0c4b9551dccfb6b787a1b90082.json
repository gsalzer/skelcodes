{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\n\n\ninterface IConditionalTokens {\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\n}\n\ninterface IRealitio {\n    function getContentHash(bytes32 questionId) external view returns (bytes32);\n    function getOpeningTS(bytes32 questionId) external view returns (uint32);\n    function resultFor(bytes32 questionId) external view returns (bytes32);\n}\n\ncontract RealitioScalarAdapter {\n  IConditionalTokens public conditionalTokens;\n  IRealitio public realitio;\n\n  constructor(\n    IConditionalTokens _conditionalTokens,\n    IRealitio _realitio\n  ) public {\n    conditionalTokens = _conditionalTokens;\n    realitio = _realitio;\n  }\n\n  event QuestionIdAnnouncement(\n    bytes32 indexed realitioQuestionId,\n    bytes32 indexed conditionQuestionId,\n    uint256 low,\n    uint256 high\n  );\n\n  function announceConditionQuestionId(\n    bytes32 questionId,\n    uint256 low,\n    uint256 high\n  ) external {\n    emit QuestionIdAnnouncement(\n      questionId,\n      keccak256(abi.encode(\n        questionId,\n        low,\n        high\n      )),\n      low,\n      high\n    );\n  }\n\n  function resolve(\n    bytes32 questionId,\n    string calldata question,\n    uint256 low,\n    uint256 high\n  ) external {\n    \n    bytes32 contentHash = keccak256(abi.encodePacked(\n      uint256(1),\n      realitio.getOpeningTS(questionId),\n      question\n    ));\n\n    require(contentHash == realitio.getContentHash(questionId), \"Content hash mismatch\");\n    require(low < high, \"Range invalid\");\n    require(high != uint256(-1), \"Invalid high point\");\n\n    uint256[] memory payouts = new uint256[](2);\n\n    uint256 answer = uint256(realitio.resultFor(questionId));\n\n    if (answer == uint256(-1)) {\n      payouts[0] = 1;\n      payouts[1] = 1;\n    } else if (answer <= low) {\n      payouts[0] = 1;\n      payouts[1] = 0;\n    } else if (answer >= high) {\n      payouts[0] = 0;\n      payouts[1] = 1;\n    } else {\n      payouts[0] = high - answer;\n      payouts[1] = answer - low;\n    }\n\n    conditionalTokens.reportPayouts(\n      keccak256(abi.encode(\n        questionId,\n        low,\n        high\n      )),\n      payouts\n    );\n  }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealitio\",\"name\":\"_realitio\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realitioQuestionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conditionQuestionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"name\":\"QuestionIdAnnouncement\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"name\":\"announceConditionQuestionId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RealitioScalarAdapter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c59b0e4de5f1248c1140964e0ff287b192407e0c000000000000000000000000325a2e0f3cca2ddbaebb4dfc38df8d19ca165b47","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}