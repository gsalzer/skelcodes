{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n//*****************************************************************************//\r\n//                        Coin Name : NEXON                                    //\r\n//                           Symbol : NEX                                      //\r\n//                     Total Supply : 10,000,000,000                           //\r\n//                         Decimals : 18                                       //\r\n//                    Functionality : Staking, Rewards, Burn, Mint, Claim      //\r\n//*****************************************************************************//\r\n\r\n /**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    if (a == 0){\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0,\"Calculation error\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b <= a,\"Calculation error\");\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a + b;\r\n    require(c >= a,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b != 0,\"Calculation error\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n /**\r\n * @title HexInterface \r\n * @dev see https://etherscan.io/address/0x2b591e99afe9f32eaa6214f7b7629768c40eeb39#code\r\n */\r\ncontract IDelegate {\r\n  function balanceOf(address) public pure returns (uint256){}\r\n  function decimals() public pure returns (uint8){}\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n* @title Nexon Contract For ERC20 Tokens\r\n* @dev NEXON tokens as per ERC20 Standards\r\n*/\r\ncontract Nexon is IERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address private _owner;                         // Owner of the Contract.\r\n  string  private _name;                          // Name of the token.\r\n  string  private _symbol;                        // symbol of the token.\r\n  uint8   private _decimals;                      // variable to maintain decimal precision of the token.\r\n  uint256 private _totalSupply;                   // total supply of token.\r\n  bool    private _stopped = false;               // state variable to check fail-safe for contract.\r\n  address private _tokenPoolAddress;              // Pool Address to manage Staking user's Token.\r\n  uint256 private _tokenPriceETH=100;             // Set price of token with respect to ETH.\r\n  uint256 public airdropcount = 0;                // Variable to keep track on number of airdrop\r\n    \r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  constructor (string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address owner, address tokenPoolAddress) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n    _totalSupply = totalSupply*(10**uint256(decimals));\r\n    _balances[owner] = _totalSupply;\r\n    _owner = owner;\r\n    _tokenPoolAddress = tokenPoolAddress;\r\n  }\r\n \r\n  /*\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  * Functions for owner\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n  * @dev get address of smart contract owner\r\n  * @return address of owner\r\n  */\r\n  function getowner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev modifier to check if the message sender is owner\r\n  */\r\n  modifier onlyOwner() {\r\n    require(isOwner(),\"You are not authenticate to make this transfer\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for modifier\r\n   */\r\n  function isOwner() internal view returns (bool) {\r\n      return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer ownership of the smart contract. For owner only\r\n   * @return request status\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n    _owner = newOwner;\r\n    return true;\r\n  }\r\n      \r\n  /*\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   * View only functions\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   */\r\n  \r\n  /**\r\n    * @return the name of the token.\r\n    */\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n    * @return the symbol of the token.\r\n    */\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n    * @return the number of decimals of the token.\r\n    */\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n    * @dev Total number of tokens in existence.\r\n    */\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return A uint256 representing the amount owned by the passed address.\r\n    */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n  function allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /*\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   * Transfer, allow, mint and burn functions\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   */\r\n\r\n  /*\r\n   * @dev Transfer token to a specified address.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint256 value) public override returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n  function transferFrom(address from, address to, uint256 value) public override returns (bool) {\r\n    _transfer(from, to, value);\r\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Transfer token for a specified addresses.\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n  */\r\n   function _transfer(address from, address to, uint256 value) internal {\r\n    //require(from != address(0),\"Invalid from Address\");\r\n    require(to != address(0),\"Invalid to Address\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public override returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve an address to spend another addresses' tokens.\r\n   * @param owner The address that owns the tokens.\r\n   * @param spender The address that will spend the tokens.\r\n   * @param value The number of tokens that can be spent.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(spender != address(0),\"Invalid address\");\r\n    require(owner != address(0),\"Invalid address\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _allowed[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * @param spender The address which will spend the funds.\r\n    * @param addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * @param spender The address which will spend the funds.\r\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n    \r\n  /**\r\n    * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n    * @param _addresses array of address in serial order\r\n    * @param _amount amount in serial order with respect to address array\r\n    */\r\n  function airdropByOwner(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\r\n    require(_addresses.length == _amount.length,\"Invalid Array\");\r\n    uint256 count = _addresses.length;\r\n    for (uint256 i = 0; i < count; i++){\r\n      _transfer(msg.sender, _addresses[i], _amount[i]);\r\n      airdropcount = airdropcount + 1;\r\n      }\r\n    return true;\r\n   }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != address(0),\"Invalid account\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyOwner {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  /**\r\n    * Function to mint tokens\r\n    * @param _value The amount of tokens to mint.\r\n    */\r\n  function mint(uint256 _value) public onlyOwner returns(bool){\r\n    require(_value > 0,\"The amount should be greater than 0\");\r\n    _mint(_value,msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function _mint(uint256 _value,address _tokenOwner) internal returns(bool){\r\n    _balances[_tokenOwner] = _balances[_tokenOwner].add(_value);\r\n    _totalSupply = _totalSupply.add(_value);\r\n    emit Transfer(address(0), _tokenOwner, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get ETH balance from this contract\r\n   */\r\n  function getContractETHBalance() public view returns(uint256){\r\n    return(address(this).balance);\r\n  }\r\n\r\n  /*\r\n   * ----------------------------------------------------------------------------------------------\r\n   * Perform Staking || Withdraw Stakes || Check stakes || Check penalty \r\n   * -----------------------------------------------------------------------------------------------\r\n   */\r\n\r\n  // Mappinng for users with id => address Staked Address\r\n  mapping (uint256 => address) private _stakerAddress;\r\n\r\n  // Mappinng for users with id => Tokens \r\n  mapping (uint256 => uint256) private _usersTokens;\r\n  \r\n  // Mappinng for users with id => Staking Time\r\n  mapping (uint256 => uint256) private _stakingStartTime;\r\n\r\n  // Mappinng for users with id => End Time\r\n  mapping (uint256 => uint256) private _stakingEndTime;\r\n\r\n  // Mappinng for users with id => Status\r\n  mapping (uint256 => bool) private _TokenTransactionstatus;  \r\n\r\n    // Mapping for users with id => isClaim or not(ie true/false)\r\n  mapping (uint256 => bool) private _isClaim;\r\n\r\n  // Mapping for referral address with user\r\n  mapping (address => address) private _ReferalList;  \r\n\r\n  // Mappinng for referral address withdraw status\r\n  mapping (address => bool) private _ReferalStatus;\r\n  \r\n  // Mapping to track purchased token\r\n  mapping(address=>uint256) private _myPurchasedTokens;\r\n  \r\n  // Mapping for open order ETH\r\n  mapping(address=>uint256) private _openOrderETHAmountByAddress;\r\n  \r\n  // Mapping for ETH deposited by user \r\n  mapping(address=>uint256) private _ethDepositedByUser;\r\n  \r\n  // Mapping to keep track of final withdraw value of staked token\r\n  mapping(uint256=>uint256) private _finalWithdrawlStake;\r\n  \r\n  // Reward Percentage\r\n  uint256 private _rewardPercentage=10;\r\n\r\n  // Penalty Percentage\r\n  uint256 private _penaltyPercentage=1;\r\n  \r\n  // Count of no of staking\r\n  uint256 private _stakingCount = 0;\r\n\r\n  // BigPayDay Date\r\n  uint256 private _bigPayDayDate = now;\r\n\r\n  // BigPayDay Percentage\r\n  uint256 private _bigPayDayPercentage=2;\r\n  \r\n  // Total ETH\r\n  uint256 private _totalETH;\r\n\r\n  //Mapping referral whitelisted address\r\n  mapping(address=>bool) _referralWhitelist;\r\n  \r\n  // To check the user for staking || Re-enterance Guard\r\n  modifier validatorForStaking(uint256 tokens, uint256 time){\r\n    require( time > now && tokens > 0, \"Invalid time and Amount\");\r\n    _;\r\n  }\r\n  \r\n  // To check for the payable amount for purchasing the tokens\r\n  modifier payableCheck(){\r\n    require(msg.value > 0 ,\r\n      \"Can not buy tokens,\");\r\n    _;\r\n  }\r\n\r\n    /**\r\n   * @dev modifier to check the failsafe\r\n   */\r\n  modifier failSafe(){\r\n    require(_stopped == false, \"Fail Safe check failed\");\r\n    _;\r\n  }\r\n\r\n  /*\r\n  * ------------------------------------------------------------------------------------\r\n  * Owner functions of get value, set value, blacklist and withdraw ETH Functionality\r\n  * ------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev Function to secure contract from fail by toggling _stopped variable\r\n   */\r\n  function toggleContractActive() public onlyOwner{\r\n    _stopped = !_stopped;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function to set token pool address\r\n   * @param add Address for token pool that manages supplies for stakes.\r\n   */\r\n  function setTokenPoolAddress(address add) public onlyOwner returns(bool){\r\n    require(add != address(0),\"Invalid Address\");\r\n    _tokenPoolAddress = add;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Token Pool addresss\r\n   */\r\n  function getTokenpoolAddress() public view returns(address){\r\n    return _tokenPoolAddress;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function for setting rewards percentage by owner\r\n   * @param rewardsPercentage Reward percentage\r\n   */\r\n  function setRewardPercentage(uint256 rewardsPercentage) public onlyOwner returns(bool){\r\n    require(rewardsPercentage > 0, \"Invalid Percentage\");\r\n    _rewardPercentage = rewardsPercentage;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for getting rewards percentage by owner\r\n   */\r\n  function getRewardPercentage() public view returns(uint256){\r\n    return _rewardPercentage;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for setting penalty percentage by owner\r\n   * @param penaltyPercentage penalty percentage \r\n   */\r\n  function setPenaltyPercentage(uint256 penaltyPercentage) public onlyOwner returns(bool){\r\n    require(penaltyPercentage > 0, \"Invalid Percentage\");\r\n    _penaltyPercentage = penaltyPercentage;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for getting penalty percentage\r\n   */\r\n  function getPenaltyPercentage() public view returns(uint256){\r\n    return _penaltyPercentage;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to set Referral Address\r\n   * @param add referral pool address\r\n   */\r\n  \r\n  /**\r\n   * @dev Function to Set the price of each token for ETH purchase\r\n   */\r\n  function setPriceToken(uint256 tokenPriceETH) external onlyOwner returns (bool){\r\n    require(tokenPriceETH >0,\"Invalid Amount\");\r\n    _tokenPriceETH = tokenPriceETH;\r\n    return(true);\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get price of each token for ETH purchase\r\n   */\r\n  function getPriceToken() public view returns(uint256) {\r\n    return _tokenPriceETH;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to blacklist any stake\r\n   * @param status true/false\r\n   * @param stakingId stake id for that particular stake\r\n   */\r\n  function blacklistStake(bool status,uint256 stakingId) external onlyOwner returns(bool){\r\n    _TokenTransactionstatus[stakingId] = status;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to withdraw Funds by owner only\r\n   */\r\n  function withdrawETH() external onlyOwner returns(bool){\r\n    msg.sender.transfer(address(this).balance);\r\n    return true;\r\n  }\r\n  \r\n  /*\r\n  * ----------------------------------------------------------------------------------------\r\n  * Function for Big Pay Day set, get And calculate Functionality\r\n  * ----------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev Function to set Big Pay Day\r\n   * @param NextDay unix time for next big pay day time\r\n   */\r\n  function setBigPayDay(uint256 NextDay) public onlyOwner returns(bool){\r\n    require(NextDay > now,\"Invalid Day Selected\");\r\n    _bigPayDayDate = NextDay;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Big Pay Day\r\n   */\r\n  function getBigPayDay() public view returns(uint256){\r\n    return _bigPayDayDate;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to set Big Pay Day Percentage\r\n   * @param newPercentage Big pay day reward percentage\r\n   */\r\n  function setBigPayDayPercentage(uint256 newPercentage) public onlyOwner returns(bool){\r\n    require(newPercentage > 0,\"Invalid Percentage Selected\");\r\n    _bigPayDayPercentage = newPercentage;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Big Pay Percentage\r\n   */\r\n  function getBigPayDayPercentage() public view returns(uint256){\r\n    return _bigPayDayPercentage;\r\n  }\r\n  \r\n  /**\r\n   * @dev Funtion to calculate bigPayDay reward\r\n   * @param amount Big pay day reward percentage\r\n   * @param endDate End date of the stake\r\n   */\r\n  function calculateBigPayDayReward(uint256 amount, uint256 endDate)public view returns(uint256){\r\n    if(endDate > _bigPayDayDate){\r\n      return (amount * _bigPayDayPercentage)/100;\r\n    }else {\r\n    return 0 ;\r\n    }\r\n  }\r\n\r\n  /*\r\n  * ------------------------------------------------------------------------------------------------\r\n  * Function for purchase Token Funtionality\r\n  * ------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev Function to get purchased token\r\n   * @param add Address of user\r\n   */\r\n  function getMyPurchasedTokens(address add) public view returns(uint256){\r\n    return _myPurchasedTokens[add];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get ETH deposit amount by address\r\n   * @param add Address of user\r\n   */\r\n  function getETHAmountByAddress(address add) public view returns(uint256){\r\n    return _ethDepositedByUser[add];\r\n  }\r\n  \r\n\r\n  /**\r\n   * @dev Function to get ETH amount of open order address\r\n   * @param add Address of user\r\n   */\r\n  function getOpenOrderETHAmountByAddress(address add) public view returns(uint256){\r\n      return _openOrderETHAmountByAddress[add];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get total ETH\r\n   */\r\n  function getTotalETH() public view returns(uint256){\r\n    return _totalETH;\r\n  }\r\n  /**\r\n   * @dev Function to perform purchased token\r\n   */\r\n  function purchaseTokens() external failSafe payable payableCheck returns(bool){\r\n    _myPurchasedTokens[msg.sender] = _myPurchasedTokens[msg.sender] + msg.value * _tokenPriceETH;\r\n    _openOrderETHAmountByAddress[msg.sender] = msg.value;\r\n    _totalETH = _totalETH +msg.value;\r\n    _ethDepositedByUser[msg.sender] = msg.value;\r\n    return true;\r\n  }\r\n  \r\n   /**\r\n   * @dev Funtion to withdraw purchased token \r\n   */\r\n  function withdrawPurchasedToken() external failSafe returns(bool){\r\n    require(_myPurchasedTokens[msg.sender]>0,\"You do not have any purchased token\");\r\n    if(_referralWhitelist[msg.sender] == true){\r\n      _mint(_myPurchasedTokens[msg.sender].add(_myPurchasedTokens[msg.sender].div(10)), msg.sender);\r\n\r\n      _mint(_myPurchasedTokens[msg.sender].div(5), _ReferalList[msg.sender]);\r\n    }\r\n    else{\r\n       _mint(_myPurchasedTokens[msg.sender], msg.sender);\r\n    }\r\n    _myPurchasedTokens[msg.sender] = 0;\r\n    _openOrderETHAmountByAddress[msg.sender] = 0;\r\n    return true;\r\n  }\r\n\r\n\r\n  /*\r\n   * -------------------------------------------------------------------------------------\r\n   * Functions for Staking Functionlaity\r\n   * -------------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * @dev Function to get Final Withdraw Staked value\r\n   * @param id stake id for the stake\r\n   */\r\n  function getFinalWithdrawlStake(uint256 id) public view returns(uint256){\r\n    return _finalWithdrawlStake[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Staking address by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingAddressById(uint256 id) public view returns (address){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _stakerAddress[id];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Staking Starting time by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingStartTimeById(uint256 id)public view returns(uint256){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _stakingStartTime[id];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Staking Ending time by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingEndTimeById(uint256 id)public view returns(uint256){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _stakingEndTime[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get active Staking tokens by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingTokenById(uint256 id)public view returns(uint256){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _usersTokens[id];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Staking tokens by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getActiveStakesById(uint256 id)public view returns(address){\r\n    return _stakerAddress[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Token lockstatus by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getTokenLockstatus(uint256 id)public view returns(bool){\r\n    return _TokenTransactionstatus[id];\r\n  }\r\n\r\n    /**\r\n   * @dev Function to get is claim flag by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getIsClaimById(uint256 id)public view returns(bool){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _isClaim[id];\r\n  }\r\n   \r\n  /**\r\n   * @dev Function to get staking count\r\n   */\r\n  function getStakingCount() public view returns(uint256){\r\n      return _stakingCount;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to calculate panelty for the message sender\r\n   * @param id stake id for the stake\r\n   */\r\n  function getPaneltyIfWithdrawToday(uint256 id) public view returns(uint256){\r\n    if(_stakingEndTime[id] > now){\r\n      return (_penaltyPercentage * _usersTokens[id] * ((_stakingEndTime[id] - now)/86400))/10000;\r\n    } else if(_stakingEndTime[id] + 2629743 < now){\r\n      return (_penaltyPercentage * _usersTokens[id] * ((now - _stakingEndTime[id])/86400))/10000;\r\n      } else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Rewards on the stake\r\n   * @param id stake id for the stake\r\n   */\r\n  function getRewardsDetailsOfUserById(uint256 id) public view returns(uint256){\r\n      uint256 bpDay = calculateBigPayDayReward(_usersTokens[id], _stakingEndTime[id]);\r\n      if(_stakingEndTime[id] > now){\r\n      return (((now - _stakingStartTime[id])/86400) * (_rewardPercentage) * _usersTokens[id])/1000 + bpDay;\r\n      } else if (_stakingEndTime[id] < now){\r\n        return (((_stakingEndTime[id] - _stakingStartTime[id])/86400) * (_rewardPercentage) * _usersTokens[id])/1000 + bpDay;\r\n      } else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function to performs staking for user tokens for a specific period of time\r\n   * @param tokens number of tokens\r\n   * @param time time for total staking\r\n   */\r\n  function performStaking(uint256 tokens, uint256 time) public failSafe \r\n    validatorForStaking(tokens, time) returns(bool){\r\n    _stakingCount = _stakingCount +1 ;\r\n    _stakerAddress[_stakingCount] = msg.sender;\r\n    _stakingEndTime[_stakingCount] = time;\r\n    _stakingStartTime[_stakingCount] = now;\r\n    _usersTokens[_stakingCount] = tokens;\r\n    _TokenTransactionstatus[_stakingCount] = false;\r\n    _transfer(msg.sender, _tokenPoolAddress, tokens);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for withdrawing staked tokens\r\n   * @param stakingId stake id for the stake\r\n   */\r\n  function withdrawStakedTokens(uint256 stakingId) public failSafe returns(bool){\r\n    require(_stakerAddress[stakingId] == msg.sender,\"No staked token found on this address and ID\");\r\n    require(_TokenTransactionstatus[stakingId] != true,\"Either tokens are already withdrawn or blocked by admin\");\r\n    require(balanceOf(_tokenPoolAddress) > _usersTokens[stakingId], \"Pool is dry, can not perform transaction\");\r\n    uint256 paneltyAtWithdraw = 0;\r\n    if(_isClaim[stakingId]){\r\n      require(now>=_stakingEndTime[stakingId], \"Can only be withdrawn after an year\");\r\n    } else {\r\n      paneltyAtWithdraw = getPaneltyIfWithdrawToday(stakingId);\r\n    }\r\n    _TokenTransactionstatus[stakingId] = true;\r\n    if(paneltyAtWithdraw>=getRewardsDetailsOfUserById(stakingId)){\r\n        _finalWithdrawlStake[stakingId] = _usersTokens[stakingId];\r\n        _transfer(_tokenPoolAddress,msg.sender,_usersTokens[stakingId]);\r\n    \r\n    } else {\r\n        _finalWithdrawlStake[stakingId] = _usersTokens[stakingId]-paneltyAtWithdraw+getRewardsDetailsOfUserById(stakingId);\r\n        _mint(getRewardsDetailsOfUserById(stakingId)-paneltyAtWithdraw,_tokenPoolAddress);\r\n        _transfer(_tokenPoolAddress,msg.sender,_usersTokens[stakingId]-paneltyAtWithdraw+getRewardsDetailsOfUserById(stakingId));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /*\r\n  * ------------------------------------------------------------------------------------------------------\r\n  * Functions for Referral Functionality\r\n  * ------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev Function to get Referral History by Address\r\n   * @param add address of the user to check referral history\r\n   */\r\n  function getReferralHistory(address add)public view returns(address){\r\n    return _ReferalList[add];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to withdraw referral amount\r\n   * @param add withdraw referral with respect to the referral address\r\n   */\r\n  function withdrawReferral(address add) external failSafe returns(bool){\r\n    require(_ReferalList[add] != msg.sender && _ReferalStatus[msg.sender] != true \r\n    && add != msg.sender,\"Either already withdrawn or not valid\");\r\n    _ReferalStatus[add]=true;\r\n    _ReferalList[msg.sender]=add;\r\n    _referralWhitelist[msg.sender] = true;\r\n    return true;\r\n  }\r\n\r\n  /*----------------------------------------------------------------------------------------------------------------*\r\n  * Function to claim token based on Hex holdings || Check token holdings || Create locked claim || Update entries *\r\n  *----------------------------------------------------------------------------------------------------------------*/\r\n\r\n  mapping(address=>bool)holderAddressBlockList;\r\n  mapping(address=>uint256)whitelistAddressesForClaim;\r\n\r\n  address public delegateContract = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;           //Contract Address for HEX token\r\n  uint256 public totalWhitelistedAdd = 0;\r\n\r\n  IDelegate delegate = IDelegate(delegateContract);\r\n\r\n  /** Functions for owner for claim */\r\n\r\n  /**\r\n   * @dev Whitelist addresses and amount for claim-able check\r\n   * @param _userAddressArray array of addresses which have snapshot balance\r\n   * @param _snapshotBalance balance of whitelisted addresses\r\n   * @return bool response for the status of execution\r\n   */\r\n  function whitelistaddressForClaim(address[]  calldata _userAddressArray, uint256[] calldata  _snapshotBalance) external onlyOwner returns(bool){\r\n    require(_userAddressArray.length == _snapshotBalance.length,\"Invalid Array\");\r\n    uint256 count = _userAddressArray.length;\r\n    for (uint256 i = 0; i < count; i++){\r\n      whitelistAddressesForClaim[_userAddressArray[i]] = _snapshotBalance[i].mul((10**uint256(delegate.decimals())));\r\n      totalWhitelistedAdd = totalWhitelistedAdd + 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to check the claiming address validations\r\n   * @param _claimingAddress address of the user claiming the token with snapshot\r\n   */\r\n  modifier checkBlocker(address _claimingAddress, uint256 _claimableTokens){\r\n    require(delegate.balanceOf(_claimingAddress) >= _claimableTokens, \"You do not have sufficient balance for this claim\");\r\n    require(_claimableTokens >= 5*((10**uint256(delegate.decimals()))), \"Claiming should be more or equal to 5\");\r\n    require(whitelistAddressesForClaim[_claimingAddress] > 0, \"User do not have any claimable tokens\");\r\n    require(holderAddressBlockList[_claimingAddress]!=true,\"User has already claimed tokens, Check with another address\");\r\n    require(delegate.balanceOf(_claimingAddress) >= whitelistAddressesForClaim[_claimingAddress], \"Not sufficient holdings\");\r\n    _;\r\n  }\r\n\r\n  /** Functions for claim tokens */\r\n\r\n  /**\r\n   * @dev Whitelist addresses and amount for claim-able check\r\n   * @param _amountToClaim Amount of tokens staked in the wallet\r\n   */\r\n  function performClaim(uint256 _amountToClaim) external failSafe checkBlocker(msg.sender,_amountToClaim) validatorForStaking(_amountToClaim, now + 31536000) returns(bool){\r\n    //This code will perform stake of the number of token for next 1 year of 365 days\r\n    _stakingCount = _stakingCount +1;\r\n    _stakerAddress[_stakingCount] = msg.sender;\r\n    _stakingEndTime[_stakingCount] = now + 31536000;\r\n    _stakingStartTime[_stakingCount] = now;\r\n    _usersTokens[_stakingCount] = _amountToClaim.mul((10**uint256(_decimals))).div((10**uint256(delegate.decimals())));\r\n    _TokenTransactionstatus[_stakingCount] = false;\r\n    _isClaim[_stakingCount] = true;\r\n    holderAddressBlockList[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check balance for performing stake\r\n   * @param _claimingAddress address to check balance for claimable token\r\n   */\r\n  function checkNowStakesBalance(address _claimingAddress) public view returns(uint256){\r\n   return delegate.balanceOf(_claimingAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check snapsot balance for a specific address\r\n   * @param _holderAddress address to check balance at the time of snapshot\r\n   */\r\n  function checkHoldingBalance(address _holderAddress) public view returns(uint256){\r\n   return whitelistAddressesForClaim[_holderAddress];\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"blacklistStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"calculateBigPayDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"name\":\"checkHoldingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimingAddress\",\"type\":\"address\"}],\"name\":\"checkNowStakesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getActiveStakesById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBigPayDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBigPayDayPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getETHAmountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFinalWithdrawlStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getIsClaimById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getMyPurchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getOpenOrderETHAmountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPaneltyIfWithdrawToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getReferralHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRewardsDetailsOfUserById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingEndTimeById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingStartTimeById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingTokenById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenLockstatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenpoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToClaim\",\"type\":\"uint256\"}],\"name\":\"performClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"performStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NextDay\",\"type\":\"uint256\"}],\"name\":\"setBigPayDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setBigPayDayPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPriceETH\",\"type\":\"uint256\"}],\"name\":\"setPriceToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPercentage\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setTokenPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWhitelistedAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_snapshotBalance\",\"type\":\"uint256[]\"}],\"name\":\"whitelistaddressForClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPurchasedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"withdrawReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"withdrawStakedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nexon","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000002540be400000000000000000000000000e8d310b179813ac144dcb89e856ddacdac1c2a0b000000000000000000000000e8d310b179813ac144dcb89e856ddacdac1c2a0b00000000000000000000000000000000000000000000000000000000000000054e45584f4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e45580000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d206fce4444ba7ebf2431c263c32c87b600fec236e24d521ac0c7cc3707c77cb"}]}