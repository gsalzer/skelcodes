{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.1;\r\n\r\n/**\r\n * @title Context\r\n * @dev Provide context functions\r\n */\r\nabstract contract Context {\r\n    address public owner;            //Contract owner address\r\n    bool public isContractActive;           //Make sure this contract can be used or not\r\n    \r\n    /**\r\n     * Make sure the sender is the owner of contract\r\n     */ \r\n    modifier onlyOwner{\r\n        require(_msgSender() == owner, \"Only owner can process\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Make sure the contract is active to execute\r\n    */ \r\n    modifier contractActive{\r\n        require(isContractActive, \"This contract is deactived\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * \r\n    * Implementations:\r\n    *   1. Set the owner of contract\r\n    *   2. Set contract is active\r\n    */\r\n    constructor(){\r\n       owner = _msgSender();           //Set owner address when contract is created\r\n       isContractActive = true;        //Contract is active when it is created\r\n    }\r\n\r\n    /**\r\n     * Get sender address\r\n     */ \r\n    function _msgSender() internal view returns(address){\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Get current time in unix timestamp\r\n     */\r\n    function _now() internal view returns(uint){\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * Update contract status to make sure this contract can be executed or not\r\n     */\r\n    function setContractStatus(bool status) external onlyOwner{\r\n        require(isContractActive != status,\"The current contract's status is the same with updating status\");\r\n        isContractActive = status;\r\n    }\r\n\r\n    /**\r\n    * @dev Change contract's owner\r\n    * @return If success return true; else return false\r\n    * \r\n    * Requirements:\r\n    *   1. Only current owner can execute\r\n    *   2. `newOwner` is not zero address\r\n    *   3. `newOwner` is not current owner\r\n    * \r\n    * Implementations:\r\n    *   1. Validate requirements\r\n    *   2. Set current owner is newOwner\r\n    *   3. Emit Events\r\n    *   4. Return result\r\n    */\r\n    function setOwner(address newOwner) external onlyOwner returns(bool){\r\n        require(newOwner != address(0), \"New owner is zero address\");\r\n        require(newOwner != owner, \"New owner is current owner\");\r\n\r\n        owner = newOwner;\r\n\r\n        emit OwnerChanged(owner);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Event that notifies contract's owner has been changed to `newOwner` \r\n    */\r\n    event OwnerChanged(address newOwner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract BaseContractData is Context{\r\n    address internal _tokenSaleContractAddress;\r\n\r\n    /**\r\n    @dev Make sure function can be called only be _tokenSaleContractAddress\r\n     */\r\n    modifier onlyTokenSaleContract{\r\n        require(_tokenSaleContractAddress != address(0), \"Token sale contract address has not been initialized yet\");\r\n        require(_msgSender() == _tokenSaleContractAddress, \"Only token sale contract can process this\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @dev Set _tokenSaleContractAddress\r\n    */\r\n    function setTokenSaleContractAddress(address contractAddress) external onlyOwner{\r\n        _setTokenSaleContractAddress(contractAddress);\r\n    }\r\n\r\n    function _setTokenSaleContractAddress(address contractAddress) internal virtual{\r\n        _tokenSaleContractAddress = contractAddress;\r\n    }\r\n}\r\n\r\n/**\r\n@title Share token sale data\r\n@dev Stores all data of seed and private round\r\n */\r\ncontract ShareTokenSaleBalanceData is BaseContractData{\r\n    using SafeMath for uint;\r\n\r\n    address public _transferContractAddress;\r\n    modifier onlyTransferContract{\r\n        require(_transferContractAddress != address(0), \"Transfer contract address has not been initialized yet\");\r\n        require(_msgSender() == _transferContractAddress,\"Only transfer contract can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Shareholder list\r\n    */\r\n    address[] internal _shareholders;\r\n\r\n    /**\r\n    * @dev Stores shareholders' balances for each round\r\n    * Mapping: Round => (shareholder address => shareholder balance)\r\n    */\r\n    mapping(uint => mapping(address => uint)) internal _shareholderBalances;\r\n\r\n    /**\r\n    * @dev Set transfer contract address\r\n    */\r\n    function setTransferContractAddress (address contractAddress) external onlyOwner returns(bool){\r\n        _transferContractAddress = contractAddress;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Update all related data for purchasing\r\n    *\r\n    * Implementations:\r\n    *   1. Create purchase history\r\n    *   2. Decrease remained token for `round`\r\n    *   3. Increase shareholder's balance\r\n     */\r\n    function updatePurchaseData(address account, uint round, uint tokenAmount) external onlyTokenSaleContract returns(bool){\r\n        require(round == 0 || round == 1, \"Round is invalid\");\r\n\r\n        //Add share holder balance for round\r\n        _increaseShareholderBalance(account, tokenAmount, round);\r\n\r\n        //Save new shareholder if not existed\r\n        require(_saveShareholder(account),\"ShareTokenSaleData.updatePurchaseData: Can not create new shareholder\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Update all transfer data when a transfer request is maked\r\n    *\r\n    * Implementations\r\n    *   1. Add transfer history\r\n    *   2. Update transfer balance\r\n    *   3. Update share holder balance\r\n    */\r\n    function updateTransferData(address from, address to, uint amount, uint round) external onlyTransferContract returns(bool){\r\n        require(round == 0 || round == 1, \"ShareTokenSaleData.addTransferHistoryAndBalance: Round is invalid\");\r\n\r\n        //Update shareholder balance\r\n        _decreaseShareholderBalance(from, amount, round);\r\n        _increaseShareholderBalance(to, amount, round);\r\n\r\n        //Save new shareholder if not existed\r\n        require(_saveShareholder(to),\"ShareTokenSaleData.updateShareholderTransferData: Can not save new shareholder\");\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get share holder's token balance\r\n    */\r\n    function getShareholderBalance(address account, uint round) external view returns(uint){\r\n        return _shareholderBalances[round][account];\r\n    }\r\n\r\n    /**\r\n    * @dev Get shareholder list \r\n    */\r\n    function getShareholders() external view returns(address[] memory){\r\n        return _shareholders;\r\n    }\r\n\r\n    /**\r\n    * @dev Increase shareholder balance with `amount` of BNU for round `round`\r\n    */\r\n    function _increaseShareholderBalance(address account, uint amount, uint round) internal{\r\n        _shareholderBalances[round][account] = _shareholderBalances[round][account].add(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease shareholder balance with `amount` of BNU for round `round`\r\n    */\r\n    function _decreaseShareholderBalance(address account, uint amount, uint round) internal{\r\n        _shareholderBalances[round][account] = _shareholderBalances[round][account].sub(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Save new shareholder to _shareholders\r\n    *\r\n    * Requirements: `account` should be not address zero\r\n    */\r\n    function _saveShareholder(address account) internal returns(bool){\r\n        //Requirements\r\n        require(account != address(0),\"Shareholder is address zero\");\r\n        for(uint index = 0; index < _shareholders.length; index++){\r\n            if(_shareholders[index] == account)\r\n                return true;\r\n        }\r\n        _shareholders.push(account);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_transferContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getShareholderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareholders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setTokenSaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setTransferContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"updateTransferData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShareTokenSaleBalanceData","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bcbdf279375180ac39fe067ecd6ccd1d759bd7ad7898c4db1f0dca1828ef6d1b"}]}