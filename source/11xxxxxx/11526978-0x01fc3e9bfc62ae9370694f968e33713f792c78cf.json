{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.8 <0.8.0;\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ITellor {\r\n    function addTip(uint256 _requestId, uint256 _tip) external;\r\n    function submitMiningSolution(string calldata _nonce, uint256[5] calldata _requestId, uint256[5] calldata _value) external;\r\n    function depositStake() external;\r\n\r\n    function requestStakingWithdraw() external;\r\n\r\n    function withdrawStake() external;\r\n\r\n    function getUintVar(bytes32 _data) external view returns (uint256);\r\n\r\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract TellorProxy is Ownable {\r\n    address tellorAddress;\r\n\r\n    constructor(address _tellorAddress)\r\n        public\r\n    {\r\n        tellorAddress = _tellorAddress;\r\n    }\r\n\r\n    function addTip(uint256 _requestId, uint256 _tip) external onlyOwner {\r\n        ITellor(tellorAddress).addTip(_requestId, _tip);\r\n    }\r\n\r\n    function submitMiningSolution(\r\n        string calldata _nonce,\r\n        uint256[5] calldata _requestId,\r\n        uint256[5] calldata _value,\r\n        uint256 _pass\r\n    ) external onlyOwner {\r\n        if (_pass == 0) {\r\n            bytes32 slotProgress =\r\n                0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a;\r\n            uint256 _soltNum = ITellor(tellorAddress).getUintVar(slotProgress);\r\n            require(_soltNum != 4, \"haha\");\r\n        }\r\n        ITellor(tellorAddress).submitMiningSolution(_nonce, _requestId, _value);\r\n    }\r\n\r\n    function depositStake() external onlyOwner {\r\n        ITellor(tellorAddress).depositStake();\r\n    }\r\n\r\n    function requestStakingWithdraw() external onlyOwner {\r\n        ITellor(tellorAddress).requestStakingWithdraw();\r\n    }\r\n\r\n    function payment(address _to, uint256 _amount) external onlyOwner {\r\n        ITellor(tellorAddress).transfer(_to, _amount);\r\n    }\r\n    \r\n    function getSlotProgress() external view returns (uint256) {\r\n        bytes32 slotProgress =\r\n            0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a;\r\n        return ITellor(tellorAddress).getUintVar(slotProgress);\r\n    }\r\n\r\n    function withdrawStake() external onlyOwner {\r\n        ITellor(tellorAddress).withdrawStake();\r\n    }\r\n\r\n    function vote(uint256 _disputeId, bool _supportsDispute)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ITellor(tellorAddress).vote(_disputeId, _supportsDispute);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"addTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlotProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nonce\",\"type\":\"string\"},{\"internalType\":\"uint256[5]\",\"name\":\"_requestId\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_value\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_pass\",\"type\":\"uint256\"}],\"name\":\"submitMiningSolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supportsDispute\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TellorProxy","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000ba45a8b5d5575935b8158a88c631e9f9c95a2e5","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://512b91c377ca4ff3097bba6de503942b014def8acaf92ca43152b4d77caada1a"}]}