{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/SyntLayerToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n//Import abstractions\\nimport { IUniswapV2Router02, IBalancer, IFreeFromUpTo, Ownable , SafeMath } from './abstractions/Balancer.sol';\\nimport { REFLECTBase } from './abstractions/ReflectToken.sol';\\nimport './libraries/TransferHelper.sol';\\n//Import uniswap interfaces\\nimport './interfaces/IUniswapFactory.sol';\\nimport './interfaces/IUniswapV2Pair.sol';\\n\\ncontract SyntLayer is REFLECTBase {\\n    using SafeMath for uint256;\\n\\n    event Rebalance(uint256 tokenBurnt);\\n    event RewardLiquidityProviders(uint256 liquidityRewards);\\n\\n    address public uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public uniswapV2Pair = address(0);\\n    address payable public treasury;\\n\\n    mapping(address => bool) public unlockedAddr;\\n\\n    IUniswapV2Router02 router = IUniswapV2Router02(uniswapV2Router);\\n    IUniswapV2Pair iuniswapV2Pair = IUniswapV2Pair(uniswapV2Pair);\\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n\\n    uint256 public minRebalanceAmount;\\n    uint256 public lastRebalance;\\n    uint256 public rebalanceInterval;\\n    uint256 public liqAddBalance = 0;\\n\\n    uint256 constant INFINITE_ALLOWANCE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n\\n    uint256 public lpUnlocked;\\n    bool public locked;\\n    //Use CHI to save on gas on rebalance\\n    bool public useCHI = false;\\n    bool approved = false;\\n    bool doAddLiq = true;\\n\\n    /// @notice Liq Add Cut fee at 1% initially\\n    uint256 public LIQFEE = 100;\\n    /// @notice LiqLock is set at 0.2%\\n    uint256 public LIQLOCK = 20;\\n    /// @notice Rebalance amount is 2.5%\\n    uint256 public REBALCUT = 250;\\n    /// @notice Caller cut is at 2%\\n    uint256 public CALLCUT = 200;\\n    /// @notice Fee BASE\\n    uint256 constant public BASE = 10000;\\n\\n    IBalancer balancer;\\n\\n    modifier discountCHI {\\n        uint256 gasStart = gasleft();\\n        _;\\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *\\n                           msg.data.length;\\n        if(useCHI){\\n            if(chi.balanceOf(address(this)) > 0) {\\n                chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\\n            }\\n            else {\\n                chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\\n            }\\n        }\\n    }\\n\\n    constructor(address balancerAddr) public {\\n        lastRebalance = block.timestamp;\\n        rebalanceInterval = 1 seconds;\\n        lpUnlocked = block.timestamp + 90 days;\\n        minRebalanceAmount = 20 ether;\\n        treasury = msg.sender;\\n        balancer = IBalancer(balancerAddr);\\n        locked = true;\\n        unlockedAddr[msg.sender] = true;\\n        unlockedAddr[balancerAddr] = true;\\n        isFeeless[address(this)] = true;\\n        isFeeless[balancerAddr] = true;\\n        isFeeless[msg.sender] = true;\\n    }\\n\\n    function setBalancer(address newBalancer) public onlyOwner {\\n        balancer = IBalancer(newBalancer);\\n        isFeeless[newBalancer] = true;\\n        unlockedAddr[newBalancer] = true;\\n    }\\n\\n    /* Fee getters */\\n    function getLiqAddBudget(uint256 amount) public view returns (uint256) {\\n        return amount.mul(LIQFEE).div(BASE);\\n    }\\n\\n    function getLiqLockBudget(uint256 amount) public view returns (uint256) {\\n        return amount.mul(LIQLOCK).div(BASE);\\n    }\\n\\n\\n    function getRebalanceCut(uint256 amount) public view returns (uint256) {\\n        return amount.mul(REBALCUT).div(BASE);\\n    }\\n\\n    function getCallerCut(uint256 amount) public view returns (uint256) {\\n        return amount.mul(CALLCUT).div(BASE);\\n    }\\n\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        //First remove feelet set for current owner\\n        toggleFeeless(owner());\\n        //Remove unlock flag for current owner\\n        toggleUnlockable(owner());\\n        //Add feeless for new owner\\n        toggleFeeless(newOwner);\\n        //Add unlocked for new owner\\n        toggleUnlockable(newOwner);\\n        //Transfer ownersip\\n        super.transferOwnership(newOwner);\\n    }\\n\\n    // transfer function with liq add and liq rewards\\n    function _transfer(address from, address to, uint256 amount) internal override  {\\n        // calculate liquidity lock amount\\n        // dont transfer burn from this contract\\n        // or can never lock full lockable amount\\n        if(locked && !unlockedAddr[from])\\n            revert(\\\"Locked until end of distribution\\\");\\n\\n        if (!isFeeless[from] && !isFeeless[to] && !locked) {\\n            uint256 liquidityLockAmount = getLiqLockBudget(amount);\\n            uint256 LiqPoolAddition = getLiqAddBudget(amount);\\n            //Transfer to liq add amount\\n            super._transfer(from, address(this), LiqPoolAddition);\\n            liqAddBalance = liqAddBalance.add(LiqPoolAddition);\\n            //Transfer to liq lock amount\\n            super._transfer(from, address(this), liquidityLockAmount);\\n            //Amount that is ending up after liq rewards and liq budget\\n            uint256 totalsub = LiqPoolAddition.add(liquidityLockAmount);\\n            super._transfer(from, to, amount.sub(totalsub));\\n        }\\n        else {\\n            super._transfer(from, to, amount);\\n        }\\n    }\\n\\n    // receive eth from uniswap swap\\n    receive () external payable {}\\n\\n    function initPair() public {\\n        // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\\n        //Set uniswap pair interface\\n        iuniswapV2Pair = IUniswapV2Pair(uniswapV2Pair);\\n    }\\n\\n    function setUniPair(address pair) public onlyOwner {\\n        uniswapV2Pair = pair;\\n        iuniswapV2Pair = IUniswapV2Pair(uniswapV2Pair);\\n    }\\n\\n    function unlock() public onlyOwner {\\n        locked = false;\\n    }\\n\\n    function setTreasury(address treasuryN) public onlyOwner {\\n        treasury = payable(treasuryN);\\n        balancer.setTreasury(treasuryN);\\n    }\\n\\n    /* Fee setters */\\n    function setLiqFee(uint newFee) public onlyOwner {\\n        LIQFEE = newFee;\\n    }\\n    function setLiquidityLockCut(uint256 newFee) public onlyOwner {\\n        LIQLOCK = newFee;\\n    }\\n\\n    function setRebalanceCut(uint256 newFee) public onlyOwner {\\n        REBALCUT = newFee;\\n    }\\n    function setCallerRewardCut(uint256 newFee) public onlyOwner {\\n        CALLCUT = newFee;\\n    }\\n\\n    function toggleCHI() public onlyOwner {\\n        useCHI = !useCHI;\\n    }\\n\\n    function setRebalanceInterval(uint256 _interval) public onlyOwner {\\n        rebalanceInterval = _interval;\\n    }\\n\\n    function _transferLP(address dest,uint256 amount) internal{\\n        iuniswapV2Pair.transfer(dest, amount);\\n    }\\n\\n    function unlockLPPartial(uint256 amount) public onlyOwner {\\n        require(block.timestamp > lpUnlocked, \\\"Not unlocked yet\\\");\\n        _transferLP(msg.sender,amount);\\n    }\\n\\n    function unlockLP() public onlyOwner {\\n        require(block.timestamp > lpUnlocked, \\\"Not unlocked yet\\\");\\n        uint256 amount = iuniswapV2Pair.balanceOf(address(this));\\n        _transferLP(msg.sender, amount);\\n    }\\n\\n    function toggleFeeless(address _addr) public onlyOwner {\\n        isFeeless[_addr] = !isFeeless[_addr];\\n    }\\n\\n    function toggleUnlockable(address _addr) public onlyOwner {\\n        unlockedAddr[_addr] = !unlockedAddr[_addr];\\n    }\\n\\n    function setMinRebalanceAmount(uint256 amount_) public onlyOwner {\\n        minRebalanceAmount = amount_;\\n    }\\n\\n    function rebalanceable() public view returns (bool) {\\n        return block.timestamp > lastRebalance.add(rebalanceInterval);\\n    }\\n\\n    function hasMinRebalanceBalance(address addr) public view returns (bool) {\\n        return balanceOf(addr) >= minRebalanceAmount;\\n    }\\n\\n    function _rewardLiquidityProviders(uint256 liquidityRewards) private {\\n        super._transfer(address(this), uniswapV2Pair, liquidityRewards);\\n        iuniswapV2Pair.sync();\\n        emit RewardLiquidityProviders(liquidityRewards);\\n    }\\n\\n    function remLiquidity(uint256 lpAmount) private returns(uint ETHAmount) {\\n        iuniswapV2Pair.approve(uniswapV2Router, lpAmount);\\n        (ETHAmount) = router\\n            .removeLiquidityETHSupportingFeeOnTransferTokens(\\n                address(this),\\n                lpAmount,\\n                0,\\n                0,\\n                address(balancer),\\n                block.timestamp\\n            );\\n    }\\n\\n    function ApproveInf(address tokenT,address spender) internal{\\n        TransferHelper.safeApprove(tokenT,spender,INFINITE_ALLOWANCE);\\n    }\\n\\n    function toggleAddLiq() public onlyOwner {\\n        doAddLiq = !doAddLiq;\\n    }\\n\\n    function rebalanceLiquidity() public discountCHI {\\n        require(hasMinRebalanceBalance(msg.sender), \\\"!hasMinRebalanceBalance\\\");\\n        require(rebalanceable(), '!rebalanceable');\\n        lastRebalance = block.timestamp;\\n\\n        if(!approved) {\\n            ApproveInf(address(this),uniswapV2Router);\\n            ApproveInf(uniswapV2Pair,uniswapV2Router);\\n            approved = true;\\n        }\\n        //Approve CHI incase its enabled\\n        if(useCHI) ApproveInf(address(chi),address(chi));\\n        // lockable supply is the token balance of this contract minus the liqaddbalance\\n        if(lockableSupply() > 0)\\n            _rewardLiquidityProviders(lockableSupply());\\n\\n        uint256 amountToRemove = getRebalanceCut(iuniswapV2Pair.balanceOf(address(this)));\\n        // Sell half of balance tokens to eth and add liq\\n        if(balanceOf(address(this)) >= liqAddBalance && liqAddBalance > 0 && doAddLiq) {\\n            //Send tokens to balancer\\n            super._transfer(address(this),address(balancer),liqAddBalance);\\n            require(balancer.AddLiq(),\\\"!AddLiq\\\");\\n            liqAddBalance = 0;\\n        }\\n        // needed in case contract already owns eth\\n        remLiquidity(amountToRemove);\\n        uint _locked = balancer.rebalance(msg.sender);\\n        //Sync after changes\\n        iuniswapV2Pair.sync();\\n        emit Rebalance(_locked);\\n    }\\n\\n    // returns token amount\\n    function lockableSupply() public view returns (uint256) {\\n        return balanceOf(address(this)) > 0 ? balanceOf(address(this)).sub(liqAddBalance,\\\"underflow on lockableSupply\\\") : 0;\\n    }\\n\\n    // returns token amount\\n    function lockedSupply() external view returns (uint256) {\\n        uint256 lpTotalSupply = iuniswapV2Pair.totalSupply();\\n        uint256 lpBalance = lockedLiquidity();\\n        uint256 percentOfLpTotalSupply = lpBalance.mul(1e12).div(lpTotalSupply);\\n\\n        uint256 uniswapBalance = balanceOf(uniswapV2Pair);\\n        uint256 _lockedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);\\n        return _lockedSupply;\\n    }\\n\\n    // returns token amount\\n    function burnedSupply() external view returns (uint256) {\\n        uint256 lpTotalSupply = iuniswapV2Pair.totalSupply();\\n        uint256 lpBalance = burnedLiquidity();\\n        uint256 percentOfLpTotalSupply = lpBalance.mul(1e12).div(lpTotalSupply);\\n\\n        uint256 uniswapBalance = balanceOf(uniswapV2Pair);\\n        uint256 _burnedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);\\n        return _burnedSupply;\\n    }\\n\\n    // returns LP amount, not token amount\\n    function burnableLiquidity() public view returns (uint256) {\\n        return iuniswapV2Pair.balanceOf(address(this));\\n    }\\n\\n    // returns LP amount, not token amount\\n    function burnedLiquidity() public view returns (uint256) {\\n        return iuniswapV2Pair.balanceOf(address(0));\\n    }\\n\\n    // returns LP amount, not token amount\\n    function lockedLiquidity() public view returns (uint256) {\\n        return burnableLiquidity().add(burnedLiquidity());\\n    }\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/abstractions/Balancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport { Ownable, SafeMath } from '../interfaces/CommonImports.sol';\\nimport { IERC20Burnable } from '../interfaces/IERC20Burnable.sol';\\nimport '../interfaces/IUniswapV2Router02.sol';\\nimport '../interfaces/IBalancer.sol';\\n\\ninterface IFreeFromUpTo {\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\n    function balanceOf(address account) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract BalancerNew is Ownable, IBalancer {\\n    using SafeMath for uint256;\\n\\n    address internal UniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address payable public override treasury;\\n    IERC20Burnable token;\\n    IUniswapV2Router02 routerInterface = IUniswapV2Router02(UniRouter);\\n    address internal WETH = routerInterface.WETH();\\n\\n    constructor() public {\\n        treasury = msg.sender;\\n    }\\n\\n    function setToken(address tokenAddr) public onlyOwner {\\n        token = IERC20Burnable(tokenAddr);\\n    }\\n\\n    function setTreasury(address treasuryN) external override{\\n        require(msg.sender == address(token), \\\"only token\\\");\\n        treasury = payable(treasuryN);\\n    }\\n\\n    receive () external payable {}\\n\\n    /** Path stuff **/\\n    function getPath(address tokent,bool isSell) internal view returns (address[] memory path){\\n        path = new address[](2);\\n        path[0] = isSell ? tokent : WETH;\\n        path[1] = isSell ? WETH : tokent;\\n        return path;\\n    }\\n\\n    function getSellPath(address tokent) public view returns (address[] memory path) {\\n        path = getPath(tokent,true);\\n    }\\n\\n    function getBuyPath(address tokent) public view returns (address[] memory path){\\n        path = getPath(tokent,false);\\n    }\\n    /** Path stuff end **/\\n\\n    function rebalance(address rewardRecp) external override returns (uint256) {\\n        require(msg.sender == address(token), \\\"only token\\\");\\n        swapEthForTokens();\\n        uint256 lockableBalance = token.balanceOf(address(this));\\n        uint256 callerReward = token.getCallerCut(lockableBalance);\\n        token.transfer(rewardRecp, callerReward);\\n        token.burn(lockableBalance.sub(callerReward,\\\"Underflow on burn\\\"));\\n        return lockableBalance.sub(callerReward,\\\"underflow on return\\\");\\n    }\\n\\n    function swapEthForTokens() private {\\n\\n        uint256 treasuryAmount = token.getCallerCut(address(this).balance);\\n        (bool success,) = treasury.call{value: treasuryAmount}(\\\"\\\");\\n        require(success,\\\"treasury send failed\\\");\\n\\n        routerInterface.swapExactETHForTokensSupportingFeeOnTransferTokens{value: address(this).balance}(\\n                0,\\n                getBuyPath(address(token)),\\n                address(this),\\n                block.timestamp.add(200)\\n            );\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        //Approve before swap\\n        token.approve(UniRouter,tokenAmount);\\n        routerInterface.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                tokenAmount,\\n                0,\\n                getSellPath(address(token)),\\n                address(this),\\n                block.timestamp.add(200)\\n        );\\n    }\\n\\n\\n\\n    function addLiq(uint256 tokenAmount,uint256 ethamount) private {\\n        //Approve before adding liq\\n        token.approve(UniRouter,tokenAmount);\\n        routerInterface.addLiquidityETH{value:ethamount}(\\n            address(token),\\n            tokenAmount,\\n            0,\\n            ethamount.div(2),//Atleast half of eth should be added\\n            address(token),\\n            block.timestamp.add(200)\\n        );\\n    }\\n\\n    function AddLiq() external override returns (bool) {\\n        //Sell half of the amount to ETH\\n        uint256 tokenAmount  = token.balanceOf(address(this)).div(2);\\n        //Swap half of it to eth\\n        swapTokensForETH(tokenAmount);\\n        //Add liq with remaining eth and tokens\\n        addLiq(token.balanceOf(address(this)),address(this).balance);\\n        //If any eth remains swap to token\\n        if(address(this).balance > 0)\\n            swapEthForTokens();\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/abstractions/ReflectToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport { Ownable, SafeMath } from './Balancer.sol';\\nimport { IERC20 } from '../interfaces/IERC20Burnable.sol';\\n\\ncontract REFLECTBase is Ownable ,IERC20{\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping(address => bool) public isFeeless;\\n\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal = 1000000 ether;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\n    string private _name = 'SyntLayer';\\n    string private _symbol = 'SYNL';\\n    uint8 private _decimals = 18;\\n\\n    event Redestributed(address from, uint256 t, uint256 rAmount, uint256 tAmount);\\n\\n    constructor () public {\\n        _rOwned[_msgSender()] = _rTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflect(uint256 tAmount) public {\\n        address sender = _msgSender();\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\n        (uint256 rAmount,,,,) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) external onlyOwner() {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeAccount(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n\\n        if (isFeeless[sender] || isFeeless[recipient]) {\\n            rTransferAmount = rTransferAmount.add(rFee);\\n            tTransferAmount = tTransferAmount.add(tFee);\\n        } else {\\n            _reflectFee(rFee, tFee);\\n            emit Redestributed(sender, 1, rAmount, tAmount);\\n        }\\n\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n\\n        if (isFeeless[sender] || isFeeless[recipient]) {\\n            rTransferAmount = rTransferAmount.add(rFee);\\n            tTransferAmount = tTransferAmount.add(tFee);\\n        } else {\\n            _reflectFee(rFee, tFee);\\n            emit Redestributed(sender, 2, rAmount, tAmount);\\n        }\\n\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n\\n        if (isFeeless[sender] || isFeeless[recipient]) {\\n            rTransferAmount = rTransferAmount.add(rFee);\\n            tTransferAmount = tTransferAmount.add(tFee);\\n        } else {\\n            _reflectFee(rFee, tFee);\\n            emit Redestributed(sender, 3, rAmount, tAmount);\\n        }\\n\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n\\n        if (isFeeless[sender] || isFeeless[recipient]) {\\n            rTransferAmount= rTransferAmount.add(rFee);\\n            tTransferAmount = tTransferAmount.add(tFee);\\n        } else {\\n            _reflectFee(rFee, tFee);\\n            emit Redestributed(sender, 4, rAmount, tAmount);\\n        }\\n\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\n    }\\n\\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\\n        uint256 tFee = tAmount.div(100);\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\n        return (tTransferAmount, tFee);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        _rOwned[account] = _rOwned[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _tTotal = _tTotal.sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        emit Transfer(account, address(0), amount);\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/CommonImports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IBalancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\ninterface IBalancer {\\n  function treasury (  ) external view returns ( address payable );\\n  function setTreasury ( address treasuryN ) external;\\n  function rebalance ( address rewardRecp ) external returns ( uint256 );\\n  function AddLiq (  ) external returns (bool);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport {IERC20} from '../interfaces/CommonImports.sol';\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external;\\n    function getLiqAddBudget(uint256 amount) external view returns (uint256);\\n    function getCallerCut(uint256 amount) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\nimport { IERC20 } from './IERC20Burnable.sol';\\ninterface IUniswapV2Pair is IERC20 {\\n    function sync() external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n      uint amountOutMin,\\n      address[] calldata path,\\n      address to,\\n      uint deadline\\n    ) external payable;\\n    function removeLiquidityETH(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline\\n    ) external returns (uint amountETH);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/rfits-token/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferWithReturn(address token, address to, uint value) internal returns (bool) {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        return (success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"balancerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBurnt\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"Redestributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRewards\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLCUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQFEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALCUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCallerCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLiqAddBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLiqLockBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRebalanceCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasMinRebalanceBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqAddBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRebalanceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBalancer\",\"type\":\"address\"}],\"name\":\"setBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setCallerRewardCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setLiqFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityLockCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMinRebalanceAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setRebalanceCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryN\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setUniPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAddLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCHI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"toggleFeeless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"toggleUnlockable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockLPPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCHI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SyntLayer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000008d10258d526aebcd8815e0767332305be74c5c98","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}