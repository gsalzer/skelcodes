{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-010-23\r\n*/\r\n\r\npragma solidity ^0.4.16;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a && c >= b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract BTCB is SafeMath {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  address public owner;\r\n\r\n  /* This creates an array with all balances */\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => uint256) public freezeOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /* This notifies clients about the amount frozen */\r\n  event Freeze(address indexed from, uint256 value);\r\n\r\n  /* This notifies clients about the amount unfrozen */\r\n  event Unfreeze(address indexed from, uint256 value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  constructor() public{\r\n    balanceOf[msg.sender] = 3000000000000;       // Give the creator all initial tokens\r\n    totalSupply = 3000000000000;                 // Update total supply\r\n    name = 'Bitcoin Bless';                          // Set the name for display purposes\r\n    symbol = 'BTCB';                          // Set the symbol for display purposes\r\n    decimals = 8;                            // Amount of decimals for display purposes\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /* Send tokens */\r\n  function transfer(address _to, uint256 _value) public returns(bool){\r\n    if (_to == 0x0) return false;                               // Prevent transfer to 0x0 address. Use burn() instead\r\n    if (_value <= 0) return false;\r\n    if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n    balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);              // Subtract from the sender\r\n    balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\r\n    emit Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\r\n\treturn true;\r\n  }\r\n\r\n  /* Allow another contract to spend some tokens in your behalf */\r\n  function approve(address _spender, uint256 _value) public returns(bool success) {\r\n    require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n    allowance[msg.sender][_spender] = _value;\r\n\temit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /* Transfer tokens */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n    if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\r\n    if (_value <= 0) revert();\r\n    if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\r\n    if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\r\n    if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\r\n    balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                         // Subtract from the sender\r\n    balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n    allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /* Destruction of the token */\r\n  function burn(uint256 _value) public returns(bool success) {\r\n    if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n    if (_value <= 0) revert();\r\n    balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);           // Subtract from the sender\r\n    totalSupply = SafeMath.safeSub(totalSupply, _value);                                // Updates totalSupply\r\n    emit Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function freeze(uint256 _value) public returns(bool success) {\r\n    if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n    if (_value <= 0) revert();\r\n    balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);             // Subtract from the sender\r\n    freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);               // Updates frozen tokens\r\n    emit Freeze(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function unfreeze(uint256 _value) public returns(bool success) {\r\n    if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n    if (_value <= 0) revert();\r\n    freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);              // Updates frozen tokens\r\n    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);            // Add to the sender\r\n    emit Unfreeze(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  /* Prevents accidental sending of Ether */\r\n  function () public{\r\n    revert();\r\n  }\r\n  /* token code by kay */\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BTCB","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://71cf8483b5932520efc6c5e1803d836387fd86b5f218a3b52d2c54ee9e0b1cec"}]}