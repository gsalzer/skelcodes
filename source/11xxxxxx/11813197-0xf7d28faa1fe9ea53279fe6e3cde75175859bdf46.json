{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IOwned.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Owned contract interface\n*/\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterAnchor.sol\n\n\npragma solidity 0.6.12;\n\n\n/*\n    Converter Anchor interface\n*/\ninterface IConverterAnchor is IOwned {\n\n}\n\n// File: solidity/contracts/token/interfaces/IERC20Token.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    ERC20 Standard Token interface\n*/\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionEventsSubscriber.sol\n\n\npragma solidity 0.6.12;\n\n\n\n/**\n * @dev Liquidity protection events subscriber interface\n */\ninterface ILiquidityProtectionEventsSubscriber {\n    function onAddingLiquidity(\n        address provider,\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n\n    function onRemovingLiquidity(\n        uint256 id,\n        address provider,\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        uint256 poolAmount,\n        uint256 reserveAmount\n    ) external;\n}\n\n// File: solidity/contracts/liquidity-protection/interfaces/ILiquidityProtectionSettings.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Liquidity Protection Store Settings interface\n*/\ninterface ILiquidityProtectionSettings {\n    function isPoolWhitelisted(IConverterAnchor poolAnchor) external view returns (bool);\n\n    function poolWhitelist() external view returns (address[] memory);\n\n    function subscribers() external view returns (address[] memory);\n\n    function isPoolSupported(IConverterAnchor poolAnchor) external view returns (bool);\n\n    function minNetworkTokenLiquidityForMinting() external view returns (uint256);\n\n    function defaultNetworkTokenMintingLimit() external view returns (uint256);\n\n    function networkTokenMintingLimits(IConverterAnchor poolAnchor) external view returns (uint256);\n\n    function addLiquidityDisabled(IConverterAnchor poolAnchor, IERC20Token reserveToken) external view returns (bool);\n\n    function minProtectionDelay() external view returns (uint256);\n\n    function maxProtectionDelay() external view returns (uint256);\n\n    function minNetworkCompensation() external view returns (uint256);\n\n    function lockDuration() external view returns (uint256);\n\n    function averageRateMaxDeviation() external view returns (uint32);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverter.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/*\n    Converter interface\n*/\ninterface IConverter is IOwned {\n    function converterType() external pure returns (uint16);\n\n    function anchor() external view returns (IConverterAnchor);\n\n    function isActive() external view returns (bool);\n\n    function targetAmountAndFee(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function convert(\n        IERC20Token _sourceToken,\n        IERC20Token _targetToken,\n        uint256 _amount,\n        address _trader,\n        address payable _beneficiary\n    ) external payable returns (uint256);\n\n    function conversionFee() external view returns (uint32);\n\n    function maxConversionFee() external view returns (uint32);\n\n    function reserveBalance(IERC20Token _reserveToken) external view returns (uint256);\n\n    receive() external payable;\n\n    function transferAnchorOwnership(address _newOwner) external;\n\n    function acceptAnchorOwnership() external;\n\n    function setConversionFee(uint32 _conversionFee) external;\n\n    function withdrawTokens(\n        IERC20Token _token,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function withdrawETH(address payable _to) external;\n\n    function addReserve(IERC20Token _token, uint32 _ratio) external;\n\n    // deprecated, backward compatibility\n    function token() external view returns (IConverterAnchor);\n\n    function transferTokenOwnership(address _newOwner) external;\n\n    function acceptTokenOwnership() external;\n\n    function connectors(IERC20Token _address)\n        external\n        view\n        returns (\n            uint256,\n            uint32,\n            bool,\n            bool,\n            bool\n        );\n\n    function getConnectorBalance(IERC20Token _connectorToken) external view returns (uint256);\n\n    function connectorTokens(uint256 _index) external view returns (IERC20Token);\n\n    function connectorTokenCount() external view returns (uint16);\n\n    /**\n     * @dev triggered when the converter is activated\n     *\n     * @param _type        converter type\n     * @param _anchor      converter anchor\n     * @param _activated   true if the converter was activated, false if it was deactivated\n     */\n    event Activation(uint16 indexed _type, IConverterAnchor indexed _anchor, bool indexed _activated);\n\n    /**\n     * @dev triggered when a conversion between two tokens occurs\n     *\n     * @param _fromToken       source ERC20 token\n     * @param _toToken         target ERC20 token\n     * @param _trader          wallet that initiated the trade\n     * @param _amount          input amount in units of the source token\n     * @param _return          output amount minus conversion fee in units of the target token\n     * @param _conversionFee   conversion fee in units of the target token\n     */\n    event Conversion(\n        IERC20Token indexed _fromToken,\n        IERC20Token indexed _toToken,\n        address indexed _trader,\n        uint256 _amount,\n        uint256 _return,\n        int256 _conversionFee\n    );\n\n    /**\n     * @dev triggered when the rate between two tokens in the converter changes\n     * note that the event might be dispatched for rate updates between any two tokens in the converter\n     *\n     * @param  _token1 address of the first token\n     * @param  _token2 address of the second token\n     * @param  _rateN  rate of 1 unit of `_token1` in `_token2` (numerator)\n     * @param  _rateD  rate of 1 unit of `_token1` in `_token2` (denominator)\n     */\n    event TokenRateUpdate(IERC20Token indexed _token1, IERC20Token indexed _token2, uint256 _rateN, uint256 _rateD);\n\n    /**\n     * @dev triggered when the conversion fee is updated\n     *\n     * @param  _prevFee    previous fee percentage, represented in ppm\n     * @param  _newFee     new fee percentage, represented in ppm\n     */\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n}\n\n// File: solidity/contracts/converter/interfaces/IConverterRegistry.sol\n\n\npragma solidity 0.6.12;\n\n\n\ninterface IConverterRegistry {\n    function getAnchorCount() external view returns (uint256);\n\n    function getAnchors() external view returns (address[] memory);\n\n    function getAnchor(uint256 _index) external view returns (IConverterAnchor);\n\n    function isAnchor(address _value) external view returns (bool);\n\n    function getLiquidityPoolCount() external view returns (uint256);\n\n    function getLiquidityPools() external view returns (address[] memory);\n\n    function getLiquidityPool(uint256 _index) external view returns (IConverterAnchor);\n\n    function isLiquidityPool(address _value) external view returns (bool);\n\n    function getConvertibleTokenCount() external view returns (uint256);\n\n    function getConvertibleTokens() external view returns (address[] memory);\n\n    function getConvertibleToken(uint256 _index) external view returns (IERC20Token);\n\n    function isConvertibleToken(address _value) external view returns (bool);\n\n    function getConvertibleTokenAnchorCount(IERC20Token _convertibleToken) external view returns (uint256);\n\n    function getConvertibleTokenAnchors(IERC20Token _convertibleToken) external view returns (address[] memory);\n\n    function getConvertibleTokenAnchor(IERC20Token _convertibleToken, uint256 _index)\n        external\n        view\n        returns (IConverterAnchor);\n\n    function isConvertibleTokenAnchor(IERC20Token _convertibleToken, address _value) external view returns (bool);\n}\n\n// File: solidity/contracts/utility/Owned.sol\n\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev This contract provides support and utilities for contract ownership.\n */\ncontract Owned is IOwned {\n    address public override owner;\n    address public newOwner;\n\n    /**\n     * @dev triggered when the owner is updated\n     *\n     * @param _prevOwner previous owner\n     * @param _newOwner  new owner\n     */\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n     * @dev initializes a new Owned instance\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        _ownerOnly();\n        _;\n    }\n\n    // error message binary size optimization\n    function _ownerOnly() internal view {\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev allows transferring the contract ownership\n     * the new owner still needs to accept the transfer\n     * can only be called by the contract owner\n     *\n     * @param _newOwner    new contract owner\n     */\n    function transferOwnership(address _newOwner) public override ownerOnly {\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev used by a new owner to accept an ownership transfer\n     */\n    function acceptOwnership() public override {\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: solidity/contracts/utility/Utils.sol\n\n\npragma solidity 0.6.12;\n\n/**\n * @dev Utilities & Common Modifiers\n */\ncontract Utils {\n    // verifies that a value is greater than zero\n    modifier greaterThanZero(uint256 _value) {\n        _greaterThanZero(_value);\n        _;\n    }\n\n    // error message binary size optimization\n    function _greaterThanZero(uint256 _value) internal pure {\n        require(_value > 0, \"ERR_ZERO_VALUE\");\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        _validAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validAddress(address _address) internal pure {\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        _notThis(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _notThis(address _address) internal view {\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\n    }\n\n    // validates an external address - currently only checks that it isn't null or this\n    modifier validExternalAddress(address _address) {\n        _validExternalAddress(_address);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validExternalAddress(address _address) internal view {\n        require(_address != address(0) && _address != address(this), \"ERR_INVALID_EXTERNAL_ADDRESS\");\n    }\n}\n\n// File: solidity/contracts/utility/interfaces/IContractRegistry.sol\n\n\npragma solidity 0.6.12;\n\n/*\n    Contract Registry interface\n*/\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\n// File: solidity/contracts/utility/ContractRegistryClient.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n/**\n * @dev This is the base contract for ContractRegistry clients.\n */\ncontract ContractRegistryClient is Owned, Utils {\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\n    bytes32 internal constant BANCOR_X = \"BancorX\";\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n    bytes32 internal constant LIQUIDITY_PROTECTION = \"LiquidityProtection\";\n\n    IContractRegistry public registry; // address of the current contract-registry\n    IContractRegistry public prevRegistry; // address of the previous contract-registry\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\n\n    /**\n     * @dev verifies that the caller is mapped to the given contract name\n     *\n     * @param _contractName    contract name\n     */\n    modifier only(bytes32 _contractName) {\n        _only(_contractName);\n        _;\n    }\n\n    // error message binary size optimization\n    function _only(bytes32 _contractName) internal view {\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\n    }\n\n    /**\n     * @dev initializes a new ContractRegistryClient instance\n     *\n     * @param  _registry   address of a contract-registry contract\n     */\n    constructor(IContractRegistry _registry) internal validAddress(address(_registry)) {\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n    }\n\n    /**\n     * @dev updates to the new contract-registry\n     */\n    function updateRegistry() public {\n        // verify that this function is permitted\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\n\n        // get the new contract-registry\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\n\n        // verify that the new contract-registry is different and not zero\n        require(newRegistry != registry && address(newRegistry) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\n\n        // save a backup of the current contract-registry before replacing it\n        prevRegistry = registry;\n\n        // replace the current contract-registry with the new contract-registry\n        registry = newRegistry;\n    }\n\n    /**\n     * @dev restores the previous contract-registry\n     */\n    function restoreRegistry() public ownerOnly {\n        // restore the previous contract-registry\n        registry = prevRegistry;\n    }\n\n    /**\n     * @dev restricts the permission to update the contract-registry\n     *\n     * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\n     */\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\n        // change the permission to update the contract-registry\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\n    }\n\n    /**\n     * @dev returns the address associated with the given contract name\n     *\n     * @param _contractName    contract name\n     *\n     * @return contract address\n     */\n    function addressOf(bytes32 _contractName) internal view returns (address) {\n        return registry.addressOf(_contractName);\n    }\n}\n\n// File: solidity/contracts/liquidity-protection/LiquidityProtectionSettings.sol\n\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n/**\n * @dev Liquidity Protection Settings contract\n */\ncontract LiquidityProtectionSettings is ILiquidityProtectionSettings, AccessControl, ContractRegistryClient {\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // the owner role is used to update the settings\n    bytes32 public constant ROLE_OWNER = keccak256(\"ROLE_OWNER\");\n\n    uint32 private constant PPM_RESOLUTION = 1000000;\n\n    IERC20Token private immutable _networkToken;\n\n    // list of whitelisted pools\n    EnumerableSet.AddressSet private _poolWhitelist;\n\n    // list of subscribers\n    EnumerableSet.AddressSet private _subscribers;\n\n    // network token minting limits\n    uint256 private _minNetworkTokenLiquidityForMinting = 1000e18;\n    uint256 private _defaultNetworkTokenMintingLimit = 20000e18;\n    mapping(IConverterAnchor => uint256) private _networkTokenMintingLimits;\n\n    // permission of adding liquidity for a given reserve on a given pool\n    mapping(IConverterAnchor => mapping(IERC20Token => bool)) private _addLiquidityDisabled;\n\n    // number of seconds until any protection is in effect\n    uint256 private _minProtectionDelay = 30 days;\n\n    // number of seconds until full protection is in effect\n    uint256 private _maxProtectionDelay = 100 days;\n\n    // minimum amount of network tokens that the system can mint as compensation for base token losses\n    uint256 private _minNetworkCompensation = 1e16; // = 0.01 network tokens\n\n    // number of seconds from liquidation to full network token release\n    uint256 private _lockDuration = 24 hours;\n\n    // maximum deviation of the average rate from the spot rate\n    uint32 private _averageRateMaxDeviation = 5000; // PPM units\n\n    /**\n     * @dev triggered when the pool whitelist is updated\n     *\n     * @param poolAnchor    pool anchor\n     * @param added         true if the pool was added to the whitelist, false if it was removed\n     */\n    event PoolWhitelistUpdated(IConverterAnchor indexed poolAnchor, bool added);\n\n    /**\n     * @dev triggered when a subscriber is added or removed\n     *\n     * @param subscriber    subscriber\n     * @param added         true if the subscriber was added, false if it was removed\n     */\n    event SubscriberUpdated(ILiquidityProtectionEventsSubscriber indexed subscriber, bool added);\n\n    /**\n     * @dev triggered when the minimum amount of network token liquidity to allow minting is updated\n     *\n     * @param prevMin   previous minimum amount of network token liquidity for minting\n     * @param newMin    new minimum amount of network token liquidity for minting\n     */\n    event MinNetworkTokenLiquidityForMintingUpdated(uint256 prevMin, uint256 newMin);\n\n    /**\n     * @dev triggered when the default network token minting limit is updated\n     *\n     * @param prevDefault   previous default network token minting limit\n     * @param newDefault    new default network token minting limit\n     */\n    event DefaultNetworkTokenMintingLimitUpdated(uint256 prevDefault, uint256 newDefault);\n\n    /**\n     * @dev triggered when a pool network token minting limit is updated\n     *\n     * @param poolAnchor    pool anchor\n     * @param prevLimit     previous limit\n     * @param newLimit      new limit\n     */\n    event NetworkTokenMintingLimitUpdated(IConverterAnchor indexed poolAnchor, uint256 prevLimit, uint256 newLimit);\n\n    /**\n     * @dev triggered when the protection delays are updated\n     *\n     * @param prevMinProtectionDelay    previous seconds until the protection starts\n     * @param newMinProtectionDelay     new seconds until the protection starts\n     * @param prevMaxProtectionDelay    previous seconds until full protection\n     * @param newMaxProtectionDelay     new seconds until full protection\n     */\n    event ProtectionDelaysUpdated(\n        uint256 prevMinProtectionDelay,\n        uint256 newMinProtectionDelay,\n        uint256 prevMaxProtectionDelay,\n        uint256 newMaxProtectionDelay\n    );\n\n    /**\n     * @dev triggered when the minimum network token compensation is updated\n     *\n     * @param prevMinNetworkCompensation    previous minimum network token compensation\n     * @param newMinNetworkCompensation     new minimum network token compensation\n     */\n    event MinNetworkCompensationUpdated(uint256 prevMinNetworkCompensation, uint256 newMinNetworkCompensation);\n\n    /**\n     * @dev triggered when the network token lock duration is updated\n     *\n     * @param prevLockDuration  previous network token lock duration, in seconds\n     * @param newLockDuration   new network token lock duration, in seconds\n     */\n    event LockDurationUpdated(uint256 prevLockDuration, uint256 newLockDuration);\n\n    /**\n     * @dev triggered when the maximum deviation of the average rate from the spot rate is updated\n     *\n     * @param prevAverageRateMaxDeviation   previous maximum deviation of the average rate from the spot rate\n     * @param newAverageRateMaxDeviation    new maximum deviation of the average rate from the spot rate\n     */\n    event AverageRateMaxDeviationUpdated(uint32 prevAverageRateMaxDeviation, uint32 newAverageRateMaxDeviation);\n\n    /**\n     * @dev triggered when adding liquidity is disabled or enabled for a given reserve on a given pool\n     *\n     * @param poolAnchor    pool anchor\n     * @param reserveToken  reserve token\n     * @param disabled      true if disabled, false otherwise\n     */\n    event AddLiquidityDisabled(IConverterAnchor indexed poolAnchor, IERC20Token indexed reserveToken, bool disabled);\n\n    /**\n     * @dev initializes a new LiquidityProtectionSettings contract\n     *\n     * @param registry  contract registry\n     * @param token     the network token\n     */\n    constructor(IERC20Token token, IContractRegistry registry)\n        public\n        ContractRegistryClient(registry)\n        validAddress(address(token))\n        notThis(address(token))\n    {\n        // set up administrative roles.\n        _setRoleAdmin(ROLE_OWNER, ROLE_OWNER);\n\n        // allow the deployer to initially govern the contract.\n        _setupRole(ROLE_OWNER, msg.sender);\n\n        _networkToken = token;\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    // error message binary size optimization\n    function _onlyOwner() internal view {\n        require(hasRole(ROLE_OWNER, msg.sender), \"ERR_ACCESS_DENIED\");\n    }\n\n    // ensures that the portion is valid\n    modifier validPortion(uint32 portion) {\n        _validPortion(portion);\n        _;\n    }\n\n    // error message binary size optimization\n    function _validPortion(uint32 portion) internal pure {\n        require(portion > 0 && portion <= PPM_RESOLUTION, \"ERR_INVALID_PORTION\");\n    }\n\n    /**\n     * @dev returns the network token\n     *\n     * @return the network token\n     */\n    function networkToken() external view returns (IERC20Token) {\n        return _networkToken;\n    }\n\n    /**\n     * @dev returns the minimum network token liquidity for minting\n     *\n     * @return the minimum network token liquidity for minting\n     */\n    function minNetworkTokenLiquidityForMinting() external view override returns (uint256) {\n        return _minNetworkTokenLiquidityForMinting;\n    }\n\n    /**\n     * @dev returns the default network token minting limit\n     *\n     * @return the default network token minting limit\n     */\n    function defaultNetworkTokenMintingLimit() external view override returns (uint256) {\n        return _defaultNetworkTokenMintingLimit;\n    }\n\n    /**\n     * @dev returns the network token minting limit for a given pool\n     *\n     * @param poolAnchor    pool anchor\n     * @return the network token minting limit for a given pool\n     */\n    function networkTokenMintingLimits(IConverterAnchor poolAnchor) external view override returns (uint256) {\n        return _networkTokenMintingLimits[poolAnchor];\n    }\n\n    /**\n     * @dev returns the permission of adding liquidity for a given reserve on a given pool\n     *\n     * @param poolAnchor    pool anchor\n     * @param reserveToken  reserve token\n     * @return true if adding liquidity is disabled, false otherwise\n     */\n    function addLiquidityDisabled(IConverterAnchor poolAnchor, IERC20Token reserveToken)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _addLiquidityDisabled[poolAnchor][reserveToken];\n    }\n\n    /**\n     * @dev returns the minimum number of seconds until any protection is in effect\n     *\n     * @return the minimum number of seconds until any protection is in effect\n     */\n    function minProtectionDelay() external view override returns (uint256) {\n        return _minProtectionDelay;\n    }\n\n    /**\n     * @dev returns the maximum number of seconds until full protection is in effect\n     *\n     * @return the maximum number of seconds until full protection is in effect\n     */\n    function maxProtectionDelay() external view override returns (uint256) {\n        return _maxProtectionDelay;\n    }\n\n    /**\n     * @dev returns the minimum amount of network tokens that the system can mint as compensation for base token losses\n     *\n     * @return the minimum amount of network tokens that the system can mint as compensation for base token losses\n     */\n    function minNetworkCompensation() external view override returns (uint256) {\n        return _minNetworkCompensation;\n    }\n\n    /**\n     * @dev returns the number of seconds from liquidation to full network token release\n     *\n     * @return the number of seconds from liquidation to full network token release\n     */\n    function lockDuration() external view override returns (uint256) {\n        return _lockDuration;\n    }\n\n    /**\n     * @dev returns the maximum deviation of the average rate from the spot rate\n     *\n     * @return the maximum deviation of the average rate from the spot rate\n     */\n    function averageRateMaxDeviation() external view override returns (uint32) {\n        return _averageRateMaxDeviation;\n    }\n\n    /**\n     * @dev adds a pool to the whitelist\n     * can only be called by the contract owner\n     *\n     * @param poolAnchor    pool anchor\n     */\n    function addPoolToWhitelist(IConverterAnchor poolAnchor)\n        external\n        onlyOwner\n        validAddress(address(poolAnchor))\n        notThis(address(poolAnchor))\n    {\n        require(_poolWhitelist.add(address(poolAnchor)), \"ERR_POOL_ALREADY_WHITELISTED\");\n\n        emit PoolWhitelistUpdated(poolAnchor, true);\n    }\n\n    /**\n     * @dev removes a pool from the whitelist\n     * can only be called by the contract owner\n     *\n     * @param poolAnchor    pool anchor\n     */\n    function removePoolFromWhitelist(IConverterAnchor poolAnchor)\n        external\n        onlyOwner\n        validAddress(address(poolAnchor))\n        notThis(address(poolAnchor))\n    {\n        require(_poolWhitelist.remove(address(poolAnchor)), \"ERR_POOL_NOT_WHITELISTED\");\n\n        emit PoolWhitelistUpdated(poolAnchor, false);\n    }\n\n    /**\n     * @dev checks whether a given pool is whitelisted\n     *\n     * @param poolAnchor    pool anchor\n     * @return true if the given pool is whitelisted, false otherwise\n     */\n    function isPoolWhitelisted(IConverterAnchor poolAnchor) external view override returns (bool) {\n        return _poolWhitelist.contains(address(poolAnchor));\n    }\n\n    /**\n     * @dev returns pools whitelist\n     *\n     * @return pools whitelist\n     */\n    function poolWhitelist() external view override returns (address[] memory) {\n        uint256 length = _poolWhitelist.length();\n        address[] memory list = new address[](length);\n        for (uint256 i = 0; i < length; i++) {\n            list[i] = _poolWhitelist.at(i);\n        }\n        return list;\n    }\n\n    /**\n     * @dev adds a subscriber\n     * can only be called by the contract owner\n     *\n     * @param subscriber    subscriber address\n     */\n    function addSubscriber(ILiquidityProtectionEventsSubscriber subscriber)\n        external\n        onlyOwner\n        validAddress(address(subscriber))\n        notThis(address(subscriber))\n    {\n        require(_subscribers.add(address(subscriber)), \"ERR_SUBSCRIBER_ALREADY_SET\");\n\n        emit SubscriberUpdated(subscriber, true);\n    }\n\n    /**\n     * @dev removes a subscriber\n     * can only be called by the contract owner\n     *\n     * @param subscriber    subscriber address\n     */\n    function removeSubscriber(ILiquidityProtectionEventsSubscriber subscriber)\n        external\n        onlyOwner\n        validAddress(address(subscriber))\n        notThis(address(subscriber))\n    {\n        require(_subscribers.remove(address(subscriber)), \"ERR_INVALID_SUBSCRIBER\");\n\n        emit SubscriberUpdated(subscriber, false);\n    }\n\n    /**\n     * @dev returns subscribers list\n     *\n     * @return subscribers list\n     */\n    function subscribers() external view override returns (address[] memory) {\n        uint256 length = _subscribers.length();\n        address[] memory list = new address[](length);\n        for (uint256 i = 0; i < length; i++) {\n            list[i] = _subscribers.at(i);\n        }\n        return list;\n    }\n\n    /**\n     * @dev updates the minimum amount of network token liquidity to allow minting\n     * can only be called by the contract owner\n     *\n     * @param amount   the minimum amount of network token liquidity to allow minting\n     */\n    function setMinNetworkTokenLiquidityForMinting(uint256 amount) external onlyOwner() {\n        emit MinNetworkTokenLiquidityForMintingUpdated(_minNetworkTokenLiquidityForMinting, amount);\n\n        _minNetworkTokenLiquidityForMinting = amount;\n    }\n\n    /**\n     * @dev updates the default amount of network token that the system can mint into each pool\n     * can only be called by the contract owner\n     *\n     * @param amount    the default amount of network token that the system can mint into each pool\n     */\n    function setDefaultNetworkTokenMintingLimit(uint256 amount) external onlyOwner() {\n        emit DefaultNetworkTokenMintingLimitUpdated(_defaultNetworkTokenMintingLimit, amount);\n\n        _defaultNetworkTokenMintingLimit = amount;\n    }\n\n    /**\n     * @dev updates the amount of network tokens that the system can mint into a specific pool\n     * can only be called by the contract owner\n     *\n     * @param poolAnchor    pool anchor\n     * @param amount        the amount of network tokens that the system can mint into a specific pool\n     */\n    function setNetworkTokenMintingLimit(IConverterAnchor poolAnchor, uint256 amount)\n        external\n        onlyOwner()\n        validAddress(address(poolAnchor))\n    {\n        emit NetworkTokenMintingLimitUpdated(poolAnchor, _networkTokenMintingLimits[poolAnchor], amount);\n\n        _networkTokenMintingLimits[poolAnchor] = amount;\n    }\n\n    /**\n     * @dev updates the protection delays\n     * can only be called by the contract owner\n     *\n     * @param minDelay   seconds until the protection starts\n     * @param maxDelay   seconds until full protection\n     */\n    function setProtectionDelays(uint256 minDelay, uint256 maxDelay) external onlyOwner() {\n        require(minDelay < maxDelay, \"ERR_INVALID_PROTECTION_DELAY\");\n\n        emit ProtectionDelaysUpdated(_minProtectionDelay, minDelay, _maxProtectionDelay, maxDelay);\n\n        _minProtectionDelay = minDelay;\n        _maxProtectionDelay = maxDelay;\n    }\n\n    /**\n     * @dev updates the minimum amount of network token compensation\n     * can only be called by the contract owner\n     *\n     * @param amount    the minimum amount of network token compensation\n     */\n    function setMinNetworkCompensation(uint256 amount) external onlyOwner() {\n        emit MinNetworkCompensationUpdated(_minNetworkCompensation, amount);\n\n        _minNetworkCompensation = amount;\n    }\n\n    /**\n     * @dev updates the network token lock duration\n     * can only be called by the contract owner\n     *\n     * @param duration  network token lock duration, in seconds\n     */\n    function setLockDuration(uint256 duration) external onlyOwner() {\n        emit LockDurationUpdated(_lockDuration, duration);\n\n        _lockDuration = duration;\n    }\n\n    /**\n     * @dev sets the maximum deviation of the average rate from the spot rate\n     * can only be called by the contract owner\n     *\n     * @param deviation maximum deviation of the average rate from the spot rate\n     */\n    function setAverageRateMaxDeviation(uint32 deviation) external onlyOwner() validPortion(deviation) {\n        emit AverageRateMaxDeviationUpdated(_averageRateMaxDeviation, deviation);\n\n        _averageRateMaxDeviation = deviation;\n    }\n\n    /**\n     * @dev disables or enables adding liquidity for a given reserve on a given pool\n     * can only be called by the contract owner\n     *\n     * @param poolAnchor    pool anchor\n     * @param reserveToken  reserve token\n     * @param disable       true to disable, false otherwise\n     */\n    function disableAddLiquidity(\n        IConverterAnchor poolAnchor,\n        IERC20Token reserveToken,\n        bool disable\n    ) external onlyOwner() {\n        emit AddLiquidityDisabled(poolAnchor, reserveToken, disable);\n\n        _addLiquidityDisabled[poolAnchor][reserveToken] = disable;\n    }\n\n    /**\n     * @dev checks if protection is supported for the given pool\n     * only standard pools are supported (2 reserves, 50%/50% weights)\n     * note that the pool should still be whitelisted\n     *\n     * @param poolAnchor    anchor of the pool\n     * @return true if the pool is supported, false otherwise\n     */\n    function isPoolSupported(IConverterAnchor poolAnchor) external view override returns (bool) {\n        IERC20Token tmpNetworkToken = _networkToken;\n\n        // verify that the pool exists in the registry\n        IConverterRegistry converterRegistry = IConverterRegistry(addressOf(CONVERTER_REGISTRY));\n        require(converterRegistry.isAnchor(address(poolAnchor)), \"ERR_INVALID_ANCHOR\");\n\n        // get the converter\n        IConverter converter = IConverter(payable(poolAnchor.owner()));\n\n        // verify that the converter has 2 reserves\n        if (converter.connectorTokenCount() != 2) {\n            return false;\n        }\n\n        // verify that one of the reserves is the network token\n        IERC20Token reserve0Token = converter.connectorTokens(0);\n        IERC20Token reserve1Token = converter.connectorTokens(1);\n        if (reserve0Token != tmpNetworkToken && reserve1Token != tmpNetworkToken) {\n            return false;\n        }\n\n        // verify that the reserve weights are exactly 50%/50%\n        if (\n            converterReserveWeight(converter, reserve0Token) != PPM_RESOLUTION / 2 ||\n            converterReserveWeight(converter, reserve1Token) != PPM_RESOLUTION / 2\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // utility to get the reserve weight (including from older converters that don't support the new converterReserveWeight function)\n    function converterReserveWeight(IConverter converter, IERC20Token reserveToken) private view returns (uint32) {\n        (, uint32 weight, , , ) = converter.connectors(reserveToken);\n        return weight;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IContractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Token\",\"name\":\"reserveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"AddLiquidityDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevAverageRateMaxDeviation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newAverageRateMaxDeviation\",\"type\":\"uint32\"}],\"name\":\"AverageRateMaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevDefault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefault\",\"type\":\"uint256\"}],\"name\":\"DefaultNetworkTokenMintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockDuration\",\"type\":\"uint256\"}],\"name\":\"LockDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMinNetworkCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNetworkCompensation\",\"type\":\"uint256\"}],\"name\":\"MinNetworkCompensationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"MinNetworkTokenLiquidityForMintingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"NetworkTokenMintingLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PoolWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMinProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaxProtectionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxProtectionDelay\",\"type\":\"uint256\"}],\"name\":\"ProtectionDelaysUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"SubscriberUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"reserveToken\",\"type\":\"address\"}],\"name\":\"addLiquidityDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"}],\"name\":\"addPoolToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"addSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRateMaxDeviation\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultNetworkTokenMintingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Token\",\"name\":\"reserveToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"}],\"name\":\"isPoolSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"}],\"name\":\"isPoolWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProtectionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNetworkCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNetworkTokenLiquidityForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProtectionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkToken\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"}],\"name\":\"networkTokenMintingLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"}],\"name\":\"removePoolFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityProtectionEventsSubscriber\",\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"removeSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"deviation\",\"type\":\"uint32\"}],\"name\":\"setAverageRateMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDefaultNetworkTokenMintingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinNetworkCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinNetworkTokenLiquidityForMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConverterAnchor\",\"name\":\"poolAnchor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNetworkTokenMintingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelay\",\"type\":\"uint256\"}],\"name\":\"setProtectionDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityProtectionSettings","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}