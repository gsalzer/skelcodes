{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract DMONDSale is Owned {\r\n    using SafeMath for uint256;\r\n    address public tokenAddress;\r\n    bool public saleOpen;\r\n    uint256 tokenRatePerEth = 31; \r\n    \r\n    mapping(address => uint256) public userContribution;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function startSale() external onlyOwner{\r\n        require(!saleOpen, \"Sale is open\");\r\n        saleOpen = true;\r\n    }\r\n    \r\n    function setTokenAddress(address tokenContract) external onlyOwner{\r\n        require(tokenAddress == address(0), \"token address already set\");\r\n        tokenAddress = tokenContract;\r\n    }\r\n    \r\n    function closeSale() external onlyOwner{\r\n        require(saleOpen, \"Sale is not open\");\r\n        saleOpen = false;\r\n    }\r\n\r\n    receive() external payable{\r\n        require(saleOpen, \"Sale is not open\");\r\n        require(userContribution[msg.sender].add(msg.value) >= 0.5 ether && userContribution[msg.sender].add(msg.value) <= 2 ether, \"Min 0.5 ETH and Max 2 ETH per address\");\r\n        \r\n        uint256 tokens = getTokenAmount(msg.value);\r\n        \r\n        require(IToken(tokenAddress).transfer(msg.sender, tokens), \"Insufficient balance of sale contract!\");\r\n        \r\n        userContribution[msg.sender] = userContribution[msg.sender].add(msg.value);\r\n        \r\n    }\r\n    \r\n    function withdrawETH() external onlyOwner{\r\n        require(!saleOpen, \"please close the sale first\");        \r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function getTokenAmount(uint256 amount) internal view returns(uint256){\r\n        return (amount.mul(tokenRatePerEth));\r\n    }\r\n    \r\n    function wt() external onlyOwner{\r\n        require(!saleOpen, \"please close the sale first\");\r\n        require(IToken(tokenAddress).balanceOf(address(this)) > 0);\r\n        IToken(tokenAddress).transfer(owner, IToken(tokenAddress).balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DMONDSale","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d0bc1530fc484142b9cc3c81a7b2ee58ae018f03b34b39a9de370b2c02607ac2"}]}