{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/IDerivativeSpecification.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Derivative Specification interface\r\n/// @notice Immutable collection of derivative attributes\r\n/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\r\ninterface IDerivativeSpecification {\r\n\r\n    /// @notice Proof of a derivative specification\r\n    /// @dev Verifies that contract is a derivative specification\r\n    /// @return true if contract is a derivative specification\r\n    function isDerivativeSpecification() external pure returns(bool);\r\n\r\n    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\r\n    /// between the start and the end of the Live period\r\n    /// @dev Should be resolved through OracleRegistry contract\r\n    /// @return oracle symbols\r\n    function oracleSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    /// finds the value closest to a given timestamp\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbols\r\n    function oracleIteratorSymbols() external view returns (bytes32[] memory);\r\n\r\n    /// @notice Type of collateral that users submit to mint the derivative\r\n    /// @dev Should be resolved through CollateralTokenRegistry contract\r\n    /// @return collateral token symbol\r\n    function collateralTokenSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\r\n    /// and the initial collateral split to the final collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split symbol\r\n    function collateralSplitSymbol() external view returns (bytes32);\r\n\r\n    /// @notice Lifecycle parameter that define the length of the derivative's Minting period.\r\n    /// @dev Set in seconds\r\n    /// @return minting period value\r\n    function mintingPeriod() external view returns (uint);\r\n\r\n    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\r\n    /// @dev Set in seconds\r\n    /// @return live period value\r\n    function livePeriod() external view returns (uint);\r\n\r\n    /// @notice Parameter that determines starting nominal value of primary asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\r\n    /// @return primary nominal value\r\n    function primaryNominalValue() external view returns (uint);\r\n\r\n    /// @notice Parameter that determines starting nominal value of complement asset\r\n    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\r\n    /// @return complement nominal value\r\n    function complementNominalValue() external view returns (uint);\r\n\r\n    /// @notice Minting fee rate due to the author of the derivative specification.\r\n    /// @dev Percentage fee multiplied by 10 ^ 12\r\n    /// @return author fee\r\n    function authorFee() external view returns (uint);\r\n\r\n    /// @notice Symbol of the derivative\r\n    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\r\n    /// @return derivative specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Return optional long name of the derivative\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return long name\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice Optional URI to the derivative specs\r\n    /// @dev Isn't used directly in the protocol\r\n    /// @return URI to the derivative specs\r\n    function baseURI() external view returns (string memory);\r\n\r\n    /// @notice Derivative spec author\r\n    /// @dev Used to set and receive author's fee\r\n    /// @return address of the author\r\n    function author() external view returns (address);\r\n}\r\n\r\n// File: contracts/registries/IAddressRegistry.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IAddressRegistry {\r\n    function get(bytes32 _key) external view returns(address);\r\n    function set(bytes32 _key, address _value) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/tokens/EIP20NonStandardInterface.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title EIP20NonStandardInterface\r\n/// @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n/// See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\ninterface EIP20NonStandardInterface {\r\n    /// @notice Get the total number of tokens in circulation\r\n    /// @return The supply of tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of the specified address\r\n    /// @param owner The address from which the balance will be retrieved\r\n    /// @return balance The balance\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    //\r\n    // !!!!!!!!!!!!!!\r\n    // !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    // !!!!!!!!!!!!!!\r\n    //\r\n\r\n    /// @notice Transfer `amount` tokens from `src` to `dst`\r\n    /// @param src The address of the source account\r\n    /// @param dst The address of the destination account\r\n    /// @param amount The number of tokens to transfer\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /// @notice Approve `spender` to transfer up to `amount` from `src`\r\n    /// @dev This will overwrite the approval amount for `spender`\r\n    ///  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @param amount The number of tokens that are approved\r\n    /// @return success Whether or not the approval succeeded\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /// @notice Get the current allowance from `owner` for `spender`\r\n    /// @param owner The address of the account which owns the tokens to be spent\r\n    /// @param spender The address of the account which may transfer tokens\r\n    /// @return remaining The number of tokens allowed to be spent\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n// File: contracts/collateralSplits/ICollateralSplit.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Collateral Split interface\r\n/// @notice Contains mathematical functions used to calculate relative claim\r\n/// on collateral of primary and complement assets after settlement.\r\n/// @dev Created independently from specification and published to the CollateralSplitRegistry\r\ninterface ICollateralSplit {\r\n\r\n    /// @notice Proof of collateral split contract\r\n    /// @dev Verifies that contract is a collateral split contract\r\n    /// @return true if contract is a collateral split contract\r\n    function isCollateralSplit() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the collateral split\r\n    /// @dev Should be resolved through CollateralSplitRegistry contract\r\n    /// @return collateral split specification symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Calcs primary asset class' share of collateral at settlement.\r\n    /// @dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12\r\n    /// @param _underlyingStartRoundHints specify for each oracle round of the start of Live period\r\n    /// @param _underlyingEndRoundHints specify for each oracle round of the end of Live period\r\n    /// @return _split primary asset class' share of collateral at settlement\r\n    /// @return _underlyingStarts underlying values in the start of Live period\r\n    /// @return _underlyingEnds underlying values in the end of Live period\r\n    function split(\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        uint _liveTime,\r\n        uint _settleTime,\r\n        uint[] memory _underlyingStartRoundHints,\r\n        uint[] memory _underlyingEndRoundHints)\r\n    external view returns(uint _split, int[] memory _underlyingStarts, int[] memory _underlyingEnds);\r\n}\r\n\r\n// File: contracts/tokens/IERC20MintedBurnable.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\ninterface IERC20MintedBurnable is IERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/tokens/ITokenBuilder.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ninterface ITokenBuilder {\r\n    function isTokenBuilder() external pure returns(bool);\r\n    function buildTokens(IDerivativeSpecification derivative, uint settlement, address _collateralToken) external returns(IERC20MintedBurnable, IERC20MintedBurnable);\r\n}\r\n\r\n// File: contracts/IFeeLogger.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IFeeLogger {\r\n    function log(address _liquidityProvider, address _collateral, uint _protocolFee, address _author) external;\r\n}\r\n\r\n// File: contracts/IPausableVault.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IPausableVault {\r\n    function pause() external;\r\n    function unpause() external;\r\n}\r\n\r\n// File: contracts/IVaultBuilder.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\ninterface IVaultBuilder {\r\n    function buildVault(\r\n        uint _initializationTime,\r\n        uint _protocolFee,\r\n        address _feeWallet,\r\n        address _derivativeSpecification,\r\n        address _collateralToken,\r\n        address[] memory _oracles,\r\n        address[] memory _oracleIterators,\r\n        address _collateralSplit,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint _authorFeeLimit,\r\n        uint _settlementDelay\r\n    ) external returns(address);\r\n}\r\n\r\n// File: contracts/VaultFactory.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n/// @title Vault Factory implementation contract\r\n/// @notice Creates new vaults and registers them in internal storage\r\ncontract VaultFactory is OwnableUpgradeSafe {\r\n    address[] internal _vaults;\r\n\r\n    IAddressRegistry public derivativeSpecificationRegistry;\r\n    IAddressRegistry public oracleRegistry;\r\n    IAddressRegistry public collateralTokenRegistry;\r\n    IAddressRegistry public collateralSplitRegistry;\r\n    address public tokenBuilder;\r\n    address public feeLogger;\r\n\r\n    /// @notice protocol fee multiplied by 10 ^ 12\r\n    uint public protocolFee;\r\n    /// @notice protocol fee receiving wallet\r\n    address public feeWallet;\r\n    /// @notice author above limit fee multiplied by 10 ^ 12\r\n    uint public authorFeeLimit;\r\n\r\n    IVaultBuilder public vaultBuilder;\r\n    IAddressRegistry public oracleIteratorRegistry;\r\n\r\n    /// @notice redeem function can only be called after the end of the Live period + delay\r\n    uint public settlementDelay;\r\n\r\n    event VaultCreated(bytes32 indexed derivativeSymbol, address vault, address specification);\r\n\r\n    /// @notice Initializes vault factory contract storage\r\n    /// @dev Used only once when vault factory is created for the first time\r\n    function initialize(\r\n        address _derivativeSpecificationRegistry,\r\n        address _oracleRegistry,\r\n        address _oracleIteratorRegistry,\r\n        address _collateralTokenRegistry,\r\n        address _collateralSplitRegistry,\r\n        address _tokenBuilder,\r\n        address _feeLogger,\r\n        uint _protocolFee,\r\n        address _feeWallet,\r\n        uint _authorFeeLimit,\r\n        address _vaultBuilder,\r\n        uint _settlementDelay\r\n    ) external initializer {\r\n\r\n        __Ownable_init();\r\n\r\n        setDerivativeSpecificationRegistry(_derivativeSpecificationRegistry);\r\n        setOracleRegistry(_oracleRegistry);\r\n        setOracleIteratorRegistry(_oracleIteratorRegistry);\r\n        setCollateralTokenRegistry(_collateralTokenRegistry);\r\n        setCollateralSplitRegistry(_collateralSplitRegistry);\r\n\r\n        setTokenBuilder(_tokenBuilder);\r\n        setFeeLogger(_feeLogger);\r\n        setVaultBuilder(_vaultBuilder);\r\n\r\n        setSettlementDelay(_settlementDelay);\r\n\r\n        protocolFee = _protocolFee;\r\n        authorFeeLimit = _authorFeeLimit;\r\n\r\n        require(_feeWallet != address(0), \"Fee wallet\");\r\n        feeWallet = _feeWallet;\r\n    }\r\n\r\n    /// @notice Creates a new vault based on derivative specification symbol and initialization timestamp\r\n    /// @dev Initialization timestamp allows to target a specific start time for Live period\r\n    /// @param _derivativeSymbolHash a symbol hash which resolves to the derivative specification\r\n    /// @param _initializationTime vault initialization timestamp\r\n    function createVault(bytes32 _derivativeSymbolHash, uint _initializationTime) external {\r\n        IDerivativeSpecification derivativeSpecification = IDerivativeSpecification(\r\n            derivativeSpecificationRegistry.get(_derivativeSymbolHash));\r\n        require(address(derivativeSpecification) != address(0), \"Specification is absent\");\r\n\r\n        address collateralToken = collateralTokenRegistry.get(derivativeSpecification.collateralTokenSymbol());\r\n        address collateralSplit = collateralSplitRegistry.get(derivativeSpecification.collateralSplitSymbol());\r\n\r\n        bytes32[] memory oracleSymbols = derivativeSpecification.oracleSymbols();\r\n        bytes32[] memory oracleIteratorSymbols = derivativeSpecification.oracleIteratorSymbols();\r\n        require(oracleSymbols.length == oracleIteratorSymbols.length, \"Oracles and iterators length\");\r\n\r\n        address[] memory oracles = new address[](oracleSymbols.length);\r\n        address[] memory oracleIterators = new address[](oracleIteratorSymbols.length);\r\n        for(uint i = 0; i < oracleSymbols.length; i++) {\r\n            address oracle = oracleRegistry.get(oracleSymbols[i]);\r\n            require(address(oracle) != address(0), \"Oracle is absent\");\r\n            oracles[i] = oracle;\r\n\r\n            address oracleIterator = oracleIteratorRegistry.get(oracleIteratorSymbols[i]);\r\n            require(address(oracleIterator) != address(0), \"OracleIterator is absent\");\r\n            oracleIterators[i] = oracleIterator;\r\n        }\r\n\r\n        require(_initializationTime > 0, \"Zero initialization time\");\r\n\r\n        address vault = vaultBuilder.buildVault(\r\n            _initializationTime,\r\n            protocolFee,\r\n            feeWallet,\r\n            address(derivativeSpecification),\r\n            collateralToken,\r\n            oracles,\r\n            oracleIterators,\r\n            collateralSplit,\r\n            tokenBuilder,\r\n            feeLogger,\r\n            authorFeeLimit,\r\n            settlementDelay\r\n        );\r\n        emit VaultCreated(_derivativeSymbolHash, vault, address(derivativeSpecification));\r\n        _vaults.push(vault);\r\n    }\r\n\r\n    function setProtocolFee(uint _protocolFee) external onlyOwner {\r\n        protocolFee = _protocolFee;\r\n    }\r\n\r\n    function setAuthorFeeLimit(uint _authorFeeLimit) external onlyOwner {\r\n        authorFeeLimit = _authorFeeLimit;\r\n    }\r\n\r\n    function setTokenBuilder(address _tokenBuilder) public onlyOwner {\r\n        require(_tokenBuilder != address(0), \"Token builder\");\r\n        tokenBuilder = _tokenBuilder;\r\n    }\r\n\r\n    function setFeeLogger(address _feeLogger) public onlyOwner {\r\n        require(_feeLogger != address(0), \"Fee logger\");\r\n        feeLogger = _feeLogger;\r\n    }\r\n\r\n    function setVaultBuilder(address _vaultBuilder) public onlyOwner {\r\n        require(_vaultBuilder != address(0), \"Vault builder\");\r\n        vaultBuilder = IVaultBuilder(_vaultBuilder);\r\n    }\r\n\r\n    function setSettlementDelay(uint _settlementDelay) public onlyOwner {\r\n        settlementDelay = _settlementDelay;\r\n    }\r\n\r\n    function setDerivativeSpecificationRegistry(address _derivativeSpecificationRegistry) public onlyOwner {\r\n        require(_derivativeSpecificationRegistry != address(0), \"Derivative specification registry\");\r\n        derivativeSpecificationRegistry = IAddressRegistry(_derivativeSpecificationRegistry);\r\n    }\r\n\r\n    function setOracleRegistry(address _oracleRegistry) public onlyOwner {\r\n        require(_oracleRegistry != address(0), \"Oracle registry\");\r\n        oracleRegistry = IAddressRegistry(_oracleRegistry);\r\n    }\r\n\r\n    function setOracleIteratorRegistry(address _oracleIteratorRegistry) public onlyOwner {\r\n        require(_oracleIteratorRegistry != address(0), \"Oracle iterator registry\");\r\n        oracleIteratorRegistry = IAddressRegistry(_oracleIteratorRegistry);\r\n    }\r\n\r\n    function setCollateralTokenRegistry(address _collateralTokenRegistry) public onlyOwner {\r\n        require(_collateralTokenRegistry != address(0), \"Collateral token registry\");\r\n        collateralTokenRegistry = IAddressRegistry(_collateralTokenRegistry);\r\n    }\r\n\r\n    function setCollateralSplitRegistry(address _collateralSplitRegistry) public onlyOwner {\r\n        require(_collateralSplitRegistry != address(0), \"Collateral split registry\");\r\n        collateralSplitRegistry = IAddressRegistry(_collateralSplitRegistry);\r\n    }\r\n\r\n    function pauseVault(address _vault) public onlyOwner {\r\n        IPausableVault(_vault).pause();\r\n    }\r\n\r\n    function unpauseVault(address _vault) public onlyOwner {\r\n        IPausableVault(_vault).unpause();\r\n    }\r\n\r\n    function setDerivativeSpecification(bytes32 _key, address _value) external {\r\n        derivativeSpecificationRegistry.set(_key, _value);\r\n    }\r\n\r\n    function setOracle(bytes32 _key, address _value) external {\r\n        oracleRegistry.set(_key, _value);\r\n    }\r\n\r\n    function setOracleIterator(bytes32 _key, address _value) external {\r\n        oracleIteratorRegistry.set(_key, _value);\r\n    }\r\n\r\n    function setCollateralToken(bytes32 _key, address _value) external {\r\n        collateralTokenRegistry.set(_key, _value);\r\n    }\r\n\r\n    function setCollateralSplit(bytes32 _key, address _value) external {\r\n        collateralSplitRegistry.set(_key, _value);\r\n    }\r\n\r\n    /// @notice Returns vault based on internal index\r\n    /// @param _index internal vault index\r\n    /// @return vault address\r\n    function getVault(uint _index) external view returns(address) {\r\n        return _vaults[_index];\r\n    }\r\n\r\n    /// @notice Get last created vault index\r\n    /// @return last created vault index\r\n    function getLastVaultIndex() external view returns(uint) {\r\n        return _vaults.length - 1;\r\n    }\r\n\r\n    /// @notice Get all previously created vaults\r\n    /// @return all previously created vaults\r\n    function getAllVaults() external view returns(address[] memory) {\r\n        return _vaults;\r\n    }\r\n\r\n    uint256[47] private __gap;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"derivativeSymbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"specification\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralSplitRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTokenRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_derivativeSymbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_initializationTime\",\"type\":\"uint256\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeSpecificationRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLogger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastVaultIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivativeSpecificationRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleIteratorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralTokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralSplitRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBuilder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeLogger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_authorFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vaultBuilder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_settlementDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleIteratorRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_authorFeeLimit\",\"type\":\"uint256\"}],\"name\":\"setAuthorFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setCollateralSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralSplitRegistry\",\"type\":\"address\"}],\"name\":\"setCollateralSplitRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralTokenRegistry\",\"type\":\"address\"}],\"name\":\"setCollateralTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setDerivativeSpecification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivativeSpecificationRegistry\",\"type\":\"address\"}],\"name\":\"setDerivativeSpecificationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeLogger\",\"type\":\"address\"}],\"name\":\"setFeeLogger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setOracleIterator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleIteratorRegistry\",\"type\":\"address\"}],\"name\":\"setOracleIteratorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"}],\"name\":\"setOracleRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementDelay\",\"type\":\"uint256\"}],\"name\":\"setSettlementDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBuilder\",\"type\":\"address\"}],\"name\":\"setTokenBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultBuilder\",\"type\":\"address\"}],\"name\":\"setVaultBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuilder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuilder\",\"outputs\":[{\"internalType\":\"contract IVaultBuilder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9094194e9b5d570727dff76c93846d00e73afdbb4913a7feefdf6a5588f1f4c0"}]}