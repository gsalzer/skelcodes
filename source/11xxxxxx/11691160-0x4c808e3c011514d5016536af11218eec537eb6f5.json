{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/EvmUtil.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\nlibrary EvmUtil {\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/governance/governors/ITimelockInterface.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n *\r\n * Copyright 2020 Compound Labs, Inc.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\r\n * following conditions are met:\r\n * 1.   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\r\n *      disclaimer.\r\n * 2.   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\r\n *      following disclaimer in the documentation and/or other materials provided with the distribution.\r\n * 3.   Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote\r\n *      products derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\r\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npragma solidity ^0.5.13;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITimelockInterface {\r\n\r\n    function delay() external view returns (uint);\r\n\r\n    function GRACE_PERIOD() external view returns (uint);\r\n\r\n    function acceptAdmin() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\n// File: contracts/governance/governors/GovernorAlphaData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n *\r\n * Copyright 2020 Compound Labs, Inc.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\r\n * following conditions are met:\r\n * 1.   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\r\n *      disclaimer.\r\n * 2.   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\r\n *      following disclaimer in the documentation and/or other materials provided with the distribution.\r\n * 3.   Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote\r\n *      products derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\r\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ncontract GovernorAlphaData {\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string title, string description);\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint id, uint eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint id);\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint id;\r\n\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint eta;\r\n\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint[] values;\r\n\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n\r\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint startBlock;\r\n\r\n        /// @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint endBlock;\r\n\r\n        /// @notice Current number of votes in favor of this proposal\r\n        uint forVotes;\r\n\r\n        /// @notice Current number of votes in opposition to this proposal\r\n        uint againstVotes;\r\n\r\n        /// @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n\r\n        /// @notice Receipts of ballots for the entire set of voters\r\n        mapping(address => Receipt) receipts;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        /// @notice Whether or not a vote has been cast\r\n        bool hasVoted;\r\n\r\n        /// @notice Whether or not the voter supports the proposal\r\n        bool support;\r\n\r\n        /// @notice The number of votes the voter had, which were cast\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/governors/GovernorAlpha.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n *\r\n * Copyright 2020 Compound Labs, Inc.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\r\n * following conditions are met:\r\n * 1.   Redistributions of source code must retain the above copyright notice, this list of conditions and the following\r\n *      disclaimer.\r\n * 2.   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\r\n *      following disclaimer in the documentation and/or other materials provided with the distribution.\r\n * 3.   Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote\r\n *      products derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\r\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * This contract is mainly based on Compound's Governor Alpha contract. Attribution to Compound Labs as the original\r\n * creator of the contract can be seen above.\r\n *\r\n * Changes made to the original contract include slight name changes, adding a `title` field to the Proposal struct,\r\n * and minor data type adjustments to account for DMG using more bits for storage (128 instead of 96).\r\n */\r\ncontract GovernorAlpha is GovernorAlphaData {\r\n    /// @notice The name of this contract\r\n    string public constant name = \"DMM Governor Alpha\";\r\n\r\n    /// @notice The address of the DMM Protocol Timelock\r\n    ITimelockInterface public timelock;\r\n\r\n    /// @notice The address of the DMG governance token\r\n    IDMGToken public dmg;\r\n\r\n    /// @notice The address of the Governor Guardian\r\n    address public guardian;\r\n\r\n    /// @notice The total number of proposals\r\n    uint public proposalCount;\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    uint public quorumVotes;\r\n\r\n    /// @notice The minimum number of votes needed to create a proposal\r\n    uint public proposalThreshold;\r\n\r\n    /// @notice The duration of voting on a proposal, in blocks\r\n    uint public votingPeriod;\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping(address => uint) public latestProposalIds;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\r\n\r\n    constructor(\r\n        address dmg_,\r\n        address guardian_\r\n    ) public {\r\n        dmg = IDMGToken(dmg_);\r\n        guardian = guardian_;\r\n        quorumVotes = 500_000e18;\r\n        proposalThreshold = 100_000e18;\r\n\r\n        // ~3 days in blocks (assuming 15s blocks)\r\n        votingPeriod = 17280;\r\n    }\r\n\r\n    function initializeTimelock(\r\n        address timelock_\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::setTimelock: Caller must be guardian\"\r\n        );\r\n        require(\r\n            address(timelock) == address(0x0),\r\n            \"GovernorAlpha::setTimelock: timelock must not be initialized yet\"\r\n        );\r\n\r\n        timelock = ITimelockInterface(timelock_);\r\n    }\r\n\r\n    function setQuorumVotes(\r\n        uint quorumVotes_\r\n    ) public {\r\n        require(\r\n            msg.sender == address(timelock),\r\n            \"GovernorAlpha::setQuorumVotes: invalid sender\"\r\n        );\r\n        quorumVotes = quorumVotes_;\r\n    }\r\n\r\n    function setProposalThreshold(\r\n        uint proposalThreshold_\r\n    ) public {\r\n        require(\r\n            msg.sender == address(timelock),\r\n            \"GovernorAlpha::setProposalThreshold: invalid sender\"\r\n        );\r\n        proposalThreshold = proposalThreshold_;\r\n    }\r\n\r\n    /**\r\n     * @return  The maximum number of actions that can be included in a proposal\r\n     */\r\n    function proposalMaxOperations() public pure returns (uint) {\r\n        // 10 actions\r\n        return 10;\r\n    }\r\n\r\n    /**\r\n     * @return  The delay (represented as number of blocks) before voting on a proposal may take place, once proposed\r\n     */\r\n    function votingDelay() public pure returns (uint) {\r\n        // 1 block\r\n        return 1;\r\n    }\r\n\r\n    function setVotingPeriod(\r\n        uint votingPeriod_\r\n    ) public {\r\n        require(\r\n            msg.sender == address(timelock),\r\n            \"GovernorAlpha::setVotingPeriod: invalid sender\"\r\n        );\r\n        require(\r\n            votingPeriod_ >= 5760,\r\n            \"GovernorAlpha::setVotingPeriod: new voting period must exceed minimum\"\r\n        );\r\n\r\n        // The minimum number of blocks for a vote is ~1 day (assuming 15s blocks)\r\n        votingPeriod = votingPeriod_;\r\n    }\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory title,\r\n        string memory description\r\n    ) public returns (uint) {\r\n        require(\r\n            msg.sender == guardian || _getVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold,\r\n            \"GovernorAlpha::propose: proposer votes below proposal threshold\"\r\n        );\r\n        require(\r\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\r\n            \"GovernorAlpha::propose: proposal function information arity mismatch\"\r\n        );\r\n        require(\r\n            targets.length != 0,\r\n            \"GovernorAlpha::propose: must provide actions\"\r\n        );\r\n        require(\r\n            targets.length <= proposalMaxOperations(),\r\n            \"GovernorAlpha::propose: too many actions\"\r\n        );\r\n\r\n        uint latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n            ProposalState proposersLatestProposalState = state(latestProposalId);\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Active,\r\n                \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Pending,\r\n                \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"\r\n            );\r\n        }\r\n\r\n        uint startBlock = add256(block.number, votingDelay());\r\n        uint endBlock = add256(startBlock, votingPeriod);\r\n\r\n        proposalCount++;\r\n        Proposal memory newProposal = Proposal({\r\n        id : proposalCount,\r\n        proposer : msg.sender,\r\n        eta : 0,\r\n        targets : targets,\r\n        values : values,\r\n        signatures : signatures,\r\n        calldatas : calldatas,\r\n        startBlock : startBlock,\r\n        endBlock : endBlock,\r\n        forVotes : 0,\r\n        againstVotes : 0,\r\n        canceled : false,\r\n        executed : false\r\n        });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, title, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    function queue(\r\n        uint proposalId\r\n    ) public {\r\n        require(\r\n            state(proposalId) == ProposalState.Succeeded,\r\n            \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint eta = add256(block.timestamp, timelock.delay());\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function _queueOrRevert(\r\n        address target,\r\n        uint value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint eta\r\n    ) internal {\r\n        require(\r\n            !timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\r\n            \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"\r\n        );\r\n\r\n        timelock.queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    function execute(\r\n        uint proposalId\r\n    ) public payable {\r\n        require(\r\n            state(proposalId) == ProposalState.Queued,\r\n            \"GovernorAlpha::execute: proposal can only be executed if it is queued\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            timelock.executeTransaction.value(proposal.values[i])(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(\r\n        uint proposalId\r\n    ) public {\r\n        ProposalState state = state(proposalId);\r\n        require(\r\n            state != ProposalState.Executed,\r\n            \"GovernorAlpha::cancel: cannot cancel executed proposal\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(\r\n            msg.sender == proposal.proposer || _getVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold,\r\n            \"GovernorAlpha::cancel: proposer above threshold\"\r\n        );\r\n\r\n        proposal.canceled = true;\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\r\n        }\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    function getActions(\r\n        uint proposalId\r\n    ) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    function state(\r\n        uint proposalId\r\n    ) public view returns (ProposalState) {\r\n        require(\r\n            proposalCount >= proposalId && proposalId > 0,\r\n            \"GovernorAlpha::state: invalid proposal id\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    function castVote(\r\n        uint proposalId,\r\n        bool support\r\n    )\r\n    public returns (uint128) {\r\n        return _castVote(msg.sender, proposalId, support);\r\n    }\r\n\r\n    function castVoteBySig(\r\n        uint proposalId,\r\n        bool support,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    public returns (uint128) {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"GovernorAlpha::castVoteBySig: invalid signature\"\r\n        );\r\n        return _castVote(signatory, proposalId, support);\r\n    }\r\n\r\n    function _castVote(\r\n        address voter,\r\n        uint proposalId,\r\n        bool support\r\n    ) internal returns (uint128) {\r\n        require(\r\n            state(proposalId) == ProposalState.Active,\r\n            \"GovernorAlpha::_castVote: voting is closed\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(\r\n            receipt.hasVoted == false,\r\n            \"GovernorAlpha::_castVote: voter already voted\"\r\n        );\r\n\r\n        uint128 votes = _getVotes(voter, proposal.startBlock);\r\n\r\n        if (support) {\r\n            proposal.forVotes = add256(proposal.forVotes, votes);\r\n        } else {\r\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        emit VoteCast(voter, proposalId, support, votes);\r\n\r\n        return votes;\r\n    }\r\n\r\n    function __acceptAdmin() public {\r\n        require(\r\n            msg.sender == guardian || msg.sender == address(timelock),\r\n            \"GovernorAlpha::__acceptAdmin: sender must be gov guardian or timelock\"\r\n        );\r\n\r\n        timelock.acceptAdmin();\r\n    }\r\n\r\n    function __abdicate() public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__abdicate: sender must be gov guardian\"\r\n        );\r\n\r\n        guardian = address(0);\r\n    }\r\n\r\n    function __queueSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n\r\n        timelock.queueTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    function __executeSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n\r\n        timelock.executeTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    function _getVotes(\r\n        address user,\r\n        uint blockNumber\r\n    ) internal view returns (uint128) {\r\n        return dmg.getPriorVotes(user, blockNumber);\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"GovernorAlpha::add256: ADDITION_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        require(b <= a, \"GovernorAlpha::add256: SUBTRACTION_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint chainId;\r\n        assembly {chainId := chainid()}\r\n        return chainId;\r\n    }\r\n}\r\n\r\n// File: contracts/governance/dmg/SafeBitMath.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeBitMath {\r\n\r\n    function safe64(uint n, string memory errorMessage) internal pure returns (uint64) {\r\n        require(n < 2 ** 64, errorMessage);\r\n        return uint64(n);\r\n    }\r\n\r\n    function safe128(uint n, string memory errorMessage) internal pure returns (uint128) {\r\n        require(n < 2 ** 128, errorMessage);\r\n        return uint128(n);\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return add128(a, b, \"\");\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        return sub128(a, b, \"\");\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAssetIntroducerV1 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetIntroducerBought(uint indexed tokenId, address indexed buyer, address indexed recipient, uint dmgAmount);\r\n    event AssetIntroducerActivationChanged(uint indexed tokenId, bool isActivated);\r\n    event AssetIntroducerCreated(uint indexed tokenId, string countryCode, AssetIntroducerData.AssetIntroducerType introducerType, uint serialNumber);\r\n    event AssetIntroducerDiscountChanged(address indexed oldAssetIntroducerDiscount, address indexed newAssetIntroducerDiscount);\r\n    event AssetIntroducerDollarAmountToManageChange(uint indexed tokenId, uint oldDollarAmountToManage, uint newDollarAmountToManage);\r\n    event AssetIntroducerPriceChanged(string indexed countryCode, AssetIntroducerData.AssetIntroducerType indexed introducerType, uint oldPriceUsd, uint newPriceUsd);\r\n    event BaseURIChanged(string newBaseURI);\r\n    event CapitalDeposited(uint indexed tokenId, address indexed token, uint amount);\r\n    event CapitalWithdrawn(uint indexed tokenId, address indexed token, uint amount);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    event InterestPaid(uint indexed tokenId, address indexed token, uint amount);\r\n    event SignatureValidated(address indexed signer, uint nonce);\r\n    event StakingPurchaserChanged(address indexed oldStakingPurchaser, address indexed newStakingPurchaser);\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function createAssetIntroducersForPrimaryMarket(\r\n        string[] calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType[] calldata introducerType\r\n    ) external returns (uint[] memory);\r\n\r\n    function setDollarAmountToManageByTokenId(\r\n        uint tokenId,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setAssetIntroducerDiscount(\r\n        address assetIntroducerDiscount\r\n    ) external;\r\n\r\n    function setAssetIntroducerPrice(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint priceUsd\r\n    ) external;\r\n\r\n    function activateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function setStakingPurchaser(\r\n        address stakingPurchaser\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @return  The timestamp at which this contract was created\r\n     */\r\n    function initTimestamp() external view returns (uint64);\r\n\r\n    function stakingPurchaser() external view returns (address);\r\n\r\n    function openSeaProxyRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @return  The domain separator used in off-chain signatures. See EIP 712 for more:\r\n     *          https://eips.ethereum.org/EIPS/eip-712\r\n     */\r\n    function domainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @return  The address of the DMG token\r\n     */\r\n    function dmg() external view returns (address);\r\n\r\n    function dmmController() external view returns (address);\r\n\r\n    function underlyingTokenValuator() external view returns (address);\r\n\r\n    function assetIntroducerDiscount() external view returns (address);\r\n\r\n    /**\r\n     * @return  The discount applied to the price of the asset introducer for being an early purchaser. Represented as\r\n     *          a number with 18 decimals, such that 0.1 * 1e18 == 10%\r\n     */\r\n    function getAssetIntroducerDiscount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in USD\r\n     */\r\n    function getAssetIntroducerPriceUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in DMG. DMG is the needed currency to purchase an asset\r\n     *          introducer NFT.\r\n     */\r\n    function getAssetIntroducerPriceDmgByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    /**\r\n     * @return  The total amount of DMG locked in the asset introducer reserves\r\n     */\r\n    function getTotalDmgLocked() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount that this asset introducer can manager, represented in wei format (a number with 18\r\n     *          decimals). Meaning, 10,000.25 * 1e18 == $10,000.25\r\n     */\r\n    function getDollarAmountToManageByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of DMG that this asset introducer has locked in order to maintain a valid status as an asset\r\n     *          introducer.\r\n     */\r\n    function getDmgLockedByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer memory);\r\n\r\n    function getAssetIntroducersByCountryCode(\r\n        string calldata countryCode\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getAllAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getPrimaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getSecondaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function getNonceByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getNextAssetIntroducerTokenId(\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract\r\n     */\r\n    function buyAssetIntroducerSlot(\r\n        uint tokenId\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract. The additional discount is added to the existing one\r\n     */\r\n    function buyAssetIntroducerSlotViaStaking(\r\n        uint tokenId,\r\n        uint additionalDiscount\r\n    ) external returns (bool);\r\n\r\n    function nonceOf(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function buyAssetIntroducerSlotBySig(\r\n        uint tokenId,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool);\r\n\r\n    function buyAssetIntroducerSlotBySigWithDmgPermit(\r\n        uint __tokenId,\r\n        address __recipient,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s,\r\n        AssetIntroducerData.DmgApprovalStruct calldata dmgApprovalStruct\r\n    ) external returns (bool);\r\n\r\n    function getPriorVotes(\r\n        address user,\r\n        uint blockNumber\r\n    ) external view returns (uint128);\r\n\r\n    function getCurrentVotes(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getDmgLockedByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of capital that has been withdrawn by this asset introducer, denominated in USD with 18\r\n     *          decimals\r\n     */\r\n    function getDeployedCapitalUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getWithdrawnAmountByTokenIdAndUnderlyingToken(\r\n        uint tokenId,\r\n        address underlyingToken\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Deactivates the specified asset introducer from being able to withdraw funds. Doing so enables it to\r\n     *      be transferred. NOTE: NFTs can only be deactivated once all deployed capital is returned.\r\n     */\r\n    function deactivateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function withdrawCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function depositCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function payInterestByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Other Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Used by the DMMF to buy its token and initialize it based upon its usage of the protocol prior to the NFT\r\n     *      system having been created. We are passing through the USDC token specifically, because it was drawn down\r\n     *      by 300,000 early in the system's maturity to run a full cycle of the system and do a small allocation to\r\n     *      the bootstrapped asset pool.\r\n     */\r\n    function buyDmmFoundationToken(\r\n        uint tokenId,\r\n        address usdcToken\r\n    ) external returns (bool);\r\n\r\n    function isDmmFoundationSetup() external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/governance/governors/GovernorBeta.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n\r\n\r\ncontract GovernorBeta is GovernorAlpha {\r\n\r\n    using SafeBitMath for uint128;\r\n\r\n    event LocalOperatorSet(address indexed voter, address indexed operator, bool isTrusted);\r\n    event GlobalOperatorSet(address indexed operator, bool isTrusted);\r\n\r\n    modifier onlyTrustedOperator(address voter) {\r\n        require(\r\n            msg.sender == voter ||\r\n            _globalOperatorToIsSupportedMap[msg.sender] ||\r\n            _voterToLocalOperatorToIsSupportedMap[voter][msg.sender],\r\n            \"GovernorBeta: UNAUTHORIZED_OPERATOR\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    IAssetIntroducerV1 public assetIntroducerProxy;\r\n    mapping(address => mapping(address => bool)) internal _voterToLocalOperatorToIsSupportedMap;\r\n    mapping(address => bool) internal _globalOperatorToIsSupportedMap;\r\n\r\n    constructor(\r\n        address __assetIntroducerProxy,\r\n        address __dmg,\r\n        address __guardian\r\n    ) public GovernorAlpha(__dmg, __guardian) {\r\n        assetIntroducerProxy = IAssetIntroducerV1(__assetIntroducerProxy);\r\n    }\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function setGlobalOperator(\r\n        address __operator,\r\n        bool __isTrusted\r\n    ) public {\r\n        require(\r\n            address(timelock) == msg.sender,\r\n            \"GovernorBeta::setGlobalOperator: UNAUTHORIZED\"\r\n        );\r\n\r\n        _globalOperatorToIsSupportedMap[__operator] = __isTrusted;\r\n        emit GlobalOperatorSet(__operator, __isTrusted);\r\n    }\r\n\r\n    function __acceptAdmin() public {\r\n        require(\r\n            msg.sender == address(timelock),\r\n            \"GovernorBeta::__acceptAdmin: sender must be timelock\"\r\n        );\r\n\r\n        timelock.acceptAdmin();\r\n    }\r\n\r\n    function __queueSetTimelockPendingAdmin(\r\n        address,\r\n        uint\r\n    ) public {\r\n        // The equivalent of this function should be called via governance proposal execution\r\n        revert(\"GovernorBeta::__queueSetTimelockPendingAdmin: NOT_USED\");\r\n    }\r\n\r\n    function __executeSetTimelockPendingAdmin(\r\n        address,\r\n        uint\r\n    ) public {\r\n        // The equivalent of this function should be called via governance proposal execution\r\n        revert(\"GovernorBeta::__executeSetTimelockPendingAdmin: NOT_USED\");\r\n    }\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function setLocalOperator(\r\n        address __operator,\r\n        bool __isTrusted\r\n    ) public {\r\n        _voterToLocalOperatorToIsSupportedMap[msg.sender][__operator] = __isTrusted;\r\n        emit LocalOperatorSet(msg.sender, __operator, __isTrusted);\r\n    }\r\n\r\n    /**\r\n     * Can be called by a global operator or local operator on behalf of `voter` to cast votes on `voter`'s behalf.\r\n     *\r\n     * This function is mainly used to wrap around voting functionality with a proxy contract to perform additional\r\n     * logic before or after voting.\r\n     *\r\n     * @return The amount of votes the user casted in favor of or against the proposal.\r\n     */\r\n    function castVote(\r\n        address __voter,\r\n        uint __proposalId,\r\n        bool __support\r\n    )\r\n    onlyTrustedOperator(__voter)\r\n    public returns (uint128) {\r\n        return _castVote(__voter, __proposalId, __support);\r\n    }\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    function getIsLocalOperator(\r\n        address __voter,\r\n        address __operator\r\n    ) public view returns (bool) {\r\n        return _voterToLocalOperatorToIsSupportedMap[__voter][__operator];\r\n    }\r\n\r\n    function getIsGlobalOperator(\r\n        address __operator\r\n    ) public view returns (bool) {\r\n        return _globalOperatorToIsSupportedMap[__operator];\r\n    }\r\n\r\n    // *************************\r\n    // ***** Internal Functions\r\n    // *************************\r\n\r\n    function _getVotes(\r\n        address __user,\r\n        uint __blockNumber\r\n    ) internal view returns (uint128) {\r\n        return SafeBitMath.add128(\r\n            super._getVotes(__user, __blockNumber),\r\n            assetIntroducerProxy.getPriorVotes(__user, __blockNumber)\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__assetIntroducerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__dmg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"GlobalOperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"LocalOperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"__abdicate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"__acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"__executeSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"__queueSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetIntroducerProxy\",\"outputs\":[{\"internalType\":\"contract IAssetIntroducerV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"__support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmg\",\"outputs\":[{\"internalType\":\"contract IDMGToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"}],\"name\":\"getIsGlobalOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"}],\"name\":\"getIsLocalOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"votes\",\"type\":\"uint128\"}],\"internalType\":\"struct GovernorAlphaData.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"}],\"name\":\"initializeTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"__isTrusted\",\"type\":\"bool\"}],\"name\":\"setGlobalOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"__isTrusted\",\"type\":\"bool\"}],\"name\":\"setLocalOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumVotes_\",\"type\":\"uint256\"}],\"name\":\"setQuorumVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlphaData.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract ITimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GovernorBeta","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000022da19b404f432d64e280c3c5712e52612b689fd000000000000000000000000ed91879919b71bb6905f23af0a68d231ecf87b14000000000000000000000000dd7680b6b2eec193ce3ece7129708ee12531bccf","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2aae8125ad54540d868b2608d70e8fc7f932f34cc622472725fe2203ec7d0d9a"}]}