{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.11;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\ninterface LegacyIERC20 {\r\n    function transfer(address, uint) external;\r\n}\r\n\r\ncontract SwissLock is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    // ------- Contract Variables -------\r\n\r\n\r\n    // Swiss Token Address Here\r\n    address public constant SWISS_TOKEN_ADDRESS = address(0);\r\n\r\n    uint public constant ONE_DAY = 1 days;\r\n\r\n    uint public constant ONE_WEEK = 1 weeks;\r\n\r\n    // If there are any SWISS Tokens left in the contract\r\n    // After this below time, admin can claim them.\r\n    uint public constant ADMIN_CAN_CLAIM_AFTER = 6 * ONE_WEEK;\r\n\r\n    address public constant organisation_wallet =  0x973878Fa3A9439DFB27F7DD1C107Fd6D581bB2f2; // Organisation wallet\r\n    address public constant admin_wallet_1      =  0x0C6F8C0F523A9AA348fE99a7f740ED0aE171D7C2; // Team number 1\r\n    address public constant admin_wallet_2      =  0x496079588149b6B019B36d1aCEf3b8FEE3C1613A; // Team number 2\r\n    address public constant admin_wallet_3      =  0x7B45ec5d1501a2e2aca6c40E99f04729C7EdA633; // Team number 3\r\n    address public constant admin_wallet_4      =  0x224F7803F9975c3a3bd64829db9908784fe52399; // Team number 4\r\n    address public constant admin_wallet_5      =  0x5F459581D117be275dA8408942a9C92F22d98b39; // Team number 5\r\n    address public constant admin_wallet_6      =  0x38cFfff72DcF64C3Fdbb66E23f7185Fb4769e01B; // Team number 6\r\n    address public constant admin_wallet_7      =  0xfe5408a38F0Afba44Fd5Ed77E34D0943E354264a; // Team number 7\r\n    address public constant admin_wallet_8      =  0xc17F69891407f3FD666E27c635F5d970a77b4A9F; // Team number 8\r\n\r\n\r\n    // ------- END Contract Variables -------\r\n\r\n    IERC20 public constant swissToken = IERC20(SWISS_TOKEN_ADDRESS);\r\n    uint public rewardTimes = 0;\r\n\r\n    uint public contractStartTime;\r\n    uint public lastClaimTime;\r\n    constructor() public {\r\n        contractStartTime = now;\r\n        lastClaimTime = contractStartTime;\r\n    }\r\n\r\n    function distributeAdminRewards() public {\r\n        require(rewardTimes < 5, \"distributeAdminRewards has already been called 5 times!\");\r\n\r\n        if (rewardTimes == 0) {\r\n            require(now > lastClaimTime.add(ONE_DAY));\r\n        } else {\r\n            require(now > lastClaimTime.add(ONE_WEEK));\r\n        }\r\n\r\n        if (rewardTimes == 0) {\r\n\r\n            require(swissToken.transfer(organisation_wallet, 200e18), \"Could not transfer to organisation_wallet!\");\r\n\r\n        } else if (rewardTimes == 1) {\r\n\r\n            require(swissToken.transfer(organisation_wallet, 70e18), \"Could not transfer to organisation_wallet!\");\r\n            require(swissToken.transfer(admin_wallet_1,     180e18), \"Could not transfer to admin_wallet_1!\");\r\n            require(swissToken.transfer(admin_wallet_2,     180e18), \"Could not transfer to admin_wallet_2!\");\r\n            require(swissToken.transfer(admin_wallet_3,      30e18), \"Could not transfer to admin_wallet_3!\");\r\n            require(swissToken.transfer(admin_wallet_4,      30e18), \"Could not transfer to admin_wallet_4!\");\r\n            require(swissToken.transfer(admin_wallet_5,      25e18), \"Could not transfer to admin_wallet_5!\");\r\n            require(swissToken.transfer(admin_wallet_6,       3e18), \"Could not transfer to admin_wallet_6!\");\r\n            require(swissToken.transfer(admin_wallet_7,      65e18), \"Could not transfer to admin_wallet_7!\");\r\n            require(swissToken.transfer(admin_wallet_8,      65e18), \"Could not transfer to admin_wallet_8!\");\r\n\r\n        } else if (rewardTimes == 2) {\r\n\r\n            require(swissToken.transfer(organisation_wallet, 50e18), \"Could not transfer to organisation_wallet!\");\r\n            require(swissToken.transfer(admin_wallet_1,     180e18), \"Could not transfer to admin_wallet_1!\");\r\n            require(swissToken.transfer(admin_wallet_2,     180e18), \"Could not transfer to admin_wallet_2!\");\r\n            require(swissToken.transfer(admin_wallet_3,      30e18), \"Could not transfer to admin_wallet_3!\");\r\n            require(swissToken.transfer(admin_wallet_4,      30e18), \"Could not transfer to admin_wallet_4!\");\r\n            require(swissToken.transfer(admin_wallet_5,      25e18), \"Could not transfer to admin_wallet_5!\");\r\n            require(swissToken.transfer(admin_wallet_6,       3e18), \"Could not transfer to admin_wallet_6!\");\r\n            require(swissToken.transfer(admin_wallet_7,      65e18), \"Could not transfer to admin_wallet_7!\");\r\n            require(swissToken.transfer(admin_wallet_8,      65e18), \"Could not transfer to admin_wallet_8!\");\r\n\r\n        } else if (rewardTimes == 3) {\r\n\r\n            require(swissToken.transfer(organisation_wallet, 50e18), \"Could not transfer to organisation_wallet!\");\r\n            require(swissToken.transfer(admin_wallet_1,     160e18), \"Could not transfer to admin_wallet_1!\");\r\n            require(swissToken.transfer(admin_wallet_2,     160e18), \"Could not transfer to admin_wallet_2!\");\r\n            require(swissToken.transfer(admin_wallet_3,      25e18), \"Could not transfer to admin_wallet_3!\");\r\n            require(swissToken.transfer(admin_wallet_4,      25e18), \"Could not transfer to admin_wallet_4!\");\r\n            require(swissToken.transfer(admin_wallet_5,      20e18), \"Could not transfer to admin_wallet_5!\");\r\n            require(swissToken.transfer(admin_wallet_6,       2e18), \"Could not transfer to admin_wallet_6!\");\r\n            require(swissToken.transfer(admin_wallet_7,      55e18), \"Could not transfer to admin_wallet_7!\");\r\n            require(swissToken.transfer(admin_wallet_8,      55e18), \"Could not transfer to admin_wallet_8!\");\r\n\r\n        } else if (rewardTimes == 4) {\r\n\r\n            require(swissToken.transfer(organisation_wallet, 40e18), \"Could not transfer to organisation_wallet!\");\r\n            require(swissToken.transfer(admin_wallet_1,     150e18), \"Could not transfer to admin_wallet_1!\");\r\n            require(swissToken.transfer(admin_wallet_2,     150e18), \"Could not transfer to admin_wallet_2!\");\r\n            require(swissToken.transfer(admin_wallet_3,      20e18), \"Could not transfer to admin_wallet_3!\");\r\n            require(swissToken.transfer(admin_wallet_4,      20e18), \"Could not transfer to admin_wallet_4!\");\r\n            require(swissToken.transfer(admin_wallet_5,      10e18), \"Could not transfer to admin_wallet_5!\");\r\n            require(swissToken.transfer(admin_wallet_6,       2e18), \"Could not transfer to admin_wallet_6!\");\r\n            require(swissToken.transfer(admin_wallet_7,      40e18), \"Could not transfer to admin_wallet_7!\");\r\n            require(swissToken.transfer(admin_wallet_8,      40e18), \"Could not transfer to admin_wallet_8!\");\r\n\r\n        }\r\n\r\n        lastClaimTime = now;\r\n        rewardTimes = rewardTimes.add(1);\r\n    }\r\n\r\n    function transferAnyERC20Token(address _tokenAddress, address _to, uint _amount) public onlyOwner {\r\n        require(_tokenAddress != SWISS_TOKEN_ADDRESS || now > contractStartTime.add(ADMIN_CAN_CLAIM_AFTER), \"Cannot Transfer out SWISS Tokens yet!\");\r\n        require(IERC20(_tokenAddress).transfer(_to, _amount), \"Could not transfer Tokens!\");\r\n    }\r\n    function transferAnyOldERC20Token(address _tokenAddress, address _to, uint _amount) public onlyOwner {\r\n        require(_tokenAddress != SWISS_TOKEN_ADDRESS || now > contractStartTime.add(ADMIN_CAN_CLAIM_AFTER), \"Cannot Transfer out SWISS Tokens yet!\");\r\n        LegacyIERC20(_tokenAddress).transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_CAN_CLAIM_AFTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWISS_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_7\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_wallet_8\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAdminRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organisation_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swissToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyOldERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwissLock","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://42ffce9bb16a1bf5144f5d89df71d08710ae96d3324d6baee4f9e22d25be8340"}]}