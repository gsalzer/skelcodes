{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint bountyValue) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint bountyValue) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint bountyValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory);\r\n}\r\n\r\ninterface YCrvGauge {\r\n    function deposit(uint256 bountyValue) external;\r\n    function withdraw(uint256 bountyValue) external;\r\n}\r\n\r\ninterface TokenMinter {\r\n    function mint(address account) external;\r\n}\r\n\r\n\r\n\r\n// import relevant packages/package functions like SafeMath, Address, SafeERC20\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n   \r\n\r\n// Implement FLOW (see the README)\r\ncontract pseudo_svault {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    UniswapRouter constant UNIROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);  //UniswapV2Router02 is deployed here; https://uniswap.org/docs/v2/smart-contracts/router02/\r\n    YCrvGauge constant YCRVGAUGE = YCrvGauge(0xFA712EE4788C042e2B7BB55E6cb8ec569C4530c1);\r\n    IERC20 constant CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    TokenMinter constant TOKENMINTER = TokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\r\n\r\n    // create struct Bounty\r\n    struct Bounty {\r\n        uint256 bountyValue;\r\n        uint256 bountyTimeStamp;\r\n        uint256 totalBountyDeposit;\r\n    }\r\n\r\n    // declare mappings\r\n    mapping(address => uint) public _rewardedBalancePerUser;\r\n    mapping(address => uint) public _lastTimestampPerUser;\r\n    mapping(address => uint) public _depositBalancePerUser;\r\n\r\n    uint256 public _totalBountyDeposit;\r\n\r\n    Bounty[] public _bounties;\r\n\r\n    string public vaultName;\r\n    address public vaultAddress;\r\n\r\n    IERC20 public token0;\r\n    IERC20 public token1; // PF deployer address\r\n\r\n    address public feeAddress;\r\n    uint32 public feeRate;\r\n    address public treasury;\r\n\r\n    bool public isWithdrawable;\r\n\r\n    // based on convo with Ali the user rate should be 70%, treasury rate 30%; total rate is 10000 or 100%\r\n    uint256 public rewardUserRate = 7000;\r\n    uint32 public rewardTreasuryRate = 3000;\r\n    // may want totalRate to be constant rather than public\r\n    uint256 public totalRate = 10000;\r\n    \r\n    uint256 public crv_0;\r\n    uint256 public token_0;\r\n    \r\n    address public gov;\r\n\r\n    // declare events; same as OG contract but also has an event for the sent bounty\r\n    event Deposited(address indexed user, uint256 bountyValue);\r\n    event ClaimedReward(address indexed user, uint256 bountyValue);\r\n    event Withdrawn(address indexed user, uint256 bountyValue);\r\n    event DistributedBounty(address indexed, uint256 bountyValue);\r\n\r\n    // implement constructor\r\n    // might get rid of _vaultAddress\r\n    constructor (address _token0, address _token1, address _feeAddress, string memory name, address _treasury) payable {\r\n        token0 = IERC20(_token0);\r\n        token1 = IERC20(_token1);\r\n        feeAddress = _feeAddress;\r\n        vaultName = name;\r\n        gov = msg.sender;\r\n        treasury = _treasury;\r\n        token0.approve(address(YCRVGAUGE), type(uint).max);\r\n        CRV.approve(address(UNIROUTER), type(uint).max);\r\n        // token0.approve(address(YCRVGAUGE), 100);\r\n        // CRV.approve(address(UNIROUTER), 100);\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address _gov)\r\n        external\r\n        onlyGov\r\n    {\r\n        gov = _gov;\r\n    }\r\n\r\n    function setToken0(address _token)\r\n        external\r\n        onlyGov\r\n    {\r\n        token0 = IERC20(_token);\r\n    }\r\n\r\n    function setToken1(address _token)\r\n        external\r\n        onlyGov\r\n    {\r\n        token1 = IERC20(_token);\r\n    }\r\n\r\n    function setTreasury(address _treasury)\r\n        external\r\n        onlyGov\r\n    {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setUserRate(uint256 _rewardUserRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        rewardUserRate = _rewardUserRate;\r\n    }\r\n\r\n    function setTreasuryRate(uint32 _rewardTreasuryRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        rewardTreasuryRate = _rewardTreasuryRate;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setFeeRate(uint32 _feeRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeRate = _feeRate;\r\n    }\r\n\r\n    function setWithdrawable(bool _isWithdrawable)\r\n        external\r\n        onlyGov\r\n    {\r\n        isWithdrawable = _isWithdrawable;\r\n    }\r\n\r\n    function setVaultName(string memory name)\r\n        external\r\n        onlyGov\r\n    {\r\n        vaultName = name;\r\n    }\r\n\r\n    function setTotalRate(uint256 _totalRate)\r\n        external\r\n        onlyGov\r\n    {\r\n        totalRate = _totalRate;\r\n    }\r\n    \r\n    // function makeCRV() internal {\r\n    //     uint rewardAmountForCRVToken = CRV.balanceOf(address(this));\r\n    //     TOKENMINTER.mint(address(YCRVGAUGE));\r\n    //     rewardAmountForCRVToken = CRV.balanceOf(address(this)) - rewardAmountForCRVToken;\r\n    // }\r\n\r\n    // I modified getReward() such that updating rewardedBalance is greatly simplifed \r\n    // this is similar structure to the modifier updateBalance() in original contract but makes use of\r\n    // SafeMath as well as the Bounty struct (_bounties) for easier access of specific public information\r\n    // rewardedBalance is updated by adding the:\r\n    // (bountyValue ((rewardvaleeForCRVToken) * _depositBalancePerUser[userAddress]) / _bounties[k].totalBountyDeposit)\r\n    function getReward(address userAddress) internal {\r\n\r\n        uint256 rewardedBalance = _rewardedBalancePerUser[userAddress];\r\n        uint256 lastTimestamp = _lastTimestampPerUser[userAddress];\r\n\r\n        // make sure timestamp & _bounties struct is larger than 0 in order to avoid processing dud calls \r\n        // lastTimestamp of user's address must be less than previous user's\r\n        if (lastTimestamp > 0 && _bounties.length > 0) {\r\n            for (uint k = _bounties.length - 1; lastTimestamp < _bounties[k].bountyTimeStamp; k--) {\r\n                rewardedBalance = rewardedBalance.add(_bounties[k].bountyValue.mul(_depositBalancePerUser[userAddress]).div(_bounties[k].totalBountyDeposit));\r\n                if (k == 0) break; // break for loop if k is 0 to avoid unnessecary runtime\r\n            }\r\n        }\r\n        _rewardedBalancePerUser[userAddress] = rewardedBalance;\r\n        _lastTimestampPerUser[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // function deposit(uint amount) external updateBalance(msg.sender) --> shouldn't need this since getReward is called each time which acts\r\n    // in exact same capacity as updateBalance() in OG contract; getReward from OG contract is very inefficient and has been split up in this contract \r\n    \r\n    // bountyValue is in yCRV when user deposits\r\n    function deposit(uint256 bountyValue) external {\r\n        getReward(msg.sender);\r\n\r\n        uint256 feebountyValue = bountyValue.mul(feeRate).div(totalRate); \r\n       \r\n        // actual amount being deposited after fee is assessed       \r\n        uint256 realbountyValue = bountyValue.sub(feebountyValue);\r\n        \r\n        if (feebountyValue > 0) {\r\n            token0.transferFrom(msg.sender, feeAddress, feebountyValue);\r\n        }\r\n\r\n        // vaultAddress is used here instead of address(this) in original contract because we want to deposit to vault\r\n        // address(this) [address of the contract instance] might make more sense if the this is deployed by PF\r\n        // actual amount being deposited into PF's yUSD vault after fee is assessed \r\n\r\n        // address(this) since this is actually just transferring the yCRV to the contract instance who then deposits\r\n        if (realbountyValue > 0) {\r\n            token0.transferFrom(msg.sender, address(this), realbountyValue);\r\n            YCRVGAUGE.deposit(realbountyValue); // -> does this need to be done here or will vaultAddress handle depositing this to ycrvguage?\r\n            _depositBalancePerUser[msg.sender] = _depositBalancePerUser[msg.sender].add(realbountyValue);  // use _depositBalancePerUser from mapping\r\n            _totalBountyDeposit = _totalBountyDeposit.add(realbountyValue); // update _totalBountyDeposit\r\n            emit Deposited(msg.sender, realbountyValue);\r\n        }\r\n    }\r\n\r\n    // PF is withdrawing from yUSD or CRV on behalf of user\r\n    // msg.sender in this case is PF's address I believe...might use userAddress instead of msg.sender\r\n    function withdraw(uint256 bountyValue) external {\r\n        // again make sure there is something to withdraw to avoid dud calls\r\n\r\n        // require(token0.balanceOf(address(this)) > 0, \"nothing to withdraw\");\r\n        require(isWithdrawable, \"not withdrawable\");\r\n\r\n        getReward(msg.sender);\r\n\r\n        // if the bountyValue is larger than the user's balance then we'll reset the bountyValue to the user's actual balance\r\n        if (bountyValue > _depositBalancePerUser[msg.sender]) {\r\n            bountyValue = _depositBalancePerUser[msg.sender];\r\n        }\r\n\r\n        // again making sure to avoid continuing if there's nothing to withdraw after reseting bountyValue\r\n        require(bountyValue > 0, \"withdraw amount is 0\");\r\n\r\n        YCRVGAUGE.withdraw(bountyValue);\r\n\r\n        // transfer CRV tokens to PF, the sender\r\n        token0.transfer(msg.sender, bountyValue);\r\n\r\n        // assign deposit balance to the deposit balance minus the bountyValue (the amount needed to be withdrawn for YCRV)\r\n        _depositBalancePerUser[msg.sender] = _depositBalancePerUser[msg.sender].sub(bountyValue);\r\n        //update public total bounty deposit value such that bountyValue needed to be withdrawn for YCRV is withdrawn\r\n        _totalBountyDeposit = _totalBountyDeposit.sub(bountyValue);  // seems like full amount should be withdrawn\r\n\r\n        emit Withdrawn(msg.sender, bountyValue);\r\n    }\r\n\r\n\r\n    // making a new separate function to actually send the bounty and send to treasury (called by PF)\r\n    // this function is called last once the user claimReward() has been called\r\n    // this function uses logic from the getReward() in the original contract\r\n    // and is a cleaner implementation\r\n    function _distributeBounty(uint256 maxBountyValue) internal returns (uint256, uint256) {\r\n        // again make sure there is a bounty vaue to give in order to avoid dud calls\r\n        require(maxBountyValue > 0, \"bountyValue can't be 0\");\r\n        require(_totalBountyDeposit > 0, \"totalDeposit must bigger than 0\");\r\n\r\n\r\n        uint256 treasuryBountyValue; \r\n        uint256 bountyValueUser = maxBountyValue.mul(rewardUserRate).div(totalRate);  // bountyValueUser == rewardCRVTokenAmountForUsers in original contract (i.e. rewardAmountForCRVToken * rewardUserRate / TOTALRATE)\r\n        treasuryBountyValue = maxBountyValue.sub(bountyValueUser);  // update bountyValue (amountWithdrawForYCRV) by subtracting bountyValueUser (rewardCRVTokenAmountForUsers)\r\n        \r\n        // perform swap here --> need to assess what swapExactTokensForTokens() call takes as args\r\n\r\n        // somthing like UNIROUTER.swapExactTokensForTokens(rewardCRVTokenAmountForUsers, 0, tokens, address(this), type(uint).max);\r\n        // where tokens is an array that has CRV, WETH, and token1\r\n        // this call will update token1\r\n        address[] memory tokens = new address[](3);\r\n        tokens[0] = address(CRV);\r\n        tokens[1] = address(WETH);\r\n        tokens[2] = address(token1);\r\n\r\n        uint256 pylon_before;\r\n        uint256 pylon_after;\r\n\r\n        pylon_before = token1.balanceOf(address(this));\r\n\r\n        if (bountyValueUser > 0) {\r\n            UNIROUTER.swapExactTokensForTokens(bountyValueUser, 0, tokens, address(this), type(uint).max);\r\n        }\r\n\r\n        pylon_after = token1.balanceOf(address(this));\r\n\r\n        // transfers PYLON tokens to user...don't need to convert here if already done in claimReward()\r\n        // token1.safeTransferFrom(msg.sender, address(this), bountyValueUser); // bountyValueUser has been adjusted and can now be sent to user\r\n        \r\n        // convert bountyValue to WETH and then send to treasury\r\n        // somthing like UNIROUTER.swapExactTokensForTokens(rewardCRVTokenAmountForUsers, 0, tokens1, address(this), type(uint).max);\r\n        // where tokens1 is an array that has CRV and WETH\r\n\r\n        address[] memory tokens1 = new address[](2);\r\n        tokens1[0] = address(CRV);\r\n        tokens1[1] = address(WETH);\r\n\r\n        if (treasuryBountyValue > 0) {\r\n            UNIROUTER.swapExactTokensForTokens(treasuryBountyValue, 0, tokens1, address(this), type(uint).max);\r\n        }\r\n\r\n        uint wethBalance;\r\n        wethBalance = WETH.balanceOf(address(this));\r\n        WETH.transfer(treasury, wethBalance);\r\n\r\n        Bounty memory bounty;\r\n        bounty = Bounty(bountyValueUser, block.timestamp, _totalBountyDeposit);\r\n        _bounties.push(bounty); // push bounty struct object to _bounties array\r\n        emit DistributedBounty(msg.sender, bountyValueUser);\r\n\r\n        return (pylon_before, pylon_after);\r\n\r\n    }\r\n\r\n    // here I adapt the original claimReward() logic into two separate functions that also draw upon\r\n    // another function, getBountyValue() to retrieve the max bounty; getBountyValue() is adapated from\r\n    // the modifier in the original contract and code used in the original claimReward() function\r\n    // this function is called on behalf of the user, so pylon token will transfer to PF deployer\r\n    function claimReward() external {\r\n        getReward(msg.sender);\r\n\r\n        // uint rewardPylonTokenAmountForUsers = token1.balanceOf(address(this));\r\n\r\n        // maxBounty is essentially 'currentRewardAmount' as defined in the original claimReward() function, but is vetted.\r\n        // see getBountyValue() below\r\n        uint256 maxBounty = getBountyValue(msg.sender);\r\n        // is the max reward, not yet differentiated into CRV vs PYLON or with rates applied\r\n\r\n        _rewardedBalancePerUser[msg.sender] = _rewardedBalancePerUser[msg.sender].sub(maxBounty); // adjusts the _rewardedBalancePerUser for the claim call\r\n        \r\n        // *** probably need to convert bountyValue into PYLONs here ***\r\n        // *** apply 70%\r\n\r\n        // also assess 30% WETH here, send values to distributeBounty (modify this to take 2 args)\r\n\r\n        // may not need this check... implementation of this in claimReward() in OG contract is pretty confusing\r\n        // this wouldn't make sense to do if bountyValue is in CRV denomination (an arbitrary value, actually, that\r\n        // simply is implicity denominated in yCRV or yUSD in my logic) hasn't been converted yet\r\n        // but the bountyValue has beem adequately kept track of/updated here so when token1.transfer is called\r\n        // the logic in transfer() function in PYLON.sol properly scales things from CRV values to PYLON\r\n        // uint token1balance = token1.balanceOf(address(this));\r\n        // if (bountyValue > token1balance){\r\n        //     bountyValue = token1balance;\r\n        // } \r\n\r\n        // Transfer converts balance to PYLONS and sends to msg.sender which should be the PF deployer address\r\n        // will use distributeBounty to send to user's address and the share to treasury address\r\n\r\n        uint256 finalPylonUserBounty;\r\n        uint256 previousPylonUserBounty;\r\n\r\n        (previousPylonUserBounty, finalPylonUserBounty) = _distributeBounty(maxBounty);\r\n\r\n        token1.transfer(msg.sender, finalPylonUserBounty);\r\n        emit ClaimedReward(msg.sender, finalPylonUserBounty);\r\n    }\r\n\r\n\r\n    // this function uses logic from claimReward() in original contract and draws on original modifier method\r\n    // rewardedBalance is equivalent to currentRewardAmount = accTotalReward * accDepositBalancePerUser[msg.sender] / accTotalDeposit in original contract\r\n    function getBountyValue(address userAddress) public view returns (uint256) {\r\n\r\n        uint256 rewardedBalance = _rewardedBalancePerUser[userAddress];\r\n        uint256 lastTimestamp = _lastTimestampPerUser[userAddress];\r\n\r\n        if (_bounties.length > 0) {\r\n            if (lastTimestamp > 0) {\r\n                for (uint l = _bounties.length - 1; lastTimestamp < _bounties[l].bountyTimeStamp; l--) {\r\n                    rewardedBalance = rewardedBalance.add(_bounties[l].bountyValue.mul(_depositBalancePerUser[userAddress]).div(_bounties[l].totalBountyDeposit));\r\n                    // currentRewardAmount = accTotalReward * accDepositBalancePerUser[msg.sender] / accTotalDeposit;\r\n                    // _bounties[i].amount == accTotalReward in OG\r\n                    // _depositBalances[userAddress] == accDepositBalancePerUser[msg.sender] in OG\r\n                    // _bounties[i].totalDeposit == accTotalDeposit in OG\r\n\r\n                    // rewardedBalance becomes maxbounty and is original rewardBalance + currentRewardAmount from OG\r\n\r\n                    if (l == 0) break;\r\n                }\r\n            }\r\n        // add option to add time to delay (e.g. force a user to wait a certain amount of time to withdraw or else get penalized?)\r\n\r\n        }\r\n        return rewardedBalance;\r\n    }\r\n\r\n    function seize(address token, address to) external onlyGov {\r\n        require(IERC20(token) != token0 && IERC20(token) != token1, \"main tokens\");\r\n        if (token != address(0)) {\r\n            uint256 amount = IERC20(token).balanceOf(address(this));\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n        else {\r\n            uint256 amount = address(this).balance;\r\n            payable(to).transfer(amount);\r\n        }\r\n    }\r\n        \r\n    fallback () external payable { }\r\n    receive () external payable { }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"DistributedBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bounties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bountyTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBountyDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_depositBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTimestampPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewardedBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBountyDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv_0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getBountyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTreasuryRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardUserRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeRate\",\"type\":\"uint32\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRate\",\"type\":\"uint256\"}],\"name\":\"setTotalRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardTreasuryRate\",\"type\":\"uint32\"}],\"name\":\"setTreasuryRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardUserRate\",\"type\":\"uint256\"}],\"name\":\"setUserRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setVaultName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isWithdrawable\",\"type\":\"bool\"}],\"name\":\"setWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyValue\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"pseudo_svault","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df5e0e81dff6faf3a7e52ba697820c5e32d806a8000000000000000000000000d7b7d3c0bda57723fb54ab95fd8f9ea033af37f20000000000000000000000002d2ae0bfe25503f608f0f5cdce54c17302c01ea900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000002d2ae0bfe25503f608f0f5cdce54c17302c01ea9000000000000000000000000000000000000000000000000000000000000000f796372765f6d61696e6e65745f74310000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://686b189e737d85f6fc8388e26db36db2474ca3ab539aa5cb8eea67fe0b4da69e"}]}