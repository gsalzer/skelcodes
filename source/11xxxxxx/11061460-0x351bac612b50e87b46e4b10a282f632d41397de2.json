{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: (Apache-2.0 AND MIT AND BSD-4-Clause)\r\n//------------------------------------------------------------------------------\r\n//\r\n//   Copyright 2020 Fetch.AI Limited\r\n//\r\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//   you may not use this file except in compliance with the License.\r\n//   You may obtain a copy of the License at\r\n//\r\n//       http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n//   Unless required by applicable law or agreed to in writing, software\r\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//   See the License for the specific language governing permissions and\r\n//   limitations under the License.\r\n//\r\n//------------------------------------------------------------------------------\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n//------------------------------------------------------------------------------\r\n//\r\n//   Copyright 2020 Fetch.AI Limited\r\n//\r\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//   you may not use this file except in compliance with the License.\r\n//   You may obtain a copy of the License at\r\n//\r\n//       http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n//   Unless required by applicable law or agreed to in writing, software\r\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//   See the License for the specific language governing permissions and\r\n//   limitations under the License.\r\n//\r\n//------------------------------------------------------------------------------\r\n\r\n\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x >= 0);\r\n    return uint64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) << 64;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n        y <= 0x1000000000000000000000000000000000000000000000000);\r\n      return -y << 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <=\r\n          0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <=\r\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x >= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n    uint256 hi = uint256 (x) * (y >> 128);\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi <<= 64;\r\n\r\n    require (hi <=\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) << 64) / y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x < 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y < 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result <= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x < 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) >> 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m >= 0);\r\n    require (m <\r\n        0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m)));\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x >= 0) {\r\n      absoluteResult = powu (uint256 (x) << 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\r\n      negativeResult = y & 1 > 0;\r\n    }\r\n\r\n    absoluteResult >>= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x >= 0);\r\n    return int128 (sqrtu (uint256 (x) << 64));\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 << 64;\r\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\r\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux >> 255;\r\n      ux >>= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x & 0x8000000000000000 > 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n    if (x & 0x4000000000000000 > 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n    if (x & 0x2000000000000000 > 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n    if (x & 0x1000000000000000 > 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n    if (x & 0x800000000000000 > 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n    if (x & 0x400000000000000 > 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n    if (x & 0x200000000000000 > 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n    if (x & 0x100000000000000 > 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n    if (x & 0x80000000000000 > 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n    if (x & 0x40000000000000 > 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n    if (x & 0x20000000000000 > 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n    if (x & 0x10000000000000 > 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n    if (x & 0x8000000000000 > 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n    if (x & 0x4000000000000 > 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n    if (x & 0x2000000000000 > 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n    if (x & 0x1000000000000 > 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n    if (x & 0x800000000000 > 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n    if (x & 0x400000000000 > 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n    if (x & 0x200000000000 > 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n    if (x & 0x100000000000 > 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n    if (x & 0x80000000000 > 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n    if (x & 0x40000000000 > 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n    if (x & 0x20000000000 > 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n    if (x & 0x10000000000 > 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n    if (x & 0x8000000000 > 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n    if (x & 0x4000000000 > 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n    if (x & 0x2000000000 > 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n    if (x & 0x1000000000 > 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n    if (x & 0x800000000 > 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n    if (x & 0x400000000 > 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n    if (x & 0x200000000 > 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n    if (x & 0x100000000 > 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n    if (x & 0x80000000 > 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n    if (x & 0x40000000 > 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n    if (x & 0x20000000 > 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n    if (x & 0x10000000 > 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n    if (x & 0x8000000 > 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n    if (x & 0x4000000 > 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n    if (x & 0x2000000 > 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n    if (x & 0x1000000 > 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n    if (x & 0x800000 > 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n    if (x & 0x400000 > 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n    if (x & 0x200000 > 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n    if (x & 0x100000 > 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n    if (x & 0x80000 > 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n    if (x & 0x40000 > 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n    if (x & 0x20000 > 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n    if (x & 0x10000 > 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n    if (x & 0x8000 > 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n    if (x & 0x4000 > 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n    if (x & 0x2000 > 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n    if (x & 0x1000 > 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n    if (x & 0x800 > 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n    if (x & 0x400 > 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n    if (x & 0x200 > 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n    if (x & 0x100 > 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n    if (x & 0x80 > 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n    if (x & 0x40 > 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n    if (x & 0x20 > 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n    if (x & 0x10 > 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n    if (x & 0x8 > 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n    if (x & 0x4 > 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n    if (x & 0x2 > 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n    if (x & 0x1 > 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n    result >>= uint256 (63 - (x >> 64));\r\n    require (result <= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (\r\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x << 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x >> 192;\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y >> 128);\r\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x >> 192;\r\n      uint256 xl = x << 64;\r\n\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi << 128;\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi >> 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe > 0) x >>= uint256 (xe);\r\n      else x <<= uint256 (-xe);\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y > 0) {\r\n        if (y & 1 > 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result >>= 128;\r\n            re += 1;\r\n          } else result >>= 127;\r\n          if (re < -127) return 0; // Underflow\r\n          require (re < 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y >>= 1;\r\n          xe <<= 1;\r\n          if (x >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x >>= 128;\r\n            xe += 1;\r\n          } else x >>= 127;\r\n          if (xe < -127) return 0; // Underflow\r\n          require (xe < 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re > 0) result <<= uint256 (re);\r\n      else if (re < 0) result >>= uint256 (-re);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      uint256 xx = x;\r\n      uint256 r = 1;\r\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n      if (xx >= 0x8) { r <<= 1; }\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1; // Seven iterations should be enough\r\n      uint256 r1 = x / r;\r\n      return uint128 (r < r1 ? r : r1);\r\n    }\r\n  }\r\n}\r\n//------------------------------------------------------------------------------\r\n//\r\n//   Copyright 2020 Fetch.AI Limited\r\n//\r\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//   you may not use this file except in compliance with the License.\r\n//   You may obtain a copy of the License at\r\n//\r\n//       http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n//   Unless required by applicable law or agreed to in writing, software\r\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//   See the License for the specific language governing permissions and\r\n//   limitations under the License.\r\n//\r\n//------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary AssetLib {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    struct Asset {\r\n        uint256 principal;\r\n        uint256 compoundInterest;\r\n    }\r\n\r\n\r\n    function composite(Asset storage asset)\r\n        internal view returns(uint256)\r\n    {\r\n        return asset.principal.add(asset.compoundInterest);\r\n    }\r\n\r\n\r\n    function compositeM(Asset memory asset)\r\n        internal pure returns(uint256)\r\n    {\r\n        return asset.principal.add(asset.compoundInterest);\r\n    }\r\n\r\n\r\n    function imAddS(Asset memory to, Asset storage amount)\r\n        internal view\r\n    {\r\n        to.principal = to.principal.add(amount.principal);\r\n        to.compoundInterest = to.compoundInterest.add(amount.compoundInterest);\r\n    }\r\n\r\n\r\n    function iAdd(Asset storage to, Asset memory amount)\r\n        internal\r\n    {\r\n        to.principal = to.principal.add(amount.principal);\r\n        to.compoundInterest = to.compoundInterest.add(amount.compoundInterest);\r\n    }\r\n\r\n\r\n    function imSubM(Asset memory from, Asset storage amount)\r\n        internal view\r\n    {\r\n        from.principal = from.principal.sub(amount.principal);\r\n        from.compoundInterest = from.compoundInterest.sub(amount.compoundInterest);\r\n    }\r\n\r\n\r\n    function iSub(Asset storage from, Asset memory amount)\r\n        internal\r\n    {\r\n        from.principal = from.principal.sub(amount.principal);\r\n        from.compoundInterest = from.compoundInterest.sub(amount.compoundInterest);\r\n    }\r\n\r\n\r\n    function iSubPrincipalFirst(Asset storage from, uint256 amount)\r\n        internal returns(Asset memory _amount)\r\n    {\r\n        if (from.principal >= amount) {\r\n            from.principal = from.principal.sub(amount);\r\n            _amount.principal = amount;\r\n        } else {\r\n           _amount.compoundInterest = amount.sub(from.principal);\r\n            // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\r\n            from.compoundInterest = from.compoundInterest.sub(_amount.compoundInterest);\r\n\r\n            _amount.principal = from.principal;\r\n            from.principal = 0;\r\n        }\r\n    }\r\n\r\n\r\n    function iSubCompoundInterestFirst(Asset storage from, uint256 amount)\r\n        internal returns(Asset memory _amount)\r\n    {\r\n        if (from.compoundInterest >= amount) {\r\n            from.compoundInterest = from.compoundInterest.sub(amount);\r\n            _amount.compoundInterest = amount;\r\n        } else {\r\n            _amount.principal = amount.sub(from.compoundInterest);\r\n            // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\r\n            from.principal = from.principal.sub(_amount.principal);\r\n\r\n            _amount.compoundInterest = from.compoundInterest;\r\n            from.compoundInterest = 0;\r\n        }\r\n    }\r\n\r\n    // NOTE(pb): This is a little bit more expensive version of the commented-out function bellow,\r\n    //           but it avoids copying the code by reusing (calling existing functions), and so\r\n    //           making code more reliable and readable.\r\n    function iRelocatePrincipalFirst(Asset storage from, Asset storage to, uint256 amount)\r\n        internal returns(Asset memory _amount)\r\n    {\r\n        _amount = iSubPrincipalFirst(from, amount);\r\n        iAdd(to, _amount);\r\n    }\r\n\r\n    // NOTE(pb): This is a little bit more expensive version of the commented-out function bellow,\r\n    //           but it avoids copying the code by reusing (calling existing functions), and so\r\n    //           making code more reliable and readable.\r\n    function iRelocateCompoundInterestFirst(Asset storage from, Asset storage to, uint256 amount)\r\n        internal returns(Asset memory _amount)\r\n    {\r\n        _amount = iSubCompoundInterestFirst(from, amount);\r\n        iAdd(to, _amount);\r\n    }\r\n\r\n    ////NOTE(pb): Whole Commented out code block bellow consumes less gas then variant above, however for the price\r\n    ////          of copy code which can be rather called (see notes in the commented out code):\r\n    //function iRelocatePrincipalFirst(Asset storage from, Asset storage to, uint256 amount)\r\n    //    internal pure returns(Asset memory _amount)\r\n    //{\r\n    //    if (from.principal >= amount) {\r\n    //        from.principal = from.principal.sub(amount);\r\n    //        to.principal = to.principal.add(amount);\r\n    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for compound as it is called in\r\n    //        //           uncommented variant of this function above.\r\n    //        _amount.principal = amount;\r\n    //    } else {\r\n    //        _amount.compoundInterest = amount.sub(from.principal);\r\n    //        // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\r\n    //        from.compoundInterest = from.compoundInterest.sub(_amount.compoundInterest);\r\n    //        to.compoundInterest = to.compoundInterest.add(_amount.compoundInterest);\r\n    //        to.principal = to.principal.add(from.principal);\r\n\r\n    //        _amount.principal = from.principal;\r\n    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for principal as it is called in\r\n    //        //           uncommented variant of this function above.\r\n    //         from.principal = 0;\r\n    //     }\r\n    //}\r\n\r\n\r\n    //function iRelocateCompoundInterestFirst(Asset storage from, Asset storage to, uint256 amount)\r\n    //    internal pure returns(Asset memory _amount)\r\n    //{\r\n    //    if (from.compoundInterest >= amount) {\r\n    //        from.compoundInterest = from.compoundInterest.sub(amount);\r\n    //        to.compoundInterest = to.compoundInterest.add(amount);\r\n    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for principal as it is called in\r\n    //        //           uncommented variant of this function above.\r\n    //        _amount.compoundInterest = amount;\r\n    //    } else {\r\n    //        _amount.principal = amount.sub(from.compoundInterest);\r\n    //        // NOTE(pb): Fail as soon as possible (even though this ordering of lines makes code less readable):\r\n    //        from.principal = from.principal.sub(_amount.principal);\r\n    //        to.principal = to.principal.add(_amount.principal);\r\n    //        to.compoundInterest = to.compoundInterest.add(from.compoundInterest);\r\n\r\n    //        _amount.compoundInterest = from.compoundInterest;\r\n    //        // NOTE(pb): Line bellow is enough - no necessity to call subtract for compound as it is called in\r\n    //        //           uncommented variant of this function above.\r\n    //         from.compoundInterest = 0;\r\n    //    }\r\n    //}\r\n}\r\n\r\n\r\nlibrary Finance {\r\n    using SafeMath for uint256;\r\n    using AssetLib for AssetLib.Asset;\r\n\r\n\r\n    function pow (int128 x, uint256 n)\r\n        internal pure returns (int128 r)\r\n    {\r\n        r = ABDKMath64x64.fromUInt (1);\r\n\r\n        while (n != 0) {\r\n            if ((n & 1) != 0) {\r\n                r = ABDKMath64x64.mul (r, x);\r\n                n -= 1;\r\n            } else {\r\n                x = ABDKMath64x64.mul (x, x);\r\n                n >>= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function compoundInterest (uint256 principal, uint256 ratio, uint256 n)\r\n        internal pure returns (uint256)\r\n    {\r\n        return ABDKMath64x64.mulu (\r\n            pow (\r\n                ABDKMath64x64.add (\r\n                    ABDKMath64x64.fromUInt (1),\r\n                    ABDKMath64x64.divu (\r\n                          ratio,\r\n                          10**18)\r\n                    ),\r\n                    n\r\n                ),\r\n            principal);\r\n    }\r\n\r\n\r\n    function compoundInterest (uint256 principal, int256 ratio, uint256 n)\r\n        internal pure returns (uint256)\r\n    {\r\n        return ABDKMath64x64.mulu (\r\n            pow (\r\n                ABDKMath64x64.add (\r\n                    ABDKMath64x64.fromUInt (1),\r\n                    ABDKMath64x64.divi (\r\n                          ratio,\r\n                          10**18)\r\n                    ),\r\n                    n\r\n                ),\r\n            principal);\r\n    }\r\n\r\n\r\n    function compoundInterest (AssetLib.Asset storage asset, uint256 interest, uint256 n)\r\n        internal\r\n    {\r\n        uint256 composite = asset.composite();\r\n        composite = compoundInterest(composite, interest, n);\r\n\r\n        asset.compoundInterest = composite.sub(asset.principal);\r\n    }\r\n}\r\n\r\n\r\n// [Canonical ERC20-FET] = 10**(-18)x[ECR20-FET]\r\ncontract Staking is AccessControl {\r\n    using SafeMath for uint256;\r\n    using AssetLib for AssetLib.Asset;\r\n\r\n    struct InterestRatePerBlock {\r\n        uint256 sinceBlock;\r\n        // NOTE(pb): To simplify, interest rate value can *not* be negative\r\n        uint256 rate; // Signed interest rate in [10**18] units => real_rate = rate / 10**18.\r\n        //// Number of users who bound stake while this particular interest rate was still in effect.\r\n        //// This enables to identify when we can delete interest rates which are no more used by anyone\r\n        //// (continuously from the beginning).\r\n        //uint256 numberOfRegisteredUsers;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 sinceBlock;\r\n        uint256 sinceInterestRateIndex;\r\n        AssetLib.Asset asset;\r\n    }\r\n\r\n    struct LockedAsset {\r\n        uint256 liquidSinceBlock;\r\n        AssetLib.Asset asset;\r\n    }\r\n\r\n    struct Locked {\r\n        AssetLib.Asset aggregate;\r\n        LockedAsset[] assets;\r\n    }\r\n\r\n    // *******    EVENTS    ********\r\n    event BindStake(\r\n          address indexed stakerAddress\r\n        , uint256 indexed sinceInterestRateIndex\r\n        , uint256 principal\r\n        , uint256 compoundInterest\r\n    );\r\n\r\n    /**\r\n     * @dev This event is triggered exclusivelly to recalculate the compount interest of ALREADY staked asset\r\n     *      for the poriod since it was calculated the last time. This means this event does *NOT* include *YET*\r\n     *      any added (resp. removed) asset user is currently binding (resp. unbinding).\r\n     *      The main motivation for this event is to give listener opportunity to get feedback what is the \r\n     *      user's staked asset value with compound interrest recalculated to *CURRENT* block *BEFORE* user's\r\n     *      action (binding resp. unbinding) affects user's staked asset value.\r\n     */\r\n    event StakeCompoundInterest(\r\n          address indexed stakerAddress\r\n        , uint256 indexed sinceInterestRateIndex\r\n        , uint256 principal // = previous_principal\r\n        , uint256 compoundInterest // = previous_principal * (pow(1+interest, _getBlockNumber()-since_block) - 1)\r\n    );\r\n\r\n    event LiquidityDeposited(\r\n          address indexed stakerAddress\r\n        , uint256 amount\r\n    );\r\n\r\n    event LiquidityUnlocked(\r\n          address indexed stakerAddress\r\n        , uint256 principal\r\n        , uint256 compoundInterest\r\n    );\r\n\r\n    event UnbindStake(\r\n          address indexed stakerAddress\r\n        , uint256 indexed liquidSinceBlock\r\n        , uint256 principal\r\n        , uint256 compoundInterest\r\n    );\r\n\r\n    event NewInterestRate(\r\n          uint256 indexed index\r\n        , uint256 rate // Signed interest rate in [10**18] units => real_rate = rate / 10**18\r\n    );\r\n\r\n    event Withdraw(\r\n          address indexed stakerAddress\r\n        , uint256 principal\r\n        , uint256 compoundInterest\r\n    );\r\n\r\n    event LockPeriod(uint64 numOfBlocks);\r\n    event Pause(uint256 sinceBlock);\r\n    event TokenWithdrawal(address targetAddress, uint256 amount);\r\n    event ExcessTokenWithdrawal(address targetAddress, uint256 amount);\r\n    event RewardsPoolTokenTopUp(address sender, uint256 amount);\r\n    event RewardsPoolTokenWithdrawal(address targetAddress, uint256 amount);\r\n    event DeleteContract();\r\n\r\n\r\n    bytes32 public constant DELEGATE_ROLE = keccak256(\"DELEGATE_ROLE\");\r\n    uint256 public constant DELETE_PROTECTION_PERIOD = 370285;// 60*24*60*60[s] / (14[s/block]) = 370285[block];\r\n\r\n    IERC20 public _token;\r\n\r\n    // NOTE(pb): This needs to be either completely replaced by multisig concept,\r\n    //           or at least joined with multisig.\r\n    //           This contract does not have, by-design on conceptual level, any clearly defined repeating\r\n    //           life-cycle behaviour (for instance: `initialise -> staking-period -> locked-period` cycle\r\n    //           with clear start & end of each life-cycle. Life-cycle of this contract is single monolithic\r\n    //           period `creation -> delete-contract`, where there is no clear place where to `update` the\r\n    //           earliest deletion block value, thus it would need to be set once at the contract creation\r\n    //           point what completely defeats the protection by time delay.\r\n    uint256 public _earliestDelete;\r\n    \r\n    uint256 public _pausedSinceBlock;\r\n    uint64 public _lockPeriodInBlocks;\r\n\r\n    // Represents amount of reward funds which are dedicated to cover accrued compound interest during user withdrawals.\r\n    uint256 public _rewardsPoolBalance;\r\n    // Accumulated global value of all principals (from all users) currently held in this contract (liquid, bound and locked).\r\n    uint256 public _accruedGlobalPrincipal;\r\n    AssetLib.Asset public _accruedGlobalLiquidity; // Exact\r\n    AssetLib.Asset public _accruedGlobalLocked; // Exact\r\n\r\n    uint256 public _interestRatesStartIdx;\r\n    uint256 public _interestRatesNextIdx;\r\n    mapping(uint256 => InterestRatePerBlock) public _interestRates;\r\n\r\n    mapping(address => Stake) _stakes;\r\n    mapping(address => Locked) _locked;\r\n    mapping(address => AssetLib.Asset) public _liquidity;\r\n\r\n\r\n    /* Only callable by owner */\r\n    modifier onlyOwner() {\r\n        require(_isOwner(), \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    /* Only callable by owner or delegate */\r\n    modifier onlyDelegate() {\r\n        require(_isOwner() || hasRole(DELEGATE_ROLE, msg.sender), \"Caller is neither owner nor delegate\");\r\n        _;\r\n    }\r\n\r\n    modifier verifyTxExpiration(uint256 expirationBlock) {\r\n        require(_getBlockNumber() <= expirationBlock, \"Transaction expired\");\r\n        _;\r\n    }\r\n\r\n    modifier verifyNotPaused() {\r\n        require(_pausedSinceBlock > _getBlockNumber(), \"Contract has been paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    /*******************\r\n    Contract start\r\n    *******************/\r\n    /**\r\n     * @param ERC20Address address of the ERC20 contract\r\n     */\r\n    constructor(\r\n          address ERC20Address\r\n        , uint256 interestRatePerBlock\r\n        , uint256 pausedSinceBlock\r\n        , uint64  lockPeriodInBlocks) \r\n    public \r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        _token = IERC20(ERC20Address);\r\n        _earliestDelete = _getBlockNumber().add(DELETE_PROTECTION_PERIOD);\r\n        \r\n        // NOTE(pb): Unnecessary initialisations, shall be done implicitly by VM\r\n        //_interestRatesStartIdx = 0;\r\n        //_interestRatesNextIdx = 0;\r\n        //_rewardsPoolBalance = 0;\r\n        //_accruedGlobalPrincipal = 0;\r\n        //_accruedGlobalLiquidity = 0;\r\n        //_accruedGlobalLocked = 0;\r\n\r\n        _updateLockPeriod(lockPeriodInBlocks);\r\n        _addInterestRate(interestRatePerBlock);\r\n        _pauseSince(pausedSinceBlock /* uint256(0) */);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Add new interest rate in to the ordered container of previously added interest rates\r\n     * @param rate - signed interest rate value in [10**18] units => real_rate [1] = rate [10**18] / 10**18\r\n     * @param expirationBlock - block number beyond which is the carrier Tx considered expired, and so rejected.\r\n     *                     This is for protection of Tx sender to exactly define lifecycle length of the Tx,\r\n     *                     and so avoiding uncertainty of how long Tx sender needs to wait for Tx processing.\r\n     *                     Tx can be withheld\r\n     * @dev expiration period\r\n     */\r\n    function addInterestRate(\r\n        uint256 rate,\r\n        uint256 expirationBlock\r\n        )\r\n        external\r\n        onlyDelegate()\r\n        verifyTxExpiration(expirationBlock)\r\n    {\r\n        _addInterestRate(rate);\r\n    }\r\n\r\n\r\n    function deposit(\r\n        uint256 amount,\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        bool makeTransfer = amount != 0;\r\n        if (makeTransfer) {\r\n            require(_token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n            _accruedGlobalPrincipal = _accruedGlobalPrincipal.add(amount);\r\n            _accruedGlobalLiquidity.principal = _accruedGlobalLiquidity.principal.add(amount);\r\n            emit LiquidityDeposited(msg.sender, amount);\r\n        }\r\n\r\n        uint256 curr_block = _getBlockNumber();\r\n        (, AssetLib.Asset storage liquidity,) = _collectLiquidity(msg.sender, curr_block);\r\n\r\n        if (makeTransfer) {\r\n            liquidity.principal = liquidity.principal.add(amount);\r\n       }\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Withdraws amount from sender' available liquidity pool back to sender address,\r\n     *         preferring withdrawal from compound interest dimension of liquidity.\r\n     *\r\n     * @param amount - value to withdraw\r\n     *\r\n     * @dev public access\r\n     */\r\n    function withdraw(\r\n        uint256 amount,\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 curr_block = _getBlockNumber();\r\n        (, AssetLib.Asset storage liquidity,) = _collectLiquidity(sender, curr_block);\r\n\r\n        AssetLib.Asset memory _amount = liquidity.iSubCompoundInterestFirst(amount);\r\n        _finaliseWithdraw(sender, _amount, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Withdraws *WHOLE* compound interest amount available to sender.\r\n     *\r\n     * @dev public access\r\n     */\r\n    function withdrawPrincipal(\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 curr_block = _getBlockNumber();\r\n        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\r\n\r\n        AssetLib.Asset memory _amount;\r\n        _amount.principal = liquidity.principal;\r\n        liquidity.principal = 0;\r\n\r\n        _finaliseWithdraw(sender, _amount, _amount.principal);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Withdraws *WHOLE* compound interest amount available to sender.\r\n     *\r\n     * @dev public access\r\n     */\r\n    function withdrawCompoundInterest(\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 curr_block = _getBlockNumber();\r\n        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\r\n\r\n        AssetLib.Asset memory _amount;\r\n        _amount.compoundInterest = liquidity.compoundInterest;\r\n        liquidity.compoundInterest = 0;\r\n\r\n        _finaliseWithdraw(sender, _amount, _amount.compoundInterest);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Withdraws whole liquidity available to sender back to sender' address,\r\n     *\r\n     * @dev public access\r\n     */\r\n    function withdrawWholeLiquidity(\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 curr_block = _getBlockNumber();\r\n        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(sender, curr_block);\r\n\r\n        _finaliseWithdraw(sender, liquidity, liquidity.composite());\r\n        liquidity.compoundInterest = 0;\r\n        liquidity.principal = 0;\r\n    }\r\n\r\n\r\n    function bindStake(\r\n        uint256 amount,\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        require(amount != 0, \"Amount must be higher than zero\");\r\n\r\n        uint256 curr_block = _getBlockNumber();\r\n\r\n        (, AssetLib.Asset storage liquidity, ) = _collectLiquidity(msg.sender, curr_block);\r\n\r\n        //// NOTE(pb): Strictly speaking, the following check is not necessary, since the requirement will be checked\r\n        ////           during the `iRelocatePrincipalFirst(...)` method code flow (see bellow).\r\n        //uint256 composite = liquidity.composite();\r\n        //require(amount <= composite, \"Insufficient liquidity.\");\r\n\r\n        Stake storage stake = _updateStakeCompoundInterest(msg.sender, curr_block);\r\n        AssetLib.Asset memory _amount = liquidity.iRelocatePrincipalFirst(stake.asset, amount);\r\n        _accruedGlobalLiquidity.iSub(_amount);\r\n\r\n       //// NOTE(pb): Emitting only info about Tx input `amount` value, decomposed to principal & compound interest\r\n       ////           coordinates based on liquidity available.\r\n       //if (amount > 0) {\r\n            emit BindStake(msg.sender, stake.sinceInterestRateIndex, _amount.principal, _amount.compoundInterest);\r\n        //}\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Unbinds amount from the stake of sender of the transaction,\r\n     *         and *LOCKS* it for number of blocks defined by value of the\r\n     *         `_lockPeriodInBlocks` state of this contract at the point\r\n     *         of this call.\r\n     *         The locked amount can *NOT* be withdrawn from the contract\r\n     *         *BEFORE* the lock period ends.\r\n     *\r\n     *         Unbinding (=calling this method) also means, that compound\r\n     *         interest will be calculated for period since la.\r\n     *\r\n     * @param amount - value to un-bind from the stake\r\n     *                 If `amount=0` then the **WHOLE** stake (including\r\n     *                 compound interest) will be unbound.\r\n     *\r\n     * @dev public access\r\n     */\r\n    function unbindStake(\r\n        uint256 amount, //NOTE: If zero, then all stake is withdrawn\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        verifyNotPaused\r\n    {\r\n        uint256 curr_block = _getBlockNumber();\r\n        address sender = msg.sender;\r\n        Stake storage stake = _updateStakeCompoundInterest(sender, curr_block);\r\n\r\n        uint256 stake_composite = stake.asset.composite();\r\n        AssetLib.Asset memory _amount;\r\n\r\n        if (amount > 0) {\r\n            // TODO(pb): Failing this way is expensive (causing rollback of state change).\r\n            //           It would be beneficial to retain newly calculated liquidity value\r\n            //           in to the state, thus the invested calculation would not come to wain.\r\n            //           However that comes with another implication - this would need\r\n            //           to return status/error code instead of reverting = caller MUST actually\r\n            //           check the return value, what might be trap for callers who do not expect\r\n            //           this behaviour (Tx execution passed , but in fact the essential feature\r\n            //           has not been fully executed).\r\n            require(amount <= stake_composite, \"Amount is higher than stake\");\r\n\r\n            if (_lockPeriodInBlocks == 0) {\r\n                _amount = stake.asset.iRelocateCompoundInterestFirst(_liquidity[sender], amount);\r\n                _accruedGlobalLiquidity.iAdd(_amount);\r\n                emit UnbindStake(sender, curr_block, _amount.principal, _amount.compoundInterest);\r\n                emit LiquidityUnlocked(sender, _amount.principal, _amount.compoundInterest);\r\n            } else {\r\n                Locked storage locked = _locked[sender];\r\n                LockedAsset storage newLockedAsset = locked.assets.push();\r\n                newLockedAsset.liquidSinceBlock = curr_block.add(_lockPeriodInBlocks);\r\n                _amount = stake.asset.iRelocateCompoundInterestFirst(newLockedAsset.asset, amount);\r\n\r\n                _accruedGlobalLocked.iAdd(_amount);\r\n                locked.aggregate.iAdd(_amount);\r\n\r\n                // NOTE: Emitting only info about Tx input values, not resulting compound values\r\n                emit UnbindStake(sender, newLockedAsset.liquidSinceBlock, _amount.principal, _amount.compoundInterest);\r\n            }\r\n        } else {\r\n            if (stake_composite == 0) {\r\n                // NOTE(pb): Nothing to do\r\n                return;\r\n            }\r\n\r\n            _amount = stake.asset;\r\n            stake.asset.principal = 0;\r\n            stake.asset.compoundInterest = 0;\r\n\r\n            if (_lockPeriodInBlocks == 0) {\r\n                _liquidity[sender].iAdd(_amount);\r\n                _accruedGlobalLiquidity.iAdd(_amount);\r\n                emit UnbindStake(sender, curr_block, _amount.principal, _amount.compoundInterest);\r\n                emit LiquidityUnlocked(sender, _amount.principal, _amount.compoundInterest);\r\n            } else {\r\n                Locked storage locked = _locked[sender];\r\n                LockedAsset storage newLockedAsset = locked.assets.push();\r\n                newLockedAsset.liquidSinceBlock = curr_block.add(_lockPeriodInBlocks);\r\n                newLockedAsset.asset = _amount;\r\n\r\n                _accruedGlobalLocked.iAdd(_amount);\r\n                locked.aggregate.iAdd(_amount);\r\n\r\n                // NOTE: Emitting only info about Tx input values, not resulting compound values\r\n                emit UnbindStake(msg.sender, newLockedAsset.liquidSinceBlock, newLockedAsset.asset.principal, newLockedAsset.asset.compoundInterest);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getRewardsPoolBalance() external view returns(uint256) {\r\n        return _rewardsPoolBalance;\r\n    }\r\n\r\n\r\n    function getEarliestDeleteBlock() external view returns(uint256) {\r\n        return _earliestDelete;\r\n    }\r\n\r\n\r\n    function getNumberOfLockedAssetsForUser(address forAddress) external view returns(uint256 length) {\r\n        length = _locked[forAddress].assets.length;\r\n    }\r\n\r\n\r\n    function getLockedAssetsAggregateForUser(address forAddress) external view returns(uint256 principal, uint256 compoundInterest) {\r\n        AssetLib.Asset storage aggregate = _locked[forAddress].aggregate;\r\n        return (aggregate.principal, aggregate.compoundInterest);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns locked assets decomposed in to 3 separate arrays (principal, compound interest, liquid since block)\r\n     *      NOTE(pb): This method might be quite expensive, depending on size of locked assets\r\n     */\r\n    function getLockedAssetsForUser(address forAddress)\r\n        external view\r\n        returns(uint256[] memory principal, uint256[] memory compoundInterest, uint256[] memory liquidSinceBlock)\r\n    {\r\n        LockedAsset[] storage lockedAssets = _locked[forAddress].assets;\r\n        uint256 length = lockedAssets.length;\r\n        if (length != 0) {\r\n            principal = new uint256[](length);\r\n            compoundInterest = new uint256[](length);\r\n            liquidSinceBlock = new uint256[](length);\r\n\r\n            for (uint256 i=0; i < length; ++i) {\r\n                LockedAsset storage la = lockedAssets[i];\r\n                AssetLib.Asset storage a = la.asset;\r\n                principal[i] = a.principal;\r\n                compoundInterest[i] = a.compoundInterest;\r\n                liquidSinceBlock[i] = la.liquidSinceBlock;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getStakeForUser(address forAddress) external view returns(uint256 principal, uint256 compoundInterest, uint256 sinceBlock, uint256 sinceInterestRateIndex) {\r\n        Stake storage stake = _stakes[forAddress];\r\n        principal = stake.asset.principal;\r\n        compoundInterest = stake.asset.compoundInterest;\r\n        sinceBlock = stake.sinceBlock;\r\n        sinceInterestRateIndex = stake.sinceInterestRateIndex;\r\n    }\r\n\r\n\r\n    /**\r\n       @dev Even though this is considered as administrative action (is not affected by\r\n            by contract paused state, it can be executed by anyone who wishes to\r\n            top-up the rewards pool (funds are sent in to contract, *not* the other way around).\r\n            The Rewards Pool is exclusively dedicated to cover withdrawals of user' compound interest,\r\n            which is effectively the reward.\r\n     */\r\n    function topUpRewardsPool(\r\n        uint256 amount,\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n    {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n        _rewardsPoolBalance = _rewardsPoolBalance.add(amount);\r\n        emit RewardsPoolTokenTopUp(msg.sender, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Updates Lock Period value\r\n     * @param numOfBlocks  length of the lock period\r\n     * @dev Delegate only\r\n     */\r\n    function updateLockPeriod(uint64 numOfBlocks, uint256 txExpirationBlock)\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        onlyDelegate\r\n    {\r\n        _updateLockPeriod(numOfBlocks);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Pauses all NON-administrative interaction with the contract since the specidfed block number \r\n     * @param blockNumber block number since which non-admin interaction will be paused (for all _getBlockNumber() >= blockNumber)\r\n     * @dev Delegate only\r\n     */\r\n    function pauseSince(uint256 blockNumber, uint256 txExpirationBlock)\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        onlyDelegate\r\n    {\r\n        _pauseSince(blockNumber);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw tokens from rewards pool.\r\n     *\r\n     * @param amount : amount to withdraw.\r\n     *                 If `amount == 0` then whole amount in rewards pool will be withdrawn.\r\n     * @param targetAddress : address to send tokens to\r\n     */\r\n    function withdrawFromRewardsPool(uint256 amount, address payable targetAddress,\r\n        uint256 txExpirationBlock\r\n        )\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        onlyOwner\r\n    {\r\n        if (amount == 0) {\r\n            amount = _rewardsPoolBalance;\r\n        } else {\r\n            require(amount <= _rewardsPoolBalance, \"Amount higher than rewards pool\");\r\n        }\r\n\r\n        // NOTE(pb): Strictly speaking, consistency check in following lines is not necessary,\r\n        //           the if-else code above guarantees that everything is alright:\r\n        uint256 contractBalance = _token.balanceOf(address(this));\r\n        uint256 expectedMinContractBalance = _accruedGlobalPrincipal.add(amount);\r\n        require(expectedMinContractBalance <= contractBalance, \"Contract inconsistency.\");\r\n\r\n        require(_token.transfer(targetAddress, amount), \"Not enough funds on contr. addr.\");\r\n\r\n        // NOTE(pb): No need for SafeMath.sub since the overflow is checked in the if-else code above.\r\n        _rewardsPoolBalance -= amount;\r\n\r\n        emit RewardsPoolTokenWithdrawal(targetAddress, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw \"excess\" tokens, which were sent to contract directly via direct ERC20.transfer(...),\r\n     *      without interacting with API of this (Staking) contract, what could be done only by mistake.\r\n     *      Thus this method is meant to be used primarily for rescue purposes, enabling withdrawal of such\r\n     *      \"excess\" tokens out of contract.\r\n     * @param targetAddress : address to send tokens to\r\n     * @param txExpirationBlock : block number until which is the transaction valid (inclusive).\r\n     *                            When transaction is processed after this block, it fails.\r\n     */\r\n    function withdrawExcessTokens(address payable targetAddress, uint256 txExpirationBlock)\r\n        external\r\n        verifyTxExpiration(txExpirationBlock)\r\n        onlyOwner\r\n    {\r\n        uint256 contractBalance = _token.balanceOf(address(this));\r\n        uint256 expectedMinContractBalance = _accruedGlobalPrincipal.add(_rewardsPoolBalance);\r\n        // NOTE(pb): The following subtraction shall *fail* (revert) IF the contract is in *INCONSISTENT* state,\r\n        //           = when contract balance is less than minial expected balance:\r\n        uint256 excessAmount = contractBalance.sub(expectedMinContractBalance);\r\n        require(_token.transfer(targetAddress, excessAmount), \"Not enough funds on contr. addr.\");\r\n        emit ExcessTokenWithdrawal(targetAddress, excessAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Delete the contract, transfers the remaining token and ether balance to the specified\r\n       payoutAddress\r\n     * @param payoutAddress address to transfer the balances to. Ensure that this is able to handle ERC20 tokens\r\n     * @dev owner only + only on or after `_earliestDelete` block\r\n     */\r\n    function deleteContract(address payable payoutAddress, uint256 txExpirationBlock)\r\n    external\r\n    verifyTxExpiration(txExpirationBlock)\r\n    onlyOwner\r\n    {\r\n        require(_earliestDelete >= _getBlockNumber(), \"Earliest delete not reached\");\r\n        uint256 contractBalance = _token.balanceOf(address(this));\r\n        require(_token.transfer(payoutAddress, contractBalance));\r\n        emit DeleteContract();\r\n        selfdestruct(payoutAddress);\r\n    }\r\n \r\n\r\n    // **********************************************************\r\n    // ******************    INTERNAL METHODS   *****************\r\n\r\n\r\n    /**\r\n     * @dev VIRTUAL Method returning bock number. Introduced for \r\n     *      testing purposes (allows mocking).\r\n     */\r\n    function _getBlockNumber() internal view virtual returns(uint256)\r\n    {\r\n        return block.number;\r\n    }\r\n\r\n\r\n    function _isOwner() internal view returns(bool) {\r\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Add new interest rate in to the ordered container of previously added interest rates\r\n     * @param rate - signed interest rate value in [10**18] units => real_rate [1] = rate [10**18] / 10**18\r\n     */\r\n    function _addInterestRate(uint256 rate) internal \r\n    {\r\n        uint256 idx = _interestRatesNextIdx;\r\n        _interestRates[idx] = InterestRatePerBlock({\r\n              sinceBlock: _getBlockNumber()\r\n            , rate: rate\r\n            //,numberOfRegisteredUsers: 0\r\n            });\r\n        _interestRatesNextIdx = _interestRatesNextIdx.add(1);\r\n\r\n        emit NewInterestRate(idx, rate);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Updates Lock Period value\r\n     * @param numOfBlocks  length of the lock period\r\n     */\r\n    function _updateLockPeriod(uint64 numOfBlocks) internal\r\n    {\r\n        _lockPeriodInBlocks = numOfBlocks;\r\n        emit LockPeriod(numOfBlocks);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Pauses all NON-administrative interaction with the contract since the specidfed block number \r\n     * @param blockNumber block number since which non-admin interaction will be paused (for all _getBlockNumber() >= blockNumber)\r\n     */\r\n    function _pauseSince(uint256 blockNumber) internal \r\n    {\r\n        uint256 currentBlockNumber = _getBlockNumber();\r\n        _pausedSinceBlock = blockNumber < currentBlockNumber ? currentBlockNumber : blockNumber;\r\n        emit Pause(_pausedSinceBlock);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Withdraws amount from sender' available liquidity pool back to sender address,\r\n     *         preferring withdrawal from compound interest dimension of liquidity.\r\n     *\r\n     * @param amount - value to withdraw\r\n     *\r\n     * @dev NOTE(pb): Passing redundant `uint256 amount` (on top of the `Asset _amount`) in the name\r\n     *                of performance to avoid calculating it again from `_amount` (or the other way around).\r\n     *                IMPLICATION: Caller **MUST** pass correct values, ensuring that `amount == _amount.composite()`,\r\n     *                since this private method is **NOT** verifying this condition due to performance reasons.\r\n     */\r\n    function _finaliseWithdraw(address sender, AssetLib.Asset memory _amount, uint256 amount) internal {\r\n         if (amount != 0) {\r\n            require(_rewardsPoolBalance >= _amount.compoundInterest, \"Not enough funds in rewards pool\");\r\n            require(_token.transfer(sender, amount), \"Transfer failed\");\r\n\r\n            _rewardsPoolBalance = _rewardsPoolBalance.sub(_amount.compoundInterest);\r\n            _accruedGlobalPrincipal = _accruedGlobalPrincipal.sub(_amount.principal);\r\n            _accruedGlobalLiquidity.iSub(_amount);\r\n\r\n            // NOTE(pb): Emitting only info about Tx input `amount` value, decomposed to principal & compound interest\r\n            //           coordinates based on liquidity available.\r\n            emit Withdraw(msg.sender, _amount.principal, _amount.compoundInterest);\r\n         }\r\n    }\r\n\r\n\r\n    function _updateStakeCompoundInterest(address sender, uint256 at_block)\r\n        internal\r\n        returns(Stake storage stake)\r\n    {\r\n        stake = _stakes[sender];\r\n        uint256 composite = stake.asset.composite();\r\n        if (composite != 0)\r\n        {\r\n            // TODO(pb): There is more effective algorithm than this.\r\n            uint256 start_block = stake.sinceBlock;\r\n            // NOTE(pb): Probability of `++i`  or `j=i+1` overflowing is limitly approaching zero,\r\n            // since we would need to create `(1<<256)-1`, resp `1<<256)-2`,  number of interrest rates in order to reach the overflow\r\n            for (uint256 i=stake.sinceInterestRateIndex; i < _interestRatesNextIdx; ++i) {\r\n                InterestRatePerBlock storage interest = _interestRates[i];\r\n                // TODO(pb): It is not strictly necessary to do this assert, and rather fully rely\r\n                //           on correctness of `addInterestRate(...)` implementation.\r\n                require(interest.sinceBlock <= start_block, \"sinceBlock inconsistency\");\r\n                uint256 end_block = at_block;\r\n\r\n                uint256 j = i + 1;\r\n                if (j < _interestRatesNextIdx) {\r\n                    InterestRatePerBlock storage next_interest = _interestRates[j];\r\n                    end_block = next_interest.sinceBlock;\r\n                }\r\n\r\n                composite = Finance.compoundInterest(composite, interest.rate, end_block - start_block);\r\n                start_block = end_block;\r\n            }\r\n\r\n            stake.asset.compoundInterest = composite.sub(stake.asset.principal);\r\n        }\r\n\r\n        stake.sinceBlock = at_block;\r\n        stake.sinceInterestRateIndex = (_interestRatesNextIdx != 0 ? _interestRatesNextIdx - 1 : 0);\r\n        // TODO(pb): Careful: The `StakeCompoundInterest` event doers not carry explicit block number value - it relies\r\n        //           on the fact that Event implicitly carries value block.number where the event has been triggered,\r\n        //           what however can be different than value of the `at_block` input parameter passed in.\r\n        //           Thus this method needs to be EITHER refactored to drop the `at_block` parameter (and so get the\r\n        //           value internally by calling the `_getBlockNumber()` method), OR the `StakeCompoundInterest` event\r\n        //           needs to be extended to include the `uint256 sinceBlock` attribute.\r\n        //           The original reason for passing the `at_block` parameter was to spare gas for calling the\r\n        //           `_getBlockNumber()` method twice (by the caller of this method + by this method), what might NOT be\r\n        //           relevant anymore (after refactoring), since caller might not need to use the block number value anymore.\r\n        emit StakeCompoundInterest(sender, stake.sinceInterestRateIndex, stake.asset.principal, stake.asset.compoundInterest);\r\n    }\r\n\r\n\r\n    function _collectLiquidity(address sender, uint256 at_block)\r\n        internal\r\n        returns(AssetLib.Asset memory unlockedLiquidity, AssetLib.Asset storage liquidity, bool collected)\r\n    {\r\n        Locked storage locked = _locked[sender];\r\n        LockedAsset[] storage lockedAssets = locked.assets;\r\n        liquidity = _liquidity[sender];\r\n\r\n        for (uint256 i=0; i < lockedAssets.length; ) {\r\n            LockedAsset memory l = lockedAssets[i];\r\n\r\n            if (l.liquidSinceBlock > at_block) {\r\n                ++i; // NOTE(pb): Probability of overflow is zero, what is ensured by condition in this for cycle.\r\n                continue;\r\n            }\r\n\r\n            unlockedLiquidity.principal = unlockedLiquidity.principal.add(l.asset.principal);\r\n            // NOTE(pb): The following can potentially overflow, since accrued compound interest can be high, depending on values on sequence of interest rates & length of compounding intervals involved.\r\n            unlockedLiquidity.compoundInterest = unlockedLiquidity.compoundInterest.add(l.asset.compoundInterest);\r\n\r\n            // Copying last element of the array in to the current one,\r\n            // so that the last one can be popped out of the array.\r\n            // NOTE(pb): Probability of overflow during `-` operation is zero, what is ensured by condition in this for cycle.\r\n            uint256 last_idx = lockedAssets.length - 1;\r\n            if (i != last_idx) {\r\n                lockedAssets[i] = lockedAssets[last_idx];\r\n            }\r\n            // TODO(pb): It will be cheaper (GAS consumption-wise) to simply leave\r\n            // elements in array (do NOT delete them) and rather store \"amortised\"\r\n            // size of the array in secondary separate store variable (= do NOT\r\n            // use `array.length` as primary indication of array length).\r\n            // Destruction of the array items is expensive. Excess of \"allocated\"\r\n            // array storage can be left temporarily (or even permanently) unused.\r\n            lockedAssets.pop();\r\n        }\r\n\r\n        // TODO(pb): This should not be necessary.\r\n        if (lockedAssets.length == 0) {\r\n            delete _locked[sender];\r\n        }\r\n\r\n        collected = unlockedLiquidity.principal != 0 || unlockedLiquidity.compoundInterest != 0;\r\n        if (collected) {\r\n             emit LiquidityUnlocked(sender, unlockedLiquidity.principal, unlockedLiquidity.compoundInterest);\r\n\r\n            _accruedGlobalLocked.iSub(unlockedLiquidity);\r\n            if (lockedAssets.length != 0) {\r\n                locked.aggregate.iSub(unlockedLiquidity);\r\n            }\r\n\r\n            _accruedGlobalLiquidity.iAdd(unlockedLiquidity);\r\n\r\n            liquidity.iAdd(unlockedLiquidity);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pausedSinceBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriodInBlocks\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sinceInterestRateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"name\":\"BindStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DeleteContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExcessTokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"numOfBlocks\",\"type\":\"uint64\"}],\"name\":\"LockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"NewInterestRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sinceBlock\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsPoolTokenTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsPoolTokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sinceInterestRateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"name\":\"StakeCompoundInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidSinceBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"name\":\"UnbindStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELETE_PROTECTION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accruedGlobalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accruedGlobalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_accruedGlobalPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_earliestDelete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_interestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sinceBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_interestRatesNextIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_interestRatesStartIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockPeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pausedSinceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"addInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"bindStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"deleteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarliestDeleteBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getLockedAssetsAggregateForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getLockedAssetsForUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"principal\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compoundInterest\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidSinceBlock\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getNumberOfLockedAssetsForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"getStakeForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceInterestRateIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"pauseSince\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"topUpRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"unbindStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"numOfBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdrawCompoundInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdrawExcessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdrawFromRewardsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExpirationBlock\",\"type\":\"uint256\"}],\"name\":\"withdrawWholeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aea46a60368a7bd060eec7df8cba43b7ef41ad850000000000000000000000000000000000000000000000000000000944754ca900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021a27","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5436678265352631f897e2cef39869cf23c267c4a2f500784a8480a5ff10f776"}]}