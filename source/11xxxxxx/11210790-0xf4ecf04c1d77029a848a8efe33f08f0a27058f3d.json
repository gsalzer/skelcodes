{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/_Interfaces.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface myPoints {\n    // launch code \"AT ADDRESS\"  0xBac9EF6a9eBF7e109c1011C68b0Dbac8C309fCc6\n\n    //see your points\n    function balanceOf(address _address) external view returns(uint256);\n    \n    //see the discount of an address in base 1000 (20 = 2%)\n    function viewDiscountOf(address _address) external view returns(uint256);\n    \n    //check the eligibility of a discount. Returns a \"tranche\" -> 1 = 10%, 2 = 20%\n    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\n    \n    //update my discount: check my eligibility and activates the highest discount I can get.\n    function updateMyDiscountOf() external returns (bool);\n    \n    /*Discount Table nbLoyalty Points -> discount\n    0       -> 0%\n    5       -> 10%\n    10      -> 20%\n    25      -> 30%\n    50      -> 40%\n    100     -> 50%\n    250     -> 60%\n    500     -> 70%\n    1000    -> 80%\n    100000  -> 90%\n    */\n    \n    \n    //force discount: gives an arbitrary discount (should not work for the pleb... only governance):\n    function overrideDiscount(address _address, uint256 _newDiscount) external;\n}\n\ninterface Governance{\n    // launch code \"AT ADDRESS\"  0x064FD7D9C228e8a4a2bF247b432a34D6E1CB9442\n\n    //shows burn and fees rate. Base 1000 ( 1 = 0.1%   10 = 1%   100 = 10%)\n    function viewBurnRate() external returns (uint256); \n    function viewFeeRate() external returns (uint256); \n\n    //for governors only (should not work with plebls)\n    //use base1000 numbers. 1 = 0.1%, 10 = 1%\n    function changeBurnRate(uint _burnRate) external;     //base 1000\n    function changeFeeRate(uint _feeRate) external;   //base 1000\n    function setFeeDestination(address _nextDest) external view;\n}\n\ninterface IDeFiat_Gov {\n    function setActorLevel(address _address, uint256 _newLevel) external;\n    function changeBurnRate(uint _burnRate) external;\n    function changeFeeRate(uint _feeRate) external;\n    function setFeeDestination(address _nextDest) external;\n\n    //== SET EXTERNAL VARIABLES on the DeFiat_Points contract ==  \n    function setTxTreshold(uint _amount) external;\n    function overrideDiscount(address _address, uint256 _newDiscount) external;\n    function overrideLoyaltyPoints(address _address, uint256 _newPoints) external;\n    function setDiscountTranches(uint256 _tranche, uint256 _pointsNeeded) external;\n}\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n}\n\ninterface IUniswapV2Pair {\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface X_DFTfarming {\n    // at address: \n    function stake(uint256 amount) external; //stake shitcoins\n    function unStake(uint256 amount) external; //wd Stake only\n    function takeReward() external; //wd reward\n\n    function myRewards() external view returns(uint256);\n    function myStake() external view returns(uint256);\n    // 100000000000000000000 = 100 TOKENS\n}\n\ninterface X_Defiat_Token {\n    // at address: 0xB571d40e4A7087C1B73ce6a3f29EaDfCA022C5B2\n    function balanceOf(address account) external view returns(uint256);\n    function approve(address spender, uint256 amount) external;\n}\n\ninterface X_Defiat_Points {\n    // 0x70C7d7856E1558210CFbf27b7F17853655752453\n    function overrideDiscount(address _address, uint256 _newDiscount) external;\n    function overrideLoyaltyPoints(address _address, uint256 _newPoints) external;\n    function approve(address spender, uint256 amount) external;\n        //whitelist the Locking Contract at 100 (100%) discount\n}\n\ninterface X_flusher {\n    function flushPool(address _recipient, address _ERC20address) external;\n}\n\ninterface IDungeon {\n    function myStake(address _address) external view returns(uint256);\n    function myRewards(address _address) external view returns(uint256);\n}\n\ninterface I_Defiat_Points {\n    // 0x70c7d7856e1558210cfbf27b7f17853655752453\n    function overrideDiscount(address _address, uint256 _newDiscount) external;\n    //whitelist the Locking Contract at 100 (100%) discount\n}\n\ninterface IDeFiat_Points {\n    function setTxTreshold(uint _amount) external;\n}\n\n// File: contracts/SafeMath.sol\n\n// File: @openzeppelin/contracts/math/Math.sol\n//\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\npragma solidity ^0.6.0;\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath{\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n        /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: contracts/Context.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/Allowable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\ncontract Allowable is Context {\n    mapping(address => bool) allowed;\n    \n    modifier onlyAllowed() {\n        require(allowed[_msgSender()] == true, \"onlyAllowed\");\n        _;\n    }\n    function manageAllowed(address _address, bool _bool) public onlyAllowed {\n        allowed[_address] = _bool;\n    }\n}\n\n// File: contracts/ERC20_Utils.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\ncontract ERC20_Utils is Allowable {\n    //ERC20_utils  \n    function withdrawAnyToken(address _token) external onlyAllowed returns (bool) {\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\n        _withdrawAnyToken(_msgSender(), _token, _amount);\n        return true;\n    } //get tokens sent by error to contract\n\n    function _withdrawAnyToken(address _recipient, address _ERC20address, uint256 _amount) internal returns (bool) {\n        IERC20(_ERC20address).transfer(_recipient, _amount); //use of the _ERC20 traditional transfer\n        return true;\n    } //get tokens sent by error\n\n    function kill() public onlyAllowed{\n        selfdestruct(_msgSender());\n    } //frees space on the ETH chain\n}\n\n// File: contracts/_ERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\n\ncontract _ERC20 is Context, IERC20 { \n    using SafeMath for uint256;\n    //using Address for address;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function _constructor(string memory name, string memory symbol) internal {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n//Public Functions\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n\n//Internal Functions\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }  //overriden in Defiat_Token\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}  //ERC20 without constructor\n\n// File: contracts/Uni_Price_v2.sol\n\n//SPDX-License-Identifier: stupid\n\n\npragma solidity >= 0.6;\n\n\n\n\n\n// oracle for on-chain uniswap prices w/ support for LP tokens\ncontract Uni_Price_v2 is ERC20_Utils {\n    using SafeMath for uint112;\n    using SafeMath for uint256;\n    \n    address public UNIfactory;\n    address public wETHaddress;\n    address public owner;\n    string public uniSymbol;\n \n    modifier onlyOwner {\n        require(msg.sender == owner, \"only owner\");\n        _;\n    }\n    \n    constructor(address _UNIfactory, address _wETHaddress) public {\n        owner = msg.sender;\n        UNIfactory = _UNIfactory; \n        //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; MAINNET ETH\n        //0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f; RINKEBY ETH\n\n        wETHaddress = _wETHaddress; \n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2; MAINNET ETH\n        //0xc778417E063141139Fce010982780140Aa0cD5Ab; RINKEBY ETH\n        uniSymbol = \"UNI-V2\";\n    }\n\n    function isUniLiquidityToken(address _token) public view returns (bool) {\n        if (keccak256(bytes(_ERC20(_token).symbol())) == keccak256(bytes(uniSymbol))) {\n            return true;\n        }\n        return false;\n    }\n    \n    function getUniPair(address _token) internal view returns(address) {\n        if (isUniLiquidityToken(_token)) {\n            return _token;\n        }\n        return IUniswapV2Factory(UNIfactory).getPair(_token, wETHaddress);\n    }\n\n    function _getUint256Reserves(address _token) internal view returns(uint256 rToken, uint256 rWETH) {\n        address _token0;\n        uint112 _rTKN;\n        uint112 _rWETH;\n\n        if (isUniLiquidityToken(_token)) {\n            _token0 = IUniswapV2Pair(_token).token0();\n\n            if(_token0 == wETHaddress) {\n                (_rWETH, _rTKN, ) = IUniswapV2Pair(_token).getReserves(); //returns r0, r1, time\n            }\n            else {\n                (_rTKN, _rWETH, ) = IUniswapV2Pair(_token).getReserves();\n            }\n            // formula for eth price of lp tokens in WETH is 2 * wethReserves / totalSupplyLpTokens()\n            return (_rWETH.mul(2), _ERC20(_token).totalSupply());\n        } else {\n            address _UNIpair = getUniPair(_token);\n            _token0 = IUniswapV2Pair(_UNIpair).token0();\n            if(_token0 == wETHaddress) {\n                (_rWETH, _rTKN, ) = IUniswapV2Pair(_UNIpair).getReserves(); //returns r0, r1, time\n            }\n            else {\n                (_rTKN, _rWETH, ) = IUniswapV2Pair(_UNIpair).getReserves();\n            }\n            return (uint256(_rTKN),uint256(_rWETH)); //price in gwei, needs to be corrected by nb of decimals of _token\n            //price of 1 token in GWEI\n        }\n    }  \n    \n    function adjuster(address _token) internal view returns(uint256) {\n        uint8 _decimals = _ERC20(_token).decimals();\n        require(_decimals <= 18,\"OverFlow risk, not supported\");\n        uint256 _temp = 36 - uint256(_decimals);\n        return 10**_temp;\n    }\n    \n    function getUniPrice(address _token) public view returns(uint) {\n\n        uint256 rToken; uint256 rWETH; uint256 _adjuster;\n        (rToken, rWETH) = _getUint256Reserves(_token);\n        _adjuster = adjuster(_token);\n        \n\n        return ( (rToken).mul(_adjuster) ).div(rWETH);       //IN GWEI\n    }\n    \n    function getTokenInfo(address _token) public view returns(\n        string memory name, string memory symbol, uint8 decimals, address uniPair, uint256 tokensPerETH) {\n        return(\n            _ERC20(_token).name(), \n            _ERC20(_token).symbol(), \n            _ERC20(_token).decimals(), \n            getUniPair(_token), \n            getUniPrice(_token)\n        ); //normalized as if every token is 18 decimals\n    }\n}\n\n// File: contracts/DeFiat_VotingPower.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n// DeFiat Snapshot Voting Power Contract\n// \n// This contract calculates the amount of votes (in 1e18) a user has.\n// When using this contract with snapshot, we can fairly calculate each address's total network stake at a given block\n//\n// Voting Power Algorithm:\n// MY_VOTING_POWER = DFT_BALANCE \n//  + (DFT_LP_BALANCE * PRICE_IN_DFT)\n//  + TOTAL_DFT_STAKED \n//  + TOTAL_DFT_PENDING_REWARDS \n//  + (TOTAL_DFT_LP_STAKED * PRICE_IN_DFT)\n//\n// In order to compute LP voting power, we get the current price of the DFT LP token,\n//  which is half ETH and half DFT, then convert the ETH into DFT, and add the two values\n\n\n\n\n\n\ncontract DeFiat_VotingPower is ERC20_Utils, Uni_Price_v2 {\n    using SafeMath for uint256;\n    \n    address public defiat;\n    address public defiatLp;\n    address public wethAddress;\n    uint internal stackPointer; // pointer for staking pool stack\n    \n    struct PoolStruct {\n        address poolAddress;\n        address stakedAddress;\n        address rewardAddress;\n    }\n    mapping (uint => PoolStruct) public stakingPools; // pools to calculate voting power from\n\n    constructor() \n        Uni_Price_v2(\n            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, \n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n        ) // MAINNET\n        // Uni_Price_v2(\n        //     0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, \n        //     0xc778417E063141139Fce010982780140Aa0cD5Ab\n        // ) // RINKEBY\n    public {\n        defiat = address(0xB6eE603933E024d8d53dDE3faa0bf98fE2a3d6f1); // MAINNET\n        // defiat = address(0xB571d40e4A7087C1B73ce6a3f29EaDfCA022C5B2); // RINKEBY\n\n        defiatLp = address(0xe2A1d215d03d7E9Fa0ed66355c86678561e4940a); // MAINNET\n        // defiatLp = address(0xF7426EAcb2b00398D4cefb3E24115c91821d6fB0); // RINKEBY\n    }\n\n    function myVotingPower(address _address) public view returns (uint256) {\n        // power initialized to DFT Balance\n        uint256 _power;\n        uint256 dftBalance = _ERC20(defiat).balanceOf(_address);\n        uint256 dftLpBalance = _ERC20(defiatLp).balanceOf(_address);\n        uint256 dftLpPower = getLiquidityTokenPower(defiatLp, dftLpBalance);\n        for (uint i = 0; i < stackPointer; i++) {\n            PoolStruct memory pool = stakingPools[i];\n            // get base staked tokens\n            uint256 stakedTokens = getStake(_address, pool.poolAddress);\n\n            // if its an LP token, we convert to total DFT value of tokens\n            // essentially x2 multiplier for LP votes\n            if (isUniLiquidityToken(pool.stakedAddress)) {\n                stakedTokens = getLiquidityTokenPower(pool.stakedAddress, stakedTokens);\n            }\n\n            // get reward tokens if the pool rewards in DFT\n            uint256 rewardTokens;\n            if (pool.rewardAddress == defiat) {\n                rewardTokens = getRewards(_address, pool.poolAddress);\n            }\n            \n\n            _power = _power.add(stakedTokens).add(rewardTokens);\n        }\n\n        return _power.add(dftBalance).add(dftLpPower);\n    }\n\n    function getLiquidityTokenPower(address tokenAddress, uint256 stakedTokens) public view returns (uint256) {\n        uint112 tokenReserves;\n        uint112 wethReserves;\n        uint256 tokensPerEth; \n        address token0 = IUniswapV2Pair(tokenAddress).token0();\n        address token1 = IUniswapV2Pair(tokenAddress).token1();\n        \n        if (token0 == wethAddress) {\n            (wethReserves, tokenReserves, ) = IUniswapV2Pair(tokenAddress).getReserves();\n            tokensPerEth = getUniPrice(token1);\n        } else {\n            (tokenReserves, wethReserves, ) = IUniswapV2Pair(tokenAddress).getReserves();\n            tokensPerEth = getUniPrice(token0);\n        }\n\n        uint256 wethInTokens = uint256(wethReserves)\n            .mul(tokensPerEth)\n            .div(1e18);\n\n        uint256 totalSupply = _ERC20(tokenAddress).totalSupply();\n        uint256 tokensPerLiquidityToken = wethInTokens\n            .add(uint256(tokenReserves))\n            .mul(1e18)\n            .div(totalSupply);\n\n        return stakedTokens.mul(tokensPerLiquidityToken).div(1e18);\n    }\n\n    function getStake(address _address, address _poolAddress) internal view returns (uint256) {\n        return IDungeon(_poolAddress).myStake(_address);\n    }\n\n    function getRewards(address _address, address _poolAddress) internal view returns (uint256) {\n        return IDungeon(_poolAddress).myRewards(_address);\n    }\n\n    // Owner functions\n\n    function pushStakingPool(address _poolAddress, address _stakedAddress, address _rewardAddress) external onlyOwner {\n        stakingPools[stackPointer++] = PoolStruct(_poolAddress, _stakedAddress, _rewardAddress);\n    }\n\n    function popStakingPool() external onlyOwner {\n        require(stackPointer > 0, \"Nothing to pop!\");\n        delete(stakingPools[--stackPointer]);\n    }\n\n    function flushPools() external onlyOwner {\n        require(stackPointer > 0, \"Nothing to pop!\");\n        while (stackPointer > 0) {\n            delete(stakingPools[--stackPointer]);\n        }\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNIfactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiatLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"getLiquidityTokenPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUniPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isUniLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"manageAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"myVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"pushStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETHaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAnyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeFiat_VotingPower","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}