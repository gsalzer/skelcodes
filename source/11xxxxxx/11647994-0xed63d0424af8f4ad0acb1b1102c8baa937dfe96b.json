{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n * \"Stash\" (v0.2 beta)\r\n * A simple tool for a personal smart contract wallet to help protect your assets.\r\n *\r\n * For more info checkout: https://squirrel.finance\r\n *\r\n */\r\n\r\ncontract InsurePlugin {\r\n\r\n    ERC20 bond = ERC20(0x0391D2021f89DC339F60Fff84546EA23E337750f);\r\n\r\n    SquirrelBondInsure bondInsure = SquirrelBondInsure(0x4b70388eAbb6b7596dcF78e9C8DFb6328B5442a1);\r\n    SquirrelStash stash;\r\n\r\n    constructor(address stashAddress) public {\r\n        stash = SquirrelStash(stashAddress);\r\n    }\r\n\r\n    modifier adminOnly() {\r\n        require(stash.adminAddresses(msg.sender) > 0);\r\n        _;\r\n    }\r\n    \r\n    function() external payable { /** Accepts eth **/ }\r\n\r\n    function stake(uint256 amount) external adminOnly {\r\n        stash.pluginEth(amount);\r\n        bondInsure.deposit.value(amount)(this);\r\n    }\r\n\r\n    function claimYield() external adminOnly {\r\n        bondInsure.claimYield();\r\n        bond.transfer(stash, bond.balanceOf(this));\r\n    }\r\n\r\n    function beginCashout(uint256 amount) external adminOnly {\r\n        bondInsure.beginCashout(amount);\r\n        uint256 bonds = bond.balanceOf(this);\r\n        if (bonds > 0) {\r\n            bond.transfer(stash, bonds);\r\n        }\r\n    }\r\n    \r\n    function doCashout() external adminOnly {\r\n        bondInsure.doCashout();\r\n        address(stash).transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SquirrelBondInsure {\r\n    function deposit(address recipient) payable external;\r\n    function claimYield() public;\r\n    function beginCashout(uint256 amount) external;\r\n    function doCashout() external;\r\n}\r\n\r\n\r\ncontract SquirrelStash {\r\n    mapping(address => uint256) public adminAddresses;\r\n    function() external payable { /** Accepts eth **/ }\r\n    function pluginEth(uint256 amount) external;\r\n    function pluginToken(address token, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    string public symbol;\r\n    uint8 public decimals;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"beginCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"stashAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"InsurePlugin","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b8af2596c079adff434f3d7370353d884cec3fd","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b072a404f618217e854b9e45e65f1d905ff26c5b0e07c0d8781d04f6fb471676"}]}