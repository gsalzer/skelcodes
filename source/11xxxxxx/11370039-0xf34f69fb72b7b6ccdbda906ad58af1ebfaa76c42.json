{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: MIT\"\r\npragma solidity 0.7.3;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EthanolVault is Ownable {\r\n    using SafeMath for uint;\r\n    IERC20 public EthanolAddress;\r\n    address public admin;\r\n    uint public rewardPool;\r\n    uint public totalSharedRewards;\r\n\r\n    mapping(address => uint) private rewardsEarned;\r\n    mapping(address => Savings) private _savings;\r\n\r\n    struct Savings {\r\n        address user;\r\n        uint startTime;\r\n        uint duration;\r\n        uint amount;\r\n    }\r\n\r\n    event _LockSavings(\r\n        address indexed stakeholder, \r\n        uint indexed stake,\r\n        uint indexed unlockTime\r\n    );\r\n\r\n    event _UnLockSavings(\r\n        address indexed stakeholder,\r\n        uint indexed value,\r\n        uint indexed timestamp\r\n    );\r\n\r\n    event _RewardShared(\r\n        uint indexed timestamp,\r\n        uint indexed rewards\r\n    );\r\n\r\n    constructor(IERC20 _EthanolAddress) {\r\n        EthanolAddress = _EthanolAddress;\r\n        admin = _msgSender();\r\n    }\r\n\r\n    function shareReward(address[] memory _accounts, uint[] memory _rewards) public {\r\n        require(_msgSender() == admin, \"Caller is not a validator\");\r\n        uint _totalRewards = 0;\r\n\r\n        for(uint i = 0; i < _accounts.length; i++) {\r\n            address _user = _accounts[i];\r\n            uint _reward = _rewards[i];\r\n            _totalRewards = _totalRewards.add(_reward);\r\n            rewardsEarned[_user] = rewardsEarned[_user].add(_reward);\r\n        }\r\n        \r\n        totalSharedRewards = totalSharedRewards.add(_totalRewards);\r\n        EthanolAddress.transferFrom(_msgSender(), address(this), _totalRewards);\r\n        emit _RewardShared(block.timestamp, _totalRewards);\r\n    }\r\n\r\n    \r\n    function checkRewards(address _user) public view returns(uint) {\r\n        return rewardsEarned[_user];\r\n    }\r\n    \r\n    function withdrawRewards(uint _amount) public {\r\n        require(rewardsEarned[_msgSender()] > 0, \"You have zero rewards to claim\");\r\n\r\n        rewardsEarned[_msgSender()] = rewardsEarned[_msgSender()].sub(_amount);\r\n        uint _taxedAmount = _amount.mul(10).div(100);\r\n        uint _totalBalance = _amount.sub(_taxedAmount);\r\n        \r\n        rewardPool = rewardPool.add(_taxedAmount);\r\n        EthanolAddress.transfer(_msgSender(), _totalBalance);\r\n    }\r\n\r\n    function monthlySave(uint _numberOfMonths, uint _amount) public {\r\n        uint _numberOfDays = _numberOfMonths.mul(31 days);\r\n        timeLock(_numberOfDays, _amount);\r\n    }\r\n\r\n    function yearlySave(uint _amount) public {\r\n        uint _numberOfDays = 365 days;\r\n        timeLock(_numberOfDays, _amount);\r\n    }\r\n\r\n    function timeLock(uint _duration, uint _amount) private {\r\n        require(_savings[_msgSender()].amount == 0, \"Funds has already been locked\");\r\n        \r\n        uint _taxAmount = _amount.mul(4).div(100);\r\n        uint _balance = _amount.sub(_taxAmount);\r\n\r\n        EthanolAddress.transferFrom(_msgSender(), address(this), _amount);\r\n        \r\n        rewardPool = rewardPool.add(_taxAmount);\r\n        _savings[_msgSender()] = Savings(\r\n            _msgSender(), \r\n            block.timestamp, \r\n            _duration, \r\n            _balance\r\n        );  \r\n        emit _LockSavings(_msgSender(), _balance, block.timestamp);             \r\n    }\r\n\r\n    function releaseTokens() public {\r\n        require(\r\n            block.timestamp > _savings[_msgSender()].startTime.add(_savings[_msgSender()].duration), \r\n            \"Unable to withdraw funds while tokens is still locked\"\r\n        );\r\n        require(_savings[_msgSender()].amount > 0, \"You have zero savings\");\r\n\r\n        uint _amount = _savings[_msgSender()].amount;\r\n        _savings[_msgSender()].amount = 0;\r\n\r\n        \r\n        if(_savings[_msgSender()].duration >= 365 days) {\r\n            uint _rewards = _amount.mul(500).div(100);\r\n            _amount = _amount.add(_rewards);\r\n            \r\n        } else {\r\n            uint _rewards = _amount.mul(40).div(100);\r\n            uint _numberOfMonths = _savings[_msgSender()].duration.div(31 days);\r\n            _rewards = _rewards.mul(_numberOfMonths);\r\n            _amount = _amount.add(_rewards);\r\n        }\r\n        \r\n        rewardPool = rewardPool.sub(_amount);\r\n        EthanolAddress.transfer(_msgSender(), _amount);\r\n        emit _UnLockSavings(_msgSender(), _amount, block.timestamp);\r\n    }\r\n    \r\n    function getLockedTokens(address _user) external view returns(uint) {\r\n        return _savings[_user].amount;\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"You can not send token directly to the contract\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_EthanolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"_LockSavings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"_RewardShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"_UnLockSavings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EthanolAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"monthlySave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"}],\"name\":\"shareReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"yearlySave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EthanolVault","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000063d0eea1d7c0d1e89d7e665708d7e8997c0a9ed6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d34b9896ac23c667f9141ba71548757cb4fe366c973d796d36e0fd9a4c8824e7"}]}