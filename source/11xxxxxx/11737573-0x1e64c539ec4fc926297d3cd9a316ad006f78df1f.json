{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Global Enums and Structs\n\n\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtLimit;\n    uint256 rateLimit;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\n// Part: IMarket\n\ninterface IMarket {\n   \n    function derivePayoutDistributionHash(uint256[] memory _payoutNumerators) external view returns (bytes32);\n    function doInitialReport(uint256[] memory _payoutNumerators, string memory _description, uint256 _additionalStake) external returns (bool);\n    function getUniverse() external view returns (address);\n    function getDisputeWindow() external view returns (address);\n    function getNumberOfOutcomes() external view returns (uint256);\n    function getNumTicks() external view returns (uint256);\n    function getMarketCreatorSettlementFeeDivisor() external view returns (uint256);\n    function getForkingMarket() external view returns (IMarket _market);\n    function getEndTime() external view returns (uint256);\n    function getWinningPayoutDistributionHash() external view returns (bytes32);\n    function getWinningPayoutNumerator(uint256 _outcome) external view returns (uint256);\n    function getWinningReportingParticipant() external view returns (address);\n    function getReputationToken() external view returns (address);\n    function getFinalizationTime() external view returns (uint256);\n    function getInitialReporter() external view returns (address);\n    function getDesignatedReportingEndTime() external view returns (uint256);\n    function getValidityBondAttoCash() external view returns (uint256);\n    function affiliateFeeDivisor() external view returns (uint256);\n    function getNumParticipants() external view returns (uint256);\n    function getDisputePacingOn() external view returns (bool);\n    function deriveMarketCreatorFeeAmount(uint256 _amount) external view returns (uint256);\n    function recordMarketCreatorFees(uint256 _marketCreatorFees, address _sourceAccount, bytes32 _fingerprint) external returns (bool);\n    function isContainerForReportingParticipant(address _reportingParticipant) external view returns (bool);\n    function isFinalizedAsInvalid() external view returns (bool);\n    function finalize() external returns (bool);\n    function isFinalized() external view returns (bool);\n    function isForkingMarket() external view returns (bool);\n    function getOpenInterest() external view returns (uint256);\n    function participants(uint256 index) external view returns (address);\n   \n}\n\n// Part: IShareToken\n\ninterface IShareToken {\n    function getMarket(uint256 outcome) external view returns (address);    \n}\n\n// Part: IUniswapV2Router01\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.2.0/VaultAPI\n\ninterface VaultAPI is IERC20 {\n    function apiVersion() external view returns (string memory);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    /*\n     * View how much the Vault would increase this strategy's borrow limit,\n     * based on it's present performance (since its last report). Can be used to\n     * determine expectedReturn in your strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /*\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on it's present performance (since its last report). Can be used to\n     * determine expectedReturn in your strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /*\n     * View how much the Vault expect this strategy to return at the current block,\n     * based on it's present performance (since its last report). Can be used to\n     * determine expectedReturn in your strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /*\n     * This is the main contact point where the strategy interacts with the Vault.\n     * It is critical that this call is handled as intended by the Strategy.\n     * Therefore, this function will be called by BaseStrategy to make sure the\n     * integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /*\n     * This function is used in the scenario where there is a newer strategy that\n     * would hold the same positions as this one, and those positions are easily\n     * transferrable to the newer strategy. These positions must be able to be\n     * transferred at the moment this call is made, if any prep is required to\n     * execute a full transfer in one transaction, that must be accounted for\n     * separately from this call.\n     */\n    function migrateStrategy(address _newStrategy) external;\n\n    /*\n     * This function should only be used in the scenario where the strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits it's position as fast as possible, such as a sudden change in market\n     * conditions leading to losses, or an imminent failure in an external\n     * dependency.\n     */\n    function revokeStrategy() external;\n\n    /*\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     *\n     */\n    function governance() external view returns (address);\n}\n\n// Part: nTrump\n\ninterface nTrump is IERC20{\n    function claim(address _account) external;\n    function shareToken() external view returns (IShareToken);\n    function tokenId() external view returns (uint256);\n}\n\n// Part: iearn-finance/yearn-vaults@0.2.0/BaseStrategy\n\n/*\n * BaseStrategy implements all of the required functionality to interoperate closely\n * with the core protocol. This contract should be inherited and the abstract methods\n * implemented to adapt the strategy to the particular needs it has to create a return.\n */\n\nabstract contract BaseStrategy {\n    using SafeMath for uint256;\n\n    // Version of this contract's StrategyAPI (must match Vault)\n    function apiVersion() public pure returns (string memory) {\n        return \"0.2.0\";\n    }\n\n    // Name of this contract's Strategy (Must override!)\n    // NOTE: You can use this field to manage the \"version\" of this strategy\n    //       e.g. `StrategySomethingOrOtherV1`. It's up to you!\n    function name() external virtual pure returns (string memory);\n\n    VaultAPI public vault;\n    address public strategist;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit);\n\n    // The minimum number of seconds between harvest calls\n    // NOTE: Override this value with your own, or set dynamically below\n    uint256 public minReportDelay = 86400; // ~ once a day\n\n    // The minimum multiple that `callCost` must be above the credit/profit to be \"justifiable\"\n    // NOTE: Override this value with your own, or set dynamically below\n    uint256 public profitFactor = 100;\n\n    // Use this to adjust the threshold at which running a debt causes a harvest trigger\n    uint256 public debtThreshold = 0;\n\n    bool public emergencyExit;\n\n    constructor(address _vault) public {\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n        strategist = msg.sender;\n        rewards = msg.sender;\n        keeper = msg.sender;\n    }\n\n    function setStrategist(address _strategist) external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        strategist = _strategist;\n    }\n\n    function setKeeper(address _keeper) external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        keeper = _keeper;\n    }\n\n    function setRewards(address _rewards) external {\n        require(msg.sender == strategist, \"!authorized\");\n        rewards = _rewards;\n    }\n\n    function setMinReportDelay(uint256 _delay) external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        minReportDelay = _delay;\n    }\n\n    function setProfitFactor(uint256 _profitFactor) external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        profitFactor = _profitFactor;\n    }\n\n    function setDebtThreshold(uint256 _debtThreshold) external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        debtThreshold = _debtThreshold;\n    }\n\n    /*\n     * Resolve governance address from Vault contract, used to make\n     * assertions on protected functions in the Strategy\n     */\n    function governance() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /*\n     * Provide an accurate estimate for the total amount of assets (principle + return)\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\n     * This total should be \"realizable\" e.g. the total value that could *actually* be\n     * obtained from this strategy if it were to divest it's entire position based on\n     * current on-chain conditions.\n     *\n     * NOTE: care must be taken in using this function, since it relies on external\n     *       systems, which could be manipulated by the attacker to give an inflated\n     *       (or reduced) value produced by this function, based on current on-chain\n     *       conditions (e.g. this function is possible to influence through flashloan\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\n     *\n     * NOTE: It is up to governance to use this function to correctly order this strategy\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\n     *       based on sudden withdrawals. This value should be higher than the total debt of\n     *       the strategy and higher than it's expected value to be \"safe\".\n     */\n    function estimatedTotalAssets() public virtual view returns (uint256);\n\n    /*\n     * Perform any strategy unwinding or other calls necessary to capture the \"free return\"\n     * this strategy has generated since the last time it's core position(s) were adjusted.\n     * Examples include unwrapping extra rewards. This call is only used during \"normal operation\"\n     * of a Strategy, and should be optimized to minimize losses as much as possible. This method\n     * returns any realized profits and/or realized losses incurred, and should return the total\n     * amounts of profits/losses/debt payments (in `want` tokens) for the Vault's accounting\n     * (e.g. `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`. It is okay for it\n     *       to be less than `_debtOutstanding`, as that should only used as a guide for how much\n     *       is left to pay back. Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /*\n     * Perform any adjustments to the core position(s) of this strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * strategy. Note that all \"free capital\" in the strategy after the report\n     * was made is available for reinvestment. Also note that this number could\n     * be 0, and you should handle that scenario accordingly.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /*\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\n     * is allowed, since when this method is called the strategist is no longer receiving\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\n     * while not suffering exorbitant losses. This function is used during emergency exit\n     * instead of `prepareReturn()`. This method returns any realized losses incurred, and\n     * should also return the amount of `want` tokens available to repay outstanding debt\n     * to the Vault.\n     */\n    function exitPosition() internal virtual returns (uint256 _loss, uint256 _debtPayment);\n\n    /*\n     * Vault calls this function after shares are created during `Vault.report()`.\n     * You can customize this function to any share distribution mechanism you want.\n     */\n    function distributeRewards(uint256 _shares) external virtual {\n        // Send 100% of newly-minted shares to the rewards address.\n        vault.transfer(rewards, _shares);\n    }\n\n    /*\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\n     * This is not the only consideration into issuing this trigger, for example if the position\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\n     *\n     * NOTE: `callCost` must be priced in terms of `want`\n     *\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\n     */\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\n        // We usually don't need tend, but if there are positions that need active maintainence,\n        // overriding this function is how you would signal for that\n        return false;\n    }\n\n    function tend() external {\n        if (keeper != address(0)) {\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        }\n\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /*\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\n     * This is not the only consideration into issuing this trigger, for example if the position\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by Yearn)\n     *\n     * NOTE: `callCost` must be priced in terms of `want`\n     *\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\n     */\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should trigger if hadn't been called in a while\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\n        //       because the resulting change should be large (might not always be the case)\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > 0) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total.add(debtThreshold) < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor * callCost < credit.add(profit));\n    }\n\n    function harvest() external {\n        if (keeper != address(0)) {\n            require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        }\n\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            (loss, debtPayment) = exitPosition(); // Free up as much capital as possible\n            // NOTE: Don't take performance fee in this scenario\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\n        }\n\n        // Allow Vault to take up to the \"harvested\" balance of this contract, which is\n        // the amount it has earned since the last time it reported to the Vault\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        emit Harvested(profit);\n    }\n\n    /*\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\n\n    function withdraw(uint256 _amountNeeded) external {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amount`\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.transfer(msg.sender, amountFreed);\n    }\n\n    /*\n     * Do anything necesseary to prepare this strategy for migration, such\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault) || msg.sender == governance());\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    function setEmergencyExit() external {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        emergencyExit = true;\n        exitPosition();\n        vault.revokeStrategy();\n    }\n\n    // Override this to add all tokens/tokenized positions this contract manages\n    // on a *persistant* basis (e.g. not just for swapping back to want ephemerally)\n    // NOTE: Do *not* include `want`, already included in `sweep` below\n    //\n    // Example:\n    //\n    //    function protectedTokens() internal override view returns (address[] memory) {\n    //      address[] memory protected = new address[](3);\n    //      protected[0] = tokenA;\n    //      protected[1] = tokenB;\n    //      protected[2] = tokenC;\n    //      return protected;\n    //    }\n    function protectedTokens() internal virtual view returns (address[] memory);\n\n    function sweep(address _token) external {\n        require(msg.sender == governance(), \"!authorized\");\n        require(_token != address(want), \"!want\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n\n// File: Strategy.sol\n\ncontract Strategy is BaseStrategy {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    uint256 public minBuy = 1000000 ether;\n    uint256 public minSell = 1.03 ether;\n    uint256 public lotSizeBuy = 1000 ether;\n    uint256 public lotSizeSell = 1000 *1e15;  //15 decimals\n\n\n    uint256 public daiSpent = 0;\n\n    nTrump public constant ntrump = nTrump(0x44Ea84a85616F8e9cD719Fc843DE31D852ad7240);\n    //bPool public bpool = bPool(0xEd0413D19cDf94759bBE3FE9981C4bd085b430Cf);\n    \n    IUniswapV2Router02 private sushiswapRouter = IUniswapV2Router02(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\n\n    constructor(address _vault) public BaseStrategy(_vault) {\n\n        require(address(want) == 0x6B175474E89094C44Da98b954EedeAC495271d0F, \"NOT DAI\"); \n       \n         minReportDelay = uint256(-1); // never call\n         profitFactor = uint256(-1)/2; // never call\n         debtThreshold = uint256(-1)/2;\n        \n\n        want.safeApprove(address(sushiswapRouter), uint256(-1));\n        ntrump.approve(address(sushiswapRouter), uint256(-1));\n\n    }\n    modifier management() {\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");\n        _;\n    }\n\n    function setMinBuy(uint256 _minBuy) external management {\n        minBuy = _minBuy;\n        require(minSell < minBuy, \"Below MinSell\");\n    }\n    function setMinSell(uint256 _minSell) external management {\n        minSell = _minSell;\n        require(minSell < minBuy, \"Above MinBuy\");\n    }\n    function setLotBuy(uint256 _minLot) external management {\n        lotSizeBuy = _minLot;\n    }\n    function setLotSell(uint256 _minLot) external management {\n        lotSizeSell = _minLot;\n    }\n\n    function name() external override pure returns (string memory) {\n        return \"NTrumpAcquirerV2\";\n    }\n\n    \n    function estimatedTotalAssets() public override view returns (uint256) {\n        return want.balanceOf(address(this));\n    }\n\n    function estimatedSettlementProfit() public view returns (uint256) {\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n        uint256 assets = estimatedTotalAssets().add(nTrumpOwned().mul(1e3));\n        if(assets > debt){\n            return assets - debt;\n        }\n        \n    }\n\n    function averagePrice() public view returns (uint256) {\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n        uint256 left = want.balanceOf(address(this));\n        if(left > debt) return 0;\n        uint256 spent = debt.sub(left);\n        uint256 assets = nTrumpOwned().mul(1e3);\n        if(assets > spent){\n            return assets.mul(1e18).div(spent);\n        }\n        \n    }\n\n    function nTrumpOwned() public view returns (uint256) {\n        return ntrump.balanceOf(address(this));\n    }\n\n   \n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        _loss; //we dont lose\n\n        \n        uint256 debt = vault.strategies(address(this)).totalDebt;\n\n        //if market is over. and we have ntrump. and ntrump has dai (means it won)\n        if(isFinalized() && ntrump.balanceOf(address(this)) > 0)\n        {\n            //if we have ntokens and market is finalised and there is no dai in ntrump we lost\n            if(want.balanceOf(address(ntrump)) > 0){\n                ntrump.claim(address(this));\n            }else{\n                _loss = debt.sub(want.balanceOf(address(this)));\n            }\n        }\n\n\n        uint256 wantBalance = want.balanceOf(address(this));\n\n        if(wantBalance > debt){\n            _profit = want.balanceOf(address(this)) - debt;\n        }\n\n        _debtPayment = Math.min(wantBalance - _profit, _debtOutstanding);\n\n    }\n\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        _debtOutstanding;\n\n        if(isFinalized())\n        {\n            return;\n        }\n\n        (bool buy, bool sell) = sellOrBuy();\n\n        uint256 ntrumpBal = ntrump.balanceOf(address(this));\n\n        if(buy && want.balanceOf(address(this)) >= lotSizeBuy){\n            swap(address(want), address(ntrump), lotSizeBuy);\n\n        }else if (sell && ntrumpBal >= 0) {\n            swap(address(ntrump), address(want), Math.min(ntrumpBal, lotSizeSell));\n        }\n\n    }\n\n    function sellOrBuy() public view returns (bool _buy, bool _sell){\n        \n        \n        address[] memory path = new address[](2);\n        path[0] = address(want);\n        path[1] = address(ntrump);\n        uint256[] memory amounts = sushiswapRouter.getAmountsOut(lotSizeBuy, path);\n        uint256 outAmount = amounts[amounts.length - 1];\n\n        \n        //dai to ntrump\n        //uint256 outAmount = bpool.calcOutGivenIn(balanceD, weightD, balanceN, weightN, lotSizeBuy, swapFee);\n\n        //decimal changes make this harder. 1e21 = 18 + 18 - 15\n        if(outAmount >= lotSizeBuy.mul(minBuy).div(1e21)){\n            _buy = true;\n            //return(true,false);\n        }\n\n        //ntrump to dai\n        path[0] = address(ntrump);\n        path[1] = address(want);\n        amounts = sushiswapRouter.getAmountsOut(lotSizeSell, path);\n        outAmount = amounts[amounts.length - 1];\n        //outAmount = bpool.calcOutGivenIn(balanceN, weightN, balanceD, weightD, lotSizeSell, swapFee);\n\n        //decimal changes make this harder. 1e21 = 18 + 18 - 15\n        if(outAmount.mul(minSell).div(1e21) >=  lotSizeSell){\n            _sell = true;\n             //return(false, true);\n        }\n    }\n\n    function isFinalized() public view returns (bool){\n         IShareToken shareToken = IShareToken(ntrump.shareToken());\n         IMarket market = IMarket(shareToken.getMarket(ntrump.tokenId()));\n        \n        return market.isFinalized();\n    }\n\n    function swap(\n        address _erc20ContractIn, address _erc20ContractOut, uint256 _numTokensToSupply\n    ) private returns (uint256) {\n\n        address[] memory path = new address[](2);\n        path[0] = _erc20ContractIn;\n        path[1] = _erc20ContractOut;\n\n        uint256[] memory amounts = sushiswapRouter.swapExactTokensForTokens(_numTokensToSupply, uint256(0), path, address(this), now);\n        return amounts[amounts.length - 1];\n\n        /*(uint256 a, ) = bpool.swapExactAmountIn(\n            _erc20ContractIn,_numTokensToSupply,_erc20ContractOut, 0,uint256(-1));\n\n        return a;*/\n       \n    }\n\n    \n    function exitPosition()\n        internal\n        override\n        returns (uint256 _loss, uint256 _debtPayment)\n    {\n        _loss;\n        _debtPayment; //suppress\n        require(false, \"Emergency Exit Disallowed\");\n    }\n\n    \n    function liquidatePosition(uint256 _amountNeeded)\n        internal\n        override\n        returns (uint256 _amountFreed)\n    {\n        _amountFreed = Math.min(want.balanceOf(address(this)), _amountNeeded);\n        \n\n    }\n\n    function harvestTrigger(uint256 callCost) public override view returns (bool) {\n        if(isFinalized() && ntrump.balanceOf(address(this)) > 0 && want.balanceOf(address(ntrump)) > 0){\n            return true;\n        }\n\n        return super.harvestTrigger(callCost);\n    }\n\n    function tendTrigger(uint256 callCost) public override view returns (bool) {\n        if(isFinalized()){\n            return false;\n        }\n\n        if(harvestTrigger(callCost)){\n            return false;\n        }\n       \n        (bool buy,bool sell) = sellOrBuy();\n\n        if(buy && want.balanceOf(address(this)) >= lotSizeBuy){\n            return true;\n        }\n        \n        if (sell && ntrump.balanceOf(address(this)) >= lotSizeSell){\n            return true;\n        }\n    }\n\n    \n    function prepareMigration(address _newStrategy) internal override {\n        \n\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n        ntrump.transfer(_newStrategy, ntrump.balanceOf(address(this)));\n    }\n\n    \n    function protectedTokens()\n        internal\n        override\n        view\n        returns (address[] memory)\n    {\n        address[] memory protected = new address[](2);\n        protected[0] = address(want);\n        protected[1] = address(ntrump);\n        return protected;\n\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedSettlementProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotSizeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotSizeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTrumpOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntrump\",\"outputs\":[{\"internalType\":\"contract nTrump\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sell\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLot\",\"type\":\"uint256\"}],\"name\":\"setLotBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLot\",\"type\":\"uint256\"}],\"name\":\"setLotSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"setMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSell\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba81fb02d5e7b94b341e82d1959c372590b852be","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}