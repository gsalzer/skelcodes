{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.15;\r\n\r\n// YAM ecosystem contract to facilitate staking DPI/ETH into INDEX farm\r\n\r\n\r\ncontract YamGoverned {\r\n    event NewGov(address oldGov, address newGov);\r\n    event NewPendingGov(address oldPendingGov, address newPendingGov);\r\n\r\n    address public gov;\r\n    address public pendingGov;\r\n\r\n    modifier onlyGov {\r\n        require(msg.sender == gov, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    function _setPendingGov(address who)\r\n        public\r\n        onlyGov\r\n    {\r\n        address old = pendingGov;\r\n        pendingGov = who;\r\n        emit NewPendingGov(old, who);\r\n    }\r\n\r\n    function _acceptGov()\r\n        public\r\n    {\r\n        require(msg.sender == pendingGov, \"!pendingGov\");\r\n        address oldgov = gov;\r\n        gov = pendingGov;\r\n        pendingGov = address(0);\r\n        emit NewGov(oldgov, gov);\r\n    }\r\n}\r\n\r\ncontract YamSubGoverned is YamGoverned {\r\n    /**\r\n     * @notice Event emitted when a sub gov is enabled/disabled\r\n     */\r\n    event SubGovModified(\r\n        address account,\r\n        bool isSubGov\r\n    );\r\n    /// @notice sub governors\r\n    mapping(address => bool) public isSubGov;\r\n\r\n    modifier onlyGovOrSubGov() {\r\n        require(msg.sender == gov || isSubGov[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setIsSubGov(address subGov, bool _isSubGov)\r\n        public\r\n        onlyGov\r\n    {\r\n        isSubGov[subGov] = _isSubGov;\r\n        emit SubGovModified(subGov, _isSubGov);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface UniswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint private constant Q112 = uint(1) << RESOLUTION;\r\n    uint private constant Q224 = Q112 << RESOLUTION;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\r\n        uint z;\r\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\r\n    }\r\n}\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair,\r\n        bool isToken0\r\n    ) internal view returns (uint priceCumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = UniswapPair(pair).getReserves();\r\n        if (isToken0) {\r\n          priceCumulative = UniswapPair(pair).price0CumulativeLast();\r\n\r\n          // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n          if (blockTimestampLast != blockTimestamp) {\r\n              // subtraction overflow is desired\r\n              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n              // addition overflow is desired\r\n              // counterfactual\r\n              priceCumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n          }\r\n        } else {\r\n          priceCumulative = UniswapPair(pair).price1CumulativeLast();\r\n          // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n          if (blockTimestampLast != blockTimestamp) {\r\n              // subtraction overflow is desired\r\n              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n              // addition overflow is desired\r\n              // counterfactual\r\n              priceCumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n          }\r\n        }\r\n\r\n    }\r\n}\r\n\r\ninterface ExpandedERC20 {\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract TWAPBound is YamSubGoverned {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant BASE = 10**18;\r\n\r\n    /// @notice For a sale of a specific amount\r\n    uint256 public sell_amount;\r\n\r\n    /// @notice For a purchase of a specific amount\r\n    uint256 public purchase_amount;\r\n\r\n    /// @notice Token to be sold\r\n    address public sell_token;\r\n\r\n    /// @notice Token to be puchased\r\n    address public purchase_token;\r\n\r\n    /// @notice Current uniswap pair for purchase & sale tokens\r\n    address public uniswap_pair1;\r\n\r\n    /// @notice Second uniswap pair for if TWAP uses two markets to determine price (for liquidity purposes)\r\n    address public uniswap_pair2;\r\n\r\n    /// @notice Flag for if purchase token is toke 0 in uniswap pair 2\r\n    bool public purchaseTokenIs0;\r\n\r\n    /// @notice Flag for if sale token is token 0 in uniswap pair\r\n    bool public saleTokenIs0;\r\n\r\n    /// @notice TWAP for first hop\r\n    uint256 public priceAverageSell;\r\n\r\n    /// @notice TWAP for second hop\r\n    uint256 public priceAverageBuy;\r\n\r\n    /// @notice last TWAP update time\r\n    uint32 public blockTimestampLast;\r\n\r\n    /// @notice last TWAP cumulative price;\r\n    uint256 public priceCumulativeLastSell;\r\n\r\n    /// @notice last TWAP cumulative price for two hop pairs;\r\n    uint256 public priceCumulativeLastBuy;\r\n\r\n    /// @notice Time between TWAP updates\r\n    uint256 public period;\r\n\r\n    /// @notice counts number of twaps\r\n    uint256 public twap_counter;\r\n\r\n    /// @notice Grace period after last twap update for a trade to occur\r\n    uint256 public grace = 60 * 60; // 1 hour\r\n\r\n    uint256 public constant MAX_BOUND = 10**17;\r\n\r\n    /// @notice % bound away from TWAP price\r\n    uint256 public twap_bounds;\r\n\r\n    /// @notice denotes a trade as complete\r\n    bool public complete;\r\n\r\n    bool public isSale;\r\n\r\n    function setup_twap_bound (\r\n        address sell_token_,\r\n        address purchase_token_,\r\n        uint256 amount_,\r\n        bool is_sale,\r\n        uint256 twap_period,\r\n        uint256 twap_bounds_,\r\n        address uniswap1,\r\n        address uniswap2, // if two hop\r\n        uint256 grace_ // length after twap update that it can occur\r\n    )\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        require(twap_bounds_ <= MAX_BOUND, \"slippage too high\");\r\n        sell_token = sell_token_;\r\n        purchase_token = purchase_token_;\r\n        period = twap_period;\r\n        twap_bounds = twap_bounds_;\r\n        isSale = is_sale;\r\n        if (is_sale) {\r\n            sell_amount = amount_;\r\n            purchase_amount = 0;\r\n        } else {\r\n            purchase_amount = amount_;\r\n            sell_amount = 0;\r\n        }\r\n\r\n        complete = false;\r\n        grace = grace_;\r\n        reset_twap(uniswap1, uniswap2, sell_token, purchase_token);\r\n    }\r\n\r\n    function reset_twap(\r\n        address uniswap1,\r\n        address uniswap2,\r\n        address sell_token_,\r\n        address purchase_token_\r\n    )\r\n        internal\r\n    {\r\n        uniswap_pair1 = uniswap1;\r\n        uniswap_pair2 = uniswap2;\r\n\r\n        blockTimestampLast = 0;\r\n        priceCumulativeLastSell = 0;\r\n        priceCumulativeLastBuy = 0;\r\n        priceAverageBuy = 0;\r\n\r\n        if (UniswapPair(uniswap1).token0() == sell_token_) {\r\n            saleTokenIs0 = true;\r\n        } else {\r\n            saleTokenIs0 = false;\r\n        }\r\n\r\n        if (uniswap2 != address(0)) {\r\n            if (UniswapPair(uniswap2).token0() == purchase_token_) {\r\n                purchaseTokenIs0 = true;\r\n            } else {\r\n                purchaseTokenIs0 = false;\r\n            }\r\n        }\r\n\r\n        update_twap();\r\n        twap_counter = 0;\r\n    }\r\n\r\n    function quote(\r\n      uint256 purchaseAmount,\r\n      uint256 saleAmount\r\n    )\r\n      public\r\n      view\r\n      returns (uint256)\r\n    {\r\n      uint256 decs = uint256(ExpandedERC20(sell_token).decimals());\r\n      uint256 one = 10**decs;\r\n      return purchaseAmount.mul(one).div(saleAmount);\r\n    }\r\n\r\n    function bounds()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniswap_quote = consult();\r\n        uint256 minimum = uniswap_quote.mul(BASE.sub(twap_bounds)).div(BASE);\r\n        return minimum;\r\n    }\r\n\r\n    function bounds_max()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniswap_quote = consult();\r\n        uint256 maximum = uniswap_quote.mul(BASE.add(twap_bounds)).div(BASE);\r\n        return maximum;\r\n    }\r\n\r\n\r\n    function withinBounds (\r\n        uint256 purchaseAmount,\r\n        uint256 saleAmount\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 quoted = quote(purchaseAmount, saleAmount);\r\n        uint256 minimum = bounds();\r\n        uint256 maximum = bounds_max();\r\n        return quoted > minimum && quoted < maximum;\r\n    }\r\n\r\n    function withinBoundsWithQuote (\r\n        uint256 quoted\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 minimum = bounds();\r\n        uint256 maximum = bounds_max();\r\n        return quoted > minimum && quoted < maximum;\r\n    }\r\n\r\n    // callable by anyone\r\n    function update_twap()\r\n        public\r\n    {\r\n        (uint256 sell_token_priceCumulative, uint32 blockTimestamp) =\r\n            UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair1, saleTokenIs0);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n        // ensure that at least one full period has passed since the last update\r\n        require(timeElapsed >= period, 'OTC: PERIOD_NOT_ELAPSED');\r\n\r\n        // overflow is desired\r\n        priceAverageSell = uint256(uint224((sell_token_priceCumulative - priceCumulativeLastSell) / timeElapsed));\r\n        priceCumulativeLastSell = sell_token_priceCumulative;\r\n\r\n\r\n        if (uniswap_pair2 != address(0)) {\r\n            // two hop\r\n            (uint256 buy_token_priceCumulative, ) =\r\n                UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair2, !purchaseTokenIs0);\r\n            priceAverageBuy = uint256(uint224((buy_token_priceCumulative - priceCumulativeLastBuy) / timeElapsed));\r\n\r\n            priceCumulativeLastBuy = buy_token_priceCumulative;\r\n        }\r\n\r\n        twap_counter = twap_counter.add(1);\r\n\r\n        blockTimestampLast = blockTimestamp;\r\n    }\r\n\r\n    function consult()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (uniswap_pair2 != address(0)) {\r\n            // two hop\r\n            uint256 purchasePrice;\r\n            uint256 salePrice;\r\n            uint256 one;\r\n            if (saleTokenIs0) {\r\n                uint8 decs = ExpandedERC20(sell_token).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            } else {\r\n                uint8 decs = ExpandedERC20(sell_token).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            }\r\n\r\n            if (priceAverageSell > uint192(-1)) {\r\n               // eat loss of precision\r\n               // effectively: (x / 2**112) * 1e18\r\n               purchasePrice = (priceAverageSell >> 112) * one;\r\n            } else {\r\n              // cant overflow\r\n              // effectively: (x * 1e18 / 2**112)\r\n              purchasePrice = (priceAverageSell * one) >> 112;\r\n            }\r\n\r\n            if (purchaseTokenIs0) {\r\n                uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token1()).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            } else {\r\n                uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token0()).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            }\r\n\r\n            if (priceAverageBuy > uint192(-1)) {\r\n                salePrice = (priceAverageBuy >> 112) * one;\r\n            } else {\r\n                salePrice = (priceAverageBuy * one) >> 112;\r\n            }\r\n\r\n            return purchasePrice.mul(salePrice).div(one);\r\n\r\n        } else {\r\n            uint256 one;\r\n            if (saleTokenIs0) {\r\n                uint8 decs = ExpandedERC20(sell_token).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            } else {\r\n                uint8 decs = ExpandedERC20(sell_token).decimals();\r\n                require(decs <= 18, \"too many decimals\");\r\n                one = 10**uint256(decs);\r\n            }\r\n            // single hop\r\n            uint256 purchasePrice;\r\n            if (priceAverageSell > uint192(-1)) {\r\n               // eat loss of precision\r\n               // effectively: (x / 2**112) * 1e18\r\n               purchasePrice = (priceAverageSell >> 112) * one;\r\n            } else {\r\n                // cant overflow\r\n                // effectively: (x * 1e18 / 2**112)\r\n                purchasePrice = (priceAverageSell * one) >> 112;\r\n            }\r\n            return purchasePrice;\r\n        }\r\n    }\r\n\r\n    function recencyCheck()\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return (block.timestamp - blockTimestampLast < grace) && (twap_counter > 0);\r\n    }\r\n}\r\n/// Helper for a reserve contract to perform uniswap, price bound actions\r\ncontract ReserveUniHelper is TWAPBound {\r\n\r\n    event NewReserves(address oldReserves, address NewReserves);\r\n\r\n    address public reserves;\r\n\r\n    function _getLPToken()\r\n        internal\r\n    {\r\n        require(!complete, \"Action complete\");\r\n\r\n        uint256 amount_;\r\n        if (isSale) {\r\n          amount_ = sell_amount;\r\n        } else {\r\n          amount_ = purchase_amount;\r\n        }\r\n        // early return\r\n        if (amount_ == 0) {\r\n          complete = true;\r\n          return;\r\n        }\r\n\r\n        require(recencyCheck(), \"TWAP needs updating\");\r\n\r\n        uint256 bal_of_a = IERC20(sell_token).balanceOf(reserves);\r\n        \r\n        if (amount_ > bal_of_a) {\r\n            // cap to bal\r\n            amount_ = bal_of_a;\r\n        }\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = UniswapPair(uniswap_pair1).getReserves();\r\n        uint256 quoted;\r\n        if (saleTokenIs0) {\r\n            quoted = quote(reserve1, reserve0);\r\n            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");\r\n        } else {\r\n            quoted = quote(reserve0, reserve1);\r\n            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");\r\n        }\r\n\r\n        uint256 amount_b;\r\n        {\r\n          uint256 decs = uint256(ExpandedERC20(sell_token).decimals());\r\n          uint256 one = 10**decs;\r\n          amount_b = quoted.mul(amount_).div(one);\r\n        }\r\n\r\n\r\n        uint256 bal_of_b = IERC20(purchase_token).balanceOf(reserves);\r\n        if (amount_b > bal_of_b) {\r\n            // we set the limit token as the sale token, but that could change\r\n            // between proposal and execution.\r\n            // limit amount_ and amount_b\r\n            amount_b = bal_of_b;\r\n\r\n            // reverse quote\r\n            if (!saleTokenIs0) {\r\n                quoted = quote(reserve1, reserve0);\r\n            } else {\r\n                quoted = quote(reserve0, reserve1);\r\n            }\r\n            // recalculate a\r\n            uint256 decs = uint256(ExpandedERC20(purchase_token).decimals());\r\n            uint256 one = 10**decs;\r\n            amount_ = quoted.mul(amount_b).div(one);\r\n        }\r\n\r\n        IERC20(sell_token).transferFrom(reserves, uniswap_pair1, amount_);\r\n        IERC20(purchase_token).transferFrom(reserves, uniswap_pair1, amount_b);\r\n        UniswapPair(uniswap_pair1).mint(address(this));\r\n        complete = true;\r\n    }\r\n\r\n    function _getUnderlyingToken(\r\n        bool skip_this\r\n    )\r\n        internal\r\n    {\r\n        require(!complete, \"Action complete\");\r\n        require(recencyCheck(), \"TWAP needs updating\");\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = UniswapPair(uniswap_pair1).getReserves();\r\n        uint256 quoted;\r\n        if (saleTokenIs0) {\r\n            quoted = quote(reserve1, reserve0);\r\n            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");\r\n        } else {\r\n            quoted = quote(reserve0, reserve1);\r\n            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");\r\n        }\r\n\r\n        // transfer lp tokens back, burn\r\n        if (skip_this) {\r\n          IERC20(uniswap_pair1).transfer(uniswap_pair1, IERC20(uniswap_pair1).balanceOf(address(this)));\r\n          UniswapPair(uniswap_pair1).burn(reserves);\r\n        } else {\r\n          IERC20(uniswap_pair1).transfer(uniswap_pair1, IERC20(uniswap_pair1).balanceOf(address(this)));\r\n          UniswapPair(uniswap_pair1).burn(address(this));\r\n        }\r\n        complete = true;\r\n    }\r\n\r\n    function _setReserves(address new_reserves)\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        address old_res = reserves;\r\n        reserves = new_reserves;\r\n        emit NewReserves(old_res, reserves);\r\n    }\r\n}\r\n\r\ninterface IndexStaker {\r\n    function stake(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function getReward() external;\r\n    function exit() external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ncontract IndexStaking is ReserveUniHelper {\r\n\r\n    constructor(address pendingGov_, address reserves_) public {\r\n        gov = msg.sender;\r\n        pendingGov = pendingGov_;\r\n        reserves = reserves_;\r\n        IERC20(lp).approve(address(staking), uint256(-1));\r\n    }\r\n\r\n    IndexStaker public staking = IndexStaker(0x8f06FBA4684B5E0988F215a47775Bb611Af0F986);\r\n\r\n    address public lp = address(0x4d5ef58aAc27d99935E5b6B4A6778ff292059991);\r\n\r\n    function currentStake()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return staking.balanceOf(address(this));\r\n    }\r\n\r\n    // callable by anyone assuming twap bounds checks\r\n    function stake()\r\n        public\r\n    {\r\n        _getLPToken();\r\n        uint256 amount = IERC20(lp).balanceOf(address(this));\r\n        staking.stake(amount);\r\n    }\r\n\r\n    // callable by anyone assuming twap bounds checks\r\n    function getUnderlying()\r\n        public\r\n    {\r\n        _getUnderlyingToken(true);\r\n    }\r\n\r\n    // ========= STAKING ========\r\n    function _stakeCurrentLPBalance()\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        uint256 amount = IERC20(lp).balanceOf(address(this));\r\n        staking.stake(amount);\r\n    }\r\n\r\n    function _approveStakingFromReserves(\r\n        bool isToken0Limited,\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        if (isToken0Limited) {\r\n          setup_twap_bound(\r\n              UniswapPair(lp).token0(), // The limiting asset\r\n              UniswapPair(lp).token1(),\r\n              amount, // amount of token0\r\n              true, // is sale\r\n              60 * 60, // 1 hour\r\n              5 * 10**15, // .5%\r\n              lp,\r\n              address(0), // if two hop\r\n              60 * 60 // length after twap update that it can occur\r\n          );\r\n        } else {\r\n          setup_twap_bound(\r\n              UniswapPair(lp).token1(), // The limiting asset\r\n              UniswapPair(lp).token0(),\r\n              amount, // amount of token1\r\n              true, // is sale\r\n              60 * 60, // 1 hour\r\n              5 * 10**15, // .5%\r\n              lp,\r\n              address(0), // if two hop\r\n              60 * 60 // length after twap update that it can occur\r\n          );\r\n        }\r\n    }\r\n    // ============================\r\n\r\n    // ========= EXITING ==========\r\n    function _exitStaking()\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        staking.exit();\r\n    }\r\n\r\n    function _exitAndApproveGetUnderlying()\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        staking.exit();\r\n        setup_twap_bound(\r\n            UniswapPair(lp).token0(), // doesnt really matter\r\n            UniswapPair(lp).token1(), // doesnt really matter\r\n            staking.balanceOf(address(this)), // amount of LP tokens\r\n            true, // is sale\r\n            60 * 60, // 1 hour\r\n            5 * 10**15, // .5%\r\n            lp,\r\n            address(0), // if two hop\r\n            60 * 60 // length after twap update that it can occur\r\n        );\r\n    }\r\n\r\n    function _exitStakingEmergency()\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        staking.withdraw(staking.balanceOf(address(this)));\r\n    }\r\n\r\n    function _exitStakingEmergencyAndApproveGetUnderlying()\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        staking.withdraw(staking.balanceOf(address(this)));\r\n        setup_twap_bound(\r\n            UniswapPair(lp).token0(), // doesnt really matter\r\n            UniswapPair(lp).token1(), // doesnt really matter\r\n            staking.balanceOf(address(this)), // amount of LP tokens\r\n            true, // is sale\r\n            60 * 60, // 1 hour\r\n            5 * 10**15, // .5%\r\n            lp,\r\n            address(0), // if two hop\r\n            60 * 60 // length after twap update that it can occur\r\n        );\r\n    }\r\n    // ============================\r\n\r\n\r\n    function _getTokenFromHere(address token)\r\n        public\r\n        onlyGovOrSubGov\r\n    {\r\n        IERC20 t = IERC20(token);\r\n        t.transfer(reserves, t.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGov_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserves_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"NewGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingGov\",\"type\":\"address\"}],\"name\":\"NewPendingGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReserves\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewReserves\",\"type\":\"address\"}],\"name\":\"NewReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSubGov\",\"type\":\"bool\"}],\"name\":\"SubGovModified\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isToken0Limited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_approveStakingFromReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_exitAndApproveGetUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_exitStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_exitStakingEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_exitStakingEmergencyAndApproveGetUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_getTokenFromHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"_setPendingGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_reserves\",\"type\":\"address\"}],\"name\":\"_setReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_stakeCurrentLPBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounds_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"complete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSubGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceAverageBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceAverageSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCumulativeLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCumulativeLastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTokenIs0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchase_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchase_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokenIs0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"subGov\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSubGov\",\"type\":\"bool\"}],\"name\":\"setIsSubGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sell_token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchase_token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_sale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"twap_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twap_bounds_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswap1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grace_\",\"type\":\"uint256\"}],\"name\":\"setup_twap_bound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IndexStaker\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twap_bounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twap_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswap_pair1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswap_pair2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update_twap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IndexStaking","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"0000000000000000000000008b4f1616751117c38a0f84f9a146cca191ea3ec500000000000000000000000097990b693835da58a281636296d2bf02787dea17","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://03fe324518d3cb1e7f9c96e627895b760bd3b4a3bdae8305c4509e3a81daac8c"}]}