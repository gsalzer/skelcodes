{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}   contract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}   abstract contract IOracleRelayer {\r\n    struct CollateralType {\r\n        address orcl;\r\n        uint256 safetyCRatio;\r\n    }\r\n\r\n    mapping (bytes32 => CollateralType) public collateralTypes;\r\n\r\n    function redemptionPrice() public virtual returns (uint256);\r\n    uint256 public redemptionRate;\r\n}   abstract contract ITaxCollector {\r\n    struct CollateralType {\r\n        uint256 stabilityFee;\r\n        uint256 updateTime;\r\n    }\r\n\r\n    mapping (bytes32 => CollateralType) public collateralTypes;\r\n\r\n    function taxSingle(bytes32) public virtual returns (uint);\r\n}   abstract contract ICoinJoin {\r\n    uint256 public decimals;\r\n\r\n    function join(address account, uint256 wad) external virtual;\r\n\r\n    function exit(address account, uint256 wad) external virtual;\r\n}   contract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}   abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n}   contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}   contract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}   abstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}   abstract contract IBasicTokenAdapters {\r\n    bytes32 public collateralType;\r\n\r\n    function decimals() virtual public view returns (uint);\r\n    function collateral() virtual public view returns (address);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}   abstract contract ISAFEManager {\r\n\r\n    function lastSAFEID(address) virtual public returns (uint);\r\n    function safeCan(address, uint, address) virtual public view returns (uint);\r\n    function collateralTypes(uint) virtual public view returns (bytes32);\r\n    function ownsSAFE(uint) virtual public view returns (address);\r\n    function safes(uint) virtual public view returns (address);\r\n    function safeEngine() virtual public view returns (address);\r\n    function openSAFE(bytes32, address) virtual public returns (uint);\r\n    function transferSAFEOwnership(uint, address) virtual public;\r\n    function allowSAFE(uint, address, uint) virtual public;\r\n    function handlerAllowed(address, uint) virtual public;\r\n    function modifySAFECollateralization(uint, int, int) virtual public;\r\n    function transferCollateral(uint, address, uint) virtual public;\r\n    function transferInternalCoins(uint, address, uint) virtual public;\r\n    function quitSystem(uint, address) virtual public;\r\n    function enterSystem(address, uint) virtual public;\r\n    function moveSAFE(uint, uint) virtual public;\r\n}   abstract contract ISAFEEngine {\r\n\r\n    struct SAFE {\r\n        uint256 lockedCollateral;\r\n        uint256 generatedDebt;\r\n    }\r\n\r\n    struct CollateralType {\r\n        // Total debt issued for this specific collateral type\r\n        uint256 debtAmount;        // [wad]\r\n        // Accumulator for interest accrued on this collateral type\r\n        uint256 accumulatedRate;   // [ray]\r\n        // Floor price at which a SAFE is allowed to generate debt\r\n        uint256 safetyPrice;       // [ray]\r\n        // Maximum amount of debt that can be generated with this collateral type\r\n        uint256 debtCeiling;       // [rad]\r\n        // Minimum amount of debt that must be generated by a SAFE using this collateral\r\n        uint256 debtFloor;         // [rad]\r\n        // Price at which a SAFE gets liquidated\r\n        uint256 liquidationPrice;  // [ray]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => SAFE )) public safes;\r\n    mapping (bytes32 => CollateralType) public collateralTypes;\r\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral;\r\n\r\n    function safeRights(address, address) virtual public view returns (uint);\r\n    function coinBalance(address) virtual public view returns (uint);\r\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\r\n    function approveSAFEModification(address) virtual public;\r\n    function transferInternalCoins(address, address, uint) virtual public;\r\n    function transferSAFECollateralAndDebt(bytes32, address, address, int, int) virtual public;\r\n}   /// @title Helper methods for RAISaverProxy\r\ncontract RAISaverProxyHelper is DSMath {\r\n\r\n    enum ManagerType { RAI }\r\n\r\n    /// @notice Returns a normalized debt _amount based on the current rate\r\n    /// @param _amount Amount of dai to be normalized\r\n    /// @param _rate Current rate of the stability fee\r\n    /// @param _daiVatBalance Balance od Dai in the Vat for that Safe\r\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\r\n        if (_daiVatBalance < mul(_amount, RAY)) {\r\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\r\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    /// @notice Converts a number to Rad percision\r\n    /// @param _wad The input number in wad percision\r\n    function toRad(uint _wad) internal pure returns (uint) {\r\n        return mul(_wad, 10 ** 27);\r\n    }\r\n\r\n    /// @notice Converts a number to 18 decimal percision\r\n    /// @param _joinAddr Join address of the collateral\r\n    /// @param _amount Number to be converted\r\n    function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {\r\n        return mul(_amount, 10 ** (18 - IBasicTokenAdapters(_joinAddr).decimals()));\r\n    }\r\n\r\n    /// @notice Converts a uint to int and checks if positive\r\n    /// @param _x Number to be converted\r\n    function toPositiveInt(uint _x) internal pure returns (int y) {\r\n        y = int(_x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    /// @notice Gets Dai amount in Vat which can be added to Safe\r\n    /// @param _safeEngine Address of Vat contract\r\n    /// @param _urn Urn of the Safe\r\n    /// @param _collType CollType of the Safe\r\n    function normalizePaybackAmount(address _safeEngine, address _urn, bytes32 _collType) internal view returns (int amount) {\r\n        uint dai = ISAFEEngine(_safeEngine).coinBalance(_urn);\r\n\r\n        (, uint rate,,,,) = ISAFEEngine(_safeEngine).collateralTypes(_collType);\r\n        (, uint art) = ISAFEEngine(_safeEngine).safes(_collType, _urn);\r\n\r\n        amount = toPositiveInt(dai / rate);\r\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\r\n    }\r\n\r\n    /// @notice Gets delta debt generated (Total Safe debt minus available safeHandler COIN balance)\r\n    /// @param safeEngine address\r\n    /// @param taxCollector address\r\n    /// @param safeHandler address\r\n    /// @param collateralType bytes32\r\n    /// @return deltaDebt\r\n    function _getGeneratedDeltaDebt(\r\n        address safeEngine,\r\n        address taxCollector,\r\n        address safeHandler,\r\n        bytes32 collateralType,\r\n        uint wad\r\n    ) internal returns (int deltaDebt) {\r\n        // Updates stability fee rate\r\n        uint rate = ITaxCollector(taxCollector).taxSingle(collateralType);\r\n        require(rate > 0, \"invalid-collateral-type\");\r\n\r\n        // Gets COIN balance of the handler in the safeEngine\r\n        uint coin = ISAFEEngine(safeEngine).coinBalance(safeHandler);\r\n\r\n        // If there was already enough COIN in the safeEngine balance, just exits it without adding more debt\r\n        if (coin < mul(wad, RAY)) {\r\n            // Calculates the needed deltaDebt so together with the existing coins in the safeEngine is enough to exit wad amount of COIN tokens\r\n            deltaDebt = toPositiveInt(sub(mul(wad, RAY), coin) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei (for the given COIN wad amount)\r\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\r\n        }\r\n    }\r\n\r\n    function _getRepaidDeltaDebt(\r\n        address safeEngine,\r\n        uint coin,\r\n        address safe,\r\n        bytes32 collateralType\r\n    ) internal view returns (int deltaDebt) {\r\n        // Gets actual rate from the safeEngine\r\n        (, uint rate,,,,) = ISAFEEngine(safeEngine).collateralTypes(collateralType);\r\n        require(rate > 0, \"invalid-collateral-type\");\r\n\r\n        // Gets actual generatedDebt value of the safe\r\n        (, uint generatedDebt) = ISAFEEngine(safeEngine).safes(collateralType, safe);\r\n\r\n        // Uses the whole coin balance in the safeEngine to reduce the debt\r\n        deltaDebt = toPositiveInt(coin / rate);\r\n        // Checks the calculated deltaDebt is not higher than safe.generatedDebt (total debt), otherwise uses its value\r\n        deltaDebt = uint(deltaDebt) <= generatedDebt ? - deltaDebt : - toPositiveInt(generatedDebt);\r\n    }\r\n\r\n    /// @notice Gets the whole debt of the Safe\r\n    /// @param _safeEngine Address of Vat contract\r\n    /// @param _usr Address of the Dai holder\r\n    /// @param _urn Urn of the Safe\r\n    /// @param _collType CollType of the Safe\r\n    function getAllDebt(address _safeEngine, address _usr, address _urn, bytes32 _collType) internal view returns (uint daiAmount) {\r\n        (, uint rate,,,,) = ISAFEEngine(_safeEngine).collateralTypes(_collType);\r\n        (, uint art) = ISAFEEngine(_safeEngine).safes(_collType, _urn);\r\n        uint dai = ISAFEEngine(_safeEngine).coinBalance(_usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        daiAmount = rad / RAY;\r\n\r\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\r\n    }\r\n\r\n    /// @notice Gets the token address from the Join contract\r\n    /// @param _joinAddr Address of the Join contract\r\n    function getCollateralAddr(address _joinAddr) internal view returns (address) {\r\n        return address(IBasicTokenAdapters(_joinAddr).collateral());\r\n    }\r\n\r\n    /// @notice Checks if the join address is one of the Ether coll. types\r\n    /// @param _joinAddr Join address to check\r\n    function isEthJoinAddr(address _joinAddr) internal view returns (bool) {\r\n        // if it's dai_join_addr don't check gem() it will fail\r\n        if (_joinAddr == 0x0A5653CCa4DB1B6E265F47CAf6969e64f1CFdC45) return false;\r\n\r\n        // if coll is weth it's and eth type coll\r\n        if (address(IBasicTokenAdapters(_joinAddr).collateral()) == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /// @notice Gets Safe info (collateral, debt)\r\n    /// @param _manager Manager contract\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _collType CollType of the Safe\r\n    function getSafeInfo(ISAFEManager _manager, uint _safeId, bytes32 _collType) public view returns (uint, uint) {\r\n        address vat = _manager.safeEngine();\r\n        address urn = _manager.safes(_safeId);\r\n\r\n        (uint collateral, uint debt) = ISAFEEngine(vat).safes(_collType, urn);\r\n        (,uint rate,,,,) = ISAFEEngine(vat).collateralTypes(_collType);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Address that owns the DSProxy that owns the Safe\r\n    /// @param _manager Manager contract\r\n    /// @param _safeId Id of the Safe\r\n    function getOwner(ISAFEManager _manager, uint _safeId) public view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(_manager.ownsSAFE(_safeId)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Based on the manager type returns the address\r\n    /// @param _managerType Type of vault manager to use\r\n    function getManagerAddr(ManagerType _managerType) public pure returns (address) {\r\n        if (_managerType == ManagerType.RAI) {\r\n            return 0xEfe0B4cA532769a3AE758fD82E1426a03A94F185;\r\n        }\r\n    }\r\n}   interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}   library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}   library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}   library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}   contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}   contract BotRegistry is AdminAuth {\r\n\r\n    mapping (address => bool) public botList;\r\n\r\n    constructor() public {\r\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\r\n\r\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\r\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\r\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\r\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\r\n    }\r\n\r\n    function setBot(address _botAddr, bool _state) public onlyOwner {\r\n        botList[_botAddr] = _state;\r\n    }\r\n\r\n}   abstract contract TokenInterface {\r\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}   interface ExchangeInterfaceV3 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\r\n}   contract ZrxAllowlist is AdminAuth {\r\n\r\n    mapping (address => bool) public zrxAllowlist;\r\n    mapping(address => bool) private nonPayableAddrs;\r\n\r\n    constructor() public {\r\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\r\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\r\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\r\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n\r\n        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n    }\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n\r\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = true;\r\n\t}\r\n\r\n\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = false;\r\n\t}\r\n\r\n\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\r\n\t\treturn nonPayableAddrs[_addr];\r\n\t}\r\n}      \r\n\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n}   \r\n\r\n\r\n\r\nabstract contract IFeeRecipient {\r\n    function getFeeAddr() public view virtual returns (address);\r\n    function changeWalletAddr(address _newWallet) public virtual;\r\n}   contract DFSExchangeHelper {\r\n\r\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \"Offchain data invalid\";\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\r\n\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\r\n\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == KYBER_ETH_ADDRESS) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n\r\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\r\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\r\n        // send back any leftover ether or tokens\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n\r\n        if (getBalance(_srcAddr) > 0) {\r\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\r\n        }\r\n\r\n        if (getBalance(_destAddr) > 0) {\r\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\r\n        }\r\n    }\r\n\r\n    /// @notice Takes a feePercentage and sends it to wallet\r\n    /// @param _amount Dai amount of the whole trade\r\n    /// @param _user Address of the user\r\n    /// @param _token Address of the token\r\n    /// @param _dfsFeeDivider Dfs fee divider\r\n    /// @return feeAmount Amount in Dai owner earned on the fee\r\n    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\r\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\r\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\r\n        }\r\n\r\n        if (_dfsFeeDivider == 0) {\r\n            feeAmount = 0;\r\n        } else {\r\n            feeAmount = _amount / _dfsFeeDivider;\r\n\r\n            // fee can't go over 10% of the whole amount\r\n            if (feeAmount > (_amount / 10)) {\r\n                feeAmount = _amount / 10;\r\n            }\r\n\r\n            address walletAddr = _feeRecipient.getFeeAddr();\r\n\r\n            if (_token == KYBER_ETH_ADDRESS) {\r\n                payable(walletAddr).transfer(feeAmount);\r\n            } else {\r\n                ERC20(_token).safeTransfer(walletAddr, feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(ERR_OFFCHAIN_DATA_INVALID);\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n\r\n    /// @notice Converts Kybers Eth address -> Weth\r\n    /// @param _src Input address\r\n    function ethToWethAddr(address _src) internal pure returns (address) {\r\n        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\r\n    }\r\n}   contract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tconstructor() public {\r\n\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\r\n\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\r\n\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\r\n\t}\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}      \r\n\r\n\r\n\r\nabstract contract OffchainWrapperInterface is DFSExchangeData {\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ActionType _type\r\n    ) virtual public payable returns (bool success, uint256);\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\r\n\r\n    string public constant ERR_SLIPPAGE_HIT = \"Slippage hit\";\r\n    string public constant ERR_DEST_AMOUNT_MISSING = \"Dest amount missing\";\r\n    string public constant ERR_WRAPPER_INVALID = \"Wrapper invalid\";\r\n    string public constant ERR_NOT_ZEROX_EXCHANGE = \"Zerox exchange invalid\";\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\r\n        }\r\n\r\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\r\n\r\n            if (success) {\r\n                wrapper = exData.offchainData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\r\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\r\n            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\r\n        } else {\r\n            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\r\n        }\r\n\r\n        return (wrapper, swapedTokens);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\r\n\r\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\r\n        }\r\n\r\n        if (exData.offchainData.price > 0) {\r\n            (success, swapedTokens) = takeOrder(exData, ActionType.BUY);\r\n\r\n            if (success) {\r\n                wrapper = exData.offchainData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.BUY);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\r\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\r\n            require(getBalance(KYBER_ETH_ADDRESS) >= exData.destAmount, ERR_SLIPPAGE_HIT);\r\n        } else {\r\n            require(getBalance(exData.destAddr) >= exData.destAmount, ERR_SLIPPAGE_HIT);\r\n        }\r\n\r\n        return (wrapper, getBalance(exData.destAddr));\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ActionType _type\r\n    ) private returns (bool success, uint256) {\r\n        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        // send src amount\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\r\n\r\n        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\r\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\r\n\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n\r\n        if (_type == ActionType.SELL) {\r\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\r\n                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\r\n        } else {\r\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\r\n                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external virtual payable {}\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements Boost and Repay for Reflexer Safes\r\ncontract RAISaverProxy is DFSExchangeCore, RAISaverProxyHelper {\r\n\r\n    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\r\n    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\r\n\r\n    bytes32 public constant ETH_COLL_TYPE = 0x4554482d41000000000000000000000000000000000000000000000000000000;\r\n\r\n    address public constant SAFE_ENGINE_ADDRESS = 0xCC88a9d330da1133Df3A7bD823B95e52511A6962;\r\n    address public constant ORACLE_RELAYER_ADDRESS = 0x4ed9C0dCa0479bC64d8f4EB3007126D5791f7851;\r\n    address public constant RAI_JOIN_ADDRESS = 0x0A5653CCa4DB1B6E265F47CAf6969e64f1CFdC45;\r\n    address public constant TAX_COLLECTOR_ADDRESS = 0xcDB05aEda142a1B0D6044C09C64e4226c1a281EB;\r\n    address public constant RAI_ADDRESS = 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919;\r\n\r\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n\r\n    ISAFEEngine public constant safeEngine = ISAFEEngine(SAFE_ENGINE_ADDRESS);\r\n    ICoinJoin public constant raiJoin = ICoinJoin(RAI_JOIN_ADDRESS);\r\n    IOracleRelayer public constant oracleRelayer = IOracleRelayer(ORACLE_RELAYER_ADDRESS);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\r\n\r\n    /// @notice Repay - draws collateral, converts to Rai and repays the debt\r\n    /// @dev Must be called by the DSProxy contract that owns the Safe\r\n    function repay(\r\n        ExchangeData memory _exchangeData,\r\n        uint _safeId,\r\n        uint _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType\r\n    ) public payable {\r\n\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        address user = getOwner(ISAFEManager(managerAddr), _safeId);\r\n        bytes32 ilk = ISAFEManager(managerAddr).collateralTypes(_safeId);\r\n\r\n        drawCollateral(managerAddr, _safeId, _joinAddr, _exchangeData.srcAmount, true);\r\n\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        (, uint raiAmount) = _sell(_exchangeData);\r\n\r\n        raiAmount -= takeFee(_gasCost, raiAmount);\r\n\r\n        paybackDebt(managerAddr, _safeId, ilk, raiAmount, user);\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        logger.Log(address(this), msg.sender, \"RAIRepay\", abi.encode(_safeId, user, _exchangeData.srcAmount, raiAmount));\r\n\r\n    }\r\n\r\n    /// @notice Boost - draws Rai, converts to collateral and adds to Safe\r\n    /// @dev Must be called by the DSProxy contract that owns the Safe\r\n    function boost(\r\n        ExchangeData memory _exchangeData,\r\n        uint _safeId,\r\n        uint _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType\r\n    ) public payable {\r\n\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        address user = getOwner(ISAFEManager(managerAddr), _safeId);\r\n        bytes32 ilk = ISAFEManager(managerAddr).collateralTypes(_safeId);\r\n\r\n        uint raiDrawn = drawRai(managerAddr, _safeId, ilk, _exchangeData.srcAmount);\r\n\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        _exchangeData.srcAmount = raiDrawn - takeFee(_gasCost, raiDrawn);\r\n        (, uint swapedColl) = _sell(_exchangeData);\r\n\r\n        addCollateral(managerAddr, _safeId, _joinAddr, swapedColl, true);\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        logger.Log(address(this), msg.sender, \"RAIBoost\", abi.encode(_safeId, user, _exchangeData.srcAmount, swapedColl));\r\n    }\r\n\r\n    /// @notice Draws Rai from the Safe\r\n    /// @dev If _raiAmount is bigger than max available we'll draw max\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _collType Coll type of the Safe\r\n    /// @param _raiAmount Amount of Rai to draw\r\n    function drawRai(address _managerAddr, uint _safeId, bytes32 _collType, uint _raiAmount) internal returns (uint) {\r\n        uint rate = ITaxCollector(TAX_COLLECTOR_ADDRESS).taxSingle(_collType);\r\n        uint raiVatBalance = safeEngine.coinBalance(ISAFEManager(_managerAddr).safes(_safeId));\r\n\r\n        uint maxAmount = getMaxDebt(_managerAddr, _safeId, _collType);\r\n\r\n        if (_raiAmount >= maxAmount) {\r\n            _raiAmount = sub(maxAmount, 1);\r\n        }\r\n\r\n        ISAFEManager(_managerAddr).modifySAFECollateralization(_safeId, int(0), normalizeDrawAmount(_raiAmount, rate, raiVatBalance));\r\n        ISAFEManager(_managerAddr).transferInternalCoins(_safeId, address(this), toRad(_raiAmount));\r\n\r\n        if (safeEngine.safeRights(address(this), address(RAI_JOIN_ADDRESS)) == 0) {\r\n            safeEngine.approveSAFEModification(RAI_JOIN_ADDRESS);\r\n        }\r\n\r\n        ICoinJoin(RAI_JOIN_ADDRESS).exit(address(this), _raiAmount);\r\n\r\n        return _raiAmount;\r\n    }\r\n\r\n    /// @notice Adds collateral to the Safe\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _joinAddr Address of the join contract for the Safe collateral\r\n    /// @param _amount Amount of collateral to add\r\n    /// @param _toWeth Should we convert to Weth\r\n    function addCollateral(address _managerAddr, uint _safeId, address _joinAddr, uint _amount, bool _toWeth) internal {\r\n        int convertAmount = 0;\r\n\r\n        if (isEthJoinAddr(_joinAddr) && _toWeth) {\r\n            TokenInterface(IBasicTokenAdapters(_joinAddr).collateral()).deposit{value: _amount}();\r\n            convertAmount = toPositiveInt(_amount);\r\n        } else {\r\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\r\n        }\r\n\r\n        ERC20(address(IBasicTokenAdapters(_joinAddr).collateral())).safeApprove(_joinAddr, _amount);\r\n\r\n        IBasicTokenAdapters(_joinAddr).join(address(this), _amount);\r\n\r\n        safeEngine.modifySAFECollateralization(\r\n            ISAFEManager(_managerAddr).collateralTypes(_safeId),\r\n            ISAFEManager(_managerAddr).safes(_safeId),\r\n            address(this),\r\n            address(this),\r\n            convertAmount,\r\n            0\r\n        );\r\n\r\n    }\r\n\r\n    /// @notice Draws collateral and returns it to DSProxy\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @dev If _amount is bigger than max available we'll draw max\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _joinAddr Address of the join contract for the Safe collateral\r\n    /// @param _amount Amount of collateral to draw\r\n    /// @param _toEth Boolean if we should unwrap Ether\r\n    function drawCollateral(address _managerAddr, uint _safeId, address _joinAddr, uint _amount, bool _toEth) internal returns (uint) {\r\n        uint frobAmount = _amount;\r\n\r\n        if (IBasicTokenAdapters(_joinAddr).decimals() != 18) {\r\n            frobAmount = _amount * (10 ** (18 - IBasicTokenAdapters(_joinAddr).decimals()));\r\n        }\r\n\r\n        ISAFEManager(_managerAddr).modifySAFECollateralization(_safeId, -toPositiveInt(frobAmount), 0);\r\n        ISAFEManager(_managerAddr).transferCollateral(_safeId, address(this), frobAmount);\r\n\r\n        IBasicTokenAdapters(_joinAddr).exit(address(this), _amount);\r\n\r\n        if (isEthJoinAddr(_joinAddr) && _toEth) {\r\n            TokenInterface(IBasicTokenAdapters(_joinAddr).collateral()).withdraw(_amount); // Weth -> Eth\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice Paybacks Rai debt\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @dev If the _raiAmount is bigger than the whole debt, returns extra Rai\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _collType Coll type of the Safe\r\n    /// @param _raiAmount Amount of Rai to payback\r\n    /// @param _owner Address that owns the DSProxy that owns the Safe\r\n    function paybackDebt(address _managerAddr, uint _safeId, bytes32 _collType, uint _raiAmount, address _owner) internal {\r\n        address urn = ISAFEManager(_managerAddr).safes(_safeId);\r\n\r\n        uint wholeDebt = getAllDebt(SAFE_ENGINE_ADDRESS, urn, urn, _collType);\r\n\r\n        if (_raiAmount > wholeDebt) {\r\n            ERC20(RAI_ADDRESS).transfer(_owner, sub(_raiAmount, wholeDebt));\r\n            _raiAmount = wholeDebt;\r\n        }\r\n\r\n        if (ERC20(RAI_ADDRESS).allowance(address(this), RAI_JOIN_ADDRESS) == 0) {\r\n            ERC20(RAI_ADDRESS).approve(RAI_JOIN_ADDRESS, uint(-1));\r\n        }\r\n\r\n        raiJoin.join(urn, _raiAmount);\r\n\r\n        int paybackAmnt = _getRepaidDeltaDebt(SAFE_ENGINE_ADDRESS, ISAFEEngine(safeEngine).coinBalance(urn), urn, _collType);\r\n\r\n        ISAFEManager(_managerAddr).modifySAFECollateralization(_safeId, 0, paybackAmnt);\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of collateral available to draw\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _collType Coll type of the Safe\r\n    /// @param _joinAddr Joind address of collateral\r\n    /// @dev Substracts 1% to aviod rounding error later on\r\n    function getMaxCollateral(address _managerAddr, uint _safeId, bytes32 _collType, address _joinAddr) public view returns (uint) {\r\n        (uint collateral, uint debt) = getSafeInfo(ISAFEManager(_managerAddr), _safeId, _collType);\r\n\r\n        (, , uint256 safetyPrice, , , ) =\r\n            ISAFEEngine(SAFE_ENGINE_ADDRESS).collateralTypes(_collType);\r\n\r\n        uint maxCollateral = sub(collateral, wmul(wdiv(RAY, safetyPrice), debt));\r\n\r\n        uint normalizeMaxCollateral = maxCollateral / (10 ** (18 - IBasicTokenAdapters(_joinAddr).decimals()));\r\n\r\n        // take one percent due to precision issues\r\n        return normalizeMaxCollateral * 99 / 100;\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of debt available to generate\r\n    /// @param _managerAddr Address of the Safe Manager\r\n    /// @param _safeId Id of the Safe\r\n    /// @param _collType Coll type of the Safe\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxDebt(\r\n        address _managerAddr,\r\n        uint256 _safeId,\r\n        bytes32 _collType\r\n    ) public view virtual returns (uint256) {\r\n        (uint256 collateral, uint256 debt) =\r\n            getSafeInfo(ISAFEManager(_managerAddr), _safeId, _collType);\r\n\r\n        (, , uint256 safetyPrice, , , ) =\r\n            ISAFEEngine(SAFE_ENGINE_ADDRESS).collateralTypes(_collType);\r\n\r\n        return sub(sub(rmul(collateral, safetyPrice), debt), 10);\r\n    }\r\n\r\n    function getPrice(bytes32 _collType) public returns (uint256) {\r\n        (, uint256 safetyCRatio) =\r\n            IOracleRelayer(ORACLE_RELAYER_ADDRESS).collateralTypes(_collType);\r\n        (, , uint256 safetyPrice, , , ) =\r\n            ISAFEEngine(SAFE_ENGINE_ADDRESS).collateralTypes(_collType);\r\n\r\n        uint256 redemptionPrice = IOracleRelayer(ORACLE_RELAYER_ADDRESS).redemptionPrice();\r\n\r\n        return rmul(rmul(safetyPrice, redemptionPrice), safetyCRatio);\r\n    }\r\n\r\n    function isAutomation() internal view returns(bool) {\r\n        return BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin);\r\n    }\r\n\r\n    function takeFee(uint256 _gasCost, uint _amount) internal returns(uint) {\r\n        if (_gasCost > 0) {\r\n            uint ethRaiPrice = getPrice(ETH_COLL_TYPE);\r\n            uint feeAmount = rmul(_gasCost, ethRaiPrice);\r\n\r\n            if (feeAmount > _amount / 5) {\r\n                feeAmount = _amount / 5;\r\n            }\r\n\r\n            address walletAddr = _feeRecipient.getFeeAddr();\r\n\r\n            ERC20(RAI_ADDRESS).transfer(walletAddr, feeAmount);\r\n\r\n            return feeAmount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}   abstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}   contract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        if (gasToken.balanceOf(address(this)) >= _amount) {\r\n            gasToken.free(_amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n}   abstract contract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\r\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\r\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\r\n\tfunction swapBorrowRateMode(address _reserve) external virtual;\r\n    function getReserves() external virtual view returns(address[] memory);\r\n\r\n    /// @param _reserve underlying token address\r\n    function getReserveData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,               // reserve total liquidity\r\n            uint256 availableLiquidity,           // reserve available liquidity for borrowing\r\n            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\r\n            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\r\n            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\r\n            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\r\n            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\r\n            uint256 averageStableBorrowRate,      // current average stable borrow rate\r\n            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\r\n            uint256 liquidityIndex,               // cumulative liquidity index\r\n            uint256 variableBorrowIndex,          // cumulative variable borrow index\r\n            address aTokenAddress,                // aTokens contract address for the specific _reserve\r\n            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\r\n        );\r\n\r\n    /// @param _user users address\r\n    function getUserAccountData(address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\r\n            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\r\n            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\r\n            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\r\n            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\r\n            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\r\n            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\r\n            uint256 healthFactor                  // user current Health Factor\r\n    );\r\n\r\n    /// @param _reserve underlying token address\r\n    /// @param _user users address\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,         // user current reserve aToken balance\r\n            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\r\n            uint256 principalBorrowBalance,       // user balance of borrowed asset\r\n            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\r\n            uint256 borrowRate,                   // user current borrow rate APY\r\n            uint256 liquidityRate,                // user current earn rate on _reserve\r\n            uint256 originationFee,               // user outstanding loan origination fee\r\n            uint256 variableBorrowIndex,          // user variable cumulative index\r\n            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\r\n            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\r\n    );\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address rateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n    );\r\n\r\n    // ------------------ LendingPoolCoreData ------------------------\r\n    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\r\n    function getReserveConfiguration(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (uint256, uint256, uint256, bool);\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentLiquidityRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentVariableBorrowRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentStableBorrowRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveAvailableLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalBorrowsVariable(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalBorrowsStable(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    // ---------------- LendingPoolDataProvider ---------------------\r\n    function calculateUserGlobalData(address _user)\r\n        public virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityBalanceETH,\r\n            uint256 totalCollateralBalanceETH,\r\n            uint256 totalBorrowBalanceETH,\r\n            uint256 totalFeesETH,\r\n            uint256 currentLtv,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 healthFactor,\r\n            bool healthFactorBelowThreshold\r\n        );\r\n}  \r\n\r\n\r\n   \r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (public virtually)\r\n        Sell, // sell an amount of some token (public virtually)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function getIsGlobalOperator(address operator) public virtual view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        public virtual;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() public virtual view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        public virtual;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        public virtual\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) public virtual;\r\n\r\n    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\r\n\r\n    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() public virtual;\r\n\r\n    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) public virtual;\r\n\r\n    function getMarketPrice(uint256 marketId) public virtual view returns (address);\r\n\r\n    function owner() public virtual view returns (address);\r\n\r\n    function isOwner() public virtual view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) public virtual;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\r\n\r\n    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\r\n\r\n    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\r\n\r\n    function transferOwnership(address newOwner) public virtual;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        public virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        public virtual\r\n        view\r\n        returns (Interest.Rate memory);\r\n}      \r\n\r\n\r\n\r\n\r\ncontract DydxFlashLoanBase {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n\r\n    function _getMarketIdFromTokenAddress(address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount, address contractAddr)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: contractAddr,\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RAISaverTaker is RAISaverProxy, DydxFlashLoanBase, GasBurner {\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    struct SaverData {\r\n        uint256 flAmount;\r\n        bool isRepay;\r\n        uint256 safeId;\r\n        uint256 gasCost;\r\n        address joinAddr;\r\n        ManagerType managerType;\r\n    }\r\n\r\n    function boostWithLoan(\r\n        ExchangeData memory _exchangeData,\r\n        uint256 _safeId,\r\n        uint256 _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType,\r\n        address _raiSaverFlashLoan\r\n    ) public payable burnGas(25) {\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        uint256 maxDebt =\r\n            getMaxDebt(managerAddr, _safeId, ISAFEManager(managerAddr).collateralTypes(_safeId));\r\n\r\n        if (maxDebt >= _exchangeData.srcAmount) {\r\n            if (_exchangeData.srcAmount > maxDebt) {\r\n                _exchangeData.srcAmount = maxDebt;\r\n            }\r\n\r\n            boost(_exchangeData, _safeId, _gasCost, _joinAddr, _managerType);\r\n            return;\r\n        }\r\n\r\n        uint256 loanAmount = getAvailableEthLiquidity();\r\n\r\n        SaverData memory saverData =\r\n            SaverData({\r\n                flAmount: loanAmount,\r\n                isRepay: false,\r\n                safeId: _safeId,\r\n                gasCost: _gasCost,\r\n                joinAddr: _joinAddr,\r\n                managerType: _managerType\r\n            });\r\n\r\n        _flashLoan(_raiSaverFlashLoan, _exchangeData, saverData);\r\n    }\r\n\r\n    function repayWithLoan(\r\n        ExchangeData memory _exchangeData,\r\n        uint256 _safeId,\r\n        uint256 _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType,\r\n        address _raiSaverFlashLoan\r\n    ) public payable burnGas(25) {\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        uint256 maxColl =\r\n            getMaxCollateral(\r\n                managerAddr,\r\n                _safeId,\r\n                ISAFEManager(managerAddr).collateralTypes(_safeId),\r\n                _joinAddr\r\n            );\r\n\r\n        if (maxColl >= _exchangeData.srcAmount) {\r\n            if (_exchangeData.srcAmount > maxColl) {\r\n                _exchangeData.srcAmount = maxColl;\r\n            }\r\n\r\n            repay(_exchangeData, _safeId, _gasCost, _joinAddr, _managerType);\r\n            return;\r\n        }\r\n\r\n        uint256 loanAmount = _exchangeData.srcAmount;\r\n\r\n        SaverData memory saverData =\r\n            SaverData({\r\n                flAmount: loanAmount,\r\n                isRepay: true,\r\n                safeId: _safeId,\r\n                gasCost: _gasCost,\r\n                joinAddr: _joinAddr,\r\n                managerType: _managerType\r\n            });\r\n\r\n        _flashLoan(_raiSaverFlashLoan, _exchangeData, saverData);\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of debt available to generate\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @param _safeId Id of the CDP\r\n    /// @param _collType Coll type of the CDP\r\n    function getMaxDebt(\r\n        address _managerAddr,\r\n        uint256 _safeId,\r\n        bytes32 _collType\r\n    ) public override view returns (uint256) {\r\n        (uint256 collateral, uint256 debt) =\r\n            getSafeInfo(ISAFEManager(_managerAddr), _safeId, _collType);\r\n\r\n        (, , uint256 safetyPrice, , , ) =\r\n            ISAFEEngine(SAFE_ENGINE_ADDRESS).collateralTypes(_collType);\r\n\r\n        return sub(rmul(collateral, safetyPrice), debt);\r\n    }\r\n\r\n    /// @notice Fetches Eth Dydx liqudity\r\n    function getAvailableEthLiquidity() internal view returns (uint256 liquidity) {\r\n        liquidity = ERC20(WETH_ADDR).balanceOf(SOLO_MARGIN_ADDRESS);\r\n    }\r\n\r\n    /// @notice Starts the process to move users position 1 collateral and 1 borrow\r\n    /// @dev User must send 2 wei with this transaction\r\n    function _flashLoan(address RAI_SAVER_FLASH_LOAN, ExchangeData memory _exchangeData, SaverData memory _saverData) internal {\r\n        ISoloMargin solo = ISoloMargin(SOLO_MARGIN_ADDRESS);\r\n\r\n        address managerAddr = getManagerAddr(_saverData.managerType);\r\n\r\n        // Get marketId from token address\r\n        uint256 marketId = _getMarketIdFromTokenAddress(WETH_ADDR);\r\n\r\n        // Calculate repay amount (_amount + (2 wei))\r\n        // Approve transfer from\r\n        uint256 repayAmount = _getRepaymentAmountInternal(_saverData.flAmount);\r\n        ERC20(WETH_ADDR).approve(SOLO_MARGIN_ADDRESS, repayAmount);\r\n\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, _saverData.flAmount, RAI_SAVER_FLASH_LOAN);\r\n        payable(RAI_SAVER_FLASH_LOAN).transfer(msg.value); // 0x fee\r\n\r\n        bytes memory exchangeData = packExchangeData(_exchangeData);\r\n        operations[1] = _getCallAction(abi.encode(exchangeData, _saverData), RAI_SAVER_FLASH_LOAN);\r\n\r\n        operations[2] = _getDepositAction(marketId, repayAmount, address(this));\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        ISAFEManager(managerAddr).allowSAFE(_saverData.safeId, RAI_SAVER_FLASH_LOAN, 1);\r\n        solo.operate(accountInfos, operations);\r\n        ISAFEManager(managerAddr).allowSAFE(_saverData.safeId, RAI_SAVER_FLASH_LOAN, 0);\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RAISaverFlashLoan is RAISaverProxy, AdminAuth {\r\n\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    function callFunction(\r\n        address,\r\n        Account.Info memory,\r\n        bytes memory _params\r\n    ) public {\r\n\r\n        (\r\n            bytes memory exDataBytes ,\r\n            RAISaverTaker.SaverData memory saverData\r\n        )\r\n         = abi.decode(_params, (bytes, RAISaverTaker.SaverData));\r\n\r\n\r\n        ExchangeData memory exchangeData = unpackExchangeData(exDataBytes);\r\n\r\n        address managerAddr = getManagerAddr(saverData.managerType);\r\n        address userProxy = ISAFEManager(managerAddr).ownsSAFE(saverData.safeId);\r\n\r\n        if (saverData.isRepay) {\r\n            repayWithLoan(exchangeData, saverData);\r\n        } else {\r\n            boostWithLoan(exchangeData, saverData);\r\n        }\r\n\r\n        // payback FL, assumes we have weth\r\n        TokenInterface(WETH_ADDR).deposit{value: (address(this).balance)}();\r\n        ERC20(WETH_ADDR).safeTransfer(userProxy, (saverData.flAmount + 2));\r\n    }\r\n\r\n    function boostWithLoan(\r\n        ExchangeData memory _exchangeData,\r\n        RAISaverTaker.SaverData memory _saverData\r\n    ) internal {\r\n\r\n        address managerAddr = getManagerAddr(_saverData.managerType);\r\n        address user = getOwner(ISAFEManager(managerAddr), _saverData.safeId);\r\n        bytes32 collType = ISAFEManager(managerAddr).collateralTypes(_saverData.safeId);\r\n\r\n        addCollateral(managerAddr, _saverData.safeId, _saverData.joinAddr, _saverData.flAmount, false);\r\n\r\n        // Draw users Rai\r\n        uint raiDrawn = drawRai(managerAddr, _saverData.safeId, collType, _exchangeData.srcAmount);\r\n\r\n        // Swap\r\n        _exchangeData.srcAmount = raiDrawn - takeFee(_saverData.gasCost, raiDrawn);\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n\r\n        (, uint swapedAmount) = _sell(_exchangeData);\r\n\r\n        // Return collateral\r\n        addCollateral(managerAddr, _saverData.safeId, _saverData.joinAddr, swapedAmount, true);\r\n        // Draw collateral to repay the flash loan\r\n        drawCollateral(managerAddr, _saverData.safeId, _saverData.joinAddr, _saverData.flAmount, false);\r\n\r\n        logger.Log(address(this), msg.sender, \"RAIFlashBoost\", abi.encode(_saverData.safeId, user, _exchangeData.srcAmount, swapedAmount));\r\n    }\r\n\r\n    function repayWithLoan(\r\n        ExchangeData memory _exchangeData,\r\n        RAISaverTaker.SaverData memory _saverData\r\n    ) internal {\r\n\r\n        TokenInterface(WETH_ADDR).withdraw(_saverData.flAmount);\r\n\r\n        address managerAddr = getManagerAddr(_saverData.managerType);\r\n\r\n        address user = getOwner(ISAFEManager(managerAddr), _saverData.safeId);\r\n        bytes32 collType = ISAFEManager(managerAddr).collateralTypes(_saverData.safeId);\r\n\r\n        // Swap\r\n        _exchangeData.srcAmount = _saverData.flAmount;\r\n        _exchangeData.user = user;\r\n\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n\r\n        (, uint paybackAmount) = _sell(_exchangeData);\r\n\r\n        paybackAmount -= takeFee(_saverData.gasCost, paybackAmount);\r\n        paybackAmount = limitLoanAmount(managerAddr, _saverData.safeId, collType, paybackAmount, user);\r\n\r\n        // Payback the debt\r\n        paybackDebt(managerAddr, _saverData.safeId, collType, paybackAmount, user);\r\n\r\n        // Draw collateral to repay the flash loan\r\n        drawCollateral(managerAddr, _saverData.safeId, _saverData.joinAddr, _saverData.flAmount, false);\r\n\r\n        logger.Log(address(this), msg.sender, \"RAIFlashRepay\", abi.encode(_saverData.safeId, user, _exchangeData.srcAmount, paybackAmount));\r\n    }\r\n\r\n    /// @notice Handles that the amount is not bigger than cdp debt and not dust\r\n    function limitLoanAmount(address _managerAddr, uint _safeId, bytes32 _collType, uint _paybackAmount, address _owner) internal returns (uint256) {\r\n        uint debt = getAllDebt(address(safeEngine), ISAFEManager(_managerAddr).safes(_safeId), ISAFEManager(_managerAddr).safes(_safeId), _collType);\r\n\r\n        if (_paybackAmount > debt) {\r\n            ERC20(RAI_ADDRESS).transfer(_owner, (_paybackAmount - debt));\r\n            return debt;\r\n        }\r\n\r\n        uint debtLeft = debt - _paybackAmount;\r\n\r\n        (,,,, uint dust,) = safeEngine.collateralTypes(_collType);\r\n        dust = dust / 10**27;\r\n\r\n        // Less than dust value\r\n        if (debtLeft < dust) {\r\n            uint amountOverDust = (dust - debtLeft);\r\n\r\n            ERC20(RAI_ADDRESS).transfer(_owner, amountOverDust);\r\n\r\n            return (_paybackAmount - amountOverDust);\r\n        }\r\n\r\n        return _paybackAmount;\r\n    }\r\n\r\n    receive() external override(DFSExchangeCore) payable {}\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"AUTOMATIC_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_DEST_AMOUNT_MISSING\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_NOT_ZEROX_EXCHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_OFFCHAIN_DATA_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SLIPPAGE_HIT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_WRAPPER_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_COLL_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUAL_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_RELAYER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_ENGINE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_COLLECTOR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"enum RAISaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RAISaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"getManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_collType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_collType\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISAFEManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collType\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISAFEManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_collType\",\"type\":\"bytes32\"}],\"name\":\"getSafeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract IOracleRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raiJoin\",\"outputs\":[{\"internalType\":\"contract ICoinJoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_safeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"enum RAISaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISAFEEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RAISaverFlashLoan","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ab62626175f788e2d22b5b7f03f5623619f0a98254cd3e7ef6b6fe834264ed0"}]}