{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts\\orchestrator\\IEthItemOrchestrator.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ninterface IEthItemOrchestrator is IERC721Receiver, IERC1155Receiver {\r\n\r\n    function factories() external view returns(address[] memory);\r\n\r\n    function factory() external view returns(address);\r\n\r\n    function setFactory(address newFactory) external;\r\n\r\n    function knowledgeBases() external view returns(address[] memory);\r\n\r\n    function knowledgeBase() external view returns(address);\r\n\r\n    function setKnowledgeBase(address newKnowledgeBase) external;\r\n\r\n    function ENSController() external view returns (address);\r\n\r\n    function setENSController(address newEnsController) external;\r\n\r\n    function transferENS(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) external;\r\n\r\n    /**\r\n     * @dev GET - The DoubleProxy of the DFO linked to this Contract\r\n     */\r\n    function doubleProxy() external view returns (address);\r\n\r\n    /**\r\n     * @dev SET - The DoubleProxy of the DFO linked to this Contract\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     * @param newDoubleProxy the new DoubleProxy address\r\n     */\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Native EthItem model.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setNativeModel(address nativeModelAddress) external;\r\n    function addNativeModel(address nativeModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n    function addERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n    function addERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n    function addERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only through a Proposal in the Linked DFO\r\n     */\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\r\n\r\n    function createNative(address modelAddress, bytes calldata modelInitPayload, string calldata ens)\r\n        external\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse);\r\n\r\n    function createNative(bytes calldata modelInitPayload, string calldata ens)\r\n        external\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse);\r\n\r\n    function createERC20Wrapper(bytes calldata modelInitPayload)\r\n        external\r\n        returns (address newEthItemAddress, bytes memory modelInitCallResponse);\r\n}\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\introspection\\IERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\n\r\n// File: contracts\\orchestrator\\IEthItemOrchestratorDependantElement.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\ninterface IEthItemOrchestratorDependantElement is IERC165 {\r\n\r\n    /**\r\n     * @dev GET - The DoubleProxy of the DFO linked to this Contract\r\n     */\r\n    function doubleProxy() external view returns (address);\r\n\r\n    /**\r\n     * @dev SET - The DoubleProxy of the DFO linked to this Contract\r\n     * It can be done only by the Factory controller\r\n     * @param newDoubleProxy the new DoubleProxy address\r\n     */\r\n    function setDoubleProxy(address newDoubleProxy) external;\r\n\r\n    function isAuthorizedOrchestrator(address operator) external view returns(bool);\r\n}\r\n\r\n// File: contracts\\factory\\IEthItemFactory.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IEthItemFactory\r\n * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\r\n */\r\ninterface IEthItemFactory is IEthItemOrchestratorDependantElement {\r\n\r\n    function isModel(address modelAddress) external returns(bool);\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     */\r\n    function ethItemInteroperableInterfaceModel() external view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Native EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function nativeModel() external view returns (address nativeModelAddress, uint256 nativeModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Native EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setNativeModel(address nativeModelAddress) external;\r\n    function addNativeModel(address nativeModelAddress) external;\r\n\r\n    event NativeModel(address indexed);\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\r\n     * Every EthItem will have its own address, but the code will be cloned from this one.\r\n     */\r\n    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n    function addERC1155WrapperModel(address erc1155WrapperModelAddress) external;\r\n\r\n    event ERC1155WrapperModel(address indexed);\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     */\r\n    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n    function addERC20WrapperModel(address erc20WrapperModelAddress) external;\r\n\r\n    event ERC20WrapperModel(address indexed);\r\n\r\n    /**\r\n     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     */\r\n    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\r\n\r\n    /**\r\n     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n    function addERC721WrapperModel(address erc721WrapperModelAddress) external;\r\n\r\n    event ERC721WrapperModel(address indexed);\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\r\n     */\r\n    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\r\n     * @param erc20WrapperAmount The amount of minted EthItem\r\n     */\r\n    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\r\n     */\r\n    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\r\n\r\n    /**\r\n     * @dev SET - The element useful to calculate the Percentage fee\r\n     * It can be done only by the Factory controller\r\n     */\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\r\n\r\n    /**\r\n     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\r\n     * @param erc20WrapperAmount The amount of burned EthItem\r\n     */\r\n    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\r\n\r\n    /**\r\n     * @dev Business Logic to create a brand-new EthItem.\r\n     * It raises the 'NewNativeCreated' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createNative(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewNativeCreated(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewNativeCreated(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC1155Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC1155(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC1155Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC20Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC20Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n\r\n    /**\r\n     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\r\n     * It raises the 'NewWrappedERC721Created' events.\r\n     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\r\n     * It changes according to the Model Version.\r\n     * @param ethItemAddress The address of the new EthItem\r\n     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\r\n     */\r\n    function createWrappedERC721(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\r\n\r\n    event NewWrappedERC721Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\r\n    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\r\n}\r\n\r\n// File: contracts\\knowledgeBase\\IKnowledgeBase.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IKnowledgeBase\r\n * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\r\n */\r\ninterface IKnowledgeBase is IEthItemOrchestratorDependantElement {\r\n\r\n    function setERC20Wrapper(address erc20Wrapper) external;\r\n\r\n    function erc20Wrappers() external view returns(address[] memory);\r\n\r\n    function erc20Wrapper() external view returns(address);\r\n\r\n    function setEthItem(address ethItem) external;\r\n\r\n    function isEthItem(address ethItem) external view returns(bool);\r\n\r\n    function setWrapped(address wrappedAddress, address ethItem) external;\r\n\r\n    function wrapper(address wrappedAddress, uint256 version) external view returns (address ethItem);\r\n}\r\n\r\n// File: contracts\\ens-controller\\IENSController.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ninterface IENSController is IEthItemOrchestratorDependantElement, IERC721Receiver {\r\n\r\n    function attachENS(address ethItem, string calldata ens) external;\r\n\r\n    function transfer(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) external;\r\n\r\n    function data() external view returns(uint256 domainId, bytes32 domainNode);\r\n\r\n    event ENSAttached(address indexed ethItem, string indexed ensIndex, string ens);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IERC1155Views.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n/**\r\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\r\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\r\n */\r\ninterface IERC1155Views {\r\n\r\n    /**\r\n     * @dev Returns the total supply of the given token id\r\n     * @param objectId the id of the token whose availability you want to know \r\n     */\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the name of the given token id\r\n     * @param objectId the id of the token whose name you want to know \r\n     */\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the given token id\r\n     * @param objectId the id of the token whose symbol you want to know \r\n     */\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals of the given token id\r\n     * @param objectId the id of the token whose decimals you want to know \r\n     */\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the uri of the given token id\r\n     * @param objectId the id of the token whose uri you want to know \r\n     */\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IBaseTokenData.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\ninterface IBaseTokenData {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IERC20Data.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20Data is IBaseTokenData, IERC20 {\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\n// File: node_modules\\eth-item-token-standard\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20, IERC20Data {\r\n\r\n    function init(uint256 objectId, string memory name, string memory symbol, uint256 decimals) external;\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: eth-item-token-standard\\IEthItemMainInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IEthItemMainInterface is IERC1155, IERC1155Views, IBaseTokenData {\r\n\r\n    function init(\r\n        address interoperableInterfaceModel,\r\n        string calldata name,\r\n        string calldata symbol\r\n    ) external;\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    event NewItem(uint256 indexed objectId, address indexed tokenAddress);\r\n    event Mint(uint256 objectId, address tokenAddress, uint256 amount);\r\n}\r\n\r\n// File: contracts\\models\\common\\IEthItemModelBase.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This interface contains the commonn data provided by all the EthItem models\r\n */\r\ninterface IEthItemModelBase is IEthItemMainInterface {\r\n\r\n    /**\r\n     * @dev Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds\r\n     * @param name the chosen name for this NFT\r\n     * @param symbol the chosen symbol (Ticker) for this NFT\r\n     */\r\n    function init(string calldata name, string calldata symbol) external;\r\n\r\n    /**\r\n     * @return modelVersionNumber The version number of the Model, it should be progressive\r\n     */\r\n    function modelVersion() external pure returns(uint256 modelVersionNumber);\r\n\r\n    /**\r\n     * @return factoryAddress the address of the Contract which initialized this EthItem\r\n     */\r\n    function factory() external view returns(address factoryAddress);\r\n}\r\n\r\n// File: contracts\\orchestrator\\EthItemOrchestrator.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EthItemOrchestrator is IEthItemOrchestrator, ERC165 {\r\n\r\n    address private constant ENS_TOKEN_ADDRESS = 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\r\n\r\n    address private _doubleProxy;\r\n    address[] private _factories;\r\n    address[] private _knowledgeBases;\r\n    address private _ensController;\r\n\r\n    constructor(\r\n        address doubleProxy,\r\n        address[] memory factoriesArray,\r\n        address[] memory knowledgeBasesArray,\r\n        address ensController\r\n    ) public {\r\n        _doubleProxy = doubleProxy;\r\n        _factories = factoriesArray;\r\n        _knowledgeBases = knowledgeBasesArray;\r\n        _ensController = ensController;\r\n    }\r\n\r\n    function factories() public view override returns(address[] memory) {\r\n        return _factories;\r\n    }\r\n\r\n    function factory() public view override returns(address) {\r\n        return _factories[_factories.length - 1];\r\n    }\r\n\r\n    function knowledgeBases() public view override returns(address[] memory) {\r\n        return _knowledgeBases;\r\n    }\r\n\r\n    function knowledgeBase() public view override returns(address) {\r\n        return _knowledgeBases[_knowledgeBases.length - 1];\r\n    }\r\n\r\n    modifier byDFO virtual {\r\n        require(_isFromDFO(msg.sender), \"Unauthorized Action!\");\r\n        _;\r\n    }\r\n\r\n    function _isFromDFO(address sender) private view returns(bool) {\r\n        IMVDProxy proxy = IMVDProxy(IDoubleProxy(_doubleProxy).proxy());\r\n        if(IMVDFunctionalitiesManager(proxy.getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender)) {\r\n            return true;\r\n        }\r\n        return proxy.getMVDWalletAddress() == sender;\r\n    }\r\n\r\n    function doubleProxy() public view override returns (address) {\r\n        return _doubleProxy;\r\n    }\r\n\r\n    function setDoubleProxy(address newDoubleProxy) public override byDFO {\r\n        _doubleProxy = newDoubleProxy;\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_factories[i]);\r\n            if(element.supportsInterface(this.setDoubleProxy.selector)) {\r\n                element.setDoubleProxy(_doubleProxy);\r\n            }\r\n        }\r\n        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\r\n            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_knowledgeBases[i]);\r\n            if(element.supportsInterface(this.setDoubleProxy.selector)) {\r\n                element.setDoubleProxy(_doubleProxy);\r\n            }\r\n        }\r\n        if(_ensController != address(0)) {\r\n            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_ensController);\r\n            if(element.supportsInterface(this.setDoubleProxy.selector)) {\r\n                element.setDoubleProxy(_doubleProxy);\r\n            }\r\n        }\r\n    }\r\n\r\n    function ENSController() public override view returns (address) {\r\n        return _ensController;\r\n    }\r\n\r\n    function setENSController(address newEnsController) public override byDFO {\r\n        if(newEnsController != address(0)) {\r\n            require(IEthItemOrchestratorDependantElement(newEnsController).doubleProxy() == _doubleProxy, \"Wrong Double Proxy\");\r\n        }\r\n        _ensController = newEnsController;\r\n    }\r\n\r\n    function transferENS(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) public override byDFO {\r\n        IENSController(_ensController).transfer(receiver, domainNode, domainId, reclaimFirst, safeTransferFrom, payload);\r\n    }\r\n\r\n    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byDFO {\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemFactory element = IEthItemFactory(_factories[i]);\r\n            if(element.supportsInterface(this.setMintFeePercentage.selector)) {\r\n                element.setMintFeePercentage(mintFeePercentageNumerator, mintFeePercentageDenominator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byDFO {\r\n        for(uint256 i = 0; i < _factories.length; i++) {\r\n            IEthItemFactory element = IEthItemFactory(_factories[i]);\r\n            if(element.supportsInterface(this.setBurnFeePercentage.selector)) {\r\n                element.setBurnFeePercentage(burnFeePercentageNumerator, burnFeePercentageDenominator);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFactory(address newFactory) public override byDFO {\r\n        require(IEthItemOrchestratorDependantElement(newFactory).doubleProxy() == _doubleProxy, \"Wrong Double Proxy\");\r\n        _factories.push(newFactory);\r\n    }\r\n\r\n    function setKnowledgeBase(address newKnowledgeBase) public override byDFO {\r\n        require(IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy() == _doubleProxy, \"Wrong Double Proxy\");\r\n        _knowledgeBases.push(newKnowledgeBase);\r\n    }\r\n\r\n    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setEthItemInteroperableInterfaceModel.selector)) {\r\n            element.setEthItemInteroperableInterfaceModel(ethItemInteroperableInterfaceModelAddress);\r\n        }\r\n    }\r\n\r\n    function setNativeModel(address nativeModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setNativeModel.selector)) {\r\n            element.setNativeModel(nativeModelAddress);\r\n        }\r\n    }\r\n\r\n    function addNativeModel(address nativeModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.addNativeModel.selector)) {\r\n            element.addNativeModel(nativeModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC1155WrapperModel.selector)) {\r\n            element.setERC1155WrapperModel(erc1155WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function addERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.addERC1155WrapperModel.selector)) {\r\n            element.addERC1155WrapperModel(erc1155WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC20WrapperModel.selector)) {\r\n            element.setERC20WrapperModel(erc20WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function addERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.addERC20WrapperModel.selector)) {\r\n            element.addERC20WrapperModel(erc20WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.setERC721WrapperModel.selector)) {\r\n            element.setERC721WrapperModel(erc721WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function addERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\r\n        IEthItemFactory element = IEthItemFactory(factory());\r\n        if(element.supportsInterface(this.addERC721WrapperModel.selector)) {\r\n            element.addERC721WrapperModel(erc721WrapperModelAddress);\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address owner,\r\n        uint256 objectId,\r\n        uint256 amount,\r\n        bytes memory payload\r\n    ) public virtual override returns (bytes4) {\r\n        address ethItem = _getOrCreateERC1155Wrapper(msg.sender, objectId, payload);\r\n        IEthItemMainInterface(msg.sender).safeTransferFrom(address(this), ethItem, objectId, amount, \"\");\r\n        IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectId);\r\n        item.transfer(owner, item.balanceOf(address(this)));\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address owner,\r\n        uint256[] memory objectIds,\r\n        uint256[] memory amounts,\r\n        bytes memory payload\r\n    ) public virtual override returns (bytes4) {\r\n        address ethItem = _getOrCreateERC1155Wrapper(msg.sender, objectIds[0], payload);\r\n        IEthItemMainInterface(msg.sender).safeBatchTransferFrom(address(this), ethItem, objectIds, amounts, \"\");\r\n        for(uint256 i = 0; i < objectIds.length; i++) {\r\n            IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectIds[i]);\r\n            item.transfer(owner, item.balanceOf(address(this)));\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function _getOrCreateERC1155Wrapper(address source, uint256 objectId, bytes memory payload) private returns(address ethItem) {\r\n        address model = payload.length == 0 ? address(0) : abi.decode(payload, (address));\r\n        uint256 version = model == address(0) ? 0 : IEthItemModelBase(model).modelVersion();\r\n        IEthItemFactory currentFactory = IEthItemFactory(factory());\r\n        if(model == address(0)) {\r\n            (,version) = currentFactory.erc721WrapperModel();\r\n        }\r\n        if(ethItem == address(0)) {\r\n            IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\r\n            currentKnowledgeBase.setEthItem(ethItem = _createERC1155Wrapper(currentFactory, source, objectId, model));\r\n            currentKnowledgeBase.setWrapped(source, ethItem);\r\n        }\r\n    }\r\n\r\n    function _createERC1155Wrapper(IEthItemFactory currentFactory, address source, uint256 objectId, address model) private returns(address ethItem) {\r\n        (string memory name, string memory symbol) = _extractNameAndSymbol(source);\r\n        (bool supportsSpecificName, bool supportsSpecificSymbol, bool supportsSpecificDecimals) = _extractSpecificData(source, objectId);\r\n        bytes memory modelInitPayload = abi.encodeWithSignature(\"init(address,string,string,bool,bool,bool)\", source, name, symbol, supportsSpecificName, supportsSpecificSymbol, supportsSpecificDecimals);\r\n        (ethItem,) = currentFactory.createWrappedERC1155(model, modelInitPayload);\r\n    }\r\n\r\n    function _extractNameAndSymbol(address source) private view returns(string memory name, string memory symbol) {\r\n        IEthItemMainInterface nft = IEthItemMainInterface(source);\r\n        try nft.name() returns(string memory n) {\r\n            name = n;\r\n        } catch {\r\n        }\r\n        try nft.symbol() returns(string memory s) {\r\n            symbol = s;\r\n        } catch {\r\n        }\r\n        if(keccak256(bytes(name)) == keccak256(\"\")) {\r\n            name = _toString(source);\r\n        }\r\n        if(keccak256(bytes(symbol)) == keccak256(\"\")) {\r\n            symbol = _toString(source);\r\n        }\r\n    }\r\n\r\n    function _extractSpecificData(address source, uint256 objectId) private view returns(bool supportsSpecificName, bool supportsSpecificSymbol, bool supportsSpecificDecimals) {\r\n        IEthItemMainInterface nft = IEthItemMainInterface(source);\r\n        try nft.name(objectId) returns(string memory value) {\r\n            supportsSpecificName = keccak256(bytes(value)) != keccak256(\"\");\r\n        } catch {\r\n        }\r\n        try nft.symbol(objectId) returns(string memory value) {\r\n            supportsSpecificSymbol = keccak256(bytes(value)) != keccak256(\"\");\r\n        } catch {\r\n        }\r\n        try nft.decimals(objectId) returns(uint256 value) {\r\n            supportsSpecificDecimals = value > 1;\r\n        } catch {\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address owner,\r\n        uint256 objectId,\r\n        bytes memory payload\r\n    ) public virtual override returns (bytes4) {\r\n        if(msg.sender == ENS_TOKEN_ADDRESS && keccak256(abi.encodePacked(\"transferENS\")) == keccak256(payload)) {\r\n            require(_isFromDFO(operator), \"Unauthorized Action\");\r\n            IERC721(msg.sender).safeTransferFrom(address(this), _ensController, objectId, payload);\r\n            return this.onERC721Received.selector;\r\n        }\r\n        address model = payload.length == 0 ? address(0) : abi.decode(payload, (address));\r\n        uint256 version = model == address(0) ? 0 : IEthItemModelBase(model).modelVersion();\r\n        IEthItemFactory currentFactory = IEthItemFactory(factory());\r\n        if(model == address(0)) {\r\n            (,version) = currentFactory.erc721WrapperModel();\r\n        }\r\n        address ethItem = _checkEthItem(msg.sender, version);\r\n        if(ethItem == address(0)) {\r\n            IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\r\n            currentKnowledgeBase.setEthItem(ethItem = _createERC721Wrapper(currentFactory, msg.sender, model));\r\n            currentKnowledgeBase.setWrapped(msg.sender, ethItem);\r\n        }\r\n        IERC721(msg.sender).safeTransferFrom(address(this), ethItem, objectId, \"\");\r\n        IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectId);\r\n        item.transfer(owner, item.balanceOf(address(this)));\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function _checkEthItem(address source, uint256 version) private view returns(address ethItem) {\r\n        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\r\n            ethItem = IKnowledgeBase(_knowledgeBases[i]).wrapper(source, version);\r\n            if(ethItem != address(0)) {\r\n                return ethItem;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _createERC721Wrapper(IEthItemFactory currentFactory, address source, address modelAddress) private returns(address ethItem) {\r\n        (string memory name, string memory symbol) = _extractNameAndSymbol(source);\r\n        bytes memory modelInitPayload = abi.encodeWithSignature(\"init(address,string,string)\", source, name, symbol);\r\n        (ethItem,) = currentFactory.createWrappedERC721(modelAddress, modelInitPayload);\r\n    }\r\n\r\n    function createNative(address modelAddress, bytes memory modelInitCallPayload, string memory ens) public override\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse) {\r\n        (newNativeAddress, modelInitCallResponse) = IEthItemFactory(factory()).createNative(modelAddress, modelInitCallPayload);\r\n        IKnowledgeBase(knowledgeBase()).setEthItem(newNativeAddress);\r\n        if(_ensController != address(0)) {\r\n            IENSController(_ensController).attachENS(newNativeAddress, ens);\r\n        }\r\n    }\r\n\r\n    function createNative(bytes memory modelInitCallPayload, string memory ens) public override\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse) {\r\n        (newNativeAddress, modelInitCallResponse) = IEthItemFactory(factory()).createNative(address(0), modelInitCallPayload);\r\n        IKnowledgeBase(knowledgeBase()).setEthItem(newNativeAddress);\r\n        if(_ensController != address(0)) {\r\n            IENSController(_ensController).attachENS(newNativeAddress, ens);\r\n        }\r\n    }\r\n\r\n    function createERC20Wrapper(bytes memory modelInitPayload) public override byDFO\r\n        returns (address newEthItemAddress, bytes memory modelInitCallResponse) {\r\n        (newEthItemAddress, modelInitCallResponse) = IEthItemFactory(factory()).createWrappedERC20(modelInitPayload);\r\n        IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\r\n        currentKnowledgeBase.setEthItem(newEthItemAddress);\r\n        currentKnowledgeBase.setERC20Wrapper(newEthItemAddress);\r\n    }\r\n\r\n    function _toString(address _addr) internal pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"factoriesArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"knowledgeBasesArray\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"ensController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ENSController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"addERC1155WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"addERC20WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"addERC721WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeModelAddress\",\"type\":\"address\"}],\"name\":\"addNativeModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitPayload\",\"type\":\"bytes\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newEthItemAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modelAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ens\",\"type\":\"string\"}],\"name\":\"createNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newNativeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"modelInitCallPayload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ens\",\"type\":\"string\"}],\"name\":\"createNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newNativeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"modelInitCallResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBases\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEnsController\",\"type\":\"address\"}],\"name\":\"setENSController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC1155WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC20WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721WrapperModelAddress\",\"type\":\"address\"}],\"name\":\"setERC721WrapperModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethItemInteroperableInterfaceModelAddress\",\"type\":\"address\"}],\"name\":\"setEthItemInteroperableInterfaceModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKnowledgeBase\",\"type\":\"address\"}],\"name\":\"setKnowledgeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeePercentageDenominator\",\"type\":\"uint256\"}],\"name\":\"setMintFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeModelAddress\",\"type\":\"address\"}],\"name\":\"setNativeModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"domainNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"domainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reclaimFirst\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"safeTransferFrom\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"transferENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthItemOrchestrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b451103a905144a0cd9c98ce4b1feeda82b1a720000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001bd7c9d361be2d03fd7bc11de4432a514ca554650000000000000000000000006f2225ce63b476da30bd058d0835959a8f13451d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f6de81bea04971bece4e44fa94f05c71edd49c17","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d7144f074beb00eac5ef23d4a298135398c2ff10a8475a189a644d06de07014"}]}