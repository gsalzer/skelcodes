{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-01\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nabstract contract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public virtual view returns (uint256);\r\n  function transfer(address to, uint256 value) public virtual returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public virtual view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n  function approve(address spender, uint256 value) public virtual returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n    (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _val));\r\n    return success && (data.length == 0 || abi.decode(data, (bool)));\r\n  }\r\n}\r\n\r\ncontract TokenVesting {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public immutable beneficiary;\r\n\r\n  uint256 public immutable cliff;\r\n  uint256 public immutable start;\r\n  uint256 public immutable duration;\r\n\r\n  uint256 public released;\r\n\r\n  ERC20 public immutable token;\r\n\r\n  constructor(\r\n    address _beneficiary,\r\n    uint256 _start,\r\n    uint256 _cliff,\r\n    uint256 _duration,\r\n    address _token\r\n  ) {\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    start       = _start;\r\n    cliff       = _start.add(_cliff);\r\n    duration    = _duration;\r\n    token       = ERC20(_token);\r\n  }\r\n\r\n  /**\r\n   * @notice Only allow calls from the beneficiary of the vesting contract\r\n   */\r\n  modifier onlyBeneficiary() {\r\n    require(msg.sender == beneficiary);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   */\r\n  function release() external {\r\n    require(block.timestamp >= cliff);\r\n    _releaseTo(beneficiary);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   */\r\n  function _releaseTo(address target) internal {\r\n    uint256 unreleased = releasableAmount();\r\n\r\n    released = released.add(unreleased);\r\n\r\n    require(token.safeTransfer(target, unreleased));\r\n\r\n    emit Released(released);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   */\r\n  function releasableAmount() public view returns (uint256) {\r\n    return vestedAmount().sub(released);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   */\r\n  function vestedAmount() public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(address(this));\r\n    uint256 totalBalance = currentBalance.add(released);\r\n\r\n    if (block.timestamp < cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= start.add(duration)) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allow withdrawing any token other than the relevant one\r\n   */\r\n  function releaseForeignToken(ERC20 _token, uint256 amount) external onlyBeneficiary {\r\n    require(_token != token);\r\n    _token.transfer(beneficiary, amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000e148a722abe3bea94f36e9240a056dc0e69ad331000000000000000000000000000000000000000000000000000000006010ad0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000784ce800000000000000000000000095b3497bbcccc46a8f45f5cf54b0878b39f8d96c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://44a49764a78920d54685c560d0463b9b6b092915eea7fd901354501f08a7ae46"}]}