{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/SPO/LPTokenWrapper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title  lpTokenWrapper\r\n * @author Synthetix (forked from /Synthetixio/synthetix/contracts/StakingRewards.sol)\r\n *         Audit: https://github.com/sigp/public-audits/blob/master/synthetix/unipool/review.pdf\r\n *         Changes by: SPO.\r\n * @notice LP Token wrapper to facilitate tracking of staked balances\r\n * @dev    Changes:\r\n *          - Added UserData and _historyTotalSupply to track history balances\r\n *          - Changing 'stake' and 'withdraw' to internal funcs\r\n */\r\ncontract LPTokenWrapper is ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public lpToken;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping (uint256 => uint256) private _historyTotalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    //Hold in seconds before withdrawal after last time staked\r\n    uint256 public holdTime;\r\n    \r\n    struct UserData {\r\n        //Period when balance becomes nonzero or last period rewards claimed\r\n        uint256 period;\r\n        //Last time deposited. used to implement holdDays\r\n        uint256 lastTime;\r\n        mapping (uint256 => uint) historyBalance;\r\n    }\r\n\r\n    mapping (address => UserData) private userData;\r\n\r\n    /**\r\n     * @dev TokenWrapper constructor\r\n     * @param _lpToken Wrapped token to be staked\r\n     * @param _holdDays Hold days after last deposit\r\n     */\r\n    constructor(address _lpToken, uint256 _holdDays) internal {\r\n        lpToken = IERC20(_lpToken);\r\n        holdTime = _holdDays.mul(1 days);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of the staked token\r\n     * @return uint256 total supply\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of the staked token\r\n     * @param _period Period for which total supply returned\r\n     * @return uint256 total supply\r\n     */\r\n    function historyTotalSupply(uint256 _period)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _historyTotalSupply[_period];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of a given account\r\n     * @param _address User for which to retrieve balance\r\n     */\r\n    function balanceOf(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits a given amount of lpToken from sender\r\n     * @param _amount Units of lpToken\r\n     */\r\n    function _stake(uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _updateHistoryTotalSupply(_period);\r\n        UserData storage user = userData[msg.sender]; \r\n        if(_balances[msg.sender] == 0) user.period = _period;\r\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\r\n        user.historyBalance[_period] = _balances[msg.sender];\r\n        user.lastTime = block.timestamp;\r\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a given stake from sender\r\n     * @param _amount Units of lpToken\r\n     */\r\n    function _withdraw(uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        //Check first if user has sufficient balance, added due to hold requrement \r\n        //(\"Cannot withdraw, tokens on hold\" will be fired even if user  has no balance)\r\n        require(_balances[msg.sender] >= _amount, \"Not enough balance\");\r\n        UserData storage user = userData[msg.sender]; \r\n        require(block.timestamp.sub(user.lastTime) >= holdTime, \"Cannot withdraw, tokens on hold\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _updateHistoryTotalSupply(_period);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n        user.historyBalance[_period] = _balances[msg.sender];\r\n        lpToken.safeTransfer(msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates history total supply\r\n     * @param _period Current period\r\n     */\r\n     function _updateHistoryTotalSupply(uint256 _period)\r\n        internal\r\n    {\r\n        _historyTotalSupply[_period] = _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns User Data\r\n     * @param _address address of the User\r\n     */\r\n     function getUserData(address _address)\r\n        internal\r\n        view\r\n        returns (UserData storage)\r\n    {\r\n        return userData[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user's period and balance for that period\r\n     * @param _address address of the User\r\n     */\r\n     function _updateUser(address _address, uint256 _period)\r\n        internal\r\n    {\r\n        userData[_address].period = _period;\r\n        userData[_address].historyBalance[_period] = _balances[_address];\r\n    }   \r\n\r\n}\r\n\r\n// File: browser/SPO/StakingPool.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract StakingPool is Ownable, ReentrancyGuard, LPTokenWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    //interface for Rewards Token\r\n    IERC20 public rewardsToken;\r\n    //Conctact status states\r\n    enum Status {Setup, Running, Ended}\r\n    \r\n    //Constants\r\n    uint256 constant public CALC_PRECISION = 1e18;\r\n\r\n    // Address where fees will be sent if fee isn't 0\r\n    address public feeBeneficiary;\r\n    // Fee in PPM (Parts Per Million), can be 0\r\n    uint256 public fee;\r\n    //Status of contract\r\n    Status public status;\r\n    //Rewards for period\r\n    uint256 public rewardsPerPeriodCap;\r\n    //Total rewards for all periods\r\n    uint256 public rewardsTotalCap;\r\n    //Staking Period in seconds\r\n    uint256 public periodTime;\r\n    //Total Periods\r\n    uint256 public totalPeriods;\r\n    //Grace Periods Time (time window after contract is Ended when users have to claim their Reward Tokens)\r\n    //after this period ends, no reward withdrawal is possible and contact owner can withdraw unclamed Reward Tokens\r\n    uint256 public gracePeriodTime;\r\n    //Time when contracts starts\r\n    uint256 public startTime;\r\n    //Time when contract ends \r\n    uint256 public endTime;\r\n    //Time when contract closes (endTime + gracePeriodTime)\r\n    uint256 public closeTime;\r\n    \r\n    \r\n    //Last Period\r\n    uint256 public period;\r\n    \r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event WithdrawnERC20(address indexed user, address token, uint256 amount);\r\n    \r\n\r\n    /** @dev Updates Period before executing function */\r\n    modifier updatePeriod() {\r\n        _updatePeriod();\r\n        _;\r\n    }\r\n    \r\n    /** @dev Make sure setup is finished */\r\n    modifier onlyAfterSetup() {\r\n        require(status != Status.Setup, \"Setup is not finished\");\r\n        _;\r\n    }\r\n\r\n    /** @dev Make sure setup is finished */\r\n    modifier onlyAfterStart() {\r\n        require(startTime != 0, \"Staking is not started\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     * @param _lpToken Contract address of LP Token\r\n     * @param _rewardsToken Contract address of Rewards Token\r\n     * @param _rewardsPerPeriodCap Amount of tokens to be distributed each period (1e18)\r\n     * @param _periodDays Period time in days\r\n     * @param _totalPeriods Total periods contract will be running\r\n     * @param _gracePeriodDays Grace period in days \r\n     * @param _holdDays Time in days LP Tokens will be on hold for user after each stake\r\n     * @param _feeBeneficiary Address where fees will be sent\r\n     * @param _fee Fee in ppm\r\n     */\r\n    constructor(\r\n        address _lpToken,\r\n        address _rewardsToken,\r\n        uint256 _rewardsPerPeriodCap,\r\n        uint256 _periodDays, \r\n        uint256 _totalPeriods,\r\n        uint256 _gracePeriodDays,\r\n        uint256 _holdDays,\r\n        address _feeBeneficiary,\r\n        uint256 _fee\r\n    )\r\n        public\r\n        LPTokenWrapper(_lpToken, _holdDays)\r\n    {\r\n        require(_lpToken.isContract(), \"LP Token address must be a contract\");\r\n        require(_rewardsToken.isContract(), \"Rewards Token address must be a contract\");\r\n        rewardsToken = IERC20(_rewardsToken);\r\n        rewardsPerPeriodCap = _rewardsPerPeriodCap;\r\n        rewardsTotalCap = _rewardsPerPeriodCap.mul(_totalPeriods);\r\n        periodTime = _periodDays.mul(1 days);\r\n        totalPeriods = _totalPeriods;\r\n        gracePeriodTime = _gracePeriodDays.mul(1 days);\r\n        feeBeneficiary = _feeBeneficiary;\r\n        fee = _fee;\r\n    }\r\n\r\n    /***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Updates contract setup and mark contract status as Running if all requirements are met\r\n     * @param _now Start contract immediatly if true\r\n     */    \r\n    function adminStart(bool _now) \r\n        external \r\n        onlyOwner\r\n    {\r\n        require(status == Status.Setup, \"Already started\");\r\n        require(rewardsToken.balanceOf(address(this)) >= rewardsTotalCap, \"Not enough reward tokens to start\");\r\n        status = Status.Running;\r\n        if(_now) _startNow();\r\n    }\r\n    \r\n    /**\r\n     * @dev Option to start contract even there is no deposits yet\r\n     */\r\n    function adminStartNow()\r\n        external\r\n        onlyOwner\r\n        onlyAfterSetup\r\n    {\r\n        require(startTime == 0 && status == Status.Running, \"Already started\");\r\n        _startNow();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev Option to end contract \r\n     */\r\n    function adminEnd()\r\n        external\r\n        onlyOwner\r\n        onlyAfterSetup\r\n    {\r\n        require(block.timestamp >= endTime && endTime != 0, \"Cannot End\");\r\n        _updatePeriod();\r\n    }\r\n    \r\n    /**\r\n     * @dev Close contract after End and Grace period and withdraw unclamed rewards tokens\r\n     * @param _address where to send\r\n     */\r\n     function adminClose(address _address)\r\n        external\r\n        onlyOwner\r\n        onlyAfterSetup\r\n    {\r\n        require(block.timestamp >= closeTime && closeTime != 0, \"Cannot Close\");\r\n        uint256 _rewardsBalance = rewardsToken.balanceOf(address(this));\r\n        if(_rewardsBalance > 0) rewardsToken.safeTransfer(_address, _rewardsBalance);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw other than LP or Rewards tokens \r\n     * @param _tokenAddress address of the token contract to withdraw\r\n     */\r\n     function adminWithdrawERC20(address _tokenAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_tokenAddress != address(rewardsToken) && _tokenAddress != address(lpToken), \"Cannot withdraw Reward or LP Tokens\");\r\n        IERC20 _token = IERC20(_tokenAddress);\r\n        uint256 _balance = _token.balanceOf(address(this));\r\n        require(_balance != 0, \"Not enough balance\");\r\n        uint256 _fee = _balance.mul(fee).div(1e6);\r\n        if(_fee != 0){\r\n            _token.safeTransfer(feeBeneficiary, _fee);\r\n            emit WithdrawnERC20(feeBeneficiary, _tokenAddress, _fee);\r\n        }\r\n        _token.safeTransfer(msg.sender, _balance.sub(_fee));\r\n        emit WithdrawnERC20(msg.sender, _tokenAddress, _balance.sub(_fee));\r\n    }\r\n    \r\n    /***************************************\r\n                    PRIVATE\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Starts the contract\r\n     */\r\n    function _startNow()\r\n        private\r\n    {\r\n        startTime = block.timestamp;\r\n        endTime = startTime.add(periodTime.mul(totalPeriods));  \r\n        closeTime = endTime.add(gracePeriodTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates last period to current and set status to Ended if needed\r\n     */\r\n    function _updatePeriod()\r\n        private\r\n    {\r\n        uint256 _currentPeriod = currentPeriod();\r\n        if(_currentPeriod != period){\r\n            period = _currentPeriod;\r\n            _updateHistoryTotalSupply(period);\r\n            if(_currentPeriod == totalPeriods){\r\n                status = Status.Ended;\r\n                //release hold of LP tokens\r\n                holdTime = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n \r\n    /***************************************\r\n                    ACTIONS\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Stakes an amount for the sender, assumes sender approved allowace at LP Token contract _amount for this contract address\r\n     * @param _amount of LP Tokens\r\n     */\r\n    function stake(uint256 _amount)\r\n        external\r\n        onlyAfterSetup\r\n        updatePeriod\r\n    {\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n        require(status != Status.Ended, \"Contract is Ended\");\r\n        if(startTime == 0) _startNow();\r\n        _stake(_amount, period);\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws given LP Token stake amount from the pool\r\n     * @param _amount LP Tokens to withdraw\r\n     */\r\n    function withdraw(uint256 _amount)\r\n        public\r\n        onlyAfterStart\r\n        updatePeriod\r\n    {\r\n        require(_amount > 0, \"Cannot withdraw 0\");\r\n        _withdraw(_amount, period);\r\n        emit Withdrawn(msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Claims outstanding rewards for the sender.\r\n     * First updates outstanding reward allocation and then transfers.\r\n     */\r\n    function claimReward()\r\n        public\r\n        nonReentrant\r\n        onlyAfterStart\r\n        updatePeriod\r\n    {\r\n        require(block.timestamp <= closeTime, \"Contract is Closed\");\r\n        uint256 reward = calculateReward(msg.sender);\r\n        if (reward > 0) {\r\n            _updateUser(msg.sender, period);\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }    \r\n    \r\n    /**\r\n     * @dev Withdraws LP Tokens stake from pool and claims any rewards\r\n     */\r\n    function exit() \r\n        external\r\n    {\r\n        uint256 _amount = balanceOf(msg.sender);\r\n        if(_amount !=0) withdraw(_amount);\r\n        claimReward();\r\n    }\r\n    \r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates current period, if contract is ended returns currentPeriod + 1 (totalPeriods)\r\n     */\r\n    function currentPeriod() \r\n        public \r\n        view \r\n        returns (uint256)\r\n    {\r\n        uint256 _currentPeriod;\r\n        if(startTime != 0 && endTime != 0)\r\n        {\r\n            if(block.timestamp >= endTime){\r\n                _currentPeriod = totalPeriods;\r\n            }else{\r\n                _currentPeriod = block.timestamp.sub(startTime).div(periodTime);\r\n            }\r\n        }\r\n        return _currentPeriod;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates pending rewards for the user since last period claimed rewards to current period\r\n     * @param _address address of the user\r\n     */\r\n     function calculateReward(address _address) \r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserData storage user = getUserData(_address);\r\n        if(block.timestamp >= closeTime) return 0;\r\n        uint256 _period = currentPeriod();\r\n        uint256 periodTotalSupply;\r\n        uint256 savedTotalSupply;\r\n        uint256 periodBalance;\r\n        uint256 savedBalance;\r\n        uint256 rewardTotal;\r\n        if(_period > user.period){\r\n            savedTotalSupply =  historyTotalSupply(user.period);\r\n            savedBalance = user.historyBalance[user.period];\r\n            if(savedTotalSupply != 0){\r\n                rewardTotal = rewardTotal.add(\r\n                    rewardsPerPeriodCap.mul(\r\n                        savedBalance\r\n                    ).mul(\r\n                        CALC_PRECISION\r\n                    ).div(\r\n                        savedTotalSupply\r\n                    ).div(\r\n                        CALC_PRECISION\r\n                    )\r\n                );\r\n            }\r\n            for(uint256 i = user.period+1; i < _period; i++){\r\n                periodTotalSupply = historyTotalSupply(i);\r\n                periodBalance = user.historyBalance[i];\r\n                periodBalance == 0 ? periodBalance = savedBalance : savedBalance = periodBalance;\r\n                periodTotalSupply == 0 ? periodTotalSupply = savedTotalSupply : savedTotalSupply = periodTotalSupply;\r\n                if(periodTotalSupply != 0){\r\n                    rewardTotal = rewardTotal.add(\r\n                        rewardsPerPeriodCap.mul(\r\n                            periodBalance\r\n                        ).mul(\r\n                            CALC_PRECISION\r\n                        ).div(\r\n                            periodTotalSupply\r\n                        ).div(\r\n                            CALC_PRECISION\r\n                        )\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return rewardTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns estimated current period reward for the user based on current total supply and his balance\r\n     * @param _address address of the user\r\n     */\r\n     function estimateReward(address _address) \r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _totalSupply = totalSupply();\r\n        if(_totalSupply == 0 || block.timestamp >= closeTime) return 0;\r\n        return rewardsPerPeriodCap.mul(\r\n            balanceOf(_address)\r\n        ).mul(\r\n            CALC_PRECISION\r\n        ).div(\r\n            _totalSupply\r\n        ).div(\r\n            CALC_PRECISION\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerPeriodCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriodDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_now\",\"type\":\"bool\"}],\"name\":\"adminStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminStartNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"adminWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"historyTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerPeriodCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTotalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum StakingPool.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dbe06999a11f6bae2fb1f77bb83ec8a1676595e20000000000000000000000005f1d330c16e27bd0e7b4e44bca2f5493f0f3313d000000000000000000000000000000000000000000002a5a058fc295ed00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000680727b0692b69f77f526275f7e9cf1511ddc2140000000000000000000000000000000000000000000000000000000000004e20","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://52d0109d789451b1295590d986e708fd35a7da5a13c2e6bb4539a934a4ab1090"}]}