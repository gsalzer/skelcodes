{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Halt.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\whiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint32.\r\n     */\r\nlibrary whiteListUint32 {\r\n    /**\r\n     * @dev add uint32 into white list.\r\n     * @param whiteList the storage whiteList.\r\n     * @param temp input value\r\n     */\r\n\r\n    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\r\n        if (!isEligibleUint32(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    /**\r\n     * @dev remove uint32 from whitelist.\r\n     */\r\n    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible uint256.\r\n     */\r\nlibrary whiteListUint256 {\r\n    // add whiteList\r\n    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\r\n        if (!isEligibleUint256(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n    /**\r\n     * @dev Implementation of a whitelist which filters a eligible address.\r\n     */\r\nlibrary whiteListAddress {\r\n    // add whiteList\r\n    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\r\n        if (!isEligibleAddress(whiteList,temp)){\r\n            whiteList.push(temp);\r\n        }\r\n    }\r\n    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        if (i<len){\r\n            if (i!=len-1) {\r\n                whiteList[i] = whiteList[len-1];\r\n            }\r\n            whiteList.length--;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\r\n        uint256 len = whiteList.length;\r\n        for (uint256 i=0;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\r\n        uint256 len = whiteList.length;\r\n        uint256 i=0;\r\n        for (;i<len;i++){\r\n            if (whiteList[i] == temp)\r\n                break;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\AddressWhiteList.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n    /**\r\n     * @dev Implementation of a whitelist filters a eligible address.\r\n     */\r\ncontract AddressWhiteList is Halt {\r\n\r\n    using whiteListAddress for address[];\r\n    uint256 constant internal allPermission = 0xffffffff;\r\n    uint256 constant internal allowBuyOptions = 1;\r\n    uint256 constant internal allowSellOptions = 1<<1;\r\n    uint256 constant internal allowExerciseOptions = 1<<2;\r\n    uint256 constant internal allowAddCollateral = 1<<3;\r\n    uint256 constant internal allowRedeemCollateral = 1<<4;\r\n    // The eligible adress list\r\n    address[] internal whiteList;\r\n    mapping(address => uint256) internal addressPermission;\r\n    /**\r\n     * @dev Implementation of add an eligible address into the whitelist.\r\n     * @param addAddress new eligible address.\r\n     */\r\n    function addWhiteList(address addAddress)public onlyOwner{\r\n        whiteList.addWhiteListAddress(addAddress);\r\n        addressPermission[addAddress] = allPermission;\r\n    }\r\n    function modifyPermission(address addAddress,uint256 permission)public onlyOwner{\r\n        addressPermission[addAddress] = permission;\r\n    }\r\n    /**\r\n     * @dev Implementation of revoke an invalid address from the whitelist.\r\n     * @param removeAddress revoked address.\r\n     */\r\n    function removeWhiteList(address removeAddress)public onlyOwner returns (bool){\r\n        addressPermission[removeAddress] = 0;\r\n        return whiteList.removeWhiteListAddress(removeAddress);\r\n    }\r\n    /**\r\n     * @dev Implementation of getting the eligible whitelist.\r\n     */\r\n    function getWhiteList()public view returns (address[] memory){\r\n        return whiteList;\r\n    }\r\n    /**\r\n     * @dev Implementation of testing whether the input address is eligible.\r\n     * @param tmpAddress input address for testing.\r\n     */    \r\n    function isEligibleAddress(address tmpAddress) public view returns (bool){\r\n        return whiteList.isEligibleAddress(tmpAddress);\r\n    }\r\n    function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){\r\n        return  (addressPermission[tmpAddress]&state) == state;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\ReentrancyGuard.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\OptionsPool\\IOptionsPool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IOptionsPool {\r\n//    function getOptionBalances(address user) external view returns(uint256[]);\r\n\r\n    function getExpirationList()external view returns (uint32[] memory);\r\n    function createOptions(address from,address settlement,uint256 type_ly_expiration,\r\n        uint128 strikePrice,uint128 underlyingPrice,uint128 amount,uint128 settlePrice) external returns(uint256);\r\n    function setSharedState(uint256 newFirstOption,int256[] calldata latestNetWorth,address[] calldata whiteList) external;\r\n    function getAllTotalOccupiedCollateral() external view returns (uint256,uint256);\r\n    function getCallTotalOccupiedCollateral() external view returns (uint256);\r\n    function getPutTotalOccupiedCollateral() external view returns (uint256);\r\n    function getTotalOccupiedCollateral() external view returns (uint256);\r\n//    function buyOptionCheck(uint32 expiration,uint32 underlying)external view;\r\n    function burnOptions(address from,uint256 id,uint256 amount,uint256 optionPrice)external;\r\n    function getOptionsById(uint256 optionsId)external view returns(uint256,address,uint8,uint32,uint256,uint256,uint256);\r\n    function getExerciseWorth(uint256 optionsId,uint256 amount)external view returns(uint256);\r\n    function calculatePhaseOptionsFall(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList) external view returns(int256[] memory);\r\n    function getOptionInfoLength()external view returns (uint256);\r\n    function getNetWrothCalInfo(address[] calldata whiteList)external view returns(uint256,int256[] memory);\r\n    function calRangeSharedPayment(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList)external view returns(int256[] memory,uint256[] memory,uint256);\r\n    function getNetWrothLatestWorth(address settlement)external view returns(int256);\r\n    function getBurnedFullPay(uint256 optionID,uint256 amount) external view returns(address,uint256);\r\n\r\n}\r\ncontract ImportOptionsPool is Ownable{\r\n    IOptionsPool internal _optionsPool;\r\n    function getOptionsPoolAddress() public view returns(address){\r\n        return address(_optionsPool);\r\n    }\r\n    function setOptionsPoolAddress(address optionsPool)public onlyOwner{\r\n        _optionsPool = IOptionsPool(optionsPool);\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IFNXOracle.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IFNXOracle {\r\n    /**\r\n  * @notice retrieves price of an asset\r\n  * @dev function to get price for an asset\r\n  * @param asset Asset for which to get the price\r\n  * @return uint mantissa of asset price (scaled by 1e8) or zero if unset or contract paused\r\n  */\r\n    function getPrice(address asset) external view returns (uint256);\r\n    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\r\n    function getPrices(uint256[] calldata assets) external view returns (uint256[]memory);\r\n    function getAssetAndUnderlyingPrice(address asset,uint256 underlying) external view returns (uint256,uint256);\r\n//    function getSellOptionsPrice(address oToken) external view returns (uint256);\r\n//    function getBuyOptionsPrice(address oToken) external view returns (uint256);\r\n}\r\ncontract ImportOracle is Ownable{\r\n    IFNXOracle internal _oracle;\r\n    function oraclegetPrices(uint256[] memory assets) internal view returns (uint256[]memory){\r\n        uint256[] memory prices = _oracle.getPrices(assets);\r\n        uint256 len = assets.length;\r\n        for (uint i=0;i<len;i++){\r\n        require(prices[i] >= 100 && prices[i] <= 1e30);\r\n        }\r\n        return prices;\r\n    }\r\n    function oraclePrice(address asset) internal view returns (uint256){\r\n        uint256 price = _oracle.getPrice(asset);\r\n        require(price >= 100 && price <= 1e30);\r\n        return price;\r\n    }\r\n    function oracleUnderlyingPrice(uint256 cToken) internal view returns (uint256){\r\n        uint256 price = _oracle.getUnderlyingPrice(cToken);\r\n        require(price >= 100 && price <= 1e30);\r\n        return price;\r\n    }\r\n    function oracleAssetAndUnderlyingPrice(address asset,uint256 cToken) internal view returns (uint256,uint256){\r\n        (uint256 price1,uint256 price2) = _oracle.getAssetAndUnderlyingPrice(asset,cToken);\r\n        require(price1 >= 100 && price1 <= 1e30);\r\n        require(price2 >= 100 && price2 <= 1e30);\r\n        return (price1,price2);\r\n    }\r\n    function getOracleAddress() public view returns(address){\r\n        return address(_oracle);\r\n    }\r\n    function setOracleAddress(address oracle)public onlyOwner{\r\n        _oracle = IFNXOracle(oracle);\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IOptionsPrice.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IOptionsPrice {\r\n    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)external view returns (uint256);\r\n    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n                uint256 ivNumerator,uint8 optType)external view returns (uint256);\r\n    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) external view returns (uint256);\r\n}\r\ncontract ImportOptionsPrice is Ownable{\r\n    IOptionsPrice internal _optionsPrice;\r\n    function getOptionsPriceAddress() public view returns(address){\r\n        return address(_optionsPrice);\r\n    }\r\n    function setOptionsPriceAddress(address optionsPrice)public onlyOwner{\r\n        _optionsPrice = IOptionsPrice(optionsPrice);\r\n    }\r\n}\r\n\r\n// File: contracts\\CollateralPool\\ICollateralPool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface ICollateralPool {\r\n    function getFeeRateAll()external view returns (uint32[] memory);\r\n    function getUserPayingUsd(address user)external view returns (uint256);\r\n    function getUserInputCollateral(address user,address collateral)external view returns (uint256);\r\n    //function getNetWorthBalance(address collateral)external view returns (int256);\r\n    function getCollateralBalance(address collateral)external view returns (uint256);\r\n\r\n    //add\r\n    function addUserPayingUsd(address user,uint256 amount)external;\r\n    function addUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function addNetWorthBalance(address collateral,int256 amount)external;\r\n    function addCollateralBalance(address collateral,uint256 amount)external;\r\n    //sub\r\n    function subUserPayingUsd(address user,uint256 amount)external;\r\n    function subUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function subNetWorthBalance(address collateral,int256 amount)external;\r\n    function subCollateralBalance(address collateral,uint256 amount)external;\r\n        //set\r\n    function setUserPayingUsd(address user,uint256 amount)external;\r\n    function setUserInputCollateral(address user,address collateral,uint256 amount)external;\r\n    function setNetWorthBalance(address collateral,int256 amount)external;\r\n    function setCollateralBalance(address collateral,uint256 amount)external;\r\n    function transferPaybackAndFee(address recieptor,address settlement,uint256 payback,uint256 feeType)external;\r\n\r\n    function buyOptionsPayfor(address payable recieptor,address settlement,uint256 settlementAmount,uint256 allPay)external;\r\n    function transferPayback(address recieptor,address settlement,uint256 payback)external;\r\n    function transferPaybackBalances(address account,uint256 redeemWorth,address[] calldata tmpWhiteList,uint256[] calldata colBalances,\r\n        uint256[] calldata PremiumBalances,uint256[] calldata prices)external;\r\n    function getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] calldata tmpWhiteList,\r\n        uint256[] calldata _RealBalances,uint256[] calldata prices) external view returns(uint256[] memory,uint256[] memory);\r\n    function addTransactionFee(address collateral,uint256 amount,uint256 feeType)external returns (uint256);\r\n\r\n    function getAllRealBalance(address[] calldata whiteList)external view returns(int256[] memory);\r\n    function getRealBalance(address settlement)external view returns(int256);\r\n    function getNetWorthBalance(address settlement)external view returns(uint256);\r\n}\r\ncontract ImportCollateralPool is Ownable{\r\n    ICollateralPool internal _collateralPool;\r\n    function getCollateralPoolAddress() public view returns(address){\r\n        return address(_collateralPool);\r\n    }\r\n    function setCollateralPoolAddress(address collateralPool)public onlyOwner{\r\n        _collateralPool = ICollateralPool(collateralPool);\r\n    }\r\n}\r\n\r\n// File: contracts\\FPTCoin\\IFPTCoin.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IFPTCoin {\r\n    function lockedBalanceOf(address account) external view returns (uint256);\r\n    function lockedWorthOf(address account) external view returns (uint256);\r\n    function getLockedBalance(address account) external view returns (uint256,uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address account, uint256 amount) external;\r\n    function burn(address account, uint256 amount) external;\r\n    function addlockBalance(address account, uint256 amount,uint256 lockedWorth)external; \r\n    function getTotalLockedWorth() external view returns (uint256);\r\n    function addMinerBalance(address account,uint256 amount) external;\r\n    function redeemLockedCollateral(address account,uint256 tokenAmount,uint256 leftCollateral)external returns (uint256,uint256);\r\n}\r\ncontract ImportIFPTCoin is Ownable{\r\n    IFPTCoin internal _FPTCoin;\r\n    function getFPTCoinAddress() public view returns(address){\r\n        return address(_FPTCoin);\r\n    }\r\n    function setFPTCoinAddress(address FPTCoinAddr)public onlyOwner{\r\n        _FPTCoin = IFPTCoin(FPTCoinAddr);\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\ImputRange.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract ImputRange is Ownable {\r\n    \r\n    //The maximum input amount limit.\r\n    uint256 private maxAmount = 1e30;\r\n    //The minimum input amount limit.\r\n    uint256 private minAmount = 1e2;\r\n    \r\n    modifier InRange(uint256 amount) {\r\n        require(maxAmount>=amount && minAmount<=amount,\"input amount is out of input amount range\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Determine whether the input amount is within the valid range\r\n     * @param Amount Test value which is user input\r\n     */\r\n    function isInputAmountInRange(uint256 Amount)public view returns (bool){\r\n        return(maxAmount>=Amount && minAmount<=Amount);\r\n    }\r\n    /*\r\n    function isInputAmountSmaller(uint256 Amount)public view returns (bool){\r\n        return maxAmount>=amount;\r\n    }\r\n    function isInputAmountLarger(uint256 Amount)public view returns (bool){\r\n        return minAmount<=amount;\r\n    }\r\n    */\r\n    modifier Smaller(uint256 amount) {\r\n        require(maxAmount>=amount,\"input amount is larger than maximium\");\r\n        _;\r\n    }\r\n    modifier Larger(uint256 amount) {\r\n        require(minAmount<=amount,\"input amount is smaller than maximium\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev get the valid range of input amount\r\n     */\r\n    function getInputAmountRange() public view returns(uint256,uint256) {\r\n        return (minAmount,maxAmount);\r\n    }\r\n    /**\r\n     * @dev set the valid range of input amount\r\n     * @param _minAmount the minimum input amount limit\r\n     * @param _maxAmount the maximum input amount limit\r\n     */\r\n    function setInputAmountRange(uint256 _minAmount,uint256 _maxAmount) public onlyOwner{\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n    }        \r\n}\r\n\r\n// File: contracts\\modules\\Allowances.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * each operator can be granted exclusive access to specific functions.\r\n *\r\n */\r\ncontract Allowances is Ownable {\r\n    mapping (address => uint256) internal allowances;\r\n    bool internal bValid = false;\r\n    /**\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public onlyOwner{\r\n        allowances[spender] = amount;\r\n    }\r\n    function allowance(address spender) public view returns (uint256) {\r\n        return allowances[spender];\r\n    }\r\n    function setValid(bool _bValid) public onlyOwner{\r\n        bValid = _bValid;\r\n    }\r\n    function checkAllowance(address spender, uint256 amount) public view returns(bool){\r\n        return (!bValid) || (allowances[spender] >= amount);\r\n    }\r\n    modifier sufficientAllowance(address spender, uint256 amount){\r\n        require((!bValid) || (allowances[spender] >= amount),\"Allowances : user's allowance is unsufficient!\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\IERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\OptionsManager\\ManagerData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title collateral calculate module\r\n * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\r\n *\r\n */\r\ncontract ManagerData is ReentrancyGuard,ImputRange,AddressWhiteList,Allowances,ImportIFPTCoin,\r\n                ImportOracle,ImportOptionsPool,ImportCollateralPool,ImportOptionsPrice {\r\n    // The minimum collateral rate for options. This value is thousandths.\r\n    mapping (address=>uint256) collateralRate;\r\n//    uint256 private collateralRate = 5000;\r\n    /**\r\n     * @dev Emitted when `from` added `amount` collateral and minted `tokenAmount` FPTCoin.\r\n     */\r\n    event AddCollateral(address indexed from,address indexed collateral,uint256 amount,uint256 tokenAmount);\r\n    /**\r\n     * @dev Emitted when `from` redeemed `allRedeem` collateral.\r\n     */\r\n    event RedeemCollateral(address indexed from,address collateral,uint256 allRedeem);\r\n    event DebugEvent(uint256 id,uint256 value1,uint256 value2);\r\n        /**\r\n    * @dev input price valid range rate, thousandths.\r\n    * the input price must greater than current price * minPriceRate /1000\r\n    *       and less  than current price * maxPriceRate /1000 \r\n    * maxPriceRate is the maximum limit of the price valid range rate\r\n    * maxPriceRate is the minimum limit of the price valid range rage\r\n    */   \r\n    uint256 internal maxPriceRate = 1500;\r\n    uint256 internal minPriceRate = 500;\r\n    /**\r\n     * @dev Emitted when `from` buy `optionAmount` option and create new option.\r\n     * @param from user's account\r\n     * @param settlement user's input settlement paid for buy new option.\r\n     * @param optionPrice option's paid price\r\n     * @param settlementAmount settement cost\r\n     * @param optionAmount mint option token amount.\r\n     */  \r\n    event BuyOption(address indexed from,address indexed settlement,uint256 optionPrice,uint256 settlementAmount,uint256 optionAmount);\r\n    /**\r\n     * @dev Emitted when `from` sell `amount` option whose id is `optionId` and received sellValue,priced in usd.\r\n     */  \r\n    event SellOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\r\n    /**\r\n     * @dev Emitted when `from` exercise `amount` option whose id is `optionId` and received sellValue,priced in usd.\r\n     */  \r\n    event ExerciseOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\r\n}\r\n\r\n// File: contracts\\Proxy\\baseProxy.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @title  baseProxy Contract\r\n\r\n */\r\ncontract baseProxy is Ownable {\r\n    address public implementation;\r\n    constructor(address implementation_) public {\r\n        // Creator of the contract is admin during initialization\r\n        implementation = implementation_; \r\n        (bool success,) = implementation_.delegatecall(abi.encodeWithSignature(\"initialize()\"));\r\n        require(success);\r\n    }\r\n    function getImplementation()public view returns(address){\r\n        return implementation;\r\n    }\r\n    function setImplementation(address implementation_)public onlyOwner{\r\n        implementation = implementation_; \r\n        (bool success,) = implementation_.delegatecall(abi.encodeWithSignature(\"update()\"));\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToImplementation(bytes memory data) public returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = implementation.delegatecall(data);\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize)\r\n            }\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\r\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\r\n        assembly {\r\n            if eq(success, 0) {\r\n                revert(add(returnData, 0x20), returndatasize)\r\n            }\r\n        }\r\n        return abi.decode(returnData, (bytes));\r\n    }\r\n\r\n    function delegateToViewAndReturn() internal view returns (bytes memory) {\r\n        (bool success, ) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", msg.data));\r\n\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n            switch success\r\n            case 0 { revert(free_mem_ptr, returndatasize) }\r\n            default { return(add(free_mem_ptr, 0x40), returndatasize) }\r\n        }\r\n    }\r\n\r\n    function delegateAndReturn() internal returns (bytes memory) {\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n            let free_mem_ptr := mload(0x40)\r\n            returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n            switch success\r\n            case 0 { revert(free_mem_ptr, returndatasize) }\r\n            default { return(free_mem_ptr, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\OptionsManager\\ManagerProxy.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n/**\r\n * @title  Erc20Delegator Contract\r\n\r\n */\r\ncontract ManagerProxy is ManagerData,baseProxy{\r\n    /**\r\n    * @dev Options manager constructor. set other contract address\r\n    *  oracleAddr fnx oracle contract address.\r\n    *  optionsPriceAddr options price contract address\r\n    *  optionsPoolAddr optoins pool contract address\r\n    *  FPTCoinAddr FPTCoin contract address\r\n    */\r\n    constructor(address implementation_,address oracleAddr,address optionsPriceAddr,\r\n            address optionsPoolAddr,address collateralPoolAddr,address FPTCoinAddr)\r\n         baseProxy(implementation_) public  {\r\n        _oracle = IFNXOracle(oracleAddr);\r\n        _optionsPrice = IOptionsPrice(optionsPriceAddr);\r\n        _optionsPool = IOptionsPool(optionsPoolAddr);\r\n        _collateralPool = ICollateralPool(collateralPoolAddr);\r\n        _FPTCoin = IFPTCoin(FPTCoinAddr);\r\n/*\r\n        allowances[0x6D14B6A933Bfc473aEDEBC3beD58cA268FEe8b4a] = 1e40;\r\n        allowances[0x87A7604C4E9E1CED9990b6D486d652f0194A4c98] = 1e40;\r\n        allowances[0x7ea1a45f0657D2Dbd77839a916AB83112bdB5590] = 1e40;\r\n        allowances[0x358dba22d19789E01FD6bB528f4E75Bc06b56A79] = 1e40;\r\n        allowances[0x91406B5d57893E307f042D71C91e223a7058Eb72] = 1e40;\r\n        allowances[0xc89b50171C1F692f5CBC37aC4AF540f9cecEE0Ff] = 1e40;\r\n        allowances[0x92e25B14B0B760212D7E831EB8436Fbb93826755] = 1e40;\r\n        allowances[0x2D8f8d7737046c1475ED5278a18c4A62968f0CB2] = 1e40;\r\n        allowances[0xaAC6A96681cfc81c756Db31D93eafb8237A27Ba8] = 1e40;\r\n        allowances[0xB752d7a4E7ebD7B7A7b4DEEFd086571e5e7F5BB8] = 1e40;\r\n        allowances[0x8AbD525792015E1eBae2249756729168A3c1866F] = 1e40;\r\n        allowances[0x991b9d51e5526D497A576DF82eaa4BEA51EAD16e] = 1e40;\r\n        allowances[0xC8e7E9e496DE394969cb377F5Df0E3cdDFB74164] = 1e40;\r\n        allowances[0x0B173b9014a0A36aAC51eE4957BC8c7E20686d3F] = 1e40;\r\n        allowances[0xb9cE369E36Ab9ea488887ad9483f0ce899ab8fbe] = 1e40;\r\n        allowances[0x20C337F68Dc90D830Ac8e379e8823008dc791D56] = 1e40;\r\n        allowances[0x10E3163a7354b16ac24e7fCeE593c22E86a0abCa] = 1e40;\r\n        allowances[0x669cFbd063C434a5ee51adc78d2292A2D3Fe88E0] = 1e40;\r\n        allowances[0x59F1cfc3c485b9693e3F640e1B56Fe83B5e3183a] = 1e40;\r\n        allowances[0x4B38bf8A442D01017a6882d52Ef1B13CD069bb0d] = 1e40;\r\n        allowances[0x9c8f005ab27AdB94f3d49020A15722Db2Fcd9F27] = 1e40;\r\n        allowances[0x2240D781185B93DdD83C5eA78F4E64a9Cb5B0446] = 1e40;\r\n        allowances[0xa5B7364926Ac89aBCA15D56738b3EA79B31A0433] = 1e40;\r\n        allowances[0xafE53d85Da6b510B4fcc3774373F8880097F3E10] = 1e40;\r\n        allowances[0xb604BE9155810e4BA938ce06f8E554D2EB3438fE] = 1e40;\r\n        allowances[0xA27D1D94C0B4ce79d49E7c817C688c563D297fF7] = 1e40;\r\n        allowances[0x32ACbBa480e4bA2ee3E2c620Bf7A3242631293BE] = 1e40;\r\n        allowances[0x7Acfd797725EcCd5D3D60fB5Dd566760D0743098] = 1e40;\r\n        allowances[0x0F8f5137C365D01f71a3fb8A4283816FB12A8Efb] = 1e40;\r\n        allowances[0x2F160d9b63b5b8255499aB16959231275D4396db] = 1e40;\r\n        allowances[0xf85a428D528e89E115E5C91F7347fE9ac2F92d72] = 1e40;\r\n        allowances[0xb2c62391CCe67C5EfC1b17D442eBd24c90F6A47C] = 1e40;\r\n        allowances[0x10d31b7063cC25F9916B390677DC473B83E84e13] = 1e40;\r\n        allowances[0x358dba22d19789E01FD6bB528f4E75Bc06b56A79] = 1e40;\r\n        allowances[0xe4A263230d67d30c71634CA462a00174d943A14D] = 1e40;\r\n        allowances[0x1493572Bd9Fa9F75b0B81D6Cdd583AD87D6B358F] = 1e40;\r\n        allowances[0x025b654306621157aE8208ebC5DD0f311F425ac3] = 1e40;\r\n        allowances[0xCE257C6BD7aF256e1C8Dd11057F90b9A1AeD85a4] = 1e40;\r\n        allowances[0x7D57B8B8A731Cc1fc1E661842790e1864d5Cf4E8] = 1e40;\r\n        allowances[0xe129e34D1bD6AA1370090Cb1596207197A1a0689] = 1e40;\r\n        allowances[0xBA096024056bB653c6E28f53C8889BFC3553bAD8] = 1e40;\r\n        allowances[0x73DFb4bA8fFF9A975a28FF169157C7B71B9574aE] = 1e40;\r\n        allowances[0xddbDc4a3Af9DAa4005c039BE8329c1F03F01EDb9] = 1e40;\r\n        allowances[0x4086E0e1B3351D2168B74E7A61C0844b78f765F2] = 1e40;\r\n        allowances[0x4ce4fe1B35F11a428DD36A78C56Cb8Cc755f8847] = 1e40;\r\n        allowances[0x9e169106D1d406F3d51750835E01e8a34c265957] = 1e40;\r\n        allowances[0x7EcB07AdC76b2979fbE45Af13e2B706bA3562d1d] = 1e40;\r\n        allowances[0x3B95Df362B1857e6Db3483521057C4587C467531] = 1e40;\r\n        allowances[0xe596470D291Cb2D32ec111afC314B07006690c72] = 1e40;\r\n        allowances[0x80fd2a2Ed7e42Ec8bD9635285B09C773Da31eF71] = 1e40;\r\n        allowances[0xC09ec032769b04b08BDe8ADb608d0aaF903FF9Be] = 1e40;\r\n        allowances[0xf5F9AFBC3915075C5C62A995501fae643F5f6857] = 1e40;\r\n        allowances[0xf010920E1B098DFA1732d41Fbc895aB6E65E4438] = 1e40;\r\n        allowances[0xb37983510f9483A0725bC109d7f19237Aa3212d5] = 1e40;\r\n        allowances[0x9531479AA50908c9053144eF99c235abA6168069] = 1e40;\r\n        allowances[0x98F6a20f80FbF33153BE7ed1C8C3c10d4d6433DF] = 1e40;\r\n        allowances[0x4c8dbbDdC95B7981a7a09dE455ddfc58173CF471] = 1e40;\r\n        allowances[0x5acfbbF0aA370F232E341BC0B1a40e996c960e07] = 1e40;\r\n        allowances[0x7388B46005646008ada2d6d7DC2830F6C63b9BeD] = 1e40;\r\n        allowances[0xBFa43bf6E9FB6d5CC253Ff23c31F2b86a739bB98] = 1e40;\r\n        allowances[0x09AEa652006F4088d389c878474e33e9B15986E5] = 1e40;\r\n        allowances[0x0fBC222aDF84bEE9169022b28ebc3D32b5C60756] = 1e40;\r\n        allowances[0xBD53E948a5630c409b98bFC6112c2891836d5b33] = 1e40;\r\n        allowances[0x0eBF4005C35d525240c3237c1C448B88Deca9447] = 1e40;\r\n        allowances[0xa1cCC796E2B44e80112c065A4d8F05661E685eD8] = 1e40;\r\n        allowances[0x4E60bE84870FE6AE350B563A121042396Abe1eaF] = 1e40;\r\n        allowances[0x5286CEde4a0Eda5916d639535aDFbefAd980D6E1] = 1e40;\r\n*/\r\n    }\r\n    /**\r\n     * @dev  The foundation owner want to set the minimum collateral occupation rate.\r\n     *  collateral collateral coin address\r\n     *  colRate The thousandths of the minimum collateral occupation rate.\r\n     */\r\n    function setCollateralRate(address /*collateral*/,uint256 /*colRate*/) public {\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n     * @dev Get the minimum collateral occupation rate.\r\n     */\r\n    function getCollateralRate(address /*collateral*/)public view returns (uint256) {\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve user's cost of collateral, priced in USD.\r\n     *  user input retrieved account \r\n     */\r\n    function getUserPayingUsd(address /*user*/)public view returns (uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve user's amount of the specified collateral.\r\n     *  user input retrieved account \r\n     *  collateral input retrieved collateral coin address \r\n     */\r\n    function userInputCollateral(address /*user*/,address /*collateral*/)public view returns (uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve user's current total worth, priced in USD.\r\n     *  account input retrieve account\r\n     */\r\n    function getUserTotalWorth(address /*account*/)public view returns (uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve FPTCoin's net worth, priced in USD.\r\n     */\r\n    function getTokenNetworth() public view returns (uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Deposit collateral in this pool from user.\r\n     *  collateral The collateral coin address which is in whitelist.\r\n     *  amount the amount of collateral to deposit.\r\n     */\r\n    function addCollateral(address /*collateral*/,uint256 /*amount*/) public payable {\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n     * @dev redeem collateral from this pool, user can input the prioritized collateral,he will get this coin,\r\n     * if this coin is unsufficient, he will get others collateral which in whitelist.\r\n     *  tokenAmount the amount of FPTCoin want to redeem.\r\n     *  collateral The prioritized collateral coin address.\r\n     */\r\n    function redeemCollateral(uint256 /*tokenAmount*/,address /*collateral*/) public {\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve user's collateral worth in all collateral coin. \r\n     * If user want to redeem all his collateral,and the vacant collateral is sufficient,\r\n     * He can redeem each collateral amount in return list.\r\n     *  account the retrieve user's account;\r\n     */\r\n    function calCollateralWorth(address /*account*/)public view returns(uint256[] memory){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the occupied collateral worth, multiplied by minimum collateral rate, priced in USD. \r\n     */\r\n    function getOccupiedCollateral() public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the available collateral worth, the worth of collateral which can used for buy options, priced in USD. \r\n     */\r\n    function getAvailableCollateral()public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the left collateral worth, the worth of collateral which can used for redeem collateral, priced in USD. \r\n     */\r\n    function getLeftCollateral()public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the unlocked collateral worth, the worth of collateral which currently used for options, priced in USD. \r\n     */\r\n    function getUnlockedCollateral()public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev The auxiliary function for calculate option occupied. \r\n     *  strikePrice option's strike price\r\n     *  underlyingPrice option's underlying price\r\n     *  amount option's amount\r\n     *  optType option's type, 0 for call, 1 for put.\r\n     */\r\n    function calOptionsOccupied(uint256 /*strikePrice*/,uint256 /*underlyingPrice*/,uint256 /*amount*/,uint8 /*optType*/)public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the total collateral worth, priced in USD. \r\n     */\r\n    function getTotalCollateral()public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev Retrieve the balance of collateral, the auxiliary function for the total collateral calculation. \r\n     */\r\n    function getRealBalance(address /*settlement*/)public view returns(int256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    function getNetWorthBalance(address /*settlement*/)public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n     * @dev collateral occupation rate calculation\r\n     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\r\n     */\r\n    function calculateCollateralRate()public view returns (uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n    * @dev retrieve input price valid range rate, thousandths.\r\n    */ \r\n    function getPriceRateRange() public view returns(uint256,uint256) {\r\n        delegateToViewAndReturn();\r\n    }\r\n    /**\r\n    * @dev set input price valid range rate, thousandths.\r\n    */ \r\n    function setPriceRateRange(uint256 /*_minPriceRate*/,uint256 /*_maxPriceRate*/) public{\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n    * @dev user buy option and create new option.\r\n    *  settlement user's settement coin address\r\n    *  settlementAmount amount of settlement user want fo pay.\r\n    *  strikePrice user input option's strike price\r\n    *  underlying user input option's underlying id, 1 for BTC,2 for ETH\r\n    *  expiration user input expiration,time limit from now\r\n    *  amount user input amount of new option user want to buy.\r\n    *  optType user input option type\r\n    */ \r\n    function buyOption(address /*settlement*/,uint256 /*settlementAmount*/, uint256 /*strikePrice*/,uint32 /*underlying*/,\r\n                uint32 /*expiration*/,uint256 /*amount*/,uint8 /*optType*/) public payable{\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n    * @dev User sell option.\r\n    *  optionsId option's ID which was wanted to sell, must owned by user\r\n    *  amount user input amount of option user want to sell.\r\n    */ \r\n    function sellOption(uint256 /*optionsId*/,uint256 /*amount*/) public{\r\n        delegateAndReturn();\r\n    }\r\n    /**\r\n    * @dev User exercise option.\r\n    *  optionsId option's ID which was wanted to exercise, must owned by user\r\n    *  amount user input amount of option user want to exercise.\r\n    */ \r\n    function exerciseOption(uint256 /*optionsId*/,uint256 /*amount*/) public{\r\n        delegateAndReturn();\r\n    }\r\n    function getOptionsPrice(uint256 /*underlyingPrice*/, uint256 /*strikePrice*/, uint256 /*expiration*/,\r\n                    uint32 /*underlying*/,uint256 /*amount*/,uint8 /*optType*/) public view returns(uint256){\r\n        delegateToViewAndReturn();\r\n    }\r\n    function getALLCollateralinfo(address /*user*/)public view \r\n        returns(uint256[] memory,int256[] memory,uint32[] memory,uint32[] memory){\r\n        delegateToViewAndReturn();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsPriceAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FPTCoinAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settlement\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionAmount\",\"type\":\"uint256\"}],\"name\":\"BuyOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"DebugEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"}],\"name\":\"ExerciseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allRedeem\",\"type\":\"uint256\"}],\"name\":\"RedeemCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"}],\"name\":\"SellOption\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"buyOption\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"calCollateralWorth\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"calOptionsOccupied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"checkAddressPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateToViewImplementation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getALLCollateralinfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollateralPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getCollateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFPTCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInputAmountRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeftCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getNetWorthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOccupiedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOptionsPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOptionsPriceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRealBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenNetworth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnlockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUserPayingUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUserTotalWorth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tmpAddress\",\"type\":\"address\"}],\"name\":\"isEligibleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"isInputAmountInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"permission\",\"type\":\"uint256\"}],\"name\":\"modifyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removeAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralPool\",\"type\":\"address\"}],\"name\":\"setCollateralPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setCollateralRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"FPTCoinAddr\",\"type\":\"address\"}],\"name\":\"setFPTCoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setInputAmountRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionsPool\",\"type\":\"address\"}],\"name\":\"setOptionsPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionsPrice\",\"type\":\"address\"}],\"name\":\"setOptionsPriceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setPriceRateRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bValid\",\"type\":\"bool\"}],\"name\":\"setValid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInputCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ManagerProxy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000508adbfd8f8933dd310e0f12ec571355da592666000000000000000000000000366080a2605d37d91b69f9ac08d0434142fa01240000000000000000000000005e5114738ff0e6a36c289ecddd46c1975cefc272000000000000000000000000ed54fb841a62a69d4935303706d1dad7dc87b360000000000000000000000000919a35a4f40c479b3319e3c3a2484893c06fd7de0000000000000000000000007e605fb638983a448096d82ffd2958ba012f30cd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://34cf2c4d455f07a06c8fb356e61c90be0a9278d6933cd633b962e3a0c005eec1"}]}