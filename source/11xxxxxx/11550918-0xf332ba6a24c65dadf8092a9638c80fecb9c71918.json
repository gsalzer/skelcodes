{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface IWallet {\r\n    function authoriseModule(address _module, bool _value) external;\r\n}\r\n\r\ninterface IModule {\r\n    /**\r\n     * @notice Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(address _wallet) external;\r\n\r\n    /**\t\r\n     * @notice Adds a module to a wallet. Cannot execute when wallet is locked (or under recovery)\t\r\n     * @param _wallet The target wallet.\t\r\n     * @param _module The modules to authorise.\t\r\n     */\t\r\n    function addModule(address _wallet, address _module) external;\r\n}\r\n\r\ncontract LightSimpleUpgrader is IModule {\r\n\r\n    address[] public toDisable;\r\n    address[] public toEnable;\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(\r\n        address[] memory _toDisable,\r\n        address[] memory _toEnable\r\n    )\r\n        public\r\n    {\r\n        toDisable = _toDisable;\r\n        toEnable = _toEnable;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n     * @notice Perform the upgrade for a wallet. This method gets called when SimpleUpgrader is temporarily added as a module.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(address _wallet) external override {\r\n        require(msg.sender == _wallet, \"SU: only wallet can call init\");\r\n\r\n        uint256 i = 0;\r\n        //add new modules\r\n        for (; i < toEnable.length; i++) {\r\n            IWallet(_wallet).authoriseModule(toEnable[i], true);\r\n        }\r\n        //remove old modules\r\n        for (i = 0; i < toDisable.length; i++) {\r\n            IWallet(_wallet).authoriseModule(toDisable[i], false);\r\n        }\r\n        // SimpleUpgrader did its job, we no longer need it as a module\r\n        IWallet(_wallet).authoriseModule(address(this), false);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModule\r\n     */\r\n    function addModule(address _wallet, address _module) external override {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toDisable\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_toEnable\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toDisable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LightSimpleUpgrader","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002e278c93f95827c18437e4ea7324d705f7fcfeaa0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000711dab2333d815341ad1cb94d473f40e5749bb8f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6807825d0feb340b952dbe483f7fc24d3bea44796c91ae6a3c691ec88ee1aae5"}]}