{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/AddressStringUtil.sol@v1.1.4\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary AddressStringUtil {\r\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\r\n    function toAsciiString(address addr, uint len) pure internal returns (string memory) {\r\n        require(len % 2 == 0 && len > 0 && len <= 40, \"AddressStringUtil: INVALID_LEN\");\r\n\r\n        bytes memory s = new bytes(len);\r\n        uint addrNum = uint(addr);\r\n        for (uint i = 0; i < len / 2; i++) {\r\n            // shift right and truncate all but the least significant byte to extract the byte at position 19-i\r\n            uint8 b = uint8(addrNum >> (8 * (19 - i)));\r\n            // first hex character is the most significant 4 bits\r\n            uint8 hi = b >> 4;\r\n            // second hex character is the least significant 4 bits\r\n            uint8 lo = b - (hi << 4);\r\n            s[2 * i] = char(hi);\r\n            s[2 * i + 1] = char(lo);\r\n        }\r\n        return string(s);\r\n    }\r\n\r\n    // hi and lo are only 4 bits and between 0 and 16\r\n    // this method converts those values to the unicode/ascii code point for the hex representation\r\n    // uses upper case for the characters\r\n    function char(uint8 b) pure private returns (byte c) {\r\n        if (b < 10) {\r\n            return byte(b + 0x30);\r\n        } else {\r\n            return byte(b + 0x37);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/lib/contracts/libraries/SafeERC20Namer.sol@v1.1.4\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\r\n// this library will always produce a string symbol to represent the token\r\nlibrary SafeERC20Namer {\r\n    function bytes32ToString(bytes32 x) pure private returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = x[j];\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // assumes the data is in position 2\r\n    function parseStringData(bytes memory b) pure private returns (string memory) {\r\n        uint charCount = 0;\r\n        // first parse the charCount out of the data\r\n        for (uint i = 32; i < 64; i++) {\r\n            charCount <<= 8;\r\n            charCount += uint8(b[i]);\r\n        }\r\n\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint i = 0; i < charCount; i++) {\r\n            bytesStringTrimmed[i] = b[i + 64];\r\n        }\r\n\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    // uses a heuristic to produce a token name from the address\r\n    // the heuristic returns the full hex of the address string in upper case\r\n    function addressToName(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 40);\r\n    }\r\n\r\n    // uses a heuristic to produce a token symbol from the address\r\n    // the heuristic returns the first 6 hex of the address string in upper case\r\n    function addressToSymbol(address token) pure private returns (string memory) {\r\n        return AddressStringUtil.toAsciiString(token, 6);\r\n    }\r\n\r\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\r\n    function callAndParseStringReturn(address token, bytes4 selector) view private returns (string memory) {\r\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\r\n        // if not implemented, or returns empty data, return empty string\r\n        if (!success || data.length == 0) {\r\n            return \"\";\r\n        }\r\n        // bytes32 data always has length 32\r\n        if (data.length == 32) {\r\n            bytes32 decoded = abi.decode(data, (bytes32));\r\n            return bytes32ToString(decoded);\r\n        } else if (data.length > 64) {\r\n            return abi.decode(data, (string));\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\r\n    function tokenSymbol(address token) internal view returns (string memory) {\r\n        // 0x95d89b41 = bytes4(keccak256(\"symbol()\"))\r\n        string memory symbol = callAndParseStringReturn(token, 0x95d89b41);\r\n        if (bytes(symbol).length == 0) {\r\n            // fallback to 6 uppercase hex of address\r\n            return addressToSymbol(token);\r\n        }\r\n        return symbol;\r\n    }\r\n\r\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\r\n    function tokenName(address token) internal view returns (string memory) {\r\n        // 0x06fdde03 = bytes4(keccak256(\"name()\"))\r\n        string memory name = callAndParseStringReturn(token, 0x06fdde03);\r\n        if (bytes(name).length == 0) {\r\n            // fallback to full hex of address\r\n            return addressToName(token);\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/v612/ICOREGlobals.sol\r\n\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREGlobalsAddress() external view returns (address);\r\n    function COREDelegatorAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function COREWETHUniPair() external view returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function addDelegatorStateChangePermission(address that, bool status) external;\r\n    function isStateChangeApprovedContract(address that)  external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol@v3.0.0\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/v612/COREForkMigrator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface ICOREVault {\r\n    function addPendingRewards(uint256 _) external; \r\n}\r\n\r\ninterface IUNICORE {\r\n    function viewGovernanceLevel(address) external returns (uint8);\r\n    function setVault(address) external;\r\n    function burnFromUni(uint256) external;\r\n    function viewUNIv2() external returns (address);\r\n    function viewUniBurnRatio() external returns (uint256);\r\n    function setGovernanceLevel(address, uint8) external;\r\n    function balanceOf(address) external returns (uint256);\r\n    function setUniBurnRatio(uint256) external;\r\n    function viewwWrappedUNIv2() external returns (address);\r\n    function burnToken(uint256) external;\r\n    function totalSupply() external returns (uint256);\r\n}\r\n\r\ninterface IUNICOREVault {\r\n    function userInfo(uint,address) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface IProxyAdmin {\r\n    function owner() external returns (address);\r\n    function transferOwnership(address) external;\r\n    function upgrade(address, address) external;\r\n}\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\ninterface ILGE {\r\n    function claimLP() external;\r\n}\r\n\r\ninterface ITransferContract {\r\n    function run(address) external;\r\n}\r\n\r\ninterface ICORE {\r\n    function setShouldTransferChecker(address) external;\r\n}\r\n\r\ninterface ITimelockVault {\r\n    function LPContributed(address) external view returns (uint256);\r\n}\r\n\r\ncontract TENSFeeApproverPermanent {\r\n    address public tokenETHPair;\r\n    constructor() public {\r\n            tokenETHPair = 0xB1b537B7272BA1EDa0086e2f480AdCA72c0B511C;\r\n    }\r\n\r\n    function calculateAmountsAfterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n        ) public  returns (uint256 transferToAmount, uint256 transferToFeeDistributorAmount, uint256 burn)\r\n        {\r\n\r\n            // Will block all buys and liquidity removals\r\n            if(sender == tokenETHPair || recipient == tokenETHPair) {\r\n                // This is how a legend dies\r\n                require(false, \"TENS is deprecated.\");\r\n            }\r\n\r\n            // No fees \r\n            // school is out\r\n            transferToAmount = amount;\r\n        \r\n        }\r\n}\r\n\r\n\r\ncontract COREForkMigrator is OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    /// EVENTS\r\n    event ETHSendToLGE(uint256);\r\n\r\n    ///Variables\r\n    bool public LPClaimedFromLGE;\r\n    bool private locked;\r\n    IERC20 public  CORE;\r\n    ICOREVault public  coreVault;\r\n    IUniswapV2Factory public  uniswapFactory;\r\n    IWETH wETH;\r\n    address public  CORExWETHPair;\r\n    address payable public CORE_MULTISIG;\r\n    address public postLGELPTokenAddress;\r\n    address public Fee_Approver_Permanent;\r\n    address public Vault_Permanent;\r\n    uint256 public totalLPClaimed;\r\n    uint256 public totalETHSent;\r\n    uint256 contractStartTimestamp;\r\n\r\n    mapping (address => bool) LPClaimed;\r\n\r\n    //// UNICORE Specific Variables\r\n    bool public UNICORE_Migrated;\r\n    bool public UNICORE_Liquidity_Transfered;\r\n    address public UNICORE_Vault;\r\n    address public UNICORE_Token;\r\n    address public UNICORE_Reactor_Token; // Slit token for liquidity\r\n    uint256 public UNICORE_Snapshot_Block;\r\n    uint256 public Ether_Total_For_UNICORE_LP;\r\n    uint256 public UNICORE_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceUNICOREReactor;\r\n    mapping (address => uint256) balanceUNICOREReactorInVaultOnSnapshot;\r\n\r\n\r\n    // ENCORE Specific variables\r\n    bool public ENCORE_Liquidity_Transfered;\r\n    bool public ENCORE_Transfers_Closed;\r\n    address public ENCORE_Vault;\r\n    address public ENCORE_Vault_Timelock;\r\n    address public ENCORE_Fee_Approver;\r\n    address public ENCORE_Token;\r\n    address public ENCORE_Timelock_Vault;\r\n    address public ENCORE_Proxy_Admin;\r\n    address public ENCORE_LP_Token;\r\n    address public ENCORE_Migrator;\r\n    uint256 public Ether_Credit_Per_ENCORE_LP;\r\n    uint256 public Ether_Total_For_Encore_LP;\r\n    uint256 public ENCORE_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceENCORELP;\r\n    // No need for snapshot\r\n\r\n\r\n    /// TENS Specific functions and variables\r\n    bool public TENS_Liquidity_Transfered;\r\n    address public TENS_Vault;\r\n    address public TENS_Token;\r\n    address public TENS_Proxy_Admin;\r\n    address public TENS_LP_Token;\r\n    address public TENS_Fee_Approver_Permanent;\r\n    uint256 public Ether_Total_For_TENS_LP;\r\n    uint256 public TENS_Total_LP_Supply;\r\n\r\n    mapping (address => uint256) balanceTENSLP;\r\n    // No need for snapshot\r\n\r\n    /// Reentrancy modifier\r\n    modifier lock() {\r\n        require(locked == false, 'CORE Migrator: Execution Locked');\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n\r\n    // Constructor\r\n    function initialize() initializer public{\r\n        require(tx.origin == 0x5A16552f59ea34E44ec81E58b3817833E9fD5436);\r\n        require(msg.sender == 0x5A16552f59ea34E44ec81E58b3817833E9fD5436);\r\n\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        CORE_MULTISIG = 0x5A16552f59ea34E44ec81E58b3817833E9fD5436;\r\n        contractStartTimestamp = block.timestamp;\r\n\r\n        // Permanent vault and fee approver\r\n        Vault_Permanent = 0xfeD4Ec1348a4068d4934E09492428FD92E399e5c;\r\n        Fee_Approver_Permanent = 0x43Dd7026284Ac8f95Eb02bB1bd68D0699B0Ae9cA;\r\n\r\n        //UNICORE\r\n        UNICORE_Vault = 0x6F31ECD8110bcBc679AEfb74c7608241D1B78949;\r\n        UNICORE_Token = 0x5506861bbb104Baa8d8575e88E22084627B192D8;\r\n\r\n        //TENS\r\n        TENS_Vault = 0xf983EcF91195bD63DE8445997082680E688749BC;\r\n        TENS_Token = 0x776CA7dEd9474829ea20AD4a5Ab7a6fFdB64C796;\r\n        TENS_Proxy_Admin = 0x2d0C48C5BF930A09F8CD6fae5aC5A16b24e1723a;\r\n        TENS_LP_Token = 0xB1b537B7272BA1EDa0086e2f480AdCA72c0B511C;\r\n        TENS_Fee_Approver_Permanent = 0x22C91cDd1E00cD4d7D029f0dB94020Fce3C486e3;\r\n        \r\n        ENCORE_Proxy_Admin = 0x1964784ba40c9fD5EED1070c1C38cd5D1d5F9f55;\r\n        ENCORE_Token = 0xe0E4839E0c7b2773c58764F9Ec3B9622d01A0428;\r\n        ENCORE_LP_Token = 0x2e0721E6C951710725997928DcAAa05DaaFa031B;\r\n        ENCORE_Fee_Approver = 0xF3c3ff0ea59d15e82b9620Ed7406fa3f6A261f98;\r\n        ENCORE_Vault = 0xdeF7BdF8eCb450c1D93C5dB7C8DBcE5894CCDaa9;\r\n        ENCORE_Vault_Timelock = 0xC2Cb86437355f36d42Fb8D979ab28b9816ac0545;\r\n        Ether_Credit_Per_ENCORE_LP = uint256(1 ether).div(2).mul(10724).div(10000); // Account for 7.24% fee on LGE\r\n\r\n        ICOREGlobals globals = ICOREGlobals(0x255CA4596A963883Afe0eF9c85EA071Cc050128B);\r\n        CORE = IERC20(globals.CORETokenAddress());\r\n        uniswapFactory = IUniswapV2Factory(globals.UniswapFactory());\r\n        coreVault = ICOREVault(globals.COREVaultAddress());\r\n        CORExWETHPair = globals.COREWETHUniPair();\r\n        wETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    }\r\n    \r\n    //Enables recieving eth\r\n    receive() external payable{}\r\n\r\n    function setLPTokenAddress(address _token) onlyOwner public {\r\n        postLGELPTokenAddress = _token;\r\n    }\r\n\r\n    function claimLP() lock public {\r\n        require(LPClaimedFromLGE == true, \"Nothing to claim yet\");\r\n        require(getOwedLP(msg.sender) > 0, \"nothing to claim\");\r\n        require(IERC20(postLGELPTokenAddress).transfer(msg.sender, getOwedLP(msg.sender)));\r\n        LPClaimed[msg.sender] = true;\r\n    }\r\n\r\n    function getOwedLP(address user) public view returns (uint256 LPDebtForUser) {\r\n        if(postLGELPTokenAddress == address (0)) return 0;\r\n        if(LPClaimedFromLGE == false) return 0;\r\n        if(LPClaimed[msg.sender] == true) return 0;\r\n\r\n        uint256 balanceUNICORE = viewCreditedUNICOREReactors(user);\r\n        uint256 balanceENCORE = viewCreditedENCORETokens(user);\r\n        uint256 balanceTENS = viewCreditedTENSTokens(user);\r\n\r\n        if(balanceUNICORE == 0 && balanceENCORE == 0 && balanceTENS == 0) return 0;\r\n\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        uint256 totalETHEquivalent;\r\n\r\n        if(balanceUNICORE > 0){\r\n            totalETHEquivalent = Ether_Total_For_UNICORE_LP.div(UNICORE_Total_LP_Supply).mul(balanceUNICORE);\r\n        }\r\n\r\n        if(balanceENCORE > 0){\r\n            totalETHEquivalent = totalETHEquivalent.add(Ether_Total_For_Encore_LP).div(ENCORE_Total_LP_Supply).mul(balanceENCORE);\r\n\r\n        }\r\n\r\n        if(balanceTENS > 0){\r\n            totalETHEquivalent = totalETHEquivalent.add(Ether_Total_For_TENS_LP).div(TENS_Total_LP_Supply).mul(balanceTENS);\r\n        }\r\n\r\n        LPDebtForUser = totalETHEquivalent.mul(totalLPClaimed).div(totalETH).div(1e18);\r\n    }\r\n\r\n    ////////////\r\n    /// Unicore specific functions\r\n    //////////\r\n\r\n    function snapshotUNICORE(address[] memory _addresses, uint256[] memory balances) onlyOwner public {\r\n        require(UNICORE_Migrated == true, \"UNICORE Deposits are still not closed\");\r\n\r\n        uint256 length = _addresses.length;\r\n        require(length == balances.length, \"Wrong input\");\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            balanceUNICOREReactorInVaultOnSnapshot[_addresses[i]] = balances[i];\r\n        }\r\n    }\r\n\r\n\r\n    function viewCreditedUNICOREReactors(address person) public view returns (uint256) {\r\n\r\n        if(UNICORE_Migrated) {\r\n            return balanceUNICOREReactorInVaultOnSnapshot[person].add(balanceUNICOREReactor[person]);\r\n        }\r\n\r\n        else {\r\n            (uint256 userAmount, ) = IUNICOREVault(UNICORE_Vault).userInfo(0, person);\r\n            return balanceUNICOREReactor[person].add(userAmount);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function addUNICOREReactors() lock public {\r\n        require(UNICORE_Migrated == false, \"UNICORE Deposits closed\");\r\n        uint256 amtAdded = transferTokenHereSupportingFeeOnTransferTokens(UNICORE_Reactor_Token, IERC20(UNICORE_Reactor_Token).balanceOf(msg.sender));\r\n        balanceUNICOREReactor[msg.sender] = balanceUNICOREReactor[msg.sender].add(amtAdded);\r\n    }\r\n\r\n    // Unicore migraiton is special and a-typical\r\n    // Because of the extensive changes to the code-base.\r\n    function transferUNICORELiquidity() onlyOwner public {\r\n        require(ENCORE_Liquidity_Transfered == true, \"ENCORE has to go first\");\r\n        require(UNICORE_Liquidity_Transfered == false, \"UNICORE already transfered\");\r\n\r\n        // Make sure we have the proper permissions.\r\n        require(IUNICORE(UNICORE_Token).viewGovernanceLevel(address(this)) == 2, \"Incorrectly set governance level, can't proceed\");\r\n        require(IUNICORE(UNICORE_Token).viewGovernanceLevel(0x5A16552f59ea34E44ec81E58b3817833E9fD5436) == 2, \"Incorrectly set governance level, can't proceed\");\r\n        require(IUNICORE(UNICORE_Token).viewGovernanceLevel(0x05957F3344255fDC9fE172E30016ee148D684313) == 0, \"Incorrectly set governance level, can't proceed\");\r\n        require(IUNICORE(UNICORE_Token).viewGovernanceLevel(0xE6f32f17BE3Bf031B4B6150689C1f17cEcA375C8) == 0, \"Incorrectly set governance level, can't proceed\");\r\n        require(IUNICORE(UNICORE_Token).viewGovernanceLevel(0xF4D7a0E8a68345442172F45cAbD272c25320AA96) == 0, \"Incorrectly set governance level, can't proceed\");\r\n        require(address(this).balance >= 1e18, \" Feed me eth\");\r\n\r\n        IUNICORE unicore = IUNICORE(UNICORE_Token);\r\n\r\n        wETH.deposit{value: 1e18}();\r\n        IUniswapV2Pair pair = IUniswapV2Pair(unicore.viewUNIv2());\r\n        \r\n        bool token0IsWETH = pair.token0() == address(wETH);\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        wETH.transfer(address(pair), 1e18);\r\n        uint256 amtUnicore;\r\n\r\n        if(token0IsWETH){\r\n            amtUnicore = getAmountOut(1e18, reserve0, reserve1);\r\n            pair.swap(0, amtUnicore, address(this), \"\");\r\n        }\r\n        else{\r\n            amtUnicore = getAmountOut(1e18, reserve1, reserve0);\r\n\r\n            pair.swap(amtUnicore, 0, address(this), \"\");\r\n        }\r\n\r\n        unicore.setVault(address(this));\r\n        unicore.setUniBurnRatio(100);\r\n    \r\n        uint256 balUnicoreOfUniPair = unicore.balanceOf(unicore.viewUNIv2());\r\n        uint256 totalSupplywraps = IERC20(unicore.viewwWrappedUNIv2()).totalSupply();\r\n        UNICORE_Total_LP_Supply = totalSupplywraps;\r\n\r\n        uint256 input = (balUnicoreOfUniPair-1).mul(totalSupplywraps).div(balUnicoreOfUniPair);\r\n\r\n        unicore.burnFromUni(input);\r\n\r\n        {\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        uint256 amtWETH;\r\n        uint256 previousPairBalance = unicore.balanceOf(address(pair));\r\n        IERC20(address(unicore)).transfer(address(pair),  unicore.balanceOf(address(this)));\r\n        uint256 nowPairBalance = unicore.balanceOf(address(pair));\r\n\r\n        if(token0IsWETH){\r\n            amtWETH = getAmountOut(nowPairBalance- previousPairBalance, reserve1, reserve0);\r\n\r\n            pair.swap(amtWETH, 0, address(this), \"\");\r\n            ( reserve0,  reserve1, ) = pair.getReserves();\r\n            require(reserve0 < 1e18, \" Burn not sufficient\");\r\n        }\r\n        else{\r\n            amtWETH = getAmountOut(nowPairBalance- previousPairBalance, reserve0, reserve1);\r\n\r\n            pair.swap(0, amtWETH, address(this), \"\");\r\n            ( reserve0,  reserve1, ) = pair.getReserves();\r\n            require(reserve1 < 1e18, \" Burn not sufficient\");\r\n        }\r\n\r\n        uint256 UNICORETotalSupply = unicore.totalSupply();\r\n        // 0.6 eth per is the floor we should get more here\r\n        require(amtWETH > UNICORETotalSupply.mul(60).div(100), \" Didn't get enough ETH \");\r\n        require(amtWETH > 500 ether, \" Didn't get enough ETH\"); // sanity\r\n        \r\n        Ether_Total_For_UNICORE_LP = amtWETH\r\n                .mul(Ether_Credit_Per_ENCORE_LP)\r\n                .div(1e18);\r\n\r\n        wETH.withdraw(amtWETH);\r\n\r\n        unicore.setGovernanceLevel(address(this), 1);\r\n        UNICORE_Liquidity_Transfered = true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ////////////\r\n    /// ENCORE specific functions\r\n    //////////\r\n    function viewCreditedENCORETokens(address person) public view returns (uint256) {\r\n            (uint256 userAmount, ) = IUNICOREVault(ENCORE_Vault).userInfo(0, person);\r\n            uint256 userAmountTimelock = ITimelockVault(ENCORE_Vault_Timelock).LPContributed(person);\r\n            return balanceENCORELP[person].add(userAmount).add(userAmountTimelock);\r\n    }\r\n\r\n    // Add LP to balance here\r\n    function addENCORELPTokens() lock public {\r\n        require(ENCORE_Transfers_Closed == false, \"ENCORE LP transfers closed\");\r\n        uint256 amtAdded = transferTokenHereSupportingFeeOnTransferTokens(ENCORE_LP_Token, IERC20(ENCORE_LP_Token).balanceOf(msg.sender));\r\n        balanceENCORELP[msg.sender] = balanceENCORELP[msg.sender].add(amtAdded);\r\n    }\r\n\r\n    function closeENCORETransfers() onlyOwner public  {\r\n        require(block.timestamp >= contractStartTimestamp.add(2 days), \"2 day grace ongoing\");\r\n        ENCORE_Transfers_Closed = true;\r\n    }\r\n\r\n    function transferENCORELiquidity(address privateTransferContract) onlyOwner public {\r\n\r\n        require(ENCORE_Transfers_Closed == true, \"ENCORE LP transfers still ongoing\");\r\n        require(ENCORE_Liquidity_Transfered == false, \"Already transfered liquidity\");\r\n        require(IProxyAdmin(ENCORE_Proxy_Admin).owner() == address(this), \"Set me as the proxy owner for ENCORE\");\r\n\r\n        require(privateTransferContract != address(0));\r\n        IProxyAdmin(ENCORE_Proxy_Admin).transferOwnership(privateTransferContract);\r\n\r\n        // We check 2 contracts with burned LP\r\n        uint256 burnedLPTokens = IERC20(ENCORE_LP_Token).balanceOf(ENCORE_Token)\r\n                .add(IERC20(ENCORE_LP_Token).balanceOf(0x2a997EaD7478885a66e6961ac0837800A07492Fc));\r\n\r\n        ENCORE_Total_LP_Supply = IERC20(ENCORE_LP_Token).totalSupply() - burnedLPTokens;\r\n    \r\n        // We calculate total owed to ENCORE LPs\r\n        Ether_Total_For_Encore_LP = ENCORE_Total_LP_Supply // burned ~100\r\n                .mul(Ether_Credit_Per_ENCORE_LP)\r\n                .div(1e18);\r\n\r\n        // We send out all LP tokens we have \r\n        IERC20(ENCORE_LP_Token)\r\n            .transfer(ENCORE_LP_Token, IERC20(ENCORE_LP_Token).balanceOf(address(this)));\r\n\r\n        uint256 ethBalBefore = address(this).balance;\r\n        ITransferContract(privateTransferContract).run(ENCORE_LP_Token);\r\n        uint256 newETH = address(this).balance.sub(ethBalBefore);\r\n\r\n        // Make sure we got eth\r\n        require(newETH > 9200 ether, \"Did not recieve enough ether\");\r\n                \r\n                //60% max\r\n        require(newETH.mul(60).div(100) > Ether_Total_For_Encore_LP, \"Too much for encore LP\"); \r\n                \r\n        require(ENCORE_Proxy_Admin != address(0) \r\n                &&  Fee_Approver_Permanent != address(0) \r\n                && Vault_Permanent != address(0), \"Sanity check failue\");\r\n\r\n        IProxyAdmin(ENCORE_Proxy_Admin).upgrade(ENCORE_Fee_Approver, Fee_Approver_Permanent);\r\n        IProxyAdmin(ENCORE_Proxy_Admin).upgrade(ENCORE_Vault, Vault_Permanent);\r\n        _sendENCOREProxyAdminBackToMultisig();\r\n        ENCORE_Liquidity_Transfered = true;\r\n    }\r\n\r\n    function sendENCOREProxyAdminBackToMultisig() onlyOwner public {\r\n        return _sendENCOREProxyAdminBackToMultisig();\r\n    }\r\n\r\n    function _sendENCOREProxyAdminBackToMultisig() internal {\r\n        IProxyAdmin(ENCORE_Proxy_Admin).transferOwnership(CORE_MULTISIG);\r\n        require(IProxyAdmin(ENCORE_Proxy_Admin).owner() == CORE_MULTISIG, \"Proxy Ownership Transfer Not Successfull\");\r\n    }\r\n\r\n    ////////////\r\n    /// TENS specific functions\r\n    //////////\r\n\r\n    function addTENSLPTokens() lock public {\r\n        require(ENCORE_Transfers_Closed == false, \"TENS LP transfers still ongoing\");\r\n        uint256 amtAdded = transferTokenHereSupportingFeeOnTransferTokens(TENS_LP_Token, IERC20(TENS_LP_Token).balanceOf(msg.sender));\r\n        balanceTENSLP[msg.sender] = balanceTENSLP[msg.sender].add(amtAdded);\r\n    }\r\n\r\n    function viewCreditedTENSTokens(address person) public view returns (uint256) {\r\n\r\n        (uint256 userAmount, ) = IUNICOREVault(TENS_Vault).userInfo(0, person);\r\n        return balanceTENSLP[person].add(userAmount);\r\n    }\r\n\r\n    function transferTENSLiquidity(address privateTransferContract) onlyOwner public {\r\n\r\n        require(TENS_Liquidity_Transfered == false, \"Already transfered\");\r\n        require(ENCORE_Liquidity_Transfered == true, \"ENCORE has to go first\");\r\n\r\n        require(IProxyAdmin(TENS_Proxy_Admin).owner() == address(this), \"Set me as the proxy owner for TENS\");\r\n        require(IProxyAdmin(TENS_Token).owner() == address(this), \"Set me as the owner for TENS\"); // same interface\r\n        require(privateTransferContract != address(0));\r\n\r\n        IProxyAdmin(TENS_Proxy_Admin).transferOwnership(privateTransferContract);\r\n        IProxyAdmin(TENS_Token).transferOwnership(privateTransferContract);\r\n        TENS_Total_LP_Supply = IERC20(TENS_LP_Token).totalSupply();\r\n\r\n        // We send out all LP tokens we have \r\n        IERC20(TENS_LP_Token)\r\n            .transfer(TENS_LP_Token, IERC20(TENS_LP_Token).balanceOf(address(this)));\r\n\r\n        uint256 ethBalBefore = address(this).balance;\r\n        ITransferContract(privateTransferContract).run(TENS_LP_Token);\r\n        uint256 newETH = address(this).balance.sub(ethBalBefore);\r\n        require(newETH > 130 ether, \"Did not recieve enough ether\");\r\n\r\n        require(TENS_Fee_Approver_Permanent != address(0) &&\r\n            Vault_Permanent != address(0), \"Sanity check failue\");\r\n\r\n        IProxyAdmin(TENS_Proxy_Admin).upgrade(TENS_Vault, Vault_Permanent);\r\n        TENS_Fee_Approver_Permanent = address ( new TENSFeeApproverPermanent() );\r\n        ICORE(TENS_Token).setShouldTransferChecker(TENS_Fee_Approver_Permanent);\r\n        Ether_Total_For_TENS_LP = newETH\r\n                .mul(Ether_Credit_Per_ENCORE_LP)\r\n                .div(1e18);\r\n\r\n        _sendOwnershipOfTENSBackToMultisig();\r\n\r\n        TENS_Liquidity_Transfered = true;\r\n  \r\n    }\r\n\r\n    function sendOwnershipOfTENSBackToMultisig() onlyOwner public {\r\n        return _sendOwnershipOfTENSBackToMultisig();\r\n    }\r\n\r\n    function _sendOwnershipOfTENSBackToMultisig() internal {\r\n        IProxyAdmin(TENS_Token).transferOwnership(CORE_MULTISIG);\r\n        require(IProxyAdmin(TENS_Token).owner() == CORE_MULTISIG, \"Multisig not owner of token\"); // same interface\r\n        IProxyAdmin(TENS_Proxy_Admin).transferOwnership(CORE_MULTISIG);\r\n        require(IProxyAdmin(TENS_Proxy_Admin).owner() == CORE_MULTISIG, \"Multisig not owner of proxyadmin\");\r\n    }\r\n\r\n  \r\n    ///////////////////\r\n    //// Helper functions\r\n    //////////////////\r\n    function sendETH(address payable to, uint256 amt) internal {\r\n        //\r\n        // throw exception on failure\r\n        to.transfer(amt);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'FA Controller: TRANSFER_FAILED');\r\n    }\r\n\r\n\r\n    function transferTokenHereSupportingFeeOnTransferTokens(address token,uint256 amountTransfer) internal returns (uint256 amtAdded) {\r\n        uint256 balBefore = IERC20(token).balanceOf(address(this));\r\n        require(IERC20(token).transferFrom(msg.sender, address(this), amountTransfer));\r\n        amtAdded = IERC20(token).balanceOf(address(this)).sub(balBefore);\r\n    }\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal  pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n\r\n\r\n    // A function that lets owner remove any tokens from this addrss\r\n    // note this address shoudn't hold any tokens\r\n    // And if it does that means someting already went wrong or someone send them to this address\r\n    function rescueUnsupportedTokens(address token, uint256 amt) public onlyOwner {\r\n        IERC20(token).transfer(CORE_MULTISIG, amt);\r\n    }\r\n\r\n    function sendETHToLGE(uint256 amt, address payable lgeContract) onlyOwner public {\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        totalETHSent = totalETHSent.add(amt);\r\n        require(totalETHSent <= totalETH, \"Too much sent\");\r\n        require(lgeContract != address(0),\" no \");\r\n        sendETH(lgeContract, amt);\r\n        emit ETHSendToLGE(amt);\r\n    }\r\n\r\n    function sendETHToTreasury(uint256 amt, address payable to) onlyOwner public {\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        require(totalETHSent == totalETH, \"Still money to send to LGE\");\r\n        require(to != address(0),\" no \");\r\n        sendETH(to, amt);\r\n    }\r\n\r\n    function getETHLeftToDepositToLGE() public view returns (uint256) {\r\n        uint256 totalETH = Ether_Total_For_TENS_LP.add(Ether_Total_For_UNICORE_LP).add(Ether_Total_For_Encore_LP);\r\n        return totalETH - totalETHSent;\r\n    }\r\n\r\n    function claimLPFromLGE(address lgeContract) onlyOwner public {\r\n        require(postLGELPTokenAddress != address(0), \"LP token address not set.\");\r\n        ILGE(lgeContract).claimLP();\r\n        \r\n        LPClaimedFromLGE = true;\r\n        totalLPClaimed = IERC20(postLGELPTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETHSendToLGE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_MULTISIG\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORExWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Fee_Approver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_LP_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Proxy_Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Timelock_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Transfers_Closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENCORE_Vault_Timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Credit_Per_ENCORE_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_Encore_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_TENS_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ether_Total_For_UNICORE_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee_Approver_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPClaimedFromLGE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Fee_Approver_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_LP_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Proxy_Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENS_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Liquidity_Transfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Reactor_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Snapshot_Block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Total_LP_Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNICORE_Vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vault_Permanent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addENCORELPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTENSLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addUNICOREReactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lgeContract\",\"type\":\"address\"}],\"name\":\"claimLPFromLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeENCORETransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreVault\",\"outputs\":[{\"internalType\":\"contract ICOREVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHLeftToDepositToLGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOwedLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LPDebtForUser\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postLGELPTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"rescueUnsupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendENCOREProxyAdminBackToMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"lgeContract\",\"type\":\"address\"}],\"name\":\"sendETHToLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendETHToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendOwnershipOfTENSBackToMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setLPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"snapshotUNICORE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"privateTransferContract\",\"type\":\"address\"}],\"name\":\"transferENCORELiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"privateTransferContract\",\"type\":\"address\"}],\"name\":\"transferTENSLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUNICORELiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedENCORETokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedTENSTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"person\",\"type\":\"address\"}],\"name\":\"viewCreditedUNICOREReactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"COREForkMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ead021f8861350596eee2e52f1d9ac906bfefcc9110199ca6c9126482e7bd4ce"}]}