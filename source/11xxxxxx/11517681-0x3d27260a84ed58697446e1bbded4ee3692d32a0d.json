{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-22\r\n*/\r\n\r\n// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ILendingPoolConfigurator {\r\n\r\n  /**\r\n   * @dev Initializes a reserve\r\n   * @param aTokenImpl  The address of the aToken contract implementation\r\n   * @param stableDebtTokenImpl The address of the stable debt token contract\r\n   * @param variableDebtTokenImpl The address of the variable debt token contract\r\n   * @param underlyingAssetDecimals The decimals of the reserve underlying asset\r\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract for this reserve\r\n   **/\r\n  function initReserve(\r\n    address aTokenImpl,\r\n    address stableDebtTokenImpl,\r\n    address variableDebtTokenImpl,\r\n    uint8 underlyingAssetDecimals,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n  \r\n   /**\r\n   * @dev Configures the reserve collateralization parameters\r\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param ltv The loan to value of the asset when used as collateral\r\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\r\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\r\n   * means the liquidator will receive a 5% bonus\r\n   **/\r\n  function configureReserveAsCollateral(\r\n    address asset,\r\n    uint256 ltv,\r\n    uint256 liquidationThreshold,\r\n    uint256 liquidationBonus\r\n  ) external;\r\n  \r\n    /**\r\n   * @dev Enables borrowing on a reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\r\n   **/\r\n  function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled)\r\n    external;\r\n\r\n}\r\n\r\ninterface IProposalExecutor {\r\n    function execute() external;\r\n}\r\n\r\n/**\r\n * @title AssetsListingProposalPayload\r\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\r\n * - Lists AAVE, UNI and GUSD in the protocol, each one with different configurations\r\n * @author Aave\r\n **/\r\ncontract AssetsListingProposalPayload is IProposalExecutor {\r\n  event ProposalExecuted();\r\n\r\n  ILendingPoolConfigurator public constant LENDING_POOL_CONFIGURATOR = ILendingPoolConfigurator(\r\n    0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756\r\n  );\r\n\r\n  address public constant GUSD_ERC20 = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n\r\n  address public constant GUSD_ATOKEN = 0x57Dcb9799E4F49EeE4974296023c81fA96f49335;\r\n  \r\n  address public constant GUSD_STABLE_DEBT_TOKEN = 0xEddC66EB4a0aD3be434cBb1c2E7d17cE805D7a28;\r\n  \r\n  address public constant GUSD_VARIABLE_DEBT_TOKEN = 0xFd5994F6eBA013a31D9E55cA129d55f3cbF22690;\r\n\r\n  address public constant GUSD_INTEREST_STRATEGY = 0x2893405d64a7Bc8Db02Fa617351a5399d59eCf8D;\r\n\r\n  uint256 public constant GUSD_LTV = 0;\r\n\r\n  uint256 public constant GUSD_LIQUIDATION_THRESHOLD = 0;\r\n\r\n  uint256 public constant GUSD_LIQUIDATION_BONUS = 0;\r\n\r\n  uint8 public constant GUSD_DECIMALS = 2;\r\n\r\n  /**\r\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\r\n   */\r\n  function execute() external override {\r\n    LENDING_POOL_CONFIGURATOR.initReserve(GUSD_ATOKEN, GUSD_STABLE_DEBT_TOKEN, GUSD_VARIABLE_DEBT_TOKEN, GUSD_DECIMALS, GUSD_INTEREST_STRATEGY);\r\n    LENDING_POOL_CONFIGURATOR.enableBorrowingOnReserve(GUSD_ERC20, false);\r\n    LENDING_POOL_CONFIGURATOR.configureReserveAsCollateral(\r\n      GUSD_ERC20,\r\n      GUSD_LTV,\r\n      GUSD_LIQUIDATION_THRESHOLD,\r\n      GUSD_LIQUIDATION_BONUS\r\n    );\r\n\r\n    emit ProposalExecuted();\r\n  }\r\n  \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GUSD_ATOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_ERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_INTEREST_STRATEGY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_LIQUIDATION_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_LTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_STABLE_DEBT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUSD_VARIABLE_DEBT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL_CONFIGURATOR\",\"outputs\":[{\"internalType\":\"contract ILendingPoolConfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AssetsListingProposalPayload","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c5a4c94c4ba6ed498fc8923780e3099271ddd2f7b1174dd091daf295f35f979"}]}