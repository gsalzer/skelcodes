{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/protocol/constants/CommonConstants.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract CommonConstants {\r\n\r\n    uint public constant EXCHANGE_RATE_BASE_RATE = 1e18;\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/ICollateralizationCalculator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ICollateralizationCalculator {\r\n\r\n    event DmmControllerChanged(address indexed oldController, address indexed newController);\r\n\r\n    function dmmController() external view returns (address);\r\n\r\n    function setDmmController(address newController) external;\r\n\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/InterestRateInterface.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface InterestRateInterface {\r\n\r\n    /**\r\n      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\r\n      *\r\n      * @param dmmTokenId The DMMA whose interest should be retrieved\r\n      * @param totalSupply The total supply fot he DMM token\r\n      * @param activeSupply The supply that's currently being lent by users\r\n      * @return The interest rate in APY, which is a number with 18 decimals\r\n      */\r\n    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUnderlyingTokenValuator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUnderlyingTokenValuator {\r\n\r\n    /**\r\n      * @dev Gets the tokens value in terms of USD.\r\n      *\r\n      * @return The value of the `amount` of `token`, as a number with the same number of decimals as `amount` passed\r\n      *         in to this function.\r\n      */\r\n    function getTokenValue(address token, uint amount) external view returns (uint);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Blacklistable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Allows accounts to be blacklisted by the owner of the contract.\r\n *\r\n *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\r\n */\r\ncontract Blacklistable is Ownable {\r\n\r\n    string public constant BLACKLISTED = \"BLACKLISTED\";\r\n\r\n    mapping(address => bool) internal blacklisted;\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator of this contract\r\n    */\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == owner(), \"MUST_BE_BLACKLISTER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(blacklisted[account] == false, BLACKLISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\r\n    */\r\n    function checkNotBlacklisted(address account) public view {\r\n        require(!blacklisted[account], BLACKLISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds `account` to blacklist\r\n     *\r\n     * @param account The address to blacklist\r\n    */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     *\r\n     * @param account The address to remove from the blacklist\r\n    */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainAssetValuatorV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOffChainAssetValuatorV2 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetsValueUpdated(uint newAssetsValue);\r\n    event AssetTypeSet(uint tokenId, string assetType, bool isAdded);\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function initialize(\r\n        address owner,\r\n        address guardian,\r\n        address linkToken,\r\n        uint oraclePayment,\r\n        uint offChainAssetsValue,\r\n        bytes32 offChainAssetsValueJobId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Adds an asset type to be supported by the provided principal / affiliate. Use `tokenId` 0 to denote all\r\n     *      asset introducers.\r\n     */\r\n    function addSupportedAssetTypeByTokenId(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Removes an asset type to be supported by the provided principal / affiliate. Use `tokenId` 0 to denote all\r\n     *      asset introducers.\r\n     */\r\n    function removeSupportedAssetTypeByTokenId(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external;\r\n\r\n    /**\r\n     * Sets the oracle job ID for getting all collateral for the ecosystem.\r\n     */\r\n    function setCollateralValueJobId(\r\n        bytes32 jobId\r\n    ) external;\r\n\r\n    /**\r\n     * Sets the amount of LINK to be paid for the `collateralValueJobId`\r\n     */\r\n    function setOraclePayment(\r\n        uint oraclePayment\r\n    ) external;\r\n\r\n    function submitGetOffChainAssetsValueRequest(\r\n        address oracle\r\n    ) external;\r\n\r\n    function fulfillGetOffChainAssetsValueRequest(\r\n        bytes32 requestId,\r\n        uint offChainAssetsValue\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @return  The amount of LINK to be paid for fulfilling this oracle request.\r\n     */\r\n    function oraclePayment() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The timestamp at which the oracle was last pinged\r\n     */\r\n    function lastUpdatedTimestamp() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The block number at which the oracle was last pinged\r\n     */\r\n    function lastUpdatedBlockNumber() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The off-chain assets job ID for getting all assets. NOTE this will be broken down by asset introducer\r\n     *          (token ID) in the future so this function will be deprecated.\r\n     */\r\n    function offChainAssetsValueJobId() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Gets the DMM ecosystem's collateral's value from Chainlink's on-chain data feed.\r\n     *\r\n     * @return The value of all of the ecosystem's collateral, as a number with 18 decimals\r\n     */\r\n    function getOffChainAssetsValue() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM ecosystem's collateral's value from Chainlink's on-chain data feed.\r\n     *\r\n     * @param   tokenId The ID of the asset introducer whose assets should be valued or use 0 to denote all introducers.\r\n     * @return          The value of the asset introducer's ecosystem collateral, as a number with 18 decimals.\r\n     */\r\n    function getOffChainAssetsValueByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @param tokenId   The token ID of the asset introducer; 0 to denote all of them\r\n     * @param assetType The asset type for the collateral (lien) held by the DMM DAO\r\n     * @return True if the asset type is supported, or false otherwise\r\n     */\r\n    function isSupportedAssetTypeByAssetIntroducer(\r\n        uint tokenId,\r\n        string calldata assetType\r\n    ) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOffChainCurrencyValuatorV2.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Gets the value of any currencies that are residing off-chain, but are NOT yet allocated to a revenue-producing asset.\r\n */\r\ninterface IOffChainCurrencyValuatorV2 {\r\n\r\n    function initialize(\r\n        address owner,\r\n        address guardian\r\n    ) external;\r\n\r\n    function getOffChainCurrenciesValue() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmController.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDmmController {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    function COLLATERALIZATION_BASE_RATE() external pure returns (uint);\r\n\r\n    function INTEREST_RATE_BASE_RATE() external pure returns (uint);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the new address that will serve as the guardian for this controller.\r\n     *\r\n     * @param newGuardian   The new address that will serve as the guardian for this controller.\r\n     */\r\n    function setGuardian(address newGuardian) external;\r\n\r\n    function setCollateralizationCalculator(address newCollateralizationCalculator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\r\n     *\r\n     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\r\n     */\r\n    function setDmmTokenFactory(address newDmmTokenFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\r\n     *\r\n     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\r\n     */\r\n    function setDmmEtherFactory(address newDmmEtherFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRate` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\r\n     */\r\n    function getDmmTokenIds() external view returns (uint[] memory);\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\r\n     *      contract address for that token ID.\r\n     */\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    function underlyingTokenValuator() external view returns (IUnderlyingTokenValuator);\r\n\r\n    function offChainAssetsValuator() external view returns (IOffChainAssetValuatorV2);\r\n\r\n    function offChainCurrencyValuator() external view returns (IOffChainCurrencyValuatorV2);\r\n\r\n    function collateralizationCalculator() external view returns (ICollateralizationCalculator);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * Basically an interface except, contains the implementation of the type-hashes for offline signature generation.\r\n *\r\n * This contract contains the signatures and documentation for all publicly-implemented functions in the DMM token.\r\n */\r\ninterface IDmmToken {\r\n\r\n    /*****************\r\n     * Events\r\n     */\r\n\r\n    event Mint(address indexed minter, address indexed recipient, uint amount);\r\n    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\r\n    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\r\n\r\n    /*****************\r\n     * Functions\r\n     */\r\n\r\n    /**\r\n     * @dev The controller that deployed this parent\r\n     */\r\n    function controller() external view returns (IDmmController);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @return  The min amount that can be minted in a single transaction. This amount corresponds with the number of\r\n     *          decimals that this token has.\r\n     */\r\n    function minMintAmount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The min amount that can be redeemed from DMM to underlying in a single transaction. This amount\r\n     *          corresponds with the number of decimals that this token has.\r\n     */\r\n    function minRedeemAmount() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The amount of DMM that is in circulation (outside of this contract)\r\n      */\r\n    function activeSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Attempts to add `amount` to the total supply by issuing the tokens to this contract. This call fires a\r\n     *      Transfer event from the 0x0 address to this contract.\r\n     */\r\n    function increaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev Attempts to remove `amount` from the total supply by destroying those tokens that are held in this\r\n     *      contract. This call reverts with TOO_MUCH_ACTIVE_SUPPLY if `amount` is not held in this contract.\r\n     */\r\n    function decreaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers deposit the underlying token around which this DMMA\r\n     *      wraps to this contract. This is used to replenish liquidity and after interest payouts are made from the\r\n     *      real-world assets.\r\n     */\r\n    function depositUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers withdraw the underlying token around which this DMMA\r\n     *      wraps from this contract. This is used to withdraw deposited tokens, to be allocated to real-world assets\r\n     *      that produce income streams and can cover interest payments.\r\n     */\r\n    function withdrawUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedTimestamp() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedBlockNumber() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The exchange rate from underlying to DMM. Invert this number to go from DMM to underlying. This number\r\n     *      has 18 decimals.\r\n     */\r\n    function getCurrentExchangeRate() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The current nonce of the provided `owner`. This `owner` should be the signer for any gasless transactions.\r\n     */\r\n    function nonceOf(address owner) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from msg.sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to the msg.sender. Note, this call reverts with INSUFFICIENT_DMM_LIQUIDITY if\r\n     *      there is not enough DMM available to be minted.\r\n     *\r\n     * @param amount The amount of underlying to send to this DMMA for conversion to DMM.\r\n     * @return The amount of DMM minted.\r\n     */\r\n    function mint(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to recipient. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount` / `exchangeRate`. This call reverts with INSUFFICIENT_DMM_LIQUIDITY\r\n     *      if there is not enough DMM available to be minted. See #MINT_TYPE_HASH. This function gives the `owner` the\r\n     *      illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction and\r\n     *      potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-minted DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of underlying that should be minted by `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of DMM minted, minus the fees paid. To get the total amount minted, add the `feeAmount` to\r\n     *          the returned amount from this function call.\r\n     */\r\n    function mintFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from msg.sender to this DMMA contract. Then, sends the corresponding amount of token around\r\n     *      which this DMMA wraps to the msg.sender. Note, this call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY if\r\n     *      there is not enough DMM available to be redeemed.\r\n     *\r\n     * @param amount    The amount of DMM to be transferred from msg.sender to this DMMA.\r\n     * @return          The amount of underlying redeemed.\r\n     */\r\n    function redeem(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from `owner` to the DMMA contract. Then, sends the corresponding amount of token around which\r\n     *      this DMMA wraps to `recipient`. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount`. This call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY\r\n     *      if there is not enough underlying available to be redeemed. See #REDEEM_TYPE_HASH. This function gives the\r\n     *      `owner` the illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction\r\n     *      and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-redeemed DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be redeemed for `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of underlying redeemed.\r\n     */\r\n    function redeemFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Sets an allowance for owner with spender using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #PERMIT_TYPEHASH.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param spender       The contract/wallet that can spend DMM tokens on behalf of owner.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param allowed       True if the spender can spend funds on behalf of owner or false to revoke this privilege.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint nonce,\r\n        uint expiry,\r\n        bool allowed,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers DMM from the `owner` to `recipient` using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #TRANSFER_TYPEHASH. This function gives the `owner` the illusion of committing a gasless transaction,\r\n     *      allowing a relayer to broadcast the transaction and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message and originator of the transfer.\r\n     * @param recipient     The address that will receive the transferred DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be transferred from `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return              True if the transfer was successful or false if it failed.\r\n     */\r\n    function transferFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOwnable {\r\n\r\n    function owner() external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/protocol/impl/CollateralizationCalculatorImplV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CollateralizationCalculatorImplV1 is ICollateralizationCalculator {\r\n\r\n    address public dmmController;\r\n    address public timelock;\r\n\r\n    using SafeMath for uint;\r\n\r\n    constructor (\r\n        address _dmmController,\r\n        address _timelock\r\n    ) public {\r\n        dmmController = _dmmController;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setDmmController(\r\n        address newDmmController\r\n    ) external {\r\n        if (dmmController != address(0)) {\r\n            // This if statement is used for initialization\r\n            require(\r\n                msg.sender == timelock,\r\n                \"CollateralizationCalculatorImplV1::setDmmController: UNAUTHORIZED\"\r\n            );\r\n        }\r\n        _setDmmController(newDmmController);\r\n    }\r\n\r\n    function getTotalCollateralization() external view returns (uint) {\r\n        IDmmController _dmmController = IDmmController(dmmController);\r\n        uint totalLiabilities = 0;\r\n        uint totalAssets = 0;\r\n        uint interestRateBaseRate = _dmmController.INTEREST_RATE_BASE_RATE();\r\n        uint [] memory dmmTokenIds = _dmmController.getDmmTokenIds();\r\n        for (uint i = 0; i < dmmTokenIds.length; i++) {\r\n            IDmmToken dmmToken = IDmmToken(_dmmController.getDmmTokenAddressByDmmTokenId(dmmTokenIds[i]));\r\n            IERC20 underlyingToken = IERC20(_dmmController.getUnderlyingTokenForDmm(address(dmmToken)));\r\n\r\n            uint currentExchangeRate = dmmToken.getCurrentExchangeRate();\r\n\r\n            // The interest rate is annualized, so figuring out the exchange rate 1-year from now is as simple as\r\n            // applying the current interest rate to the current exchange rate.\r\n            uint futureExchangeRate = currentExchangeRate.mul(interestRateBaseRate.add(_dmmController.getInterestRateByDmmTokenAddress(address(dmmToken)))).div(interestRateBaseRate);\r\n\r\n            uint totalSupply = IERC20(address(dmmToken)).totalSupply();\r\n\r\n            uint underlyingLiabilitiesForTotalSupply = _getDmmSupplyValue(\r\n                _dmmController,\r\n                dmmToken,\r\n                underlyingToken,\r\n                totalSupply,\r\n                futureExchangeRate\r\n            );\r\n            totalLiabilities = totalLiabilities.add(underlyingLiabilitiesForTotalSupply);\r\n\r\n            uint underlyingAssetsForTotalSupply = _getDmmSupplyValue(\r\n                _dmmController,\r\n                dmmToken,\r\n                underlyingToken,\r\n                totalSupply,\r\n                currentExchangeRate\r\n            );\r\n            totalAssets = totalAssets.add(underlyingAssetsForTotalSupply);\r\n        }\r\n        return _getCollateralization(_dmmController, totalLiabilities, totalAssets);\r\n    }\r\n\r\n    function getActiveCollateralization() external view returns (uint) {\r\n        IDmmController _dmmController = IDmmController(dmmController);\r\n        uint totalLiabilities = 0;\r\n        uint totalAssetsInDmmContract = 0;\r\n        uint [] memory dmmTokenIds = _dmmController.getDmmTokenIds();\r\n        for (uint i = 0; i < dmmTokenIds.length; i++) {\r\n            IDmmToken dmmToken = IDmmToken(_dmmController.getDmmTokenAddressByDmmTokenId(dmmTokenIds[i]));\r\n            IERC20 underlyingToken = IERC20(_dmmController.getUnderlyingTokenForDmm(address(dmmToken)));\r\n\r\n            uint underlyingLiabilitiesValue = _getDmmSupplyValue(\r\n                _dmmController,\r\n                dmmToken,\r\n                underlyingToken,\r\n                dmmToken.activeSupply(),\r\n                dmmToken.getCurrentExchangeRate()\r\n            );\r\n            totalLiabilities = totalLiabilities.add(underlyingLiabilitiesValue);\r\n\r\n            uint underlyingAssetsValue = _getUnderlyingSupplyValue(\r\n                _dmmController,\r\n                underlyingToken,\r\n                underlyingToken.balanceOf(address(dmmToken)),\r\n                dmmToken.decimals()\r\n            );\r\n            totalAssetsInDmmContract = totalAssetsInDmmContract.add(underlyingAssetsValue);\r\n        }\r\n        return _getCollateralization(_dmmController, totalLiabilities, totalAssetsInDmmContract);\r\n    }\r\n\r\n    // *************************\r\n    // ***** Internal Functions\r\n    // *************************\r\n\r\n    function _setDmmController(\r\n        address newDmmController\r\n    ) internal {\r\n        require(\r\n            IOwnable(newDmmController).owner() == timelock,\r\n            \"CollateralizationCalculatorImplV1::_setDmmController: INVALID_CONTROLLER_OWNER\"\r\n        );\r\n        require(\r\n            address(IDmmController(newDmmController).collateralizationCalculator()) == address(this),\r\n            \"CollateralizationCalculatorImplV1::_setDmmController: INVALID_CONTROLLER_COLLATERALIZATION_CALCULATOR\"\r\n        );\r\n\r\n        address oldDmmController = dmmController;\r\n        dmmController = newDmmController;\r\n        emit DmmControllerChanged(oldDmmController, newDmmController);\r\n    }\r\n\r\n    function _getDmmSupplyValue(\r\n        IDmmController __dmmController,\r\n        IDmmToken __dmmToken,\r\n        IERC20 __underlyingToken,\r\n        uint __dmmSupply,\r\n        uint __currentExchangeRate\r\n    ) private view returns (uint) {\r\n        uint underlyingTokenAmount = __dmmSupply.mul(__currentExchangeRate).div(CommonConstants(address(dmmController)).EXCHANGE_RATE_BASE_RATE());\r\n        // The amount returned must use 18 decimal places, regardless of the # of decimals this token has.\r\n        uint standardizedUnderlyingTokenAmount;\r\n        if (__dmmToken.decimals() == 18) {\r\n            standardizedUnderlyingTokenAmount = underlyingTokenAmount;\r\n        } else if (__dmmToken.decimals() < 18) {\r\n            standardizedUnderlyingTokenAmount = underlyingTokenAmount.mul((10 ** (18 - uint(__dmmToken.decimals()))));\r\n        } else /* decimals > 18 */ {\r\n            standardizedUnderlyingTokenAmount = underlyingTokenAmount.div((10 ** (uint(__dmmToken.decimals()) - 18)));\r\n        }\r\n        return __dmmController.underlyingTokenValuator().getTokenValue(address(__underlyingToken), standardizedUnderlyingTokenAmount);\r\n    }\r\n\r\n    function _getUnderlyingSupplyValue(\r\n        IDmmController __dmmController,\r\n        IERC20 __underlyingToken,\r\n        uint __underlyingSupply,\r\n        uint8 __decimals\r\n    ) private view returns (uint) {\r\n        // The amount returned must use 18 decimal places, regardless of the # of decimals this token has.\r\n        uint standardizedUnderlyingTokenAmount;\r\n        if (__decimals == 18) {\r\n            standardizedUnderlyingTokenAmount = __underlyingSupply;\r\n        } else if (__decimals < 18) {\r\n            standardizedUnderlyingTokenAmount = __underlyingSupply.mul((10 ** (18 - uint(__decimals))));\r\n        } else /* decimals > 18 */ {\r\n            standardizedUnderlyingTokenAmount = __underlyingSupply.div((10 ** (uint(__decimals) - 18)));\r\n        }\r\n        return __dmmController.underlyingTokenValuator().getTokenValue(address(__underlyingToken), standardizedUnderlyingTokenAmount);\r\n    }\r\n\r\n    function _getCollateralization(\r\n        IDmmController __dmmController,\r\n        uint __totalLiabilities,\r\n        uint __totalAssets\r\n    ) internal view returns (uint) {\r\n        if (__totalLiabilities == 0) {\r\n            return 0;\r\n        }\r\n        uint offchainAssetsValue = __dmmController.offChainAssetsValuator().getOffChainAssetsValue();\r\n        uint collateralValue = offchainAssetsValue.add(__totalAssets).add(__dmmController.offChainCurrencyValuator().getOffChainCurrenciesValue());\r\n        return collateralValue.mul(__dmmController.COLLATERALIZATION_BASE_RATE()).div(__totalLiabilities);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dmmController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"DmmControllerChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmmController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDmmController\",\"type\":\"address\"}],\"name\":\"setDmmController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CollateralizationCalculatorImplV1","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002e06e7636f31f042492666c42f6c7ba6c08dc7e2000000000000000000000000e679ebf544a6be5cb8747012ea6b08f04975d264","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6ff5b8399c3aace4fcaf30ece66f5ca05654cbb2f0542b8a03988295610089ce"}]}