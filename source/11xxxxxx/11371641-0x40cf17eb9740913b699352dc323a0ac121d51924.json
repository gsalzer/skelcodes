{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ODSMiner.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ODSMiner is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant ODS_TOTAL_SUPPLY = 4200000;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken;\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accOdsPerShare;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    uint256 public odsPerBlock;\r\n\r\n    PoolInfo[] public poolInfo;\r\n\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    uint256 public startBlock;\r\n\r\n    uint256 private constant ODS_PREMINE = 10000;\r\n    uint256 public premineAmount = 0;\r\n\r\n    uint256 private tokenDecimals = 0;\r\n    IERC20 private token;\r\n\r\n    uint256 private contributionShare;\r\n\r\n    struct NodeInfo {\r\n        bool active;\r\n        bool superNode;\r\n        uint256 lastRewardBlock;\r\n        uint256 amount;\r\n        uint256 superNodeRewardCount;\r\n        uint256 nodeRewardCount;\r\n    }\r\n\r\n    address[] public nodeList;\r\n    mapping(address => NodeInfo) public nodeInfo;\r\n    uint256 superNodeCount = 0;\r\n    uint256 nodeCount = 0;\r\n\r\n    uint256 private rewardPreSuperNode = 10000;\r\n    uint256 private rewardShareForSuperNodes = 10000;\r\n    uint256 private rewardPreNode = 0;\r\n    uint256 private rewardShareForNodes = 0;\r\n    uint256 private constant rewardDurationForNodes = 5760;\r\n\r\n    uint256 private constant maxRewardCount = 100;\r\n\r\n    mapping(address => bool) private _operators;\r\n\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 poolAccOdsPerShare, uint256 pending, uint256 userAmount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 poolAccOdsPerShare, uint256 pending, uint256 userAmount);\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    modifier onlyOperator() {\r\n        require(_operators[msg.sender], \"Ownable: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        uint256 _odsPerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        token = _token;\r\n        tokenDecimals = 18;\r\n\r\n        odsPerBlock = _odsPerBlock;\r\n        startBlock = _startBlock;\r\n        \r\n        _operators[msg.sender] = true;\r\n\r\n        rewardPreSuperNode = rewardPreSuperNode.mul(10**tokenDecimals).div(\r\n            10000\r\n        );\r\n\r\n        rewardShareForSuperNodes = rewardShareForSuperNodes\r\n            .mul(10**tokenDecimals)\r\n            .div(10000);\r\n\r\n        rewardPreNode = rewardPreNode.mul(10**tokenDecimals).div(10000);\r\n\r\n        rewardShareForNodes = rewardShareForNodes.mul(10**tokenDecimals).div(\r\n            10000\r\n        );\r\n    }\r\n\r\n    function init(uint256 totalSupply) public payable onlyOwner {\r\n        require(\r\n            totalSupply == ODS_TOTAL_SUPPLY.mul(10**tokenDecimals),\r\n            \"wrong total supply for ODS\"\r\n        );\r\n\r\n        uint256 allowance = token.allowance(msg.sender, address(this));\r\n\r\n        require(allowance >= totalSupply, \"check the token allowance\");\r\n\r\n        premineAmount = ODS_PREMINE.mul(10**tokenDecimals);\r\n\r\n        token.transferFrom(msg.sender, address(this), totalSupply);\r\n    }\r\n\r\n    function initNode(address[] memory nodes, bool[] memory superNode)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(nodes.length == superNode.length, \"initNode: length mismatch\");\r\n\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            nodeList.push(nodes[i]);\r\n            nodeInfo[nodes[i]] = NodeInfo({\r\n                active: true,\r\n                superNode: superNode[i],\r\n                lastRewardBlock: block.number > startBlock\r\n                    ? block.number\r\n                    : startBlock,\r\n                amount: 0,\r\n                superNodeRewardCount: 0,\r\n                nodeRewardCount: 0\r\n            });\r\n\r\n            if (superNode[i]) {\r\n                superNodeCount = superNodeCount.add(1);\r\n            } else {\r\n                nodeCount = nodeCount.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accOdsPerShare: 0,\r\n                totalSupply: 0\r\n            })\r\n        );\r\n    }\r\n\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    function pendingOds(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accOdsPerShare = pool.accOdsPerShare;\r\n        uint256 lpSupply = pool.totalSupply;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier =\r\n                getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 odsReward =\r\n                multiplier.mul(odsPerBlock).mul(pool.allocPoint).div(\r\n                    totalAllocPoint\r\n                );\r\n            accOdsPerShare = accOdsPerShare.add(\r\n                odsReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n        return user.amount.mul(accOdsPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.totalSupply;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 odsReward =\r\n            multiplier.mul(odsPerBlock).mul(pool.allocPoint).div(\r\n                totalAllocPoint\r\n            );\r\n        pool.accOdsPerShare = pool.accOdsPerShare.add(\r\n            odsReward.mul(1e12).div(lpSupply)\r\n        );\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) public lock {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n\r\n        uint256 pending = 0;\r\n        if (user.amount > 0) {\r\n            pending = user.amount.mul(pool.accOdsPerShare).div(1e12).sub(\r\n                user.rewardDebt\r\n            );\r\n            if (pending > 0) {\r\n                safeOdsTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            pool.totalSupply = pool.totalSupply.add(_amount);\r\n            pool.lpToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accOdsPerShare).div(1e12);\r\n\r\n        emit Deposit(msg.sender, _pid, _amount, pool.accOdsPerShare, pending, user.amount);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) public lock {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending =\r\n            user.amount.mul(pool.accOdsPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            safeOdsTransfer(msg.sender, pending);\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.totalSupply = pool.totalSupply.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accOdsPerShare).div(1e12);\r\n\r\n        emit Withdraw(msg.sender, _pid, _amount, pool.accOdsPerShare, pending, user.amount);\r\n    }\r\n\r\n    function setNodeReward(\r\n        uint256 _rewardPreSuperNode,\r\n        uint256 _rewardShareForSuperNodes,\r\n        uint256 _rewardPreNode,\r\n        uint256 _rewardShareForNodes\r\n    ) public onlyOperator {\r\n        require(\r\n            _rewardPreSuperNode >= 0 && _rewardPreSuperNode <= 1000000,\r\n            \"rewardPreSuperNode is invalid\"\r\n        );\r\n        require(\r\n            _rewardShareForSuperNodes >= 0 &&\r\n                _rewardShareForSuperNodes <= 1000000,\r\n            \"rewardShareForSuperNodes is invalid\"\r\n        );\r\n        require(\r\n            _rewardPreNode >= 0 && _rewardPreNode <= 1000000,\r\n            \"rewardPreNode is invalid\"\r\n        );\r\n        require(\r\n            _rewardShareForNodes >= 0 && _rewardShareForNodes <= 1000000,\r\n            \"rewardShareForNodes is invalid\"\r\n        );\r\n        require(\r\n            _rewardPreSuperNode > 0 ||\r\n                _rewardShareForSuperNodes > 0 ||\r\n                _rewardPreNode > 0 ||\r\n                _rewardShareForSuperNodes > 0,\r\n            \"invalid set for node reward\"\r\n        );\r\n\r\n        massUpdateNodes();\r\n\r\n        if (_rewardPreSuperNode > 0)\r\n            rewardPreSuperNode = _rewardPreSuperNode.mul(10**tokenDecimals).div(\r\n                10000\r\n            );\r\n        if (_rewardShareForSuperNodes > 0)\r\n            rewardShareForSuperNodes = _rewardShareForSuperNodes\r\n                .mul(10**tokenDecimals)\r\n                .div(10000);\r\n        if (_rewardPreNode > 0)\r\n            rewardPreNode = _rewardPreNode.mul(10**tokenDecimals).div(10000);\r\n        if (_rewardShareForNodes > 0)\r\n            rewardShareForNodes = _rewardShareForNodes\r\n                .mul(10**tokenDecimals)\r\n                .div(10000);\r\n    }\r\n\r\n    function massUpdateNodes() private {\r\n        for (uint256 i = 0; i < nodeList.length; i++) {\r\n            updateNode(nodeList[i]);\r\n        }\r\n    }\r\n\r\n    function updateNode(address _node) private {\r\n        (uint256 amount, uint256 rewardBlocks) = nodeReward(_node);\r\n\r\n        if (amount > 0) {\r\n            NodeInfo storage node = nodeInfo[_node];\r\n            node.amount = node.amount.add(amount);\r\n            node.lastRewardBlock = node.lastRewardBlock.add(\r\n                rewardBlocks.mul(rewardDurationForNodes)\r\n            );\r\n\r\n            if (node.superNode) {\r\n                node.superNodeRewardCount = node.superNodeRewardCount.add(\r\n                    rewardBlocks\r\n                );\r\n            } else {\r\n                node.nodeRewardCount = node.nodeRewardCount.add(rewardBlocks);\r\n            }\r\n        }\r\n    }\r\n\r\n    function nodeReward(address _node) private view returns (uint256, uint256) {\r\n        NodeInfo storage node = nodeInfo[_node];\r\n\r\n        if (\r\n            (node.superNode && node.superNodeRewardCount >= maxRewardCount) ||\r\n            (!node.superNode && node.nodeRewardCount >= maxRewardCount) ||\r\n            block.number < startBlock\r\n        ) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 rewardBlocks =\r\n            block.number > node.lastRewardBlock\r\n                ? (block.number - node.lastRewardBlock) / rewardDurationForNodes\r\n                : 0;\r\n\r\n        if (rewardBlocks == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        if (\r\n            node.superNode &&\r\n            node.superNodeRewardCount.add(rewardBlocks) > maxRewardCount\r\n        ) {\r\n            rewardBlocks = maxRewardCount.sub(node.superNodeRewardCount);\r\n        } else if (\r\n            !node.superNode &&\r\n            node.nodeRewardCount.add(rewardBlocks) > maxRewardCount\r\n        ) {\r\n            rewardBlocks = maxRewardCount.sub(node.nodeRewardCount);\r\n        }\r\n\r\n        (uint256 _superNodeCount, uint256 _nodeCount) = nodeCountInfo();\r\n\r\n        // node reward\r\n        uint256 rewardAmount = 0;\r\n        if (node.superNode) {\r\n            // super node reward\r\n            rewardAmount = rewardBlocks.mul(rewardPreSuperNode);\r\n\r\n            // super node share reward\r\n            rewardAmount = rewardBlocks\r\n                .mul(rewardShareForSuperNodes)\r\n                .div(_superNodeCount)\r\n                .add(rewardAmount);\r\n        } else {\r\n            // node reward\r\n            rewardAmount = rewardBlocks.mul(rewardPreNode);\r\n\r\n            // node share\r\n            rewardAmount = rewardBlocks\r\n                .mul(rewardShareForNodes)\r\n                .div(_nodeCount)\r\n                .add(rewardAmount);\r\n        }\r\n\r\n        return (rewardAmount, rewardBlocks);\r\n    }\r\n\r\n    function nodeCountInfo()\r\n        public\r\n        view\r\n        returns (uint256 _superNodeCount, uint256 _nodeCount)\r\n    {\r\n        _superNodeCount = superNodeCount;\r\n        _nodeCount = nodeCount;\r\n    }\r\n\r\n    function isNode() external view returns (bool, bool) {\r\n        NodeInfo storage node = nodeInfo[msg.sender];\r\n\r\n        if (!node.active) {\r\n            return (false, false);\r\n        }\r\n\r\n        return (true, node.superNode);\r\n    }\r\n\r\n    function pendingNodeOds() external view returns (uint256) {\r\n        NodeInfo storage node = nodeInfo[msg.sender];\r\n\r\n        if (!node.active) {\r\n            return 0;\r\n        }\r\n\r\n        (uint256 amount, ) = nodeReward(msg.sender);\r\n\r\n        return node.amount.add(amount);\r\n    }\r\n\r\n    function withdrawNodeOds(uint256 _amount) public {\r\n        NodeInfo storage node = nodeInfo[msg.sender];\r\n\r\n        require(node.active, \"invalid node\");\r\n\r\n        updateNode(msg.sender);\r\n\r\n        require(nodeInfo[msg.sender].amount >= _amount, \"not enough balance\");\r\n\r\n        nodeInfo[msg.sender].amount = nodeInfo[msg.sender].amount.sub(_amount);\r\n\r\n        safeOdsTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    function addNodes(address account, bool superNode) public onlyOperator {\r\n        NodeInfo storage node = nodeInfo[account];\r\n\r\n        require(!node.active, \"node is activated\");\r\n\r\n        massUpdateNodes();\r\n\r\n        if (node.lastRewardBlock > 0) {\r\n            // exist in map\r\n            nodeList.push(account);\r\n\r\n            node.active = true;\r\n            node.lastRewardBlock = block.number > startBlock\r\n                ? block.number\r\n                : startBlock;\r\n            node.superNode = superNode;\r\n        } else {\r\n            nodeList.push(account);\r\n            nodeInfo[account] = NodeInfo({\r\n                active: true,\r\n                superNode: superNode,\r\n                lastRewardBlock: block.number > startBlock\r\n                    ? block.number\r\n                    : startBlock,\r\n                amount: 0,\r\n                superNodeRewardCount: 0,\r\n                nodeRewardCount: 0\r\n            });\r\n        }\r\n\r\n        if (superNode) {\r\n            superNodeCount = superNodeCount.add(1);\r\n        } else {\r\n            nodeCount = nodeCount.add(1);\r\n        }\r\n    }\r\n\r\n    function removeNodes(address account) public onlyOperator {\r\n        NodeInfo storage node = nodeInfo[account];\r\n\r\n        require(node.active, \"node is not activated\");\r\n\r\n        massUpdateNodes();\r\n\r\n        for (uint256 i = 0; i < nodeList.length; i++) {\r\n            if (nodeList[i] == account) {\r\n                nodeList[i] = nodeList[nodeList.length - 1];\r\n                nodeList.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (node.superNode) {\r\n            superNodeCount = superNodeCount.sub(1);\r\n        } else {\r\n            nodeCount = nodeCount.sub(1);\r\n        }\r\n\r\n        node.active = false;\r\n\r\n        if (node.amount > 0) {\r\n            uint256 amount = node.amount;\r\n            node.amount = 0;\r\n            safeOdsTransfer(account, amount);\r\n        }\r\n    }\r\n\r\n    function getNodeRewardSetting()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _rewardPreSuperNode,\r\n            uint256 _rewardShareForSuperNodes,\r\n            uint256 _rewardPreNode,\r\n            uint256 _rewardShareForNodes\r\n        )\r\n    {\r\n        _rewardPreSuperNode = rewardPreSuperNode;\r\n        _rewardPreNode = rewardPreNode;\r\n        _rewardShareForSuperNodes = rewardShareForSuperNodes;\r\n        _rewardShareForNodes = rewardShareForNodes;\r\n    }\r\n\r\n    function withdrawPreMine(uint256 _amount) public onlyOperator {\r\n        require(_amount >= 0, \"amount is zero\");\r\n        require(premineAmount >= _amount, \"not enough balance\");\r\n\r\n        premineAmount = premineAmount.sub(_amount);\r\n\r\n        token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function contributionAmount() public view returns (uint256) {\r\n        uint256 blocks =\r\n            block.number > startBlock ? block.number - startBlock : 0;\r\n\r\n        return odsPerBlock.mul(blocks).sub(contributionShare);\r\n    }\r\n\r\n    function contributionWithdraw(uint256 amount) public onlyOperator {\r\n        require(amount >= 0, \"amount is zero\");\r\n        require(contributionAmount() >= amount, \"not enough balance\");\r\n\r\n        contributionShare = contributionShare.add(amount);\r\n\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function safeOdsTransfer(address _to, uint256 _amount) internal {\r\n        uint256 balance =\r\n            token\r\n                .balanceOf(address(this))\r\n                .sub(ODS_PREMINE.mul(10**tokenDecimals))\r\n                .div(2);\r\n        if (_amount > balance) {\r\n            token.transfer(msg.sender, balance);\r\n        } else {\r\n            token.transfer(_to, _amount);\r\n        }\r\n    }\r\n    \r\n    function addOperator(address account) public onlyOwner {\r\n        require(account != address(0), \"invalid address\");\r\n        require(!_operators[account], \"account is already operator\");\r\n        \r\n        _operators[account] = true;\r\n    }\r\n    \r\n    function removeOperator(address account) public onlyOwner {\r\n        require(account != address(0), \"invalid address\");\r\n        require(_operators[account], \"account is not operator\");\r\n        \r\n        _operators[account] = false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_odsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAccOdsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAccOdsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ODS_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"superNode\",\"type\":\"bool\"}],\"name\":\"addNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contributionWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeRewardSetting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPreSuperNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardShareForSuperNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPreNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardShareForNodes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nodes\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"superNode\",\"type\":\"bool[]\"}],\"name\":\"initNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeCountInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_superNodeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nodeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"superNode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"superNodeRewardCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeRewardCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingNodeOds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingOds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accOdsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premineAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeNodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPreSuperNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardShareForSuperNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPreNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardShareForNodes\",\"type\":\"uint256\"}],\"name\":\"setNodeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNodeOds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPreMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ODSMiner","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005b5a48d22da47773716d750a91bd7d53a91bd2400000000000000000000000000000000000000000000000000040c3549bb7d2aa0000000000000000000000000000000000000000000000000000000000ad9fc8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://47e06ad6f13db450a5ace4789145ce62dbc91b89d12308d8e22d11b4ef276b45"}]}