{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/AtlantisCore.sol\r\n\r\npragma solidity <=0.6.2;\r\n\r\n\r\ninterface ITask {\r\n    function check(uint _requirement) external view returns (uint256);\r\n    function execute() external;\r\n}\r\n\r\ninterface IWhirlpool {\r\n    function claim() external;\r\n    function getAllInfoFor(address _user) external view returns (bool isActive, uint256[12] memory info);\r\n}\r\n\r\ninterface ISURF3D {\r\n    function dividendsOf(address _user) external view returns (uint256);\r\n    function withdraw() external returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ncontract AtlantisCore is Ownable {\r\n    IFreeFromUpTo public constant gst = IFreeFromUpTo(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    address private constant _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\r\n    address private constant _surf3D = 0xeb620A32Ea11FcAa1B3D70E4CFf6500B85049C97;\r\n    address private constant _whirlpool = 0x999b1e6EDCb412b59ECF0C5e14c20948Ce81F40b;\r\n\r\n    address[] public processors;\r\n\r\n    // track the total amount of incentive burned by this core\r\n    uint private _totalBurned;\r\n\r\n    // track the total amount of tasks created\r\n    uint private _totalTasks;\r\n\r\n    // mapping of task IDs to respective struct\r\n    mapping (uint => Task) private _taskMap;\r\n\r\n    // mapping of addresses to total incentive received\r\n    mapping (address => uint) private _totalIncentiveReceived;\r\n    \r\n    // mapping of addresses to total tasks executed\r\n    mapping (address => uint) private _totalTasksByProcessor;\r\n\r\n    // mapping of task IDs to when they were last executed (unix timestamp). used for throttle\r\n    mapping (uint => uint) private _taskTimestamp;\r\n\r\n    // mapping indiciating that an address has processed for this core at least once\r\n    mapping (address => bool) private _processed;\r\n\r\n    // mapping of processor addressses to when they were last seen by this core\r\n    mapping (address => uint) public processorTimestamp;\r\n\r\n    struct Task {\r\n        // address of the contract which implements the ITask interface\r\n        address process;\r\n        // is this task enabled?\r\n        bool enabled;\r\n        // how much SURF will incentivize this task\r\n        uint incentive;\r\n        // ratio of incentive to burn, send rest to caller. 0 = disabled, 1 = 100%, 2 = 50%, 3 = 33%, 4 = 25%, etc\r\n        uint burnRatio;\r\n        // how much time to wait before allowing this task to be executed again. 0 = disable\r\n        uint throttle;\r\n        // task requirement variable - used for minimum balance checks etc\r\n        uint requirement;\r\n    }\r\n\r\n    modifier discountGST {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        gst.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    constructor()\r\n    public {\r\n        _taskMap[0] = Task({\r\n            process: address(0x0),\r\n            enabled: true,\r\n            incentive: 200 ether,       // 200 SURF (100 received)\r\n            burnRatio: 2,               // burn 50%\r\n            throttle: 1 weeks,          // every week\r\n            requirement: 1000 ether     // if the whirlpool rewards are more than 1000 SURF\r\n        });\r\n\r\n        _totalTasks++;\r\n    }\r\n\r\n    function _check(uint _requirement)\r\n    internal view returns (uint256) {\r\n       (, uint256[12] memory userData) = IWhirlpool(_whirlpool).getAllInfoFor(address(this));\r\n\r\n        if(userData[10] >= _requirement)\r\n            return 0;\r\n        else\r\n            return _requirement - userData[10];\r\n    }\r\n\r\n    function _execute()\r\n    internal {\r\n        IWhirlpool(_whirlpool).claim();\r\n\r\n        if(ISURF3D(_surf3D).dividendsOf(address(this)) > 0)\r\n            ISURF3D(_surf3D).withdraw();\r\n    }\r\n\r\n    function _process(uint _taskID, address _processor)\r\n    internal {\r\n        // only allow execution if the timestamp throttle is expired\r\n        require(block.timestamp >= _taskTimestamp[_taskID] + _taskMap[_taskID].throttle, \"\");\r\n        // only allow execution if the task is enabled (incentives active)\r\n        require(_taskMap[_taskID].enabled, \"\");\r\n\r\n        // load requirement\r\n        uint requirement = _taskMap[_taskID].requirement;\r\n        address taskProcess = _taskMap[_taskID].process;\r\n\r\n        // only allow execution if the task requirements are met - if any\r\n        if(requirement > 0)\r\n            require(_taskID == 0 ? _check(requirement) == 0 : ITask(taskProcess).check(requirement) == 0, \"\");\r\n\r\n        // load other variables \r\n        uint incentive = _taskMap[_taskID].incentive;\r\n        uint burnRatio = _taskMap[_taskID].burnRatio;\r\n        \r\n        // execute the task\r\n        _taskID == 0 ? _execute() : ITask(taskProcess).execute();\r\n\r\n        // if this is the first time they are processing a task\r\n        if(!_processed[_processor]) {\r\n            _processed[_processor] = true;\r\n            processors.push(_processor);\r\n        }\r\n\r\n        processorTimestamp[_processor] = block.timestamp;\r\n\r\n        // burn whatever amount of tokens specified by the burnRatio - if any\r\n        if(burnRatio != 0)\r\n            IERC20(_surf).transfer(_surf, incentive / burnRatio);\r\n\r\n        uint incentiveReceived = burnRatio == 0 ? incentive : incentive - (incentive / burnRatio);\r\n\r\n        IERC20(_surf).transfer(_processor, incentiveReceived);\r\n\r\n        _totalIncentiveReceived[_processor] += incentiveReceived;\r\n\r\n        if(incentive - incentiveReceived > 0)\r\n            _totalBurned += (incentive - incentiveReceived);\r\n\r\n        _totalTasksByProcessor[_processor]++;\r\n        _taskTimestamp[_taskID] = block.timestamp;\r\n    }\r\n\r\n    function addTask(address _taskProcess, uint _incentive, uint _burnRatio, uint _throttle, uint _requirement)\r\n    external onlyOwner {\r\n        _taskMap[_totalTasks] = Task({\r\n            process: _taskProcess,\r\n            enabled: true,\r\n            incentive: _incentive,\r\n            burnRatio: _burnRatio,\r\n            throttle: _throttle,\r\n            requirement: _requirement\r\n        });\r\n\r\n        _totalTasks++;\r\n    }\r\n\r\n    function editTask(uint _taskID, address _taskProcess, bool _enabled, uint _incentive, uint _burnRatio, uint _throttle, uint _requirement)\r\n    external onlyOwner {\r\n        _taskMap[_taskID] = Task({\r\n            process: _taskProcess,\r\n            enabled: _enabled,\r\n            incentive: _incentive,\r\n            burnRatio: _burnRatio,\r\n            throttle: _throttle,\r\n            requirement: _requirement\r\n        });\r\n    }\r\n\r\n    function process(uint _taskID, address _processor)\r\n    external {\r\n        // if the contract is calling itself via the bulkProcess() loop\r\n        if(msg.sender == address(this))\r\n            _process(_taskID, _processor);\r\n        else\r\n            _process(_taskID, msg.sender);\r\n    }\r\n\r\n    function processCHI(uint _taskID)\r\n    external discountCHI {\r\n        _process(_taskID, msg.sender);\r\n    }\r\n\r\n    function processGST(uint _taskID)\r\n    external discountGST {\r\n        _process(_taskID, msg.sender);\r\n    }\r\n\r\n    function bulkProcess(uint256[] calldata _taskIDs)\r\n    external {\r\n        // loop through all specified task IDs\r\n        for(uint x = 0; x < _taskIDs.length; x++)\r\n            // manually call process() - if the tx fails (due to task being executed while tx is in transit etc) we ignore it and proceed instead of reverting the entire tx\r\n            address(this).call(abi.encodeWithSignature(\"process(uint256,address)\", _taskIDs[x], msg.sender));\r\n    }\r\n\r\n    function bulkProcessCHI(uint256[] calldata _taskIDs)\r\n    external discountCHI {\r\n        // loop through all specified task IDs\r\n        for(uint x = 0; x < _taskIDs.length; x++)\r\n            // manually call process() - if the tx fails (due to task being executed while tx is in transit etc) we ignore it and proceed instead of reverting the entire tx\r\n            address(this).call(abi.encodeWithSignature(\"process(uint256,address)\", _taskIDs[x], msg.sender));\r\n    }\r\n\r\n    function bulkProcessGST(uint256[] calldata _taskIDs)\r\n    external discountGST {\r\n        // loop through all specified task IDs\r\n        for(uint x = 0; x < _taskIDs.length; x++)\r\n            // manually call process() - if the tx fails (due to task being executed while tx is in transit etc) we ignore it and proceed instead of reverting the entire tx\r\n            address(this).call(abi.encodeWithSignature(\"process(uint256,address)\", _taskIDs[x], msg.sender));\r\n    }\r\n\r\n    function check(uint _requirement)\r\n    external view returns (uint256) {\r\n        return _check(_requirement);\r\n    }\r\n\r\n    function viewStatsFor(address _processor)\r\n    external view returns (uint256, uint256) {\r\n        return (_totalIncentiveReceived[_processor], _totalTasksByProcessor[_processor]);\r\n    }\r\n\r\n    function viewCore()\r\n    external view returns (uint256, uint256) {\r\n        return (_totalBurned, _totalTasks);\r\n    }\r\n\r\n    function viewAllStatsFor(address _processor)\r\n    external view returns (uint256, uint256, uint256, uint256) {\r\n        return (_totalIncentiveReceived[_processor], _totalTasksByProcessor[_processor], _totalBurned, _totalTasks);\r\n    }\r\n\r\n    function viewTask(uint _taskID)\r\n    external view returns (bool, uint256, uint256, uint256, uint256) {\r\n        return (_taskMap[_taskID].enabled, _taskMap[_taskID].incentive, _taskMap[_taskID].burnRatio, _taskMap[_taskID].throttle, _taskMap[_taskID].requirement);\r\n    }\r\n\r\n    // returns time left and requirement left (if any)\r\n    function viewTaskCheck(uint _taskID)\r\n    external view returns (uint256, uint256) {\r\n        uint throttleTimeLeft;\r\n\r\n        if(_taskTimestamp[_taskID] + _taskMap[_taskID].throttle > block.timestamp)\r\n            throttleTimeLeft = (_taskTimestamp[_taskID] + _taskMap[_taskID].throttle) - block.timestamp;\r\n        else\r\n            throttleTimeLeft = 0;\r\n\r\n        return (throttleTimeLeft, _taskID == 0 ? _check(_taskMap[_taskID].requirement) : ITask(_taskMap[_taskID].process).check(_taskMap[_taskID].requirement));\r\n    }\r\n\r\n    function viewProcessorLength()\r\n    external view returns (uint256) {\r\n        return processors.length;\r\n    }\r\n\r\n    function viewProcessors()\r\n    external view returns (address[] memory) {\r\n        return processors;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taskProcess\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_throttle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"addTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIDs\",\"type\":\"uint256[]\"}],\"name\":\"bulkProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIDs\",\"type\":\"uint256[]\"}],\"name\":\"bulkProcessCHI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIDs\",\"type\":\"uint256[]\"}],\"name\":\"bulkProcessGST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_taskProcess\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_incentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_throttle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"editTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gst\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_processor\",\"type\":\"address\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"processCHI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"processGST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"processorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_processor\",\"type\":\"address\"}],\"name\":\"viewAllStatsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewProcessorLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewProcessors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_processor\",\"type\":\"address\"}],\"name\":\"viewStatsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"viewTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"viewTaskCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtlantisCore","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://465e0733b00b62540e1751316fff6be66ea067e94e2bee14fcae9c62f004542c"}]}