{"status":"1","message":"OK","result":[{"SourceCode":"/* SPDX-License-Identifier: MIT\r\n * Copyright Â© 2020 autofarm.finance ALL RIGHTS RESERVED.\r\n*/\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // benefit is lost if 'b' is also tested.\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // construction, since the code is only stored at the end of the\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n//END MODULE\r\n\r\n\r\n// Start program\r\npragma solidity ^ 0.6 .2;\r\n\r\n\r\ncontract AUTOFARM is Context, IERC20, Ownable {\r\n    using SafeMath\r\n    for uint256;\r\n    using Address\r\n    for address;\r\n    mapping(address => uint256) private _uBalance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isHolder;\r\n    mapping(address => uint256) private _rLiquidity;\r\n    mapping(address => bool) private _isLiqudity;\r\n    mapping(address => bool) private _is4;\r\n    address[] private _dbTrxAddr;\r\n    uint[] private _dbTrxDate;\r\n    uint256[] private _dbTrxAmount;\r\n    address[] private _holder;\r\n    address[] private _liquidity;\r\n    uint256 private constant _tTotal = 10000000 * 1000000000000000000;\r\n    uint256 private _tPoolSuply;\r\n    uint256 private _tLiquidity;\r\n    uint256 private _tSupply4;\r\n    uint256 private _tSupply1;\r\n    \r\n    string private _name = 'Autofarm.finance';\r\n    string private _symbol = 'AFI';\r\n    uint8 private _decimals = 18;\r\n    \r\n    address private _uniswapPoolAddress;\r\n    bool private _uniswapPoolAddressSubmited;\r\n    address private _uniswapContract;\r\n    bool private _uniswapContractSubmited;\r\n    address private _owner;\r\n    \r\n    \r\n    constructor() public {\r\n        _uBalance[_msgSender()] = _tTotal;\r\n         _owner =_msgSender();\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns(uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns(uint256) {\r\n        return _uBalance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(_msgSender(), sender, amount);\r\n       \r\n        return true;\r\n    }\r\n  \r\n    function poolSupply() public view returns(uint256) {\r\n        return _tPoolSuply;\r\n    }\r\n\r\n\r\n    function poolLiquidity() public view returns(uint256) {\r\n        return _tLiquidity;\r\n    }\r\n\r\n    function totalHolders() public view returns(uint256) {\r\n        return _holder.length;\r\n    }\r\n\r\n    \r\n    \r\n    function UniswapContract(address contrac) external onlyOwner() {\r\n        if (_uniswapContractSubmited == false) _uniswapContract = contrac;\r\n        _uniswapContractSubmited = true;\r\n        \r\n         if (_uniswapPoolAddressSubmited == false) _uniswapPoolAddress = contrac;\r\n        _uniswapPoolAddressSubmited = true;\r\n    }\r\n\r\n  \r\n\r\n    function UniswapContract() public view returns(address) {\r\n        return _uniswapContract;\r\n    }\r\n    \r\n     \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n       \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        \r\n         if(_uniswapPoolAddressSubmited && sender==_owner){\r\n         require(recipient==_uniswapPoolAddress, \"ERC20: owner only allow send to uniswap poll address\");\r\n         }\r\n        \r\n        _uBalance[sender] = _uBalance[sender].sub(amount);\r\n        _feDistribution(amount.div(200));\r\n        _feLiquidity(amount.div(200));\r\n        _uBalance[recipient] = _uBalance[recipient].add(amount.div(100).mul(99));\r\n        _saveTxHistory(sender, recipient, amount);\r\n        _addToHolder(recipient);\r\n        _addToHolder(sender);\r\n        _getPoolSupply();\r\n        _getPoolLiquidity();\r\n         \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _saveTxHistory(address sender, address recipient, uint256 amount) private {\r\n        uint dt = block.timestamp;\r\n        _dbTrxAddr.push(sender);\r\n        _dbTrxDate.push(dt);\r\n        _dbTrxAmount.push(amount);\r\n        _dbTrxAddr.push(recipient);\r\n        _dbTrxDate.push(dt);\r\n        _dbTrxAmount.push(amount);\r\n    }\r\n\r\n    function _getBalanceToken(address contrac, address address_holder) private view returns(uint balance) {\r\n        return AUTOFARM(contrac).balanceOf(address_holder);\r\n    }\r\n\r\n    function _addToHolder(address account) private {\r\n        if (_uBalance[account] > 0) {\r\n            if (!_isHolder[account]) {\r\n                _isHolder[account] = true;\r\n                _holder.push(account);\r\n            }\r\n        }\r\n        if (!_isLiqudity[account]) {\r\n            _isLiqudity[account] = true;\r\n            _liquidity.push(account);\r\n        }\r\n    }\r\n\r\n    function _getPoolLiquidity() private {\r\n         \r\n        uint256 bal = 0;\r\n        uint256 supplyLiquidity = 0;\r\n        if(_uniswapContractSubmited)\r\n        for (uint256 i = 0; i < _liquidity.length; i++) {\r\n            bal = _getBalanceToken(_uniswapContract, _liquidity[i]);\r\n            _rLiquidity[_liquidity[i]] = bal;\r\n            if (bal > 0)\r\n                supplyLiquidity = supplyLiquidity.add(bal);\r\n        }\r\n        _tLiquidity = supplyLiquidity;\r\n    }\r\n\r\n    function _getPoolSupply() private {\r\n        uint256 supplyTotal4 = 0;\r\n        uint256 supplyTotal1 = 0;\r\n        if (_holder.length > 0)\r\n            for (uint256 i = 0; i < _holder.length; i++) {\r\n                if (_uBalance[_holder[i]] >= _tTotal.div(100)) continue;\r\n                uint nowt = now - 60 * 60 * 24 * 30 ;\r\n                address add = _holder[i];\r\n                uint256 thistx = 0;\r\n                for (uint256 u = 0; u < _dbTrxAddr.length; u++) {\r\n                    if (_dbTrxAddr[u] != add) continue;\r\n                    if (_dbTrxDate[u] < nowt) continue;\r\n                    thistx = thistx.add(_dbTrxAmount[u]);\r\n                }\r\n                \r\n                if (thistx < _tTotal.div(1000)) {\r\n                    supplyTotal1 = supplyTotal1.add(thistx);\r\n                    _is4[add] = false;\r\n                } else {\r\n                    supplyTotal4 = supplyTotal4.add(thistx);\r\n                    _is4[add] = true;\r\n                }\r\n            }\r\n        _tSupply1 = supplyTotal1;\r\n        _tSupply4 = supplyTotal4;\r\n        _tPoolSuply = _tSupply4.add(_tSupply1);\r\n    }\r\n\r\n    function _feDistribution(uint256 fee) private {\r\n        if (_tPoolSuply <= 0) return;\r\n        uint256 fee4 = fee.mul(4);\r\n        fee4 = fee4.div(10);\r\n        uint256 fee1 = fee.mul(1);\r\n        fee1 = fee1.div(10);\r\n        for (uint256 i = 0; i < _holder.length; i++) {\r\n            uint256 px = _uBalance[_holder[i]];\r\n            if (px >= _tTotal.div(100)) continue;\r\n            if (px <= 0) continue;\r\n            uint256 fe = fee.mul(px);\r\n            \r\n            if(_tSupply4>0)\r\n            if (_is4[_holder[i]]) {\r\n                uint256 di = fe.div(_tSupply4);\r\n                if (di > 0) {\r\n                    _uBalance[_holder[i]] = px.add(di);\r\n                }\r\n            }\r\n            \r\n            if(_tSupply1>0)\r\n            if (!_is4[_holder[i]]) {\r\n                uint256 di = fe.div(_tSupply1);\r\n                if (di > 0) {\r\n                    _uBalance[_holder[i]] = px.add(di);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _feLiquidity(uint256 fee) private {\r\n        if (_tLiquidity > 0)\r\n            for (uint256 i = 0; i < _liquidity.length; i++) {\r\n                uint256 px = _rLiquidity[_liquidity[i]];\r\n                uint256 fe = fee.mul(px);\r\n                uint256 di = fe.div(_tLiquidity);\r\n                if (di > 0)\r\n                    if (px < _tTotal.div(100))\r\n                        if (px > 0) {\r\n                            _uBalance[_holder[i]] = _uBalance[_holder[i]].add(di);\r\n                        }\r\n            }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UniswapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contrac\",\"type\":\"address\"}],\"name\":\"UniswapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AUTOFARM","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b75ce2c315968983dbcc98973535adb202b10e32971bf792e00ca37c2ca01002"}]}