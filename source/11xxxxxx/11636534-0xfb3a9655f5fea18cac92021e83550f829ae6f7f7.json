{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/dispatcher/IDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"../../utils/DispatcherOwnerMixin.sol\\\";\\nimport \\\"./IPrimitivePriceFeed.sol\\\";\\n\\n/// @title ChainlinkPriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A price feed that uses Chainlink oracles as price sources\\ncontract ChainlinkPriceFeed is IPrimitivePriceFeed, DispatcherOwnerMixin {\\n    using SafeMath for uint256;\\n\\n    event EthUsdAggregatorSet(address prevEthUsdAggregator, address nextEthUsdAggregator);\\n\\n    event PrimitiveAdded(\\n        address indexed primitive,\\n        address aggregator,\\n        RateAsset rateAsset,\\n        uint256 unit\\n    );\\n\\n    event PrimitiveRemoved(address indexed primitive);\\n\\n    event PrimitiveUpdated(\\n        address indexed primitive,\\n        address prevAggregator,\\n        address nextAggregator\\n    );\\n\\n    event StalePrimitiveRemoved(address indexed primitive);\\n\\n    event StaleRateThresholdSet(uint256 prevStaleRateThreshold, uint256 nextStaleRateThreshold);\\n\\n    enum RateAsset {ETH, USD}\\n\\n    struct AggregatorInfo {\\n        address aggregator;\\n        RateAsset rateAsset;\\n    }\\n\\n    uint256 private constant ETH_UNIT = 10**18;\\n    address private immutable WETH_TOKEN;\\n\\n    address private ethUsdAggregator;\\n    uint256 private staleRateThreshold;\\n    mapping(address => AggregatorInfo) private primitiveToAggregatorInfo;\\n    mapping(address => uint256) private primitiveToUnit;\\n\\n    constructor(\\n        address _dispatcher,\\n        address _wethToken,\\n        address _ethUsdAggregator,\\n        address[] memory _primitives,\\n        address[] memory _aggregators,\\n        RateAsset[] memory _rateAssets\\n    ) public DispatcherOwnerMixin(_dispatcher) {\\n        WETH_TOKEN = _wethToken;\\n        staleRateThreshold = 25 hours; // 24 hour heartbeat + 1hr buffer\\n        __setEthUsdAggregator(_ethUsdAggregator);\\n        if (_primitives.length > 0) {\\n            __addPrimitives(_primitives, _aggregators, _rateAssets);\\n        }\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\\n    /// @param _baseAsset The base asset\\n    /// @param _baseAssetAmount The base asset amount to convert\\n    /// @param _quoteAsset The quote asset\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\n    function calcCanonicalValue(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        address _quoteAsset\\n    ) public view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        // Case where _baseAsset == _quoteAsset is handled by ValueInterpreter\\n\\n        int256 baseAssetRate = __getLatestRateData(_baseAsset);\\n        if (baseAssetRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        int256 quoteAssetRate = __getLatestRateData(_quoteAsset);\\n        if (quoteAssetRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        (quoteAssetAmount_, isValid_) = __calcConversionAmount(\\n            _baseAsset,\\n            _baseAssetAmount,\\n            uint256(baseAssetRate),\\n            _quoteAsset,\\n            uint256(quoteAssetRate)\\n        );\\n\\n        return (quoteAssetAmount_, isValid_);\\n    }\\n\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a live rate)\\n    /// @param _baseAsset The base asset\\n    /// @param _baseAssetAmount The base asset amount to convert\\n    /// @param _quoteAsset The quote asset\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\n    /// @dev Live and canonical values are the same for Chainlink\\n    function calcLiveValue(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        address _quoteAsset\\n    ) external view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        return calcCanonicalValue(_baseAsset, _baseAssetAmount, _quoteAsset);\\n    }\\n\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported primitive\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\n        return _asset == WETH_TOKEN || primitiveToAggregatorInfo[_asset].aggregator != address(0);\\n    }\\n\\n    /// @notice Sets the `ehUsdAggregator` variable value\\n    /// @param _nextEthUsdAggregator The `ehUsdAggregator` value to set\\n    function setEthUsdAggregator(address _nextEthUsdAggregator) external onlyDispatcherOwner {\\n        __setEthUsdAggregator(_nextEthUsdAggregator);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to convert an amount from a _baseAsset to a _quoteAsset\\n    function __calcConversionAmount(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetRate,\\n        address _quoteAsset,\\n        uint256 _quoteAssetRate\\n    ) private view returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        RateAsset baseAssetRateAsset = getRateAssetForPrimitive(_baseAsset);\\n        RateAsset quoteAssetRateAsset = getRateAssetForPrimitive(_quoteAsset);\\n        uint256 baseAssetUnit = getUnitForPrimitive(_baseAsset);\\n        uint256 quoteAssetUnit = getUnitForPrimitive(_quoteAsset);\\n\\n        // If rates are both in ETH or both in USD\\n        if (baseAssetRateAsset == quoteAssetRateAsset) {\\n            return (\\n                __calcConversionAmountSameRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate\\n                ),\\n                true\\n            );\\n        }\\n\\n        int256 ethPerUsdRate = IChainlinkAggregator(ethUsdAggregator).latestAnswer();\\n        if (ethPerUsdRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        // If _baseAsset's rate is in ETH and _quoteAsset's rate is in USD\\n        if (baseAssetRateAsset == RateAsset.ETH) {\\n            return (\\n                __calcConversionAmountEthRateAssetToUsdRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate,\\n                    uint256(ethPerUsdRate)\\n                ),\\n                true\\n            );\\n        }\\n\\n        // If _baseAsset's rate is in USD and _quoteAsset's rate is in ETH\\n        return (\\n            __calcConversionAmountUsdRateAssetToEthRateAsset(\\n                _baseAssetAmount,\\n                baseAssetUnit,\\n                _baseAssetRate,\\n                quoteAssetUnit,\\n                _quoteAssetRate,\\n                uint256(ethPerUsdRate)\\n            ),\\n            true\\n        );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has an ETH rate and the quote asset has a USD rate\\n    function __calcConversionAmountEthRateAssetToUsdRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow.\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_ethPerUsdRate).div(\\n            ETH_UNIT\\n        );\\n\\n        return intermediateStep.mul(_quoteAssetUnit).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to convert amounts where base and quote assets both have ETH rates or both have USD rates\\n    function __calcConversionAmountSameRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        return\\n            _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n                _baseAssetUnit.mul(_quoteAssetRate)\\n            );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has a USD rate and the quote asset has an ETH rate\\n    function __calcConversionAmountUsdRateAssetToEthRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n            _ethPerUsdRate\\n        );\\n\\n        return intermediateStep.mul(ETH_UNIT).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to get the latest rate for a given primitive\\n    function __getLatestRateData(address _primitive) private view returns (int256 rate_) {\\n        if (_primitive == WETH_TOKEN) {\\n            return int256(ETH_UNIT);\\n        }\\n\\n        address aggregator = primitiveToAggregatorInfo[_primitive].aggregator;\\n        require(aggregator != address(0), \\\"__getLatestRateData: Primitive does not exist\\\");\\n\\n        return IChainlinkAggregator(aggregator).latestAnswer();\\n    }\\n\\n    /// @dev Helper to set the `ethUsdAggregator` value\\n    function __setEthUsdAggregator(address _nextEthUsdAggregator) private {\\n        address prevEthUsdAggregator = ethUsdAggregator;\\n        require(\\n            _nextEthUsdAggregator != prevEthUsdAggregator,\\n            \\\"__setEthUsdAggregator: Value already set\\\"\\n        );\\n\\n        __validateAggregator(_nextEthUsdAggregator);\\n\\n        ethUsdAggregator = _nextEthUsdAggregator;\\n\\n        emit EthUsdAggregatorSet(prevEthUsdAggregator, _nextEthUsdAggregator);\\n    }\\n\\n    /////////////////////////\\n    // PRIMITIVES REGISTRY //\\n    /////////////////////////\\n\\n    /// @notice Adds a list of primitives with the given aggregator and rateAsset values\\n    /// @param _primitives The primitives to add\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\n    function addPrimitives(\\n        address[] calldata _primitives,\\n        address[] calldata _aggregators,\\n        RateAsset[] calldata _rateAssets\\n    ) external onlyDispatcherOwner {\\n        require(_primitives.length > 0, \\\"addPrimitives: _primitives cannot be empty\\\");\\n\\n        __addPrimitives(_primitives, _aggregators, _rateAssets);\\n    }\\n\\n    /// @notice Removes a list of primitives from the feed\\n    /// @param _primitives The primitives to remove\\n    function removePrimitives(address[] calldata _primitives) external onlyDispatcherOwner {\\n        require(_primitives.length > 0, \\\"removePrimitives: _primitives cannot be empty\\\");\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            require(\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator != address(0),\\n                \\\"removePrimitives: Primitive not yet added\\\"\\n            );\\n\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\n            delete primitiveToUnit[_primitives[i]];\\n\\n            emit PrimitiveRemoved(_primitives[i]);\\n        }\\n    }\\n\\n    /// @notice Removes stale primitives from the feed\\n    /// @param _primitives The stale primitives to remove\\n    /// @dev Callable by anybody\\n    function removeStalePrimitives(address[] calldata _primitives) external {\\n        require(_primitives.length > 0, \\\"removeStalePrimitives: _primitives cannot be empty\\\");\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            address aggregatorAddress = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\n            require(aggregatorAddress != address(0), \\\"removeStalePrimitives: Invalid primitive\\\");\\n            require(rateIsStale(aggregatorAddress), \\\"removeStalePrimitives: Rate is not stale\\\");\\n\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\n            delete primitiveToUnit[_primitives[i]];\\n\\n            emit StalePrimitiveRemoved(_primitives[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the `staleRateThreshold` variable\\n    /// @param _nextStaleRateThreshold The next `staleRateThreshold` value\\n    function setStaleRateThreshold(uint256 _nextStaleRateThreshold) external onlyDispatcherOwner {\\n        uint256 prevStaleRateThreshold = staleRateThreshold;\\n        require(\\n            _nextStaleRateThreshold != prevStaleRateThreshold,\\n            \\\"__setStaleRateThreshold: Value already set\\\"\\n        );\\n\\n        staleRateThreshold = _nextStaleRateThreshold;\\n\\n        emit StaleRateThresholdSet(prevStaleRateThreshold, _nextStaleRateThreshold);\\n    }\\n\\n    /// @notice Updates the aggregators for given primitives\\n    /// @param _primitives The primitives to update\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    function updatePrimitives(address[] calldata _primitives, address[] calldata _aggregators)\\n        external\\n        onlyDispatcherOwner\\n    {\\n        require(_primitives.length > 0, \\\"updatePrimitives: _primitives cannot be empty\\\");\\n        require(\\n            _primitives.length == _aggregators.length,\\n            \\\"updatePrimitives: Unequal _primitives and _aggregators array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            address prevAggregator = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\n            require(prevAggregator != address(0), \\\"updatePrimitives: Primitive not yet added\\\");\\n            require(_aggregators[i] != prevAggregator, \\\"updatePrimitives: Value already set\\\");\\n\\n            __validateAggregator(_aggregators[i]);\\n\\n            primitiveToAggregatorInfo[_primitives[i]].aggregator = _aggregators[i];\\n\\n            emit PrimitiveUpdated(_primitives[i], prevAggregator, _aggregators[i]);\\n        }\\n    }\\n\\n    /// @notice Checks whether the current rate is considered stale for the specified aggregator\\n    /// @param _aggregator The Chainlink aggregator of which to check staleness\\n    /// @return rateIsStale_ True if the rate is considered stale\\n    function rateIsStale(address _aggregator) public view returns (bool rateIsStale_) {\\n        return\\n            IChainlinkAggregator(_aggregator).latestTimestamp() <\\n            block.timestamp.sub(staleRateThreshold);\\n    }\\n\\n    /// @dev Helper to add primitives to the feed\\n    function __addPrimitives(\\n        address[] memory _primitives,\\n        address[] memory _aggregators,\\n        RateAsset[] memory _rateAssets\\n    ) private {\\n        require(\\n            _primitives.length == _aggregators.length,\\n            \\\"__addPrimitives: Unequal _primitives and _aggregators array lengths\\\"\\n        );\\n        require(\\n            _primitives.length == _rateAssets.length,\\n            \\\"__addPrimitives: Unequal _primitives and _rateAssets array lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _primitives.length; i++) {\\n            require(\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator == address(0),\\n                \\\"__addPrimitives: Value already set\\\"\\n            );\\n\\n            __validateAggregator(_aggregators[i]);\\n\\n            primitiveToAggregatorInfo[_primitives[i]] = AggregatorInfo({\\n                aggregator: _aggregators[i],\\n                rateAsset: _rateAssets[i]\\n            });\\n\\n            // Store the amount that makes up 1 unit given the asset's decimals\\n            uint256 unit = 10**uint256(ERC20(_primitives[i]).decimals());\\n            primitiveToUnit[_primitives[i]] = unit;\\n\\n            emit PrimitiveAdded(_primitives[i], _aggregators[i], _rateAssets[i], unit);\\n        }\\n    }\\n\\n    /// @dev Helper to validate an aggregator by checking its return values for the expected interface\\n    function __validateAggregator(address _aggregator) private view {\\n        require(_aggregator != address(0), \\\"__validateAggregator: Empty _aggregator\\\");\\n\\n        require(\\n            IChainlinkAggregator(_aggregator).latestAnswer() > 0,\\n            \\\"__validateAggregator: No rate detected\\\"\\n        );\\n        require(!rateIsStale(_aggregator), \\\"__validateAggregator: Stale rate detected\\\");\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the aggregatorInfo variable value for a primitive\\n    /// @param _primitive The primitive asset for which to get the aggregatorInfo value\\n    /// @return aggregatorInfo_ The aggregatorInfo value\\n    function getAggregatorInfoForPrimitive(address _primitive)\\n        external\\n        view\\n        returns (AggregatorInfo memory aggregatorInfo_)\\n    {\\n        return primitiveToAggregatorInfo[_primitive];\\n    }\\n\\n    /// @notice Gets the `ethUsdAggregator` variable value\\n    /// @return ethUsdAggregator_ The `ethUsdAggregator` variable value\\n    function getEthUsdAggregator() external view returns (address ethUsdAggregator_) {\\n        return ethUsdAggregator;\\n    }\\n\\n    /// @notice Gets the `staleRateThreshold` variable value\\n    /// @return staleRateThreshold_ The `staleRateThreshold` variable value\\n    function getStaleRateThreshold() external view returns (uint256 staleRateThreshold_) {\\n        return staleRateThreshold;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable value\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() external view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n\\n    /// @notice Gets the rateAsset variable value for a primitive\\n    /// @return rateAsset_ The rateAsset variable value\\n    /// @dev This isn't strictly necessary as WETH_TOKEN will be undefined and thus\\n    /// the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the\\n    /// behavior more explicit\\n    function getRateAssetForPrimitive(address _primitive)\\n        public\\n        view\\n        returns (RateAsset rateAsset_)\\n    {\\n        if (_primitive == WETH_TOKEN) {\\n            return RateAsset.ETH;\\n        }\\n\\n        return primitiveToAggregatorInfo[_primitive].rateAsset;\\n    }\\n\\n    /// @notice Gets the unit variable value for a primitive\\n    /// @return unit_ The unit variable value\\n    function getUnitForPrimitive(address _primitive) public view returns (uint256 unit_) {\\n        if (_primitive == WETH_TOKEN) {\\n            return ETH_UNIT;\\n        }\\n\\n        return primitiveToUnit[_primitive];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IPrimitivePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for primitive price feeds\\ninterface IPrimitivePriceFeed {\\n    function calcCanonicalValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function calcLiveValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/utils/DispatcherOwnerMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../persistent/dispatcher/IDispatcher.sol\\\";\\n\\n/// @title DispatcherOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of Dispatcher\\nabstract contract DispatcherOwnerMixin {\\n    address internal immutable DISPATCHER;\\n\\n    modifier onlyDispatcherOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyDispatcherOwner: Only the Dispatcher owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _dispatcher) public {\\n        DISPATCHER = _dispatcher;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the Dispatcher contract\\n    function getOwner() public view returns (address owner_) {\\n        return IDispatcher(DISPATCHER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() external view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IChainlinkAggregator Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IChainlinkAggregator {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEthUsdAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"PrimitiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"PrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextAggregator\",\"type\":\"address\"}],\"name\":\"PrimitiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"StalePrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevStaleRateThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"StaleRateThresholdSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"name\":\"addPrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcCanonicalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcLiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getAggregatorInfoForPrimitive\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"}],\"internalType\":\"struct ChainlinkPriceFeed.AggregatorInfo\",\"name\":\"aggregatorInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdAggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getRateAssetForPrimitive\",\"outputs\":[{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getUnitForPrimitive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"rateIsStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rateIsStale_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removeStalePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"setEthUsdAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"setStaleRateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"}],\"name\":\"updatePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkPriceFeed","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c3dc853dd716bd5754f421ef94fdcbac3902ab32000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}