{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        \r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    \r\n    \r\n    constructor () internal { }\r\n    \r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface PZSConfig {\r\n    \r\n    function getStage(uint8 version) external view returns(uint256 minimum,uint256 maximum,uint256 period,uint256 scale,uint256 totalSuply,uint256 startTime,uint256 partnerBecome);\r\n    \r\n    function checkStart(uint8 version) external view returns(bool);\r\n    \r\n    function partnerBecome(uint8 version) external view returns(uint256);\r\n    \r\n    function underway() external view returns(uint8);\r\n\r\n}\r\n\r\ncontract PZSSub is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    using SafeERC20 for IERC20;\r\n    \r\n    IERC20 public pzsImpl;\r\n    \r\n    \r\n     //--------------------------首码地址-------------------------------------------------------------------\r\n    \r\n    address private ROOT_ADDRESS = address(0xe060545d74CF8F5B2fDfC95b0E73673B7Bbfd291);\r\n    \r\n     //-------------------------收款地址--------------------------------------------------------------------\r\n    \r\n    address payable private PROJECT_NODE_ADDRESS = address(0xf99faD379C981aAf9f5b7537949B2c8D97e77Bba);\r\n    \r\n    address payable private PROJECT_LEADER_ADDRESS = address(0x30D1BcDf6726832f131818FcEDeC9784dD11E18f);\r\n    \r\n    //--------------------------默认合伙人------------------------------------------------------------------\r\n    \r\n    \r\n    //---------------------------------------------------------------------------------------------\r\n    constructor(address conf,address pzt) public {\r\n        config = PZSConfig(conf);\r\n        \r\n        //registration(INIT_ADDRESS,address(0),false);\r\n        registration(ROOT_ADDRESS,address(0),true);\r\n        \r\n        pzsImpl = IERC20(pzt);\r\n    }\r\n    \r\n    function upgrade(address[] calldata addList,address referAddress) external onlyOwner returns(bool){\r\n        for(uint8 i;i<addList.length;i++){\r\n            registration(addList[i],referAddress,true);\r\n        }\r\n    }\r\n    \r\n    function changeConfig(address conf) external onlyOwner returns(bool) {\r\n        config = PZSConfig(conf);\r\n    }\r\n    \r\n    struct User {\r\n        \r\n        bool active;\r\n        \r\n        address referrer;\r\n        \r\n        uint256 id;\r\n        \r\n        bool node;\r\n        \r\n        uint256 direcCount;\r\n        \r\n        uint256 indirectCount;\r\n        \r\n        uint256 teamCount;\r\n        \r\n        uint256[3] subAmount;\r\n        \r\n        uint256[3] subAward;\r\n        \r\n        uint256[3] partnerAward;\r\n    }\r\n    \r\n    \r\n    PZSConfig private config;\r\n    \r\n    //Recommend reward generation one, generation two\r\n    uint256[2] public referRewardPercent = [20,15];\r\n    \r\n    //Super node subscription incentive rate\r\n    uint256 public partnerReferRewardPercent = 15;\r\n    \r\n    uint8 public teamCountLimit = 15;\r\n    \r\n    //Under the umbrella of the super node purchase rebate rate\r\n    uint256 public partnerBecomePercent = 50;\r\n    \r\n    //Ordinary nodes directly push the reward rate\r\n    uint256 public partnerDirectPercent = 20;\r\n    \r\n    mapping(address=>User) public users;\r\n    \r\n    mapping(address=>uint256[3]) awards;\r\n    \r\n    mapping(uint256=>address) public addressIndexs;\r\n    \r\n    //mapping(address=>uint256[3]) partnerAwards;\r\n    \r\n    uint256 public userCounter;\r\n    \r\n    uint256[3] public totalSubEth;\r\n    \r\n    event Registration(address indexed user, address indexed referrer);\r\n    \r\n    event ApplyForPartner(address indexed user,address indexed referrer,address indexed node,uint256 partnerDirectAward,uint256 partnerBecomeAward);\r\n    \r\n    event Subscribe(address indexed user,uint256 changeAmount,uint256 exchangeAmout);\r\n    \r\n    event WithdrawAward(address indexed user,uint256 subAward);\r\n    \r\n    //event WithdrawPartnerAward(address indexed user,uint256 subAward);\r\n    \r\n    //event AllotPartnerAward(address indexed user,address indexed node,uint256 partnerAward);\r\n    \r\n    //event AllotSubAward(address indexed user,address indexed sub1,address indexed sub2,uint256 subAward1,uint256 subAward2);\r\n    \r\n    event AllotSubAward(address indexed user,address indexed subAddress,uint256 partnerAward,uint8 awardType);\r\n    \r\n    function isUserExists(address userAddress) private view returns(bool) {\r\n        \r\n        return users[userAddress].active;\r\n    }\r\n    \r\n    function underway() public view returns(uint8 version){\r\n        version = config.underway();\r\n        return version;\r\n    }\r\n    \r\n    function getGlobalStats(uint8 version) public view returns(uint256[9] memory stats){\r\n        (uint256 minimum,uint256 maximum,uint256 period,uint256 scale,uint256 totalSuply,uint256 startTime,uint256 partnerBecome) = config.getStage(version);\r\n        stats[0] = minimum;\r\n        stats[1] = maximum;\r\n        stats[2] = period;\r\n        stats[3] = scale;\r\n        stats[4] = totalSuply;\r\n        stats[5] = startTime;\r\n        stats[6] = partnerBecome;\r\n        stats[7] = totalSubEth[version].mul(scale);\r\n        stats[8] = userCounter;\r\n        return stats;\r\n    }\r\n    \r\n    function getPersonalStats(uint8 version,address userAddress) external view returns (uint256[10] memory stats){\r\n        User memory user = users[userAddress];\r\n        stats[0] = user.id;\r\n        stats[1] = user.node?1:0;\r\n        stats[2] = user.teamCount;\r\n        stats[3] = user.direcCount;\r\n        stats[4] = user.indirectCount;\r\n        stats[5] = user.subAmount[version];\r\n        stats[6] = user.subAward[version];\r\n        stats[7] = user.partnerAward[version];\r\n        stats[8] = awards[userAddress][version];\r\n        stats[9] = user.active?1:0;\r\n    }\r\n\r\n    function getNodeAddress(address userAddress) public view returns (address nodeAddress){\r\n        \r\n        while(true){\r\n            if (users[users[userAddress].referrer].node) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            userAddress = users[userAddress].referrer;\r\n            \r\n            if(userAddress==address(0)){\r\n                break;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function regist(uint256 id) public  {\r\n        require(id>0,\"error\");\r\n        require(!isUserExists(msg.sender),\"exist\");\r\n        address referAddress = addressIndexs[id];\r\n        require(isUserExists(referAddress),\"ref not regist\");\r\n\r\n        registration(msg.sender,referAddress,false);\r\n    }\r\n    \r\n    function applyForPartner(uint8 version) public payable returns (bool){\r\n        \r\n        require(isUserExists(msg.sender),\"User not registered\");\r\n        \r\n        require(config.checkStart(version),\"Unsupported type\");\r\n        \r\n        require(!users[msg.sender].node,\"Has been activated\");\r\n        \r\n        require(msg.value==config.partnerBecome(version),\"amount error\");\r\n        \r\n        address referrerAddress = users[msg.sender].referrer;\r\n        \r\n        address nodeAddress = getNodeAddress(msg.sender);\r\n        \r\n        require(referrerAddress!=address(0),\"referrerAddress error 0\");\r\n        require(nodeAddress!=address(0),\"referrerAddress error 0\");\r\n        \r\n        uint256 partnerDirectAward = msg.value.mul(partnerDirectPercent).div(100);\r\n        uint256 partnerBecomeAward = msg.value.mul(partnerBecomePercent).div(100);\r\n        \r\n        \r\n        users[msg.sender].node = true;\r\n        \r\n        awards[referrerAddress][version] = awards[referrerAddress][version].add(partnerDirectAward);\r\n        awards[nodeAddress][version] = awards[nodeAddress][version].add(partnerBecomeAward);\r\n\r\n        //partnerAwards[referrerAddress][version] = partnerAwards[referrerAddress][version].add(partnerDirectAward);\r\n        //partnerAwards[nodeAddress][version] = partnerAwards[nodeAddress][version].add(partnerBecomeAward);\r\n        \r\n        users[referrerAddress].partnerAward[version] = users[referrerAddress].partnerAward[version].add(partnerDirectAward);\r\n        users[nodeAddress].partnerAward[version] = users[nodeAddress].partnerAward[version].add(partnerBecomeAward);\r\n        \r\n\r\n        PROJECT_NODE_ADDRESS.transfer(msg.value.sub(partnerDirectAward).sub(partnerBecomeAward));\r\n        \r\n        emit ApplyForPartner(msg.sender,referrerAddress,nodeAddress,partnerDirectAward,partnerBecomeAward);\r\n        \r\n        return true;\r\n    }\r\n     \r\n    function subscribe(uint8 version) public payable returns(bool) {\r\n        \r\n        require(isUserExists(msg.sender),\"User not registered\");\r\n        \r\n        require(config.checkStart(version),\"Unsupported type\");\r\n        \r\n        (uint256 minimum,uint256 maximum,,uint256 scale,,,) = config.getStage(version);\r\n        \r\n        require(msg.value>=minimum,\"error sub type\");\r\n        \r\n        uint256 subVersionAmount = users[msg.sender].subAmount[version];\r\n        \r\n        require(subVersionAmount.add(msg.value)<=maximum,\"Exceeding sub limit\");\r\n        \r\n        (uint256 subAward1,uint256 subAward2) = allotSubAward(version,msg.sender,msg.value);\r\n        uint256 partnerAward = allotPartnerAward(version,msg.sender,msg.value);\r\n        \r\n        PROJECT_LEADER_ADDRESS.transfer(msg.value.sub(subAward1).sub(subAward2).sub(partnerAward));\r\n        \r\n        totalSubEth[version] = totalSubEth[version].add(msg.value);\r\n        users[msg.sender].subAmount[version] = users[msg.sender].subAmount[version].add(msg.value);\r\n        \r\n        uint256 exchangePZSAmount = msg.value.mul(scale);\r\n        \r\n        //pzsImpl.approve(address(this),exchangePZSAmount);\r\n        //pzsImpl.safeTransferFrom(address(this),msg.sender,exchangePZSAmount);\r\n        pzsImpl.safeTransfer(msg.sender,exchangePZSAmount);\r\n        \r\n        emit Subscribe(msg.sender,msg.value,exchangePZSAmount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    \r\n    function withdrawAward(uint8 version) public returns(uint256){\r\n        uint256 subAward = awards[msg.sender][version];\r\n        require(subAward>0,\"error \");\r\n        require(address(this).balance >= subAward,\"not enought\");\r\n        awards[msg.sender][version] = 0;\r\n        msg.sender.transfer(subAward);\r\n        emit WithdrawAward(msg.sender,subAward);\r\n    }\r\n    \r\n    /*\r\n    function withdrawPartnerAward(uint8 version) public payable returns(uint256){\r\n        uint256 partnerAward = partnerAwards[msg.sender][version];\r\n        require(partnerAward>0,\"error \");\r\n        require(address(this).balance >= partnerAward,\"not enought\");\r\n        partnerAwards[msg.sender][version] = 0;\r\n        msg.sender.transfer(partnerAward);\r\n        emit WithdrawPartnerAward(msg.sender,partnerAward);\r\n    }*/\r\n    \r\n    function allotPartnerAward(uint8 version,address userAddress,uint256 amount) private returns (uint256 partnerAward){\r\n        address nodeAddress = getNodeAddress(msg.sender);\r\n        \r\n        partnerAward = amount.mul(partnerReferRewardPercent).div(100);\r\n        if(nodeAddress==address(0)){\r\n            partnerAward = 0;\r\n        }else{\r\n            awards[nodeAddress][version] = awards[nodeAddress][version].add(partnerAward);\r\n            \r\n        }\r\n        \r\n        users[nodeAddress].subAward[version] = users[nodeAddress].subAward[version].add(partnerAward);\r\n        //emit AllotPartnerAward(userAddress,nodeAddress,partnerAward);\r\n        emit AllotSubAward(userAddress,nodeAddress,partnerAward,3);\r\n        \r\n        return partnerAward;\r\n    }\r\n    \r\n    function allotSubAward(uint8 version,address userAddress,uint256 amount) private returns (uint256 subAward1,uint256 subAward2) {\r\n        address sub1 = users[userAddress].referrer;\r\n        address sub2 = users[sub1].referrer;\r\n        subAward1 = amount.mul(referRewardPercent[0]).div(100);\r\n        subAward2 = amount.mul(referRewardPercent[1]).div(100);\r\n        \r\n        if(sub1==address(0)){\r\n            subAward1 = 0;\r\n            subAward2 = 0;\r\n        }else{\r\n            \r\n            if(sub2==address(0)){\r\n                subAward2 = 0;\r\n                awards[sub1][version] = awards[sub1][version].add(subAward1);\r\n            }else{\r\n                awards[sub1][version] = awards[sub1][version].add(subAward1);\r\n                awards[sub2][version] = awards[sub2][version].add(subAward2);\r\n            }\r\n        }\r\n        \r\n        \r\n        users[sub1].subAward[version] = users[sub1].subAward[version].add(subAward1);\r\n        users[sub2].subAward[version] = users[sub2].subAward[version].add(subAward2);\r\n        \r\n        emit AllotSubAward(userAddress,sub1,subAward1,1);\r\n        emit AllotSubAward(userAddress,sub2,subAward2,2);\r\n        //emit AllotSubAward(userAddress,sub1,sub2,subAward1,subAward2);\r\n        return (subAward1,subAward2);\r\n    }\r\n    \r\n    function registration (address userAddress,address referAddress,bool node) private {\r\n        require(!isUserExists(msg.sender),\"exist\");\r\n        users[userAddress] = createUser(userAddress,referAddress,node);\r\n        users[referAddress].direcCount++;\r\n        users[users[referAddress].referrer].indirectCount++;\r\n        \r\n        teamCount(userAddress);\r\n        \r\n        emit Registration(userAddress,referAddress);\r\n    }\r\n    \r\n    function teamCount(address userAddress) private{\r\n        address ref = users[userAddress].referrer;\r\n        \r\n        for(uint8 i = 0;i<teamCountLimit;i++){\r\n            \r\n            if(ref==address(0)){\r\n                break;\r\n            }\r\n            users[ref].teamCount++;\r\n\r\n            ref = users[ref].referrer;\r\n        }\r\n        \r\n    }\r\n    \r\n    function createUser(address userAddress,address referrer,bool node) private returns(User memory user){\r\n        uint256[3] memory subAmount;\r\n        uint256[3] memory subAward;\r\n        uint256[3] memory partnerAward;\r\n        userCounter++;\r\n        addressIndexs[userCounter] = userAddress;\r\n        user = User({\r\n            active: true,\r\n            referrer: referrer,\r\n            id: userCounter,\r\n            node: node,\r\n            direcCount: 0,\r\n            indirectCount: 0,\r\n            teamCount: 1,\r\n            subAmount: subAmount,\r\n            subAward: subAward,\r\n            partnerAward: partnerAward\r\n        });\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pzt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerAward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"awardType\",\"type\":\"uint8\"}],\"name\":\"AllotSubAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerDirectAward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerBecomeAward\",\"type\":\"uint256\"}],\"name\":\"ApplyForPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeAmout\",\"type\":\"uint256\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subAward\",\"type\":\"uint256\"}],\"name\":\"WithdrawAward\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressIndexs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"applyForPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"conf\",\"type\":\"address\"}],\"name\":\"changeConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"getGlobalStats\",\"outputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"stats\",\"type\":\"uint256[9]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getNodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getPersonalStats\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"stats\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerBecomePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerDirectPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerReferRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pzsImpl\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"regist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"subscribe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCountLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSubEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underway\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"node\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"direcCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indirectCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"withdrawAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PZSSub","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000116f88f48da8da893bc390564d430d918eb0412e000000000000000000000000205bb454cff5ece04a102d7449313ebb934014e8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://58fcda67067bbbd3970b5a0571b6468312d6c839cd7531087dd22035a16ffccf"}]}