{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: browser/Prediction.sol\r\n\r\npragma solidity ^0.6.7;\r\n\r\n\r\n\r\ncontract Versus {\r\n    function rewardPrediction(address user, uint256 amount) public {}\r\n}\r\n\r\ncontract Prediction {\r\n    address public owner;\r\n    address public versusContract;\r\n    address public versusRewards;\r\n    address public nyanRewards;\r\n    address public devFund;\r\n    address[] public markets;\r\n    \r\n    struct marketData {\r\n        string marketName;\r\n        uint256 startBlock;\r\n        uint256 expirationBlock;\r\n        int currentRound;\r\n        int targetPrice;\r\n        uint256 ETHLong;\r\n        uint256 ETHShort;\r\n        int[] priceHistory;\r\n        uint256[] longHistory;\r\n        uint256[] shortHistory;\r\n    }\r\n    mapping(address => marketData) public eachMarketData;\r\n    \r\n    struct marketPrediction {\r\n        address pair;\r\n        int price;\r\n        int round;\r\n        uint256 ETHUsed;\r\n        bool isLonging;\r\n        uint256 expirationBlock;\r\n    }\r\n    mapping(address => marketPrediction) public userPrediction;\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint112;\r\n    using SafeMath for int256;\r\n    \r\n    constructor(address _devFund, address _nyanRewards, address _versusRewards) public {\r\n        owner = msg.sender;\r\n        devFund = _devFund;\r\n        nyanRewards = _nyanRewards;\r\n        versusRewards = _versusRewards;\r\n        \r\n    }\r\n    \r\n    function setOwner(address _owner) public {\r\n        require(msg.sender == owner);\r\n        owner = _owner;\r\n    }\r\n    \r\n    function setVersus(address _versus) public {\r\n        require(msg.sender == owner);\r\n        versusContract = _versus;\r\n    }\r\n    \r\n    function setRewards(address _devFund, address _nyanRewards, address _versusRewards) public {\r\n        require(msg.sender == owner);\r\n        devFund = _devFund;\r\n        nyanRewards = _nyanRewards;\r\n        versusRewards = _versusRewards;\r\n    }\r\n    \r\n    function createMarket(address pair, string memory marketName) public {\r\n        require(msg.sender == owner);\r\n        markets.push(pair);\r\n        //require token to be on Link price feed<----\r\n        eachMarketData[pair].marketName = marketName;\r\n        eachMarketData[pair].startBlock = block.number;\r\n        eachMarketData[pair].expirationBlock = block.number.add(271);\r\n        eachMarketData[pair].currentRound = 1;\r\n        eachMarketData[pair].targetPrice = getLatestPrice(pair);\r\n        \r\n    }\r\n    \r\n    function getLatestPrice(address pair) public view returns (int) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(pair);\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n    \r\n    function predict(address pair, bool isLonging) public payable {\r\n        require(msg.value > 100, \"ETH should be greater than 100 wei\");\r\n        require(eachMarketData[pair].startBlock.add(70) > block.number, \"Prediction period ended\");\r\n        require(userPrediction[msg.sender].pair == address(0));\r\n        userPrediction[msg.sender].pair = pair;\r\n        userPrediction[msg.sender].isLonging = isLonging;\r\n        userPrediction[msg.sender].price = eachMarketData[pair].targetPrice;\r\n        userPrediction[msg.sender].round = eachMarketData[pair].currentRound;\r\n        //fees are 1%\r\n        uint256 fees = msg.value.mul(1).div(100);\r\n        userPrediction[msg.sender].ETHUsed = msg.value.sub(fees);\r\n        handleFees(fees);\r\n        userPrediction[msg.sender].expirationBlock = eachMarketData[pair].expirationBlock;\r\n        if (isLonging) {\r\n            eachMarketData[pair].ETHLong = eachMarketData[pair].ETHLong.add(msg.value);\r\n        } else {\r\n            eachMarketData[pair].ETHShort = eachMarketData[pair].ETHShort.add(msg.value);\r\n        }\r\n        \r\n    }\r\n    \r\n    function handleFees(uint256 ETHAmount) internal {\r\n        //send 60% to a Versus rewards contract\r\n        versusRewards.call{value: ETHAmount.mul(60).div(100)}(\"\");\r\n        //send 10% to a Dev rewards contract\r\n        devFund.call{value: ETHAmount.mul(10).div(100)}(\"\");\r\n        //send 30% to a Nyan-2 rewards contract\r\n        nyanRewards.call{value: ETHAmount.mul(30).div(100)}(\"\");   \r\n    }\r\n    \r\n    function expire(address pair) public {\r\n        require(eachMarketData[pair].expirationBlock < block.number);\r\n        eachMarketData[pair].priceHistory.push(eachMarketData[pair].targetPrice);\r\n        eachMarketData[pair].longHistory.push(eachMarketData[pair].ETHLong);\r\n        eachMarketData[pair].shortHistory.push(eachMarketData[pair].ETHShort);\r\n        eachMarketData[pair].startBlock = block.number;\r\n        eachMarketData[pair].expirationBlock = block.number.add(271);\r\n        eachMarketData[pair].currentRound = eachMarketData[pair].currentRound + 1;\r\n        eachMarketData[pair].targetPrice = getLatestPrice(pair);\r\n        //mint the caller a Versus token by calling function from token contract\r\n        Versus(versusContract).rewardPrediction(msg.sender, 1000000000000000000);\r\n    }\r\n    \r\n    function closePrediction() public {\r\n        require(userPrediction[msg.sender].pair != address(0));\r\n        bool longWins;\r\n        //check if current block has passed the prediction expiration\r\n        require(block.number > userPrediction[msg.sender].expirationBlock, \"Prediction has not expired.\");\r\n        //check if the price is higher than the price history for the round\r\n        address pair = userPrediction[msg.sender].pair;\r\n        if (eachMarketData[pair].priceHistory[uint(userPrediction[msg.sender].round-1)] > userPrediction[msg.sender].price) {\r\n            longWins = true;\r\n        }\r\n        //if isLonged is equal to isLonging, send the user their ETH + ETH from opponents based on pool percentages\r\n        uint256 poolPerc;\r\n        uint256 ETHWon; \r\n        if (longWins) {\r\n            if (userPrediction[msg.sender].isLonging) {\r\n                poolPerc = userPrediction[msg.sender].ETHUsed\r\n                    .mul(100)\r\n                    .div(eachMarketData[pair].longHistory[uint(userPrediction[msg.sender].round-1)]);\r\n                ETHWon = poolPerc\r\n                            .mul(eachMarketData[pair].shortHistory[uint(userPrediction[msg.sender].round-1)])\r\n                            .div(100);\r\n                ETHWon = ETHWon.add(userPrediction[msg.sender].ETHUsed);\r\n                //send ETHWon to user\r\n                msg.sender.call{value: ETHWon}(\"\");\r\n            }\r\n        } else {\r\n            if (!userPrediction[msg.sender].isLonging) {\r\n                poolPerc = userPrediction[msg.sender].ETHUsed\r\n                    .mul(100)\r\n                    .div(eachMarketData[pair].shortHistory[uint(userPrediction[msg.sender].round-1)]);\r\n                ETHWon = poolPerc\r\n                            .mul(eachMarketData[pair].longHistory[uint(userPrediction[msg.sender].round-1)])\r\n                            .div(100);\r\n                ETHWon = ETHWon.add(userPrediction[msg.sender].ETHUsed);\r\n                //send ETHWon to user\r\n                msg.sender.call{value: ETHWon}(\"\");\r\n            }\r\n        }\r\n        \r\n        //mint user Versus(call Versus token)\r\n        Versus(versusContract).rewardPrediction(msg.sender, userPrediction[msg.sender].ETHUsed.div(10));\r\n        \r\n        if (eachMarketData[userPrediction[msg.sender].pair].expirationBlock < block.number) {\r\n            expire(userPrediction[msg.sender].pair);\r\n        }\r\n        \r\n        //reset all fields for the user\r\n        userPrediction[msg.sender].pair = address(0);\r\n        userPrediction[msg.sender].price = 0;\r\n        userPrediction[msg.sender].round = 0;\r\n        userPrediction[msg.sender].ETHUsed = 0;\r\n        userPrediction[msg.sender].isLonging = false;\r\n        userPrediction[msg.sender].expirationBlock = 0;\r\n        \r\n        \r\n    }\r\n    \r\n    function getMarkets() public view returns(address[] memory) {\r\n        return markets;\r\n    }\r\n    \r\n    function getMarketDetails(address market) public view \r\n        returns(uint256, uint256, int, int, uint256, uint256, string memory) {\r\n        \r\n        return(\r\n            eachMarketData[market].startBlock,\r\n            eachMarketData[market].expirationBlock,\r\n            eachMarketData[market].currentRound,\r\n            eachMarketData[market].targetPrice,\r\n            eachMarketData[market].ETHLong,\r\n            eachMarketData[market].ETHShort,\r\n            eachMarketData[market].marketName\r\n            );\r\n    }\r\n    \r\n    receive() external payable {\r\n        \r\n    }\r\n    \r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nyanRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_versusRewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"closePrediction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eachMarketData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"currentRound\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ETHLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHShort\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"expire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLonging\",\"type\":\"bool\"}],\"name\":\"predict\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nyanRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_versusRewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_versus\",\"type\":\"address\"}],\"name\":\"setVersus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPrediction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"round\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ETHUsed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLonging\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versusContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versusRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Prediction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d66a9d2b706e225204f475c9e70a4c09eea62199000000000000000000000000868f7622f57b62330db8b282044d7eaf067facfe0000000000000000000000003b7c8af4bc2cf831b88c741f23a687699a753e65","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6aca4cd9465a772677ffb125311d9045806345e2214799019769646146be259"}]}