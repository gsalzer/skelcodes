{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nlibrary AddrArrayLib {\r\n    using AddrArrayLib for Addresses;\r\n\r\n    struct Addresses {\r\n      address[]  _items;\r\n    }\r\n    function pushAddress(Addresses storage self, address element) internal {\r\n      if (!exists(self, element)) {\r\n        self._items.push(element);\r\n      }\r\n    }\r\n    function removeAddress(Addresses storage self, address element) internal returns (bool) {\r\n        for (uint i = 0; i < self.size(); i++) {\r\n            if (self._items[i] == element) {\r\n                self._items[i] = self._items[self.size() - 1];\r\n                self._items.pop();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function getAddressAtIndex(Addresses storage self, uint256 index) internal view returns (address) {\r\n        require(index < size(self), \"the index is out of bounds\");\r\n        return self._items[index];\r\n    }\r\n    function size(Addresses storage self) internal view returns (uint256) {\r\n      return self._items.length;\r\n    }\r\n    function exists(Addresses storage self, address element) internal view returns (bool) {\r\n        for (uint i = 0; i < self.size(); i++) {\r\n            if (self._items[i] == element) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function getAllAddresses(Addresses storage self) internal view returns(address[] memory) {\r\n        return self._items;\r\n    }\r\n}\r\n\r\ninterface Minter {\r\n    // Mint new tokens\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function changeOwner(address to) external;\r\n    function changeMinter(address to) external;\r\n}\r\n\r\ncontract Manager {\r\n    using AddrArrayLib for AddrArrayLib.Addresses;\r\n    AddrArrayLib.Addresses managers;\r\n    \r\n    event addManager(address manager);\r\n    event delManager(address manager);\r\n    \r\n    // Set total supply cap\r\n    mapping (address=>uint256) clap;\r\n\r\n    constructor (address owner, address token, uint256 supply) public {\r\n        managers.pushAddress(owner);\r\n        clap[token] = supply;\r\n        emit addManager(owner);\r\n    }\r\n\r\n    modifier ownerOnly() {\r\n        require(managers.exists(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function createManager(address manager) external ownerOnly {\r\n        managers.pushAddress(manager);\r\n        emit addManager(manager);\r\n    }\r\n\r\n    function rmManager(address manager) external ownerOnly {\r\n        managers.removeAddress(manager);\r\n        emit delManager(manager);\r\n    }\r\n\r\n    function mint(address token, address to, uint256 amount) external ownerOnly returns(bool) {\r\n        if (clap[token]>0) {\r\n            require(clap[token]>Minter(token).totalSupply());\r\n        }\r\n        Minter(token).mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    function migrate(address token, address to, bool minter) external ownerOnly {\r\n        if (minter) {\r\n            Minter(token).changeMinter(to);\r\n        } else {\r\n            Minter(token).changeOwner(to);\r\n        }\r\n    }\r\n    \r\n    function addClap(address token, uint256 supply) external ownerOnly {\r\n        clap[token] = supply;\r\n    }\r\n\r\n    function listManagers() public view returns(address[] memory) {\r\n        return managers.getAllAddresses();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"delManager\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"addClap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"createManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"minter\",\"type\":\"bool\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"rmManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Manager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b61fe2ec429c0ecc18fd6574f7889bdd0b37b1880000000000000000000000002e0d367a9529cc4f0c2dee2c5166019a613246bd00000000000000000000000000000000000000000000065a4da25d3016c00000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://201caf23be9152f5069e77c318dacbd8c1ecb475b0931a79da093faab8171929"}]}