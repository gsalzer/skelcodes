{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    /     |  __    / ____|\r\n   /      | |__) | | |\r\n  / /    |  _  /  | |\r\n / ____   | |    | |____\r\n/_/    _ |_|  _  _____|\r\n\r\n* ARC: global/SkillsetMetadata.sol\r\n*\r\n* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/global/SkillsetMetadata.sol\r\n*\r\n* Contract Dependencies: \r\n*\t- Adminable\r\n*\t- SkillsetMetadataStorageV1\r\n* Libraries: \r\n*\t- Storage\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 ARC\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n/* ===============================================\r\n* Flattened with Solidifier by Coinage\r\n* \r\n* https://solidifier.coina.ge\r\n* ===============================================\r\n*/\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary Storage {\r\n\r\n    /**\r\n     * @dev Performs an SLOAD and returns the data in the slot.\r\n     */\r\n    function load(\r\n        bytes32 slot\r\n    )\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        bytes32 result;\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            result := sload(slot)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs an SSTORE to save the value to the slot.\r\n     */\r\n    function store(\r\n        bytes32 slot,\r\n        bytes32 value\r\n    )\r\n        internal\r\n    {\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Adminable\r\n * @author dYdX\r\n *\r\n * @dev EIP-1967 Proxy Admin contract.\r\n */\r\ncontract Adminable {\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     *  This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\r\n     */\r\n    bytes32 internal constant ADMIN_SLOT =\r\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n    * @dev Modifier to check whether the `msg.sender` is the admin.\r\n    *  If it is, it will run the function. Otherwise, it will revert.\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == getAdmin(),\r\n            \"Adminable: caller is not admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return The EIP-1967 proxy admin\r\n     */\r\n    function getAdmin()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\r\n    }\r\n}\r\n\r\n\r\ncontract SkillsetMetadataStorageV1 {\r\n\r\n    mapping (address => bool) public approvedSkillsets;\r\n\r\n    address[] public skillsetsArray;\r\n\r\n    mapping (address => uint256) public maxLevel;\r\n\r\n}\r\n\r\ncontract SkillsetMetadata is Adminable, SkillsetMetadataStorageV1 {\r\n\r\n    /* ========== Events ========== */\r\n\r\n    event SkillsetStatusUpdated(address _token, bool _status);\r\n    event SkillsetMaxLevelSet(address _token, uint256 _level);\r\n\r\n    /* ========== View Functions ========== */\r\n\r\n    function getSkillsetBalance(\r\n        address _token,\r\n        address _user\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_token).balanceOf(_user);\r\n    }\r\n\r\n    function isValidSkillset(\r\n        address _token\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return approvedSkillsets[_token];\r\n    }\r\n\r\n    function getAllSkillsets()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return skillsetsArray;\r\n    }\r\n\r\n    /* ========== Admin Functions ========== */\r\n\r\n    function addSkillsetToken(\r\n        address _token\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            approvedSkillsets[_token] != true,\r\n            \"Skillset has already been added\"\r\n        );\r\n\r\n        skillsetsArray.push(_token);\r\n        approvedSkillsets[_token] = true;\r\n\r\n        emit SkillsetStatusUpdated(_token, true);\r\n    }\r\n\r\n    function removeSkillsetToken(\r\n        address _token\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            approvedSkillsets[_token] == true,\r\n            \"Skillset does not exist\"\r\n        );\r\n\r\n        for (uint i = 0; i < skillsetsArray.length; i++) {\r\n            if (skillsetsArray[i] == _token) {\r\n                delete skillsetsArray[i];\r\n                skillsetsArray[i] = skillsetsArray[skillsetsArray.length - 1];\r\n                skillsetsArray.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        delete approvedSkillsets[_token];\r\n\r\n        emit SkillsetStatusUpdated(_token, false);\r\n    }\r\n\r\n    function setMaxLevel(\r\n        address _token,\r\n        uint256 _level\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        maxLevel[_token] = _level;\r\n\r\n        emit SkillsetMaxLevelSet(_token, _level);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"SkillsetMaxLevelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SkillsetStatusUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addSkillsetToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSkillsets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllSkillsets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getSkillsetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isValidSkillset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeSkillsetToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skillsetsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SkillsetMetadata","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eb79639c41c76627777546ad968ec8a9dd0f5425b7ffab57eebf6e49f39e7c39"}]}