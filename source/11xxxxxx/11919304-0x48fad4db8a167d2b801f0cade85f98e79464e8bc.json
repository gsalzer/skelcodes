{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ICompliance {\r\n\r\n    /**\r\n    *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\r\n    *  the event is emitted by the Compliance constructor and by the addTokenAgent function\r\n    *  `_agentAddress` is the address of the Agent to add\r\n    */\r\n    event TokenAgentAdded(address _agentAddress);\r\n\r\n    /**\r\n    *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\r\n    *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\r\n    *  `_agentAddress` is the address of the Agent to remove\r\n    */\r\n    event TokenAgentRemoved(address _agentAddress);\r\n\r\n    /**\r\n    *  this event is emitted when a token has been bound to the compliance contract\r\n    *  the event is emitted by the bindToken function\r\n    *  `_token` is the address of the token to bind\r\n    */\r\n    event TokenBound(address _token);\r\n\r\n    /**\r\n    *  this event is emitted when a token has been unbound from the compliance contract\r\n    *  the event is emitted by the unbindToken function\r\n    *  `_token` is the address of the token to unbind\r\n    */\r\n    event TokenUnbound(address _token);\r\n\r\n    /**\r\n    *  @dev Returns true if the Address is in the list of token agents\r\n    *  @param _agentAddress address of this agent\r\n    */\r\n    function isTokenAgent(address _agentAddress) external view returns (bool);\r\n\r\n    /**\r\n    *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\r\n    *  @param _token address of the token\r\n    */\r\n    function isTokenBound(address _token) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev adds an agent to the list of token agents\r\n     *  @param _agentAddress address of the agent to be added\r\n     *  Emits a TokenAgentAdded event\r\n     */\r\n    function addTokenAgent(address _agentAddress) external;\r\n\r\n    /**\r\n    *  @dev remove Agent from the list of token agents\r\n    *  @param _agentAddress address of the agent to be removed (must be added first)\r\n    *  Emits a TokenAgentRemoved event\r\n    */\r\n    function removeTokenAgent(address _agentAddress) external;\r\n\r\n    /**\r\n     *  @dev binds a token to the compliance contract\r\n     *  @param _token address of the token to bind\r\n     *  Emits a TokenBound event\r\n     */\r\n    function bindToken(address _token) external;\r\n\r\n    /**\r\n    *  @dev unbinds a token from the compliance contract\r\n    *  @param _token address of the token to unbind\r\n    *  Emits a TokenUnbound event\r\n    */\r\n    function unbindToken(address _token) external;\r\n\r\n\r\n    /**\r\n     *  @dev checks that the transfer is compliant.\r\n     *  default compliance always returns true\r\n     *  READ ONLY FUNCTION, this function cannot be used to increment\r\n     *  counters, emit events, ...\r\n     *  @param _from The address of the sender\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     */\r\n    function canTransfer(address _from, address _to, uint256 _amount) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are transferred\r\n     *  from one wallet to another\r\n     *  this function can update state variables in the compliance contract\r\n     *  these state variables being used by `canTransfer` to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the compliance smart contract\r\n     *  @param _from The address of the sender\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     */\r\n    function transferred(address _from, address _to, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are created\r\n     *  on a wallet\r\n     *  this function can update state variables in the compliance contract\r\n     *  these state variables being used by `canTransfer` to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the compliance smart contract\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     */\r\n    function created(address _to, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are destroyed\r\n     *  this function can update state variables in the compliance contract\r\n     *  these state variables being used by `canTransfer` to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the compliance smart contract\r\n     *  @param _from The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     */\r\n    function destroyed(address _from, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev function used to transfer the ownership of the compliance contract\r\n     *  to a new owner, giving him access to the `OnlyOwner` functions implemented on the contract\r\n     *  @param newOwner The address of the new owner of the compliance contract\r\n     *  This function can only be called by the owner of the compliance contract\r\n     *  emits an `OwnershipTransferred` event\r\n     */\r\n    function transferOwnershipOnComplianceContract(address newOwner) external;\r\n}\r\n\r\ninterface IIdentityRegistry {\r\n    /**\r\n    *  @dev Returns the onchainID of an investor.\r\n    *  @param _userAddress The wallet of the investor\r\n    */\r\n    function identity(address _userAddress) external view returns (address);\r\n\r\n    /**\r\n    *  @dev Returns the country code of an investor.\r\n    *  @param _userAddress The wallet of the investor\r\n    */\r\n    function investorCountry(address _userAddress) external view returns (uint16);\r\n}\r\n\r\ninterface IToken {\r\n    /**\r\n    *  @dev Returns the Identity Registry linked to the token\r\n    */\r\n    function identityRegistry() external view returns (IIdentityRegistry);\r\n}\r\n\r\nabstract contract BasicCompliance is Ownable, ICompliance {\r\n\r\n    /// Mapping between agents and their statuses\r\n    mapping(address => bool) private _tokenAgentsList;\r\n\r\n    /// Mapping of tokens linked to the compliance contract\r\n    IToken _tokenBound;\r\n\r\n    /**\r\n     * @dev Throws if called by any address that is not a token bound to the compliance.\r\n     */\r\n    modifier onlyToken() {\r\n        require(isToken(), \"error : this address is not a token bound to the compliance contract\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    *  @dev Returns the ONCHAINID (Identity) of the _userAddress\r\n    *  @param _userAddress Address of the wallet\r\n    */\r\n    function _getIdentity(address _userAddress) internal view returns (address) {\r\n        return address(_tokenBound.identityRegistry().identity(_userAddress));\r\n    }\r\n\r\n    function _getCountry(address _userAddress) internal view returns (uint16) {\r\n        return _tokenBound.identityRegistry().investorCountry(_userAddress);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenAgent}.\r\n    */\r\n    function isTokenAgent(address _agentAddress) public override view returns (bool) {\r\n        if (!_tokenAgentsList[_agentAddress]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenBound}.\r\n    */\r\n    function isTokenBound(address _token) public override view returns (bool) {\r\n        if (_token != address(_tokenBound)){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-addTokenAgent}.\r\n     */\r\n    function addTokenAgent(address _agentAddress) external override onlyOwner {\r\n        require(!_tokenAgentsList[_agentAddress], \"This Agent is already registered\");\r\n        _tokenAgentsList[_agentAddress] = true;\r\n        emit TokenAgentAdded(_agentAddress);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-isTokenAgent}.\r\n    */\r\n    function removeTokenAgent(address _agentAddress) external override onlyOwner {\r\n        require(_tokenAgentsList[_agentAddress], \"This Agent is not registered yet\");\r\n        _tokenAgentsList[_agentAddress] = false;\r\n        emit TokenAgentRemoved(_agentAddress);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-bindToken}.\r\n     */\r\n    function bindToken(address _token) external override onlyOwner {\r\n        require(_token != address(_tokenBound), \"This token is already bound\");\r\n        _tokenBound = IToken(_token);\r\n        emit TokenBound(_token);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-unbindToken}.\r\n    */\r\n    function unbindToken(address _token) external override onlyOwner {\r\n        require(_token == address(_tokenBound), \"This token is not bound yet\");\r\n        delete _tokenBound;\r\n        emit TokenUnbound(_token);\r\n    }\r\n\r\n    /**\r\n    *  @dev Returns true if the sender corresponds to a token that is bound with the Compliance contract\r\n    */\r\n    function isToken() internal view returns (bool) {\r\n        return isTokenBound(msg.sender);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-transferOwnershipOnComplianceContract}.\r\n    */\r\n    function transferOwnershipOnComplianceContract(address newOwner) external override onlyOwner {\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nabstract contract CountryRestrictions is BasicCompliance {\r\n\r\n    /**\r\n     *  this event is emitted whenever a Country has been restricted.\r\n     *  the event is emitted by 'addCountryRestriction' and 'batchRestrictCountries' functions.\r\n     *  `_country` is the numeric ISO 3166-1 of the restricted country.\r\n     */\r\n    event AddedRestrictedCountry(uint16 _country);\r\n\r\n    /**\r\n     *  this event is emitted whenever a Country has been unrestricted.\r\n     *  the event is emitted by 'removeCountryRestriction' and 'batchUnrestrictCountries' functions.\r\n     *  `_country` is the numeric ISO 3166-1 of the unrestricted country.\r\n     */\r\n    event RemovedRestrictedCountry(uint16 _country);\r\n\r\n    /// Mapping between country and their restriction status\r\n    mapping(uint16 => bool) private _restrictedCountries;\r\n\r\n    /**\r\n    *  @dev Returns true if country is Restricted\r\n    *  @param _country, numeric ISO 3166-1 standard of the country to be checked\r\n    */\r\n    function isCountryRestricted(uint16 _country) public view returns (bool) {\r\n        return (_restrictedCountries[_country]);\r\n    }\r\n\r\n    /**\r\n    *  @dev Adds country restriction.\r\n    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\r\n    *  @param _country Country to be restricted, should be expressed by following numeric ISO 3166-1 standard\r\n    *  Only the owner of the Compliance smart contract can call this function\r\n    *  emits an `AddedRestrictedCountry` event\r\n    */\r\n    function addCountryRestriction(uint16 _country) public onlyOwner {\r\n        _restrictedCountries[_country] = true;\r\n        emit AddedRestrictedCountry(_country);\r\n    }\r\n\r\n    /**\r\n     *  @dev Removes country restriction.\r\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\r\n     *  @param _country Country to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `RemovedRestrictedCountry` event\r\n     */\r\n    function removeCountryRestriction(uint16 _country) public onlyOwner {\r\n        _restrictedCountries[_country] = false;\r\n        emit RemovedRestrictedCountry(_country);\r\n    }\r\n\r\n    /**\r\n    *  @dev Adds countries restriction in batch.\r\n    *  Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance.\r\n    *  @param _countries Countries to be restricted, should be expressed by following numeric ISO 3166-1 standard\r\n    *  Only the owner of the Compliance smart contract can call this function\r\n    *  emits an `AddedRestrictedCountry` event\r\n    */\r\n    function batchRestrictCountries(uint16[] memory _countries) public onlyOwner {\r\n        for (uint i = 0; i < _countries.length; i++) {\r\n            _restrictedCountries[_countries[i]] = true;\r\n            emit AddedRestrictedCountry(_countries[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev Removes countries restriction in batch.\r\n     *  Identities from those countries will again be authorised to manipulate Tokens linked to this Compliance.\r\n     *  @param _countries Countries to be unrestricted, should be expressed by following numeric ISO 3166-1 standard\r\n     *  Only the owner of the Compliance smart contract can call this function\r\n     *  emits an `RemovedRestrictedCountry` event\r\n     */\r\n    function batchUnrestrictCountries(uint16[] memory _countries) public onlyOwner {\r\n        for (uint i = 0; i < _countries.length; i++) {\r\n            _restrictedCountries[_countries[i]] = false;\r\n            emit RemovedRestrictedCountry(_countries[i]);\r\n        }\r\n    }\r\n\r\n    function transferActionOnCountryRestrictions(address _from, address _to, uint256 _value) internal {}\r\n\r\n    function creationActionOnCountryRestrictions(address _to, uint256 _value) internal {}\r\n\r\n    function destructionActionOnCountryRestrictions(address _from, uint256 _value) internal {}\r\n\r\n\r\n    function complianceCheckOnCountryRestrictions (address _from, address _to, uint256 _value)\r\n    internal view returns (bool) {\r\n        uint16 receiverCountry = _getCountry(_to);\r\n        address senderIdentity = _getIdentity(_from);\r\n        if (isCountryRestricted(receiverCountry)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract EcowattRestrictedCountries is CountryRestrictions {\r\n    uint[] public features;\r\n\r\n    constructor () public {\r\n        features = [1];\r\n\r\n        uint16[] memory restrictedCountries = new uint16[](14);\r\n        uint16[14] memory inputRestrictedCountries = [uint16(408), 156,364,410,702,392,124,840,630,850,16,316,580,581];\r\n        for (uint i = 0; i < inputRestrictedCountries.length; i++) {\r\n            restrictedCountries[i] = inputRestrictedCountries[i];\r\n        }\r\n        batchRestrictCountries(restrictedCountries);\r\n    }\r\n\r\n    function getFeatures() public view returns(uint[] memory) {\r\n        return features;\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-transferred}.\r\n    */\r\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\r\n        transferActionOnCountryRestrictions(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {ICompliance-created}.\r\n    */\r\n    function created(address _to, uint256 _value) external onlyToken override {\r\n        creationActionOnCountryRestrictions(_to, _value);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-destroyed}.\r\n     */\r\n    function destroyed(address _from, uint256 _value) external onlyToken override {\r\n        destructionActionOnCountryRestrictions(_from, _value);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {ICompliance-canTransfer}.\r\n     */\r\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\r\n        if (!complianceCheckOnCountryRestrictions(_from, _to, _value)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"AddedRestrictedCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"RemovedRestrictedCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"TokenAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"TokenAgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"addCountryRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"addTokenAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRestrictCountries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchUnrestrictCountries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeatures\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"isCountryRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"isTokenAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"removeCountryRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAddress\",\"type\":\"address\"}],\"name\":\"removeTokenAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOnComplianceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EcowattRestrictedCountries","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8d7304f8d995190fe550c9ae15b105655f1ac31bdac3dcede08ed94efc9f72e8"}]}