{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/spec_interfaces/ICertification.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Certification contract interface\r\ninterface ICertification /* is Ownable */ {\r\n\tevent GuardianCertificationUpdate(address indexed guardian, bool isCertified);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// Returns the certification status of a guardian\r\n    /// @param guardian is the guardian to query\r\n\tfunction isGuardianCertified(address guardian) external view returns (bool isCertified);\r\n\r\n    /// Sets the guardian certification status\r\n    /// @dev governance function called only by the certification manager\r\n    /// @param guardian is the guardian to update\r\n    /// @param isCertified bool indication whether the guardian is certified\r\n\tfunction setGuardianCertification(address guardian, bool isCertified) external /* onlyCertificationManager */ ;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IElections.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Elections contract interface\r\ninterface IElections {\r\n\t\r\n\t// Election state change events\r\n\tevent StakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 effectiveStake);\r\n\tevent GuardianStatusUpdated(address indexed guardian, bool readyToSync, bool readyForCommittee);\r\n\r\n\t// Vote out / Vote unready\r\n\tevent GuardianVotedUnready(address indexed guardian);\r\n\tevent VoteUnreadyCasted(address indexed voter, address indexed subject, uint256 expiration);\r\n\tevent GuardianVotedOut(address indexed guardian);\r\n\tevent VoteOutCasted(address indexed voter, address indexed subject);\r\n\r\n\t/*\r\n\t * External functions\r\n\t */\r\n\r\n    /// Notifies that the guardian is ready to sync with other nodes\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev ready to sync state is not managed in the contract that only emits an event\r\n    /// @dev readyToSync clears the readyForCommittee state\r\n\tfunction readyToSync() external;\r\n\r\n    /// Notifies that the guardian is ready to join the committee\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev a qualified guardian calling readyForCommittee is added to the committee\r\n\tfunction readyForCommittee() external;\r\n\r\n    /// Checks if a guardian is qualified to join the committee\r\n    /// @dev when true, calling readyForCommittee() will result in adding the guardian to the committee\r\n    /// @dev called periodically by guardians to check if they are qualified to join the committee\r\n    /// @param guardian is the guardian to check\r\n    /// @return canJoin indicating that the guardian can join the current committee\r\n\tfunction canJoinCommittee(address guardian) external view returns (bool);\r\n\r\n    /// Returns an address effective stake\r\n    /// The effective stake is derived from a guardian delegate stake and selfs stake  \r\n    /// @return effectiveStake is the guardian's effective stake\r\n\tfunction getEffectiveStake(address guardian) external view returns (uint effectiveStake);\r\n\r\n    /// Returns the current committee along with the guardians' Orbs address and IP\r\n    /// @return committee is a list of the committee members' guardian addresses\r\n    /// @return weights is a list of the committee members' weight (effective stake)\r\n    /// @return orbsAddrs is a list of the committee members' orbs address\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return ips is a list of the committee members' ip\r\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n\r\n\t// Vote-unready\r\n\r\n    /// Casts an unready vote on a subject guardian\r\n    /// @dev Called by a guardian as part of the automatic vote-unready flow\r\n    /// @dev The transaction may be sent from the guardian or orbs address.\r\n    /// @param subject is the subject guardian to vote out\r\n    /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.\r\n\tfunction voteUnready(address subject, uint voteExpiration) external;\r\n\r\n    /// Returns the current vote unready vote for a voter and a subject pair\r\n    /// @param voter is the voting guardian address\r\n    /// @param subject is the subject guardian address\r\n    /// @return valid indicates whether there is a valid vote\r\n    /// @return expiration returns the votes expiration time\r\n\tfunction getVoteUnreadyVote(address voter, address subject) external view returns (bool valid, uint256 expiration);\r\n\r\n    /// Returns the current vote-unready status of a subject guardian.\r\n    /// @dev the committee and certification data is used to check the certified and committee threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return committee is a list of the current committee members\r\n    /// @return weights is a list of the current committee members weight\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return votes is a list of bool indicating the members that votes the subject unready\r\n    /// @return subjectInCommittee indicates that the subject is in the committee\r\n    /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee\r\n\tfunction getVoteUnreadyStatus(address subject) external view returns (\r\n\t\taddress[] memory committee,\r\n\t\tuint256[] memory weights,\r\n\t\tbool[] memory certification,\r\n\t\tbool[] memory votes,\r\n\t\tbool subjectInCommittee,\r\n\t\tbool subjectInCertifiedCommittee\r\n\t);\r\n\r\n\t// Vote-out\r\n\r\n    /// Casts a voteOut vote by the sender to the given address\r\n    /// @dev the transaction is sent from the guardian address\r\n    /// @param subject is the subject guardian address\r\n\tfunction voteOut(address subject) external;\r\n\r\n    /// Returns the subject address the addr has voted-out against\r\n    /// @param voter is the voting guardian address\r\n    /// @return subject is the subject the voter has voted out\r\n\tfunction getVoteOutVote(address voter) external view returns (address);\r\n\r\n    /// Returns the governance voteOut status of a guardian.\r\n    /// @dev A guardian is voted out if votedStake / totalDelegatedStake (in percent mille) > threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return votedOut indicates whether the subject was voted out\r\n    /// @return votedStake is the total stake voting against the subject\r\n    /// @return totalDelegatedStake is the total delegated stake\r\n\tfunction getVoteOutStatus(address subject) external view returns (bool votedOut, uint votedStake, uint totalDelegatedStake);\r\n\r\n\t/*\r\n\t * Notification functions from other PoS contracts\r\n\t */\r\n\r\n    /// Notifies a delegated stake change event\r\n    /// @dev Called by: delegation contract\r\n    /// @param delegate is the delegate to update\r\n    /// @param selfDelegatedStake is the delegate self stake (0 if not self-delegating)\r\n    /// @param delegatedStake is the delegate delegated stake (0 if not self-delegating)\r\n    /// @param totalDelegatedStake is the total delegated stake\r\n\tfunction delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationsContract onlyWhenActive */;\r\n\r\n    /// Notifies a new guardian was unregistered\r\n    /// @dev Called by: guardian registration contract\r\n    /// @dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee\r\n    /// @param guardian is the address of the guardian that unregistered\r\n\tfunction guardianUnregistered(address guardian) external /* onlyGuardiansRegistrationContract */;\r\n\r\n    /// Notifies on a guardian certification change\r\n    /// @dev Called by: guardian registration contract\r\n    /// @param guardian is the address of the guardian to update\r\n    /// @param isCertified indicates whether the guardian is certified\r\n\tfunction guardianCertificationChanged(address guardian, bool isCertified) external /* onlyCertificationContract */;\r\n\r\n\r\n\t/*\r\n     * Governance functions\r\n\t */\r\n\r\n\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteOutPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteUnreadyPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\r\n\r\n    /// Sets the minimum self stake requirement for the effective stake\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \r\n\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the minimum self-stake required for the effective stake\r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille \r\n\tfunction getMinSelfStakePercentMille() external view returns (uint32);\r\n\r\n    /// Sets the vote-out threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteOutPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteOutPercentMilleThreshold(uint32 voteOutPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-out threshold\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteOutPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Sets the vote-unready threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteUnreadyPercentMilleThreshold(uint32 voteUnreadyPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-unready threshold\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteUnreadyPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Returns the contract's settings \r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getSettings() external view returns (\r\n\t\tuint32 minSelfStakePercentMille,\r\n\t\tuint32 voteUnreadyPercentMilleThreshold,\r\n\t\tuint32 voteOutPercentMilleThreshold\r\n\t);\r\n\r\n    /// Initializes the ready for committee notification for the committee guardians\r\n    /// @dev governance function called only by the initialization admin during migration \r\n    /// @dev identical behaviour as if each guardian sent readyForCommittee() \r\n    /// @param guardians a list of guardians addresses to update\r\n\tfunction initReadyForCommittee(address[] calldata guardians) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title managed contract interface, used by the contracts registry to notify the contract on updates\r\ninterface IManagedContract /* is ILockable, IContractRegistryAccessor, Initializable */ {\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() external;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Contract registry contract interface\r\n/// @dev The contract registry holds Orbs PoS contracts and managers lists\r\n/// @dev The contract registry updates the managed contracts on changes in the contract list\r\n/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \r\n/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \r\n/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\r\n\tevent ManagerChanged(string role, address newManager);\r\n\tevent ContractRegistryUpdated(address newContractRegistry);\r\n\r\n\t/*\r\n\t* External functions\r\n\t*/\r\n\r\n    /// Updates the contracts address and emits a corresponding event\r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @param addr is the contract updated address\r\n    /// @param managedContract indicates whether the contract is managed by the registry and notified on changes\r\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Returns the current address of the given contracts\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @return addr is the contract updated address\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n\r\n    /// Returns the list of contract addresses managed by the registry\r\n    /// @dev Managed contracts are updated on changes in the registry contracts addresses \r\n    /// @return addrs is the list of managed contracts\r\n\tfunction getManagedContracts() external view returns (address[] memory);\r\n\r\n    /// Locks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @dev When set all onlyWhenActive functions will revert\r\n\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Unlocks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\r\n\t\r\n    /// Updates a manager address and emits a corresponding event\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev the managers list is a flexible list of role to the manager's address\r\n    /// @param role is the managers' role name, for example \"functionalManager\"\r\n    /// @param manager is the manager updated address\r\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\r\n\r\n    /// Returns the current address of the given manager\r\n    /// @param role is the manager name, used to identify it\r\n    /// @return addr is the manager updated address\r\n\tfunction getManager(string calldata role) external view returns (address);\r\n\r\n    /// Sets a new contract registry to migrate to\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev updates the registry address record in all the managed contracts\r\n    /// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\r\n    /// @param newRegistry is the new registry contract \r\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the previous contract registry address \r\n    /// @dev used when the setting the contract as a new registry to assure a valid registry\r\n    /// @return previousContractRegistry is the previous contract registry\r\n\tfunction getPreviousContractRegistry() external view returns (address);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IContractRegistryAccessor {\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the contract registry address\r\n    /// @return contractRegistry is the contract registry address\r\n    function getContractRegistry() external view returns (IContractRegistry contractRegistry);\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableRegistryManagement.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableRegistryManagement is Context {\r\n    address private _registryAdmin;\r\n    address private _pendingRegistryAdmin;\r\n\r\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _registryAdmin = msgSender;\r\n        emit RegistryManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current registryAdmin.\r\n     */\r\n    function registryAdmin() public view returns (address) {\r\n        return _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the registryAdmin.\r\n     */\r\n    modifier onlyRegistryAdmin() {\r\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current registryAdmin.\r\n     */\r\n    function isRegistryAdmin() public view returns (bool) {\r\n        return _msgSender() == _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\r\n     *\r\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\r\n     * thereby removing any functionality that is only available to the registryAdmin.\r\n     */\r\n    function renounceRegistryManagement() public onlyRegistryAdmin {\r\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\r\n        _registryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\r\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\r\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\r\n        _registryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingManager.\r\n     */\r\n    modifier onlyPendingRegistryAdmin() {\r\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current registryAdmin to set the pendingManager address.\r\n     * @param newRegistryAdmin The address to transfer registryManagement to.\r\n     */\r\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\r\n        _pendingRegistryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\r\n     */\r\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\r\n        _transferRegistryManagement(_pendingRegistryAdmin);\r\n        _pendingRegistryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current pendingRegistryAdmin\r\n    */\r\n    function pendingRegistryAdmin() public view returns (address) {\r\n       return _pendingRegistryAdmin;  \r\n    }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Initializable {\r\n\r\n    address private _initializationAdmin;\r\n\r\n    event InitializationComplete();\r\n\r\n    /// Constructor\r\n    /// Sets the initializationAdmin to the contract deployer\r\n    /// The initialization admin may call any manager only function until initializationComplete\r\n    constructor() public{\r\n        _initializationAdmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyInitializationAdmin() {\r\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the initializationAdmin address\r\n    function initializationAdmin() public view returns (address) {\r\n        return _initializationAdmin;\r\n    }\r\n\r\n    /// Finalizes the initialization and revokes the initializationAdmin role \r\n    function initializationComplete() external onlyInitializationAdmin {\r\n        _initializationAdmin = address(0);\r\n        emit InitializationComplete();\r\n    }\r\n\r\n    /// Checks if the initialization was completed\r\n    function isInitializationComplete() public view returns (bool) {\r\n        return _initializationAdmin == address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is IContractRegistryAccessor, WithClaimableRegistryManagement, Initializable {\r\n\r\n    IContractRegistry private contractRegistry;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\r\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\r\n        setContractRegistry(_contractRegistry);\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationManager {\r\n        require(isMigrationManager(), \"sender is not the migration manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunctionalManager {\r\n        require(isFunctionalManager(), \"sender is not the functional manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    /// Checks whether the caller is Admin: either the contract registry, the registry admin, or the initialization admin\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\r\n    }\r\n\r\n    /// Checks whether the caller is a specific manager role or and Admin\r\n    /// @dev queries the registry contract for the up to date manager assignment\r\n    function isManager(string memory role) internal view returns (bool) {\r\n        IContractRegistry _contractRegistry = contractRegistry;\r\n        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\r\n    }\r\n\r\n    /// Checks whether the caller is the migration manager\r\n    function isMigrationManager() internal view returns (bool) {\r\n        return isManager('migrationManager');\r\n    }\r\n\r\n    /// Checks whether the caller is the functional manager\r\n    function isFunctionalManager() internal view returns (bool) {\r\n        return isManager('functionalManager');\r\n    }\r\n\r\n    /* \r\n     * Contract getters, return the address of a contract by calling the contract registry \r\n     */ \r\n\r\n    function getProtocolContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"protocol\");\r\n    }\r\n\r\n    function getStakingRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewards\");\r\n    }\r\n\r\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\r\n    }\r\n\r\n    function getCommitteeContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"committee\");\r\n    }\r\n\r\n    function getElectionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"elections\");\r\n    }\r\n\r\n    function getDelegationsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"delegations\");\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"guardiansRegistration\");\r\n    }\r\n\r\n    function getCertificationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certification\");\r\n    }\r\n\r\n    function getStakingContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"staking\");\r\n    }\r\n\r\n    function getSubscriptionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"subscriptions\");\r\n    }\r\n\r\n    function getStakingRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\r\n    }\r\n\r\n    function getGeneralFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"generalFeesWallet\");\r\n    }\r\n\r\n    function getCertifiedFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\r\n    }\r\n\r\n    function getStakingContractHandler() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingContractHandler\");\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newContractRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {\r\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\r\n        contractRegistry = newContractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\r\n    }\r\n\r\n    /// Returns the contract registry that the contract is set to use\r\n    /// @return contractRegistry is the registry contract address\r\n    function getContractRegistry() public override view returns (IContractRegistry) {\r\n        return contractRegistry;\r\n    }\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ILockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title lockable contract interface, allows to lock a contract\r\ninterface ILockable {\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external /* onlyMigrationManager */;\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external /* onlyMigrationManager */;\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() view external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title lockable contract\r\ncontract Lockable is ILockable, ContractRegistryAccessor {\r\n\r\n    bool public locked;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external override onlyMigrationManager {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external override onlyMigrationManager {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() external override view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title managed contract\r\ncontract ManagedContract is IManagedContract, Lockable {\r\n\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() virtual override external {}\r\n\r\n}\r\n\r\n// File: contracts/Certification.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/// @title Certification contract\r\ncontract Certification is ICertification, ManagedContract {\r\n    mapping(address => bool) guardianCertification;\r\n\r\n    modifier onlyCertificationManager {\r\n        require(isManager(\"certificationManager\"), \"sender is not the certification manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ManagedContract(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /*\r\n     * External functions\r\n     */\r\n\r\n    /// Returns the certification status of a guardian\r\n    /// @param guardian is the guardian to query\r\n    function isGuardianCertified(address guardian) external override view returns (bool isCertified) {\r\n        return guardianCertification[guardian];\r\n    }\r\n\r\n    /// Sets the guardian certification status\r\n    /// @dev governance function called only by the certification manager\r\n    /// @param guardian is the guardian to update\r\n    /// @param isCertified bool indication whether the guardian is certified\r\n    function setGuardianCertification(address guardian, bool isCertified) external override onlyCertificationManager onlyWhenActive {\r\n        guardianCertification[guardian] = isCertified;\r\n        emit GuardianCertificationUpdate(guardian, isCertified);\r\n        electionsContract.guardianCertificationChanged(guardian, isCertified);\r\n    }\r\n\r\n    /*\r\n     * Contracts topology / registry interface\r\n     */\r\n\r\n    IElections electionsContract;\r\n    \r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() external override {\r\n        electionsContract = IElections(getElectionsContract());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"GuardianCertificationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"RegistryManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardianCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRegistryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"newContractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"setGuardianCertification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"}],\"name\":\"setRegistryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"transferRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Certification","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d859701c81119ab12a1e62af6270ad2ae05c7ab3000000000000000000000000f1fd5233e60e7ef797025fe9dd066d60d59bcb92","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cdf2acc71998df6d63f7cfd057868e2d379be888b40407c19d6468fab0e22e32"}]}