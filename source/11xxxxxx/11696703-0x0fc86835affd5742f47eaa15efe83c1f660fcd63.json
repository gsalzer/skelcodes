{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// import \"@openzeppelin/contracts/token/IERC20.sol\";\r\ncontract Accounting is Ownable {\r\n\r\n    event onSubscribe(address indexed account, string nick, uint addSecs, uint activeTill);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        address _address;\r\n        string _nick;\r\n        uint _activeTill;\r\n        bool _superVIP;\r\n    }\r\n\r\n    struct Plan {\r\n        uint _minAddSec;\r\n        uint _pricePerSec;\r\n    }\r\n\r\n\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n\r\n\r\n    User[] public _users;\r\n    Plan[] public _plans;\r\n\r\n    address public _token;\r\n    address public _treasure;\r\n\r\n    mapping (address => uint256) public _aindexes;\r\n    mapping (string => uint256) public _nindexes;\r\n\r\n\r\n    constructor () public {\r\n        _users.push(User(address(0x0), \"\", 0, false));\r\n    }\r\n\r\n    function setupToken(address token) public onlyOwner {\r\n        _token = token;\r\n    }\r\n\r\n    function setupTreasure(address treasure) public onlyOwner {\r\n        _treasure = treasure;\r\n    }\r\n\r\n    function setupPlansAmount(uint n) public onlyOwner {\r\n        delete _plans;\r\n        for (uint i = 0; i < n; i++) {\r\n            _plans.push();\r\n        }\r\n    }\r\n\r\n    function getPlansAmount() public view returns (uint r) {\r\n        r = _plans.length;\r\n    }\r\n\r\n    function setupPlan(uint idx, uint pricePerSec, uint minAddSec) public onlyOwner {\r\n        _plans[idx]._minAddSec = minAddSec;\r\n        _plans[idx]._pricePerSec = pricePerSec;\r\n    }\r\n\r\n    function _safeTransfer(address from, address to, uint value) private {\r\n        require(_token != address(0x0));\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function getUsersAmount() public view returns (uint r) {\r\n        r = _users.length;\r\n    }\r\n\r\n\r\n    function getNick(address account) public view returns (string memory) {\r\n    \tuint idx = _aindexes[account];\r\n    \treturn _users[idx]._nick;\r\n    }\r\n\r\n    function getAccount(string memory nick) public view returns (address) {\r\n        uint idx = _nindexes[nick];\r\n        return _users[idx]._address;\r\n    }\r\n\r\n    function getActiveTill(address account) public view returns (uint) {\r\n    \tuint idx = _aindexes[account];\r\n    \treturn _users[idx]._activeTill;\r\n    }\r\n\r\n    function getActiveTillByNick(string memory nick) public view returns (uint) {\r\n        uint idx = _nindexes[nick];\r\n        return _users[idx]._activeTill;\r\n    }\r\n\r\n    function _addTime(User storage user, uint addSecs) private  {\r\n        if (user._activeTill < now) {\r\n            user._activeTill = now;\r\n        }\r\n        user._activeTill = user._activeTill.add(addSecs);\r\n    }\r\n\r\n    function _stringsEqual(string storage _a, string memory _b) view internal returns (bool) {\r\n        bytes storage a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        if (a.length != b.length)\r\n            return false;\r\n\r\n        for (uint i = 0; i < a.length; i++)\r\n            if (a[i] != b[i])\r\n                return false;\r\n        return true;\r\n    }\r\n\r\n    function _setupNick(User storage user, string memory nick) private {\r\n        assert(user._address != address(0x0)); //not default User\r\n        if (_stringsEqual(user._nick, nick)) {\r\n            return;\r\n        }\r\n\r\n        require(_nindexes[nick] == 0, \"Nick is in use\");\r\n        uint idx = _aindexes[user._address];\r\n\r\n        if (bytes(user._nick).length > 0) {\r\n            assert(_nindexes[user._nick] == idx); //indexes is consistent\r\n            delete _nindexes[user._nick];\r\n        }\r\n\r\n        user._nick = nick;\r\n        _nindexes[nick] = idx;\r\n    }\r\n\r\n    function _setUser(address account, string memory nick, uint addSecs) private {\r\n        assert(account != address(0x0));\r\n\r\n        uint idx = _aindexes[account];\r\n\r\n        if (idx == 0) {\r\n            idx = _users.length;\r\n            _users.push(User(account, \"\", 0, false));\r\n            _aindexes[account] = idx;\r\n        }\r\n\r\n        User storage user = _users[idx];\r\n        _addTime(user, addSecs);\r\n\r\n        if (bytes(nick).length > 0)\r\n            _setupNick(user, nick);\r\n\r\n        emit onSubscribe(account, user._nick, addSecs, user._activeTill);\r\n    }\r\n\r\n    function adminSetUser(address account, string memory nick, uint addSecs) public onlyOwner {\r\n        require(account != address(0x0));\r\n        _setUser(account, nick, addSecs);\r\n    }\r\n\r\n    function checkPlans() public view {\r\n        uint prevMinAddSec = 0;\r\n        uint prevPricePerSec = 0;\r\n        for (uint i = 0; i < _plans.length; i++) {\r\n            require(i == _plans.length-1 || _plans[i]._minAddSec > 0);\r\n            require(prevMinAddSec == 0 || _plans[i]._minAddSec < prevMinAddSec);\r\n            require(_plans[i]._pricePerSec > prevPricePerSec);\r\n            prevPricePerSec = _plans[i]._pricePerSec;\r\n            prevMinAddSec = _plans[i]._minAddSec;\r\n        }\r\n    }\r\n\r\n    function getPriceForPlan(uint addSecs) public view returns (uint) {\r\n        require(_plans.length > 0);\r\n        checkPlans();\r\n\r\n        uint n = _plans.length-1;\r\n\r\n        if (addSecs == 0) {\r\n            return _plans[n]._pricePerSec;\r\n        }\r\n\r\n        for (uint i = 0; i < n; i++) {\r\n            if (addSecs >= _plans[i]._minAddSec) {\r\n                return _plans[i]._pricePerSec;\r\n            }\r\n        }\r\n        return _plans[n]._pricePerSec;\r\n    }\r\n\r\n\r\n    function subscribe(string memory nick, uint256 addSecs) public {\r\n\r\n        address account = msg.sender;\r\n        require(account != address(0x0));\r\n        require(_treasure != address(0x0));\r\n\r\n        uint pricePerSec = getPriceForPlan(addSecs);\r\n        uint amount = addSecs.mul(pricePerSec);\r\n\r\n        if (amount > 0) {\r\n            _safeTransfer(account, _treasure, amount);\r\n        }\r\n\r\n        // emit LogSetOwner(owner);\r\n\r\n        _setUser(account, nick, addSecs);\r\n    }\r\n\r\n\r\n    function changeNick(string memory nick) public {\r\n        address account = msg.sender;\r\n        require(account != address(0x0));\r\n        require(bytes(nick).length > 0);\r\n        uint idx = _aindexes[account];\r\n        require(idx > 0);\r\n        _setupNick(_users[idx], nick);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addSecs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeTill\",\"type\":\"uint256\"}],\"name\":\"onSubscribe\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_aindexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_nindexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAddSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasure\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nick\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_activeTill\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_superVIP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"addSecs\",\"type\":\"uint256\"}],\"name\":\"adminSetUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"}],\"name\":\"changeNick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPlans\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveTill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"}],\"name\":\"getActiveTillByNick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNick\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlansAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addSecs\",\"type\":\"uint256\"}],\"name\":\"getPriceForPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddSec\",\"type\":\"uint256\"}],\"name\":\"setupPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setupPlansAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setupToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasure\",\"type\":\"address\"}],\"name\":\"setupTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nick\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"addSecs\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Accounting","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38efa511dabc88416111ff583a801ea102a8f928f7a8a0562e981a8af817bc15"}]}