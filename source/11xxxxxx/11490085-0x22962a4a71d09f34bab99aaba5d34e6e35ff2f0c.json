{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Smarts.sol\r\n\r\npragma solidity 0.6.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract Smarts is Ownable, IERC20 {\r\n\r\n\tusing SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _addressesWithFee;\r\n    address public _feescollector;\r\n    uint256 public _fee;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    bool public releasedForTransfer;\r\n\r\n\tevent Issue(address recepient, uint amount);\r\n\r\n    constructor () public {\r\n        _name = \"Smarts Finance\";\r\n        _symbol = \"SMAT\";\r\n        _decimals = 18;\r\n        _feescollector = msg.sender;\r\n        _fee = 50;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function setFee(uint256 amount) external onlyOwner() {\r\n        _fee = amount;\r\n    }\r\n\r\n    function changeFeeCollector(address addr) external onlyOwner() {\r\n        _feescollector = addr;\r\n    }\r\n\r\n    function addAddressForFee(address addr) external onlyOwner() {\r\n        _addressesWithFee[addr] = true;\r\n    }\r\n\r\n    function removeAddressForFee(address addr) external onlyOwner() {\r\n        _addressesWithFee[addr] = false;\r\n    }\r\n\r\n    function release() public onlyOwner() {\r\n        releasedForTransfer = true;\r\n    }\r\n\r\n    function issue(address _recepient, uint256 _amount) public onlyOwner() {\r\n        require(!releasedForTransfer, \"SMATS: Not released for transfer!\");\r\n        _balances[_recepient] = _balances[_recepient].add(_amount);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        emit Issue(_recepient, _amount);\r\n        emit Transfer(address(0), _recepient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\trequire(releasedForTransfer, \"SMATS: Not released for transfer!\");\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\trequire(releasedForTransfer, \"SMATS: Not released for transfer!\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\t/**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (_addressesWithFee[sender] || _addressesWithFee[recipient]) {\r\n\r\n            uint256 feeamount = amount.mul(_fee).div(10000);\r\n            uint256 remamount = amount.sub(feeamount);\r\n            _balances[_feescollector] = _balances[_feescollector].add(feeamount);\r\n            _balances[recipient] = _balances[recipient].add(remamount);\r\n\r\n            emit Transfer(sender, _feescollector, feeamount);\r\n            emit Transfer(sender, recipient, remamount);\r\n        } else {\r\n\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/SecondSale.sol\r\n\r\npragma solidity 0.6.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract SecondSale is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Crowdsale participants\r\n    mapping(address => uint256) participants;\r\n\r\n    // SMATS per ETH price\r\n    uint256 buyPrice;\r\n    uint256 minimalGoal;\r\n    uint256 hardCap;\r\n\r\n    Smarts crowdsaleToken;\r\n\r\n    uint256 tokenUnit = (10 ** 18);\r\n\r\n    event SellToken(address recepient, uint tokensSold, uint value);\r\n\r\n    address payable fundingAddress;\r\n    uint256 startTimestamp;\r\n    uint256 endTimestamp;\r\n    bool started;\r\n    bool stopped;\r\n    uint256 totalCollected;\r\n    uint256 totalSold;\r\n\r\n\r\n    /**\r\n    Max Supply - 1,000,000 SMATS\r\n    Token Sale \r\n    159,000 for Presale      (1ETH = 125 SMATS)  (8000000000000000 wei) (0,008 eth)\r\n    */\r\n\r\n    constructor(\r\n        Smarts _token\r\n    ) public {\r\n        minimalGoal = 500000000000000000000;\r\n        hardCap = 1272000000000000000000;\r\n        buyPrice = 8000000000000000;\r\n        crowdsaleToken = _token;\r\n    }\r\n\r\n    // returns address of the erc20 smarts token\r\n    function getToken()\r\n    public\r\n    view\r\n    returns(address)\r\n    {\r\n        return address(crowdsaleToken);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value >= 200000000000000000, \"Min 0.2 eth\");\r\n        require(msg.value <= 20000000000000000000, \"Max 20 eth\");\r\n        sellTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    // sels the project's token to buyers\r\n    function sellTokens(address payable _recepient, uint256 _value) internal\r\n        nonReentrant\r\n        hasBeenStarted()     // crowdsale started\r\n        hasntStopped()       // wasn't cancelled by owner\r\n        whenCrowdsaleAlive() // in active state\r\n    {\r\n        uint256 newTotalCollected = totalCollected.add(_value);\r\n\r\n        if (hardCap < newTotalCollected) {\r\n            // don't sell anything above the hard cap\r\n            uint256 refund = newTotalCollected.sub(hardCap);\r\n            uint256 diff = _value.sub(refund);\r\n\r\n            // send the ETH part which exceeds the hard cap back to the buyer\r\n            _recepient.transfer(refund);\r\n            _value = diff;\r\n            newTotalCollected = totalCollected.add(_value);\r\n        }\r\n\r\n        // token amount as per price\r\n        uint256 tokensSold = (_value).div(buyPrice).mul(tokenUnit);\r\n\r\n\r\n        // transfer tokens for this buyer\r\n        require(crowdsaleToken.transfer(_recepient, tokensSold), \"Error transfering\");\r\n\r\n        emit SellToken(_recepient, tokensSold, _value);\r\n\r\n        // remember the buyer so he/she/it may refund its ETH if crowdsale failed\r\n        participants[_recepient] = participants[_recepient].add(_value);\r\n\r\n        // update total ETH collected\r\n        totalCollected = totalCollected.add(_value);\r\n\r\n        // update total tokens sold\r\n        totalSold = totalSold.add(tokensSold);\r\n    }\r\n\r\n    // project's owner withdraws ETH funds to the funding address upon successful crowdsale\r\n    function withdraw(\r\n        uint256 _amount // can be done partially\r\n    )\r\n    external\r\n    nonReentrant\r\n    onlyOwner() // project's owner\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale completed successfully\r\n    {\r\n        require(_amount <= address(this).balance, \"Not enough funds\");\r\n        fundingAddress.transfer(_amount);\r\n    }\r\n\r\n    function burnUnsold()\r\n    external\r\n    nonReentrant\r\n    onlyOwner() // project's owner\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale completed successfully\r\n    {\r\n        crowdsaleToken.burn(crowdsaleToken.balanceOf(address(this)));\r\n    }\r\n\r\n    // backers refund their ETH if the crowdsale was cancelled or has failed\r\n    function refund()\r\n    external\r\n    nonReentrant\r\n    {\r\n        // either cancelled or failed\r\n        require(stopped || isFailed(), \"Not cancelled or failed\");\r\n\r\n        uint256 amount = participants[msg.sender];\r\n\r\n        // prevent from doing it twice\r\n        require(amount > 0, \"Only once\");\r\n        participants[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n  // cancels crowdsale\r\n  function stop() public onlyOwner() hasntStopped()  {\r\n    // we can stop only not started and not completed crowdsale\r\n    if (started) {\r\n      require(!isFailed());\r\n      require(!isSuccessful());\r\n    }\r\n    stopped = true;\r\n  }\r\n\r\n  // called by CrowdsaleController to setup start and end time of crowdfunding process\r\n  // as well as funding address (where to transfer ETH upon successful crowdsale)\r\n  function start(\r\n    uint256 _startTimestamp,\r\n    uint256 _endTimestamp,\r\n    address payable _fundingAddress\r\n  )\r\n    public\r\n    onlyOwner()   // manager is CrowdsaleController instance\r\n    hasntStarted()  // not yet started\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n  {\r\n    require(_fundingAddress != address(0));\r\n\r\n    // range must be sane\r\n    require(_endTimestamp > _startTimestamp);\r\n\r\n    startTimestamp = _startTimestamp;\r\n    endTimestamp = _endTimestamp;\r\n    fundingAddress = _fundingAddress;\r\n\r\n    // now crowdsale is considered started, even if the current time is before startTimestamp\r\n    started = true;\r\n  }\r\n\r\n  // must return true if crowdsale is over, but it failed\r\n  function isFailed()\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // crowdsale period has finished\r\n      block.timestamp >= endTimestamp &&\r\n\r\n      // but collected ETH is below the required minimum\r\n      totalCollected < minimalGoal\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale is active (i.e. the token can be bought)\r\n  function isActive()\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // hard cap wasn't reached yet\r\n      totalCollected < hardCap &&\r\n\r\n      // and current time is within the crowdfunding period\r\n      block.timestamp >= startTimestamp &&\r\n      block.timestamp < endTimestamp\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale completed successfully\r\n  function isSuccessful()\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // either the hard cap is collected\r\n      totalCollected >= hardCap ||\r\n\r\n      // ...or the crowdfunding period is over, but the minimum has been reached\r\n      (block.timestamp >= endTimestamp && totalCollected >= minimalGoal)\r\n    );\r\n  }\r\n\r\n  modifier whenCrowdsaleAlive() {\r\n    require(isActive());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleFailed() {\r\n    require(isFailed());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleSuccessful() {\r\n    require(isSuccessful());\r\n    _;\r\n  }\r\n\r\n  modifier hasntStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasntStarted() {\r\n    require(!started);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStarted() {\r\n    require(started);\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Smarts\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_fundingAddress\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SecondSale","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000087b46664fec8d72bd651468b96f72c51405eceb7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://684fac6e7f24c60358d8dfd1c38baa1e4966dc2360c01b5ebcacd1925d675c7f"}]}