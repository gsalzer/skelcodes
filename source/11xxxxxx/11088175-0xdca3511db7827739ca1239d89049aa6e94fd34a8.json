{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Returns the lowest value of the two integers\r\n\t*/\r\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction percentageOf(uint256 total, uint256 percentage) internal pure returns (uint256) {\r\n\t\treturn div(mul(total, percentage), 100);\r\n\t}\r\n\r\n\tfunction getPercentage(uint256 total, uint256 piece) internal pure returns (uint256) {\r\n\t\treturn div(piece, total);\r\n\t}\r\n}\r\n\r\ninterface DMHToken {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\ncontract PresaleDMH {\r\n  DMHToken public token;\r\n  address payable public ceoAddress;\r\n  uint256 public tokenPrice = 0;\r\n  uint256 public multiplier = 10 * 1e17;\r\n  uint256 public buyLimit = 0;\r\n\r\n  mapping (address => uint256) public boughtTokens;\r\n\r\n  event Buy (uint256 amount, uint256 tokens);\r\n\r\n  constructor (address _token) public {\r\n    token = DMHToken(_token);\r\n    ceoAddress = msg.sender;\r\n    buyLimit = SafeMath.mul(5000, multiplier);\r\n    tokenPrice = 500 * 1e6;\r\n  }\r\n\r\n  modifier ceoOnly {\r\n    require(msg.sender == ceoAddress, \"Unauthorized\");\r\n    _;\r\n  }\r\n\r\n  function withdraw (uint256 amount) external ceoOnly {\r\n    require(amount <= address(this).balance, \"Insufficient funds\");\r\n\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function withdrawDMH (uint256 amount) external ceoOnly {\r\n    require(amount <= token.balanceOf(address(this)), \"Insufficient funds\");\r\n\r\n    token.transfer(msg.sender, amount);\r\n  }\r\n\r\n  function getTokenBalance () external view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n\r\n  function setTokenPrice (uint256 price) external ceoOnly {\r\n    require(price >= 0, \"Invalid price\");\r\n\r\n    tokenPrice = price;\r\n  }\r\n\r\n  function setBuyLimit (uint256 limit) external ceoOnly {\r\n    require(limit >= 0, \"Invalid limit\");\r\n\r\n    buyLimit = SafeMath.mul(limit, multiplier);\r\n  }\r\n\r\n  function calculateBuy (uint256 amount) public view returns (uint256) {\r\n    if (tokenPrice <= 0 || amount <= 0) {\r\n      return 0;\r\n    }\r\n    uint256 value = SafeMath.mul(amount, multiplier);\r\n    if (value < tokenPrice) {\r\n      return 0;\r\n    }\r\n    return SafeMath.div(value, tokenPrice);\r\n  }\r\n\r\n  function buy () external payable {\r\n    require(tokenPrice > 0, \"Token price is zero\");\r\n    require(msg.value > 0, \"Invalid amount\");\r\n\r\n    uint256 tokens = calculateBuy(msg.value);\r\n    uint256 newBoughtTokens = SafeMath.add(tokens, boughtTokens[msg.sender]);\r\n\r\n    assert(tokens > 0);\r\n    assert(newBoughtTokens <= buyLimit);\r\n\r\n    boughtTokens[msg.sender] = newBoughtTokens;\r\n    token.transfer(msg.sender, tokens);\r\n\r\n    emit Buy(msg.value, tokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDMH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"}]","ContractName":"PresaleDMH","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dfd41aa1a339331e06e06402e58d4a6f30c3a944","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://656f84cc7063639de0fc033c7456573db666ccae8f14dcf8015fba857b6acc78"}]}