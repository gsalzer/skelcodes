{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.1;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function burn(uint256 value) external returns (bool);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ncontract PoolRewardToken {\r\n    mapping (address => uint256) public _balanceOf;\r\n\r\n    string public constant name = \"MalwareChain DAO\";\r\n    string public constant symbol = \"MDAO\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address account) public view returns (uint256 value) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(_balanceOf[msg.sender] >= value);\r\n\r\n        _balanceOf[msg.sender] -= value;  // deduct from sender's balance\r\n        _balanceOf[to] += value;          // add to recipient's balance\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferMultiple(address[] memory to, uint256 value) public returns (bool success) {\r\n        require(_balanceOf[msg.sender] >= value);\r\n\r\n        _balanceOf[msg.sender] -= value;\r\n        value /= to.length;\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _balanceOf[to[i]] += value;\r\n            emit Transfer(msg.sender, to[i], value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        require(value <= _balanceOf[from]);\r\n        require(value <= _allowances[from][msg.sender]);\r\n\r\n        _balanceOf[from] -= value;\r\n        _balanceOf[to] += value;\r\n        _allowances[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 value) internal {\r\n        totalSupply += value;\r\n        _balanceOf[to] += value;\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function burn(uint256 value) public returns (bool success) {\r\n        require(value <= _balanceOf[msg.sender]);\r\n        totalSupply -= value;\r\n        _balanceOf[msg.sender] -= value;\r\n        return true;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner_;\r\n\r\n    constructor() {\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner_)\r\n            _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) owner_ = newOwner;\r\n    }\r\n}\r\n\r\ncontract MiningPool is PoolRewardToken, Ownable {\r\n    uint8 public constant BLOCK_STEP = 10;\r\n    uint256 public constant BLOCK_FEE_PERCENT = 100000;\r\n\r\n    struct Investor {\r\n        uint256 depositMALW;\r\n        uint256 depositLPETH;\r\n        uint256 depositLPUSDT;\r\n        uint256 lastZeroPtr;\r\n        bool initialized;\r\n    }\r\n\r\n    struct BlockInfo {\r\n        uint256 totalDepositsMALW;\r\n        uint256 totalDepositsLPETH;\r\n        uint256 totalDepositsLPUSDT;\r\n        uint256 lpETHPrice;\r\n        uint256 lpUSDTPrice;\r\n        uint256 blockLength;\r\n        uint256 blockReward;\r\n        uint256 lpPart;\r\n    }\r\n\r\n    uint256 public BLOCK_REWARD = 10**18 * 400;\r\n    uint256 public LP_PART = 10**4 * 80;\r\n    uint256 public deployBlock;\r\n    uint256 public lastRecordedBlock;\r\n    uint256 public totalDepositsMALW;\r\n    uint256 public totalDepositsLPETH;\r\n    uint256 public totalDepositsLPUSDT;\r\n    BlockInfo[1000000] public history;\r\n    uint256 public arrayPointer;\r\n    mapping (address => Investor) public investors;\r\n    bool public miningFinished = false;\r\n    uint256 public masternodeRewardsBalance;\r\n    uint256 public feesBalance;\r\n    mapping (uint256 => uint256) public masternodeRewardsClaimedNonces;\r\n\r\n    IERC20 public _tokenMALW;\r\n    IERC20 public _tokenLPETH;\r\n    IERC20 public _tokenLPUSDT;\r\n\r\n    event Deposit(address indexed investor, uint256 valueMALW, uint256 valueLPETH, uint256 valueLPUSDT);\r\n    event Harvest(address indexed investor, uint256 value);\r\n    event Withdraw(address indexed investor, uint256 valueMALW, uint256 valueLPETH, uint256 valueLPUSDT);\r\n    event MasternodeReward(address indexed owner, uint256 value, uint256 nonce);\r\n    event FeesSpent(address indexed to, uint256 value);\r\n    event RewardChanged(uint256 newValue);\r\n    event LPPartChanged(uint256 newValue);\r\n\r\n    constructor() {\r\n        deployBlock = block.number;\r\n        emit RewardChanged(BLOCK_REWARD);\r\n    }\r\n\r\n    function setMALWToken(address token) public {\r\n        require(address(_tokenMALW) == address(0), \"Address was already set\");\r\n        _tokenMALW = IERC20(token);\r\n    }\r\n\r\n    function setLPETHToken(address token) public {\r\n        require(address(_tokenLPETH) == address(0), \"Address was already set\");\r\n        _tokenLPETH = IERC20(token);\r\n    }\r\n\r\n    function setLPUSDTToken(address token) public {\r\n        require(address(_tokenLPUSDT) == address(0), \"Address was already set\");\r\n        _tokenLPUSDT = IERC20(token);\r\n    }\r\n\r\n    function setBlockReward(uint256 value) public onlyOwner {\r\n        recordHistory();\r\n        BLOCK_REWARD = value;\r\n        emit RewardChanged(value);\r\n    }\r\n\r\n    function setLPPart(uint256 value) public onlyOwner {  // 1% = 10000\r\n        require(value < 90 * 10**4, \"Maximum value is 900000 (90%)\");\r\n        recordHistory();\r\n        LP_PART = value;\r\n        emit LPPartChanged(value);\r\n    }\r\n\r\n    function currentBlock() public view returns (uint256) {\r\n        return (block.number - deployBlock) / BLOCK_STEP;\r\n    }\r\n\r\n    function recordHistoryNeeded() public view returns (bool) {\r\n        return !miningFinished && lastRecordedBlock < currentBlock();\r\n    }\r\n\r\n    function getBlockTotalDepositsMALW(uint256 blk) public view returns (uint256) {\r\n        if (blk >= arrayPointer)\r\n            return totalDepositsMALW;\r\n        return history[blk].totalDepositsMALW;\r\n    }\r\n\r\n    function getBlockTotalDepositsLPETH(uint256 blk) public view returns (uint256) {\r\n        if (blk >= arrayPointer)\r\n            return totalDepositsLPETH;\r\n        return history[blk].totalDepositsLPETH;\r\n    }\r\n\r\n    function getBlockTotalDepositsLPUSDT(uint256 blk) public view returns (uint256) {\r\n        if (blk >= arrayPointer)\r\n            return totalDepositsLPUSDT;\r\n        return history[blk].totalDepositsLPUSDT;\r\n    }\r\n\r\n    function getBlockLPETHPrice(uint256 blk) public view returns (uint256) {\r\n        if (blk >= arrayPointer)\r\n            return getCurrentLPETHPrice();\r\n        return history[blk].lpETHPrice;\r\n    }\r\n\r\n    function getBlockLPUSDTPrice(uint256 blk) public view returns (uint256) {\r\n        if (blk >= arrayPointer)\r\n            return getCurrentLPUSDTPrice();\r\n        return history[blk].lpUSDTPrice;\r\n    }\r\n\r\n    function getCurrentLPETHPrice() public view returns (uint256) {\r\n        if (address(_tokenLPETH) == address(0))\r\n            return 0;\r\n        return _tokenLPETH.totalSupply() > 0 ? getReserve(_tokenLPETH) / _tokenLPETH.totalSupply() : 0;  // both MALWDAO and UNI-V2 have 18 decimals\r\n    }\r\n\r\n    function getCurrentLPUSDTPrice() public view returns (uint256) {\r\n        if (address(_tokenLPUSDT) == address(0))\r\n            return 0;\r\n        return _tokenLPUSDT.totalSupply() > 0 ? getReserve(_tokenLPUSDT) / _tokenLPUSDT.totalSupply() : 0;  // both MALWDAO and UNI-V2 have 18 decimals\r\n    }\r\n\r\n    function getRewardDistribution(uint256 blk) public view returns (uint256 malw, uint256 lp) {\r\n        if (blk > 787500) {  // 157500000 MALWDAO limit\r\n            return (0, 0);\r\n        }\r\n        lp = (getBlockTotalDepositsLPETH(blk) + getBlockTotalDepositsLPUSDT(blk)) <= 0 ? 0 : getLPPart(blk);\r\n        malw = getBlockTotalDepositsMALW(blk) <= 0 ? 0 : 1000000 - lp - BLOCK_FEE_PERCENT;\r\n    }\r\n\r\n    function recordHistory() public returns (bool) {\r\n        if (recordHistoryNeeded()) {\r\n            _recordHistory();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _recordHistory() internal {\r\n        // miningFinished check is in recordHistoryNeeded();\r\n\r\n        uint256 currentBlk = currentBlock();\r\n\r\n        if (currentBlk > 787500) {\r\n            currentBlk = 787500;\r\n            miningFinished = true;\r\n        }\r\n\r\n        uint256 lpETHPrice = getCurrentLPETHPrice();\r\n        uint256 lpUSDTPrice = getCurrentLPUSDTPrice();\r\n\r\n        history[arrayPointer].totalDepositsMALW = totalDepositsMALW;\r\n        history[arrayPointer].totalDepositsLPETH = totalDepositsLPETH;\r\n        history[arrayPointer].totalDepositsLPUSDT = totalDepositsLPUSDT;\r\n        history[arrayPointer].lpETHPrice = lpETHPrice;\r\n        history[arrayPointer].lpUSDTPrice = lpUSDTPrice;\r\n        history[arrayPointer].blockLength = currentBlk - lastRecordedBlock;\r\n        history[arrayPointer].blockReward = BLOCK_REWARD;\r\n        history[arrayPointer].lpPart = LP_PART;\r\n\r\n        masternodeRewardsBalance += BLOCK_REWARD / 20 * (currentBlk - lastRecordedBlock);  // 5%\r\n        feesBalance += BLOCK_REWARD / 20 * (currentBlk - lastRecordedBlock);  // 5%\r\n\r\n        arrayPointer++;\r\n        lastRecordedBlock = currentBlk;\r\n    }\r\n\r\n    function getReserve(IERC20 token) internal view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = token.getReserves();\r\n        return token.token0() == address(this) ? uint256(reserve0) : uint256(reserve1);\r\n    }\r\n\r\n    function getBlockLength(uint256 blk) internal view returns (uint256) {\r\n        if (blk >= arrayPointer) {\r\n            return currentBlock() - lastRecordedBlock;\r\n        }\r\n        return history[blk].blockLength;\r\n    }\r\n\r\n    function getBlockReward(uint256 blk) internal view returns (uint256) {\r\n        if (blk >= arrayPointer) {\r\n            return BLOCK_REWARD;\r\n        }\r\n        return history[blk].blockReward;\r\n    }\r\n\r\n    function getLPPart(uint256 blk) internal view returns (uint256) {\r\n        if (blk >= arrayPointer) {\r\n            return LP_PART;\r\n        }\r\n        return history[blk].lpPart;\r\n    }\r\n\r\n    function getRewardSum(address sender) public view returns (uint256) {\r\n        if (!investors[sender].initialized || !canHarvest(sender))\r\n            return 0;\r\n\r\n        uint256 reward = 0;\r\n\r\n        for (uint256 i = investors[sender].lastZeroPtr; i <= arrayPointer; i++) {\r\n            (uint256 malwPercent, uint256 lpPercent) = getRewardDistribution(i);\r\n            uint256 lpETHPrice = getBlockLPETHPrice(i);\r\n            uint256 lpUSDTPrice = getBlockLPUSDTPrice(i);\r\n            uint256 totalNormalizedLP = lpETHPrice * getBlockTotalDepositsLPETH(i) + lpUSDTPrice * getBlockTotalDepositsLPUSDT(i);\r\n            uint256 userNormalizedLP = lpETHPrice * investors[sender].depositLPETH + lpUSDTPrice * investors[sender].depositLPUSDT;\r\n\r\n            if (investors[sender].depositMALW > 0)\r\n                reward += getBlockReward(i) * getBlockLength(i) * investors[sender].depositMALW / getBlockTotalDepositsMALW(i) * malwPercent / 1000000;\r\n            if (userNormalizedLP > 0)\r\n                reward += getBlockReward(i) * getBlockLength(i) * userNormalizedLP / totalNormalizedLP * lpPercent / 1000000;\r\n        }\r\n\r\n        return reward;\r\n    }\r\n\r\n    function deposit(uint256 valueMALW, uint256 valueLPETH, uint256 valueLPUSDT) public {\r\n        require(valueMALW + valueLPETH + valueLPUSDT > 0 &&\r\n                valueMALW >= 0 &&\r\n                valueLPETH >= 0 &&\r\n                valueLPUSDT >= 0, \"Invalid arguments\");\r\n\r\n        if (canHarvest(msg.sender))\r\n            harvestReward();  // history is recorded while harvesting\r\n        else\r\n            recordHistory();\r\n\r\n        if (valueMALW > 0) {\r\n            require(_tokenMALW.allowance(msg.sender, address(this)) >= valueMALW, \"Insufficient MALW allowance\");\r\n            investors[msg.sender].depositMALW += valueMALW;\r\n            totalDepositsMALW += valueMALW;\r\n            _tokenMALW.transferFrom(msg.sender, address(this), valueMALW);\r\n        }\r\n\r\n        if (valueLPETH > 0) {\r\n            require(_tokenLPETH.allowance(msg.sender, address(this)) >= valueLPETH, \"Insufficient LPETH allowance\");\r\n            investors[msg.sender].depositLPETH += valueLPETH;\r\n            totalDepositsLPETH += valueLPETH;\r\n            _tokenLPETH.transferFrom(msg.sender, address(this), valueLPETH);\r\n        }\r\n\r\n        if (valueLPUSDT > 0) {\r\n            require(_tokenLPUSDT.allowance(msg.sender, address(this)) >= valueLPUSDT, \"Insufficient LPUSDT allowance\");\r\n            investors[msg.sender].depositLPUSDT += valueLPUSDT;\r\n            totalDepositsLPUSDT += valueLPUSDT;\r\n            _tokenLPUSDT.transferFrom(msg.sender, address(this), valueLPUSDT);\r\n        }\r\n\r\n        investors[msg.sender].initialized = true;\r\n        investors[msg.sender].lastZeroPtr = arrayPointer;\r\n        emit Deposit(msg.sender, valueMALW, valueLPETH, valueLPUSDT);\r\n    }\r\n\r\n    function canHarvest(address sender) public view returns (bool) {\r\n        return investors[sender].depositMALW + investors[sender].depositLPETH + investors[sender].depositLPUSDT > 0;\r\n    }\r\n\r\n    function harvestReward() public returns (uint256) {\r\n        require(canHarvest(msg.sender));\r\n\r\n        recordHistory();\r\n\r\n        uint256 reward = getRewardSum(msg.sender);\r\n        if (reward > 0)\r\n            mint(msg.sender, reward);\r\n        investors[msg.sender].lastZeroPtr = arrayPointer;\r\n        emit Harvest(msg.sender, reward);\r\n\r\n        return reward;\r\n    }\r\n\r\n    function harvestRewardAndWithdraw() public returns (uint256, uint256, uint256, uint256) {\r\n        uint256 reward = harvestReward();\r\n        uint256 depositMALW = investors[msg.sender].depositMALW;\r\n        uint256 depositLPETH = investors[msg.sender].depositLPETH;\r\n        uint256 depositLPUSDT = investors[msg.sender].depositLPUSDT;\r\n\r\n        if (depositMALW > 0) {\r\n            totalDepositsMALW -= depositMALW;\r\n            investors[msg.sender].depositMALW = 0;\r\n            _tokenMALW.transfer(msg.sender, depositMALW);\r\n        }\r\n\r\n        if (depositLPETH > 0) {\r\n            totalDepositsLPETH -= depositLPETH;\r\n            investors[msg.sender].depositLPETH = 0;\r\n            _tokenLPETH.transfer(msg.sender, depositLPETH);\r\n        }\r\n\r\n        if (depositLPUSDT > 0) {\r\n            totalDepositsLPUSDT -= depositLPUSDT;\r\n            investors[msg.sender].depositLPUSDT = 0;\r\n            _tokenLPUSDT.transfer(msg.sender, depositLPUSDT);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, depositMALW, depositLPETH, depositLPUSDT);\r\n\r\n        return (reward, depositMALW, depositLPETH, depositLPUSDT);\r\n    }\r\n\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    function claimMasternodeReward(uint256 amount, uint256 nonce, bytes memory sig) public {\r\n        require(masternodeRewardsClaimedNonces[nonce] == 0, \"This signature is already used\");\r\n\r\n        recordHistory();\r\n\r\n        require(amount <= masternodeRewardsBalance, \"Insufficient reward funds\");\r\n\r\n        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, address(this))));\r\n        require(recoverSigner(message, sig) == owner_);\r\n\r\n        masternodeRewardsClaimedNonces[nonce] = amount;\r\n        _balanceOf[msg.sender] += amount;\r\n        masternodeRewardsBalance -= amount;\r\n        emit MasternodeReward(msg.sender, amount, nonce);\r\n    }\r\n\r\n    function sendFeeFunds(address to, uint256 amount) public onlyOwner {\r\n        require(feesBalance >= amount, \"Insufficient funds\");\r\n\r\n        _balanceOf[to] += amount;\r\n        feesBalance -= amount;\r\n        emit FeesSpent(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueMALW\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueLPETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueLPUSDT\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeesSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LPPartChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"MasternodeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueMALW\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueLPETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueLPUSDT\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_STEP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_PART\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenLPETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenLPUSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenMALW\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arrayPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claimMasternodeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueMALW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueLPETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueLPUSDT\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getBlockLPETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getBlockLPUSDTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getBlockTotalDepositsLPETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getBlockTotalDepositsLPUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getBlockTotalDepositsMALW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLPETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLPUSDTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"getRewardDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"malw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getRewardSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardAndWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositsMALW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositsLPETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositsLPUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUSDTPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpPart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositMALW\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLPETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLPUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastZeroPtr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecordedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masternodeRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"masternodeRewardsClaimedNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordHistoryNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendFeeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setLPETHToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLPPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setLPUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setMALWToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositsLPETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositsLPUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositsMALW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiningPool","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://283f373135a86e7f3536383df06a142e62a710435ddc6c9aec8bb88f0e48d700"}]}