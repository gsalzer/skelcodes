{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n//\r\n//   ██████  ██▓███   ██▓    ▄▄▄        ██████  ██░ ██ ▓█████ ▓█████▄       ██▓ ▒█████\r\n// ▒██    ▒ ▓██░  ██▒▓██▒   ▒████▄    ▒██    ▒ ▓██░ ██▒▓█   ▀ ▒██▀ ██▌     ▓██▒▒██▒  ██▒\r\n// ░ ▓██▄   ▓██░ ██▓▒▒██░   ▒██  ▀█▄  ░ ▓██▄   ▒██▀▀██░▒███   ░██   █▌     ▒██▒▒██░  ██▒\r\n//   ▒   ██▒▒██▄█▓▒ ▒▒██░   ░██▄▄▄▄██   ▒   ██▒░▓█ ░██ ▒▓█  ▄ ░▓█▄   ▌     ░██░▒██   ██░\r\n// ▒██████▒▒▒██▒ ░  ░░██████▒▓█   ▓██▒▒██████▒▒░▓█▒░██▓░▒████▒░▒████▓  ██▓ ░██░░ ████▓▒░\r\n// ▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░░ ▒░▓  ░▒▒   ▓▒█░▒ ▒▓▒ ▒ ░ ▒ ░░▒░▒░░ ▒░ ░ ▒▒▓  ▒  ▒▓▒ ░▓  ░ ▒░▒░▒░\r\n// ░ ░▒  ░ ░░▒ ░     ░ ░ ▒  ░ ▒   ▒▒ ░░ ░▒  ░ ░ ▒ ░▒░ ░ ░ ░  ░ ░ ▒  ▒  ░▒   ▒ ░  ░ ▒ ▒░\r\n// ░  ░  ░  ░░         ░ ░    ░   ▒   ░  ░  ░   ░  ░░ ░   ░    ░ ░  ░  ░    ▒ ░░ ░ ░ ▒\r\n//       ░               ░  ░     ░  ░      ░   ░  ░  ░   ░  ░   ░      ░   ░      ░ ░\r\n//    \r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\npragma solidity ^0.7.0;\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     * Counterpart to Solidity's `+` operator.\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     * Counterpart to Solidity's `-` operator.\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     * Counterpart to Solidity's `-` operator.\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     * Counterpart to Solidity's `*` operator.\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     * Requirements:\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     * Requirements:\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_constr, string memory symbol_constr) {\r\n        _name = name_constr;\r\n        _symbol = symbol_constr;\r\n        _decimals = 18;\r\n    }\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     * Requirements:\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     * Emits a {Transfer} event.\r\n     * Requirements:\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     * Requirements\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     * Requirements\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     * Emits an {Approval} event.\r\n     * Requirements:\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     * Calling conditions:\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\npragma solidity ^0.7.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// UniswapV2 Interfaces\r\npragma solidity ^0.7.0;\r\nabstract contract ERC20TransferLiquidityLock is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event LockLiquidity(uint256 tokenAmount, uint256 ethAmount);\r\n\r\n    address public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    // receive eth from uniswap swap\r\n    receive () external payable {}\r\n\r\n    // Locks liquidity to contract address and sends it to Uniswap Roueter\r\n    function lockLiquidity(uint256 _lockableSupply) private {\r\n        // lockable supply is the token balance of this contract\r\n        require(_lockableSupply <= balanceOf(address(this)), \"Requested lock amount higher than lockable balance\");\r\n        require(_lockableSupply != 0, \"Lock amount cannot be 0\");\r\n        // Loackable supply is stored on contract address - Lockable supply is split 50/50 and the half is converted to WETH\r\n        _lockableSupply = balanceOf(address(this));\r\n        uint256 amountToSwapForEth = _lockableSupply.div(2);\r\n        uint256 amountToAddLiquidity = _lockableSupply.sub(amountToSwapForEth);\r\n        // Needed in case contract already owns eth\r\n        uint256 ethBalanceBeforeSwap = address(this).balance;\r\n        swapTokensForEth(amountToSwapForEth);\r\n        uint256 ethReceived = address(this).balance.sub(ethBalanceBeforeSwap);\r\n        // Add liquidity to Uniswap\r\n        addLiquidity(amountToAddLiquidity, ethReceived);\r\n        emit LockLiquidity(amountToAddLiquidity, ethReceived);\r\n    }\r\n\r\n    // External util so anyone can provide locked liqudiity to Uniswap\r\n    function provideLiquidityToRouter() external {\r\n        // lock everything that is lockable\r\n        lockLiquidity(balanceOf(address(this)));\r\n    }\r\n    // From Uniswap Router - Swap tokens for WETH\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory uniswapPairPath = new address[](2);\r\n        uniswapPairPath[0] = address(this);\r\n        uniswapPairPath[1] = IUniswapV2Router02(uniswapV2Router).WETH();\r\n        _approve(address(this), uniswapV2Router, tokenAmount);\r\n        IUniswapV2Router02(uniswapV2Router)\r\n            .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                uniswapPairPath,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n    }\r\n    // Adds liquidity to Uniswap\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), uniswapV2Router, tokenAmount);\r\n        IUniswapV2Router02(uniswapV2Router)\r\n            .addLiquidityETH\r\n            {value:ethAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n    }\r\n    // Returns lockagle supply stored on contract address (in ERC20 Tokens)\r\n    function lockableSupply() external view returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n    // Returns the locked supply in Tokens\r\n    function lockedSupply() public view returns (uint256) {\r\n        uint256 uniswapBalance = balanceOf(uniswapV2Pair);\r\n        return uniswapBalance;\r\n    }\r\n}\r\n// Uniswap Router interface\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n// Uniswap Factory interface\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\n// Custom token - Splashed.io\r\npragma solidity ^0.7.1;\r\ncontract SPLASH is ERC20TransferLiquidityLock {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address[] internal stakeholders;\r\n    address[] internal holders;\r\n    address public stakingContract; \r\n\r\n    mapping(address => uint256) internal stakes;\r\n    mapping(address => uint256) internal rewards;\r\n    mapping(address => referral) private ReferralsOf;\r\n\r\n    bool private _mintingFinished = false;\r\n\r\n    uint256 private fee;\r\n\r\n    // Needed for referrer storage\r\n    struct referral\r\n    {\r\n        address myref;\r\n    }\r\n\r\n    // Burn function (from sender address)\r\n    function _burn(uint256 amount) private {\r\n        super._burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @param name Name of the token\r\n     * @param symbol A symbol to be used as ticker\r\n     * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\r\n     * @param cap Maximum number of tokens mintable\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 cap\r\n    )\r\n        ERC20(name, symbol)\r\n    {\r\n        _setupDecimals(decimals);\r\n        _mint(owner(), cap);\r\n        _mintingFinished=true;\r\n    }\r\n\r\n    // Set external addresses (Staking contract, uniswapV2Router and uniswapV2Pair) - immutable after setup\r\n    function setUniswapV2Router(address _uniswapV2Router) public onlyOwner {\r\n        require(uniswapV2Router == address(0), \"uniswapV2Router already set\");\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n    function setUniswapV2Pair(address _uniswapV2Pair) public onlyOwner {\r\n        require(uniswapV2Pair == address(0), \"uniswapV2Pair already set\");\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n    function setStakingContract(address _stakingContract) public onlyOwner {\r\n        require(stakingContract == address(0), \"StakingContract already set\");\r\n        stakingContract = _stakingContract;\r\n    }\r\n\r\n    // Stakes creation and management\r\n    function createStake(uint256 _stake)\r\n        public\r\n    {\r\n        super.transfer(stakingContract, _stake);\r\n        if(stakes[msg.sender] == 0) addStakeholder(msg.sender);\r\n        stakes[msg.sender] = stakes[msg.sender].add(_stake);\r\n    }\r\n    function stakeOf(address _stakeholder)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return stakes[_stakeholder];\r\n    }\r\n    function totalStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            _totalStakes = _totalStakes.add(stakes[stakeholders[s]]);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n    function totalHold()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalHold = 0;\r\n        for (uint256 s = 0; s < holders.length; s += 1){\r\n            _totalHold = _totalHold.add(balanceOf(holders[s]));\r\n        }\r\n        return _totalHold;\r\n    }\r\n    // Stakeholder and holder creation, management and rewards\r\n    function isStakeholder(address _address)\r\n        public\r\n        view\r\n        returns(bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n    function isHolder(address _address)\r\n        private\r\n        view\r\n        returns(bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < holders.length; s += 1){\r\n            if (_address == holders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n    function addStakeholder(address _stakeholder)\r\n        private\r\n    {\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n        if(!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n    function addHolder(address _holder)\r\n        private\r\n    {\r\n        (bool _isHolder, ) = isHolder(_holder);\r\n        if(!_isHolder) holders.push(_holder);\r\n    }\r\n    function removeHolder(address _holder)\r\n        private\r\n    {\r\n        (bool _isHolder, uint256 s) = isHolder(_holder);\r\n        if(_isHolder){\r\n            holders[s] = holders[holders.length - 1];\r\n            holders.pop();\r\n       }\r\n    }\r\n    function checkHolder(address _address, uint256 _value)\r\n        private\r\n    {\r\n        if (_address!=address(0)) {\r\n            if((balanceOf(_address)-_value)>0) {\r\n                addHolder(_address);\r\n            } else removeHolder(_address);\r\n        }\r\n    }\r\n    function distributeRewardsFee(uint256 value)\r\n        private\r\n    {\r\n        uint256 num = stakeholders.length;\r\n        if (num >0 && totalStakes()!=0){\r\n            for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n                address stakeholder = stakeholders[s];\r\n                super.transfer(stakeholder, value * stakeOf(stakeholder)/totalStakes());\r\n            }\r\n        } else {_burn(value);}\r\n    }\r\n    function distributeHoldFee(uint256 value)\r\n        private\r\n    {\r\n        uint256 num = holders.length;\r\n        if (num !=0){\r\n            for (uint256 s = 0; s < holders.length; s += 1){\r\n                address holder = holders[s];\r\n                super.transfer(holder, value * balanceOf(holder)/(totalHold()));\r\n            }\r\n        } else {_burn(value);}\r\n    }\r\n\r\n    // Refferrer management and rewards\r\n    function referralOf(address userId) public view returns (address){\r\n        return (ReferralsOf[userId].myref);\r\n    }\r\n\r\n    function addMyRef(address _ref) private {\r\n        if (address(msg.sender)!=address(this)){\r\n            ReferralsOf[_ref] = referral(msg.sender);\r\n        }\r\n    }\r\n    function payMyRef(uint256 value) private returns (bool) {\r\n        address referrer = referralOf(msg.sender);\r\n        if (referrer != address(0)){\r\n            super.transfer(referrer, value);\r\n        } else if (referrer == address(0)){\r\n           _burn(value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Overrides ERC20 mint to avoid inheritance\r\n    function _mint(address to, uint256 value) internal override {\r\n        require (!_mintingFinished);\r\n        super._mint(to, value);\r\n    }\r\n\r\n    // Transfer transaction function\r\n    function transfer(address to, uint256 value) public override(ERC20) virtual returns (bool) {\r\n        if (msg.sender == owner()) {fee = 0;}\r\n            else if (msg.sender != owner()) {\r\n                fee = value*4/100;                                                                                              // Set fee as 4% of tx value\r\n                if (uniswapV2Pair != address(0)){\r\n                    require(value <= totalSupply()*1/100, \"Max allowed transfer 1% of Total Supply\");                           // Set tx cap 1% of total supply\r\n                }\r\n            }\r\n        require (balanceOf(msg.sender) >= value, \"Balance is not enough\") ;                                                     // Check if the sender has enough balance\r\n        require (balanceOf(to) + value > balanceOf(to));                                                                        // Check for overflows\r\n        _burn(fee/8);                                                                                                           // Burns 0.5% of tx\r\n        if (msg.sender != owner() && msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){                             // Excludes owner and Uniswap from staking\r\n            createStake(fee*25/100);                                                                                            // Stakes 1% of the tx\r\n        } else {_burn(fee*25/100);}                                                                                             // Burns 1% of the tx if sender is Uniswap\r\n        if (balanceOf(to)==0 && msg.sender != owner() && msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){         // Checks if receiver has 0 balance, excludes owner and Uniswap from being referrers\r\n            if (referralOf(to)==address(0) && to != uniswapV2Router && to != uniswapV2Pair){                                                                                    // Check if receiver has no referrers\r\n                addMyRef(to) ;                                                                                                  // Adds referrer (excluding contract address)\r\n            }\r\n        }\r\n        payMyRef(fee/8);                                                                                                        // Pay referrer 0.5% of tx\r\n        distributeRewardsFee(fee*25/100);                                                                                       // Split 1% of tx between stackers (proportional to stakes owned)\r\n        if (msg.sender != owner() && msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){\r\n            checkHolder(msg.sender, value);                                                                                     // Verifies if sender is still Holder after transaction. If not, it's not counted as holder to get reward\r\n        }\r\n        distributeHoldFee(fee/8);                                                                                               // Distribute 0.5% of tx to holders (proportional to balance)\r\n        super.transfer(address(this),fee/8);                                                                                    // Lock 0.5% of tx into this address to be provided as liquidity to uniswap\r\n        super.transfer(to, value-fee);                                                                                          // Transfer the amount - fees paid\r\n        if (to != owner() && to != uniswapV2Pair && to != uniswapV2Router){\r\n            checkHolder(to, -value);\r\n        }                                                                                                                       // Checks receiver balance after tx and adds it to holder eventually\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public virtual override(ERC20) returns (bool) {\r\n        if (msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){\r\n            if (uniswapV2Pair == address(0)){\r\n                fee = 0;                                                                                              // Set fee as 4% of tx value\r\n            } else {fee = value*4/100;}\r\n            require (balanceOf(from) >= value) ;                                                                                // Check if the sender has enough balance\r\n            require (balanceOf(to) + value > balanceOf(to));                                                                    // Check for overflows\r\n            if (uniswapV2Pair != address(0)){\r\n                require(value <= totalSupply()*1/100, \"Max allowed transfer 1% of Total Supply\");\r\n            }\r\n            _burn(fee/8);                                                                                                       // Burns 0.5% of tx\r\n            if (msg.sender != owner() && msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){\r\n                createStake(fee*25/100);\r\n            } else {_burn(fee*25/100);}                                                                                         // Stake 1% of tx\r\n            if (balanceOf(to)==0 && msg.sender != owner() && msg.sender != uniswapV2Pair && msg.sender != uniswapV2Router){\r\n                if (referralOf(to)==address(0)){\r\n                    addMyRef(to) ;\r\n                }                                                                                                               // If balance of receiver is 0 -> check if receiver has referral -> if receive doesn't have referral -> add referral\r\n            }\r\n            payMyRef(fee/8);                                                                                                    // Pay referrer 0.5% of tx\r\n            distributeRewardsFee(fee*25/100);                                                                                   // Split 1% of tx between stackers\r\n            if (msg.sender != owner() && msg.sender != address(this) && from != uniswapV2Pair && from != uniswapV2Router){\r\n                checkHolder(from, value);                                                                                       // Verifies if sender is still Holder after transaction. If not, it's not counted as holder to get reward\r\n            }\r\n            distributeHoldFee(fee/8);                                                                                           // Distribute 0.5% of tx to holders\r\n            super.transferFrom(from, address(this),fee/8);                                                                      // Lock 0.5% of tx into this address to be provided as liquidity to uniswap\r\n            super.transferFrom(from, to, value-fee);                                                                            // Transfer the amount - fees paid\r\n            if (to != owner() && to != uniswapV2Pair && to != uniswapV2Router){\r\n                checkHolder(to, -value);                                                                                        // Checks receiver balance after tx and adds it to holder eventually\r\n            }\r\n            return true;\r\n        } else {\r\n            if (uniswapV2Pair != address(0)){\r\n                require(value <= totalSupply()*1/100, \"Max allowed transfer 1% of Total Supply\");\r\n            }\r\n            _transfer(from, to, value);\r\n            _approve(from, _msgSender(), _allowances[from][_msgSender()].sub(value, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        super._transfer(from, to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LockLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provideLiquidityToRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"}],\"name\":\"referralOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SPLASH","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000000b73706c61736865642e696f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653504c4153480000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://489447fa4201f334f3c439ab45cddac8a14fb2ca4646d11f8d5b488e7f06dbea"}]}