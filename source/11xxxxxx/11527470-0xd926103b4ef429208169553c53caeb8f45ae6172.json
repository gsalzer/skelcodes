{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        if (a == 0)\r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256)\r\n    {\r\n        uint256 c = add(a, m);\r\n        uint256 d = sub(c, 1);\r\n        return mul(div(d, m), m);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utilities/ERC20Detailed.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/utilities/TransferAndCallFallBack.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ncontract TransferAndCallFallBack {\r\n    function receiveToken(address from, uint256 tokens, address token, bytes memory data) public returns (bool);\r\n}\r\n\r\n// File: contracts/utilities/ApproveAndCallFallBack.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(value)(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UPLINK.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Uplink is ERC20Detailed {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n\r\n    string constant tokenName = \"Uplink\";\r\n    string constant tokenSymbol = \"ULINK\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 100000 * 18;\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    address public contractOwner;\r\n\r\n    uint256 public fullUnitsVested_total = 0;\r\n    mapping(address => bool) public isVesting;\r\n\r\n    uint256 _totalVestRewardsPerUnit = 0;\r\n    mapping(address => uint256) private _totalVestRewardsPerUnit_positions;\r\n    mapping(address => uint256) private _savedVestRewards;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    bool public migrationActive = true;\r\n\r\n    //these addresses won't be affected by burn,ie liquidity pools\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event Whitelisted(address _addr, bool _whitelisted);\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\r\n    {\r\n        contractOwner = msg.sender;\r\n        _mint(msg.sender, 100000 * (10 ** uint256(tokenDecimals)));\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender == contractOwner);\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function fullUnitsVested(address owner) external view returns (uint256) {\r\n        return isVesting[owner] ? toFullUnits(_balances[owner]) : 0;\r\n    }\r\n\r\n    function toFullUnits(uint256 valueWithDecimals) public pure returns (uint256) {\r\n        return valueWithDecimals.div(10 ** uint256(tokenDecimals));\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _executeTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address to, uint value, bytes memory data) public returns (bool) {\r\n        require(transfer(to, value));\r\n        require(TransferAndCallFallBack(to).receiveToken(msg.sender, value, address(this), data));\r\n        return true;\r\n    }\r\n\r\n\r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public {\r\n        require(receivers.length == values.length);\r\n        for (uint256 i = 0; i < receivers.length; i++)\r\n            _executeTransfer(msg.sender, receivers[i], values[i]);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _executeTransfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFromAndCall(address from, address to, uint value, bytes memory data) public returns (bool) {\r\n        require(transferFrom(from, to, value));\r\n        require(TransferAndCallFallBack(to).receiveToken(from, value, address(this), data));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        require(approve(spender, tokens));\r\n        require(ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal\r\n    {\r\n        require(value != 0);\r\n\r\n        uint256 initalBalance = _balances[account];\r\n        uint256 newBalance = initalBalance.add(value);\r\n\r\n        _balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.add(value);\r\n\r\n        //update full units vested\r\n        if (isVesting[account])\r\n        {\r\n            uint256 fus_total = fullUnitsVested_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance));\r\n            fus_total = fus_total.add(toFullUnits(newBalance));\r\n            fullUnitsVested_total = fus_total;\r\n        }\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function burn(uint256 value) external\r\n    {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 value) external\r\n    {\r\n        require(value <= _allowed[account][msg.sender]);\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal\r\n    {\r\n        require(value != 0);\r\n        require(value <= _balances[account]);\r\n\r\n        uint256 initalBalance = _balances[account];\r\n        uint256 newBalance = initalBalance.sub(value);\r\n\r\n        _balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.sub(value);\r\n\r\n        //update full units vested\r\n        if (isVesting[account])\r\n        {\r\n            uint256 fus_total = fullUnitsVested_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance));\r\n            fus_total = fus_total.add(toFullUnits(newBalance));\r\n            fullUnitsVested_total = fus_total;\r\n        }\r\n\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /*\r\n    *   transfer with additional burn and vest rewards\r\n    *   the receiver gets 96% of the sent value\r\n    *   4% are split to be burnt and distributed to holders\r\n    */\r\n    function _executeTransfer(address from, address to, uint256 value) private\r\n    {\r\n        require(value <= _balances[from]);\r\n        require(to != address(0) && to != address(this));\r\n\r\n        //Update sender and receivers vesting rewards - changing balances will change vest rewards shares\r\n        updateVestRewardsFor(from);\r\n        updateVestRewardsFor(to);\r\n\r\n        uint256 fourPercent = 0;\r\n        if (!whitelist[from] && !whitelist[to]) {\r\n            fourPercent = value.mul(4).div(100);\r\n            //set a minimum burn rate to prevent no-burn-txs due to precision loss\r\n            if (fourPercent == 0 && value > 0)\r\n                fourPercent = 1;\r\n        }\r\n\r\n        uint256 initalBalance_from = _balances[from];\r\n        uint256 newBalance_from = initalBalance_from.sub(value);\r\n\r\n        value = value.sub(fourPercent);\r\n\r\n        uint256 initalBalance_to = from != to ? _balances[to] : newBalance_from;\r\n        uint256 newBalance_to = initalBalance_to.add(value);\r\n\r\n        //transfer\r\n        _balances[from] = newBalance_from;\r\n        _balances[to] = newBalance_to;\r\n        emit Transfer(from, to, value);\r\n\r\n        //update full units vested\r\n        uint256 fus_total = fullUnitsVested_total;\r\n        if (isVesting[from])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_from));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_from));\r\n        }\r\n        if (isVesting[to])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_to));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_to));\r\n        }\r\n        fullUnitsVested_total = fus_total;\r\n\r\n        uint256 amountToBurn = fourPercent;\r\n\r\n        if (fus_total > 0)\r\n        {\r\n            uint256 vestingRewards = fourPercent.div(2);\r\n            //split up to rewards per unit in vest\r\n            uint256 vestRewardsPerUnit = vestingRewards.div(fus_total);\r\n            //apply rewards\r\n            _totalVestRewardsPerUnit = _totalVestRewardsPerUnit.add(vestRewardsPerUnit);\r\n            _balances[address(this)] = _balances[address(this)].add(vestingRewards);\r\n            if (vestingRewards > 0)\r\n                emit Transfer(msg.sender, address(this), vestingRewards);\r\n            amountToBurn = amountToBurn.sub(vestingRewards);\r\n        }\r\n\r\n        //update total supply\r\n        _totalSupply = _totalSupply.sub(amountToBurn);\r\n        if (amountToBurn > 0)\r\n            emit Transfer(msg.sender, address(0), amountToBurn);\r\n    }\r\n\r\n    //catch up with the current total rewards. This needs to be done before an addresses balance is changed\r\n    function updateVestRewardsFor(address vester) private\r\n    {\r\n        _savedVestRewards[vester] = viewUnpaidVestRewards(vester);\r\n        _totalVestRewardsPerUnit_positions[vester] = _totalVestRewardsPerUnit;\r\n    }\r\n\r\n    //get all rewards that have not been claimed yet\r\n    function viewUnpaidVestRewards(address vester) public view returns (uint256)\r\n    {\r\n        if (!isVesting[vester])\r\n            return _savedVestRewards[vester];\r\n        uint256 newVestRewardsPerUnit = _totalVestRewardsPerUnit.sub(_totalVestRewardsPerUnit_positions[vester]);\r\n\r\n        uint256 newVestRewards = newVestRewardsPerUnit.mul(toFullUnits(_balances[vester]));\r\n        return _savedVestRewards[vester].add(newVestRewards);\r\n    }\r\n\r\n    //pay out unclaimed vest rewards\r\n    function payoutVestRewards() public\r\n    {\r\n        updateVestRewardsFor(msg.sender);\r\n        uint256 rewardsVest = _savedVestRewards[msg.sender];\r\n        require(rewardsVest > 0 && rewardsVest <= _balances[address(this)]);\r\n\r\n        _savedVestRewards[msg.sender] = 0;\r\n\r\n        uint256 initalBalance_vester = _balances[msg.sender];\r\n        uint256 newBalance_vester = initalBalance_vester.add(rewardsVest);\r\n\r\n        //update full units vested\r\n        if (isVesting[msg.sender])\r\n        {\r\n            uint256 fus_total = fullUnitsVested_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_vester));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_vester));\r\n            fullUnitsVested_total = fus_total;\r\n        }\r\n\r\n        //transfer\r\n        _mint(msg.sender, rewardsVest);\r\n    }\r\n\r\n    function enableVesting() public {\r\n        _enableVesting(msg.sender);\r\n    }\r\n\r\n    function disableVesting() public {\r\n        _disableVesting(msg.sender);\r\n    }\r\n\r\n    function enableVestingFor(address vester) public onlyOwner {\r\n        _enableVesting(vester);\r\n    }\r\n\r\n    function disableVestingFor(address vester) public onlyOwner {\r\n        _disableVesting(vester);\r\n    }\r\n\r\n    //enable vesting for target address\r\n    function _enableVesting(address vester) private {\r\n        require(!isVesting[vester]);\r\n        updateVestRewardsFor(vester);\r\n        isVesting[vester] = true;\r\n        fullUnitsVested_total = fullUnitsVested_total.add(toFullUnits(_balances[vester]));\r\n    }\r\n\r\n    //disable vesting for target address\r\n    function _disableVesting(address vester) private {\r\n        require(isVesting[vester]);\r\n        updateVestRewardsFor(vester);\r\n        isVesting[vester] = false;\r\n        fullUnitsVested_total = fullUnitsVested_total.sub(toFullUnits(_balances[vester]));\r\n    }\r\n\r\n    //no fees if receiver is whitelisted\r\n    function setWhitelist(address _addr, bool _whitelisted) external onlyOwner {\r\n        whitelist[_addr] = _whitelisted;\r\n        emit Whitelisted(_addr, _whitelisted);\r\n    }\r\n\r\n    //migrate a list of balances\r\n    function multiMigrateBalance(address[] memory receivers, uint256[] memory values) public {\r\n        require(receivers.length == values.length);\r\n        for (uint256 i = 0; i < receivers.length; i++)\r\n            migrateBalance(receivers[i], values[i]);\r\n    }\r\n\r\n    //mint balance to a give address, only works as long as migrationmode is active\r\n    function migrateBalance(address account, uint256 amount) public onlyOwner {\r\n        require(migrationActive);\r\n        _mint(account, amount);\r\n    }\r\n\r\n    //this will stop migration mode permanently\r\n    function endMigration() public onlyOwner {\r\n        migrationActive = false;\r\n    }\r\n\r\n\r\n\r\n// begin staking section\r\n\r\n\r\n\r\n    address public owner;\r\n\r\n    struct stakeTracker {\r\n        uint256 lastBlockChecked;\r\n        uint256 rewards;\r\n        uint256 linkStaked;\r\n    }\r\n\r\n    uint256 private rewardsVar;\r\n    address private linkAddress;\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    IERC20 private linkToken;\r\n\r\n    uint256 private _totalLinkStaked;\r\n    mapping(address => stakeTracker) private _stakedBalances;\r\n    mapping(address => bool) blackListed;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 totalLinkStaked);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event Rewards(address indexed user, uint256 reward);\r\n\r\n    modifier updateStakingReward(address account) {\r\n        if (block.number > _stakedBalances[account].lastBlockChecked) {\r\n            uint256 rewardBlocks = block.number\r\n            .sub(_stakedBalances[account].lastBlockChecked);\r\n\r\n\r\n            if (_stakedBalances[account].linkStaked > 0) {\r\n                _stakedBalances[account].rewards = _stakedBalances[account].rewards\r\n                .add(\r\n                    _stakedBalances[account].linkStaked\r\n                    .mul(rewardBlocks)\r\n                    / rewardsVar);\r\n            }\r\n\r\n            _stakedBalances[account].lastBlockChecked = block.number;\r\n\r\n            emit Rewards(account, _stakedBalances[account].rewards);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* in case someone mistakenly sent ERC20 tokens to the contract.\r\n    */\r\n    function withdrawERC20Tokens(address tokenAddress, uint256 amount) public onlyOwner\r\n    {\r\n        require(tokenAddress != linkAddress);\r\n        require(tokenAddress != address(this));\r\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= amount);\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function setLinkAddress(address _linkAddress) public onlyOwner returns (uint256) {\r\n        linkAddress = _linkAddress;\r\n        linkToken = IERC20(_linkAddress);\r\n    }\r\n\r\n    function updatingStakingReward(address account) public returns (uint256) {\r\n        if (block.number > _stakedBalances[account].lastBlockChecked) {\r\n            uint256 rewardBlocks = block.number\r\n            .sub(_stakedBalances[account].lastBlockChecked);\r\n\r\n\r\n            if (_stakedBalances[account].linkStaked > 0) {\r\n                _stakedBalances[account].rewards = _stakedBalances[account].rewards\r\n                .add(\r\n                    _stakedBalances[account].linkStaked\r\n                    .mul(rewardBlocks)\r\n                    / rewardsVar);\r\n            }\r\n\r\n            _stakedBalances[account].lastBlockChecked = block.number;\r\n\r\n            emit Rewards(account, _stakedBalances[account].rewards);\r\n\r\n        }\r\n        return (_stakedBalances[account].rewards);\r\n    }\r\n\r\n    function getBlockNum() public view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    function getLastBlockCheckedNum(address _account) public view returns (uint256) {\r\n        return _stakedBalances[_account].lastBlockChecked;\r\n    }\r\n\r\n    function getAddressStakeAmount(address _account) public view returns (uint256) {\r\n        return _stakedBalances[_account].linkStaked;\r\n    }\r\n\r\n    function setRewardsVar(uint256 _amount) public onlyOwner {\r\n        rewardsVar = _amount;\r\n    }\r\n\r\n    function totalStakedSupply() public view returns (uint256) {\r\n        return _totalLinkStaked;\r\n    }\r\n\r\n    function myRewardsBalance(address account) public view returns (uint256) {\r\n        if (block.number > _stakedBalances[account].lastBlockChecked) {\r\n            uint256 rewardBlocks = block.number\r\n            .sub(_stakedBalances[account].lastBlockChecked);\r\n\r\n\r\n            if (_stakedBalances[account].linkStaked > 0) {\r\n                return _stakedBalances[account].rewards\r\n                .add(\r\n                    _stakedBalances[account].linkStaked\r\n                    .mul(rewardBlocks)\r\n                    / rewardsVar);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function stake(uint256 amount) public updateStakingReward(msg.sender) {\r\n        // Will prevent exchanges from staking;\r\n        require(!blackListed[msg.sender]);\r\n        _totalLinkStaked = _totalLinkStaked.add(amount);\r\n        _stakedBalances[msg.sender].linkStaked = _stakedBalances[msg.sender].linkStaked.add(amount);\r\n        linkToken.transferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount, _totalLinkStaked);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public updateStakingReward(msg.sender) {\r\n        _getReward(msg.sender);\r\n        _totalLinkStaked = _totalLinkStaked.sub(amount);\r\n        _stakedBalances[msg.sender].linkStaked = _stakedBalances[msg.sender].linkStaked.sub(amount);\r\n        linkToken.transfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function _getReward(address receiver) private {\r\n        uint256 reward = _stakedBalances[receiver].rewards;\r\n        _mint(receiver, reward);\r\n        _stakedBalances[receiver].rewards = 0;\r\n        emit Rewards(receiver, reward);\r\n    }\r\n\r\n    function getReward() public updateStakingReward(msg.sender) {\r\n        _getReward(msg.sender);\r\n    }\r\n\r\n    // Will prevent exchanges from staking;\r\n    function blackListAddress(address addr, bool blackList) external onlyOwner {\r\n        blackListed[addr] = blackList;\r\n    }\r\n\r\n    function isBlackListed(address addr) public view returns (bool) {\r\n        if (blackListed[addr] == true)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_linkAddress\",\"type\":\"address\"}],\"name\":\"setLinkAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vester\",\"type\":\"address\"}],\"name\":\"enableVestingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updatingStakingReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fullUnitsVested_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"vester\",\"type\":\"address\"}],\"name\":\"viewUnpaidVestRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"blackList\",\"type\":\"bool\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutVestRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"myRewardsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueWithDecimals\",\"type\":\"uint256\"}],\"name\":\"toFullUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAddressStakeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vester\",\"type\":\"address\"}],\"name\":\"disableVestingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardsVar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLastBlockCheckedNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiMigrateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"fullUnitsVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalLinkStaked\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Uplink","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://02b965f890c5753b5ddf2889385aab41fccbf832c6003cec79495e5f08a93ff7"}]}