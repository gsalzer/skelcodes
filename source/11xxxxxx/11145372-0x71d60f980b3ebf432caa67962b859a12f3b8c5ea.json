{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath96.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath96 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint96 a, uint256 b) internal pure returns (uint96) {\r\n        require(uint256(uint96(b)) == b, \"SafeMath: addition overflow\");\r\n        uint96 c = a + uint96(b);\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint96 a, uint256 b) internal pure returns (uint96) {\r\n        require(uint256(uint96(b)) == b, \"SafeMath: subtraction overflow\");\r\n        return sub(a, uint96(b), \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        uint96 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICommittee.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Committee contract interface\r\ninterface ICommittee {\r\n\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\r\n\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\r\n\r\n\t// No external functions\r\n\r\n\t/*\r\n     * External functions\r\n     */\r\n\r\n\t/// Notifies a weight change of a member\r\n\t/// @dev Called only by: Elections contract\r\n\t/// @param addr is the committee member address\r\n\t/// @param weight is the updated weight of the committee member\r\n\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n\t/// Notifies a change in the certification of a member\r\n\t/// @dev Called only by: Elections contract\r\n\t/// @param addr is the committee member address\r\n\t/// @param isCertified is the updated certification state of the member\r\n\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n\t/// Notifies a member removal for example due to voteOut / voteUnready\r\n\t/// @dev Called only by: Elections contract\r\n\t/// @param memberRemoved is the removed committee member address\r\n\t/// @return memberRemoved indicates whether the member was removed from the committee\r\n\t/// @return removedMemberWeight indicates the removed member weight\r\n\t/// @return removedMemberCertified indicates whether the member was in the certified committee\r\n\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified)/* onlyElectionContract */;\r\n\r\n\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\r\n\t/// The new member will be added only if it is qualified to join the committee \r\n\t/// @dev Called only by: Elections contract\r\n\t/// @param addr is the added committee member address\r\n\t/// @return memberAdded bool indicates whether the member was addded\r\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\r\n\r\n\t/// Checks if addMember() would add a the member to the committee (qualified to join)\r\n\t/// @param addr is the candidate committee member address\r\n\t/// @param weight is the candidate committee member weight\r\n\t/// @return wouldAddMember bool indicates whether the member will be addded\r\n\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\r\n\r\n\t/// Returns the committee members and their weights\r\n\t/// @return addrs is the committee members list\r\n\t/// @return weights is an array of uint, indicating committee members list weight\r\n\t/// @return certification is an array of bool, indicating the committee members certification status\r\n\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\r\n\r\n\t/// Returns the currently appointed committee data\r\n\t/// @return generalCommitteeSize is the number of members in the committee\r\n\t/// @return certifiedCommitteeSize is the number of certified members in the committee\r\n\t/// @return totalWeight is the total effective stake / weight of the committee\r\n\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight);\r\n\r\n\t/// Returns a committee member data\r\n\t/// @param addr is the committee member address\r\n\t/// @return inCommittee indicates whether the queried address is a member in the committee\r\n\t/// @return weight is the committee member weight\r\n\t/// @return isCertified indicates whether the committee member is certified\r\n\t/// @return totalCommitteeWeight is the total weight of the committee.\r\n\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\r\n\r\n\t/// Emits a CommitteeSnapshot events with current committee info\r\n\t/// @dev a CommitteeSnapshot is useful on contracts migration or to remove the need to track past events.\r\n\tfunction emitCommitteeSnapshot() external;\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\r\n\r\n\t/// Sets the maximum number of committee members\r\n\t/// @dev governance function called only by the functional manager\r\n\t/// @dev when reducing the number of members, the bottom ones are removed from the committee\r\n\t/// @param maxCommitteeSize is the maximum number of committee members \r\n\tfunction setMaxCommitteeSize(uint8 maxCommitteeSize) external /* onlyFunctionalManager onlyWhenActive */;\r\n\r\n\t/// Returns the maximum number of committee members\r\n\t/// @return maxCommitteeSize is the maximum number of committee members \r\n\tfunction getMaxCommitteeSize() external view returns (uint8);\r\n\t\r\n\t/// Imports the committee members from a previous committee contract during migration\r\n\t/// @dev initialization function called only by the initializationManager\r\n\t/// @dev does not update the reward contract to avoid incorrect notifications \r\n\t/// @param previousCommitteeContract is the address of the previous committee contract\r\n\tfunction importMembers(ICommittee previousCommitteeContract) external /* onlyInitializationAdmin */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IProtocolWallet.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/// @title Protocol Wallet interface\r\ninterface IProtocolWallet {\r\n    event FundsAddedToPool(uint256 added, uint256 total);\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the address of the underlying staked token\r\n    /// @return balance is the wallet balance\r\n    function getBalance() external view returns (uint256 balance);\r\n\r\n    /// Transfers the given amount of orbs tokens form the sender to this contract an updates the pool\r\n    /// @dev assumes the caller approved the amount prior to calling\r\n    /// @param amount is the amount to add to the wallet\r\n    function topUp(uint256 amount) external;\r\n\r\n    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\r\n    /// @dev may only be called by the wallet client\r\n    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\r\n    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\r\n    /// @param amount is the amount to withdraw\r\n    function withdraw(uint256 amount) external; /* onlyClient */\r\n\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ClientSet(address client);\r\n    event MaxAnnualRateSet(uint256 maxAnnualRate);\r\n    event EmergencyWithdrawal(address addr, address token);\r\n    event OutstandingTokensReset(uint256 startTime);\r\n\r\n    /// Sets a new annual withdraw rate for the pool\r\n\t/// @dev governance function called only by the migration owner\r\n    /// @dev the rate for a duration is duration x annualRate / 1 year \r\n    /// @param annualRate is the maximum annual rate that can be withdrawn\r\n    function setMaxAnnualRate(uint256 annualRate) external; /* onlyMigrationOwner */\r\n\r\n    /// Returns the annual withdraw rate of the pool\r\n    /// @return annualRate is the maximum annual rate that can be withdrawn\r\n    function getMaxAnnualRate() external view returns (uint256);\r\n\r\n    /// Emergency withdraw the wallet funds\r\n\t/// @dev governance function called only by the migration owner\r\n    /// @dev used in emergencies, when a migration to a new wallet is needed\r\n    /// @param token is the erc20 address of the token to withdraw\r\n    function emergencyWithdraw(address token) external; /* onlyMigrationOwner */\r\n\r\n    /// Sets the address of the client that can withdraw funds\r\n\t/// @dev governance function called only by the functional owner\r\n    /// @param client is the address of the new client\r\n    function setClient(address client) external; /* onlyFunctionalOwner */\r\n\r\n    /// Resets the outstanding tokens to new start time\r\n\t/// @dev governance function called only by the migration owner\r\n    /// @dev the next duration will be calculated starting from the given time\r\n    /// @param startTime is the time to set as the last withdrawal time\r\n    function resetOutstandingTokens(uint256 startTime) external; /* onlyMigrationOwner */\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IStakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Staking rewards contract interface\r\ninterface IStakingRewards {\r\n\r\n    event DelegatorStakingRewardsAssigned(address indexed delegator, uint256 amount, uint256 totalAwarded, address guardian, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta);\r\n    event GuardianStakingRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, uint256 delegatorRewardsPerToken, uint256 delegatorRewardsPerTokenDelta, uint256 stakingRewardsPerWeight, uint256 stakingRewardsPerWeightDelta);\r\n    event StakingRewardsClaimed(address indexed addr, uint256 claimedDelegatorRewards, uint256 claimedGuardianRewards, uint256 totalClaimedDelegatorRewards, uint256 totalClaimedGuardianRewards);\r\n    event StakingRewardsAllocated(uint256 allocatedRewards, uint256 stakingRewardsPerWeight);\r\n    event GuardianDelegatorsStakingRewardsPercentMilleUpdated(address indexed guardian, uint256 delegatorsStakingRewardsPercentMille);\r\n\r\n    /*\r\n     * External functions\r\n     */\r\n\r\n    /// Returns the currently reward balance of the given address.\r\n    /// @dev calculates the up to date balances (differ from the state)\r\n    /// @param addr is the address to query\r\n    /// @return delegatorStakingRewardsBalance the rewards awarded to the guardian role\r\n    /// @return guardianStakingRewardsBalance the rewards awarded to the guardian role\r\n    function getStakingRewardsBalance(address addr) external view returns (uint256 delegatorStakingRewardsBalance, uint256 guardianStakingRewardsBalance);\r\n\r\n    /// Sets ths guardian's delegators staking reward portion\r\n    /// @dev by default uses the defaultDelegatorsStakingRewardsPercentMille\r\n    /// @param delegatorRewardsPercentMille is the delegators portion in percent-mille (0 - maxDelegatorsStakingRewardsPercentMille)\r\n    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external;\r\n\r\n    /// Returns a guardian's delegators staking reward portion\r\n    /// @dev If not explicitly set, returns the defaultDelegatorsStakingRewardsPercentMille\r\n    /// @return delegatorRewardsRatioPercentMille is the delegators portion in percent-mille\r\n    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external view returns (uint256 delegatorRewardsRatioPercentMille);\r\n\r\n    /// Claims the staking rewards balance of an addr, staking the rewards\r\n    /// @dev Claimed rewards are staked in the staking contract using the distributeRewards interface\r\n    /// @dev includes the rewards for both the delegator and guardian roles\r\n    /// @dev calculates the up to date rewards prior to distribute them to the staking contract\r\n    /// @param addr is the address to claim rewards for\r\n    function claimStakingRewards(address addr) external;\r\n\r\n    /// Returns the amount of ORBS tokens in the staking rewards wallet allocated to staking rewards\r\n    /// @dev The staking wallet balance must always larger than the allocated value\r\n    /// @return allocated is the amount of tokens allocated in the staking rewards wallet\r\n    function getStakingRewardsWalletAllocatedTokens() external view returns (uint256 allocated);\r\n\r\n    /// Returns the current guardian staking rewards state\r\n    /// @dev calculated to the latest block, may differ from the state read\r\n    /// @dev notice that the guardian rewards are the rewards for the guardian role as guardian and do not include delegation rewards\r\n    /// @dev use getDelegatorStakingRewardsData to get the guardian's rewards as delegator\r\n    /// @param guardian is the guardian to query\r\n    /// @return balance is the staking rewards balance for the guardian role\r\n    /// @return claimed is the staking rewards for the guardian role that were claimed\r\n    /// @return delegatorRewardsPerToken is the potential reward per token (1E18 units) assigned to a guardian's delegator that delegated from day zero\r\n    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last guardian update\r\n    /// @return lastStakingRewardsPerWeight is the up to date stakingRewardsPerWeight used for the guardian state calculation\r\n    /// @return stakingRewardsPerWeightDelta is the increment in stakingRewardsPerWeight since the last guardian update\r\n    function getGuardianStakingRewardsData(address guardian) external view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        uint256 delegatorRewardsPerToken,\r\n        uint256 delegatorRewardsPerTokenDelta,\r\n        uint256 lastStakingRewardsPerWeight,\r\n        uint256 stakingRewardsPerWeightDelta\r\n    );\r\n\r\n    /// Returns the current delegator staking rewards state\r\n    /// @dev calculated to the latest block, may differ from the state read\r\n    /// @param delegator is the delegator to query\r\n    /// @return balance is the staking rewards balance for the delegator role\r\n    /// @return claimed is the staking rewards for the delegator role that were claimed\r\n    /// @return guardian is the guardian the delegator delegated to receiving a portion of the guardian staking rewards\r\n    /// @return lastDelegatorRewardsPerToken is the up to date delegatorRewardsPerToken used for the delegator state calculation\r\n    /// @return delegatorRewardsPerTokenDelta is the increment in delegatorRewardsPerToken since the last delegator update\r\n    function getDelegatorStakingRewardsData(address delegator) external view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        address guardian,\r\n        uint256 lastDelegatorRewardsPerToken,\r\n        uint256 delegatorRewardsPerTokenDelta\r\n    );\r\n\r\n    /// Returns an estimation for the delegator and guardian staking rewards for a given duration\r\n    /// @dev the returned value is an estimation, assuming no change in the PoS state\r\n    /// @dev the period calculated for start from the current block time until the current time + duration.\r\n    /// @param addr is the address to estimate rewards for\r\n    /// @param duration is the duration to calculate for in seconds\r\n    /// @return estimatedDelegatorStakingRewards is the estimated reward for the delegator role\r\n    /// @return estimatedGuardianStakingRewards is the estimated reward for the guardian role\r\n    function estimateFutureRewards(address addr, uint256 duration) external view returns (\r\n        uint256 estimatedDelegatorStakingRewards,\r\n        uint256 estimatedGuardianStakingRewards\r\n    );\r\n\r\n    /// Returns the current global staking rewards state\r\n    /// @dev calculated to the latest block, may differ from the state read\r\n    /// @return stakingRewardsPerWeight is the potential reward per 1E18 (TOKEN_BASE) committee weight assigned to a guardian was in the committee from day zero\r\n    /// @return unclaimedStakingRewards is the of tokens that were assigned to participants and not claimed yet\r\n    function getStakingRewardsState() external view returns (\r\n        uint96 stakingRewardsPerWeight,\r\n        uint96 unclaimedStakingRewards\r\n    );\r\n\r\n    /// Returns the current annual staking reward rate\r\n    /// @dev calculated based on the current total committee weight\r\n    /// @return annualRate is the current staking reward rate in percent-mille\r\n    function getCurrentStakingRewardsRatePercentMille() external view returns (uint256 annualRate);\r\n\r\n    /// Notifies an expected change in the committee membership of the guardian\r\n    /// @dev Called only by: the Committee contract\r\n    /// @dev called upon expected change in the committee membership of the guardian\r\n    /// @dev triggers update of the global rewards state and the guardian rewards state\r\n    /// @dev updates the rewards state based on the committee state prior to the change\r\n    /// @param guardian is the guardian who's committee membership is updated\r\n    /// @param weight is the weight of the guardian prior to the change\r\n    /// @param totalCommitteeWeight is the total committee weight prior to the change\r\n    /// @param inCommittee indicates whether the guardian was in the committee prior to the change\r\n    /// @param inCommitteeAfter indicates whether the guardian is in the committee after the change\r\n    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external /* onlyCommitteeContract */;\r\n\r\n    /// Notifies an expected change in a delegator and his guardian delegation state\r\n    /// @dev Called only by: the Delegation contract\r\n    /// @dev called upon expected change in a delegator's delegation state\r\n    /// @dev triggers update of the global rewards state, the guardian rewards state and the delegator rewards state\r\n    /// @dev on delegation change, updates also the new guardian and the delegator's lastDelegatorRewardsPerToken accordingly\r\n    /// @param guardian is the delegator's guardian prior to the change\r\n    /// @param delegatedStake is the delegated stake of the delegator's guardian prior to the change\r\n    /// @param delegator is the delegator about to change delegation state\r\n    /// @param delegatorStake is the stake of the delegator\r\n    /// @param nextGuardian is the delegator's guardian after to the change\r\n    /// @param nextGuardianDelegatedStake is the delegated stake of the delegator's guardian after to the change\r\n    function delegationWillChange(address guardian, uint256 delegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external /* onlyDelegationsContract */;\r\n\r\n    /*\r\n     * Governance functions\r\n     */\r\n\r\n    event AnnualStakingRewardsRateChanged(uint256 annualRateInPercentMille, uint256 annualCap);\r\n    event DefaultDelegatorsStakingRewardsChanged(uint32 defaultDelegatorsStakingRewardsPercentMille);\r\n    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\r\n    event RewardDistributionActivated(uint256 startTime);\r\n    event RewardDistributionDeactivated();\r\n    event StakingRewardsBalanceMigrated(address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards, address toRewardsContract);\r\n    event StakingRewardsBalanceMigrationAccepted(address from, address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards);\r\n    event EmergencyWithdrawal(address addr, address token);\r\n\r\n    /// Deactivates fees and bootstrap allocation\r\n    /// @dev governance function called only by the migration manager\r\n    /// @dev guardians updates remain active based on the current perMember value\r\n    function deactivateRewardDistribution() external /* onlyMigrationManager */;\r\n\r\n    /// Activates staking rewards allocation\r\n    /// @dev governance function called only by the initialization manager\r\n    /// @dev On migrations, startTime should be set as the previous contract deactivation time.\r\n    /// @param startTime sets the last assignment time\r\n    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\r\n\r\n    /// Sets the default delegators staking reward portion\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille(0 - maxDelegatorsStakingRewardsPercentMille)\r\n    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the default delegators staking reward portion\r\n    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\r\n    function getDefaultDelegatorsStakingRewardsPercentMille() external view returns (uint32);\r\n\r\n    /// Sets the maximum delegators staking reward portion\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille(0 - 100,000)\r\n    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the default delegators staking reward portion\r\n    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\r\n    function getMaxDelegatorsStakingRewardsPercentMille() external view returns (uint32);\r\n\r\n    /// Sets the annual rate and cap for the staking reward\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param annualRateInPercentMille is the annual rate in percent-mille\r\n    /// @param annualCap is the annual staking rewards cap\r\n    function setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the annual staking reward rate\r\n    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\r\n    function getAnnualStakingRewardsRatePercentMille() external view returns (uint32);\r\n\r\n    /// Returns the annual staking rewards cap\r\n    /// @return annualStakingRewardsCap is the annual rate in percent-mille\r\n    function getAnnualStakingRewardsCap() external view returns (uint256);\r\n\r\n    /// Checks if rewards allocation is active\r\n    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\r\n    function isRewardAllocationActive() external view returns (bool);\r\n\r\n    /// Returns the contract's settings\r\n    /// @return annualStakingRewardsCap is the annual rate in percent-mille\r\n    /// @return annualStakingRewardsRatePercentMille is the annual rate in percent-mille\r\n    /// @return defaultDelegatorsStakingRewardsPercentMille is the default delegators portion in percent-mille\r\n    /// @return maxDelegatorsStakingRewardsPercentMille is the maximum delegators portion in percent-mille\r\n    /// @return rewardAllocationActive is a bool that indicates that rewards allocation is active\r\n    function getSettings() external view returns (\r\n        uint annualStakingRewardsCap,\r\n        uint32 annualStakingRewardsRatePercentMille,\r\n        uint32 defaultDelegatorsStakingRewardsPercentMille,\r\n        uint32 maxDelegatorsStakingRewardsPercentMille,\r\n        bool rewardAllocationActive\r\n    );\r\n\r\n    /// Migrates the staking rewards balance of a given address to a new staking rewards contract\r\n    /// @dev The new rewards contract is determined according to the contracts registry\r\n    /// @dev No impact of the calling contract if the currently configured contract in the registry\r\n    /// @dev may be called also while the contract is locked\r\n    /// @param addr is the address to migrate\r\n    function migrateRewardsBalance(address addr) external;\r\n\r\n    /// Accepts an address balance migration from a previous rewards contract\r\n    /// @dev the function may be called by any caller that approves the amounts provided for transfer\r\n    /// @param addr is the migrated address\r\n    /// @param guardianStakingRewards is the received guardian rewards balance\r\n    /// @param delegatorStakingRewards is the received delegator rewards balance\r\n    function acceptRewardsBalanceMigration(address addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards) external;\r\n\r\n    /// Performs emergency withdrawal of the contract balance\r\n    /// @dev called with a token to withdraw, should be called twice with the fees and bootstrap tokens\r\n    /// @dev governance function called only by the migration manager\r\n    /// @param token is the ERC20 token to withdraw\r\n    function emergencyWithdraw(address token) external /* onlyMigrationManager */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IDelegations.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Delegations contract interface\r\ninterface IDelegations /* is IStakeChangeNotifier */ {\r\n\r\n    // Delegation state change events\r\n\tevent DelegatedStakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, address indexed delegator, uint256 delegatorContributedStake);\r\n\r\n    // Function calls\r\n\tevent Delegated(address indexed from, address indexed to);\r\n\r\n\t/*\r\n     * External functions\r\n     */\r\n\r\n\t/// Delegate your stake\r\n\t/// @dev updates the election contract on the changes in the delegated stake\r\n\t/// @dev updates the rewards contract on the upcoming change in the delegator's delegation state\r\n\t/// @param to is the address to delegate to\r\n\tfunction delegate(address to) external /* onlyWhenActive */;\r\n\r\n\t/// Refresh the address stake for delegation power based on the staking contract\r\n\t/// @dev Disabled stake change update notifications from the staking contract may create mismatches\r\n\t/// @dev refreshStake re-syncs the stake data with the staking contract\r\n\t/// @param addr is the address to refresh its stake\r\n\tfunction refreshStake(address addr) external /* onlyWhenActive */;\r\n\r\n\t/// Returns the delegated stake of an addr \r\n\t/// @dev an address that is not self delegating has a 0 delegated stake\r\n\t/// @param addr is the address to query\r\n\t/// @return delegatedStake is the address delegated stake\r\n\tfunction getDelegatedStake(address addr) external view returns (uint256);\r\n\r\n\t/// Returns the delegate address of the given address\r\n\t/// @param addr is the address to query\r\n\t/// @return delegation is the address the addr delegated to\r\n\tfunction getDelegation(address addr) external view returns (address);\r\n\r\n\t/// Returns a delegator info\r\n\t/// @param addr is the address to query\r\n\t/// @return delegation is the address the addr delegated to\r\n\t/// @return delegatorStake is the stake of the delegator as reflected in the delegation contract\r\n\tfunction getDelegationInfo(address addr) external view returns (address delegation, uint256 delegatorStake);\r\n\r\n\t/// Returns the total delegated stake\r\n\t/// @dev delegatedStake - the total stake delegated to an address that is self delegating\r\n\t/// @dev the delegated stake of a non self-delegated address is 0\r\n\t/// @return totalDelegatedStake is the total delegatedStake of all the addresses\r\n\tfunction getTotalDelegatedStake() external view returns (uint256) ;\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tevent DelegationsImported(address[] from, address indexed to);\r\n\r\n\tevent DelegationInitialized(address indexed from, address indexed to);\r\n\r\n\t/// Imports delegations during initial migration\r\n\t/// @dev initialization function called only by the initializationManager\r\n\t/// @dev Does not update the Rewards or Election contracts\r\n\t/// @dev assumes deactivated Rewards\r\n\t/// @param from is a list of delegator addresses\r\n\t/// @param to is the address the delegators delegate to\r\n\tfunction importDelegations(address[] calldata from, address to) external /* onlyMigrationManager onlyDuringDelegationImport */;\r\n\r\n\t/// Initializes the delegation of an address during initial migration \r\n\t/// @dev initialization function called only by the initializationManager\r\n\t/// @dev behaves identically to a delegate transaction sent by the delegator\r\n\t/// @param from is the delegator addresses\r\n\t/// @param to is the delegator delegates to\r\n\tfunction initDelegation(address from, address to) external /* onlyInitializationAdmin */;\r\n}\r\n\r\n// File: contracts/IMigratableStakingContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/// @title An interface for staking contracts which support stake migration.\r\ninterface IMigratableStakingContract {\r\n    /// @dev Returns the address of the underlying staked token.\r\n    /// @return IERC20 The address of the token.\r\n    function getToken() external view returns (IERC20);\r\n\r\n    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\r\n    /// the required amount using ERC20 approve.\r\n    /// @param _stakeOwner address The specified stake owner.\r\n    /// @param _amount uint256 The number of tokens to stake.\r\n    function acceptMigration(address _stakeOwner, uint256 _amount) external;\r\n\r\n    event AcceptedMigration(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n}\r\n\r\n// File: contracts/IStakingContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/// @title An interface for staking contracts.\r\ninterface IStakingContract {\r\n    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\r\n    /// the required amount using ERC20 approve.\r\n    /// @param _amount uint256 The amount of tokens to stake.\r\n    function stake(uint256 _amount) external;\r\n\r\n    /// @dev Unstakes ORBS tokens from msg.sender. If successful, this will start the cooldown period, after which\r\n    /// msg.sender would be able to withdraw all of his tokens.\r\n    /// @param _amount uint256 The amount of tokens to unstake.\r\n    function unstake(uint256 _amount) external;\r\n\r\n    /// @dev Requests to withdraw all of staked ORBS tokens back to msg.sender. Stake owners can withdraw their ORBS\r\n    /// tokens only after previously unstaking them and after the cooldown period has passed (unless the contract was\r\n    /// requested to release all stakes).\r\n    function withdraw() external;\r\n\r\n    /// @dev Restakes unstaked ORBS tokens (in or after cooldown) for msg.sender.\r\n    function restake() external;\r\n\r\n    /// @dev Distributes staking rewards to a list of addresses by directly adding rewards to their stakes. This method\r\n    /// assumes that the user has already approved at least the required amount using ERC20 approve. Since this is a\r\n    /// convenience method, we aren't concerned about reaching block gas limit by using large lists. We assume that\r\n    /// callers will be able to properly batch/paginate their requests.\r\n    /// @param _totalAmount uint256 The total amount of rewards to distributes.\r\n    /// @param _stakeOwners address[] The addresses of the stake owners.\r\n    /// @param _amounts uint256[] The amounts of the rewards.\r\n    function distributeRewards(uint256 _totalAmount, address[] calldata _stakeOwners, uint256[] calldata _amounts) external;\r\n\r\n    /// @dev Returns the stake of the specified stake owner (excluding unstaked tokens).\r\n    /// @param _stakeOwner address The address to check.\r\n    /// @return uint256 The total stake.\r\n    function getStakeBalanceOf(address _stakeOwner) external view returns (uint256);\r\n\r\n    /// @dev Returns the total amount staked tokens (excluding unstaked tokens).\r\n    /// @return uint256 The total staked tokens of all stake owners.\r\n    function getTotalStakedTokens() external view returns (uint256);\r\n\r\n    /// @dev Returns the time that the cooldown period ends (or ended) and the amount of tokens to be released.\r\n    /// @param _stakeOwner address The address to check.\r\n    /// @return cooldownAmount uint256 The total tokens in cooldown.\r\n    /// @return cooldownEndTime uint256 The time when the cooldown period ends (in seconds).\r\n    function getUnstakeStatus(address _stakeOwner) external view returns (uint256 cooldownAmount,\r\n        uint256 cooldownEndTime);\r\n\r\n    /// @dev Migrates the stake of msg.sender from this staking contract to a new approved staking contract.\r\n    /// @param _newStakingContract IMigratableStakingContract The new staking contract which supports stake migration.\r\n    /// @param _amount uint256 The amount of tokens to migrate.\r\n    function migrateStakedTokens(IMigratableStakingContract _newStakingContract, uint256 _amount) external;\r\n\r\n    event Staked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Unstaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Withdrew(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Restaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event MigratedStake(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Contract registry contract interface\r\n/// The contract registry holds Orbs PoS contracts and managers lists\r\n/// @dev The contract registry updates the managed contracts on changes in the contract list\r\n/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \r\n/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \r\n/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\r\n\tevent ManagerChanged(string role, address newManager);\r\n\tevent ContractRegistryUpdated(address newContractRegistry);\r\n\r\n\t/*\r\n\t* External functions\r\n\t*/\r\n\r\n\t/// Updates the contracts address and emits a corresponding event\r\n\t/// @dev governance function called only by the migrationManager or registryAdmin\r\n\t/// @param contractName is the contract name, used to identify it\r\n\t/// @param addr is the contract updated address\r\n\t/// @param managedContract indicates whether the contract is managed by the registry and notified on changes\r\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\r\n\r\n\t/// Returns the current address of the given contracts\r\n\t/// @param contractName is the contract name, used to identify it\r\n\t/// @return addr is the contract updated address\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n\r\n\t/// Returns the list of contract addresses managed by the registry\r\n\t/// @dev Managed contracts are updated on changes in the registry contracts addresses \r\n\t/// @return addrs is the list of managed contracts\r\n\tfunction getManagedContracts() external view returns (address[] memory);\r\n\r\n\t/// Updates a manager address and emits a corresponding event\r\n\t/// @dev governance function called only by the registryAdmin\r\n\t/// @dev the managers list is a flexible list of role to the manager's address\r\n\t/// @param role is the managers' role name, for example \"functionalManager\"\r\n\t/// @param manager is the manager updated address\r\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\r\n\r\n\t/// Returns the current address of the given manager\r\n\t/// @param role is the manager name, used to identify it\r\n\t/// @return addr is the manager updated address\r\n\tfunction getManager(string calldata role) external view returns (address);\r\n\r\n\t/// Locks all the managed contracts \r\n\t/// @dev governance function called only by the migrationManager or registryAdmin\r\n\t/// @dev When set all onlyWhenActive functions will revert\r\n\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\r\n\r\n\t/// Unlocks all the managed contracts \r\n\t/// @dev governance function called only by the migrationManager or registryAdmin\r\n\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\r\n\r\n\t/// Sets a new contract registry to migrate to\r\n\t/// @dev governance function called only by the registryAdmin\r\n\t/// @dev updates the registry address record in all the managed contracts\r\n\t/// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\r\n\t/// @param newRegistry is the new registry contract \r\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n\t/// Returns the previous contract registry address \r\n\t/// @dev used when the setting the contract as a new registry to assure a valid registry\r\n\t/// @return previousContractRegistry is the previous contract registry\r\n\tfunction getPreviousContractRegistry() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableRegistryManagement.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableRegistryManagement is Context {\r\n    address private _registryAdmin;\r\n    address private _pendingRegistryAdmin;\r\n\r\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _registryAdmin = msgSender;\r\n        emit RegistryManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current registryAdmin.\r\n     */\r\n    function registryAdmin() public view returns (address) {\r\n        return _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the registryAdmin.\r\n     */\r\n    modifier onlyRegistryAdmin() {\r\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current registryAdmin.\r\n     */\r\n    function isRegistryAdmin() public view returns (bool) {\r\n        return _msgSender() == _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\r\n     *\r\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\r\n     * thereby removing any functionality that is only available to the registryAdmin.\r\n     */\r\n    function renounceRegistryManagement() public onlyRegistryAdmin {\r\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\r\n        _registryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\r\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\r\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\r\n        _registryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingManager.\r\n     */\r\n    modifier onlyPendingRegistryAdmin() {\r\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current registryAdmin to set the pendingManager address.\r\n     * @param newRegistryAdmin The address to transfer registryManagement to.\r\n     */\r\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\r\n        _pendingRegistryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\r\n     */\r\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\r\n        _transferRegistryManagement(_pendingRegistryAdmin);\r\n        _pendingRegistryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current pendingRegistryAdmin\r\n    */\r\n    function pendingRegistryAdmin() public view returns (address) {\r\n       return _pendingRegistryAdmin;  \r\n    }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Initializable {\r\n\r\n    address private _initializationAdmin;\r\n\r\n    event InitializationComplete();\r\n\r\n    constructor() public{\r\n        _initializationAdmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyInitializationAdmin() {\r\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    function initializationAdmin() public view returns (address) {\r\n        return _initializationAdmin;\r\n    }\r\n\r\n    function initializationComplete() external onlyInitializationAdmin {\r\n        _initializationAdmin = address(0);\r\n        emit InitializationComplete();\r\n    }\r\n\r\n    function isInitializationComplete() public view returns (bool) {\r\n        return _initializationAdmin == address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is WithClaimableRegistryManagement, Initializable {\r\n\r\n    IContractRegistry private contractRegistry;\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\r\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\r\n        setContractRegistry(_contractRegistry);\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationManager {\r\n        require(isMigrationManager(), \"sender is not the migration manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunctionalManager {\r\n        require(isFunctionalManager(), \"sender is not the functional manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\r\n    }\r\n\r\n    function isManager(string memory role) internal view returns (bool) {\r\n        IContractRegistry _contractRegistry = contractRegistry;\r\n        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\r\n    }\r\n\r\n    function isMigrationManager() internal view returns (bool) {\r\n        return isManager('migrationManager');\r\n    }\r\n\r\n    function isFunctionalManager() internal view returns (bool) {\r\n        return isManager('functionalManager');\r\n    }\r\n\r\n    function getProtocolContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"protocol\");\r\n    }\r\n\r\n    function getStakingRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewards\");\r\n    }\r\n\r\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\r\n    }\r\n\r\n    function getCommitteeContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"committee\");\r\n    }\r\n\r\n    function getElectionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"elections\");\r\n    }\r\n\r\n    function getDelegationsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"delegations\");\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"guardiansRegistration\");\r\n    }\r\n\r\n    function getCertificationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certification\");\r\n    }\r\n\r\n    function getStakingContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"staking\");\r\n    }\r\n\r\n    function getSubscriptionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"subscriptions\");\r\n    }\r\n\r\n    function getStakingRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\r\n    }\r\n\r\n    function getGeneralFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"generalFeesWallet\");\r\n    }\r\n\r\n    function getCertifiedFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\r\n    }\r\n\r\n    function getStakingContractHandler() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingContractHandler\");\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    function setContractRegistry(IContractRegistry newContractRegistry) public onlyAdmin {\r\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\r\n        contractRegistry = newContractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\r\n    }\r\n\r\n    function getContractRegistry() public view returns (IContractRegistry) {\r\n        return contractRegistry;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ILockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title lockable contract interface, allows to lock a contract\r\ninterface ILockable {\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n\t/// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external /* onlyMigrationManager */;\r\n\r\n    /// Unlocks the contract \r\n\t/// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external /* onlyMigrationManager */;\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() view external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract Lockable is ILockable, ContractRegistryAccessor {\r\n\r\n    bool public locked;\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\r\n\r\n    function lock() external override onlyMigrationManager {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    function unlock() external override onlyMigrationManager {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    function isLocked() external override view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract ManagedContract is Lockable {\r\n\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\r\n\r\n    function refreshContracts() virtual external {}\r\n\r\n}\r\n\r\n// File: contracts/StakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingRewards is IStakingRewards, ManagedContract {\r\n    using SafeMath for uint256;\r\n    using SafeMath96 for uint96;\r\n\r\n    uint256 constant PERCENT_MILLIE_BASE = 100000;\r\n    uint256 constant TOKEN_BASE = 1e18;\r\n\r\n    struct Settings {\r\n        uint96 annualCap;\r\n        uint32 annualRateInPercentMille;\r\n        uint32 defaultDelegatorsStakingRewardsPercentMille;\r\n        uint32 maxDelegatorsStakingRewardsPercentMille;\r\n        bool rewardAllocationActive;\r\n    }\r\n    Settings settings;\r\n\r\n    IERC20 public token;\r\n\r\n    struct StakingRewardsState {\r\n        uint96 stakingRewardsPerWeight;\r\n        uint96 unclaimedStakingRewards;\r\n        uint32 lastAssigned;\r\n    }\r\n    StakingRewardsState public stakingRewardsState;\r\n\r\n    uint256 public stakingRewardsContractBalance;\r\n\r\n    struct GuardianStakingRewards {\r\n        uint96 delegatorRewardsPerToken;\r\n        uint96 lastStakingRewardsPerWeight;\r\n        uint96 balance;\r\n        uint96 claimed;\r\n    }\r\n    mapping(address => GuardianStakingRewards) public guardiansStakingRewards;\r\n\r\n    struct GuardianRewardSettings {\r\n        uint32 delegatorsStakingRewardsPercentMille;\r\n        bool overrideDefault;\r\n    }\r\n    mapping(address => GuardianRewardSettings) public guardiansRewardSettings;\r\n\r\n    struct DelegatorStakingRewards {\r\n        uint96 balance;\r\n        uint96 lastDelegatorRewardsPerToken;\r\n        uint96 claimed;\r\n    }\r\n    mapping(address => DelegatorStakingRewards) public delegatorsStakingRewards;\r\n\r\n    constructor(\r\n        IContractRegistry _contractRegistry,\r\n        address _registryAdmin,\r\n        IERC20 _token,\r\n        uint32 annualRateInPercentMille,\r\n        uint96 annualCap,\r\n        uint32 defaultDelegatorsStakingRewardsPercentMille,\r\n        uint32 maxDelegatorsStakingRewardsPercentMille,\r\n        IStakingRewards previousRewardsContract,\r\n        address[] memory guardiansToMigrate\r\n    ) ManagedContract(_contractRegistry, _registryAdmin) public {\r\n        require(address(_token) != address(0), \"token must not be 0\");\r\n\r\n        _setAnnualStakingRewardsRate(annualRateInPercentMille, annualCap);\r\n        setMaxDelegatorsStakingRewardsPercentMille(maxDelegatorsStakingRewardsPercentMille);\r\n        setDefaultDelegatorsStakingRewardsPercentMille(defaultDelegatorsStakingRewardsPercentMille);\r\n\r\n        token = _token;\r\n\r\n        if (address(previousRewardsContract) != address(0)) {\r\n            migrateGuardiansSettings(previousRewardsContract, guardiansToMigrate);\r\n        }\r\n    }\r\n\r\n    modifier onlyCommitteeContract() {\r\n        require(msg.sender == address(committeeContract), \"caller is not the elections contract\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyDelegationsContract() {\r\n        require(msg.sender == address(delegationsContract), \"caller is not the delegations contract\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external override onlyWhenActive onlyCommitteeContract {\r\n        uint256 delegatedStake = delegationsContract.getDelegatedStake(guardian);\r\n\r\n        Settings memory _settings = settings;\r\n        StakingRewardsState memory _stakingRewardsState = _updateStakingRewardsState(totalCommitteeWeight, _settings);\r\n        _updateGuardianStakingRewards(guardian, inCommittee, inCommitteeAfter, weight, delegatedStake, _stakingRewardsState, _settings);\r\n    }\r\n\r\n    function delegationWillChange(address guardian, uint256 guardianDelegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external override onlyWhenActive onlyDelegationsContract {\r\n        Settings memory _settings = settings;\r\n        (bool inCommittee, uint256 weight, , uint256 totalCommitteeWeight) = committeeContract.getMemberInfo(guardian);\r\n\r\n        StakingRewardsState memory _stakingRewardsState = _updateStakingRewardsState(totalCommitteeWeight, _settings);\r\n        GuardianStakingRewards memory guardianStakingRewards = _updateGuardianStakingRewards(guardian, inCommittee, inCommittee, weight, guardianDelegatedStake, _stakingRewardsState, _settings);\r\n        _updateDelegatorStakingRewards(delegator, delegatorStake, guardian, guardianStakingRewards);\r\n\r\n        if (nextGuardian != guardian) {\r\n            (inCommittee, weight, , totalCommitteeWeight) = committeeContract.getMemberInfo(nextGuardian);\r\n            GuardianStakingRewards memory nextGuardianStakingRewards = _updateGuardianStakingRewards(nextGuardian, inCommittee, inCommittee, weight, nextGuardianDelegatedStake, _stakingRewardsState, _settings);\r\n            delegatorsStakingRewards[delegator].lastDelegatorRewardsPerToken = nextGuardianStakingRewards.delegatorRewardsPerToken;\r\n        }\r\n    }\r\n\r\n    function getStakingRewardsBalance(address addr) external override view returns (uint256 delegatorStakingRewardsBalance, uint256 guardianStakingRewardsBalance) {\r\n        (DelegatorStakingRewards memory delegatorStakingRewards,,) = getDelegatorStakingRewards(addr, block.timestamp);\r\n        (GuardianStakingRewards memory guardianStakingRewards,,) = getGuardianStakingRewards(addr, block.timestamp); // TODO consider removing, data in state must be up to date at this point\r\n        return (delegatorStakingRewards.balance, guardianStakingRewards.balance);\r\n    }\r\n\r\n    function claimStakingRewards(address addr) external override onlyWhenActive {\r\n        (uint256 guardianRewards, uint256 delegatorRewards) = claimStakingRewardsLocally(addr);\r\n        uint256 total = delegatorRewards.add(guardianRewards);\r\n        if (total == 0) {\r\n            return;\r\n        }\r\n\r\n        uint96 claimedGuardianRewards = guardiansStakingRewards[addr].claimed.add(guardianRewards);\r\n        guardiansStakingRewards[addr].claimed = claimedGuardianRewards;\r\n        uint96 claimedDelegatorRewards = delegatorsStakingRewards[addr].claimed.add(delegatorRewards);\r\n        delegatorsStakingRewards[addr].claimed = claimedDelegatorRewards;\r\n\r\n        require(token.approve(address(stakingContract), total), \"claimStakingRewards: approve failed\");\r\n\r\n        address[] memory addrs = new address[](1);\r\n        addrs[0] = addr;\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = total;\r\n        stakingContract.distributeRewards(total, addrs, amounts);\r\n\r\n        emit StakingRewardsClaimed(addr, delegatorRewards, guardianRewards, claimedDelegatorRewards, claimedGuardianRewards);\r\n    }\r\n\r\n    function getGuardianStakingRewardsData(address guardian) external override view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        uint256 delegatorRewardsPerToken,\r\n        uint256 delegatorRewardsPerTokenDelta,\r\n        uint256 lastStakingRewardsPerWeight,\r\n        uint256 stakingRewardsPerWeightDelta\r\n    ) {\r\n        (GuardianStakingRewards memory rewards, uint256 _stakingRewardsPerWeightDelta, uint256 _delegatorRewardsPerTokenDelta) = getGuardianStakingRewards(guardian, block.timestamp);\r\n        return (rewards.balance, rewards.claimed, rewards.delegatorRewardsPerToken, _delegatorRewardsPerTokenDelta, rewards.lastStakingRewardsPerWeight, _stakingRewardsPerWeightDelta);\r\n    }\r\n\r\n    function getDelegatorStakingRewardsData(address delegator) external override view returns (\r\n        uint256 balance,\r\n        uint256 claimed,\r\n        address guardian,\r\n        uint256 lastDelegatorRewardsPerToken,\r\n        uint256 delegatorRewardsPerTokenDelta\r\n    ) {\r\n        (DelegatorStakingRewards memory rewards, address _guardian, uint256 _delegatorRewardsPerTokenDelta) = getDelegatorStakingRewards(delegator, block.timestamp);\r\n        return (rewards.balance, rewards.claimed, _guardian, rewards.lastDelegatorRewardsPerToken, _delegatorRewardsPerTokenDelta);\r\n    }\r\n\r\n    function estimateFutureRewards(address addr, uint256 duration) external override view returns (uint256 estimatedDelegatorStakingRewards, uint256 estimatedGuardianStakingRewards) {\r\n        (GuardianStakingRewards memory guardianRewardsNow,,) = getGuardianStakingRewards(addr, block.timestamp);\r\n        (DelegatorStakingRewards memory delegatorRewardsNow,,) = getDelegatorStakingRewards(addr, block.timestamp);\r\n        (GuardianStakingRewards memory guardianRewardsFuture,,) = getGuardianStakingRewards(addr, block.timestamp.add(duration));\r\n        (DelegatorStakingRewards memory delegatorRewardsFuture,,) = getDelegatorStakingRewards(addr, block.timestamp.add(duration));\r\n\r\n        estimatedDelegatorStakingRewards = delegatorRewardsFuture.balance.sub(delegatorRewardsNow.balance);\r\n        estimatedGuardianStakingRewards = guardianRewardsFuture.balance.sub(guardianRewardsNow.balance);\r\n    }\r\n\r\n    function getStakingRewardsState() public override view returns (\r\n        uint96 stakingRewardsPerWeight,\r\n        uint96 unclaimedStakingRewards\r\n    ) {\r\n        (, , uint totalCommitteeWeight) = committeeContract.getCommitteeStats();\r\n        (StakingRewardsState memory _stakingRewardsState,) = _getStakingRewardsState(totalCommitteeWeight, block.timestamp, settings);\r\n        stakingRewardsPerWeight = _stakingRewardsState.stakingRewardsPerWeight;\r\n        unclaimedStakingRewards = _stakingRewardsState.unclaimedStakingRewards;\r\n    }\r\n\r\n    function getCurrentStakingRewardsRatePercentMille() external override view returns (uint256 annualRate) {\r\n        (, , uint totalCommitteeWeight) = committeeContract.getCommitteeStats();\r\n        annualRate = _getAnnualRewardPerWeight(totalCommitteeWeight, settings).mul(PERCENT_MILLIE_BASE).div(TOKEN_BASE);\r\n    }\r\n    \r\n    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external override onlyWhenActive {\r\n        require(delegatorRewardsPercentMille <= PERCENT_MILLIE_BASE, \"delegatorRewardsPercentMille must be 100000 at most\");\r\n        require(delegatorRewardsPercentMille <= settings.maxDelegatorsStakingRewardsPercentMille, \"delegatorRewardsPercentMille must not be larger than maxDelegatorsStakingRewardsPercentMille\");\r\n        updateDelegatorStakingRewards(msg.sender);\r\n        _setGuardianDelegatorsStakingRewardsPercentMille(msg.sender, delegatorRewardsPercentMille);\r\n    }\r\n\r\n    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external override view returns (uint256 delegatorRewardsRatioPercentMille) {\r\n        return _getGuardianDelegatorsStakingRewardsPercentMille(guardian, settings);\r\n    }\r\n\r\n    function getStakingRewardsWalletAllocatedTokens() external override view returns (uint256 allocated) {\r\n        (, uint96 unclaimedStakingRewards) = getStakingRewardsState();\r\n        return uint256(unclaimedStakingRewards).sub(stakingRewardsContractBalance);\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    function migrateRewardsBalance(address addr) external override {\r\n        require(!settings.rewardAllocationActive, \"Reward distribution must be deactivated for migration\");\r\n\r\n        IStakingRewards currentRewardsContract = IStakingRewards(getStakingRewardsContract());\r\n        require(address(currentRewardsContract) != address(this), \"New rewards contract is not set\");\r\n\r\n        (uint256 guardianRewards, uint256 delegatorRewards) = claimStakingRewardsLocally(addr);\r\n\r\n        require(token.approve(address(currentRewardsContract), guardianRewards.add(delegatorRewards)), \"migrateRewardsBalance: approve failed\");\r\n        currentRewardsContract.acceptRewardsBalanceMigration(addr, guardianRewards, delegatorRewards);\r\n\r\n        emit StakingRewardsBalanceMigrated(addr, guardianRewards, delegatorRewards, address(currentRewardsContract));\r\n    }\r\n\r\n    function acceptRewardsBalanceMigration(address addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards) external override {\r\n        guardiansStakingRewards[addr].balance = guardiansStakingRewards[addr].balance.add(guardianStakingRewards);\r\n        delegatorsStakingRewards[addr].balance = delegatorsStakingRewards[addr].balance.add(delegatorStakingRewards);\r\n\r\n        uint orbsTransferAmount = guardianStakingRewards.add(delegatorStakingRewards);\r\n        if (orbsTransferAmount > 0) {\r\n            require(token.transferFrom(msg.sender, address(this), orbsTransferAmount), \"acceptRewardBalanceMigration: transfer failed\");\r\n        }\r\n\r\n        emit StakingRewardsBalanceMigrationAccepted(msg.sender, addr, guardianStakingRewards, delegatorStakingRewards);\r\n    }\r\n\r\n    function emergencyWithdraw(address erc20) external override onlyMigrationManager {\r\n        IERC20 _token = IERC20(erc20);\r\n        emit EmergencyWithdrawal(msg.sender, address(_token));\r\n        require(_token.transfer(msg.sender, _token.balanceOf(address(this))), \"StakingRewards::emergencyWithdraw - transfer failed\");\r\n    }\r\n\r\n    function activateRewardDistribution(uint startTime) external override onlyMigrationManager {\r\n        require(!settings.rewardAllocationActive, \"reward distribution is already activated\");\r\n\r\n        stakingRewardsState.lastAssigned = uint32(startTime);\r\n        settings.rewardAllocationActive = true;\r\n\r\n        emit RewardDistributionActivated(startTime);\r\n    }\r\n\r\n    function deactivateRewardDistribution() external override onlyMigrationManager {\r\n        require(settings.rewardAllocationActive, \"reward distribution is already deactivated\");\r\n\r\n        StakingRewardsState memory _stakingRewardsState = updateStakingRewardsState();\r\n\r\n        settings.rewardAllocationActive = false;\r\n\r\n        withdrawRewardsWalletAllocatedTokens(_stakingRewardsState);\r\n\r\n        emit RewardDistributionDeactivated();\r\n    }\r\n\r\n    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) public override onlyFunctionalManager {\r\n        require(defaultDelegatorsStakingRewardsPercentMille <= PERCENT_MILLIE_BASE, \"defaultDelegatorsStakingRewardsPercentMille must not be larger than 100000\");\r\n        require(defaultDelegatorsStakingRewardsPercentMille <= settings.maxDelegatorsStakingRewardsPercentMille, \"defaultDelegatorsStakingRewardsPercentMille must not be larger than maxDelegatorsStakingRewardsPercentMille\");\r\n        settings.defaultDelegatorsStakingRewardsPercentMille = defaultDelegatorsStakingRewardsPercentMille;\r\n        emit DefaultDelegatorsStakingRewardsChanged(defaultDelegatorsStakingRewardsPercentMille);\r\n    }\r\n\r\n    function getDefaultDelegatorsStakingRewardsPercentMille() public override view returns (uint32) {\r\n        return settings.defaultDelegatorsStakingRewardsPercentMille;\r\n    }\r\n\r\n    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) public override onlyFunctionalManager {\r\n        require(maxDelegatorsStakingRewardsPercentMille <= PERCENT_MILLIE_BASE, \"maxDelegatorsStakingRewardsPercentMille must not be larger than 100000\");\r\n        settings.maxDelegatorsStakingRewardsPercentMille = maxDelegatorsStakingRewardsPercentMille;\r\n        emit MaxDelegatorsStakingRewardsChanged(maxDelegatorsStakingRewardsPercentMille);\r\n    }\r\n\r\n    function getMaxDelegatorsStakingRewardsPercentMille() public override view returns (uint32) {\r\n        return settings.maxDelegatorsStakingRewardsPercentMille;\r\n    }\r\n\r\n    function setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) external override onlyFunctionalManager {\r\n        updateStakingRewardsState();\r\n        return _setAnnualStakingRewardsRate(annualRateInPercentMille, annualCap);\r\n    }\r\n\r\n    function getAnnualStakingRewardsRatePercentMille() external override view returns (uint32) {\r\n        return settings.annualRateInPercentMille;\r\n    }\r\n\r\n    function getAnnualStakingRewardsCap() external override view returns (uint256) {\r\n        return settings.annualCap;\r\n    }\r\n\r\n    function isRewardAllocationActive() external override view returns (bool) {\r\n        return settings.rewardAllocationActive;\r\n    }\r\n\r\n    function getSettings() external override view returns (\r\n        uint annualStakingRewardsCap,\r\n        uint32 annualStakingRewardsRatePercentMille,\r\n        uint32 defaultDelegatorsStakingRewardsPercentMille,\r\n        uint32 maxDelegatorsStakingRewardsPercentMille,\r\n        bool rewardAllocationActive\r\n    ) {\r\n        Settings memory _settings = settings;\r\n        annualStakingRewardsCap = _settings.annualCap;\r\n        annualStakingRewardsRatePercentMille = _settings.annualRateInPercentMille;\r\n        defaultDelegatorsStakingRewardsPercentMille = _settings.defaultDelegatorsStakingRewardsPercentMille;\r\n        maxDelegatorsStakingRewardsPercentMille = _settings.maxDelegatorsStakingRewardsPercentMille;\r\n        rewardAllocationActive = _settings.rewardAllocationActive;\r\n    }\r\n\r\n    /*\r\n    * Private functions\r\n    */\r\n\r\n    // Global state\r\n\r\n    function _getAnnualRewardPerWeight(uint256 totalCommitteeWeight, Settings memory _settings) private pure returns (uint256) {\r\n        return totalCommitteeWeight == 0 ? 0 : Math.min(uint256(_settings.annualRateInPercentMille).mul(TOKEN_BASE).div(PERCENT_MILLIE_BASE), uint256(_settings.annualCap).mul(TOKEN_BASE).div(totalCommitteeWeight));\r\n    }\r\n\r\n    function calcStakingRewardPerWeightDelta(uint256 totalCommitteeWeight, uint duration, Settings memory _settings) private pure returns (uint256 stakingRewardsPerWeightDelta) {\r\n        stakingRewardsPerWeightDelta = 0;\r\n\r\n        if (totalCommitteeWeight > 0) {\r\n            uint annualRewardPerWeight = _getAnnualRewardPerWeight(totalCommitteeWeight, _settings);\r\n            stakingRewardsPerWeightDelta = annualRewardPerWeight.mul(duration).div(365 days);\r\n        }\r\n    }\r\n\r\n    function _getStakingRewardsState(uint256 totalCommitteeWeight, uint256 currentTime, Settings memory _settings) private view returns (StakingRewardsState memory _stakingRewardsState, uint256 allocatedRewards) {\r\n        _stakingRewardsState = stakingRewardsState;\r\n        if (_settings.rewardAllocationActive) {\r\n            uint delta = calcStakingRewardPerWeightDelta(totalCommitteeWeight, currentTime.sub(stakingRewardsState.lastAssigned), _settings);\r\n            _stakingRewardsState.stakingRewardsPerWeight = stakingRewardsState.stakingRewardsPerWeight.add(delta);\r\n            _stakingRewardsState.lastAssigned = uint32(currentTime);\r\n            allocatedRewards = delta.mul(totalCommitteeWeight).div(TOKEN_BASE);\r\n            _stakingRewardsState.unclaimedStakingRewards = _stakingRewardsState.unclaimedStakingRewards.add(allocatedRewards);\r\n        }\r\n    }\r\n\r\n    function _updateStakingRewardsState(uint256 totalCommitteeWeight, Settings memory _settings) private returns (StakingRewardsState memory _stakingRewardsState) {\r\n        if (!_settings.rewardAllocationActive) {\r\n            return stakingRewardsState;\r\n        }\r\n\r\n        uint allocatedRewards;\r\n        (_stakingRewardsState, allocatedRewards) = _getStakingRewardsState(totalCommitteeWeight, block.timestamp, _settings);\r\n        stakingRewardsState = _stakingRewardsState;\r\n        emit StakingRewardsAllocated(allocatedRewards, _stakingRewardsState.stakingRewardsPerWeight);\r\n    }\r\n\r\n    function updateStakingRewardsState() private returns (StakingRewardsState memory _stakingRewardsState) {\r\n        (, , uint totalCommitteeWeight) = committeeContract.getCommitteeStats();\r\n        return _updateStakingRewardsState(totalCommitteeWeight, settings);\r\n    }\r\n\r\n    // Guardian state\r\n\r\n    function _getGuardianStakingRewards(address guardian, bool inCommittee, bool inCommitteeAfter, uint256 guardianWeight, uint256 guardianDelegatedStake, StakingRewardsState memory _stakingRewardsState, Settings memory _settings) private view returns (GuardianStakingRewards memory guardianStakingRewards, uint256 rewardsAdded, uint256 stakingRewardsPerWeightDelta, uint256 delegatorRewardsPerTokenDelta) {\r\n        guardianStakingRewards = guardiansStakingRewards[guardian];\r\n\r\n        if (inCommittee) {\r\n            stakingRewardsPerWeightDelta = uint256(_stakingRewardsState.stakingRewardsPerWeight).sub(guardianStakingRewards.lastStakingRewardsPerWeight);\r\n            uint256 totalRewards = stakingRewardsPerWeightDelta.mul(guardianWeight);\r\n\r\n            uint256 delegatorRewardsRatioPercentMille = _getGuardianDelegatorsStakingRewardsPercentMille(guardian, _settings);\r\n\r\n            delegatorRewardsPerTokenDelta = guardianDelegatedStake == 0 ? 0 : totalRewards\r\n                .div(guardianDelegatedStake)\r\n                .mul(delegatorRewardsRatioPercentMille)\r\n                .div(PERCENT_MILLIE_BASE);\r\n\r\n            uint256 guardianCutPercentMille = PERCENT_MILLIE_BASE.sub(delegatorRewardsRatioPercentMille);\r\n\r\n            rewardsAdded = totalRewards\r\n                    .mul(guardianCutPercentMille)\r\n                    .div(PERCENT_MILLIE_BASE)\r\n                    .div(TOKEN_BASE);\r\n\r\n            guardianStakingRewards.delegatorRewardsPerToken = guardianStakingRewards.delegatorRewardsPerToken.add(delegatorRewardsPerTokenDelta);\r\n            guardianStakingRewards.balance = guardianStakingRewards.balance.add(rewardsAdded);\r\n        }\r\n\r\n        guardianStakingRewards.lastStakingRewardsPerWeight = inCommitteeAfter ? _stakingRewardsState.stakingRewardsPerWeight : 0;\r\n    }\r\n\r\n    function getGuardianStakingRewards(address guardian, uint256 currentTime) private view returns (GuardianStakingRewards memory guardianStakingRewards, uint256 stakingRewardsPerWeightDelta, uint256 delegatorRewardsPerTokenDelta) {\r\n        Settings memory _settings = settings;\r\n\r\n        (bool inCommittee, uint256 guardianWeight, ,uint256 totalCommitteeWeight) = committeeContract.getMemberInfo(guardian);\r\n        uint256 guardianDelegatedStake = delegationsContract.getDelegatedStake(guardian);\r\n\r\n        (StakingRewardsState memory _stakingRewardsState,) = _getStakingRewardsState(totalCommitteeWeight, currentTime, _settings);\r\n        (guardianStakingRewards,,stakingRewardsPerWeightDelta,delegatorRewardsPerTokenDelta) = _getGuardianStakingRewards(guardian, inCommittee, inCommittee, guardianWeight, guardianDelegatedStake, _stakingRewardsState, _settings);\r\n    }\r\n\r\n    function _updateGuardianStakingRewards(address guardian, bool inCommittee, bool inCommitteeAfter, uint256 guardianWeight, uint256 guardianDelegatedStake, StakingRewardsState memory _stakingRewardsState, Settings memory _settings) private returns (GuardianStakingRewards memory guardianStakingRewards) {\r\n        uint256 guardianStakingRewardsAdded;\r\n        uint256 stakingRewardsPerWeightDelta;\r\n        uint256 delegatorRewardsPerTokenDelta;\r\n        (guardianStakingRewards, guardianStakingRewardsAdded, stakingRewardsPerWeightDelta, delegatorRewardsPerTokenDelta) = _getGuardianStakingRewards(guardian, inCommittee, inCommitteeAfter, guardianWeight, guardianDelegatedStake, _stakingRewardsState, _settings);\r\n        guardiansStakingRewards[guardian] = guardianStakingRewards;\r\n        emit GuardianStakingRewardsAssigned(guardian, guardianStakingRewardsAdded, guardianStakingRewards.claimed.add(guardianStakingRewards.balance), guardianStakingRewards.delegatorRewardsPerToken, delegatorRewardsPerTokenDelta, _stakingRewardsState.stakingRewardsPerWeight, stakingRewardsPerWeightDelta);\r\n    }\r\n\r\n    function updateGuardianStakingRewards(address guardian, StakingRewardsState memory _stakingRewardsState, Settings memory _settings) private returns (GuardianStakingRewards memory guardianStakingRewards) {\r\n        (bool inCommittee, uint256 guardianWeight,,) = committeeContract.getMemberInfo(guardian);\r\n        return _updateGuardianStakingRewards(guardian, inCommittee, inCommittee, guardianWeight, delegationsContract.getDelegatedStake(guardian), _stakingRewardsState, _settings);\r\n    }\r\n\r\n    // Delegator state\r\n\r\n    function _getDelegatorStakingRewards(address delegator, uint256 delegatorStake, GuardianStakingRewards memory guardianStakingRewards) private view returns (DelegatorStakingRewards memory delegatorStakingRewards, uint256 delegatorRewardsAdded, uint256 delegatorRewardsPerTokenDelta) {\r\n        delegatorStakingRewards = delegatorsStakingRewards[delegator];\r\n\r\n        delegatorRewardsPerTokenDelta = uint256(guardianStakingRewards.delegatorRewardsPerToken)\r\n            .sub(delegatorStakingRewards.lastDelegatorRewardsPerToken);\r\n        delegatorRewardsAdded = delegatorRewardsPerTokenDelta\r\n            .mul(delegatorStake)\r\n            .div(TOKEN_BASE);\r\n\r\n        delegatorStakingRewards.balance = delegatorStakingRewards.balance.add(delegatorRewardsAdded);\r\n        delegatorStakingRewards.lastDelegatorRewardsPerToken = guardianStakingRewards.delegatorRewardsPerToken;\r\n    }\r\n\r\n    function getDelegatorStakingRewards(address delegator, uint256 currentTime) private view returns (DelegatorStakingRewards memory delegatorStakingRewards, address guardian, uint256 delegatorStakingRewardsPerTokenDelta) {\r\n        uint256 delegatorStake;\r\n        (guardian, delegatorStake) = delegationsContract.getDelegationInfo(delegator);\r\n        (GuardianStakingRewards memory guardianStakingRewards,,) = getGuardianStakingRewards(guardian, currentTime);\r\n\r\n        (delegatorStakingRewards,,delegatorStakingRewardsPerTokenDelta) = _getDelegatorStakingRewards(delegator, delegatorStake, guardianStakingRewards);\r\n    }\r\n\r\n    function _updateDelegatorStakingRewards(address delegator, uint256 delegatorStake, address guardian, GuardianStakingRewards memory guardianStakingRewards) private {\r\n        uint256 delegatorStakingRewardsAdded;\r\n        uint256 delegatorRewardsPerTokenDelta;\r\n        DelegatorStakingRewards memory delegatorStakingRewards;\r\n        (delegatorStakingRewards, delegatorStakingRewardsAdded, delegatorRewardsPerTokenDelta) = _getDelegatorStakingRewards(delegator, delegatorStake, guardianStakingRewards);\r\n        delegatorsStakingRewards[delegator] = delegatorStakingRewards;\r\n\r\n        emit DelegatorStakingRewardsAssigned(delegator, delegatorStakingRewardsAdded, delegatorStakingRewards.claimed.add(delegatorStakingRewards.balance), guardian, guardianStakingRewards.delegatorRewardsPerToken, delegatorRewardsPerTokenDelta);\r\n    }\r\n\r\n    function updateDelegatorStakingRewards(address delegator) private {\r\n        Settings memory _settings = settings;\r\n\r\n        (, , uint totalCommitteeWeight) = committeeContract.getCommitteeStats();\r\n        StakingRewardsState memory _stakingRewardsState = _updateStakingRewardsState(totalCommitteeWeight, _settings);\r\n\r\n        (address guardian, uint delegatorStake) = delegationsContract.getDelegationInfo(delegator);\r\n        GuardianStakingRewards memory guardianRewards = updateGuardianStakingRewards(guardian, _stakingRewardsState, _settings);\r\n\r\n        _updateDelegatorStakingRewards(delegator, delegatorStake, guardian, guardianRewards);\r\n    }\r\n\r\n    // Guardian settings\r\n\r\n    function _getGuardianDelegatorsStakingRewardsPercentMille(address guardian, Settings memory _settings) private view returns (uint256 delegatorRewardsRatioPercentMille) {\r\n        GuardianRewardSettings memory guardianSettings = guardiansRewardSettings[guardian];\r\n        delegatorRewardsRatioPercentMille =  guardianSettings.overrideDefault ? guardianSettings.delegatorsStakingRewardsPercentMille : _settings.defaultDelegatorsStakingRewardsPercentMille;\r\n        return Math.min(delegatorRewardsRatioPercentMille, _settings.maxDelegatorsStakingRewardsPercentMille);\r\n    }\r\n\r\n    function migrateGuardiansSettings(IStakingRewards previousRewardsContract, address[] memory guardiansToMigrate) private {\r\n        for (uint i = 0; i < guardiansToMigrate.length; i++) {\r\n            _setGuardianDelegatorsStakingRewardsPercentMille(guardiansToMigrate[i], uint32(previousRewardsContract.getGuardianDelegatorsStakingRewardsPercentMille(guardiansToMigrate[i])));\r\n        }\r\n    }\r\n\r\n    // Governance and misc.\r\n\r\n    function _setAnnualStakingRewardsRate(uint32 annualRateInPercentMille, uint96 annualCap) private {\r\n        Settings memory _settings = settings;\r\n        _settings.annualRateInPercentMille = annualRateInPercentMille;\r\n        _settings.annualCap = annualCap;\r\n        settings = _settings;\r\n\r\n        emit AnnualStakingRewardsRateChanged(annualRateInPercentMille, annualCap);\r\n    }\r\n\r\n    function _setGuardianDelegatorsStakingRewardsPercentMille(address guardian, uint32 delegatorRewardsPercentMille) private {\r\n        guardiansRewardSettings[guardian] = GuardianRewardSettings({\r\n            overrideDefault: true,\r\n            delegatorsStakingRewardsPercentMille: delegatorRewardsPercentMille\r\n            });\r\n\r\n        emit GuardianDelegatorsStakingRewardsPercentMilleUpdated(guardian, delegatorRewardsPercentMille);\r\n    }\r\n\r\n    function claimStakingRewardsLocally(address addr) private returns (uint256 guardianRewards, uint256 delegatorRewards) {\r\n        updateDelegatorStakingRewards(addr);\r\n\r\n        guardianRewards = guardiansStakingRewards[addr].balance;\r\n        guardiansStakingRewards[addr].balance = 0;\r\n\r\n        delegatorRewards = delegatorsStakingRewards[addr].balance;\r\n        delegatorsStakingRewards[addr].balance = 0;\r\n\r\n        uint256 total = delegatorRewards.add(guardianRewards);\r\n\r\n        StakingRewardsState memory _stakingRewardsState = stakingRewardsState;\r\n\r\n        uint256 _stakingRewardsContractBalance = stakingRewardsContractBalance;\r\n        if (total > _stakingRewardsContractBalance) {\r\n            _stakingRewardsContractBalance = withdrawRewardsWalletAllocatedTokens(_stakingRewardsState);\r\n        }\r\n\r\n        stakingRewardsContractBalance = _stakingRewardsContractBalance.sub(total);\r\n        stakingRewardsState.unclaimedStakingRewards = _stakingRewardsState.unclaimedStakingRewards.sub(total);\r\n    }\r\n\r\n    function withdrawRewardsWalletAllocatedTokens(StakingRewardsState memory _stakingRewardsState) private returns (uint256 _stakingRewardsContractBalance){\r\n        _stakingRewardsContractBalance = stakingRewardsContractBalance;\r\n        uint256 allocated = _stakingRewardsState.unclaimedStakingRewards.sub(_stakingRewardsContractBalance);\r\n        stakingRewardsWallet.withdraw(allocated);\r\n        _stakingRewardsContractBalance = _stakingRewardsContractBalance.add(allocated);\r\n        stakingRewardsContractBalance = _stakingRewardsContractBalance;\r\n    }\r\n\r\n    /*\r\n     * Contracts topology / registry interface\r\n     */\r\n\r\n    ICommittee committeeContract;\r\n    IDelegations delegationsContract;\r\n    IProtocolWallet stakingRewardsWallet;\r\n    IStakingContract stakingContract;\r\n    function refreshContracts() external override {\r\n        committeeContract = ICommittee(getCommitteeContract());\r\n        delegationsContract = IDelegations(getDelegationsContract());\r\n        stakingRewardsWallet = IProtocolWallet(getStakingRewardsWallet());\r\n        stakingContract = IStakingContract(getStakingContract());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"annualRateInPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"annualCap\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"defaultDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"contract IStakingRewards\",\"name\":\"previousRewardsContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardiansToMigrate\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"annualRateInPercentMille\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"annualCap\",\"type\":\"uint256\"}],\"name\":\"AnnualStakingRewardsRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"defaultDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"DefaultDelegatorsStakingRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAwarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerTokenDelta\",\"type\":\"uint256\"}],\"name\":\"DelegatorStakingRewardsAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorsStakingRewardsPercentMille\",\"type\":\"uint256\"}],\"name\":\"GuardianDelegatorsStakingRewardsPercentMilleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAwarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerTokenDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingRewardsPerWeightDelta\",\"type\":\"uint256\"}],\"name\":\"GuardianStakingRewardsAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"MaxDelegatorsStakingRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"RegistryManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"RewardDistributionActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardDistributionDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocatedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingRewardsPerWeight\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guardianStakingRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorStakingRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toRewardsContract\",\"type\":\"address\"}],\"name\":\"StakingRewardsBalanceMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guardianStakingRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatorStakingRewards\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsBalanceMigrationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedDelegatorRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedGuardianRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedDelegatorRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimedGuardianRewards\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guardianStakingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorStakingRewards\",\"type\":\"uint256\"}],\"name\":\"acceptRewardsBalanceMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"activateRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitteeWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inCommittee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inCommitteeAfter\",\"type\":\"bool\"}],\"name\":\"committeeMembershipWillChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guardianDelegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegatorStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nextGuardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextGuardianDelegatedStake\",\"type\":\"uint256\"}],\"name\":\"delegationWillChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatorsStakingRewards\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"lastDelegatorRewardsPerToken\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimed\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"estimateFutureRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedDelegatorStakingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGuardianStakingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAnnualStakingRewardsCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAnnualStakingRewardsRatePercentMille\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStakingRewardsRatePercentMille\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"annualRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultDelegatorsStakingRewardsPercentMille\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getDelegatorStakingRewardsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastDelegatorRewardsPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerTokenDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"getGuardianDelegatorsStakingRewardsPercentMille\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delegatorRewardsRatioPercentMille\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"getGuardianStakingRewardsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorRewardsPerTokenDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakingRewardsPerWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRewardsPerWeightDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDelegatorsStakingRewardsPercentMille\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"annualStakingRewardsCap\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"annualStakingRewardsRatePercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"defaultDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"rewardAllocationActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStakingRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delegatorStakingRewardsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianStakingRewardsBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRewardsState\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"stakingRewardsPerWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unclaimedStakingRewards\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingRewardsWalletAllocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guardiansRewardSettings\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"delegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"overrideDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guardiansStakingRewards\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"delegatorRewardsPerToken\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"lastStakingRewardsPerWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimed\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardAllocationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"migrateRewardsBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRegistryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"annualRateInPercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"annualCap\",\"type\":\"uint96\"}],\"name\":\"setAnnualStakingRewardsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"newContractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"defaultDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"setDefaultDelegatorsStakingRewardsPercentMille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delegatorRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"setGuardianDelegatorsStakingRewardsPercentMille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"setMaxDelegatorsStakingRewardsPercentMille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsState\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"stakingRewardsPerWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unclaimedStakingRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"lastAssigned\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"transferRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingRewards","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000005454223e3078db87e55a15be541cc925f3702eb0000000000000000000000000628e8c4d1611ed5b748f59f5ce694809af2f91d4000000000000000000000000ff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa0000000000000000000000000000000000000000000000000000000000002ee000000000000000000000000000000000000000000000028a857425466f800000000000000000000000000000000000000000000000000000000000000001046b000000000000000000000000000000000000000000000000000000000001046b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://864872014123c53124ca642277db138189d6416845367d562d366e2f8096e7e3"}]}