{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/IWhitelisted.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IWhitelisted {\r\n\r\n    function hasRole(\r\n        bytes32 role,\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function WHITELISTED_ROLE() external view returns(bytes32);\r\n}\r\n\r\n// File: original_contracts/lib/IExchange.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n* @dev This interface should be implemented by all exchanges which needs to integrate with the paraswap protocol\r\n*/\r\ninterface IExchange {\r\n\r\n    /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable returns (uint256);\r\n\r\n  /**\r\n   * @dev The function which performs the swap on an exchange.\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Max Amount of source tokens to be swapped\r\n   * @param toAmount Destination token amount expected out of this swap\r\n   * @param exchange Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap\r\n   * @param payload Any exchange specific data which is required can be passed in this argument in encoded format which\r\n   * will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism\r\n   */\r\n    function buy(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address exchange,\r\n        bytes calldata payload) external payable returns (uint256);\r\n\r\n    /**\r\n   * @dev This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information\r\n   * encoded in payload param of swap will calculated in this case\r\n   * Exchange needs to implement this method in order to support swapping of tokens through it\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   */\r\n    function onChainSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    ) external payable returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: original_contracts/ITokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface ITokenTransferProxy {\r\n\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external;\r\n\r\n    function freeGSTTokens(uint256 tokensToFree) external;\r\n}\r\n\r\n// File: original_contracts/lib/Utils.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    uint256 constant MAX_UINT = 2 ** 256 - 1;\r\n\r\n    /**\r\n   * @param fromToken Address of the source token\r\n   * @param toToken Address of the destination token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param beneficiary Beneficiary address\r\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\r\n   * @param referrer referral id\r\n   * @param path Route to be taken for this swap to take place\r\n\r\n   */\r\n    struct SellData {\r\n        IERC20 fromToken;\r\n        IERC20 toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        Utils.Path[] path;\r\n\r\n    }\r\n\r\n    struct BuyData {\r\n        IERC20 fromToken;\r\n        IERC20 toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        address payable beneficiary;\r\n        string referrer;\r\n        Utils.BuyRoute[] route;\r\n    }\r\n\r\n    struct Route {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    struct Path {\r\n        address to;\r\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\r\n        Route[] routes;\r\n    }\r\n\r\n    struct BuyRoute {\r\n        address payable exchange;\r\n        address targetExchange;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\r\n\r\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\r\n\r\n    function approve(\r\n        address addressToApprove,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token != ETH_ADDRESS) {\r\n            IERC20 _token = IERC20(token);\r\n\r\n            uint allowance = _token.allowance(address(this), addressToApprove);\r\n\r\n            if (allowance < amount) {\r\n                _token.safeApprove(addressToApprove, 0);\r\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    internal\r\n    {\r\n        if (amount > 0) {\r\n            if (token == ETH_ADDRESS) {\r\n                destination.call{value: amount}(\"\");\r\n            }\r\n            else {\r\n                IERC20(token).safeTransfer(destination, amount);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to refund gas using gas tokens\r\n    */\r\n    function refundGas(\r\n        address tokenProxy,\r\n        uint256 initialGas,\r\n        uint256 mintPrice\r\n    )\r\n        internal\r\n    {\r\n\r\n        uint256 mintBase = 32254;\r\n        uint256 mintToken = 36543;\r\n        uint256 freeBase = 14154;\r\n        uint256 freeToken = 6870;\r\n        uint256 reimburse = 24000;\r\n\r\n        uint256 tokens = initialGas.sub(\r\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\r\n        );\r\n\r\n        uint256 mintCost = mintBase.add(tokens.mul(mintToken));\r\n        uint256 freeCost = freeBase.add(tokens.mul(freeToken));\r\n        uint256 maxreimburse = tokens.mul(reimburse);\r\n\r\n        uint256 efficiency = maxreimburse.mul(tx.gasprice).mul(100).div(\r\n            mintCost.mul(mintPrice).add(freeCost.mul(tx.gasprice))\r\n        );\r\n\r\n        if (efficiency > 100) {\r\n            freeGasTokens(tokenProxy, tokens);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to free gas tokens\r\n    */\r\n    function freeGasTokens(address tokenProxy, uint256 tokens) internal {\r\n\r\n        uint256 tokensToFree = tokens;\r\n        uint256 safeNumTokens = 0;\r\n        uint256 gas = gasleft();\r\n\r\n        if (gas >= 27710) {\r\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\r\n        }\r\n\r\n        if (tokensToFree > safeNumTokens) {\r\n            tokensToFree = safeNumTokens;\r\n        }\r\n\r\n        ITokenTransferProxy(tokenProxy).freeGSTTokens(tokensToFree);\r\n\r\n    }\r\n}\r\n\r\n// File: original_contracts/IGST2.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IGST2 {\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: original_contracts/TokenTransferProxy.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Allows owner of the contract to transfer tokens on behalf of user.\r\n* User will need to approve this contract to spend tokens on his/her behalf\r\n* on Paraswap platform\r\n*/\r\ncontract TokenTransferProxy is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IGST2 private _gst2;\r\n\r\n    address private _gstHolder;\r\n\r\n    constructor(address gst2, address gstHolder) public {\r\n        _gst2 = IGST2(gst2);\r\n        _gstHolder = gstHolder;\r\n    }\r\n\r\n    function getGSTHolder() external view returns(address) {\r\n        return _gstHolder;\r\n    }\r\n\r\n    function getGST() external view returns(address) {\r\n        return address(_gst2);\r\n    }\r\n\r\n    function changeGSTTokenHolder(address gstHolder) external onlyOwner {\r\n        _gstHolder = gstHolder;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens on user's behalf\r\n    * @dev Swapper contract will be the owner of this contract\r\n    * @param token Address of the token\r\n    * @param from Address from which tokens will be transferred\r\n    * @param to Receipent address of the tokens\r\n    * @param amount Amount of tokens to transfer\r\n    */\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(token).safeTransferFrom(from, to, amount);\r\n    }\r\n\r\n    function freeGSTTokens(uint256 tokensToFree) external onlyOwner {\r\n        _gst2.freeFromUpTo(_gstHolder, tokensToFree);\r\n    }\r\n\r\n}\r\n\r\n// File: original_contracts/IPartnerRegistry.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartnerRegistry {\r\n\r\n    function getPartnerContract(string calldata referralId) external view returns(address);\r\n\r\n    function addPartner(\r\n        string calldata referralId,\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 paraswapShare,\r\n        uint256 partnerShare,\r\n        address owner,\r\n        uint256 timelock,\r\n        uint256 maxFee,\r\n        bool positiveSlippageToUser\r\n    )\r\n        external;\r\n\r\n    function removePartner(string calldata referralId) external;\r\n}\r\n\r\n// File: original_contracts/IPartner.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IPartner {\r\n\r\n    function getReferralId() external view returns(string memory);\r\n\r\n    function getFeeWallet() external view returns(address payable);\r\n\r\n    function getFee() external view returns(uint256);\r\n\r\n    function getPartnerShare() external view returns(uint256);\r\n\r\n    function getParaswapShare() external view returns(uint256);\r\n\r\n    function changeFeeWallet(address payable feeWallet) external;\r\n\r\n    function changeFee(uint256 newFee) external;\r\n\r\n    function getPositiveSlippageToUser() external view returns(bool);\r\n\r\n    function changePositiveSlippageToUser(bool slippageToUser) external;\r\n\r\n    function getPartnerInfo() external view returns(\r\n        address payable feeWallet,\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare,\r\n        bool positiveSlippageToUser\r\n    );\r\n}\r\n\r\n// File: original_contracts/lib/TokenFetcher.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\ncontract TokenFetcher is Ownable {\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer any tokens which are assigned to the contract\r\n    * This method is for safety if by any chance tokens or ETHs are assigned to the contract by mistake\r\n    * @dev token Address of the token to be transferred\r\n    * @dev destination Recepient of the token\r\n    * @dev amount Amount of tokens to be transferred\r\n    */\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        Utils.transferTokens(token, destination, amount);\r\n    }\r\n}\r\n\r\n// File: original_contracts/IWETH.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\nabstract contract IWETH is IERC20 {\r\n    function deposit() external virtual payable;\r\n    function withdraw(uint256 amount) external virtual;\r\n}\r\n\r\n// File: original_contracts/AugustusSwapper.sol\r\n\r\npragma solidity 0.7.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AugustusSwapper is Ownable, TokenFetcher {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    TokenTransferProxy private _tokenTransferProxy;\r\n\r\n    bool private _paused;\r\n\r\n    IWhitelisted private _whitelisted;\r\n\r\n    IPartnerRegistry private _partnerRegistry;\r\n    address payable private _feeWallet;\r\n\r\n    string private _version = \"2.1.0\";\r\n    uint256 private _gasMintPrice;\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    event Swapped(\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount,\r\n        string referrer\r\n    );\r\n\r\n    event Bought(\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        string referrer\r\n    );\r\n\r\n    event FeeTaken(\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare\r\n    );\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySelf() {\r\n      require(\r\n        msg.sender == address(this),\r\n        \"AugustusSwapper: Invalid access\"\r\n      );\r\n      _;\r\n    }\r\n\r\n\r\n  constructor(\r\n        address whitelist,\r\n        address gasToken,\r\n        address partnerRegistry,\r\n        address payable feeWallet,\r\n        address gstHolder\r\n    )\r\n        public\r\n    {\r\n\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n        _tokenTransferProxy = new TokenTransferProxy(gasToken, gstHolder);\r\n        _whitelisted = IWhitelisted(whitelist);\r\n        _feeWallet = feeWallet;\r\n        _gasMintPrice = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback method to allow exchanges to transfer back ethers for a particular swap\r\n    */\r\n    receive() external payable {\r\n    }\r\n\r\n    function getVersion() external view returns(string memory) {\r\n        return _version;\r\n    }\r\n\r\n    function getPartnerRegistry() external view returns(address) {\r\n        return address(_partnerRegistry);\r\n    }\r\n\r\n    function getWhitelistAddress() external view returns(address) {\r\n        return address(_whitelisted);\r\n    }\r\n\r\n    function getFeeWallet() external view returns(address) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    function setFeeWallet(address payable feeWallet) external onlyOwner {\r\n        require(feeWallet != address(0), \"Invalid address\");\r\n        _feeWallet = feeWallet;\r\n    }\r\n\r\n    function getGasMintPrice() external view returns(uint) {\r\n        return _gasMintPrice;\r\n    }\r\n\r\n    function setGasMintPrice(uint gasMintPrice) external onlyOwner {\r\n        _gasMintPrice = gasMintPrice;\r\n    }\r\n\r\n    function setPartnerRegistry(address partnerRegistry) external onlyOwner {\r\n        require(partnerRegistry != address(0), \"Invalid address\");\r\n        _partnerRegistry = IPartnerRegistry(partnerRegistry);\r\n    }\r\n\r\n    function setWhitelistAddress(address whitelisted) external onlyOwner {\r\n        require(whitelisted != address(0), \"Invalid whitelist address\");\r\n        _whitelisted = IWhitelisted(whitelisted);\r\n    }\r\n\r\n    function getTokenTransferProxy() external view returns (address) {\r\n        return address(_tokenTransferProxy);\r\n    }\r\n\r\n    function changeGSTHolder(address gstHolder) external onlyOwner {\r\n        require(gstHolder != address(0), \"Invalid address\");\r\n        _tokenTransferProxy.changeGSTTokenHolder(gstHolder);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    function simplBuy(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        uint receivedAmount = performSimpleSwap(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            toAmount,//expected amount and to amount are same in case of buy\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        uint256 remainingAmount = Utils.tokenBalance(\r\n            address(fromToken),\r\n            address(this)\r\n        );\r\n\r\n        if (remainingAmount > 0) {\r\n            Utils.transferTokens(address(fromToken), msg.sender, remainingAmount);\r\n        }\r\n\r\n        emit Bought(\r\n            msg.sender,\r\n            beneficiary == address(0)?msg.sender:beneficiary,\r\n            address(fromToken),\r\n            address(toToken),\r\n            fromAmount,\r\n            receivedAmount,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function approve(\r\n      address token,\r\n      address to,\r\n      uint256 amount\r\n    )\r\n      external\r\n      onlySelf\r\n    {\r\n      Utils.approve(to, token, amount);\r\n    }\r\n\r\n\r\n    function simpleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        uint256 expectedAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n\r\n        uint receivedAmount = performSimpleSwap(\r\n            fromToken,\r\n            toToken,\r\n            fromAmount,\r\n            toAmount,\r\n            expectedAmount,\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            beneficiary == address(0)?msg.sender:beneficiary,\r\n            address(fromToken),\r\n            address(toToken),\r\n            fromAmount,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    function performSimpleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        uint256 expectedAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n    )\r\n        private\r\n        returns (uint256)\r\n    {\r\n        require(toAmount > 0, \"toAmount is too low\");\r\n        require(callees.length > 0, \"No callee provided\");\r\n        require(exchangeData.length > 0, \"No exchangeData provided\");\r\n        require(\r\n            callees.length + 1 == startIndexes.length,\r\n            \"Start indexes must be 1 greater then number of callees\"\r\n        );\r\n\r\n        uint initialGas = gasleft();\r\n\r\n        //If source token is not ETH than transfer required amount of tokens\r\n        //from sender to this contract\r\n        if (address(fromToken) != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                address(fromToken),\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        for (uint256 i = 0; i < callees.length; i++) {\r\n            require(\r\n                callees[i] != address(_tokenTransferProxy),\r\n                \"Can not call TokenTransferProxy Contract\"\r\n            );\r\n\r\n            bool result = externalCall(\r\n                callees[i], //destination\r\n                values[i], //value to send\r\n                startIndexes[i], // start index of call data\r\n                startIndexes[i + 1].sub(startIndexes[i]), // length of calldata\r\n                exchangeData// total calldata\r\n            );\r\n            require(result, \"External call failed\");\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            address(toToken),\r\n            address(this)\r\n        );\r\n\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n        takeFeeAndTransferTokens(\r\n            toToken,\r\n            expectedAmount,\r\n            receivedAmount,\r\n            beneficiary,\r\n            referrer\r\n        );\r\n\r\n        if(_gasMintPrice > 0) {\r\n          Utils.refundGas(address(_tokenTransferProxy), initialGas, _gasMintPrice);\r\n        }\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n   * @dev This function sends the WETH returned during the exchange to the user.\r\n   * @param token: The WETH Address\r\n   */\r\n    function withdrawAllWETH(IWETH token) external {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.withdraw(amount);\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the multi path swap.\r\n   * @param data Data required to perform swap.\r\n   */\r\n    function multiSwap(\r\n        Utils.SellData memory data\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        //Referral can never be empty\r\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\r\n\r\n        require(data.toAmount > 0, \"To amount can not be 0\");\r\n\r\n        uint256 receivedAmount = performSwap(\r\n            data.fromToken,\r\n            data.toToken,\r\n            data.fromAmount,\r\n            data.toAmount,\r\n            data.path\r\n        );\r\n\r\n        takeFeeAndTransferTokens(\r\n            data.toToken,\r\n            data.expectedAmount,\r\n            receivedAmount,\r\n            data.beneficiary,\r\n            data.referrer\r\n        );\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            data.beneficiary == address(0)?msg.sender:data.beneficiary,\r\n            address(data.fromToken),\r\n            address(data.toToken),\r\n            data.fromAmount,\r\n            receivedAmount,\r\n            data.expectedAmount,\r\n            data.referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the single path buy.\r\n   * @param data Data required to perform swap.\r\n   */\r\n    function buy(\r\n        Utils.BuyData memory data\r\n    )\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        //Referral id can never be empty\r\n        require(bytes(data.referrer).length > 0, \"Invalid referrer\");\r\n\r\n        require(data.toAmount > 0, \"To amount can not be 0\");\r\n\r\n        uint256 receivedAmount = performBuy(\r\n            data.fromToken,\r\n            data.toToken,\r\n            data.fromAmount,\r\n            data.toAmount,\r\n            data.route\r\n        );\r\n\r\n        takeFeeAndTransferTokens(\r\n            data.toToken,\r\n            data.toAmount,\r\n            receivedAmount,\r\n            data.beneficiary,\r\n            data.referrer\r\n        );\r\n\r\n        uint256 remainingAmount = Utils.tokenBalance(\r\n            address(data.fromToken),\r\n            address(this)\r\n        );\r\n\r\n        if (remainingAmount > 0) {\r\n            Utils.transferTokens(address(data.fromToken), msg.sender, remainingAmount);\r\n        }\r\n\r\n        emit Bought(\r\n            msg.sender,\r\n            data.beneficiary == address(0)?msg.sender:data.beneficiary,\r\n            address(data.fromToken),\r\n            address(data.toToken),\r\n            data.fromAmount,\r\n            receivedAmount,\r\n            data.referrer\r\n        );\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    //Helper function to transfer final amount to the beneficiaries\r\n    function takeFeeAndTransferTokens(\r\n        IERC20 toToken,\r\n        uint256 expectedAmount,\r\n        uint256 receivedAmount,\r\n        address payable beneficiary,\r\n        string memory referrer\r\n\r\n    )\r\n        private\r\n    {\r\n        uint256 remainingAmount = receivedAmount;\r\n\r\n        //Take partner fee\r\n        ( uint256 fee ) = _takeFee(\r\n            toToken,\r\n            receivedAmount,\r\n            expectedAmount,\r\n            referrer\r\n        );\r\n        remainingAmount = receivedAmount.sub(fee);\r\n\r\n        //If there is a positive slippage after taking partner fee then 50% goes to paraswap and 50% to the user\r\n        if ((remainingAmount > expectedAmount) && fee == 0) {\r\n            uint256 positiveSlippageShare = remainingAmount.sub(expectedAmount).div(2);\r\n            remainingAmount = remainingAmount.sub(positiveSlippageShare);\r\n            Utils.transferTokens(address(toToken), _feeWallet, positiveSlippageShare);\r\n        }\r\n\r\n\r\n\r\n        //If beneficiary is not a 0 address then it means it is a transfer transaction\r\n        if (beneficiary == address(0)){\r\n            Utils.transferTokens(address(toToken), msg.sender, remainingAmount);\r\n        }\r\n        else {\r\n            Utils.transferTokens(address(toToken), beneficiary, remainingAmount);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Source take from GNOSIS MultiSigWallet\r\n    * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    */\r\n    function externalCall(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataOffset,\r\n        uint dataLength,\r\n        bytes memory data\r\n    )\r\n    private\r\n    returns (bool)\r\n    {\r\n        bool result = false;\r\n\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710), // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                add(d, dataOffset),\r\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //Helper function to perform swap\r\n    function performSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        Utils.Path[] memory path\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n\r\n        require(path.length > 0, \"Path not provided for swap\");\r\n        require(\r\n            path[path.length - 1].to == address(toToken),\r\n            \"Last to token does not match toToken\"\r\n        );\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (address(fromToken) != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                address(fromToken),\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        //Assuming path will not be too long to reach out of gas exception\r\n        for (uint i = 0; i < path.length; i++) {\r\n            //_fromToken will be either fromToken of toToken of the previous path\r\n            IERC20 _fromToken = i > 0 ? IERC20(path[i - 1].to) : IERC20(fromToken);\r\n            IERC20 _toToken = IERC20(path[i].to);\r\n\r\n            uint _fromAmount = Utils.tokenBalance(address(_fromToken), address(this));\r\n            if (i > 0 && address(_fromToken) == Utils.ethAddress()) {\r\n                _fromAmount = _fromAmount.sub(path[i].totalNetworkFee);\r\n            }\r\n\r\n            for (uint j = 0; j < path[i].routes.length; j++) {\r\n                Utils.Route memory route = path[i].routes[j];\r\n\r\n                //Check if exchange is supported\r\n                require(\r\n                    _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\r\n                    \"Exchange not whitelisted\"\r\n                );\r\n\r\n                IExchange dex = IExchange(route.exchange);\r\n\r\n                //Calculating tokens to be passed to the relevant exchange\r\n                //percentage should be 200 for 2%\r\n                uint fromAmountSlice = _fromAmount.mul(route.percent).div(10000);\r\n                uint256 value = route.networkFee;\r\n\r\n                if (j == path[i].routes.length.sub(1)) {\r\n                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\r\n\r\n                    fromAmountSlice = remBal;\r\n\r\n                    if (address(_fromToken) == Utils.ethAddress()) {\r\n                        //subtract network fee\r\n                        fromAmountSlice = fromAmountSlice.sub(value);\r\n                    }\r\n                }\r\n\r\n                //Call to the exchange\r\n                if (address(_fromToken) == Utils.ethAddress()) {\r\n                    value = value.add(fromAmountSlice);\r\n\r\n                    dex.swap{value: value}(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\r\n                }\r\n                else {\r\n                    _fromToken.safeTransfer(route.exchange, fromAmountSlice);\r\n\r\n                    dex.swap{value: value}(_fromToken, _toToken, fromAmountSlice, 1, route.targetExchange, route.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            address(toToken),\r\n            address(this)\r\n        );\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected\"\r\n        );\r\n\r\n        if (_gasMintPrice > 0) {\r\n            Utils.refundGas(address(_tokenTransferProxy), initialGas, _gasMintPrice);\r\n        }\r\n        return receivedAmount;\r\n    }\r\n\r\n    //Helper function to perform swap\r\n    function performBuy(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 toAmount,\r\n        Utils.BuyRoute[] memory routes\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint initialGas = gasleft();\r\n        IERC20 _fromToken = fromToken;\r\n        IERC20 _toToken = toToken;\r\n\r\n        //if fromToken is not ETH then transfer tokens from user to this contract\r\n        if (address(_fromToken) != Utils.ethAddress()) {\r\n            _tokenTransferProxy.transferFrom(\r\n                address(_fromToken),\r\n                msg.sender,\r\n                address(this),\r\n                fromAmount\r\n            );\r\n        }\r\n\r\n        for (uint j = 0; j < routes.length; j++) {\r\n            Utils.BuyRoute memory route = routes[j];\r\n\r\n            //Check if exchange is supported\r\n            require(\r\n                _whitelisted.hasRole(_whitelisted.WHITELISTED_ROLE(), route.exchange),\r\n                \"Exchange not whitelisted\"\r\n            );\r\n            IExchange dex = IExchange(route.exchange);\r\n\r\n\r\n            //Call to the exchange\r\n            if (address(_fromToken) == Utils.ethAddress()) {\r\n                uint256 value = route.networkFee.add(route.fromAmount);\r\n                dex.buy{value: value}(\r\n                    _fromToken,\r\n                    _toToken,\r\n                    route.fromAmount,\r\n                    route.toAmount,\r\n                    route.targetExchange,\r\n                    route.payload\r\n                );\r\n            }\r\n            else {\r\n                _fromToken.safeTransfer(route.exchange, route.fromAmount);\r\n                dex.buy{value: route.networkFee}(\r\n                    _fromToken,\r\n                    _toToken,\r\n                    route.fromAmount,\r\n                    route.toAmount,\r\n                    route.targetExchange,\r\n                    route.payload\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 receivedAmount = Utils.tokenBalance(\r\n            address(_toToken),\r\n            address(this)\r\n        );\r\n        require(\r\n            receivedAmount >= toAmount,\r\n            \"Received amount of tokens are less then expected tokens\"\r\n        );\r\n\r\n        if (_gasMintPrice > 0) {\r\n            Utils.refundGas(address(_tokenTransferProxy), initialGas, _gasMintPrice);\r\n        }\r\n        return receivedAmount;\r\n    }\r\n\r\n    function _takeFee(\r\n        IERC20 toToken,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount,\r\n        string memory referrer\r\n    )\r\n        private\r\n        returns(uint256 fee)\r\n    {\r\n\r\n        address partnerContract = _partnerRegistry.getPartnerContract(referrer);\r\n\r\n        //If there is no partner associated with the referral id then no fee will be taken\r\n        if (partnerContract == address(0)) {\r\n            return (0);\r\n        }\r\n\r\n        (\r\n            address payable partnerFeeWallet,\r\n            uint256 feePercent,\r\n            uint256 partnerSharePercent,\r\n            ,\r\n            bool positiveSlippageToUser\r\n        ) = IPartner(partnerContract).getPartnerInfo();\r\n\r\n        uint256 partnerShare = 0;\r\n        uint256 paraswapShare = 0;\r\n\r\n        if (feePercent <= 50 && receivedAmount > expectedAmount) {\r\n            uint256 halfPositiveSlippage = receivedAmount.sub(expectedAmount).div(2);\r\n            //Calculate total fee to be taken\r\n            fee = expectedAmount.mul(feePercent).div(10000);\r\n            //Calculate partner's share\r\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\r\n            //All remaining fee is paraswap's share\r\n            paraswapShare = fee.sub(partnerShare);\r\n            paraswapShare = paraswapShare.add(halfPositiveSlippage);\r\n\r\n            fee = fee.add(halfPositiveSlippage);\r\n\r\n            if (!positiveSlippageToUser) {\r\n                partnerShare = partnerShare.add(halfPositiveSlippage);\r\n                fee = fee.add(halfPositiveSlippage);\r\n            }\r\n        }\r\n        else {\r\n            //Calculate total fee to be taken\r\n            fee = receivedAmount.mul(feePercent).div(10000);\r\n            //Calculate partner's share\r\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\r\n            //All remaining fee is paraswap's share\r\n            paraswapShare = fee.sub(partnerShare);\r\n        }\r\n        Utils.transferTokens(address(toToken), partnerFeeWallet, partnerShare);\r\n        Utils.transferTokens(address(toToken), _feeWallet, paraswapShare);\r\n\r\n        emit FeeTaken(fee, partnerShare, paraswapShare);\r\n        return (fee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gstHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.BuyRoute[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.BuyData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gstHolder\",\"type\":\"address\"}],\"name\":\"changeGSTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartnerRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.SellData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"multiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasMintPrice\",\"type\":\"uint256\"}],\"name\":\"setGasMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerRegistry\",\"type\":\"address\"}],\"name\":\"setPartnerRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"simplBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"simpleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAllWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AugustusSwapper","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000070610e7b617ea7a0951865fd97bce6e0e24fd8d50000000000000000000000000000000000b3F879cb30FE243b4Dfee438691c0400000000000000000000000024a5b9bb7dee3b88565288115dfa1d07b28773be000000000000000000000000cd716d0c43cdf4456e08926c4ff0b2381cf59adc000000000000000000000000cd716d0c43cdf4456e08926c4ff0b2381cf59adc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9307c700eadac0c1eaed04df87bab27c0d08c7b0fa24173e7123e8ced2d8d2f5"}]}