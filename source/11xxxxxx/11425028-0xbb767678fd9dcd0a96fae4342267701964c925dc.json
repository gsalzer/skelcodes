{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity >0.6.0;\n\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\ninterface IToken is IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Destroys tokens from msg.sender account\r\n     */\r\n    function burn(uint256 amount) external;\r\n}\n\ncontract InTokenWrapper is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IToken public inToken;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping (uint256 => uint256) private _historyTotalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    //mapping to save period user last deposited tokens;\r\n    mapping (address => uint256) private _userPeriod;    \r\n\r\n    event RequestedExchange(address indexed user, uint256 amount);\r\n    event RequestedWithdraw(address indexed user, uint256 amount);\r\n    event ExecutedExchange(address indexed user, uint256 outAmount, uint256 inAmount);\r\n\r\n    /**\r\n     * @dev TokenWrapper constructor\r\n     * @param _inToken Wrapped token to be exchanged\r\n     */\r\n    constructor(address _inToken) internal {\r\n        inToken = IToken(_inToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of deposited token\r\n     * @return uint256 total supply\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of token at given period\r\n     * @param _period Period for which total supply returned\r\n     * @return uint256 total supply\r\n     */\r\n    function historyTotalSupply(uint256 _period)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _historyTotalSupply[_period];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of a given account\r\n     * @param _address User for which to retrieve balance\r\n     */\r\n    function balanceOf(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits a given amount of inToken from user\r\n     * @param _user User's address     \r\n     * @param _amount Units of inToken\r\n     * @param _period Current period\r\n     */\r\n    function _deposit(address _user, uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _balances[_user] = _balances[_user].add(_amount);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _historyTotalSupply[_period] = _historyTotalSupply[_period].add(_amount);\r\n        _userPeriod[_user] = _period;\r\n        inToken.transferFrom(_user, address(this), _amount);\r\n        emit RequestedExchange(_user, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a given amount of inToken from user\r\n     * @param _user User's address\r\n     * @param _amount Units of inToken\r\n     * @param _period Current period\r\n     */\r\n    function _withdraw(address _user, uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _balances[_user] = _balances[_user].sub(_amount, \"Not enough balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _historyTotalSupply[_period] = _historyTotalSupply[_period].sub(_amount);\r\n        inToken.transfer(_user, _amount);\r\n        emit RequestedWithdraw(_user, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw In Tokens (balance - _out) & burn (_out) after executeExchange\r\n     * @param _user User's address \r\n     * @param _out Amount of Out Tokens paid\r\n     */\r\n    function _withdrawExecute(address _user, uint256 _out)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        uint256 _amount = balanceOf(_user);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _balances[_user] = 0;\r\n        if(_amount > _out)\r\n            inToken.transfer(_user, _amount.sub(_out));\r\n        inToken.burn(_out);\r\n        emit ExecutedExchange(_user, _out, _amount.sub(_out));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Period user last deposited tokens\r\n     * @param _address address of the User\r\n     */\r\n     function userPeriod(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _userPeriod[_address];\r\n    }\r\n\r\n}\n\ncontract Scheduller {\r\n\tusing SafeMath for uint256;\r\n\t//last period recorded\r\n    uint256 public period;\r\n    //period duration in sec\r\n    uint256 public periodTime;\r\n    //last period start time\r\n    uint256 public periodStartTime;\r\n\r\n\t/**\r\n     * @dev Scheduller constructor, saves periodTime in seconds\r\n     * @param _periodDays period length in Days\r\n     */\r\n    constructor (\r\n    \tuint256 _periodDays\r\n    )\r\n    \tpublic\r\n    {\r\n    \tperiodTime = _periodDays.mul(1 days);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates last period to current\r\n     * @param _startNow set periodStartTime = now if true\r\n     */\r\n    function _updatePeriod (bool _startNow)\r\n        internal\r\n    {\r\n        uint256 _currentPeriod = currentPeriod();\r\n        if(_currentPeriod != period){\r\n        \tperiod = _currentPeriod;\r\n            if(_startNow)\r\n                // solhint-disable-next-line not-rely-on-time\r\n                periodStartTime = block.timestamp;\r\n            else\r\n                periodStartTime = 0;\r\n        }else{\r\n            if(_startNow && periodStartTime == 0)\r\n                // solhint-disable-next-line not-rely-on-time\r\n                periodStartTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current period\r\n     */\r\n    function currentPeriod () \r\n        public \r\n        view \r\n        returns (uint256 _currentPeriod)\r\n    {\r\n    \t_currentPeriod = period;\r\n    \tif(periodStartTime == 0 && _currentPeriod != 0)\r\n    \t\treturn _currentPeriod;\r\n    \t// solhint-disable-next-line not-rely-on-time\r\n    \tif( block.timestamp >= periodStartTime.add(periodTime) )\r\n    \t\t_currentPeriod = _currentPeriod.add(1); \r\n\t\treturn _currentPeriod;\r\n    }\r\n}\n\ncontract VPStorage is Scheduller, InTokenWrapper {\r\n\tusing SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\t\r\n\t//Calc precision constant\r\n    uint256 private constant CALC_PRECISION = 1e18; \r\n    //Out Token Interface\r\n    IERC20 public outToken;\r\n    // period => Out Tokens available for exchange this period\r\n    mapping (uint256 => uint256) public historyOutTokenForExchange;\r\n    // Out Token units owed to users\r\n    uint256 public outTokenDebt;\r\n    \r\n    /** \r\n    * @dev Updates Period before executing function \r\n    * @dev If Period changed, calculates new period Out Token for exchange & Out Token Debt\r\n    * @param _startNow set periodStartTime = now if true\r\n    */\r\n    modifier updatePeriod(bool _startNow) {\r\n    \tuint256 _period = period; \r\n        _updatePeriod(_startNow);\r\n        if(_period != period){\r\n            uint256 _nextPeriodForExchange;\r\n            uint256 _previousPeriodDebt;\r\n            (_nextPeriodForExchange, _previousPeriodDebt) = _getOutTokenForExchange(_period);\r\n            historyOutTokenForExchange[period] = _nextPeriodForExchange;\r\n            outTokenDebt = outTokenDebt.add(_previousPeriodDebt);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Exchange constructor, calls constructors of helper classes InTokenWrapper and Scheduller\r\n    * @param _outToken Out Token contract address\r\n    * @param _inToken In Token contract address\r\n    * @param _periodDays period length in Days\r\n    */\r\n    constructor(\r\n    \taddress _outToken,\r\n    \taddress _inToken,\r\n    \tuint256 _periodDays\r\n    )\r\n    \tpublic\r\n    \tInTokenWrapper(_inToken)\r\n    \tScheduller(_periodDays)\r\n    {\r\n        outToken = IERC20(_outToken);\r\n    }\r\n\r\n    /***************************************\r\n                    PRIVATE\r\n    ****************************************/\r\n\r\n    /** \r\n    * @dev Returns Out Tokens available for exchange for next period & debt for previous period\r\n    * @param _previousPeriod - previous period\r\n    */\r\n    function _getOutTokenForExchange(\r\n        uint256 _previousPeriod\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 _nextPeriodForExchange, uint256 _previousPeriodDebt)\r\n    {\r\n        _previousPeriodDebt = historyOutTokenForExchange[_previousPeriod];\r\n        //If Out Token balance was greater than total In Token balance for previous period\r\n        //reduce previous period debt to total supply\r\n        if(_previousPeriodDebt > historyTotalSupply(_previousPeriod))\r\n            _previousPeriodDebt = historyTotalSupply(_previousPeriod);\r\n        _nextPeriodForExchange = outToken.balanceOf(address(this)).sub(\r\n            outTokenDebt.add(_previousPeriodDebt)\r\n        );\r\n        return (_nextPeriodForExchange, _previousPeriodDebt);\r\n    }\r\n\r\n \r\n    /***************************************\r\n                    ACTIONS\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Places amount of In Tokes to be exchanged to Out Tokens current period\r\n     * if user has balance for previous period executeExchage() is done first\r\n     * @param _amount of In Tokens Tokens\r\n     */\r\n    function requestExchange(uint256 _amount)\r\n        external\r\n        updatePeriod(true)\r\n    {\r\n        require(_amount != 0, \"Cannot exchange 0\");\r\n    \trequire(historyOutTokenForExchange[period] != 0, \"No Out Tokens for current period\");\r\n    \taddress _user = msg.sender;\r\n        uint256 _balance = balanceOf(_user);\r\n    \tif(userPeriod(_user) != period && _balance != 0){\r\n    \t\texecuteExchange();\r\n            _balance = 0;\r\n    \t}\r\n        require(_balance.add(_amount) <= historyOutTokenForExchange[period], \r\n            \"Balance is greater Out Tokens for period\");\r\n    \t_deposit(_user, _amount, period);\r\n    }\r\n\r\n\t/**\r\n     * @dev Withdraws amount of In Tokens deposited current period\r\n     * @param _amount of In Tokens Tokens\r\n     */\r\n    function requestWithdraw(uint256 _amount)\r\n        external\r\n        updatePeriod(false)\r\n    {\r\n    \taddress _user = msg.sender;\r\n    \trequire (userPeriod(_user) == period, \"No balance for current period\");\r\n    \t_withdraw(_user, _amount, period);\r\n    }\r\n\r\n\t/**\r\n     * @dev Sends owed Out Tokens to sender for previos periods In Tokens deposits\r\n     */\r\n    function executeExchange()\r\n    \tpublic \r\n    \tupdatePeriod(false)\r\n    {\r\n    \taddress _user = msg.sender;\r\n    \tuint256 _out = calculateOut(_user);\r\n    \trequire (_out != 0, \"Nothing to exchange\");\r\n        outTokenDebt = outTokenDebt.sub(_out);\r\n\t\toutToken.safeTransfer(_user, _out);\r\n\t\t_withdrawExecute(_user, _out);\r\n    }\r\n    \r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n    * @dev Returns total amount of InTokens locked into contract\r\n    */\r\n    function getInTokenBalance()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns OutTokens available for exchange current period\r\n    */\r\n    function getOutTokenForExchange()\r\n        public\r\n        view\r\n        returns(uint256 _outTokenForExhange)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        if(period == _period)\r\n            _outTokenForExhange = historyOutTokenForExchange[period];\r\n        else\r\n            (_outTokenForExhange, ) = _getOutTokenForExchange(period);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns InToken balance available for withdraw\r\n    * @param _user Address of the user\r\n    */\r\n    function getInTokenBalanceForWithdraw(address _user)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        uint256 _userPeriod = userPeriod(_user);\r\n        if(_userPeriod == _period)\r\n            return balanceOf(_user);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates In Tokens contract will accept from user current period\r\n    * @param _user Address of the user\r\n    */\r\n    function calculateIn(address _user)\r\n        external\r\n        view\r\n        returns(uint256 _in)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        uint256 _userPeriod = userPeriod(_user);\r\n        uint256 _outTokenForExhange = getOutTokenForExchange();\r\n        if(_userPeriod != _period){\r\n            _in = _outTokenForExhange;\r\n        }else{\r\n            _in = _outTokenForExhange.sub(balanceOf(_user));\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Calculates Out Tokens owed to user for past periods\r\n    * @param _user Address of the user\r\n    */\r\n    function calculateOut(address _user) \r\n    \tpublic\r\n    \tview\r\n    \treturns (uint256 _owed)\r\n    {\r\n    \tuint256 _period = currentPeriod();\r\n    \tuint256 _userPeriod = userPeriod(_user);\r\n        uint256 _userPeriodTotalSupply = historyTotalSupply(_userPeriod);\r\n    \tif(_userPeriod != _period){\r\n    \t\tif(historyOutTokenForExchange[_userPeriod] >= _userPeriodTotalSupply){\r\n    \t\t\t_owed = balanceOf(_user);\r\n    \t\t}else{\r\n\t    \t\t_owed = historyOutTokenForExchange[_userPeriod].mul(\r\n\t    \t\t\tbalanceOf(_user)\r\n\t    \t\t).mul(\r\n\t    \t\t\tCALC_PRECISION\r\n\t    \t\t).div(\r\n\t    \t\t\t_userPeriodTotalSupply\r\n\t    \t\t).div(\r\n\t    \t\t\tCALC_PRECISION\r\n\t    \t\t);\r\n\t    \t}\r\n\t    }\r\n    }\r\n}\n\ncontract ReservePool is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Contract address of the Token contract sends out for In Token transfers\r\n    IERC20 public outToken;\r\n    // Contract address of the Token contract accepts\r\n    IToken public inToken;    \r\n\r\n    event Exchanged(address indexed user, uint256 amount);\r\n\r\n    /** \r\n    * @dev Exchange constructor\r\n    * @param _outToken Out Token contract address\r\n    * @param _inToken In Token contract address\r\n    */\r\n    constructor (\r\n    \taddress _outToken,\r\n    \taddress _inToken\r\n    )\r\n    \tpublic\r\n    {\r\n        outToken = IERC20(_outToken);\r\n        inToken = IToken(_inToken);\r\n    } \r\n\r\n    /***************************************\r\n                    ACTIONS\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Transfers In Tokens preapproved by sender to contract and burns them, \r\n     * transfers Out Tokens 1 to 1 to sender if there is balance of Out Tokens available\r\n     * @param _amount of In Tokens\r\n     */\r\n    function receiveInToken (uint256 _amount)\r\n        external\r\n        nonReentrant\r\n    {\r\n    \trequire(_amount != 0, \"amount is 0\");\r\n        require(outToken.balanceOf(address(this)) >= _amount, \"not enough Out Tokens available\");\r\n    \taddress _user = msg.sender;\r\n    \tinToken.transferFrom(_user, address(this), _amount);\r\n        inToken.burn(_amount);\r\n        outToken.safeTransfer(_user, _amount);\r\n        emit Exchanged(_user, _amount);\r\n    }\r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n    * @dev Returns Out Tokens balance\r\n    */\r\n    function getOutTokenBalance()\r\n        external\r\n        view\r\n        returns(uint256) \r\n    {\r\n        return outToken.balanceOf(address(this));\r\n    }\r\n    \r\n}\n\n// \n/**\r\n* The FactoryExchange contract deploys VPStorage and ReservePool contracts\r\n*/\ncontract FactoryExchange {\r\n\r\n\t/** \r\n    * @dev Deploys exchange module contracts\r\n\t* @param _outToken - External Token address\r\n\t* @param _eptToken - elasticPoolToken (ElasticPool address)\r\n\t* @param _vptToken - volatilePoolToken (VolatilePool address)\r\n\t* @param _vpsPeriodDays - VPStorage period time in days\r\n\t*/\r\n\tfunction newModule (\r\n\t\taddress _outToken, \r\n\t\taddress _eptToken, \r\n\t\taddress _vptToken, \r\n\t\tuint256 _vpsPeriodDays\r\n\t)\r\n\t\texternal\r\n\t\treturns (address _reservePool, address _vpStorage)\r\n\t{\r\n    \t_reservePool = address(\r\n    \t\tnew ReservePool(\r\n    \t\t\t_outToken,\r\n    \t\t\t_eptToken\r\n    \t\t)\r\n    \t);\r\n\r\n    \t_vpStorage = address(\r\n\t\t\tnew VPStorage(\r\n\t    \t\t_outToken, \r\n\t    \t\t_vptToken, \r\n\t    \t\t_vpsPeriodDays\r\n    \t\t)\r\n    \t);\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vpsPeriodDays\",\"type\":\"uint256\"}],\"name\":\"newModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vpStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FactoryExchange","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}