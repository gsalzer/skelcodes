{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract ERC20 {\r\n\r\n    function transferFrom (address,address, uint256) external returns (bool);\r\n    function balanceOf(address) public view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function transfer (address, uint256) external returns (bool);\r\n    function giveRewardsToStakers(address,uint256) external returns(bool);\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed _to);\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused);\r\n      _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n      paused = true;\r\n      emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n      paused = false;\r\n      emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract liquidityProviderTokensStaking is Pausable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public plaasTokenContract;\r\n    address payable private wallet;\r\n\r\n    uint256 public walletFees;\r\n    address public farmTokenAddress;\r\n    uint256 public minimumTokens;\r\n    uint256 public maximumStake;\r\n    uint256 public totalStaked;\r\n    uint256 public totalEarned;\r\n    \r\n    uint256 public oneMonth;\r\n    uint256 public twoMonths;\r\n    uint256 public threeMonths;\r\n    uint256 public sixMonths;\r\n    uint256 public nineMonths;\r\n    uint256 public tweleMonths;\r\n\r\n    mapping (address => uint256) public tokenStaked;\r\n    mapping (address => uint256) public stakedTerm;\r\n    mapping (address => uint256) public tokenTime;\r\n\r\n    constructor(address _plaasTokenContract, address _farmTokenAddress,address payable _ownerAddress) public Owned(_ownerAddress) {\r\n\r\n    plaasTokenContract = _plaasTokenContract;\r\n    walletFees = 0.1 ether;\r\n    farmTokenAddress = _farmTokenAddress;\r\n    wallet = _ownerAddress;\r\n    minimumTokens = 10000 ether;\r\n    maximumStake = 5000000 ether;\r\n    \r\n    oneMonth = 0.066 ether;\r\n    twoMonths = 0.1335 ether;\r\n    threeMonths = 0.265 ether;\r\n    sixMonths = 0.483 ether;\r\n    nineMonths = 0.53 ether;\r\n    tweleMonths = 0.67 ether;\r\n\r\n    }\r\n  \r\n    function displayParameters () external view returns (uint256,uint256,uint256,uint256) {\r\n        \r\n        return (totalStaked, totalEarned, minimumTokens, maximumStake); \r\n        \r\n    }\r\n\r\n    function stakingParam (address userAddress) external view returns (uint256,uint256) {\r\n        \r\n        return (stakedTerm[userAddress],\r\n           tokenStaked[userAddress]);\r\n    }\r\n\r\n    function stakeTokens(uint256 amount, uint256 term) external payable returns (bool) {\r\n       \r\n       require( msg.value >= walletFees, \"fees is less\");\r\n       require (tokenStaked[msg.sender] == 0, \"you have already staked tokens\");\r\n       require(amount >= minimumTokens && amount <= maximumStake, \"amount not in range\");\r\n       require (term == 1 ||  term == 2 ||term == 3 || term == 6 || term == 9 || term == 12);\r\n       require(ERC20(plaasTokenContract).balanceOf(msg.sender) >= amount,'balance of a user is less then value');\r\n       uint256 checkAllowance = ERC20(plaasTokenContract).allowance(msg.sender, address(this)); \r\n       require (checkAllowance >= amount, 'allowance is wrong');\r\n       require(ERC20(plaasTokenContract).transferFrom(msg.sender,address(this),amount),'transfer From failed');\r\n       wallet.transfer(msg.value);\r\n\r\n       tokenTime[msg.sender] = now;\r\n       totalStaked = totalStaked.add(amount);\r\n\r\n       if (term == 3) {\r\n           stakedTerm[msg.sender] = 3;\r\n           tokenStaked[msg.sender] = amount;\r\n       } else if (term == 6) {\r\n           stakedTerm[msg.sender] = 6;\r\n           tokenStaked[msg.sender] = amount;\r\n       } else if (term == 9) {\r\n           stakedTerm[msg.sender] = 9;\r\n           tokenStaked[msg.sender] = amount;\r\n       } else if (term == 12){\r\n           stakedTerm[msg.sender] = 12;\r\n           tokenStaked[msg.sender] = amount;\r\n       }else if (term == 1) {\r\n           stakedTerm[msg.sender] = 1;\r\n           tokenStaked[msg.sender] = amount;           \r\n       }\r\n        else if (term == 2) {\r\n           stakedTerm[msg.sender] = 2;\r\n           tokenStaked[msg.sender] = amount;           \r\n       }\r\n        return true;   \r\n    } \r\n\r\n    function changeFees(uint256 amount) external onlyOwner returns (bool){\r\n       \r\n       walletFees = amount;\r\n       \r\n   }\r\n\r\n    function changeWallet(address payable addressUser) external onlyOwner returns (bool){\r\n       \r\n       wallet = addressUser;\r\n       \r\n   }\r\n\r\n\r\n    function setPercentage(uint256 one, uint256 two, uint256 three,uint256 six, uint256 nine, uint256 twelve ) external onlyOwner returns (bool){\r\n    \r\n    oneMonth = one;\r\n    twoMonths = two;\r\n    threeMonths = three;\r\n    sixMonths = six;\r\n    nineMonths = nine;\r\n    tweleMonths = twelve;\r\n\r\n       \r\n   }\r\n\r\n    function changeMinMax(uint256 _minimumTokens, uint256 _maxTokens) external onlyOwner returns (bool){\r\n       \r\n       minimumTokens = _minimumTokens;\r\n       maximumStake = _maxTokens;\r\n       \r\n   }\r\n\r\n    function claimableTokens (address user) external view returns (uint256) {\r\n    \r\n    require(tokenStaked[user] > 0);\r\n\r\n    if(stakedTerm[user] == 1) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(oneMonth);\r\n        return tokenToSend;\r\n    }\r\n    else if (stakedTerm[user] == 2) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(twoMonths);\r\n        return tokenToSend;\r\n    }\r\n    else if (stakedTerm[user] == 3) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(threeMonths);\r\n        return tokenToSend;\r\n    }\r\n    else if (stakedTerm[user] == 6) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(sixMonths);        \r\n        return tokenToSend;\r\n    }\r\n    else if (stakedTerm[user] == 9) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(nineMonths);        \r\n        return tokenToSend;\r\n    }\r\n    else if (stakedTerm[user] == 12) {\r\n        uint256 onePercent = tokenStaked[user].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(tweleMonths);        \r\n        return tokenToSend;\r\n    }\r\n    \r\n    }\r\n\r\n\r\n   function claimPFarmTokens (bytes calldata valueInbytes) external payable returns (bool) {\r\n       require( msg.value >= walletFees.mul(2), \"fees is less\");       \r\n    require(tokenStaked[msg.sender] > 0);\r\n           wallet.transfer(msg.value);\r\n        ERC20(farmTokenAddress).burn(tokenStaked[msg.sender],valueInbytes);\r\n    if(stakedTerm[msg.sender] == 1) {\r\n        require(now >= tokenTime[msg.sender].add(30 days));//30 days\r\n\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(oneMonth);\r\n\r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n\r\n    }\r\n    else if (stakedTerm[msg.sender] == 2) {\r\n\r\n        require(now >= tokenTime[msg.sender].add(60 days));//60 days\r\n\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(twoMonths);\r\n\r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n        \r\n    }\r\n    else if (stakedTerm[msg.sender] == 3) {\r\n\r\n        require(now >= tokenTime[msg.sender].add(90 days));//90 days\r\n\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(threeMonths);  \r\n\r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n\r\n    }\r\n    else if (stakedTerm[msg.sender] == 6) {\r\n        require(now >= tokenTime[msg.sender].add(180 days));//180 days\r\n\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(sixMonths);  \r\n\r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n\r\n    }\r\n       \r\n    else if (stakedTerm[msg.sender] == 9) {\r\n        require(now >= tokenTime[msg.sender].add(270 days));//270 days\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(nineMonths);  \r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n\r\n    }\r\n\r\n    else if (stakedTerm[msg.sender] == 12) {\r\n\r\n        require(now >= tokenTime[msg.sender].add(360 days));//360 days\r\n\r\n        uint256 onePercent = tokenStaked[msg.sender].div(10000 ether);\r\n        uint256 tokenToSend = onePercent.mul(nineMonths);  \r\n\r\n        totalEarned = totalEarned.add(tokenToSend);\r\n        require(ERC20(farmTokenAddress).giveRewardsToStakers(msg.sender,tokenToSend));\r\n\r\n           stakedTerm[msg.sender] = 0;\r\n           tokenStaked[msg.sender] = 0;\r\n           tokenTime[msg.sender] = 0;\r\n\r\n    }\r\n\r\n   }\r\n\r\n   function transferAnyERC20Token(address tokenAddress, uint tokens) external whenNotPaused onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(0));\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plaasTokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"changeMinMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addressUser\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"valueInbytes\",\"type\":\"bytes\"}],\"name\":\"claimPFarmTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"displayParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nineMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plaasTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"one\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"two\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"three\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"six\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twelve\",\"type\":\"uint256\"}],\"name\":\"setPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"stakingParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threeMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tweleMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twoMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"liquidityProviderTokensStaking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000060571e95e12c78cba5223042692908f0649435a50000000000000000000000006a8c66cab4f766e5e30b4e9445582094303cc3220000000000000000000000008da5a07993045e15473e38bae4ff6ff088aac09d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://092b39146afaf70203d8251300c3cf7d116099b185f06170f03fae8eb24bcd75"}]}