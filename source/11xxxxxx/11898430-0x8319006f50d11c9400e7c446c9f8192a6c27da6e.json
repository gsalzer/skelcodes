{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _governance;\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _governance = msgSender;\r\n        emit GovernanceTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_governance == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit GovernanceTransferred(_governance, newOwner);\r\n        _governance = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/StabilizeStrategyStablecoinInterestVault.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n// This is basic vault for the stablecoin version 3 and beyond strategy\r\n// It is designed to store aTokens to be later converted to WETH on command by strategy\r\n\r\ninterface TradeRouter {\r\n    function swapExactETHForTokens(uint, address[] calldata, address, uint) external payable returns (uint[] memory);\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external returns (uint[] memory);\r\n    function getAmountsOut(uint, address[] calldata) external view returns (uint[] memory); // For a value in, it calculates value out\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ninterface LendingPool {\r\n  function withdraw(address, uint256, address) external returns (uint256);\r\n  function deposit(address, uint256, address, uint16) external;\r\n}\r\n\r\ncontract StabilizeStrategyStablecoinInterestVault is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    address public strategyAddress; // This strategy stores interest aTokens in separate vault\r\n    uint256 public minPayout = 1000; // There must be at least 1000 stablecoins in the vault before it pays out for weth\r\n\r\n    // Token information\r\n    // This vault accepts multiple tokens\r\n    // DAI, USDC, USDT, sUSD\r\n    struct TokenInfo {\r\n        IERC20 token; // Reference of token\r\n        IERC20 aToken; // Reference to its aToken (Aave v2)\r\n        uint256 decimals; // Decimals of token\r\n    }\r\n    \r\n    TokenInfo[] private tokenList; // An array of tokens accepted as deposits\r\n    \r\n    // Constants\r\n    uint256 constant DIVISION_FACTOR = 100000;\r\n    address constant SUSHISWAP_ROUTER = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); //Address of Sushiswap\r\n    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant LENDING_POOL_ADDRESS_PROVIDER = address(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); // Provider for Aave addresses\r\n\r\n    constructor(\r\n        address _strategy\r\n    ) public {\r\n        strategyAddress = _strategy;\r\n        setupWithdrawTokens();\r\n    }\r\n\r\n    // Initialization functions\r\n    \r\n    function setupWithdrawTokens() internal {\r\n        // Start with DAI\r\n        IERC20 _token = IERC20(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));\r\n        IERC20 _aToken = IERC20(address(0x028171bCA77440897B824Ca71D1c56caC55b68A3)); // aDAI\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals() // Aave tokens share decimals with normal tokens\r\n            })\r\n        );   \r\n        \r\n        // USDC\r\n        _token = IERC20(address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));\r\n        _aToken = IERC20(address(0xBcca60bB61934080951369a648Fb03DF4F96263C)); // aUSDC\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals()\r\n            })\r\n        );\r\n        \r\n        // USDT\r\n        _token = IERC20(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));\r\n        _aToken = IERC20(address(0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811)); // aUSDT\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals()\r\n            })\r\n        );\r\n        \r\n        // sUSD\r\n        _token = IERC20(address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51));\r\n        _aToken = IERC20(address(0x6C5024Cd4F8A59110119C56f8933403A539555EB)); //aSUSD\r\n        tokenList.push(\r\n            TokenInfo({\r\n                token: _token,\r\n                aToken: _aToken,\r\n                decimals: _token.decimals()\r\n            })\r\n        );\r\n    }\r\n    \r\n    // Modifier\r\n    modifier onlyStrategy() {\r\n        require(strategyAddress == _msgSender(), \"Call not sent from the strategy\");\r\n        _;\r\n    }\r\n    \r\n    // Read functions\r\n    \r\n    function rewardTokensCount() external view returns (uint256) {\r\n        return tokenList.length;\r\n    }\r\n    \r\n    function rewardTokenAddress(uint256 _pos) external view returns (address) {\r\n        require(_pos < tokenList.length,\"No token at that position\");\r\n        return address(tokenList[_pos].token);\r\n    }\r\n    \r\n    function balance() public view returns (uint256) {\r\n        return getNormalizedTotalBalance(address(this));\r\n    }\r\n    \r\n    function getNormalizedTotalBalance(address _address) public view returns (uint256) {\r\n        // Get the balance of the atokens+tokens at this address\r\n        uint256 _balance = 0;\r\n        uint256 _length = tokenList.length;\r\n        for(uint256 i = 0; i < _length; i++){\r\n            uint256 _bal = tokenList[i].aToken.balanceOf(_address).add(tokenList[i].token.balanceOf(_address));\r\n            _bal = _bal.mul(1e18).div(10**tokenList[i].decimals);\r\n            _balance = _balance.add(_bal); // This has been normalized to 1e18 decimals\r\n        }\r\n        return _balance;\r\n    }\r\n    \r\n    function viewWETHProfit(uint256 _balanceAdded) external view returns (uint256) {\r\n        // View the balance that would be returned in the next sendWETHProfit if called now\r\n        // balance added should already be normalized\r\n        uint256 threshold = minPayout.mul(1e18); // Normalize the payout\r\n        uint256 wethOut = 0;\r\n        if(balance().add(_balanceAdded) > threshold){\r\n            // Payout from the tokens in the contract\r\n            uint256 _bal = 0;\r\n            uint256 _length = tokenList.length;\r\n            for(uint256 i = 0; i < _length; i++){\r\n                _bal = tokenList[i].aToken.balanceOf(address(this)).add(tokenList[i].token.balanceOf(address(this)));\r\n                if(i == 1){\r\n                    // Add the balance added to USDC\r\n                    _bal = _bal.add(_balanceAdded.mul(10**tokenList[i].decimals).div(1e18));\r\n                }\r\n                if(_bal > 0){\r\n                    wethOut = wethOut.add(simulateExchange(address(tokenList[i].token), WETH_ADDRESS, _bal));\r\n                }\r\n            }            \r\n        }\r\n        return wethOut;\r\n    }\r\n    \r\n    function sendWETHProfit() external onlyStrategy {\r\n        // The strategy can request weth be sent to it from the vault supply\r\n        uint256 threshold = minPayout.mul(1e18); // Normalize the payout\r\n        if(balance() > threshold){\r\n            // Payout from the tokens in the contract\r\n            uint256 _bal = 0;\r\n            uint256 _length = tokenList.length;\r\n            for(uint256 i = 0; i < _length; i++){\r\n                _bal = tokenList[i].aToken.balanceOf(address(this)); // Get the balance of aTokens, then convert to tokens\r\n                if(_bal > 0){\r\n                    convertFromAToken(i, _bal);\r\n                }\r\n                _bal = tokenList[i].token.balanceOf(address(this));\r\n                    // Now exchange to WETH\r\n                if(_bal > 0){\r\n                    exchange(address(tokenList[i].token), WETH_ADDRESS, _bal);                    \r\n                }\r\n            }\r\n            IERC20 weth = IERC20(WETH_ADDRESS);\r\n            // Now send weth to strategy if balance present\r\n            _bal = weth.balanceOf(address(this));\r\n            if(_bal > 0){\r\n                weth.safeTransfer(strategyAddress, _bal);\r\n            }\r\n        }        \r\n    }\r\n    \r\n    function convertFromAToken(uint256 _id, uint256 amount) internal {\r\n        // This will take the aToken and convert it to main token to be used for whatever\r\n        // It will require that the amount returned is greater than or equal to amount requested\r\n        uint256 _balance = tokenList[_id].token.balanceOf(address(this));\r\n        LendingPool lender = LendingPool(LendingPoolAddressesProvider(LENDING_POOL_ADDRESS_PROVIDER).getLendingPool()); // Load the lending pool\r\n        tokenList[_id].aToken.safeApprove(address(lender), 0);\r\n        tokenList[_id].aToken.safeApprove(address(lender), amount);\r\n        lender.withdraw(address(tokenList[_id].token), amount, address(this));\r\n        require(amount >= tokenList[_id].token.balanceOf(address(this)).sub(_balance), \"Aave failed to withdraw the proper balance\");\r\n    }\r\n    \r\n    function simulateExchange(address _inputToken, address _outputToken, uint256 _amount) internal view returns (uint256) {\r\n        if(_outputToken != WETH_ADDRESS){\r\n            // This function does not trade aTokens for each other\r\n            return 0;\r\n        }else{\r\n            // Simple Sushiswap route\r\n            // When selling for WETH, we must have already converted aToken to token\r\n            // All stables have liquid path to WETH\r\n            TradeRouter router = TradeRouter(SUSHISWAP_ROUTER);\r\n            address[] memory path = new address[](2);\r\n            path[0] = _inputToken;\r\n            path[1] = WETH_ADDRESS;\r\n            uint256[] memory estimates = router.getAmountsOut(_amount, path);\r\n            _amount = estimates[estimates.length - 1];\r\n            return _amount;\r\n        }\r\n    }\r\n    \r\n    function exchange(address _inputToken, address _outputToken, uint256 _amount) internal {\r\n        if(_outputToken != WETH_ADDRESS){\r\n            return;\r\n        }else{\r\n            // Simple Sushiswap route\r\n            // When selling for WETH, we must have already converted aToken to token\r\n            // All stables have liquid path to WETH\r\n            TradeRouter router = TradeRouter(SUSHISWAP_ROUTER);\r\n            address[] memory path = new address[](2);\r\n            path[0] = _inputToken;\r\n            path[1] = WETH_ADDRESS;\r\n            IERC20(_inputToken).safeApprove(SUSHISWAP_ROUTER, 0);\r\n            IERC20(_inputToken).safeApprove(SUSHISWAP_ROUTER, _amount);\r\n            router.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(60)); // Get WETH from token\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Governance functions\r\n    \r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256 private _timelock_data;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        if(balance() > 0){ // Timelock only applies when balance exists\r\n            require(now >= _timelockStart + TIMELOCK_DURATION, \"Timelock time not met\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the strategy address\r\n    // --------------------\r\n    function startChangeStrategy(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeStrategy() external onlyGovernance timelockConditionsMet(2) {\r\n        strategyAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the minimum threshold to payout\r\n    // --------------------\r\n    function startChangeMinPayout(uint256 _payout) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_data = _payout;\r\n    }\r\n    \r\n    function finishChangeMinPayout() external onlyGovernance timelockConditionsMet(3) {\r\n        minPayout = _timelock_data;\r\n    }\r\n    // --------------------\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeMinPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNormalizedTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendWETHProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"name\":\"startChangeMinPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceAdded\",\"type\":\"uint256\"}],\"name\":\"viewWETHProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StabilizeStrategyStablecoinInterestVault","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3777e8a89ba16fa0b00f4d0915174088a4c4390e46001ad32292d3446e4487ce"}]}