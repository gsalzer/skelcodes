{"status":"1","message":"OK","result":[{"SourceCode":"{\"BNUStore.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\n\\r\\ninterface IERC20Token{\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n@title Token sale store\\r\\n@dev Store BNU token for token sale\\r\\n */\\r\\ncontract BNUStore is Context{\\r\\n    address public _shareTokenSaleContractAddress;\\r\\n    address public _publicTokenSaleContractAddress;\\r\\n    address public _vestingContractAddress;\\r\\n\\r\\n    modifier onlyAllowedContracts{\\r\\n        require(\\r\\n            _msgSender() == _shareTokenSaleContractAddress || \\r\\n            _msgSender() == _publicTokenSaleContractAddress ||\\r\\n            _msgSender() == _vestingContractAddress, \\\"Fobidden\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev BNU token contrat address\\r\\n     */\\r\\n    IERC20Token internal _bnxTokenContract;\\r\\n\\r\\n    function setBnuTokenContract(address contractAddress) external onlyOwner contractActive{\\r\\n        _setBnuTokenContract(contractAddress);\\r\\n    }\\r\\n  \\r\\n    function setPublicTokenSaleContractAddress(address contractAddress) external onlyOwner contractActive{\\r\\n        _publicTokenSaleContractAddress = contractAddress;\\r\\n    }\\r\\n\\r\\n    function setShareTokenSaleContractAddress(address contractAddress) external onlyOwner contractActive{\\r\\n        _shareTokenSaleContractAddress = contractAddress;\\r\\n    }\\r\\n\\r\\n    function setVestingContractAddress(address contractAddress) external onlyOwner contractActive{\\r\\n        _vestingContractAddress = contractAddress;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint amount) external onlyAllowedContracts contractActive returns(bool){\\r\\n        require(_bnxTokenContract.transfer(recipient, amount),\\\"Can not transfer BNU\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setBnuTokenContract(address contractAddress) internal{\\r\\n        _bnxTokenContract = IERC20Token(contractAddress);\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\n/**\\r\\n * @title Context\\r\\n * @dev Provide context functions\\r\\n */\\r\\nabstract contract Context {\\r\\n    address public owner;            //Contract owner address\\r\\n    bool public isContractActive;           //Make sure this contract can be used or not\\r\\n    \\r\\n    /**\\r\\n     * Make sure the sender is the owner of contract\\r\\n     */ \\r\\n    modifier onlyOwner{\\r\\n        require(_msgSender() == owner, \\\"Only owner can process\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Make sure the contract is active to execute\\r\\n    */ \\r\\n    modifier contractActive{\\r\\n        require(isContractActive, \\\"This contract is deactived\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Constructor\\r\\n    * \\r\\n    * Implementations:\\r\\n    *   1. Set the owner of contract\\r\\n    *   2. Set contract is active\\r\\n    */\\r\\n    constructor(){\\r\\n       owner = _msgSender();           //Set owner address when contract is created\\r\\n       isContractActive = true;        //Contract is active when it is created\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get sender address\\r\\n     */ \\r\\n    function _msgSender() internal view returns(address){\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get current time in unix timestamp\\r\\n     */\\r\\n    function _now() internal view returns(uint){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Update contract status to make sure this contract can be executed or not\\r\\n     */\\r\\n    function setContractStatus(bool status) external onlyOwner{\\r\\n        require(isContractActive != status,\\\"The current contract\\u0027s status is the same with updating status\\\");\\r\\n        isContractActive = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Change contract\\u0027s owner\\r\\n    * @return If success return true; else return false\\r\\n    * \\r\\n    * Requirements:\\r\\n    *   1. Only current owner can execute\\r\\n    *   2. `newOwner` is not zero address\\r\\n    *   3. `newOwner` is not current owner\\r\\n    * \\r\\n    * Implementations:\\r\\n    *   1. Validate requirements\\r\\n    *   2. Set current owner is newOwner\\r\\n    *   3. Emit Events\\r\\n    *   4. Return result\\r\\n    */\\r\\n    function setOwner(address newOwner) external onlyOwner returns(bool){\\r\\n        require(newOwner != address(0), \\\"New owner is zero address\\\");\\r\\n        require(newOwner != owner, \\\"New owner is current owner\\\");\\r\\n\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerChanged(owner);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Event that notifies contract\\u0027s owner has been changed to `newOwner` \\r\\n    */\\r\\n    event OwnerChanged(address newOwner);\\r\\n}\\r\\n\\r\\n//SPDX-License-Identifier: MIT\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_publicTokenSaleContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shareTokenSaleContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vestingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBnuTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setPublicTokenSaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setShareTokenSaleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setVestingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BNUStore","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be57edf0446a68a99a618974eeecd1fb887cf8ddd8135f4937deb71b2e29acf9"}]}