{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _ISogurExchanger_           = \"ISogurExchanger\"          ;\r\n    bytes32 internal constant _SgnToSgrExchangeInitiator_ = \"SgnToSgrExchangeInitiator\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGRAuthorizationManager_ = \"ISGRAuthorizationManager\";\r\n    bytes32 internal constant _ISGRToken_                = \"ISGRToken\"               ;\r\n    bytes32 internal constant _ISGRTokenManager_         = \"ISGRTokenManager\"        ;\r\n    bytes32 internal constant _ISGRTokenInfo_         = \"ISGRTokenInfo\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = \"BuyWalletsTLSGRTokenManager\"         ;\r\n    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = \"SellWalletsTLSGRTokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n    bytes32 internal constant _SGAToSGRInitializer_      = \"SGAToSGRInitializer\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return A boolean indicating if the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/sogur/interfaces/ISGRAuthorizationManager.sol\r\n\r\n/**\r\n * @title SGR Authorization Manager Interface.\r\n */\r\ninterface ISGRAuthorizationManager {\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to buy SGR.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToBuy(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to sell SGR.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToSell(address _sender) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGR to another user.\r\n     * @param _sender The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized to transfer SGR from one user to another user.\r\n     * @param _sender The address of the custodian user.\r\n     * @param _source The address of the source user.\r\n     * @param _target The address of the target user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Determine whether or not a user is authorized for public operation.\r\n     * @param _sender The address of the user.\r\n     * @return Authorization status.\r\n     */\r\n    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\r\n}\r\n\r\n// File: contracts/voting/ProposalVoting.sol\r\n\r\n/**\r\n * @title Proposal Voting.\r\n */\r\ncontract ProposalVoting is ContractAddressLocatorHolder {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    string public description;\r\n\r\n    uint256 public choicesCount;\r\n\r\n    mapping(address => uint256) public votes;\r\n\r\n    address[] public voters;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n\r\n    event ProposalVoteCasted(address indexed voter, uint256 choice);\r\n\r\n    /*\r\n    * @dev Create the contract.\r\n    * @param _contractAddressLocator The contract address locator.\r\n    * @param _description The voting description.\r\n    * @param _startBlock The voting start block.\r\n    * @param _endBlock The voting end block.\r\n    * @param _choicesCount Choices count.\r\n    */\r\n    constructor(IContractAddressLocator _contractAddressLocator, string _description, uint256 _startBlock, uint256 _endBlock, uint256 _choicesCount) ContractAddressLocatorHolder(_contractAddressLocator) public\r\n    {\r\n\r\n        require(_startBlock > block.number, \"invalid start block\");\r\n        require(_endBlock > _startBlock, \"invalid end block\");\r\n        require(_choicesCount <= 4, \"invalid choices count\");\r\n\r\n        bytes memory _bytes = bytes(_description);\r\n        require(_bytes.length != 0, \"invalid empty description\");\r\n\r\n        description = _description;\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        choicesCount = _choicesCount;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the contract which implements the ISGRAuthorizationManager interface.\r\n     */\r\n    function getSGRAuthorizationManager() public view returns (ISGRAuthorizationManager) {\r\n        return ISGRAuthorizationManager(getContractAddress(_ISGRAuthorizationManager_));\r\n    }\r\n\r\n    /**\r\n    * @dev throw if called when not active.\r\n    */\r\n    modifier onlyIfActive() {\r\n        require(isActive(), \"voting proposal not active\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev throw if called when user already voted.\r\n    */\r\n    modifier onlyIfUserVoteAbsent() {\r\n        require(votes[msg.sender] == 0, \"voting proposal already voted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev throw if called with invalid choice index.\r\n    */\r\n    modifier onlyIfValidChoiceIndex(uint256 _choiceIndex) {\r\n        require(_choiceIndex < choicesCount, \"invalid voting choice index\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev throw if called when user is not authorized.\r\n    */\r\n    modifier onlyIfAuthorizedUser() {\r\n        ISGRAuthorizationManager sgrAuthorizationManager = getSGRAuthorizationManager();\r\n        bool senderIsAuthorized = sgrAuthorizationManager.isAuthorizedForPublicOperation(msg.sender);\r\n        require(senderIsAuthorized, \"user is not authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Is active.\r\n    * @return is voting active.\r\n    */\r\n    function isActive() public view returns (bool) {\r\n        uint256 currentBlockNumber = block.number;\r\n        return currentBlockNumber >= startBlock && currentBlockNumber <= endBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Get total voters count .\r\n    * @return total voters count.\r\n    */\r\n    function getTotalVoters() external view returns (uint256) {\r\n        return voters.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Get voters range.\r\n    * @return voters range.\r\n    */\r\n    function getVotersRange(uint256 _startIndex, uint256 _count) external view returns (address[] memory) {\r\n        uint256 rangeCount = _count;\r\n        if (rangeCount > voters.length - _startIndex) {\r\n            rangeCount = voters.length - _startIndex;\r\n        }\r\n        address[] memory rangeVoters = new address[](rangeCount);\r\n\r\n        for (uint256 i = 0; i < rangeCount; i++) {\r\n            rangeVoters[i] = voters[_startIndex + i];\r\n        }\r\n\r\n        return rangeVoters;\r\n    }\r\n\r\n    /**\r\n    * @dev Get all voters.\r\n    * @return all voters.\r\n    */\r\n    function getAllVoters() external view returns (address[] memory) {\r\n        return voters;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Cast a vote.\r\n    * @param _choiceIndex the vote choice index.\r\n    */\r\n    function castVote(uint256 _choiceIndex) internal onlyIfActive onlyIfUserVoteAbsent onlyIfValidChoiceIndex(_choiceIndex) onlyIfAuthorizedUser\r\n    {\r\n        uint256 base1ChoiceIndex = _choiceIndex + 1;\r\n        address sender = msg.sender;\r\n        votes[sender] = base1ChoiceIndex;\r\n        voters.push(sender);\r\n        emit ProposalVoteCasted(sender, base1ChoiceIndex);\r\n    }\r\n}\r\n\r\n// File: contracts/voting/ReservePortionUSDCoinTypeProposalVoting.sol\r\n\r\ncontract ReservePortionUSDCoinTypeProposalVoting is ProposalVoting {\r\n\r\n    string[4] public choices = [\"USD Coin\", \"Tether\", \"Paxos Standard\", \"TrueUSD\"];\r\n\r\n    constructor(IContractAddressLocator _contractAddressLocator) ProposalVoting(_contractAddressLocator, \"Proposal of determining in which USD stable coin Sögur will hold a portion of its reserve\", 11236000, 11275000, 4) public {}\r\n\r\n    function voteUSDCoin() public\r\n    {\r\n        castVote(0);\r\n    }\r\n\r\n    function voteTether() public\r\n    {\r\n        castVote(1);\r\n    }\r\n\r\n    function votePaxosStandard() public\r\n    {\r\n        castVote(2);\r\n    }\r\n\r\n    function voteTrueUSD() public\r\n    {\r\n        castVote(3);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"votePaxosStandard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteTrueUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSGRAuthorizationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteUSDCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteTether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"choicesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getVotersRange\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"choices\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"ProposalVoteCasted\",\"type\":\"event\"}]","ContractName":"ReservePortionUSDCoinTypeProposalVoting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ea3486edd02ee2c9a61e1558d1fe7f592b2ee8dd74b691632751651e53960521"}]}