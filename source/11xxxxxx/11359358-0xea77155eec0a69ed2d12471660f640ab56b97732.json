{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IController {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function HARVESTER_ROLE() external view returns (bytes32);\\n\\n    function admin() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function setAdmin(address _admin) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function grantRole(bytes32 _role, address _addr) external;\\n\\n    function revokeRole(bytes32 _role, address _addr) external;\\n\\n    /*\\n    @notice Set strategy for vault\\n    @param _vault Address of vault\\n    @param _strategy Address of strategy\\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\\n    */\\n    function setStrategy(\\n        address _vault,\\n        address _strategy,\\n        uint _min\\n    ) external;\\n\\n    // calls to strategy\\n    /*\\n    @notice Invest token in vault into strategy\\n    @param _vault Address of vault\\n    */\\n    function invest(address _vault) external;\\n\\n    function harvest(address _strategy) external;\\n\\n    function skim(address _strategy) external;\\n\\n    /*\\n    @notice Withdraw from strategy to vault\\n    @param _strategy Address of strategy\\n    @param _amount Amount of underlying token to withdraw\\n    @param _min Minimum amount of underlying token to withdraw\\n    */\\n    function withdraw(\\n        address _strategy,\\n        uint _amount,\\n        uint _min\\n    ) external;\\n\\n    /*\\n    @notice Withdraw all from strategy to vault\\n    @param _strategy Address of strategy\\n    @param _min Minimum amount of underlying token to withdraw\\n    */\\n    function withdrawAll(address _strategy, uint _min) external;\\n\\n    /*\\n    @notice Exit from strategy\\n    @param _strategy Address of strategy\\n    @param _min Minimum amount of underlying token to withdraw\\n    */\\n    function exit(address _strategy, uint _min) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./protocol/IStrategy.sol\\\";\\nimport \\\"./protocol/IVault.sol\\\";\\nimport \\\"./protocol/IController.sol\\\";\\n\\n/* potential hacks?\\n- directly send underlying token to this vault or strategy\\n- flash loan\\n    - flashloan make undelying token less valuable\\n    - vault deposit\\n    - flashloan make underlying token more valuable\\n    - vault withdraw\\n    - return loan\\n- front running?\\n*/\\n\\ncontract Vault is IVault, ERC20, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    event SetStrategy(address strategy);\\n    event ApproveStrategy(address strategy);\\n    event RevokeStrategy(address strategy);\\n    event SetWhitelist(address addr, bool approved);\\n\\n    address public override admin;\\n    address public override controller;\\n    address public override timeLock;\\n    address public immutable override token;\\n    address public override strategy;\\n\\n    // mapping of approved strategies\\n    mapping(address => bool) public override strategies;\\n\\n    // percentange of token reserved in vault for cheap withdraw\\n    uint public override reserveMin = 500;\\n    uint private constant RESERVE_MAX = 10000;\\n\\n    // Denominator used to calculate fees\\n    uint private constant FEE_MAX = 10000;\\n\\n    uint public override withdrawFee;\\n    uint private constant WITHDRAW_FEE_CAP = 500; // upper limit to withdrawFee\\n\\n    bool public override paused;\\n\\n    // whitelisted addresses\\n    // used to prevent flash loah attacks\\n    mapping(address => bool) public override whitelist;\\n\\n    /*\\n    @dev vault decimals must be equal to token decimals\\n    */\\n    constructor(\\n        address _controller,\\n        address _timeLock,\\n        address _token\\n    )\\n        public\\n        ERC20(\\n            string(abi.encodePacked(\\\"unagii_\\\", ERC20(_token).name())),\\n            string(abi.encodePacked(\\\"u\\\", ERC20(_token).symbol()))\\n        )\\n    {\\n        require(_controller != address(0), \\\"controller = zero address\\\");\\n        require(_timeLock != address(0), \\\"time lock = zero address\\\");\\n\\n        _setupDecimals(ERC20(_token).decimals());\\n\\n        admin = msg.sender;\\n        controller = _controller;\\n        token = _token;\\n        timeLock = _timeLock;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyTimeLock() {\\n        require(msg.sender == timeLock, \\\"!time lock\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrController() {\\n        require(msg.sender == admin || msg.sender == controller, \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier whenStrategyDefined() {\\n        require(strategy != address(0), \\\"strategy = zero address\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n\\n    /*\\n    @dev modifier to prevent flash loan\\n    @dev caller is restricted to EOA or whitelisted contract\\n    @dev Warning: Users can have their funds stuck if shares is transferred to a contract\\n    */\\n    modifier guard() {\\n        require((msg.sender == tx.origin) || whitelist[msg.sender], \\\"!whitelist\\\");\\n        _;\\n    }\\n\\n    function setAdmin(address _admin) external override onlyAdmin {\\n        require(_admin != address(0), \\\"admin = zero address\\\");\\n        admin = _admin;\\n    }\\n\\n    function setController(address _controller) external override onlyAdmin {\\n        require(_controller != address(0), \\\"controller = zero address\\\");\\n        controller = _controller;\\n    }\\n\\n    function setTimeLock(address _timeLock) external override onlyTimeLock {\\n        require(_timeLock != address(0), \\\"time lock = zero address\\\");\\n        timeLock = _timeLock;\\n    }\\n\\n    function setPause(bool _paused) external override onlyAdmin {\\n        paused = _paused;\\n    }\\n\\n    function setWhitelist(address _addr, bool _approve) external override onlyAdmin {\\n        whitelist[_addr] = _approve;\\n        emit SetWhitelist(_addr, _approve);\\n    }\\n\\n    function setReserveMin(uint _reserveMin) external override onlyAdmin {\\n        require(_reserveMin <= RESERVE_MAX, \\\"reserve min > max\\\");\\n        reserveMin = _reserveMin;\\n    }\\n\\n    function setWithdrawFee(uint _fee) external override onlyAdmin {\\n        require(_fee <= WITHDRAW_FEE_CAP, \\\"withdraw fee > cap\\\");\\n        withdrawFee = _fee;\\n    }\\n\\n    function _balanceInVault() private view returns (uint) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    /*\\n    @notice Returns balance of tokens in vault\\n    @return Amount of token in vault\\n    */\\n    function balanceInVault() external view override returns (uint) {\\n        return _balanceInVault();\\n    }\\n\\n    function _balanceInStrategy() private view returns (uint) {\\n        if (strategy == address(0)) {\\n            return 0;\\n        }\\n\\n        return IStrategy(strategy).totalAssets();\\n    }\\n\\n    /*\\n    @notice Returns the estimate amount of token in strategy\\n    @dev Output may vary depending on price of liquidity provider token\\n         where the underlying token is invested\\n    */\\n    function balanceInStrategy() external view override returns (uint) {\\n        return _balanceInStrategy();\\n    }\\n\\n    function _totalDebtInStrategy() private view returns (uint) {\\n        if (strategy == address(0)) {\\n            return 0;\\n        }\\n        return IStrategy(strategy).totalDebt();\\n    }\\n\\n    /*\\n    @notice Returns amount of tokens invested strategy\\n    */\\n    function totalDebtInStrategy() external view override returns (uint) {\\n        return _totalDebtInStrategy();\\n    }\\n\\n    function _totalAssets() private view returns (uint) {\\n        return _balanceInVault().add(_totalDebtInStrategy());\\n    }\\n\\n    /*\\n    @notice Returns the total amount of tokens in vault + total debt\\n    @return Total amount of tokens in vault + total debt\\n    */\\n    function totalAssets() external view override returns (uint) {\\n        return _totalAssets();\\n    }\\n\\n    function _minReserve() private view returns (uint) {\\n        return _totalAssets().mul(reserveMin) / RESERVE_MAX;\\n    }\\n\\n    /*\\n    @notice Returns minimum amount of tokens that should be kept in vault for\\n            cheap withdraw\\n    @return Reserve amount\\n    */\\n    function minReserve() external view override returns (uint) {\\n        return _minReserve();\\n    }\\n\\n    function _availableToInvest() private view returns (uint) {\\n        if (strategy == address(0)) {\\n            return 0;\\n        }\\n\\n        uint balInVault = _balanceInVault();\\n        uint reserve = _minReserve();\\n\\n        if (balInVault <= reserve) {\\n            return 0;\\n        }\\n\\n        return balInVault - reserve;\\n    }\\n\\n    /*\\n    @notice Returns amount of token available to be invested into strategy\\n    @return Amount of token available to be invested into strategy\\n    */\\n    function availableToInvest() external view override returns (uint) {\\n        return _availableToInvest();\\n    }\\n\\n    /*\\n    @notice Approve strategy\\n    @param _strategy Address of strategy to revoke\\n    */\\n    function approveStrategy(address _strategy) external override onlyTimeLock {\\n        require(_strategy != address(0), \\\"strategy = zero address\\\");\\n        strategies[_strategy] = true;\\n\\n        emit ApproveStrategy(_strategy);\\n    }\\n\\n    /*\\n    @notice Revoke strategy\\n    @param _strategy Address of strategy to revoke\\n    */\\n    function revokeStrategy(address _strategy) external override onlyAdmin {\\n        require(_strategy != address(0), \\\"strategy = zero address\\\");\\n        strategies[_strategy] = false;\\n\\n        emit RevokeStrategy(_strategy);\\n    }\\n\\n    /*\\n    @notice Set strategy to approved strategy\\n    @param _strategy Address of strategy used\\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\\n    */\\n    function setStrategy(address _strategy, uint _min)\\n        external\\n        override\\n        onlyAdminOrController\\n    {\\n        require(strategies[_strategy], \\\"!approved\\\");\\n        require(_strategy != strategy, \\\"new strategy = current strategy\\\");\\n        require(\\n            IStrategy(_strategy).underlying() == token,\\n            \\\"strategy.token != vault.token\\\"\\n        );\\n        require(\\n            IStrategy(_strategy).vault() == address(this),\\n            \\\"strategy.vault != vault\\\"\\n        );\\n\\n        // withdraw from current strategy\\n        if (strategy != address(0)) {\\n            IERC20(token).safeApprove(strategy, 0);\\n\\n            uint balBefore = _balanceInVault();\\n            IStrategy(strategy).exit();\\n            uint balAfter = _balanceInVault();\\n\\n            require(balAfter.sub(balBefore) >= _min, \\\"withdraw < min\\\");\\n        }\\n\\n        strategy = _strategy;\\n\\n        emit SetStrategy(strategy);\\n    }\\n\\n    /*\\n    @notice Invest token from vault into strategy.\\n            Some token are kept in vault for cheap withdraw.\\n    */\\n    function invest()\\n        external\\n        override\\n        whenStrategyDefined\\n        whenNotPaused\\n        onlyAdminOrController\\n    {\\n        uint amount = _availableToInvest();\\n        require(amount > 0, \\\"available = 0\\\");\\n\\n        IERC20(token).safeApprove(strategy, 0);\\n        IERC20(token).safeApprove(strategy, amount);\\n\\n        IStrategy(strategy).deposit(amount);\\n\\n        IERC20(token).safeApprove(strategy, 0);\\n    }\\n\\n    /*\\n    @notice Deposit token into vault\\n    @param _amount Amount of token to transfer from `msg.sender`\\n    */\\n    function deposit(uint _amount) external override whenNotPaused nonReentrant guard {\\n        require(_amount > 0, \\\"amount = 0\\\");\\n\\n        uint totalUnderlying = _totalAssets();\\n        uint totalShares = totalSupply();\\n\\n        /*\\n        s = shares to mint\\n        T = total shares before mint\\n        d = deposit amount\\n        A = total assets in vault + strategy before deposit\\n\\n        s / (T + s) = d / (A + d)\\n        s = d / A * T\\n        */\\n        uint shares;\\n        if (totalShares == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = _amount.mul(totalShares).div(totalUnderlying);\\n        }\\n\\n        _mint(msg.sender, shares);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function _getExpectedReturn(\\n        uint _shares,\\n        uint _balInVault,\\n        uint _balInStrat\\n    ) private view returns (uint) {\\n        /*\\n        s = shares\\n        T = total supply of shares\\n        w = amount of underlying token to withdraw\\n        U = total amount of redeemable underlying token in vault + strategy\\n\\n        s / T = w / U\\n        w = s / T * U\\n        */\\n\\n        /*\\n        total underlying = bal in vault + min(total debt, bal in strat)\\n        if bal in strat > total debt, redeemable = total debt\\n        else redeemable = bal in strat\\n        */\\n        uint totalDebt = _totalDebtInStrategy();\\n        uint totalUnderlying;\\n        if (_balInStrat > totalDebt) {\\n            totalUnderlying = _balInVault.add(totalDebt);\\n        } else {\\n            totalUnderlying = _balInVault.add(_balInStrat);\\n        }\\n\\n        uint totalShares = totalSupply();\\n        if (totalShares > 0) {\\n            return _shares.mul(totalUnderlying) / totalShares;\\n        }\\n        return 0;\\n    }\\n\\n    /*\\n    @notice Calculate amount of underlying token that can be withdrawn\\n    @param _shares Amount of shares\\n    @return Amount of underlying token that can be withdrawn\\n    */\\n    function getExpectedReturn(uint _shares) external view override returns (uint) {\\n        uint balInVault = _balanceInVault();\\n        uint balInStrat = _balanceInStrategy();\\n\\n        return _getExpectedReturn(_shares, balInVault, balInStrat);\\n    }\\n\\n    /*\\n    @notice Withdraw underlying token\\n    @param _shares Amount of shares to burn\\n    @param _min Minimum amount of underlying token to return\\n    @dev Keep `guard` modifier, else attacker can deposit and then use smart\\n         contract to attack from withdraw\\n    */\\n    function withdraw(uint _shares, uint _min) external override nonReentrant guard {\\n        require(_shares > 0, \\\"shares = 0\\\");\\n\\n        uint balInVault = _balanceInVault();\\n        uint balInStrat = _balanceInStrategy();\\n        uint withdrawAmount = _getExpectedReturn(_shares, balInVault, balInStrat);\\n\\n        // Must burn after calculating withdraw amount\\n        _burn(msg.sender, _shares);\\n\\n        if (balInVault < withdrawAmount) {\\n            // maximize withdraw amount from strategy\\n            uint amountFromStrat = withdrawAmount;\\n            if (balInStrat < withdrawAmount) {\\n                amountFromStrat = balInStrat;\\n            }\\n\\n            IStrategy(strategy).withdraw(amountFromStrat);\\n\\n            uint balAfter = _balanceInVault();\\n            uint diff = balAfter.sub(balInVault);\\n\\n            if (diff < amountFromStrat) {\\n                // withdraw amount - withdraw amount from strat = amount to withdraw from vault\\n                // diff = actual amount returned from strategy\\n                // NOTE: withdrawAmount >= amountFromStrat\\n                withdrawAmount = (withdrawAmount - amountFromStrat).add(diff);\\n            }\\n\\n            // transfer to treasury\\n            uint fee = withdrawAmount.mul(withdrawFee) / FEE_MAX;\\n            if (fee > 0) {\\n                address treasury = IController(controller).treasury();\\n                require(treasury != address(0), \\\"treasury = zero address\\\");\\n\\n                withdrawAmount = withdrawAmount - fee;\\n                IERC20(token).safeTransfer(treasury, fee);\\n            }\\n        }\\n\\n        require(withdrawAmount >= _min, \\\"withdraw < min\\\");\\n\\n        IERC20(token).safeTransfer(msg.sender, withdrawAmount);\\n    }\\n\\n    /*\\n    @notice Transfer token != underlying token in vault to admin\\n    @param _token Address of token to transfer\\n    @dev Must transfer token to admin\\n    @dev _token must not be equal to underlying token\\n    @dev Used to transfer token that was accidentally sent to this vault\\n    */\\n    function sweep(address _token) external override onlyAdmin {\\n        require(_token != token, \\\"token = vault.token\\\");\\n        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IStrategy {\\n    function admin() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function vault() external view returns (address);\\n\\n    /*\\n    @notice Returns address of underlying token\\n    */\\n    function underlying() external view returns (address);\\n\\n    /*\\n    @notice Returns total amount of underlying transferred from vault\\n    */\\n    function totalDebt() external view returns (uint);\\n\\n    function performanceFee() external view returns (uint);\\n\\n    /*\\n    @notice Returns true if token cannot be swept\\n    */\\n    function assets(address _token) external view returns (bool);\\n\\n    function setAdmin(address _admin) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setPerformanceFee(uint _fee) external;\\n\\n    /*\\n    @notice Returns amount of underlying stable coin locked in this contract\\n    @dev Output may vary depending on price of liquidity provider token\\n         where the underlying token is invested\\n    */\\n    function totalAssets() external view returns (uint);\\n\\n    /*\\n    @notice Deposit `amount` underlying token for yield token\\n    @param amount Amount of underlying token to deposit\\n    */\\n    function deposit(uint _amount) external;\\n\\n    /*\\n    @notice Withdraw `amount` yield token to withdraw\\n    @param amount Amount of yield token to withdraw\\n    */\\n    function withdraw(uint _amount) external;\\n\\n    /*\\n    @notice Withdraw all underlying token from strategy\\n    */\\n    function withdrawAll() external;\\n\\n    function harvest() external;\\n\\n    /*\\n    @notice Exit from strategy\\n    @dev Must transfer all underlying tokens back to vault\\n    */\\n    function exit() external;\\n\\n    /*\\n    @notice Transfer profit over total debt to vault\\n    */\\n    function skim() external;\\n\\n    /*\\n    @notice Transfer token in strategy to admin\\n    @param _token Address of token to transfer\\n    @dev Must transfer token to admin\\n    @dev _token must not be equal to underlying token\\n    @dev Used to transfer token that was accidentally sent or\\n         claim dust created from this strategy\\n    */\\n    function sweep(address _token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface IVault {\\n    function admin() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function timeLock() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function strategy() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (bool);\\n\\n    function reserveMin() external view returns (uint);\\n\\n    function withdrawFee() external view returns (uint);\\n\\n    function paused() external view returns (bool);\\n\\n    function whitelist(address _addr) external view returns (bool);\\n\\n    function setWhitelist(address _addr, bool _approve) external;\\n\\n    function setAdmin(address _admin) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setTimeLock(address _timeLock) external;\\n\\n    function setPause(bool _paused) external;\\n\\n    function setReserveMin(uint _reserveMin) external;\\n\\n    function setWithdrawFee(uint _fee) external;\\n\\n    /*\\n    @notice Returns the amount of token in the vault\\n    */\\n    function balanceInVault() external view returns (uint);\\n\\n    /*\\n    @notice Returns the estimate amount of token in strategy\\n    @dev Output may vary depending on price of liquidity provider token\\n         where the underlying token is invested\\n    */\\n    function balanceInStrategy() external view returns (uint);\\n\\n    /*\\n    @notice Returns amount of tokens invested strategy\\n    */\\n    function totalDebtInStrategy() external view returns (uint);\\n\\n    /*\\n    @notice Returns the total amount of token in vault + total debt\\n    */\\n    function totalAssets() external view returns (uint);\\n\\n    /*\\n    @notice Returns minimum amount of tokens that should be kept in vault for\\n            cheap withdraw\\n    @return Reserve amount\\n    */\\n    function minReserve() external view returns (uint);\\n\\n    /*\\n    @notice Returns the amount of tokens available to be invested\\n    */\\n    function availableToInvest() external view returns (uint);\\n\\n    /*\\n    @notice Approve strategy\\n    @param _strategy Address of strategy\\n    */\\n    function approveStrategy(address _strategy) external;\\n\\n    /*\\n    @notice Revoke strategy\\n    @param _strategy Address of strategy\\n    */\\n    function revokeStrategy(address _strategy) external;\\n\\n    /*\\n    @notice Set strategy\\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\\n    */\\n    function setStrategy(address _strategy, uint _min) external;\\n\\n    /*\\n    @notice Transfers token in vault to strategy\\n    */\\n    function invest() external;\\n\\n    /*\\n    @notice Deposit undelying token into this vault\\n    @param _amount Amount of token to deposit\\n    */\\n    function deposit(uint _amount) external;\\n\\n    /*\\n    @notice Calculate amount of token that can be withdrawn\\n    @param _shares Amount of shares\\n    @return Amount of token that can be withdrawn\\n    */\\n    function getExpectedReturn(uint _shares) external view returns (uint);\\n\\n    /*\\n    @notice Withdraw token\\n    @param _shares Amount of shares to burn\\n    @param _min Minimum amount of token expected to return\\n    */\\n    function withdraw(uint _shares, uint _min) external;\\n\\n    /*\\n    @notice Transfer token in vault to admin\\n    @param _token Address of token to transfer\\n    @dev _token must not be equal to vault token\\n    */\\n    function sweep(address _token) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ApproveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RevokeStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveMin\",\"type\":\"uint256\"}],\"name\":\"setReserveMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"}],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000013195fa27de3fc1b5adcfb9b005989157600efcc00000000000000000000000086d10751b18f3fe331c146546868a07224a8598b0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}