{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/openzeppelin/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.1;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function decimals() external returns (uint8);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/openzeppelin/Ownable.sol\r\n\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Behodler1Migration/ScarcityBridge.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract SCX {\r\n    function burn(uint256 value) external virtual;\r\n\r\n    function migrateMint(address recipient, uint256 value) public virtual;\r\n}\r\n\r\ncontract ScarcityBridge is Ownable {\r\n    struct ScarcityTotals {\r\n        uint256 total_v1;\r\n        uint256 total_v2;\r\n        uint256 blockRecorded;\r\n        address scarcity1;\r\n        address scarcity2;\r\n    }\r\n    uint256 public exchangeRate; //also represents the minimum old SCX required to get 1 unit of new SCX\r\n    ScarcityTotals public totals;\r\n\r\n    constructor(address scarcity1, address scarcity2) {\r\n        totals.scarcity1 = scarcity1;\r\n        totals.scarcity2 = scarcity2;\r\n    }\r\n\r\n    function collectScarcity2BeforeBurning() public onlyOwner {\r\n        uint balanceOfSender = IERC20(totals.scarcity2).balanceOf(msg.sender);\r\n        IERC20(totals.scarcity2).transferFrom(msg.sender,address(this), balanceOfSender);\r\n        totals.total_v2 += balanceOfSender;\r\n    }\r\n\r\n    function recordExchangeRate() public onlyOwner {\r\n        totals.total_v1 = IERC20(totals.scarcity1).totalSupply();\r\n        exchangeRate = totals.total_v1 / totals.total_v2;\r\n        totals.blockRecorded = block.number;\r\n    }\r\n\r\n    function swap() public {\r\n        uint256 v1Balance = IERC20(totals.scarcity1).balanceOf(msg.sender);\r\n        require(\r\n            IERC20(totals.scarcity1).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                v1Balance\r\n            ),\r\n            \"SCX BRIDGE: transfer failed.\"\r\n        );\r\n        uint256 newSCX = v1Balance / exchangeRate;\r\n        require(newSCX > 0, \"SCX BRIDGE: insufficient SCX sent.\");\r\n        uint256 thisBalance = IERC20(totals.scarcity1).balanceOf(address(this));\r\n        require(thisBalance == v1Balance, \"Invariant fail\");\r\n        SCX(totals.scarcity1).burn(v1Balance);\r\n        IERC20(totals.scarcity2).transfer(msg.sender, newSCX);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scarcity1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"scarcity2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectScarcity2BeforeBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_v1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_v2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockRecorded\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scarcity1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"scarcity2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ScarcityBridge","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff1614c6b220b24d140e64684aae39067a0f1cd00000000000000000000000001b8568fbb47708e9e9d31ff303254f748805bf21","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://97e6b7625ae8a11dbb0592b9f23e27d70aade26c22909ff98fe80682de8124a7"}]}