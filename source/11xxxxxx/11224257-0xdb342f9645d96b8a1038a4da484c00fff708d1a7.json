{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract UNYCrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n    address private _owner;\r\n\r\n    uint256[] private _phaseGoals = [\r\n        8000000000000000000000,\r\n        17000000000000000000000,\r\n        27000000000000000000000\r\n    ];\r\n    uint256[] private _phasePrices = [40, 30, 20];\r\n\r\n    uint8 private _phase = 0;\r\n    uint256 private _raisedAmount = 0; // UNY sent\r\n    bool private _isClose = false;\r\n\r\n    IERC20 private _token;\r\n\r\n    constructor (address tokenAddr) public {\r\n        _owner = msg.sender;\r\n        _token = IERC20(tokenAddr);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(_phase <= 2 && !_isClose, \"Crowdfunding is closed\");\r\n\r\n        uint256 expected = msg.value.mul(_phasePrices[_phase]);\r\n        uint256 totalAmount = _raisedAmount.add(expected);\r\n        require(totalAmount <= _phaseGoals[2], \"Not enough remaining tokens\");\r\n\r\n        _token.transfer(msg.sender, expected);\r\n\r\n        _raisedAmount = _raisedAmount.add(expected);\r\n        if (_phase < 2 && _raisedAmount >= _phaseGoals[_phase]) {\r\n            _phase = _phase + 1;\r\n        }\r\n    }\r\n\r\n    function setClose(bool status) public returns (bool) {\r\n        require(msg.sender == _owner, \"sender is not owner\");\r\n\r\n        _isClose = status;\r\n        return true;\r\n    }\r\n\r\n    function withdrawETH(address payable recipient) public returns (bool) {\r\n        require(msg.sender == _owner, \"sender is not owner\");\r\n\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0) {\r\n            recipient.transfer(balance);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function withdrawUNY(address recipient) public returns (bool) {\r\n        require(msg.sender == _owner, \"sender is not owner\");\r\n\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            _token.transfer(recipient, balance);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setClose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawUNY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UNYCrowdSale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f849f285f173b146ed7a5711c524b51ab4731d79","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd04183a0920717e3edbe09901f6759a18280cd9de40cb7b18220d0ef01d15de"}]}