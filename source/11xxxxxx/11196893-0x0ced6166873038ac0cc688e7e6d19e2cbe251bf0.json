{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/root.sol\npragma solidity >=0.5.15 >=0.5.15 <0.6.0;\n\n////// lib/tinlake-auth/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n/* pragma solidity >=0.5.15; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n\n////// lib/tinlake-auth/src/auth.sol\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"ds-note/note.sol\"; */\n\ncontract Auth is DSNote {\n    mapping (address => uint) public wards;\n    function rely(address usr) public auth note { wards[usr] = 1; }\n    function deny(address usr) public auth note { wards[usr] = 0; }\n    modifier auth { require(wards[msg.sender] == 1); _; }\n}\n\n////// src/root.sol\n// Copyright (C) 2020 Centrifuge\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity >=0.5.15 <0.6.0; */\n\n/* import \"tinlake-auth/auth.sol\"; */\n\ninterface AuthLike_3 {\n    function rely(address) external;\n    function deny(address) external;\n}\n\ninterface DependLike_3 {\n    function depend(bytes32, address) external;\n}\n\ninterface BorrowerDeployerLike {\n    function collector() external returns (address);\n    function feed() external returns (address);\n    function shelf() external returns (address);\n    function title() external returns (address);\n}\n\ninterface LenderDeployerLike {\n    function assessor() external returns (address);\n    function reserve() external returns (address);\n    function assessorAdmin() external returns (address);\n    function juniorMemberlist() external returns (address);\n    function seniorMemberlist() external returns (address);\n}\n\n\ncontract TinlakeRoot is Auth {\n    BorrowerDeployerLike public borrowerDeployer;\n    LenderDeployerLike public  lenderDeployer;\n\n    bool public             deployed;\n    address public          deployUsr;\n\n    constructor (address deployUsr_) public {\n        deployUsr = deployUsr_;\n    }\n\n    // --- Prepare ---\n    // Sets the two deployer dependencies. This needs to be called by the deployUsr\n    function prepare(address lender_, address borrower_, address ward_) public {\n        require(deployUsr == msg.sender);\n        borrowerDeployer = BorrowerDeployerLike(borrower_);\n        lenderDeployer = LenderDeployerLike(lender_);\n        wards[ward_] = 1;\n        deployUsr = address(0); // disallow the deploy user to call this more than once.\n    }\n\n    // --- Deploy ---\n    // After going through the deploy process on the lender and borrower method, this method is called to connect\n    // lender and borrower contracts.\n    function deploy() public {\n        require(address(borrowerDeployer) != address(0) && address(lenderDeployer) != address(0) && deployed == false);\n        deployed = true;\n\n        address reserve_ = lenderDeployer.reserve();\n        address shelf_ = borrowerDeployer.shelf();\n\n        // Borrower depends\n        DependLike_3(borrowerDeployer.collector()).depend(\"distributor\", reserve_);\n        DependLike_3(borrowerDeployer.shelf()).depend(\"lender\", reserve_);\n        DependLike_3(borrowerDeployer.shelf()).depend(\"distributor\", reserve_);\n\n        //AuthLike(reserve).rely(shelf_);\n\n        //  Lender depends\n        address navFeed = borrowerDeployer.feed();\n\n        DependLike_3(reserve_).depend(\"shelf\", shelf_);\n        DependLike_3(lenderDeployer.assessor()).depend(\"navFeed\", navFeed);\n\n         // permissions\n        address poolAdmin = 0x71d9f8CFdcCEF71B59DD81AB387e523E2834F2b8;                                             \n        address memberlistAdmin = 0x97b2d32FE673af5bb322409afb6253DFD02C0567;\n        address oracle = 0x92DbD5174c46C0780c1d5D80c8db2f5334E85484;\n        AuthLike_3(lenderDeployer.assessorAdmin()).rely(poolAdmin);\n        AuthLike_3(lenderDeployer.juniorMemberlist()).rely(memberlistAdmin);\n        AuthLike_3(lenderDeployer.seniorMemberlist()).rely(memberlistAdmin);\n        AuthLike_3(navFeed).rely(oracle);\n    }\n\n    // --- Governance Functions ---\n    // `relyContract` & `denyContract` can be called by any ward on the TinlakeRoot\n    // contract to make an arbitrary address a ward on any contract the TinlakeRoot\n    // is a ward on.\n    function relyContract(address target, address usr) public auth {\n        AuthLike_3(target).rely(usr);\n    }\n\n    function denyContract(address target, address usr) public auth {\n        AuthLike_3(target).deny(usr);\n    }\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployUsr_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerDeployer\",\"outputs\":[{\"internalType\":\"contract BorrowerDeployerLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployUsr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lenderDeployer\",\"outputs\":[{\"internalType\":\"contract LenderDeployerLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ward_\",\"type\":\"address\"}],\"name\":\"prepare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"relyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TinlakeRoot","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000790c2c860ddc993f3da92b19cb440cf8338c59a6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}