{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is Context, WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(_msgSender());\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\r\n */\r\ncontract Secondary is Context {\r\n    address private _primary;\r\n\r\n    /**\r\n     * @dev Emitted when the primary contract changes.\r\n     */\r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _primary = msgSender;\r\n        emit PrimaryTransferred(msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called from any account other than the primary.\r\n     */\r\n    modifier onlyPrimary() {\r\n        require(_msgSender() == _primary, \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the primary.\r\n     */\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers contract to a new primary.\r\n     * @param recipient The address of new primary.\r\n     */\r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0), \"Secondary: new primary is the zero address\");\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n\r\n    function decimals() external view returns (uint digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/BondingVaultInterface.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface BondingVaultInterface {\r\n\r\n    function fundWithReward(address payable _donor) external payable;\r\n\r\n    function getEthKidsToken() external view returns (address);\r\n\r\n    function calculateReward(uint256 _ethAmount) external view returns (uint256 _tokenAmount);\r\n\r\n    function calculateReturn(uint256 _tokenAmount) external view returns (uint256 _returnEth);\r\n\r\n    function sweepVault(address payable _operator) external;\r\n\r\n    function addWhitelisted(address account) external;\r\n\r\n    function removeWhitelisted(address account) external;\r\n\r\n}\r\n\r\n// File: contracts/YieldVaultInterface.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\ninterface YieldVaultInterface {\r\n\r\n    function withdraw(address _token, address _atoken, uint _amount) external;\r\n\r\n    function addWhitelisted(address account) external;\r\n\r\n    function removeWhitelisted(address account) external;\r\n\r\n}\r\n\r\n// File: contracts/RegistryInterface.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\ninterface RegistryInterface {\r\n\r\n    function getCurrencyConverter() external view returns (address);\r\n\r\n    function getBondingVault() external view returns (BondingVaultInterface);\r\n\r\n    function yieldVault() external view returns (YieldVaultInterface);\r\n\r\n    function getCharityVaults() external view returns (address[] memory);\r\n\r\n    function communityCount() external view returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/RegistryAware.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ninterface RegistryAware {\r\n\r\n    function setRegistry(address _registry) external;\r\n\r\n    function getRegistry() external view returns (RegistryInterface);\r\n}\r\n\r\n// File: contracts/community/CharityVault.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CharityVault\r\n * @dev Vault which holds the assets until the community leader(s) decide to transfer\r\n * them to the actual charity destination.\r\n * Deposit and withdrawal calls come only from the actual community contract\r\n */\r\ncontract CharityVault is RegistryAware, Secondary {\r\n    using SafeMath for uint256;\r\n\r\n    RegistryInterface public registry;\r\n    uint256 public sumStats;\r\n\r\n    event LogDonationReceived(\r\n        uint256 amount,\r\n        address indexed account\r\n    );\r\n    event LogDonationWithdrawn(\r\n        uint256 amount,\r\n        address indexed account\r\n    );\r\n\r\n    /**\r\n    * @dev 'deposit' must be used instead\r\n    **/\r\n    function() external {\r\n        //no 'payable' here\r\n    }\r\n\r\n    /**\r\n     * @dev Receives some ETH and stores it.\r\n     * @param _payee the donor's address.\r\n     */\r\n    function deposit(address _payee) public payable {\r\n        sumStats = sumStats.add(msg.value);\r\n        emit LogDonationReceived(msg.value, _payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw some of accumulated balance for a _payee.\r\n     */\r\n    function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {\r\n        require(_payment > 0 && address(this).balance >= _payment, \"Insufficient funds in the charity vault\");\r\n        _payee.transfer(_payment);\r\n        emit LogDonationWithdrawn(_payment, _payee);\r\n    }\r\n\r\n    function setRegistry(address _registry) public onlyPrimary {\r\n        registry = (RegistryInterface)(_registry);\r\n    }\r\n\r\n    function getRegistry() public view returns (RegistryInterface) {\r\n        return registry;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/community/IDonationCommunity.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface IDonationCommunity {\r\n\r\n    function donateDelegated(address payable _donator) external payable;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function charityVault() external view returns (address);\r\n}\r\n\r\n// File: contracts/community/DonationCommunity.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DonationCommunity\r\n * @dev Manages donations and owns a charity vault\r\n * Aware of the EthKidsRegistry and passes a part of donations to the whole community\r\n * The 'admin' is the community leader\r\n * The 'whitelisted' account is the EthKidsRegistry and must be specified\r\n * prior to adding to the EthKidsRegistry\r\n */\r\ncontract DonationCommunity is IDonationCommunity, RegistryAware, WhitelistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant CHARITY_DISTRIBUTION = 90; //%, the rest funds bonding curve\r\n\r\n    string private _name;\r\n    CharityVault public charityVault;\r\n\r\n    RegistryInterface public registry;\r\n\r\n    event LogDonationReceived\r\n    (\r\n        address from,\r\n        uint256 amount\r\n    );\r\n    event LogPassToCharity\r\n    (\r\n        address by,\r\n        address intermediary,\r\n        uint256 amount,\r\n        string ipfsHash\r\n    );\r\n\r\n    /**\r\n    * @dev not allowed, can't store ETH\r\n    **/\r\n    function() external {\r\n        //no 'payable' here\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param name for reference\r\n    */\r\n    constructor (string memory name) public {\r\n        _name = name;\r\n        charityVault = new CharityVault();\r\n    }\r\n\r\n    function setRegistry(address _registry) public onlyWhitelisted {\r\n        registry = (RegistryInterface)(_registry);\r\n        charityVault.setRegistry(_registry);\r\n    }\r\n\r\n    function getRegistry() public view returns (RegistryInterface) {\r\n        return registry;\r\n    }\r\n\r\n    function allocate(uint256 donation) internal pure returns (uint256 _charityAllocation, uint256 _bondingAllocation) {\r\n        uint256 _multiplier = 100;\r\n        _charityAllocation = (donation).mul(CHARITY_DISTRIBUTION).div(_multiplier);\r\n        _bondingAllocation = donation.sub(_charityAllocation);\r\n        return (_charityAllocation, _bondingAllocation);\r\n    }\r\n\r\n    function myReward(uint256 _ethAmount) public view returns (uint256 tokenAmount) {\r\n        (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);\r\n        return getRegistry().getBondingVault().calculateReward(_bondingAllocation);\r\n    }\r\n\r\n    function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {\r\n        return getRegistry().getBondingVault().calculateReturn(_tokenAmount);\r\n    }\r\n\r\n    function donate() public payable {\r\n        donateDelegated(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Donate funds on behalf of someone else.\r\n    * Primary use is to pass the actual donor when the caller is a proxy, like KyberConverter\r\n    * @param _donor address that will be recorded as a donor and will receive the community tokens\r\n    **/\r\n    function donateDelegated(address payable _donor) public payable {\r\n        require(msg.value > 0, \"Must include some ETH to donate\");\r\n\r\n        (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);\r\n        charityVault.deposit.value(_charityAllocation)(_donor);\r\n\r\n        getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);\r\n\r\n        emit LogDonationReceived(_donor, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Donate funds on behalf of someone else without being rewarded.\r\n    * @param _donor address that will be recorded as a donor\r\n    **/\r\n    function donateDelegatedNoReward(address payable _donor) public payable {\r\n        require(msg.value > 0, \"Must include some ETH to donate\");\r\n\r\n        (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);\r\n        charityVault.deposit.value(_charityAllocation)(_donor);\r\n\r\n        address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));\r\n        bondingVaultPayable.transfer(_bondingAllocation);\r\n\r\n        emit LogDonationReceived(_donor, msg.value);\r\n    }\r\n\r\n    function passToCharity(uint256 _amount, address payable _intermediary, string memory _ipfsHash) public onlyWhitelistAdmin {\r\n        require(_intermediary != address(0));\r\n        charityVault.withdraw(_intermediary, _amount);\r\n\r\n        emit LogPassToCharity(msg.sender, _intermediary, _amount, _ipfsHash);\r\n    }\r\n\r\n    function passToCharityWithInterest(uint256 _amount, address payable _intermediary, string memory _ipfsHash, address _aaveToken, address _aaveAToken) public onlyWhitelistAdmin {\r\n        passToCharity(_amount, _intermediary, _ipfsHash);\r\n        //distribute accumulated interest amongst the communities\r\n        registry.yieldVault().withdraw(_aaveToken, _aaveAToken, 0);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"charityVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"donateDelegated\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"donateDelegatedNoReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_intermediary\",\"type\":\"address\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"passToCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"myReward\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHARITY_DISTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"myReturn\",\"outputs\":[{\"name\":\"returnEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_intermediary\",\"type\":\"address\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"name\":\"_aaveToken\",\"type\":\"address\"},{\"name\":\"_aaveAToken\",\"type\":\"address\"}],\"name\":\"passToCharityWithInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"intermediary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"LogPassToCharity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"DonationCommunity","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000084368616e63654259000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d211a8cbaab2127e4dcc4e4e6400c2746851f2d5df2a7c4dd8918f8ee5cb2f1b"}]}