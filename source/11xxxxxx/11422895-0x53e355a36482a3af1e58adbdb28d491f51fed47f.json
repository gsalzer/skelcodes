{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.5;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IESDS {\r\n    function transferCoupons(address _sender, address _recipient, uint256 _epoch, uint256 _amount) external;\r\n    function balanceOfCoupons(address _account, uint256 _epoch) external view returns (uint256);\r\n    function allowanceCoupons(address _owner, address _spender) external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CouponTrader {\r\n    using SafeMath for uint256;\r\n\r\n    IESDS constant private ESDS = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\r\n    IERC20 constant private USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint256 constant private HOUSE_RATE = 100; // 100 basis points (1%) -- fee taken by the house\r\n    address constant private OPEN_SALE_INDICATOR = 0x0000000000000000000000000000000000000001; // if this is the \"buyer\" then anyone can buy\r\n    address public house = 0xE1dba80BAc43407360c7b0175444893eBaA30098; // collector of house take\r\n    \r\n    struct Offer {\r\n        address buyer;\r\n        uint256 epoch;\r\n        uint256 numCoupons;\r\n        uint256 price; // in USDC -- recall that USD uses 6 decimals, not 18\r\n    }\r\n    \r\n    mapping (address => Offer) private offerBySeller;\r\n    \r\n    event OfferSet(address indexed seller, address indexed buyer, uint256 indexed epoch, uint256 numCoupons, uint256 price);\r\n    event SuccessfulTrade(address indexed seller, address indexed buyer, uint256 epoch, uint256 numCoupons, uint256 price);\r\n    \r\n    // @notice Allows a seller to set or update an offer\r\n    // @notice Caller MUST have approved this contract to move their coupons before calling this function or else this will revert.\r\n    // @dev Does some sanity checks to make sure the seller can hold up their end. This check \r\n    //    is for UX purposes only and can be bypassed trivially. It is not security critical.\r\n    // @param _buyer The buyer who is allowed to take this offer. If the _buyer param is set to OPEN_SALE_INDICATOR then\r\n    //    anyone can take this offer.\r\n    // @param _epoch The epoch of the coupons to be sold.\r\n    // @param _numCoupons The number of coupons to be sold.\r\n    // @param _price The amount of USDC the buyer must pay to take this offer. Remember that USDC uses 6 decimal places, not 18.\r\n    function setOffer(address _buyer, uint256 _epoch, uint256 _numCoupons, uint256 _price) external {\r\n        // sanity checks\r\n        require(ESDS.balanceOfCoupons(msg.sender, _epoch) >= _numCoupons, \"seller doesn't have enough coupons at that epoch\");\r\n        require(ESDS.allowanceCoupons(msg.sender, address(this)) >= _numCoupons, \"seller hasn't approved this contract to move enough coupons\");\r\n        require(_price > 0, \"zero price\");\r\n        \r\n        // store new offer\r\n        Offer memory newOffer = Offer(_buyer, _epoch, _numCoupons, _price);\r\n        offerBySeller[msg.sender] = newOffer;\r\n        \r\n        emit OfferSet(msg.sender, _buyer, _epoch, _numCoupons, _price);\r\n    }\r\n    \r\n    // @notice A convenience function a seller can use to revoke their offer.\r\n    function revokeOffer() external {\r\n        delete offerBySeller[msg.sender];\r\n        emit OfferSet(msg.sender, address(0), 0, 0, 0);\r\n    }\r\n    \r\n    // @notice A getter for the offers\r\n    // @param _seller The address of the seller whose offer we want to return.\r\n    function getOffer(address _seller) external view returns (address, uint256, uint256, uint256) {\r\n        Offer memory offer = offerBySeller[_seller];\r\n        return (offer.buyer, offer.epoch, offer.numCoupons, offer.price);\r\n    }\r\n    \r\n    // @notice Allows a buyer to take an offer.\r\n    // @dev Partial fills are not supported.\r\n    // @dev The buyer must have approved this contract to move enough USDC to pay for this purchase.\r\n    // @param _seller The seller whose offer the caller wants to take.\r\n    // @param _epoch The epoch of the coupons being bought (must match the seller's offer). \r\n    // @param _numCoupons The number of coupons being bought (must match the seller's offer).\r\n    // @param _price The amount of USDC the buyer is paying (must match the seller's offer).\r\n    function takeOffer(address _seller, uint256 _epoch, uint256 _numCoupons, uint256 _price) external {\r\n        // get offer information\r\n        Offer memory offer = offerBySeller[_seller];\r\n        \r\n        // check that the caller is authorized\r\n        require(msg.sender == offer.buyer || offer.buyer == OPEN_SALE_INDICATOR, \"unauthorized buyer\");\r\n        \r\n        // check that the order details are correct (protects buyer from frontrunning by the seller)\r\n        require(\r\n            offer.epoch == _epoch &&\r\n            offer.numCoupons == _numCoupons &&\r\n            offer.price == _price,\r\n            \"order details do not match the seller's offer\"\r\n        );\r\n        \r\n        // delete the seller's offer (so this offer cannot be filled twice)\r\n        delete offerBySeller[_seller];\r\n        \r\n        // compute house take and seller take (USDC)\r\n        uint256 houseTake = offer.price.mul(HOUSE_RATE).div(10_000);\r\n        uint256 sellerTake = offer.price.sub(houseTake);\r\n        \r\n        // pay the seller USDC\r\n        require(USDC.transferFrom(msg.sender, _seller, sellerTake), \"could not pay seller\");\r\n        \r\n        // pay the house USDC\r\n        require(USDC.transferFrom(msg.sender, house, houseTake), \"could not pay house\");\r\n        \r\n        // transfer the coupons to the buyer\r\n        ESDS.transferCoupons(_seller, msg.sender, _epoch, _numCoupons); // @audit-ok reverts on failure\r\n        \r\n        // emit events\r\n        emit SuccessfulTrade(_seller, msg.sender, _epoch, _numCoupons, _price);\r\n        emit OfferSet(_seller, address(0), 0, 0, 0);\r\n    }\r\n    \r\n    // @notice Allows house address to change the house address\r\n    function changeHouseAddress(address _newAddress) external {\r\n        require(msg.sender == house);\r\n        house = _newAddress;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numCoupons\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OfferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numCoupons\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SuccessfulTrade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numCoupons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numCoupons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CouponTrader","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://16253dcc688cb84ae700bcfac1176031874f6c093110bf5bd1cb254738a8b38e"}]}