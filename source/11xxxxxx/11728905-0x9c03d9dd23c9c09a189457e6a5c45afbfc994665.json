{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.10;\r\n\r\n// -------------------------------------------------------------------------------------\r\n//    _______ .___________. __    __  .___  ___.      ___      ___   ___  -----------\r\n//   |   ____||           ||  |  |  | |   \\/   |     /   \\     \\  \\ /  /  ---------\r\n//   |  |__   `---|  |----`|  |__|  | |  \\  /  |    /  ^  \\     \\  V  /   -------\r\n//   |   __|      |  |     |   __   | |  |\\/|  |   /  /_\\  \\     >   <    -----\r\n//   |  |____     |  |     |  |  |  | |  |  |  |  /  _____  \\   /  .  \\   ---\r\n//   |_______|    |__|     |__|  |__| |__|  |__| /__/     \\__\\ /__/ \\__\\  --\r\n//                                                                        -\r\n// -----------------------------------------------------------------------\r\n\r\ncontract ethmax {\r\n    \r\n\tusing SafeMath for uint256;\r\n\t\r\n\tuint256 constant public MIN_AMOUNT = 0.1 ether;\r\n\tuint256 constant public GAS_FEE_SUBSIDE = 0.02 ether;\r\n\t\r\n\tuint256 constant public BASE_PERCENT = 1390; \r\n\t\r\n\tuint256[] public REFERRAL_PERCENTS = [5000000, 2000000, 1000000];\r\n\tuint256 constant public PL_SHARE = 10000000;\r\n\tuint256 constant public PERCENTS_DIVIDER = 100000000; // 1000000 = 1%\r\n\t\r\n\tuint256 constant public CONTRACT_BALANCE_STEP = 100 ether;\r\n\tuint256 constant public TIME_STEP = 1 minutes; \r\n    uint256 constant public TIME_STEP2 = 1 hours; \r\n    \r\n\tuint256 public totalUsers;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\r\n\r\n\taddress payable public PL_Address;\r\n\taddress public EMAX_TokenAddress;\r\n\t\r\n\tstruct Deposit {\r\n\t\tuint256 amount;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256 bonus;\r\n\t\tuint256 UserTotalWithdrawn;\r\n\t}\r\n\tmapping (address => User) internal users;\r\n\t\r\n\tmapping (address => uint256) internal ethMaxTokensToClaim;\r\n\t\r\n\tconstructor(address payable PoolAddr, address _ethMaxTokenAddress) public {\r\n\t\tPL_Address = PoolAddr;\r\n\t\tEMAX_TokenAddress = _ethMaxTokenAddress;\r\n\t}\r\n\r\n\r\n// Add ETH Function. \r\n// if no referrer, referrer = 0x0000000000000000000000000000000000000000\r\n\tfunction add(address referrer) external payable {\r\n\t\trequire(msg.value >= MIN_AMOUNT);\r\n\t\t\r\n        (bool success, ) = PL_Address.call{value: msg.value.mul(PL_SHARE).div(PERCENTS_DIVIDER)}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n\t\t\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tif (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\tuser.referrer = referrer;\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(msg.value, 0, block.timestamp));\r\n\r\n\t\ttotalInvested = totalInvested.add(msg.value);\r\n\t\ttotalDeposits = totalDeposits.add(1);\r\n        \r\n        /***Airdrop of tokens**/\r\n        uint256 ethMaxTokens = calculateAirdropTokens(msg.value);\r\n        ethMaxTokensToClaim[msg.sender] = ethMaxTokensToClaim[msg.sender].add(ethMaxTokens);\r\n        //////////////\r\n\t\tmsg.sender.transfer(GAS_FEE_SUBSIDE);\r\n\r\n\t}\r\n\t /***Airdrop of tokens**/\r\n\tfunction calculateAirdropTokens(uint256 investment) internal pure returns (uint256){\r\n\t    return investment.mul(500);\r\n\t}\r\n\t\r\n// Withdraw Function. Will withdraw all pending profits & referral rewards.\r\n\tfunction withdraw() external {\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tuint256 userTotalRate = getUserTotalRate(msg.sender);\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\r\n\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userTotalRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userTotalRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); \r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t\tuser.bonus = 0;\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no profits\");\r\n                    \r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\trequire(totalAmount < contractBalance.mul(1000000).div(PERCENTS_DIVIDER), \"Exceed limit\");\r\n\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\t\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\r\n        user.UserTotalWithdrawn = user.UserTotalWithdrawn.add(totalAmount);\r\n        \r\n\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\t}\r\n\r\n//Claim EMAX Airdrop\r\n\tfunction claim() external {\r\n\t    require(ethMaxTokensToClaim[msg.sender] > 0, \"nothing pending to claim\");\r\n\t    /***Airdrop of tokens**/\r\n        uint256 tokensToClaim = ethMaxTokensToClaim[msg.sender];\r\n        ethMaxTokensToClaim[msg.sender] = 0;\r\n        require(IERC20(EMAX_TokenAddress).transfer(msg.sender, tokensToClaim), \"airdrop failed\");\r\n\t}\r\n\r\n//get ETHmax Contract Balance\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n//get ETHmax Boost Rate \r\n\tfunction getBoostRate() public view returns (uint256) {\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\treturn min(contractBalance.div(CONTRACT_BALANCE_STEP).mul(2), 5216);\r\n\t}\r\n\t\r\n\t\r\n//get user Base Rate\r\n    function getUserBaseRate(address userAddress) public view returns (uint256) {\r\n        \r\n        User storage user = users[userAddress];\r\n        \r\n        if(getUserTotalDeposits(userAddress) < 10 ether){\r\n\t\treturn BASE_PERCENT;\r\n        }\r\n        \r\n        if(getUserTotalDeposits(userAddress) >= 10 ether && getUserTotalDeposits(userAddress) < 20 ether){\r\n\t\treturn BASE_PERCENT.add(70);\r\n        }\r\n        \r\n\t\tif(getUserTotalDeposits(userAddress) >= 20 ether){\r\n\t\treturn BASE_PERCENT.add(140);\r\n\t\t}\r\n\t}\r\n\r\n//get Current Return Rate\r\n\tfunction getCurrentReturnRate() public view returns (uint256){\r\n\t    return BASE_PERCENT.add(getBoostRate());\r\n\t}\r\n\t\r\n//get Total Rate = Base Rate + Boost Rate + Hold Bonus Rate \r\n\tfunction getUserTotalRate(address userAddress) public view returns (uint256) {\r\n\t    User storage user = users[userAddress];\r\n\t\tuint256 timeMultiplier;\r\n\t\tif (isActive(userAddress)) {\r\n\t\t\ttimeMultiplier = min((now.sub(user.checkpoint)).div(TIME_STEP2).mul(2),348);\r\n\t\t} else {\r\n\t\t\ttimeMultiplier = 0;\r\n\t\t}\r\n\t    return getUserBaseRate(userAddress).add(getBoostRate()).add(timeMultiplier);\r\n\t}\r\n\t   \r\n\r\n// get user's total profits\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 userTotalRate = getUserTotalRate(userAddress);\r\n\r\n\t\tuint256 totalDividends;\r\n\t\tuint256 dividends;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\r\n\t\t\t\tif (user.deposits[i].start > user.checkpoint) {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userTotalRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(userTotalRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(2)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttotalDividends = totalDividends.add(dividends);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn totalDividends;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\t\r\n// get user's Referral Reward\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n// get user's Available to withdraw\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction isActive(address userAddress) public view returns (bool) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tif (user.deposits.length > 0) {\r\n\t\t\tif (user.deposits[user.deposits.length-1].withdrawn < user.deposits[user.deposits.length-1].amount.mul(2)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\treturn (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\r\n\t}\r\n\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n// get user's total ETH added\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].amount);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\t\r\n// get user's profit-making eth amount\r\n\tfunction getUserProfitMakingEth(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 ethamount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tif (user.deposits[i].withdrawn < user.deposits[i].amount.mul(2)) {\r\n\r\n\t\t\tethamount = ethamount.add(user.deposits[i].amount);\r\n\t    \t}\r\n\t\t}\r\n\t\t\r\n\t\treturn ethamount;\r\n\t}\r\n\r\n\r\n// get user Total Withdrawded (Profits + Referral)\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\treturn user.UserTotalWithdrawn;\r\n\t}\r\n\t\r\n// get user Total Withdrawded Profits\r\n\tfunction getUserTotalWithdrawnDividends(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].withdrawn);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\t\r\n// get user Total Earned\r\n    function getUserTotalProfits(address userAddress) public view returns (uint256) {\r\n         return getUserTotalWithdrawn(userAddress).add(getUserAvailable(userAddress));\r\n    }\r\n\t\r\n\t\r\n// get user earning status. \r\n    function getUserStatus (address userAddress) public view returns(bool) {\r\n        User storage user = users[userAddress];\r\n        uint256 A = getUserDividends(userAddress);\r\n        uint256 B = getUserTotalWithdrawnDividends(userAddress);\r\n        uint256 C = getUserTotalDeposits(userAddress).mul(2);\r\n        if (A + B < C && user.deposits[0].amount > 0) {\r\n            return true;\r\n     }\r\n    }\r\n    \r\n// get user pending EMAX. \r\n    function getUserPendingEMAX(address UserAddress) external view returns(uint256){\r\n        return ethMaxTokensToClaim[UserAddress];\r\n    }  \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"PoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethMaxTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMAX_TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_FEE_SUBSIDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PL_Address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PL_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReturnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"}],\"name\":\"getUserPendingEMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserProfitMakingEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawnDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ethmax","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aba3f55a66944b925c2302b52645182c2b5e3b76000000000000000000000000ef7d03805d120d94317c843f41162127d7d20959","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://370d711fd8b9b254e6e450c64d3fe36e4badbca4e9271529bef540bed2875657"}]}