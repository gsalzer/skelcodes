{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: contracts/helpers/Pausable.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\ncontract Pausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool public paused;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/xAAVE.sol\r\n\r\npragma solidity 0.6.2;\r\n\r\n\r\n\r\n\r\ninterface IAaveProtoGovernance {\r\n    function submitVoteByVoter(\r\n        uint256 _proposalId,\r\n        uint256 _vote,\r\n        IERC20 _asset\r\n    ) external;\r\n}\r\n\r\ninterface IKyberNetworkProxy {\r\n    function swapEtherToToken(ERC20 token, uint256 minConversionRate)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function swapTokenToToken(\r\n        ERC20 src,\r\n        uint256 srcAmount,\r\n        ERC20 dest,\r\n        uint256 minConversionRate\r\n    ) external returns (uint256);\r\n\r\n    function swapTokenToEther(\r\n        ERC20 token,\r\n        uint256 tokenQty,\r\n        uint256 minRate\r\n    ) external payable returns (uint256);\r\n}\r\n\r\ninterface IStakedAave {\r\n    function stake(address to, uint256 amount) external;\r\n\r\n    function redeem(address to, uint256 amount) external;\r\n\r\n    function cooldown() external;\r\n\r\n    function claimRewards(address to, uint256 amount) external;\r\n}\r\n\r\ncontract xAAVE is ERC20, Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private constant DEC_18 = 1e18;\r\n    uint256 private constant MAX_UINT = 2**256 - 1;\r\n    uint256 private constant AAVE_BUFFER_TARGET = 20; // 5% target\r\n    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 100;\r\n    uint256 public constant LIQUIDATION_TIME_PERIOD = 4 weeks;\r\n\r\n    uint256 public withdrawableAaveFees;\r\n    uint256 public adminActiveTimestamp;\r\n\r\n    address private manager;\r\n\r\n    IERC20 private aave;\r\n    IERC20 private votingAave;\r\n    IStakedAave private stakedAave;\r\n    IAaveProtoGovernance private governance;\r\n\r\n    IKyberNetworkProxy private kyberProxy;\r\n\r\n    bool public cooldownActivated;\r\n\r\n    string public mandate;\r\n\r\n    struct FeeDivisors {\r\n        uint256 mintFee;\r\n        uint256 burnFee;\r\n        uint256 claimFee;\r\n    }\r\n\r\n    FeeDivisors public feeDivisors;\r\n\r\n    function initialize(\r\n        IERC20 _aave,\r\n        IERC20 _votingAave,\r\n        IStakedAave _stakedAave,\r\n        IAaveProtoGovernance _governance,\r\n        IKyberNetworkProxy _kyberProxy,\r\n        uint256 _mintFeeDivisor,\r\n        uint256 _burnFeeDivisor,\r\n        uint256 _claimFeeDivisor,\r\n        string memory _symbol,\r\n        string memory _mandate\r\n    ) public initializer {\r\n        __Ownable_init();\r\n        __ERC20_init(\"xAAVE\", _symbol);\r\n\r\n        aave = _aave;\r\n        votingAave = _votingAave;\r\n        stakedAave = _stakedAave;\r\n        governance = _governance;\r\n        kyberProxy = _kyberProxy;\r\n        mandate = _mandate;\r\n\r\n        _setFeeDivisors(_mintFeeDivisor, _burnFeeDivisor, _claimFeeDivisor);\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                        Investor-Facing                                    */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @dev Mint xAAVE using ETH\r\n     * @param minRate: Kyber min rate ETH=>AAVE\r\n     */\r\n    function mint(uint256 minRate) public payable whenNotPaused {\r\n        require(msg.value > 0, \"Must send ETH\");\r\n\r\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\r\n\r\n        uint256 fee = _calculateFee(msg.value, feeDivisors.mintFee);\r\n\r\n        uint256 incrementalAave = kyberProxy.swapEtherToToken.value(\r\n            msg.value.sub(fee)\r\n        )(ERC20(address(aave)), minRate);\r\n        return _mintInternal(bufferBalance, stakedBalance, incrementalAave);\r\n    }\r\n\r\n    /*\r\n     * @dev Mint xAAVE using AAVE\r\n     * @notice Must run ERC20 approval first\r\n     * @param aaveAmount: AAVE to contribute\r\n     */\r\n    function mintWithToken(uint256 aaveAmount) public whenNotPaused {\r\n        require(aaveAmount > 0, \"Must send AAVE\");\r\n\r\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\r\n\r\n        aave.safeTransferFrom(msg.sender, address(this), aaveAmount);\r\n\r\n        uint256 fee = _calculateFee(aaveAmount, feeDivisors.mintFee);\r\n        _incrementWithdrawableAaveFees(fee);\r\n\r\n        uint256 incrementalAave = aaveAmount.sub(fee);\r\n        return _mintInternal(bufferBalance, stakedBalance, incrementalAave);\r\n    }\r\n\r\n    function _mintInternal(\r\n        uint256 _bufferBalance,\r\n        uint256 _stakedBalance,\r\n        uint256 _incrementalAave\r\n    ) internal {\r\n        uint256 totalSupply = totalSupply();\r\n        uint256 allocationToStake = _calculateAllocationToStake(\r\n            _bufferBalance,\r\n            _incrementalAave,\r\n            _stakedBalance,\r\n            totalSupply\r\n        );\r\n        _stake(allocationToStake);\r\n\r\n        uint256 aaveHoldings = _bufferBalance.add(_stakedBalance);\r\n        uint256 mintAmount = calculateMintAmount(\r\n            _incrementalAave,\r\n            aaveHoldings,\r\n            totalSupply\r\n        );\r\n        return super._mint(msg.sender, mintAmount);\r\n    }\r\n\r\n    /*\r\n     * @dev Burn xAAVE tokens\r\n     * @notice Will fail if redemption value exceeds available liquidity\r\n     * @param redeemAmount: xAAVE to redeem\r\n     * @param redeemForEth: if true, redeem xAAVE for ETH\r\n     * @param minRate: Kyber.getExpectedRate AAVE=>ETH if redeemForEth true (no-op if false)\r\n     */\r\n    function burn(\r\n        uint256 tokenAmount,\r\n        bool redeemForEth,\r\n        uint256 minRate\r\n    ) public {\r\n        require(tokenAmount > 0, \"Must send xAAVE\");\r\n\r\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\r\n        uint256 aaveHoldings = bufferBalance.add(stakedBalance);\r\n        uint256 proRataAave = aaveHoldings.mul(tokenAmount).div(totalSupply());\r\n\r\n        require(proRataAave <= bufferBalance, \"Insufficient exit liquidity\");\r\n        super._burn(msg.sender, tokenAmount);\r\n\r\n        if (redeemForEth) {\r\n            uint256 ethRedemptionValue = kyberProxy.swapTokenToEther(\r\n                ERC20(address(aave)),\r\n                proRataAave,\r\n                minRate\r\n            );\r\n            uint256 fee = _calculateFee(\r\n                ethRedemptionValue,\r\n                feeDivisors.burnFee\r\n            );\r\n            (bool success, ) = msg.sender.call.value(\r\n                ethRedemptionValue.sub(fee)\r\n            )(\"\");\r\n            require(success, \"Transfer failed\");\r\n        } else {\r\n            uint256 fee = _calculateFee(proRataAave, feeDivisors.burnFee);\r\n            _incrementWithdrawableAaveFees(fee);\r\n            aave.safeTransfer(msg.sender, proRataAave.sub(fee));\r\n        }\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                             NAV                                           */\r\n    /* ========================================================================================= */\r\n\r\n    function getFundHoldings() public view returns (uint256) {\r\n        return getStakedBalance().add(getBufferBalance());\r\n    }\r\n\r\n    function getStakedBalance() public view returns (uint256) {\r\n        return IERC20(address(stakedAave)).balanceOf(address(this));\r\n    }\r\n\r\n    function getBufferBalance() public view returns (uint256) {\r\n        return aave.balanceOf(address(this)).sub(withdrawableAaveFees);\r\n    }\r\n\r\n    function getFundBalances() public view returns (uint256, uint256) {\r\n        return (getStakedBalance(), getBufferBalance());\r\n    }\r\n\r\n    /*\r\n     * @dev Helper function for mint, mintWithToken\r\n     * @param incrementalAave: AAVE contributed\r\n     * @param aaveHoldingsBefore: xAAVE buffer reserve + staked balance\r\n     * @param totalSupply: xAAVE.totalSupply()\r\n     */\r\n    function calculateMintAmount(\r\n        uint256 incrementalAave,\r\n        uint256 aaveHoldingsBefore,\r\n        uint256 totalSupply\r\n    ) public view returns (uint256 mintAmount) {\r\n        if (totalSupply == 0)\r\n            return incrementalAave.mul(INITIAL_SUPPLY_MULTIPLIER);\r\n\r\n        mintAmount = (incrementalAave).mul(totalSupply).div(aaveHoldingsBefore);\r\n    }\r\n\r\n    /*\r\n     * @dev Helper function for mint, mintWithToken\r\n     * @param _bufferBalanceBefore: xAAVE AAVE buffer balance pre-mint\r\n     * @param _incrementalAave: AAVE contributed\r\n     * @param _stakedBalance: xAAVE stakedAave balance pre-mint\r\n     * @param _totalSupply: xAAVE.totalSupply()\r\n     */\r\n    function _calculateAllocationToStake(\r\n        uint256 _bufferBalanceBefore,\r\n        uint256 _incrementalAave,\r\n        uint256 _stakedBalance,\r\n        uint256 _totalSupply\r\n    ) internal view returns (uint256) {\r\n        if (_totalSupply == 0)\r\n            return\r\n                _incrementalAave.sub(_incrementalAave.div(AAVE_BUFFER_TARGET));\r\n\r\n        uint256 bufferBalanceAfter = _bufferBalanceBefore.add(_incrementalAave);\r\n        uint256 aaveHoldings = bufferBalanceAfter.add(_stakedBalance);\r\n\r\n        uint256 targetBufferBalance = aaveHoldings.div(AAVE_BUFFER_TARGET);\r\n\r\n        // allocate full incremental aave to buffer balance\r\n        if (bufferBalanceAfter < targetBufferBalance) return 0;\r\n\r\n        return bufferBalanceAfter.sub(targetBufferBalance);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                   Fund Management - Admin                                 */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice xAAVE only stakes when cooldown is not active\r\n     * @param _amount: allocation to staked balance\r\n     */\r\n    function _stake(uint256 _amount) private {\r\n        if (_amount > 0 && !cooldownActivated) {\r\n            stakedAave.stake(address(this), _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Admin-callable function in case of persistent depletion of buffer reserve\r\n     * or emergency shutdown\r\n     * @notice Incremental AAVE will only be allocated to buffer reserve\r\n     */\r\n    function cooldown() public onlyOwnerOrManager {\r\n        _updateAdminActiveTimestamp();\r\n        _cooldown();\r\n    }\r\n\r\n    /*\r\n     * @notice Admin-callable function disabling cooldown and returning fund to\r\n     * normal course of management\r\n     */\r\n    function disableCooldown() public onlyOwnerOrManager {\r\n        _updateAdminActiveTimestamp();\r\n        cooldownActivated = false;\r\n    }\r\n\r\n    /*\r\n     * @notice Admin-callable function available once cooldown has been activated\r\n     * and requisite time elapsed\r\n     * @notice Called when buffer reserve is persistently insufficient to satisfy\r\n     * redemption requirements\r\n     * @param amount: AAVE to unstake\r\n     */\r\n    function redeem(uint256 amount) public onlyOwnerOrManager {\r\n        _updateAdminActiveTimestamp();\r\n        _redeem(amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Admin-callable function claiming staking rewards\r\n     * @notice Called regularly on behalf of pool in normal course of management\r\n     */\r\n    function claim() public onlyOwnerOrManager {\r\n        _updateAdminActiveTimestamp();\r\n        _claim();\r\n    }\r\n\r\n    /*\r\n     * @notice Records admin activity\r\n     * @notice Because Aave staking \"locks\" capital in contract and only admin has power\r\n     * to cooldown and redeem in normal course, this function certifies that admin\r\n     * is still active and capital is accessible\r\n     * @notice If not certified for a period exceeding LIQUIDATION_TIME_PERIOD,\r\n     * emergencyCooldown and emergencyRedeem become available to non-admin caller\r\n     */\r\n    function _updateAdminActiveTimestamp() private {\r\n        adminActiveTimestamp = block.timestamp;\r\n    }\r\n\r\n    /*\r\n     * @notice Function for participating in Aave Governance\r\n     * @notice Called regularly on behalf of pool in normal course of management\r\n     * @param _proposalId:\r\n     * @param _vote:\r\n     */\r\n    function vote(uint256 _proposalId, uint256 _vote)\r\n        public\r\n        onlyOwnerOrManager\r\n    {\r\n        governance.submitVoteByVoter(_proposalId, _vote, votingAave);\r\n    }\r\n\r\n    /*\r\n     * @notice Callable in case of fee revenue or extra yield opportunities in non-AAVE ERC20s\r\n     * @notice Reinvested in AAVE\r\n     * @param tokens: Addresses of non-AAVE tokens with balance in xAAVE\r\n     * @param minReturns: Kyber.getExpectedRate for non-AAVE tokens\r\n     */\r\n    function convertTokensToTarget(\r\n        address[] calldata tokens,\r\n        uint256[] calldata minReturns\r\n    ) external onlyOwnerOrManager {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 tokenBal = IERC20(tokens[i]).balanceOf(address(this));\r\n            uint256 bufferBalancerBefore = getBufferBalance();\r\n\r\n            kyberProxy.swapTokenToToken(\r\n                ERC20(tokens[i]),\r\n                tokenBal,\r\n                ERC20(address(aave)),\r\n                minReturns[i]\r\n            );\r\n            uint256 bufferBalanceAfter = getBufferBalance();\r\n\r\n            uint256 fee = _calculateFee(\r\n                bufferBalanceAfter.sub(bufferBalancerBefore),\r\n                feeDivisors.claimFee\r\n            );\r\n            _incrementWithdrawableAaveFees(fee);\r\n        }\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                   Fund Management - Public                                */\r\n    /* ========================================================================================= */\r\n\r\n    /*\r\n     * @notice If admin doesn't certify within LIQUIDATION_TIME_PERIOD,\r\n     * admin functions unlock to public\r\n     */\r\n    modifier liquidationTimeElapsed {\r\n        require(\r\n            block.timestamp > adminActiveTimestamp.add(LIQUIDATION_TIME_PERIOD),\r\n            \"Liquidation time hasn't elapsed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice First step in xAAVE unwind in event of admin failure/incapacitation\r\n     */\r\n    function emergencyCooldown() public liquidationTimeElapsed {\r\n        _cooldown();\r\n    }\r\n\r\n    /*\r\n     * @notice Second step in xAAVE unwind in event of admin failure/incapacitation\r\n     * @notice Called after cooldown period, during unwind period\r\n     */\r\n    function emergencyRedeem(uint256 amount) public liquidationTimeElapsed {\r\n        _redeem(amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Public callable function for claiming staking rewards\r\n     */\r\n    function claimExternal() public {\r\n        _claim();\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                   Fund Management - Private                               */\r\n    /* ========================================================================================= */\r\n\r\n    function _cooldown() private {\r\n        cooldownActivated = true;\r\n        stakedAave.cooldown();\r\n    }\r\n\r\n    function _redeem(uint256 _amount) private {\r\n        stakedAave.redeem(address(this), _amount);\r\n    }\r\n\r\n    function _claim() private {\r\n        uint256 bufferBalanceBefore = getBufferBalance();\r\n\r\n        stakedAave.claimRewards(address(this), MAX_UINT);\r\n\r\n        uint256 bufferBalanceAfter = getBufferBalance();\r\n        uint256 claimed = bufferBalanceAfter.sub(bufferBalanceBefore);\r\n\r\n        uint256 fee = _calculateFee(claimed, feeDivisors.claimFee);\r\n        _incrementWithdrawableAaveFees(fee);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                         Fee Logic                                         */\r\n    /* ========================================================================================= */\r\n\r\n    function _calculateFee(uint256 _value, uint256 _feeDivisor)\r\n        internal\r\n        pure\r\n        returns (uint256 fee)\r\n    {\r\n        if (_feeDivisor > 0) {\r\n            fee = _value.div(_feeDivisor);\r\n        }\r\n    }\r\n\r\n    function _incrementWithdrawableAaveFees(uint256 _feeAmount) private {\r\n        withdrawableAaveFees = withdrawableAaveFees.add(_feeAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Inverse of fee i.e., a fee divisor of 100 == 1%\r\n     * @notice Three fee types\r\n     * @dev Mint fee 0 or <= 2%\r\n     * @dev Burn fee 0 or <= 1%\r\n     * @dev Claim fee 0 <= 4%\r\n     */\r\n    function setFeeDivisors(\r\n        uint256 mintFeeDivisor,\r\n        uint256 burnFeeDivisor,\r\n        uint256 claimFeeDivisor\r\n    ) public onlyOwner {\r\n        _setFeeDivisors(mintFeeDivisor, burnFeeDivisor, claimFeeDivisor);\r\n    }\r\n\r\n    function _setFeeDivisors(\r\n        uint256 _mintFeeDivisor,\r\n        uint256 _burnFeeDivisor,\r\n        uint256 _claimFeeDivisor\r\n    ) private {\r\n        require(_mintFeeDivisor == 0 || _mintFeeDivisor >= 50, \"Invalid fee\");\r\n        require(_burnFeeDivisor == 0 || _burnFeeDivisor >= 100, \"Invalid fee\");\r\n        require(_claimFeeDivisor >= 25, \"Invalid fee\");\r\n        feeDivisors.mintFee = _mintFeeDivisor;\r\n        feeDivisors.burnFee = _burnFeeDivisor;\r\n        feeDivisors.claimFee = _claimFeeDivisor;\r\n    }\r\n\r\n    /*\r\n     * @notice Public callable function for claiming staking rewards\r\n     */\r\n    function withdrawFees() public onlyOwner {\r\n        (bool success, ) = msg.sender.call.value(address(this).balance)(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        uint256 aaveFees = withdrawableAaveFees;\r\n        withdrawableAaveFees = 0;\r\n        aave.safeTransfer(msg.sender, aaveFees);\r\n    }\r\n\r\n    /* ========================================================================================= */\r\n    /*                                           Utils                                           */\r\n    /* ========================================================================================= */\r\n\r\n    function pauseContract() public onlyOwnerOrManager returns (bool) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    function unpauseContract() public onlyOwnerOrManager returns (bool) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    function approveStakingContract() public onlyOwnerOrManager {\r\n        aave.safeApprove(address(stakedAave), MAX_UINT);\r\n    }\r\n\r\n    function approveKyberContract(address _token) public onlyOwnerOrManager {\r\n        IERC20(_token).safeApprove(address(kyberProxy), MAX_UINT);\r\n    }\r\n\r\n    /*\r\n     * @notice Callable by admin to ensure LIQUIDATION_TIME_PERIOD won't elapse\r\n     */\r\n    function certifyAdmin() public onlyOwnerOrManager {\r\n        _updateAdminActiveTimestamp();\r\n    }\r\n\r\n    /*\r\n     * @notice manager == alternative admin caller to owner\r\n     */\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    /*\r\n     * @notice Emergency function in case of errant transfer of\r\n     * xAAVE token directly to contract\r\n     */\r\n    function withdrawNativeToken() public onlyOwnerOrManager {\r\n        uint256 tokenBal = balanceOf(address(this));\r\n        if (tokenBal > 0) {\r\n            IERC20(address(this)).safeTransfer(msg.sender, tokenBal);\r\n        }\r\n    }\r\n\r\n    modifier onlyOwnerOrManager {\r\n        require(\r\n            msg.sender == owner() || msg.sender == manager,\r\n            \"Non-admin caller\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender != tx.origin, \"Errant ETH deposit\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDATION_TIME_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminActiveTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approveKyberContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemForEth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementalAave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveHoldingsBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certifyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minReturns\",\"type\":\"uint256[]\"}],\"name\":\"convertTokensToTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_aave\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_votingAave\",\"type\":\"address\"},{\"internalType\":\"contract IStakedAave\",\"name\":\"_stakedAave\",\"type\":\"address\"},{\"internalType\":\"contract IAaveProtoGovernance\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mandate\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mandate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aaveAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableAaveFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"xAAVE","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07d57882789ffea0b08fa11e2ff07eba7815bd05085c0b1702b426c47c8933a9"}]}