{"status":"1","message":"OK","result":[{"SourceCode":"/// SAFEEngine.sol -- SAFE database\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\ncontract SAFEEngine {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"SAFEEngine/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // Who can transfer collateral & debt in/out of a SAFE\r\n    mapping(address => mapping (address => uint)) public safeRights;\r\n    /**\r\n     * @notice Allow an address to modify your SAFE\r\n     * @param account Account to give SAFE permissions to\r\n     */\r\n    function approveSAFEModification(address account) external {\r\n        safeRights[msg.sender][account] = 1;\r\n        emit ApproveSAFEModification(msg.sender, account);\r\n    }\r\n    /**\r\n     * @notice Deny an address the rights to modify your SAFE\r\n     * @param account Account to give SAFE permissions to\r\n     */\r\n    function denySAFEModification(address account) external {\r\n        safeRights[msg.sender][account] = 0;\r\n        emit DenySAFEModification(msg.sender, account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender has the right to modify a SAFE\r\n    **/\r\n    function canModifySAFE(address safe, address account) public view returns (bool) {\r\n        return either(safe == account, safeRights[safe][account] == 1);\r\n    }\r\n\r\n    // --- Data ---\r\n    struct CollateralType {\r\n        // Total debt issued for this specific collateral type\r\n        uint256 debtAmount;        // [wad]\r\n        // Accumulator for interest accrued on this collateral type\r\n        uint256 accumulatedRate;   // [ray]\r\n        // Floor price at which a SAFE is allowed to generate debt\r\n        uint256 safetyPrice;       // [ray]\r\n        // Maximum amount of debt that can be generated with this collateral type\r\n        uint256 debtCeiling;       // [rad]\r\n        // Minimum amount of debt that must be generated by a SAFE using this collateral\r\n        uint256 debtFloor;         // [rad]\r\n        // Price at which a SAFE gets liquidated\r\n        uint256 liquidationPrice;  // [ray]\r\n    }\r\n    struct SAFE {\r\n        // Total amount of collateral locked in a SAFE\r\n        uint256 lockedCollateral;  // [wad]\r\n        // Total amount of debt generated by a SAFE\r\n        uint256 generatedDebt;     // [wad]\r\n    }\r\n\r\n    // Data about each collateral type\r\n    mapping (bytes32 => CollateralType)             public collateralTypes;\r\n    // Data about each SAFE\r\n    mapping (bytes32 => mapping (address => SAFE )) public safes;\r\n    // Balance of each collateral type\r\n    mapping (bytes32 => mapping (address => uint))  public tokenCollateral;  // [wad]\r\n    // Internal balance of system coins\r\n    mapping (address => uint)                       public coinBalance;      // [rad]\r\n    // Amount of debt held by an account. Coins & debt are like matter and antimatter. They nullify each other\r\n    mapping (address => uint)                       public debtBalance;      // [rad]\r\n\r\n    // Total amount of debt that a single safe can generate\r\n    uint256 public safeDebtCeiling;      // [wad]\r\n    // Total amount of debt (coins) currently issued\r\n    uint256  public globalDebt;          // [rad]\r\n    // 'Bad' debt that's not covered by collateral\r\n    uint256  public globalUnbackedDebt;  // [rad]\r\n    // Maximum amount of debt that can be issued\r\n    uint256  public globalDebtCeiling;   // [rad]\r\n    // Access flag, indicates whether this contract is still active\r\n    uint256  public contractEnabled;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ApproveSAFEModification(address sender, address account);\r\n    event DenySAFEModification(address sender, address account);\r\n    event InitializeCollateralType(bytes32 collateralType);\r\n    event ModifyParameters(bytes32 parameter, uint data);\r\n    event ModifyParameters(bytes32 collateralType, bytes32 parameter, uint data);\r\n    event DisableContract();\r\n    event ModifyCollateralBalance(bytes32 collateralType, address account, int256 wad);\r\n    event TransferCollateral(bytes32 collateralType, address src, address dst, uint256 wad);\r\n    event TransferInternalCoins(address src, address dst, uint256 rad);\r\n    event ModifySAFECollateralization(\r\n        bytes32 collateralType,\r\n        address safe,\r\n        address collateralSource,\r\n        address debtDestination,\r\n        int deltaCollateral,\r\n        int deltaDebt,\r\n        uint lockedCollateral,\r\n        uint generatedDebt,\r\n        uint globalDebt\r\n    );\r\n    event TransferSAFECollateralAndDebt(\r\n        bytes32 collateralType,\r\n        address src,\r\n        address dst,\r\n        int deltaCollateral,\r\n        int deltaDebt,\r\n        uint srcLockedCollateral,\r\n        uint srcGeneratedDebt,\r\n        uint dstLockedCollateral,\r\n        uint dstGeneratedDebt\r\n    );\r\n    event ConfiscateSAFECollateralAndDebt(\r\n        bytes32 collateralType,\r\n        address safe,\r\n        address collateralCounterparty,\r\n        address debtCounterparty,\r\n        int deltaCollateral,\r\n        int deltaDebt,\r\n        uint globalUnbackedDebt\r\n    );\r\n    event SettleDebt(address account, uint rad, uint debtBalance, uint coinBalance, uint globalUnbackedDebt, uint globalDebt);\r\n    event CreateUnbackedDebt(\r\n        address debtDestination,\r\n        address coinDestination,\r\n        uint rad,\r\n        uint debtDstBalance,\r\n        uint coinDstBalance,\r\n        uint globalUnbackedDebt,\r\n        uint globalDebt\r\n    );\r\n    event UpdateAccumulatedRate(\r\n        bytes32 collateralType,\r\n        address surplusDst,\r\n        int rateMultiplier,\r\n        uint dstCoinBalance,\r\n        uint globalDebt\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor() public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        safeDebtCeiling = uint(-1);\r\n        contractEnabled = 1;\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"safeDebtCeiling\", uint(-1));\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint x, int y) internal pure returns (uint z) {\r\n        z = x + uint(y);\r\n        require(y >= 0 || z <= x);\r\n        require(y <= 0 || z >= x);\r\n    }\r\n    function addition(int x, int y) internal pure returns (int z) {\r\n        z = x + y;\r\n        require(y >= 0 || z <= x);\r\n        require(y <= 0 || z >= x);\r\n    }\r\n    function subtract(uint x, int y) internal pure returns (uint z) {\r\n        z = x - uint(y);\r\n        require(y <= 0 || z <= x);\r\n        require(y >= 0 || z >= x);\r\n    }\r\n    function subtract(int x, int y) internal pure returns (int z) {\r\n        z = x - y;\r\n        require(y <= 0 || z <= x);\r\n        require(y >= 0 || z >= x);\r\n    }\r\n    function multiply(uint x, int y) internal pure returns (int z) {\r\n        z = int(x) * y;\r\n        require(int(x) >= 0);\r\n        require(y == 0 || z / y == int(x));\r\n    }\r\n    function addition(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n\r\n    /**\r\n     * @notice Creates a brand new collateral type\r\n     * @param collateralType Collateral type name (e.g ETH-A, TBTC-B)\r\n     */\r\n    function initializeCollateralType(bytes32 collateralType) external isAuthorized {\r\n        require(collateralTypes[collateralType].accumulatedRate == 0, \"SAFEEngine/collateral-type-already-exists\");\r\n        collateralTypes[collateralType].accumulatedRate = 10 ** 27;\r\n        emit InitializeCollateralType(collateralType);\r\n    }\r\n    /**\r\n     * @notice Modify general uint params\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New value for the parameter\r\n     */\r\n    function modifyParameters(bytes32 parameter, uint data) external isAuthorized {\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n        if (parameter == \"globalDebtCeiling\") globalDebtCeiling = data;\r\n        else if (parameter == \"safeDebtCeiling\") safeDebtCeiling = data;\r\n        else revert(\"SAFEEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /**\r\n     * @notice Modify collateral specific params\r\n     * @param collateralType Collateral type we modify params for\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New value for the parameter\r\n     */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint data\r\n    ) external isAuthorized {\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n        if (parameter == \"safetyPrice\") collateralTypes[collateralType].safetyPrice = data;\r\n        else if (parameter == \"liquidationPrice\") collateralTypes[collateralType].liquidationPrice = data;\r\n        else if (parameter == \"debtCeiling\") collateralTypes[collateralType].debtCeiling = data;\r\n        else if (parameter == \"debtFloor\") collateralTypes[collateralType].debtFloor = data;\r\n        else revert(\"SAFEEngine/modify-unrecognized-param\");\r\n        emit ModifyParameters(collateralType, parameter, data);\r\n    }\r\n    /**\r\n     * @notice Disable this contract (normally called by GlobalSettlement)\r\n     */\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n        emit DisableContract();\r\n    }\r\n\r\n    // --- Fungibility ---\r\n    /**\r\n     * @notice Join/exit collateral into and and out of the system\r\n     * @param collateralType Collateral type we join/exit\r\n     * @param account Account that gets credited/debited\r\n     * @param wad Amount of collateral\r\n     */\r\n    function modifyCollateralBalance(\r\n        bytes32 collateralType,\r\n        address account,\r\n        int256 wad\r\n    ) external isAuthorized {\r\n        tokenCollateral[collateralType][account] = addition(tokenCollateral[collateralType][account], wad);\r\n        emit ModifyCollateralBalance(collateralType, account, wad);\r\n    }\r\n    /**\r\n     * @notice Transfer collateral between accounts\r\n     * @param collateralType Collateral type transferred\r\n     * @param src Collateral source\r\n     * @param dst Collateral destination\r\n     * @param wad Amount of collateral transferred\r\n     */\r\n    function transferCollateral(\r\n        bytes32 collateralType,\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) external {\r\n        require(canModifySAFE(src, msg.sender), \"SAFEEngine/not-allowed\");\r\n        tokenCollateral[collateralType][src] = subtract(tokenCollateral[collateralType][src], wad);\r\n        tokenCollateral[collateralType][dst] = addition(tokenCollateral[collateralType][dst], wad);\r\n        emit TransferCollateral(collateralType, src, dst, wad);\r\n    }\r\n    /**\r\n     * @notice Transfer internal coins (does not affect external balances from Coin.sol)\r\n     * @param src Coins source\r\n     * @param dst Coins destination\r\n     * @param rad Amount of coins transferred\r\n     */\r\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\r\n        require(canModifySAFE(src, msg.sender), \"SAFEEngine/not-allowed\");\r\n        coinBalance[src] = subtract(coinBalance[src], rad);\r\n        coinBalance[dst] = addition(coinBalance[dst], rad);\r\n        emit TransferInternalCoins(src, dst, rad);\r\n    }\r\n\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- SAFE Manipulation ---\r\n    /**\r\n     * @notice Add/remove collateral or put back/generate more debt in a SAFE\r\n     * @param collateralType Type of collateral to withdraw/deposit in and from the SAFE\r\n     * @param safe Target SAFE\r\n     * @param collateralSource Account we take collateral from/put collateral into\r\n     * @param debtDestination Account from which we credit/debit coins and debt\r\n     * @param deltaCollateral Amount of collateral added/extract from the SAFE (wad)\r\n     * @param deltaDebt Amount of debt to generate/repay (wad)\r\n     */\r\n    function modifySAFECollateralization(\r\n        bytes32 collateralType,\r\n        address safe,\r\n        address collateralSource,\r\n        address debtDestination,\r\n        int deltaCollateral,\r\n        int deltaDebt\r\n    ) external {\r\n        // system is live\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n\r\n        SAFE memory safeData = safes[collateralType][safe];\r\n        CollateralType memory collateralTypeData = collateralTypes[collateralType];\r\n        // collateral type has been initialised\r\n        require(collateralTypeData.accumulatedRate != 0, \"SAFEEngine/collateral-type-not-initialized\");\r\n\r\n        safeData.lockedCollateral      = addition(safeData.lockedCollateral, deltaCollateral);\r\n        safeData.generatedDebt         = addition(safeData.generatedDebt, deltaDebt);\r\n        collateralTypeData.debtAmount  = addition(collateralTypeData.debtAmount, deltaDebt);\r\n\r\n        int deltaAdjustedDebt = multiply(collateralTypeData.accumulatedRate, deltaDebt);\r\n        uint totalDebtIssued  = multiply(collateralTypeData.accumulatedRate, safeData.generatedDebt);\r\n        globalDebt            = addition(globalDebt, deltaAdjustedDebt);\r\n\r\n        // either debt has decreased, or debt ceilings are not exceeded\r\n        require(\r\n          either(\r\n            deltaDebt <= 0,\r\n            both(multiply(collateralTypeData.debtAmount, collateralTypeData.accumulatedRate) <= collateralTypeData.debtCeiling,\r\n              globalDebt <= globalDebtCeiling)\r\n            ),\r\n          \"SAFEEngine/ceiling-exceeded\"\r\n        );\r\n        // safe is either less risky than before, or it is safe\r\n        require(\r\n          either(\r\n            both(deltaDebt <= 0, deltaCollateral >= 0),\r\n            totalDebtIssued <= multiply(safeData.lockedCollateral, collateralTypeData.safetyPrice)\r\n          ),\r\n          \"SAFEEngine/not-safe\"\r\n        );\r\n\r\n        // safe is either more safe, or the owner consents\r\n        require(either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(safe, msg.sender)), \"SAFEEngine/not-allowed-to-modify-safe\");\r\n        // collateral src consents\r\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \"SAFEEngine/not-allowed-collateral-src\");\r\n        // debt dst consents\r\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \"SAFEEngine/not-allowed-debt-dst\");\r\n\r\n        // safe has no debt, or a non-dusty amount\r\n        require(either(safeData.generatedDebt == 0, totalDebtIssued >= collateralTypeData.debtFloor), \"SAFEEngine/dust\");\r\n\r\n        // safe didn't go above the safe debt limit\r\n        if (deltaDebt > 0) {\r\n          require(safeData.generatedDebt <= safeDebtCeiling, \"SAFEEngine/above-debt-limit\");\r\n        }\r\n\r\n        tokenCollateral[collateralType][collateralSource] =\r\n          subtract(tokenCollateral[collateralType][collateralSource], deltaCollateral);\r\n\r\n        coinBalance[debtDestination] = addition(coinBalance[debtDestination], deltaAdjustedDebt);\r\n\r\n        safes[collateralType][safe] = safeData;\r\n        collateralTypes[collateralType] = collateralTypeData;\r\n\r\n        emit ModifySAFECollateralization(\r\n            collateralType,\r\n            safe,\r\n            collateralSource,\r\n            debtDestination,\r\n            deltaCollateral,\r\n            deltaDebt,\r\n            safeData.lockedCollateral,\r\n            safeData.generatedDebt,\r\n            globalDebt\r\n        );\r\n    }\r\n\r\n    // --- SAFE Fungibility ---\r\n    /**\r\n     * @notice Transfer collateral and/or debt between SAFEs\r\n     * @param collateralType Collateral type transferred between SAFEs\r\n     * @param src Source SAFE\r\n     * @param dst Destination SAFE\r\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst (wad)\r\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst (wad)\r\n     */\r\n    function transferSAFECollateralAndDebt(\r\n        bytes32 collateralType,\r\n        address src,\r\n        address dst,\r\n        int deltaCollateral,\r\n        int deltaDebt\r\n    ) external {\r\n        SAFE storage srcSAFE = safes[collateralType][src];\r\n        SAFE storage dstSAFE = safes[collateralType][dst];\r\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\r\n\r\n        srcSAFE.lockedCollateral = subtract(srcSAFE.lockedCollateral, deltaCollateral);\r\n        srcSAFE.generatedDebt    = subtract(srcSAFE.generatedDebt, deltaDebt);\r\n        dstSAFE.lockedCollateral = addition(dstSAFE.lockedCollateral, deltaCollateral);\r\n        dstSAFE.generatedDebt    = addition(dstSAFE.generatedDebt, deltaDebt);\r\n\r\n        uint srcTotalDebtIssued = multiply(srcSAFE.generatedDebt, collateralType_.accumulatedRate);\r\n        uint dstTotalDebtIssued = multiply(dstSAFE.generatedDebt, collateralType_.accumulatedRate);\r\n\r\n        // both sides consent\r\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \"SAFEEngine/not-allowed\");\r\n\r\n        // both sides safe\r\n        require(srcTotalDebtIssued <= multiply(srcSAFE.lockedCollateral, collateralType_.safetyPrice), \"SAFEEngine/not-safe-src\");\r\n        require(dstTotalDebtIssued <= multiply(dstSAFE.lockedCollateral, collateralType_.safetyPrice), \"SAFEEngine/not-safe-dst\");\r\n\r\n        // both sides non-dusty\r\n        require(either(srcTotalDebtIssued >= collateralType_.debtFloor, srcSAFE.generatedDebt == 0), \"SAFEEngine/dust-src\");\r\n        require(either(dstTotalDebtIssued >= collateralType_.debtFloor, dstSAFE.generatedDebt == 0), \"SAFEEngine/dust-dst\");\r\n\r\n        emit TransferSAFECollateralAndDebt(\r\n            collateralType,\r\n            src,\r\n            dst,\r\n            deltaCollateral,\r\n            deltaDebt,\r\n            srcSAFE.lockedCollateral,\r\n            srcSAFE.generatedDebt,\r\n            dstSAFE.lockedCollateral,\r\n            dstSAFE.generatedDebt\r\n        );\r\n    }\r\n\r\n    // --- SAFE Confiscation ---\r\n    /**\r\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\r\n       debt from a SAFE and give them to someone else\r\n     * @param collateralType Collateral type the SAFE has locked inside\r\n     * @param safe Target SAFE\r\n     * @param collateralCounterparty Who we take/give collateral to\r\n     * @param debtCounterparty Who we take/give debt to\r\n     * @param deltaCollateral Amount of collateral taken/added into the SAFE (wad)\r\n     * @param deltaDebt Amount of collateral taken/added into the SAFE (wad)\r\n     */\r\n    function confiscateSAFECollateralAndDebt(\r\n        bytes32 collateralType,\r\n        address safe,\r\n        address collateralCounterparty,\r\n        address debtCounterparty,\r\n        int deltaCollateral,\r\n        int deltaDebt\r\n    ) external isAuthorized {\r\n        SAFE storage safe_ = safes[collateralType][safe];\r\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\r\n\r\n        safe_.lockedCollateral = addition(safe_.lockedCollateral, deltaCollateral);\r\n        safe_.generatedDebt = addition(safe_.generatedDebt, deltaDebt);\r\n        collateralType_.debtAmount = addition(collateralType_.debtAmount, deltaDebt);\r\n\r\n        int deltaTotalIssuedDebt = multiply(collateralType_.accumulatedRate, deltaDebt);\r\n\r\n        tokenCollateral[collateralType][collateralCounterparty] = subtract(\r\n          tokenCollateral[collateralType][collateralCounterparty],\r\n          deltaCollateral\r\n        );\r\n        debtBalance[debtCounterparty] = subtract(\r\n          debtBalance[debtCounterparty],\r\n          deltaTotalIssuedDebt\r\n        );\r\n        globalUnbackedDebt = subtract(\r\n          globalUnbackedDebt,\r\n          deltaTotalIssuedDebt\r\n        );\r\n\r\n        emit ConfiscateSAFECollateralAndDebt(\r\n            collateralType,\r\n            safe,\r\n            collateralCounterparty,\r\n            debtCounterparty,\r\n            deltaCollateral,\r\n            deltaDebt,\r\n            globalUnbackedDebt\r\n        );\r\n    }\r\n\r\n    // --- Settlement ---\r\n    /**\r\n     * @notice Nullify an amount of coins with an equal amount of debt\r\n     * @param rad Amount of debt & coins to destroy\r\n     */\r\n    function settleDebt(uint rad) external {\r\n        address account       = msg.sender;\r\n        debtBalance[account]  = subtract(debtBalance[account], rad);\r\n        coinBalance[account]  = subtract(coinBalance[account], rad);\r\n        globalUnbackedDebt    = subtract(globalUnbackedDebt, rad);\r\n        globalDebt            = subtract(globalDebt, rad);\r\n        emit SettleDebt(account, rad, debtBalance[account], coinBalance[account], globalUnbackedDebt, globalDebt);\r\n    }\r\n    /**\r\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\r\n     * @param debtDestination Usually AccountingEngine that can settle debt with surplus\r\n     * @param coinDestination Usually CoinSavingsAccount that passes the new coins to depositors\r\n     * @param rad Amount of debt to create\r\n     */\r\n    function createUnbackedDebt(\r\n        address debtDestination,\r\n        address coinDestination,\r\n        uint rad\r\n    ) external isAuthorized {\r\n        debtBalance[debtDestination]  = addition(debtBalance[debtDestination], rad);\r\n        coinBalance[coinDestination]  = addition(coinBalance[coinDestination], rad);\r\n        globalUnbackedDebt            = addition(globalUnbackedDebt, rad);\r\n        globalDebt                    = addition(globalDebt, rad);\r\n        emit CreateUnbackedDebt(\r\n            debtDestination,\r\n            coinDestination,\r\n            rad,\r\n            debtBalance[debtDestination],\r\n            coinBalance[coinDestination],\r\n            globalUnbackedDebt,\r\n            globalDebt\r\n        );\r\n    }\r\n\r\n    // --- Rates ---\r\n    /**\r\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\r\n     * @param collateralType Collateral type we accrue interest for\r\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\r\n       to debt created by SAFEs with 'collateralType'\r\n     * @param rateMultiplier Multiplier applied to the debtAmount in order to calculate the surplus [ray]\r\n     */\r\n    function updateAccumulatedRate(\r\n        bytes32 collateralType,\r\n        address surplusDst,\r\n        int rateMultiplier\r\n    ) external isAuthorized {\r\n        require(contractEnabled == 1, \"SAFEEngine/contract-not-enabled\");\r\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\r\n        collateralType_.accumulatedRate        = addition(collateralType_.accumulatedRate, rateMultiplier);\r\n        int deltaSurplus                       = multiply(collateralType_.debtAmount, rateMultiplier);\r\n        coinBalance[surplusDst]                = addition(coinBalance[surplusDst], deltaSurplus);\r\n        globalDebt                             = addition(globalDebt, deltaSurplus);\r\n        emit UpdateAccumulatedRate(\r\n            collateralType,\r\n            surplusDst,\r\n            rateMultiplier,\r\n            coinBalance[surplusDst],\r\n            globalDebt\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproveSAFEModification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"}],\"name\":\"ConfiscateSAFECollateralAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtDstBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinDstBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"CreateUnbackedDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DenySAFEModification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"InitializeCollateralType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"ModifyCollateralBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"ModifySAFECollateralization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"SettleDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"TransferCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"TransferInternalCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcLockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcGeneratedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstLockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstGeneratedDebt\",\"type\":\"uint256\"}],\"name\":\"TransferSAFECollateralAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstCoinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"UpdateAccumulatedRate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveSAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canModifySAFE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"confiscateSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"createUnbackedDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"denySAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnbackedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"modifyCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"transferSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"}],\"name\":\"updateAccumulatedRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SAFEEngine","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://19acaf0b758e88d7398641f8e6524b72e4cc129cbad4170247a0f607b8938f96"}]}