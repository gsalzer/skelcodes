{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.11 >=0.5.12;\r\n\r\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\r\n\r\n/* pragma solidity >=0.5.12; */\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/CatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function box() external view returns (uint256);\r\n    function litter() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function claw(uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n// Helper function for returning address or abstract of Chainlog\r\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\r\ncontract ChainlogHelper {\r\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-auto-line/blob/master/src/DssAutoLine.sol\r\ninterface DssAutoLineAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FaucetAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/token-faucet/blob/master/src/RestrictedTokenFaucet.sol\r\ninterface FaucetAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function list(address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function amt(address) external view returns (uint256);\r\n    function done(address, address) external view returns (bool);\r\n    function gulp(address) external;\r\n    function gulp(address, address[] calldata) external;\r\n    function shut(address) external;\r\n    function undo(address, address) external;\r\n    function setAmt(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FlipAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FlipperMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ninterface FlipperMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function cat() external returns (address);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/ilk-registry\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint256, address, address, address, address, uint256, string memory, string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function update(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function flip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/JugAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/LPOsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/univ2-lp-oracle\r\ninterface LPOsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function dec0() external view returns (uint8);\r\n    function dec1() external view returns (uint8);\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n    function wat() external view returns (bytes32);\r\n    function hop() external view returns (uint32);\r\n    function src() external view returns (address);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function change(address) external;\r\n    function step(uint256) external;\r\n    function stop() external;\r\n    function start() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function link(uint256, address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/MedianAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/median\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm-mom\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/SpotAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/ChainlogAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/VatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/SpotAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FlipAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FlipperMomAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/JugAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/CatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FaucetAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/GemJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/LPOsmAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmMomAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/MedianAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\"; */\r\n\r\ninterface PsmAbstract {\r\n    function wards(address) external returns (uint256);\r\n    function vat() external returns (address);\r\n    function gemJoin() external returns (address);\r\n    function dai() external returns (address);\r\n    function daiJoin() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function vow() external returns (address);\r\n    function tin() external returns (uint256);\r\n    function tout() external returns (uint256);\r\n    function file(bytes32 what, uint256 data) external;\r\n    function sellGem(address usr, uint256 gemAmt) external;\r\n    function buyGem(address usr, uint256 gemAmt) external;\r\n}\r\n\r\ninterface LerpAbstract {\r\n    function wards(address) external returns (uint256);\r\n    function target() external returns (address);\r\n    function what() external returns (bytes32);\r\n    function start() external returns (uint256);\r\n    function end() external returns (uint256);\r\n    function duration() external returns (uint256);\r\n    function started() external returns (bool);\r\n    function done() external returns (bool);\r\n    function startTime() external returns (uint256);\r\n    function init() external;\r\n    function tick() external;\r\n}\r\n\r\n\r\ncontract SpellAction {\r\n    // Office hours enabled if true\r\n    bool constant public officeHours = true;\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    // PSM-USDC-A\r\n    address constant USDC               = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant MCD_JOIN_USDC_PSM  = 0x0A59649758aa4d66E25f08Dd01271e891fe52199;\r\n    address constant MCD_FLIP_USDC_PSM  = 0x507420100393b1Dc2e8b4C8d0F8A13B56268AC99;\r\n    address constant MCD_PSM_USDC_PSM   = 0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A;\r\n    address constant LERP               = 0x8089E7833B6C39583Cd79c67329c6B5628DC1885;\r\n    address constant PIP_USDC           = 0x77b68899b99b686F415d074278a9a16b336085A0;\r\n    bytes32 constant ILK_PSM_USDC_A     = \"PSM-USDC-A\";\r\n\r\n    // decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\r\n\r\n    modifier limited {\r\n        if (officeHours) {\r\n            uint day = (block.timestamp / 1 days + 3) % 7;\r\n            require(day < 5, \"Can only be cast on a weekday\");\r\n            uint hour = block.timestamp / 1 hours % 24;\r\n            require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function execute() external limited {\r\n        address MCD_VAT      = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        address MCD_CAT      = CHANGELOG.getAddress(\"MCD_CAT\");\r\n        address MCD_JUG      = CHANGELOG.getAddress(\"MCD_JUG\");\r\n        address MCD_SPOT     = CHANGELOG.getAddress(\"MCD_SPOT\");\r\n        address MCD_END      = CHANGELOG.getAddress(\"MCD_END\");\r\n        address MCD_VOW      = CHANGELOG.getAddress(\"MCD_VOW\");\r\n        address MCD_DAI      = CHANGELOG.getAddress(\"MCD_DAI\");\r\n        address MCD_JOIN_DAI = CHANGELOG.getAddress(\"MCD_JOIN_DAI\");\r\n        address FLIPPER_MOM  = CHANGELOG.getAddress(\"FLIPPER_MOM\");\r\n        address ILK_REGISTRY = CHANGELOG.getAddress(\"ILK_REGISTRY\");\r\n\r\n        // Set the global debt ceiling\r\n        // + 3 M for PSM-USDC-A\r\n        VatAbstract(MCD_VAT).file(\"Line\",\r\n            VatAbstract(MCD_VAT).Line()\r\n            + 3 * MILLION * RAD\r\n        );\r\n\r\n        //\r\n        // Add PSM-USDC-A\r\n        //\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_USDC_PSM).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDC_PSM).ilk() == ILK_PSM_USDC_A, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDC_PSM).gem() == USDC, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDC_PSM).dec() == DSTokenAbstract(USDC).decimals(), \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_USDC_PSM).vat() == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_USDC_PSM).cat() == MCD_CAT, \"flip-cat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_USDC_PSM).ilk() == ILK_PSM_USDC_A, \"flip-ilk-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).vat() == MCD_VAT, \"psm-vat-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).gemJoin() == MCD_JOIN_USDC_PSM, \"psm-join-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).dai() == MCD_DAI, \"psm-dai-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).daiJoin() == MCD_JOIN_DAI, \"psm-dai-join-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).ilk() == ILK_PSM_USDC_A, \"psm-ilk-not-match\");\r\n        require(PsmAbstract(MCD_PSM_USDC_PSM).vow() == MCD_VOW, \"psm-vow-not-match\");\r\n        require(LerpAbstract(LERP).target() == MCD_PSM_USDC_PSM, \"lerp-target-not-match\");\r\n        require(LerpAbstract(LERP).what() == \"tin\", \"lerp-what-not-match\");\r\n        require(LerpAbstract(LERP).start() == 1 * WAD / 100, \"lerp-start-not-match\");\r\n        require(LerpAbstract(LERP).end() == 1 * WAD / 1000, \"lerp-end-not-match\");\r\n        require(LerpAbstract(LERP).duration() ==  7 days, \"lerp-duration-not-match\");\r\n        require(!LerpAbstract(LERP).started(), \"lerp-not-started\");\r\n        require(!LerpAbstract(LERP).done(), \"lerp-not-done\");\r\n\r\n        // Set the USDC PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ILK_PSM_USDC_A, \"pip\", PIP_USDC);\r\n\r\n        // Set the PSM-USDC-A Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ILK_PSM_USDC_A, \"flip\", MCD_FLIP_USDC_PSM);\r\n\r\n        // Init PSM-USDC-A ilk in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(ILK_PSM_USDC_A);\r\n        JugAbstract(MCD_JUG).init(ILK_PSM_USDC_A);\r\n\r\n        // Allow PSM-USDC-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_USDC_PSM);\r\n        // Allow the PSM-USDC-A Flipper to reduce the Cat litterbox on deal()\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_USDC_PSM);\r\n        // Allow Cat to kick auctions in PSM-USDC-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).rely(MCD_CAT);\r\n        // Allow End to yank auctions in PSM-USDC-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).rely(MCD_END);\r\n        // Allow FlipperMom to access to the PSM-USDC-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).rely(FLIPPER_MOM);\r\n        // Disallow Cat to kick auctions in PSM-USDC-A Flipper\r\n        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_USDC_PSM);\r\n\r\n        // Set the PSM-USDC-A debt ceiling\r\n        VatAbstract(MCD_VAT).file(ILK_PSM_USDC_A, \"line\", 3 * MILLION * RAD);\r\n        // Set the Lot size\r\n        CatAbstract(MCD_CAT).file(ILK_PSM_USDC_A, \"dunk\", 50 * THOUSAND * RAD);\r\n        // Set the PSM-USDC-A liquidation penalty (e.g. 13% => X = 113)\r\n        CatAbstract(MCD_CAT).file(ILK_PSM_USDC_A, \"chop\", 113 * WAD / 100);\r\n        // Set the PSM-USDC-A stability fee (e.g. 1% = 1000000000315522921573372069)\r\n        JugAbstract(MCD_JUG).file(ILK_PSM_USDC_A, \"duty\", ZERO_PERCENT_RATE);\r\n        // Set the PSM-USDC-A percentage between bids (e.g. 3% => X = 103)\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).file(\"beg\", 103 * WAD / 100);\r\n        // Set the PSM-USDC-A time max time between bids\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).file(\"ttl\", 6 hours);\r\n        // Set the PSM-USDC-A max auction duration to\r\n        FlipAbstract(MCD_FLIP_USDC_PSM).file(\"tau\", 6 hours);\r\n        // Set the PSM-USDC-A min collateralization ratio (e.g. 150% => X = 150)\r\n        SpotAbstract(MCD_SPOT).file(ILK_PSM_USDC_A, \"mat\", 100 * RAY / 100);\r\n        // Set the PSM-USDC-A fee in (tin)\r\n        PsmAbstract(MCD_PSM_USDC_PSM).file(\"tin\", 1 * WAD / 100);\r\n        // Set the PSM-USDC-A fee out (tout)\r\n        PsmAbstract(MCD_PSM_USDC_PSM).file(\"tout\", 1 * WAD / 1000);\r\n\r\n        // Update PSM-USDC-A spot value in Vat\r\n        SpotAbstract(MCD_SPOT).poke(ILK_PSM_USDC_A);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_USDC_PSM);\r\n\r\n        // Initialize the lerp module to start the clock\r\n        LerpAbstract(LERP).init();\r\n\r\n        // Update the changelog\r\n        CHANGELOG.setAddress(\"MCD_JOIN_PSM_USDC_A\", MCD_JOIN_USDC_PSM);\r\n        CHANGELOG.setAddress(\"MCD_FLIP_PSM_USDC_A\", MCD_FLIP_USDC_PSM);\r\n        CHANGELOG.setAddress(\"MCD_PSM_USDC_A\", MCD_PSM_USDC_PSM);\r\n        // Bump version\r\n        CHANGELOG.setVersion(\"1.2.3\");\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    DSPauseAbstract immutable public pause;\r\n    address         immutable public action;\r\n    bytes32         immutable public tag;\r\n    uint256         immutable public expiration;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    bool            public done;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/ed4b0067a116ff03c0556d5e95dca69773ee7fe4/governance/votes/Community%20Executive%20vote%20-%20December%2020%2C%202020.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-12-20 MakerDAO Executive Spell | Hash: 0xe9f640a65d72e16bc75bffad53c5cb9e292df53c70a94c2b8975b47f196946b5\";\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    constructor() public {\r\n        pause = DSPauseAbstract(CHANGELOG.getAddress(\"MCD_PAUSE\"));\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;\r\n        address _action = action = address(new SpellAction());\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = block.timestamp + 30 days;\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        require(eta != 0, \"DSSSpell/spell-not-scheduled\");\r\n        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\r\n\r\n        if (SpellAction(action).officeHours()) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function schedule() external {\r\n        require(block.timestamp <= expiration, \"DSSSpell/spell-has-expired\");\r\n        require(eta == 0, \"DSSSpell/spell-already-scheduled\");\r\n        eta = block.timestamp + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() external {\r\n        require(!done, \"DSSSpell/spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8581950c1cb199f287274e4413a2b51f6001c429f3b83636bf0b58d1b81f15fc"}]}