{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @title: SafeMath\r\n * @dev: Helper contract functions to arithmatic operations safely.\r\n */\r\ncontract SafeMath {\r\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @title: Token\r\n * @dev: Interface contract for ERC20 tokens\r\n */\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint public _totalSupply;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract USDT is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n    function approve(address spender, uint256 value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @title: Lock and Earn\r\n */\r\ncontract LockAndEarn is SafeMath {\r\n    // _kaiAddress: KAI ERC20 contract address\r\n    // msg.sender: owner && operator\r\n    constructor(uint256 _lockStartTime, uint256 _lockDays) public {\r\n        owner = msg.sender;\r\n        lockDays = _lockDays;\r\n        lockStartTime = _lockStartTime;\r\n        isEnded = false;\r\n    }\r\n\r\n    address public owner;\r\n    uint256 public hardCap = 2000000000000000000000000; // 2000000 KAI\r\n    uint256 public totalBonusUSDT;\r\n    uint256 public minDeposit = 1000000000000000000000; // 1000 KAI\r\n    uint256 public maxDeposit = 250000000000000000000000; // 250000 KAI\r\n    address public kaiAddress = 0xD9Ec3ff1f8be459Bb9369b4E79e9Ebcf7141C093;\r\n    address constant public usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    uint256 public lockDays;\r\n    uint256 public lockStartTime;\r\n    uint8 public winPool;\r\n    bool public isEnded;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public balance;\r\n    mapping(uint256 => uint256) public currentCapPool;\r\n    mapping(address => bool) public isWithdrawBonus;\r\n    mapping(address => mapping(uint256 => bool)) isWithdrawKAI;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Deposit ERC20's for saving\r\n    function depositKAI(uint256 amount, uint256 poolIndex) public {\r\n        require(isEnded != true);\r\n        require(lockStartTime < now, 'Event has not been started yet');\r\n        require(balance[msg.sender][poolIndex] == 0, \"Can only deposit once\");\r\n        require (amount >= minDeposit, 'Amount must be equal or greater than 1000 KAI');\r\n        require (amount <= maxDeposit, 'Amount must be equal or less than 250000 KAI');\r\n        require(Add(currentCapPool[poolIndex], amount) <= hardCap, 'Exceed limit total cap');\r\n\r\n        require(Token(kaiAddress).transferFrom(msg.sender, address(this), amount));\r\n\r\n        balance[msg.sender][poolIndex] = amount;\r\n        uint256 currentCap = currentCapPool[poolIndex];\r\n        currentCapPool[poolIndex] = Add(currentCap, amount);\r\n    }\r\n\r\n    // Withdraw ERC20's to personal address\r\n    function withdrawKAI(uint256 poolIndex) public {\r\n        require(lockStartTime + lockDays * 1 days < now, \"In locking period\");\r\n        require(isWithdrawKAI[msg.sender][poolIndex] != true, \"Can only withdraw once\");\r\n        uint256 amount = balance[msg.sender][poolIndex];\r\n        require(Token(kaiAddress).transfer(msg.sender, amount));\r\n        isWithdrawKAI[msg.sender][poolIndex] = true;\r\n    }\r\n    \r\n    function withdrawBonus() public {\r\n        require(lockStartTime + lockDays * 1 days < now, \"In locking period\");\r\n        require(balance[msg.sender][winPool] > 0, \"Address has not deposited\");\r\n        require(isWithdrawBonus[msg.sender] != true, \"Can only withdraw once\");\r\n        \r\n        _withdrawBonus(msg.sender, winPool);\r\n    }\r\n    \r\n    function _withdrawBonus(address addr, uint256 poolIndex) private {\r\n        uint256 amount = balance[addr][poolIndex];\r\n        uint256 currentCap = currentCapPool[winPool];\r\n\r\n        uint256 bonus = Mul(amount, totalBonusUSDT) / currentCap;\r\n        USDT(usdtAddress).transfer(msg.sender, bonus);\r\n        isWithdrawBonus[msg.sender] = true;\r\n    }\r\n   \r\n    function setWinningPoolAndBonus(uint256 _totalBonusUSDT, uint8 poolIndex) public onlyOwner {\r\n        require(USDT(usdtAddress).balanceOf(address(this)) >= _totalBonusUSDT);\r\n\r\n        totalBonusUSDT = _totalBonusUSDT;\r\n        winPool = poolIndex;\r\n    }\r\n   \r\n    // owner sets global variables the campaign ends\r\n    function setEndedDeposit() public onlyOwner {\r\n        isEnded = true;\r\n    }\r\n    \r\n    // Below two emergency functions will be never used in normal situations.\r\n    // These function is only prepared for emergency case such as smart contract hacking Vulnerability or smart contract abolishment\r\n    // Withdrawn fund by these function cannot belong to any operators or owners.\r\n    // Withdrawn fund should be distributed to individual accounts having original ownership of withdrawn fund.\r\n\r\n    function emergencyWithdrawalETH(uint256 amount) public onlyOwner {\r\n        require(msg.sender.send(amount));\r\n    }\r\n    \r\n    function emergencyWithdrawalKAI(uint256 amount) public onlyOwner {\r\n        Token(kaiAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function emergencyWithdrawalUSDT(uint256 amount) public onlyOwner {\r\n        USDT(usdtAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function getMyBalance(uint256 poolIndex) public view returns (uint256) {\r\n        return balance[msg.sender][poolIndex];\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return now;\r\n    }\r\n    \r\n    // @notice Will receive any eth sent to the contract\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalBonusUSDT\",\"type\":\"uint256\"},{\"name\":\"poolIndex\",\"type\":\"uint8\"}],\"name\":\"setWinningPoolAndBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentCapPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kaiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"depositKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setEndedDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWithdrawBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lockStartTime\",\"type\":\"uint256\"},{\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LockAndEarn","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005f7d0500000000000000000000000000000000000000000000000000000000000000001f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://78f1da4a072969403f80e0c530ac971a64b2c62018e8aa80c85eed6d512b08a7"}]}