{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File: localhost/contracts/POLContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract POLContract {\r\n\r\n    event Received(address, uint);\r\n    event onDeposit(address, uint256, uint256);\r\n    event onWithdraw(address, uint256);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct VestingPeriod {\r\n        uint256 epoch;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct UserTokenInfo {\r\n        uint256 deposited; // incremented on successful deposit\r\n        uint256 withdrawn; // incremented on successful withdrawl\r\n        VestingPeriod[] vestingPeriods; // added to on successful deposit\r\n    }\r\n\r\n    // map erc20 token to user address to release schedule\r\n    mapping(address => mapping(address => UserTokenInfo)) tokenUserMap;\r\n\r\n    struct LiquidityTokenomics {\r\n        uint256[] epochs;\r\n        mapping (uint256 => uint256) releaseMap; // map epoch -> amount withdrawable\r\n    }\r\n\r\n    // map erc20 token to release schedule\r\n    mapping(address => LiquidityTokenomics) tokenEpochMap;\r\n\r\n\r\n    // Fast mapping to prevent array iteration in solidity\r\n    mapping(address => bool) public lockedTokenLookup;\r\n\r\n    // A dynamically-sized array of currently locked tokens\r\n    address[] public lockedTokens;\r\n\r\n    // fee variables\r\n    uint256 public feeNumerator;\r\n    uint256 public feeDenominator;\r\n\r\n    address public feeReserveAddress;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        feeNumerator = 3;\r\n        feeDenominator = 1000;\r\n        feeReserveAddress = address(0xAA3d85aD9D128DFECb55424085754F6dFa643eb1);\r\n        owner = address(0xfCdd591498e86876F086524C0b2E9Af41a0c9FCD);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    function updateFee(uint256 numerator, uint256 denominator) onlyOwner public {\r\n        feeNumerator = numerator;\r\n        feeDenominator = denominator;\r\n    }\r\n\r\n    function calculateFee(uint256 amount) public view returns (uint256){\r\n        require(amount >= feeDenominator, 'Deposit is too small');\r\n        uint256 amountInLarge = amount.mul(feeDenominator.sub(feeNumerator));\r\n        uint256 amountIn = amountInLarge.div(feeDenominator);\r\n        uint256 fee = amount.sub(amountIn);\r\n        return (fee);\r\n    }\r\n\r\n    function depositTokenMultipleEpochs(address token, uint256[] memory amounts, uint256[] memory dates) public payable {\r\n        require(amounts.length == dates.length, 'Amount and date arrays have differing lengths');\r\n        for (uint i=0; i<amounts.length; i++) {\r\n            depositToken(token, amounts[i], dates[i]);\r\n        }\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount, uint256 unlock_date) public payable {\r\n        require(unlock_date < 10000000000, 'Enter an unix timestamp in seconds, not miliseconds');\r\n        require(amount > 0, 'Your attempting to trasfer 0 tokens');\r\n        uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\r\n        require(allowance >= amount, 'You need to set a higher allowance');\r\n        // charge a fee\r\n        uint256 fee = calculateFee(amount);\r\n        uint256 amountIn = amount.sub(fee);\r\n        require(IERC20(token).transferFrom(msg.sender, address(this), amountIn), 'Transfer failed');\r\n        require(IERC20(token).transferFrom(msg.sender, address(feeReserveAddress), fee), 'Transfer failed');\r\n        if (!lockedTokenLookup[token]) {\r\n            lockedTokens.push(token);\r\n            lockedTokenLookup[token] = true;\r\n        }\r\n        LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[token];\r\n        // amount is required to be above 0 in the start of this block, therefore this works\r\n        if (liquidityTokenomics.releaseMap[unlock_date] > 0) {\r\n            liquidityTokenomics.releaseMap[unlock_date] = liquidityTokenomics.releaseMap[unlock_date].add(amountIn);\r\n        } else {\r\n            liquidityTokenomics.epochs.push(unlock_date);\r\n            liquidityTokenomics.releaseMap[unlock_date] = amountIn;\r\n        }\r\n        UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\r\n        uto.deposited = uto.deposited.add(amountIn);\r\n        VestingPeriod[] storage vp = uto.vestingPeriods;\r\n        vp.push(VestingPeriod(unlock_date, amountIn));\r\n\r\n        emit onDeposit(token, amount, unlock_date);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) public {\r\n        require(amount > 0, 'Your attempting to withdraw 0 tokens');\r\n        uint256 withdrawable = getWithdrawableBalance(token, msg.sender);\r\n        UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\r\n        uto.withdrawn = uto.withdrawn.add(amount);\r\n        require(amount <= withdrawable, 'Your attempting to withdraw more than you have available');\r\n        require(IERC20(token).transfer(msg.sender, amount), 'Transfer failed');\r\n        emit onWithdraw(token, amount);\r\n    }\r\n\r\n    function getWithdrawableBalance(address token, address user) public view returns (uint256) {\r\n        UserTokenInfo storage uto = tokenUserMap[token][address(user)];\r\n        uint arrayLength = uto.vestingPeriods.length;\r\n        uint256 withdrawable = 0;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            VestingPeriod storage vestingPeriod = uto.vestingPeriods[i];\r\n            if (vestingPeriod.epoch < block.timestamp) {\r\n                withdrawable = withdrawable.add(vestingPeriod.amount);\r\n            }\r\n        }\r\n        withdrawable = withdrawable.sub(uto.withdrawn);\r\n        return withdrawable;\r\n    }\r\n\r\n    function getUserTokenInfo (address token, address user) public view returns (uint256, uint256, uint256) {\r\n        UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\r\n        uint256 deposited = uto.deposited;\r\n        uint256 withdrawn = uto.withdrawn;\r\n        uint256 length = uto.vestingPeriods.length;\r\n        return (deposited, withdrawn, length);\r\n    }\r\n\r\n    function getUserVestingAtIndex (address token, address user, uint index) public view returns (uint256, uint256) {\r\n        UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\r\n        VestingPeriod storage vp = uto.vestingPeriods[index];\r\n        return (vp.epoch, vp.amount);\r\n    }\r\n\r\n    function getTokenReleaseLength (address token) public view returns (uint256) {\r\n        LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\r\n        return liquidityTokenomics.epochs.length;\r\n    }\r\n\r\n    function getTokenReleaseAtIndex (address token, uint index) public view returns (uint256, uint256) {\r\n        LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\r\n        uint256 epoch = liquidityTokenomics.epochs[index];\r\n        uint256 amount = liquidityTokenomics.releaseMap[epoch];\r\n        return (epoch, amount);\r\n    }\r\n\r\n    function lockedTokensLength() external view returns (uint) {\r\n        return lockedTokens.length;\r\n    }\r\n}\r\n// File: localhost/contracts/SpaceMineToken.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract SpaceMineCore is ERC20(\"SpaceMineToken\", \"MINE\"), Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address internal _taxer;\r\n    address internal _taxDestination;\r\n\tuint256 internal _cap;\r\n    uint internal _taxRate = 0;\r\n    bool internal _lock = true;\r\n    mapping (address => bool) internal _taxWhitelist;\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(msg.sender == owner() || !_lock, \"Transfer is locking\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[msg.sender] == true) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(msg.sender) >= amount, \"insufficient balance.\");\r\n        super.transfer(recipient, transferAmount);\r\n\r\n        if (taxAmount != 0) {\r\n            super.transfer(_taxDestination, taxAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(sender == owner() || !_lock, \"TransferFrom is locking\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxRate).div(100);\r\n        if (_taxWhitelist[sender] == true) {\r\n            taxAmount = 0;\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        require(balanceOf(sender) >= amount, \"insufficient balance.\");\r\n        super.transferFrom(sender, recipient, transferAmount);\r\n        if (taxAmount != 0) {\r\n            super.transferFrom(sender, _taxDestination, taxAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\tfunction _mint(address account, uint256 value) override internal {\r\n        require(totalSupply().add(value) <= _cap, \"cap exceeded\");\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\ncontract SpaceMineToken is SpaceMineCore {\r\n    mapping (address => bool) public minters;\r\n\r\n\tuint256 public constant hard_cap = 96000 * 1e18;\r\n\r\n    constructor() public {\r\n        _taxer = owner();\r\n        _taxDestination = owner();\r\n\t\t_cap = hard_cap;\r\n    }\r\n\r\n\tfunction cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function mint(address to, uint amount) public onlyMinter {\r\n        _mint(to, amount);\r\n\t\t_moveDelegates(address(0), _delegates[to], amount);\r\n    }\r\n\r\n\t/// @notice A record of each accounts delegate\r\n\tmapping (address => address) public _delegates;\r\n\t/// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"MINE:delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"MINE::delegateBySig: invalid nonce\");\r\n        require(block.timestamp <= expiry, \"MINE::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"MINE::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying MINE;\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld-amount;\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld+amount;\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"MINE::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n\r\n    function burn(uint amount) public {\r\n        require(amount > 0);\r\n        require(balanceOf(msg.sender) >= amount);\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        minters[account] = true;\r\n    }\r\n\r\n    function removeMinter(address account) public onlyOwner {\r\n        minters[account] = false;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Restricted to minters.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTaxer() {\r\n        require(msg.sender == _taxer, \"Only for taxer.\");\r\n        _;\r\n    }\r\n\r\n    function setTaxer(address account) public onlyTaxer {\r\n        _taxer = account;\r\n    }\r\n\r\n    function setTaxRate(uint256 rate) public onlyTaxer {\r\n        _taxRate = rate;\r\n    }\r\n\r\n    function setTaxDestination(address account) public onlyTaxer {\r\n        _taxDestination = account;\r\n    }\r\n\r\n    function addToWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address account) public onlyTaxer {\r\n        _taxWhitelist[account] = false;\r\n    }\r\n\r\n    function taxer() public view returns(address) {\r\n        return _taxer;\r\n    }\r\n\r\n    function taxDestination() public view returns(address) {\r\n        return _taxDestination;\r\n    }\r\n\r\n    function taxRate() public view returns(uint256) {\r\n        return _taxRate;\r\n    }\r\n\r\n    function isInWhitelist(address account) public view returns(bool) {\r\n        return _taxWhitelist[account];\r\n    }\r\n\r\n    function unlock() public onlyOwner {\r\n        _lock = false;\r\n    }\r\n\r\n    function getLockStatus() view public returns(bool) {\r\n        return _lock;\r\n    }\r\n}\r\n// File: localhost/contracts/uniswapv2/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Uniswap {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: localhost/contracts/uniswapv2/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n// File: localhost/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n// File: localhost/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: localhost/contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n  /*\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n  */\r\n}\r\n\r\n// File: localhost/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: localhost/contracts/SpaceMinePresale.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SpaceMinePresale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapV2Router02 private uniswapRouterV2;\r\n    IUniswapV2Factory private uniswapFactory;\r\n    IUniswapV2Pair private pair;\r\n    POLContract private pol;\r\n    address public tokenUniswapPair;\r\n\r\n    SpaceMineToken public mine;\r\n\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => uint) public ethSupply;\r\n    address payable devAddress;\r\n    uint public minePrice = 10;\r\n    uint public buyLimit = 4 * 1e18;\r\n    bool public presaleStart = false;\r\n    bool public onlyWhitelist = true;\r\n    uint public presaleLastSupply = 8000 * 1e18;\r\n    uint public initialLiquidityMax = 1600 * 1e18;\r\n    uint256 public contractStartTimestamp;\r\n    uint256 public constant LOCK_PERIOD = 26 weeks;\r\n    bool public LPGenerationCompleted;\r\n    uint256 public totalLPTokensMinted;\r\n    uint256 public totalPresaleContributed;\r\n\r\n    address payable constant UNICRYPT_DEPLOYER = 0x60e2E1b2a317EdfC870b6Fc6886F69083FB2099a;\r\n    address constant UNISWAP_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant UNISWAP_ROUTER_V2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant UNICRYPT_POL = 0x17e00383A843A9922bCA3B280C0ADE9f8BA48449;\r\n\r\n    event BuyMineSuccess(address account, uint ethAmount, uint mineAmount);\r\n\r\n    constructor(\r\n        SpaceMineToken _mine\r\n        \r\n    ) public {\r\n        mine = _mine;\r\n        initWhitelist();\r\n        pairSetup();\r\n    }\r\n\r\n    function pairSetup() internal {\r\n        uniswapRouterV2 = IUniswapV2Router02(UNISWAP_ROUTER_V2); // For testing\r\n        uniswapFactory = IUniswapV2Factory(UNISWAP_FACTORY); // For testing\r\n\r\n        pol = POLContract(payable(UNICRYPT_POL)); // For testing;\r\n        createUniswapPair();\r\n    }\r\n\r\n    function createUniswapPair() internal {\r\n        require(tokenUniswapPair == address(0), \"Token: pool already created\");\r\n        tokenUniswapPair = uniswapFactory.createPair(\r\n            address(uniswapRouterV2.WETH()),\r\n            address(mine)\r\n        );\r\n        pair = IUniswapV2Pair(tokenUniswapPair);\r\n    }\r\n\r\n    function addToWhitelist(address account) public onlyOwner {\r\n        require(whitelist[account] == false, \"This account is already in whitelist.\");\r\n        whitelist[account] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address account) public onlyOwner {\r\n        require(whitelist[account], \"This account is not in whitelist.\");\r\n        whitelist[account] = false;\r\n    }\r\n\r\n    function startPresale() public onlyOwner {\r\n        presaleStart = true;\r\n        contractStartTimestamp = block.timestamp;\r\n        mine.mint(address(this), initialLiquidityMax);\r\n    }\r\n\r\n    function stopPresale() public onlyOwner {\r\n        presaleStart = false;\r\n    }\r\n\r\n    function setDevAddress(address payable account) public onlyOwner {\r\n        devAddress = account;\r\n    }\r\n\r\n    function setMinePrice(uint newPrice) public onlyOwner {\r\n        minePrice = newPrice;\r\n    }\r\n\r\n    function setBuyLimit(uint newLimit) public onlyOwner {\r\n        buyLimit = newLimit;\r\n    }\r\n\r\n    function changeToNotOnlyWhitelist() public onlyOwner {\r\n        onlyWhitelist = false;\r\n    }\r\n\r\n    function checkpresaleLastSupply() public view returns(uint){\r\n        return presaleLastSupply;\r\n    }\r\n\r\n    function burnLeftoverMine() public onlyOwner {\r\n        // Only available 24 hours after presale ends (48 hours after presale starts)\r\n        require(contractStartTimestamp.add(2 days) < block.timestamp, \"Grace period is not over yet\");\r\n        mine.burn(mine.balanceOf(address(this)));\r\n    }\r\n\r\n    modifier needHaveLastSupply() {\r\n        require(presaleLastSupply >= 0, \"Oh you are too late, all mine are gone\");\r\n        _;\r\n    }\r\n\r\n    modifier presaleHasStarted() {\r\n        require(presaleStart, \"Presale has not been started, buckle up!\");\r\n        _;\r\n    }\r\n\r\n    receive() payable external presaleHasStarted needHaveLastSupply {\r\n        if (onlyWhitelist) {\r\n            require(whitelist[msg.sender], \"Currently only people who are in whitelist can participate\");\r\n        }\r\n        uint ethTotalAmount = ethSupply[msg.sender].add(msg.value);\r\n        require(ethTotalAmount <= buyLimit, \"Everyone should buy lesser than 4 eth.\");\r\n        uint mineAmount = msg.value.mul(minePrice);\r\n        require(mineAmount <= presaleLastSupply, \"sorry, insufficient presale supply\");\r\n        totalPresaleContributed.add(msg.value);\r\n        presaleLastSupply = presaleLastSupply.sub(mineAmount);\r\n        devAddress.transfer(msg.value.div(2));\r\n        mine.mint(msg.sender, mineAmount);\r\n        ethSupply[msg.sender] = ethTotalAmount;\r\n        emit BuyMineSuccess(msg.sender, msg.value, mineAmount);\r\n    }\r\n\r\n    function liquidityGeneration() public {\r\n        require(LPGenerationCompleted == false, \"Liquidity generation already finished\");\r\n        uint256 initialETHLiquidity = address(this).balance;\r\n\r\n        //Wrap eth\r\n        address WETH = uniswapRouterV2.WETH();\r\n        IWETH(WETH).deposit{value : initialETHLiquidity}();\r\n        require(address(this).balance == 0 , \"Transfer Failed\");\r\n        IWETH(WETH).transfer(address(pair),initialETHLiquidity);\r\n\r\n        uint256 initialLiquidity = initialETHLiquidity.mul(4);\r\n        require(initialLiquidity <= initialLiquidityMax, \"Error amount\");\r\n\r\n        mine.transfer(address(pair), initialLiquidity);\r\n        pair.mint(address(this));\r\n        totalLPTokensMinted = pair.balanceOf(address(this));\r\n        require(totalLPTokensMinted != 0 , \"LP creation failed\");\r\n        LPGenerationCompleted = true;\r\n\r\n        uint256 unlockTime = block.timestamp + LOCK_PERIOD;\r\n\r\n        IERC20(address(pair)).approve(address(pol), totalLPTokensMinted);\r\n        pol.depositToken(address(pair), totalLPTokensMinted, unlockTime);\r\n        require(pair.balanceOf(address(pol)) != 0, \"Auto lock failed\");\r\n    }\r\n    \r\n    function withdrawLiquidity() public onlyOwner {\r\n        uint256 withdrawable = pol.getWithdrawableBalance(address(pair), address(this));\r\n        pol.withdrawToken(address(pair), withdrawable);\r\n        pair.transfer(msg.sender, pair.balanceOf(address(this)));\r\n    }\r\n\r\n    // Emergency drain in case of a bug in liquidity generation\r\n    // Adds all funds to owner to refund people\r\n    // Only available 24 hours after presale ends (48 hours after presale starts)\r\n    function emergencyDrain() public onlyOwner {\r\n        require(contractStartTimestamp.add(2 days) < block.timestamp, \"Grace period is not over yet\");\r\n        uint256 initialLiquidity = address(this).balance.mul(4);\r\n        mine.transfer(UNICRYPT_DEPLOYER, initialLiquidity);\r\n        (bool success, ) = UNICRYPT_DEPLOYER.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function initWhitelist() internal {\r\n        //add the original whitelist\r\n        whitelist[0x04b936745C02E8Cb75cC68b93B4fb99b38939d5D] = true;\r\n        whitelist[0xcC4fB675c46F3715c52307c4d2f8640c4EF7bb31] = true;\r\n        whitelist[0xA734871BC0f9d069936db4fA44AeA6d4325F41e5] = true;\r\n        whitelist[0x9A8ea427c5CF4490c07428b853A5577c9B7a2d14] = true;\r\n        whitelist[0x9DC6A59a9Eee821cE178f0aaBE1880874d48eca1] = true;\r\n        whitelist[0x7149De569464C1c90f9d70cAf03B25dc2766E936] = true;\r\n        whitelist[0xf21cE4A93534E725215bfEc2A5e1aDD496E80469] = true;\r\n        whitelist[0xB7A641f8aebf507E1Bbc85F8feeEa56F38DbeB24] = true;\r\n        whitelist[0x9a0F4440086141b9a405675fC8f839144Dd63B8F] = true;\r\n        whitelist[0xbE18f84532d8f7fb6d7919401C0096f3e257DB8b] = true;\r\n        whitelist[0xB4E383BEc5c5312F2E823d0A9C9eb17882f2aaF9] = true;\r\n        whitelist[0x5b85988F0032ee818f911ec969Dd9c649CAa0a14] = true;\r\n        whitelist[0xA43c750d5dE3Bd88EE4F35DEF72Cf76afEbeC274] = true;\r\n        whitelist[0xfc35497204dA2d9539b23FE0D71022e2523d99b1] = true;\r\n        whitelist[0x870ABcf52d52ECb1Ed00270433138262300BCC6d] = true;\r\n        whitelist[0x5D39036947e83862cE5f3DB351cC64E3D4592cD5] = true;\r\n        whitelist[0x63c9a867D704dF159bbBB88EeEe1609196b1995E] = true;\r\n        whitelist[0xC0375Db78aB51B82E9bE2E139348491259280343] = true;\r\n        whitelist[0x13EAEced8317889e7A3452A3ecb474b7801F20d8] = true;\r\n        whitelist[0x81409E4C1a55C034EC86F64A75d18D911A8B0071] = true;\r\n        whitelist[0x6CF51FDeF74d02296017A1129086Ee9C3477DC01] = true;\r\n        whitelist[0xD87dB443b01Cb8e453c11f9a26F48CD51c19842a] = true;\r\n        whitelist[0x10F555120485f0E352c0F11A4aC6f4A420300092] = true;\r\n        whitelist[0xBf26925f736E90E1715ce4E04cD9c289dD1bc002] = true;\r\n        whitelist[0xd39E6aD9d32D6c71326b800EA883c8Edc0b7B5e4] = true;\r\n        whitelist[0xF03336c8c2B040cF026af8774B67127dFF5413A5] = true;\r\n        whitelist[0x6CAd957812F1bb9aB9364F20cfA15482BcE9DE77] = true;\r\n        whitelist[0x64aaaBE41689B60ed969386b2D154e3887f628F6] = true;\r\n        whitelist[0x635954403448b9f55655FD5dbcC9675e8a4b8109] = true;\r\n        whitelist[0xfCE9f37F4F554419E9c370c9e6c67Bd0020BF577] = true;\r\n        whitelist[0x26FA038d801970EE46d53b0056658B4e1a4458Db] = true;\r\n        whitelist[0x8e9817f8f20F4B6156B4548144a2affde1890f08] = true;\r\n        whitelist[0xD6F50F21038c5479b9cc663794E7b5Fc876b3C26] = true;\r\n        whitelist[0x5984bb82F11171cb1DC2287E2A6935c44D491538] = true;\r\n        whitelist[0x0d79cce030AE9654aA9488524F407ce464297722] = true;\r\n        whitelist[0x0A4D7Bf0abc967d6204b83173A98B14603057C08] = true;\r\n        whitelist[0x908A52B2a18C7Adf135A861DE80b4952fF03BEEa] = true;\r\n        whitelist[0xB8dCE88744A07baf3904BAc6D9cEE3D1927BBb5e] = true;\r\n        whitelist[0x156D2893955A52fF0796d2D88BF6Ab2e7663e3FC] = true;\r\n        whitelist[0x8b584Cf38bFE7d50809bbC2A622C7Bd118a82577] = true;\r\n        whitelist[0x5f4B42AE45C1681f5b24eB6aFBd1F0f95d7c8E25] = true;\r\n        whitelist[0xA6a576527217e0194c8CDb5f15F21209FeAB5FB7] = true;\r\n        whitelist[0x40a4fce89b26E924A3b5f13A91E78A5dc4944a45] = true;\r\n        whitelist[0x7f62Fbb8a9E707e44A198584ae2e8Db67cEfC30a] = true;\r\n        whitelist[0xC82b6f107fA7Baeb0809B2645cE8AAC4328Cb75A] = true;\r\n        whitelist[0xeFAE1190444Aae8CFF4915eb7D5054BFcDfEDcE6] = true;\r\n        whitelist[0x963D961b4F18dB19d285F44e6De8D77BD457D7D6] = true;\r\n        whitelist[0x538fAaE7e0fD3aDC7C400b0A1CCA242095ebB554] = true;\r\n        whitelist[0x3049c80BDD527128eb4E7886AB1Db1E8042a8EB7] = true;\r\n        whitelist[0x08BeEabCa238deb5ee1016618BF80c40Ad221C98] = true;\r\n        whitelist[0xcA7F8f6A21C6e0F3b0177207407Fc935429BdD27] = true;\r\n        whitelist[0xD45FcAca001032bcB6DC509b4E0dc97A3351Ca88] = true;\r\n        whitelist[0xA0dc2b64eb9c93334225032383344a9a62DA9Ef0] = true;\r\n        whitelist[0x9e353fbdC3eC7290290BdA31a8001cb609858adf] = true;\r\n        whitelist[0x465FE2dbE1F73FA4dB8b2a3b8A4aafcACb2Bf1AA] = true;\r\n        whitelist[0x8468c6Efa8ca7ffccB2C31D112e5e9331A469867] = true;\r\n        whitelist[0x04A0f10c0Dcfa5a4C060E5421f385c2A0E541a94] = true;\r\n        whitelist[0x61412bB7b13c24C3A913639a22BE592D65e797b6] = true;\r\n        whitelist[0x12429F85Fa35183Bc7cA6750303ee3f6AFE31d13] = true;\r\n        whitelist[0xE349a754b82eFa0AB90C69BBc2Bcc7Cf17CC8650] = true;\r\n        whitelist[0x6f158C7DdAeb8594d36C8869bee1B3080a6e5317] = true;\r\n        whitelist[0x1e9b0e7D28bC135584EA1717065a6CcE3298a80D] = true;\r\n        whitelist[0x98C744edfd71F95a63423bEe72eAE5cB78415067] = true;\r\n        whitelist[0x921AC49968F27B7922B5aB1757ef30508e787580] = true;\r\n        whitelist[0x294e20DA26e64730FadA867213d011B622aD0bb8] = true;\r\n        whitelist[0xd2a4A34eF72F766f269409702A811eec8D55F2dE] = true;\r\n        whitelist[0x7ae9185fc5fC77fdf2CaFCb0018a54C34E733fe7] = true;\r\n        whitelist[0x44Acd0Ff3bE9Fdfb932453C82B5dF5739D28b276] = true;\r\n        whitelist[0x0Ed67742bb18250F0e0CeD12B980668A32437915] = true;\r\n        whitelist[0xaa126ef289c099D46a5a9484C95707E681D278DD] = true;\r\n        whitelist[0xdd8D647b0133dEdC7907bbd2E303C029E2009d2a] = true;\r\n        whitelist[0xd81a19b8b3BE4912018b32AD634C0CA873f45189] = true;\r\n        whitelist[0x13adb88D0CE40651625b43B597019f9CE3D60bCC] = true;\r\n        whitelist[0x9FBEacDf803004e8BEF3e5013faF0bF0090e6588] = true;\r\n        whitelist[0xE792be33d36df027c6a5ad9bFe9F74bD40AD0F58] = true;\r\n        whitelist[0x064a5d4359FFF916e59E0d68f6094729c4052B8b] = true;\r\n        whitelist[0xBc159B71c296c21a1895a8dDf0aa45969c5F17c2] = true;\r\n        whitelist[0xeC31a56b8323dd7289F5f69F99F8F8558faDBBc9] = true;\r\n        whitelist[0xF9687743fb84966f63afB100B0F6be8E4aEc374e] = true;\r\n        whitelist[0x21A56D488521C02644698Bf30dF4D7aC21B03ED4] = true;\r\n        whitelist[0x83B045a90C8f67B7734D3b0417ed20eD5933E67D] = true;\r\n        whitelist[0x89A5d9e66AA6439f9daBa379078193AbA58d949a] = true;\r\n        whitelist[0xf062B3ab33A518Ef57e0039379A128CaF2e01AD8] = true;\r\n        whitelist[0x71fE41C174277D4f6D52BfB10B7CE8cB55Bad9Fe] = true;\r\n        whitelist[0x0388134B224Fc69B19f26c65581356B6eEA9aF81] = true;\r\n        whitelist[0xf403ad7F9F36D0201d5AFe7331b40835E3CEd922] = true;\r\n        whitelist[0x166B6770f7513ee4BE7a88f7C8d250E5E8BCbfAF] = true;\r\n        whitelist[0x97ca6aE239E5476b546Fc873002BF117Cc52F6df] = true;\r\n        whitelist[0x76AaD6e2165a469feA3A02F545D9f6e5E6AAd2d5] = true;\r\n        whitelist[0xf4c7E60fC24Bd932b275cAa71C4Cf6642e49F5BD] = true;\r\n        whitelist[0xe8C0C83C181AACdab4f48624B5574CC88aD8E840] = true;\r\n        whitelist[0x0910AEd2f4a4b3E7F399F3d5Cf6EdacA132b83D0] = true;\r\n        whitelist[0xD631A7500c39368F021109F497c4eD85B8a256EA] = true;\r\n        whitelist[0x127563d0B37872e4956BF9B033e3cc03c6bF7E45] = true;\r\n        whitelist[0x88d6F54C227A0483272f03435af70b4A864A0333] = true;\r\n        whitelist[0xCdD607DECbe9b714F6E032bA478830a521753233] = true;\r\n        whitelist[0x92353D9186a1d02bE280F55C8A563762A9Edc100] = true;\r\n        whitelist[0x2B5b1Fffe86302F73e478a0E09d8Bf92eC75FFba] = true;\r\n        whitelist[0x6f7d991841CeFF8cEdFF91CfFc913a2CB4560d71] = true;\r\n        whitelist[0x585020d9C6b56874B78979F29d84E082D34f0B2a] = true;\r\n        whitelist[0x93f5af632Ce523286e033f0510E9b3C9710F4489] = true;\r\n        whitelist[0x3DdaEf422793e387bdD2aD26F5d511A949708B1A] = true;\r\n        whitelist[0x07D7E180C0Bd4ee3d5e25006dB854D81f76Fe1Fb] = true;\r\n        whitelist[0x129e81DAD8cFAEecEE130309b39B5F22215062ED] = true;\r\n        whitelist[0xdB32722A9dc5da52273F4fB1F25a8c75176c9Db2] = true;\r\n        whitelist[0x688c3689C5a3Fa844C1D186db2393d4590044178] = true;\r\n        whitelist[0x51D2C8b408B264dA569f75eCE31172f50b27E838] = true;\r\n        whitelist[0xcCEE65c43C62338f13A638bB98f18E36801B7450] = true;\r\n        whitelist[0xbB02B1B914590f69e9f1942d205f77276b4B3CA9] = true;\r\n        whitelist[0xba30963F47A2d33476E922Faa55bEc570C433dD0] = true;\r\n        whitelist[0xaca3365a1A6DBA0839b3B56219Cf250eBB9F32f1] = true;\r\n        whitelist[0x70e703ba15c43Aa6D043b8c29e60927E3b01df73] = true;\r\n        whitelist[0x374D37AA9d27C8a03F0d34Db0a9D441aAc99F186] = true;\r\n        whitelist[0x70b53C16852a2e341a31F0e884983DE58B937301] = true;\r\n        whitelist[0xAbC3EF008F7693C5A87ba317AA370c102C1DD690] = true;\r\n        whitelist[0xCc22DDc2e3B896Dd2b22A18590E73a2194B22c9C] = true;\r\n        whitelist[0xB16E1101CbB48F631AB4dBd54c801Ecef9B47D2b] = true;\r\n        whitelist[0x81D7D1dc2B8de78E68a082C858DAcB5ed3631133] = true;\r\n        whitelist[0x7Bf7Dedb68CAC2cFD0d99DFdDb703c4CE9640941] = true;\r\n        whitelist[0xA87fB81CDC6dfa965Bf8b7F43219BCc326A74Cfb] = true;\r\n        whitelist[0xCB0B5c48E08dC20A7F535E106703f3172fBE3012] = true;\r\n        whitelist[0xe15863985BE0c9Fb9D590E2d1D6486a551d63e06] = true;\r\n        whitelist[0x506adE0A94949dB63047346D3796A01C09384198] = true;\r\n        whitelist[0x61069795367ECC82167b8349BBb562449e452aac] = true;\r\n        whitelist[0x6d55db28aAaD7Ad31b33BF48a0461e202BF18622] = true;\r\n        whitelist[0x4d28975B4Ed2a1a9A00C657f28344DCe37EE0Ac6] = true;\r\n        whitelist[0xF6196741d0896dc362788C1FDbDF91b544Ab7C1C] = true;\r\n        whitelist[0x52d2D6E5A8b0a7594250D720b66a791fc8e71538] = true;\r\n        whitelist[0x24ED3B0C0a1cb8fEce7E3A25A34e86613234dD04] = true;\r\n        whitelist[0x3Bd8a3C2d90e1709259Cd271A8e8d2C5caDeBE82] = true;\r\n        whitelist[0x46B8FfC41F26cd896E033942cAF999b78d10c277] = true;\r\n        whitelist[0x25D1cbf24e549CcaD81c2A5cab9e62c6be208920] = true;\r\n        whitelist[0xE139962e5d7B07A9378F159A4A1b7CABe9Df1d6E] = true;\r\n        whitelist[0x03b76647464CF57255f20289D2501417A5eC457E] = true;\r\n        whitelist[0x338bfa2c23Cc5Daf45208A2f23431d91e668515a] = true;\r\n        whitelist[0x67C0fc4B0490ab7E76C08C2bbD30fAc0059bbc7A] = true;\r\n        whitelist[0xE37689CFf507cB199f55eaA23338181C9a63a748] = true;\r\n        whitelist[0xA37F6C27c603619B729adCe9849f2C4FcF79AD83] = true;\r\n        whitelist[0xFD0d152BF613956B6929A7156fE75eEE2A20C3B6] = true;\r\n        whitelist[0x25DbEB6565778B8570f8936165370348f16E7E88] = true;\r\n        whitelist[0x467e20bD74Bbba59dc6C88B3A975fBC381FA2441] = true;\r\n        whitelist[0xff4d2D37a08f1B0d40dda7eAd1D88Aa5ceEF7C66] = true;\r\n        whitelist[0x4010a534B8Ab01945DEc322F4eecd6A4B4785277] = true;\r\n        whitelist[0xD9D4e0F4C81d13EDF3eE8ceC6Ff026a06D418301] = true;\r\n        whitelist[0xcbBC5D06BE48B9B1D90A8E787B4d42bc4A3B74a8] = true;\r\n        whitelist[0x908A52B2a18C7Adf135A861DE80b4952fF03BEEa] = true;\r\n        whitelist[0x0B431F91c54C303AE29E4023A70da6caDEB0D387] = true;\r\n        whitelist[0xC2ea0584A6B5dF8Ad2C488A208B2f1ac25f4019f] = true;\r\n        whitelist[0xf2306b7547b4E7C3d2B4F0864900414A91d5571f] = true;\r\n        whitelist[0x387EAf27c966bB6dEE6A0E8bA45ba0854d01Ee32] = true;\r\n        whitelist[0x291F8D2F3D94ef8731807883B452A92627714d03] = true;\r\n        whitelist[0x74f90fC63084F5AC7546d105397034ac8A4a51F7] = true;\r\n        whitelist[0x6B511F9919E0239d345E2F0f2688E11d168829D1] = true;\r\n        whitelist[0x700bdccb187238bC4263C233bCBE48c3BcF7d32d] = true;\r\n        whitelist[0xb06336f40e1dE49c9c2f35C5742d1923cB4A9E7D] = true;\r\n        whitelist[0xc6fE56E09F826245304BA8210BAEcAC306e67357] = true;\r\n        whitelist[0xA538311df7DC52bBE861F6e3EfDD749730503Cae] = true;\r\n        whitelist[0x42147EE918238fdfF257a15fA758944D6b870B6A] = true;\r\n        whitelist[0x5b049c3Bef543a181A720DcC6fEbc9afdab5D377] = true;\r\n        whitelist[0xBacEcAc3EA45372e6a83C2B97032211e4758368a] = true;\r\n        whitelist[0x9Fe686D6fAcBC5AE4433308B26e7c810ac43F3D4] = true;\r\n        whitelist[0x85b25DF7991AfF597DCf936DdC66A41100A1DF38] = true;\r\n        whitelist[0x51Bc4B6db5D958d066d3c6C11C4396e881961bca] = true;\r\n        whitelist[0x5CbAfbE163BD766B5EEd26D81ECea0f41f232847] = true;\r\n        whitelist[0x8e76Bcf139d65f9c160E8Ef0ED321d7049A3ee83] = true;\r\n        whitelist[0xB80216042142Ef55F6d61FD5ae0F23B25D150178] = true;\r\n        whitelist[0x8760E565273B47195F76A22455Ce0B68A11aF5B5] = true;\r\n        whitelist[0x164D39D1DB5Ec3b4472a18F0E588F0C1F0D98d9E] = true;\r\n        whitelist[0x404C4f2C30B70135964397eA658C26b6997bdeD5] = true;\r\n        whitelist[0xE2BF97AdEcabf5bbd9C184b287Cd0a0490c259Be] = true;\r\n        whitelist[0x7dD1a007Ff481FEa56F9F5B5832ec9f40c01172e] = true;\r\n        whitelist[0xca1B8F95046506fdF2560880b2beB2950CC9aED6] = true;\r\n        whitelist[0x75A4c4730e354e1097bf2f8D447Ae7751c20E480] = true;\r\n        whitelist[0x3B1d9AF9fBe4DE15E4C320304204c623E6726358] = true;\r\n        whitelist[0xbcf7564427Bfa1C2f305eD2352E3987f19b46608] = true;\r\n        whitelist[0xebeA475d9453122fA1E87E79883893A20A12f3f9] = true;\r\n        whitelist[0x2E2Aa9909361F5e1c9f2f8a85AFF7ee8194eCCe9] = true;\r\n        whitelist[0x399b282c17F8ed9F542C2376917947d6B79E2Cc6] = true;\r\n        whitelist[0xd63a8b9699fbe0b0B70C443CDA57CD667A77D1b2] = true;\r\n        whitelist[0x76AaD6e2165a469feA3A02F545D9f6e5E6AAd2d5] = true;\r\n        whitelist[0x8b09C4Fd7f3beAFc91bbcA198313CFD0D1a5ecbB] = true;\r\n        whitelist[0xDb704Df06A7fA515fe77B30595451346198bC44C] = true;\r\n        whitelist[0x576fe99A39fEC41fC644f193C8F539FaEb038241] = true;\r\n        whitelist[0x0869fD08Ff42889e11E09A0c2B46Ce3d163a25D5] = true;\r\n        whitelist[0xcD5d0593c17c40BD2BB857B2dc9F6A3771862D8d] = true;\r\n        whitelist[0x7C1ec41944A9591f48e44A9d4e8eDC43B7D58948] = true;\r\n        whitelist[0x04b936745C02E8Cb75cC68b93B4fb99b38939d5D] = true;\r\n        whitelist[0x4670D6b9AEf53615382934A481B133B70a3B631a] = true;\r\n        whitelist[0xD87dB443b01Cb8e453c11f9a26F48CD51c19842a] = true;\r\n        whitelist[0xe1b6514df22AfCd09DE787FdA75d0834bF9c8DC1] = true;\r\n        whitelist[0xA3fE401D499f306C49b54ee89b4160f4832Cbe6e] = true;\r\n        whitelist[0x98b7C27df27C857536C61aDEa0D3C9C7E327432d] = true;\r\n        whitelist[0xAFdfF5466Db276b274BAE48336D1B6f70F644065] = true;\r\n        whitelist[0x80b3bdAD4bA4D26aAe097f742A97cd016aB46F86] = true;\r\n        whitelist[0x72a5Ba942a401C4BD08a32963B75f971292213a8] = true;\r\n        whitelist[0xe2438Db969db43314040e51F95D425c1fe1cc433] = true;\r\n        whitelist[0x7f59fbfe6C2cBA95173d69B4B0B00E09c76501FC] = true;\r\n        whitelist[0xd29979e7a3560C450Dd94333215D42898e1BbA72] = true;\r\n        whitelist[0xdFA2ba1473d66e06b57278A058e411364caB1449] = true;\r\n        whitelist[0xF4F98B4a1B0a0F46bA8856939bAC69A40b1F5f56] = true;\r\n    }\r\n    \r\n    function testMint() public onlyOwner {\r\n        mine.mint(address(this), 1);\r\n    }\r\n    \r\n    function isInWhitelist(address account) public view returns(bool) {\r\n        return whitelist[account];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SpaceMineToken\",\"name\":\"_mine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mineAmount\",\"type\":\"uint256\"}],\"name\":\"BuyMineSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPGenerationCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLeftoverMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeToNotOnlyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpresaleLastSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyDrain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidityMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mine\",\"outputs\":[{\"internalType\":\"contract SpaceMineToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLastSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setMinePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPresaleContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SpaceMinePresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008356806910ee22cfc0c45d2f5fc32c18016d8423","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e5aa4b937acba1a512ad6963c14c20c4af69b789ad6226b95ed075476222c119"}]}