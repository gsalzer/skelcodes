{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CTokenInterface {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface OrcaleComp {\r\n    function getUnderlyingPrice(address) external view returns (uint);\r\n}\r\n\r\ninterface ComptrollerLensInterface {\r\n    function oracle() external view returns (address);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Compound Comptroller\r\n     */\r\n    function getComptroller() public pure returns (ComptrollerLensInterface) {\r\n        return ComptrollerLensInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Open Feed Oracle Address\r\n     */\r\n    function getOracleAddress() public view returns (address) {\r\n        return getComptroller().oracle();\r\n    }\r\n\r\n     /**\r\n     * @dev get ETH Address\r\n     */\r\n    function getCETHAddress() public pure returns (address) {\r\n        return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n\r\n    struct CompData {\r\n        uint balanceOfUser;\r\n        uint borrowBalanceStoredUser;\r\n    }\r\n    struct data {\r\n        address user;\r\n        CompData[] tokensData;\r\n    }\r\n    \r\n     struct datas {\r\n        CompData[] tokensData;\r\n    }\r\n\r\n    struct CompoundTokensData {\r\n        uint tokenPriceInEth;\r\n        uint tokenPriceInUsd;\r\n        uint exchangeRateStored;\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCompoundPowerResolver is Helpers {\r\n    function getPriceInEth(CTokenInterface cToken) public view returns (uint priceInETH, uint priceInUSD) {\r\n        uint decimals = getCETHAddress() == address(cToken) ? 18 : TokenInterface(cToken.underlying()).decimals();\r\n        uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(address(cToken));\r\n        uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());\r\n        priceInUSD = price / 10 ** (18 - decimals);\r\n        priceInETH = wdiv(priceInUSD, ethPrice);\r\n    }\r\n\r\n    function getCompoundTokensData(address[] memory cAddress) public  view returns (CompoundTokensData[] memory) {\r\n        CompoundTokensData[] memory compoundTokensData = new CompoundTokensData[](cAddress.length);\r\n         for (uint i = 0; i < cAddress.length; i++) {\r\n            (uint priceInETH, uint priceInUSD) = getPriceInEth(CTokenInterface(cAddress[i]));\r\n            CTokenInterface cToken = CTokenInterface(cAddress[i]);\r\n            compoundTokensData[i] = CompoundTokensData(\r\n                priceInETH,\r\n                priceInUSD,\r\n                cToken.exchangeRateStored()\r\n            );\r\n        }\r\n\r\n        return compoundTokensData;\r\n    }\r\n\r\n    function getCompoundData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {\r\n        CompData[] memory tokensData = new CompData[](cAddress.length);\r\n        for (uint i = 0; i < cAddress.length; i++) {\r\n            CTokenInterface cToken = CTokenInterface(cAddress[i]);\r\n            tokensData[i] = CompData(\r\n                cToken.balanceOf(owner),\r\n                cToken.borrowBalanceStored(owner)\r\n            );\r\n        }\r\n\r\n        return tokensData;\r\n    }\r\n    \r\n    function getCompoundDataByToken(address[] memory owners, address cAddress) public view returns (CompData[] memory) {\r\n        CompData[] memory tokensData = new CompData[](owners.length);\r\n        CTokenInterface cToken = CTokenInterface(cAddress);\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            tokensData[i] = CompData(\r\n                cToken.balanceOf(owners[i]),\r\n                cToken.borrowBalanceStored(owners[i])\r\n            );\r\n        }\r\n\r\n        return tokensData;\r\n    }\r\n\r\n    function getPositionByAddress(\r\n        address[] memory owners,\r\n        address[] memory cAddress\r\n    )\r\n        public\r\n        view\r\n        returns (datas[] memory)\r\n    {\r\n        datas[] memory _data = new datas[](cAddress.length);\r\n        for (uint i = 0; i < cAddress.length; i++) {\r\n            _data[i] = datas(\r\n                getCompoundDataByToken(owners, cAddress[i])\r\n            );\r\n        }\r\n        return _data;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getCETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getCompoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"cAddress\",\"type\":\"address\"}],\"name\":\"getCompoundDataByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getCompoundTokensData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPriceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateStored\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompoundTokensData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getPositionByAddress\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"tokensData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.datas[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCompoundPowerResolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b0eee41669926af2e55cc60e7193774634421f4b84313380c75ac79f96b88fd8"}]}