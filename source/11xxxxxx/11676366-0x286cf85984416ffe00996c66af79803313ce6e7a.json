{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.0;\n\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// \ninterface IHornLockVault {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function claimableBalanceOf(address account) external view returns (uint256);\r\n    function claimableHornOf(address account) external view returns (uint256);\r\n    function deposit(uint256 amount, address referralAddr) external payable returns(bool);\r\n    function withdraw() external payable returns(bool);\r\n    function burn(uint256 amount) external payable returns(bool);\r\n    function reserve() external view returns (uint256);\r\n    function lockedAssets() external view returns (uint256);\r\n    \r\n    event Deposit(address indexed from, uint256 value, uint256 fee, uint256 fromDate, uint256 toDate);\r\n    event Withdraw(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value, uint256 weightAdded);\r\n    event DepositReward(address indexed to, uint256 reward, uint256 totalFee, uint256 senderBalance, uint256 contractBalance, uint256 weightPercent);\r\n    event ReferralReward(address indexed from, address indexed to, uint256 amount, uint256 reward, uint256 baseFee);\r\n    event NewPool(uint256 index, uint256 timestamp);\r\n    event Claim(address indexed from, uint256 amount);\r\n    event Log(string text);\r\n    event LogUINT(uint256 value);\r\n    event LogUINTText(string key, uint256 value);\r\n    event LogAddress(address value);\r\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IExtendedERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \ncontract HornLockVaultV2 is IHornLockVault {\r\n    using SafeMath for uint256;\r\n\r\n    struct LockedAsset {\r\n        address account;\r\n        uint256 amount;\r\n        uint256 burnedHorn;\r\n        uint256 fees;\r\n        uint256 fromDate;\r\n        uint256 toDate;\r\n        uint256 alreadyClaimedHorn;\r\n        bool isBurnAsset;\r\n        uint256 depositIndex;\r\n        uint256 enterPoolFees;\r\n    }\r\n\r\n    struct RewardFee {\r\n        uint256 totalAssetAmount;\r\n        uint256 totalFeesAmount;\r\n        uint256 amount;\r\n        uint256 depositIndex;\r\n    }\r\n\r\n    mapping(address => LockedAsset[]) private _lockedAssetsByAddress;\r\n    mapping(uint256 => uint256) private _feesAtIndex;\r\n    RewardFee private _poolFees;\r\n\r\n    bool public _isActive = true;\r\n    address public _createdFrom;\r\n    address public _owner;\r\n    string public _vaultName;\r\n    uint128 public _fee;\r\n    uint128 public _depositRewardFee;\r\n    uint256 public _hornPerDay;\r\n    uint256 public _feesVault;\r\n    uint256 public _minLockDays;\r\n    uint256 public _weightPerHorn;\r\n    uint256 private _depositIndex = 0;\r\n    bool public _isPaused = false;\r\n    bool public _hornRewardDisabled = false;\r\n    IExtendedERC20 private _token;\r\n    address public _tokenAddr;\r\n    IExtendedERC20 private _hornToken;\r\n    address public _hornTokenAddr;\r\n\r\n    constructor(\r\n        address owner,\r\n        address lockedTokenAddr,\r\n        address hornTokenAddr,\r\n        uint128 fee,\r\n        uint128 depositRewardFee,\r\n        uint256 hornPerDay,\r\n        uint256 minLockDays,\r\n        uint256 weightPerHorn\r\n    ) {\r\n        _createdFrom = msg.sender;\r\n        _owner = owner;\r\n        _tokenAddr = lockedTokenAddr;\r\n        _token = IExtendedERC20(lockedTokenAddr);\r\n        _hornTokenAddr = hornTokenAddr;\r\n        _hornToken = IExtendedERC20(hornTokenAddr);\r\n        _vaultName = _token.symbol();\r\n        _fee = fee;\r\n        _depositRewardFee = depositRewardFee;\r\n        _hornPerDay = hornPerDay;\r\n        _minLockDays = minLockDays;\r\n        _weightPerHorn = weightPerHorn;\r\n\r\n        _poolFees = RewardFee({\r\n            amount: 0,\r\n            totalFeesAmount: 0,\r\n            totalAssetAmount: 0,\r\n            depositIndex: _depositIndex\r\n        });\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 totalBalance = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (_lockedAssetsByAddress[account][i].isBurnAsset || _lockedAssetsByAddress[account][i].amount <= 0) continue;\r\n            totalBalance = totalBalance.add(\r\n                _lockedAssetsByAddress[account][i].amount\r\n            );\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function claimableBalanceOf(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 totalBalance = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (_lockedAssetsByAddress[account][i].isBurnAsset) continue;\r\n            if (_lockedAssetsByAddress[account][i].toDate <= block.timestamp) {\r\n                totalBalance = totalBalance.add(\r\n                    _lockedAssetsByAddress[account][i].amount\r\n                );\r\n            }\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function claimableHornOf(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 totalBalance = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (\r\n                _lockedAssetsByAddress[account][i].amount > 0 &&\r\n                !_lockedAssetsByAddress[account][i].isBurnAsset\r\n            ) {\r\n                LockedAsset memory asset = _lockedAssetsByAddress[account][i];\r\n                uint256 period =\r\n                    block.timestamp.sub(asset.fromDate).div(60).div(60).div(24);\r\n                if (period <= 0) continue;\r\n                uint256 reward =\r\n                    _hornPerDay.mul(asset.amount.mul(100)).div(10000).mul(\r\n                        period\r\n                    );\r\n                reward = reward.div(100).sub(asset.alreadyClaimedHorn);\r\n                totalBalance = totalBalance.add(reward);\r\n            }\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function reserve() public view override returns (uint256) {\r\n        return _hornToken.balanceOf(address(this));\r\n    }\r\n\r\n    function lockedAssets() public view override returns (uint256) {\r\n        uint256 totalBalance = _token.balanceOf(address(this)).sub(_feesVault);\r\n        return totalBalance;\r\n    }\r\n\r\n    function getBurnedHornAmount(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalBalance = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (\r\n                account == _lockedAssetsByAddress[account][i].account &&\r\n                _lockedAssetsByAddress[account][i].isBurnAsset\r\n            ) {\r\n                totalBalance = totalBalance.add(\r\n                    _lockedAssetsByAddress[account][i].burnedHorn\r\n                );\r\n            }\r\n        }\r\n        return totalBalance;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _vaultName;\r\n    }\r\n\r\n    function setPauseState(bool newState) external payable returns (bool) {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _createdFrom,\r\n            \"Only the owner can do this\"\r\n        );\r\n        _isPaused = newState;\r\n        return true;\r\n    }\r\n\r\n    function setActiveState(bool newState) external payable returns (bool) {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _createdFrom,\r\n            \"Only the owner can do this\"\r\n        );\r\n        _isActive = newState;\r\n        return true;\r\n    }\r\n\r\n    function setHornRewardDisabledState(bool newState)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _createdFrom,\r\n            \"Only the owner can do this\"\r\n        );\r\n        _hornRewardDisabled = newState;\r\n        return true;\r\n    }\r\n\r\n    function deposit(uint256 amount, address referralAddr)\r\n        external\r\n        payable\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(amount > 0, \"Invalid amount\");\r\n        require(!_isPaused, \"Deposit are paused for now\");\r\n        _deposit(msg.sender, amount, referralAddr);\r\n        return true;\r\n    }\r\n\r\n    function balanceIndexes(address account, bool filterBurned)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (\r\n                _lockedAssetsByAddress[account][i].amount > 0 &&\r\n                _lockedAssetsByAddress[account][i].isBurnAsset == filterBurned\r\n            ) {\r\n                count++;\r\n            }\r\n        }\r\n        uint256[] memory indexes = new uint256[](count);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (\r\n                _lockedAssetsByAddress[account][i].amount > 0 &&\r\n                _lockedAssetsByAddress[account][i].isBurnAsset == filterBurned\r\n            ) {\r\n                indexes[index] = i;\r\n                index++;\r\n            }\r\n        }\r\n        return indexes;\r\n    }\r\n\r\n    function getLockedAssetsCountByAccount(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[account].length; i++) {\r\n            if (\r\n                _lockedAssetsByAddress[account][i].account == account &&\r\n                _lockedAssetsByAddress[account][i].amount > 0\r\n            ) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function claimableFees(address account, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalFees = 0;\r\n        LockedAsset memory asset = _lockedAssetsByAddress[account][index];\r\n        if (\r\n            _poolFees.amount <= 0 ||\r\n            asset.fees > _poolFees.amount ||\r\n            asset.account != account ||\r\n            asset.amount <= 0\r\n        ) return 0;\r\n\r\n        uint256 contractBalance = _poolFees.totalAssetAmount;\r\n        if (asset.fees > _poolFees.amount) return 0;\r\n        uint256 feesSinceDeposit =\r\n            _feesAtIndex[_depositIndex].sub(_feesAtIndex[asset.depositIndex]); // gas saver\r\n        uint256 reducedEnterPoolFees = asset.enterPoolFees;\r\n        if (feesSinceDeposit > reducedEnterPoolFees) {\r\n            reducedEnterPoolFees = 0;\r\n        } else {\r\n            reducedEnterPoolFees = reducedEnterPoolFees.sub(feesSinceDeposit);\r\n        }\r\n        \r\n        uint256 fees = 0;\r\n        if(_poolFees.amount >= reducedEnterPoolFees) {\r\n            fees = _poolFees.amount.sub(reducedEnterPoolFees);\r\n        }\r\n        else {\r\n            fees = _poolFees.amount;\r\n        }\r\n\r\n\r\n        uint256 senderBalance = asset.amount;\r\n        uint256 weightPercent =\r\n            senderBalance.mul(10000).div(contractBalance).mul(100);\r\n        uint256 reward = fees.mul(weightPercent).div(1000000);\r\n        totalFees = totalFees.add(reward);\r\n        return totalFees;\r\n    }\r\n\r\n    function weightInPool(address account, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        LockedAsset memory asset = _lockedAssetsByAddress[account][index];\r\n        uint256 contractBalance = _poolFees.totalAssetAmount;\r\n        uint256 senderBalance = asset.amount;\r\n        uint256 weightPercent =\r\n            senderBalance.mul(10000).div(contractBalance).mul(100);\r\n        return weightPercent;\r\n    }\r\n\r\n    function _deposit(\r\n        address sender,\r\n        uint256 amount,\r\n        address referralAddr\r\n    ) internal {\r\n        require(\r\n            _token.balanceOf(sender) >= amount,\r\n            \"Transfer amount exceeds balance\"\r\n        );\r\n        require(\r\n            _token.transferFrom(msg.sender, address(this), amount) == true,\r\n            \"Error transferFrom on the contract\"\r\n        );\r\n        uint256 fee = (amount * _fee) / 10000;\r\n        if (referralAddr != address(0) && referralAddr != msg.sender) {\r\n            uint256 referralFee = (fee * 5000) / 10000;\r\n            uint256 baseFee = fee;\r\n            fee = fee.sub(referralFee);\r\n            require(\r\n                _token.transfer(referralAddr, referralFee) == true,\r\n                \"Error transferFrom on the contract for referral\"\r\n            );\r\n            emit ReferralReward(\r\n                sender,\r\n                referralAddr,\r\n                amount,\r\n                referralFee,\r\n                baseFee\r\n            );\r\n        }\r\n        uint256 depositFee = (amount * _depositRewardFee) / 10000;\r\n        uint256 amountSubFee = amount.sub(fee).sub(depositFee);\r\n\r\n        // Add fees to withdrawable amount by the owner\r\n        _feesVault = _feesVault.add(fee);\r\n        if (_depositIndex == 0) {\r\n            // If is the first deposit all fees goes the vault\r\n            _feesVault = _feesVault.add(depositFee);\r\n        } else {\r\n            _poolFees.totalFeesAmount = _poolFees.totalFeesAmount.add(\r\n                depositFee\r\n            );\r\n            _poolFees.amount = _poolFees.amount.add(depositFee);\r\n        }\r\n        _poolFees.totalAssetAmount = _poolFees.totalAssetAmount.add(\r\n            amountSubFee\r\n        );\r\n\r\n        _depositIndex = _depositIndex.add(1);\r\n        _poolFees.depositIndex = _depositIndex;\r\n        _feesAtIndex[_depositIndex] = _poolFees.totalFeesAmount;\r\n\r\n        _lockedAssetsByAddress[sender].push(\r\n            LockedAsset({\r\n                enterPoolFees: _poolFees.amount,\r\n                account: sender,\r\n                fees: depositFee,\r\n                amount: amountSubFee,\r\n                burnedHorn: 0,\r\n                fromDate: block.timestamp,\r\n                toDate: block.timestamp.add(_minLockDays * 1 days),\r\n                alreadyClaimedHorn: 0,\r\n                isBurnAsset: false,\r\n                depositIndex: _depositIndex\r\n            })\r\n        );\r\n\r\n        emit Deposit(\r\n            sender,\r\n            amount,\r\n            fee.add(depositFee),\r\n            block.timestamp,\r\n            block.timestamp.add(_minLockDays * 1 days)\r\n        );\r\n    }\r\n\r\n    function withdraw() external payable override returns (bool) {\r\n        require(!_isPaused, \"Withdraw are paused for now\");\r\n        _withdraw(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _withdraw(address sender) internal {\r\n        uint256 totalWithdraw = 0;\r\n        uint256 totalRemovedAssetsCount = 0;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[sender].length; i++) {\r\n            LockedAsset storage asset = _lockedAssetsByAddress[sender][i];\r\n            if (asset.toDate <= block.timestamp && asset.amount > 0) {\r\n                totalRemovedAssetsCount = totalRemovedAssetsCount + 1;\r\n                uint256 hornreward = 0;\r\n                if (!asset.isBurnAsset) {\r\n                    hornreward = _rewardWithdrawalHorn(\r\n                        sender,\r\n                        asset.amount,\r\n                        asset.fromDate,\r\n                        block.timestamp,\r\n                        asset.alreadyClaimedHorn\r\n                    );\r\n                }\r\n                uint256 reward = _claimFeesForAsset(asset, asset.amount);\r\n\r\n                if (!asset.isBurnAsset) {\r\n                    totalWithdraw = totalWithdraw.add(asset.amount).add(reward);\r\n                } else {\r\n                    totalWithdraw = totalWithdraw.add(reward);\r\n                }\r\n                asset.alreadyClaimedHorn = asset.alreadyClaimedHorn.add(\r\n                    hornreward\r\n                );\r\n            }\r\n        }\r\n\r\n        // Reset amount\r\n        LockedAsset[] storage newLockedAssetArray;\r\n        for (uint256 i = 0; i < _lockedAssetsByAddress[sender].length; i++) {\r\n            LockedAsset storage asset = _lockedAssetsByAddress[sender][i];\r\n            if (asset.toDate <= block.timestamp && asset.amount > 0) {\r\n                asset.amount = 0;\r\n                asset.burnedHorn = 0;\r\n            } else {\r\n                newLockedAssetArray.push(_lockedAssetsByAddress[sender][i]);\r\n            }\r\n        }\r\n        _lockedAssetsByAddress[sender] = newLockedAssetArray;\r\n\r\n        if (totalWithdraw <= 0) return;\r\n        require(\r\n            _token.transfer(sender, totalWithdraw) == true,\r\n            \"Error transferFrom on the contract\"\r\n        );\r\n        emit Withdraw(sender, totalWithdraw);\r\n    }\r\n\r\n    function burn(uint256 amount) external payable override returns (bool) {\r\n        require(!_isPaused, \"Burn are paused for now\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address sender, uint256 burnAmount) internal {\r\n        require(\r\n            _hornToken.balanceOf(sender) >= burnAmount,\r\n            \"Transfer amount exceeds balance\"\r\n        );\r\n        _hornToken.burn(sender, burnAmount);\r\n\r\n        _depositIndex = _depositIndex.add(1);\r\n        _lockedAssetsByAddress[sender].push(\r\n            LockedAsset({\r\n                enterPoolFees: _poolFees.amount,\r\n                account: sender,\r\n                fees: 0,\r\n                amount: burnAmount.mul(_weightPerHorn).div(1 ether),\r\n                burnedHorn: burnAmount,\r\n                fromDate: block.timestamp,\r\n                toDate: block.timestamp.add(_minLockDays * 1 days),\r\n                alreadyClaimedHorn: 0,\r\n                isBurnAsset: true,\r\n                depositIndex: _depositIndex\r\n            })\r\n        );\r\n        emit Burn(\r\n            sender,\r\n            burnAmount,\r\n            burnAmount.mul(_weightPerHorn).div(1 ether)\r\n        );\r\n    }\r\n\r\n    function claimHorn() public payable {\r\n        require(!_hornRewardDisabled, \"Claim are disabled for now\");\r\n        uint256 totalClaim = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i < _lockedAssetsByAddress[msg.sender].length;\r\n            i += 1\r\n        ) {\r\n            LockedAsset storage asset = _lockedAssetsByAddress[msg.sender][i];\r\n            if (asset.amount > 0 && !asset.isBurnAsset) {\r\n                uint256 reward =\r\n                    _rewardWithdrawalHorn(\r\n                        msg.sender,\r\n                        asset.amount,\r\n                        asset.fromDate,\r\n                        block.timestamp,\r\n                        asset.alreadyClaimedHorn\r\n                    );\r\n                asset.alreadyClaimedHorn = asset.alreadyClaimedHorn.add(reward);\r\n                totalClaim = totalClaim.add(reward);\r\n            }\r\n        }\r\n        if (totalClaim <= 0) return;\r\n        emit Claim(msg.sender, totalClaim);\r\n    }\r\n\r\n    function _rewardWithdrawalHorn(\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 fromDate,\r\n        uint256 toDate,\r\n        uint256 alreadyClaimed\r\n    ) internal returns (uint256) {\r\n        if (_hornRewardDisabled) return 0;\r\n\r\n        uint256 period = toDate.sub(fromDate).div(60).div(60).div(24);\r\n        if (period <= 0) return 0;\r\n        uint256 reward =\r\n            _hornPerDay.mul(amount.mul(100)).div(10000).mul(period);\r\n        reward = reward.div(100).sub(alreadyClaimed);\r\n        if (reward <= 0) return 0;\r\n        _hornToken.mint(address(this), reward);\r\n        require(\r\n            _hornToken.transfer(receiver, reward) == true,\r\n            \"Error transferFrom for reward on the contract\"\r\n        );\r\n        return reward;\r\n    }\r\n\r\n    function _claimFeesForAsset(\r\n        LockedAsset storage asset,\r\n        uint256 withdrawAmount\r\n    ) internal returns (uint256) {\r\n        if (_poolFees.amount <= 0 || asset.fees > _poolFees.amount) return 0;\r\n        uint256 contractBalance = _poolFees.totalAssetAmount;\r\n        uint256 feesSinceDeposit =\r\n            _feesAtIndex[_depositIndex].sub(_feesAtIndex[asset.depositIndex]); // gas saver\r\n        uint256 reducedEnterPoolFees = asset.enterPoolFees;\r\n        if (feesSinceDeposit > reducedEnterPoolFees) {\r\n            reducedEnterPoolFees = 0;\r\n        } else {\r\n            reducedEnterPoolFees = reducedEnterPoolFees.sub(feesSinceDeposit);\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if(_poolFees.amount >= reducedEnterPoolFees) {\r\n            fees = _poolFees.amount.sub(reducedEnterPoolFees);\r\n        }\r\n        else {\r\n            fees = _poolFees.amount;\r\n        }\r\n\r\n        uint256 senderBalance = withdrawAmount;\r\n        uint256 reward = (fees * (senderBalance.mul(10000).div(contractBalance).mul(100))) / 1000000;\r\n\r\n        _poolFees.amount = _poolFees.amount.sub(reward);\r\n        _poolFees.totalAssetAmount = _poolFees.totalAssetAmount.sub(\r\n            withdrawAmount\r\n        );\r\n        return reward;\r\n    }\r\n\r\n    function withdrawFees() public payable {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _createdFrom,\r\n            \"Only the owner can do this\"\r\n        );\r\n        require(\r\n            _token.transfer(msg.sender, _feesVault) == true,\r\n            \"Error transferFrom on the contract\"\r\n        );\r\n        _feesVault = 0;\r\n    }\r\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// \ncontract HornToken is ERC20, AccessControl {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\r\n\r\n    uint256 private _initialSupply = 5000000 * 10 ** 18;\r\n    uint256 private _totalSupply = 0;\r\n    uint256 private _alreadyMinted = 0;\r\n    uint256 private _maxMintAmount = 5000000 * 10 ** 18;\r\n    uint256 private _maxSupply = 10000000 * 10 ** 18;\r\n\r\n    constructor() ERC20(\"Horn\", \"HORN\") {\r\n        _totalSupply = _initialSupply;\r\n        _mint(msg.sender, _initialSupply);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(MINTER_ROLE, msg.sender);\r\n        _setupRole(BURNER_ROLE, msg.sender);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        require(hasRole(MINTER_ROLE, msg.sender), \"Caller is not a minter\");\r\n        require(_totalSupply + amount <= _maxSupply, \"Can't mint more tokens\");\r\n        require(_alreadyMinted + amount <= _maxMintAmount, \"Can't mint more tokens\");\r\n        _totalSupply += amount;\r\n        _alreadyMinted += amount;\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address from, uint256 amount) public {\r\n        require(hasRole(BURNER_ROLE, msg.sender), \"Caller is not a burner\");\r\n        _totalSupply -= amount;\r\n        _burn(from, amount);\r\n    }\r\n}\n\n// \ncontract UnifiedHornVault {\r\n    address private _owner;\r\n    address private _hornTokenAddr;\r\n    HornToken private _hornToken;\r\n\r\n    address[] public vaultIndexes;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only the owner can do this action\");\r\n        _;\r\n    }\r\n\r\n    constructor(address hornTokenAddr) {\r\n        _owner = msg.sender;\r\n        _hornTokenAddr = hornTokenAddr;\r\n        _hornToken = HornToken(hornTokenAddr);\r\n    }\r\n\r\n    function fetchIndexes() public view returns (address[] memory) {\r\n        address[] memory result = new address[](vaultIndexes.length);\r\n        for (uint256 i = 0; i < vaultIndexes.length; i++) {\r\n            result[i] = vaultIndexes[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function addPool(\r\n        address lockedTokenAddr,\r\n        address hornTokenAddr,\r\n        uint128 fee,\r\n        uint128 depositRewardFee,\r\n        uint256 hornPerDay,\r\n        uint256 minLockDays,\r\n        uint256 weightPerHorn\r\n    ) public payable onlyOwner returns (address) {\r\n        // Create the vault\r\n        HornLockVaultV2 vault =\r\n            new HornLockVaultV2(\r\n                msg.sender,\r\n                lockedTokenAddr,\r\n                hornTokenAddr,\r\n                fee,\r\n                depositRewardFee,\r\n                hornPerDay,\r\n                minLockDays,\r\n                weightPerHorn\r\n            );\r\n        _hornToken.grantRole(_hornToken.MINTER_ROLE(), address(vault));\r\n        _hornToken.grantRole(_hornToken.BURNER_ROLE(), address(vault));\r\n        vault.setActiveState(true);\r\n\r\n        // add the index to the array\r\n        vaultIndexes.push(address(vault));\r\n\r\n        return address(vault);\r\n    }\r\n\r\n    function addExistingPool(address addr)\r\n        public\r\n        payable\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        vaultIndexes.push(addr);\r\n        return addr;\r\n    }\r\n\r\n    function removePool(address addr) public payable onlyOwner {\r\n        HornLockVaultV2 vault = HornLockVaultV2(addr);\r\n        vault.setActiveState(false);\r\n\r\n        address[] memory newArray = new address[](vaultIndexes.length - 1);\r\n        uint256 new_index = 0;\r\n        for (uint256 i = 0; i < vaultIndexes.length; i++) {\r\n            if (vaultIndexes[i] != addr) {\r\n                newArray[new_index++] = vaultIndexes[i];\r\n            }\r\n        }\r\n        vaultIndexes = newArray;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hornTokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addExistingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockedTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hornTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"depositRewardFee\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"hornPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightPerHorn\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchIndexes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UnifiedHornVault","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"00000000000000000000000093621222519067c3619dc3e604a3b6ca271a0f67","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}