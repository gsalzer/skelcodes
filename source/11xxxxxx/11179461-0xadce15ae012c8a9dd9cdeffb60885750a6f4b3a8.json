{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.4.25;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) pure internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b)pure internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b)pure internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token is SafeMath {\r\n     // Functions:\r\n     /// @return total amount of tokens\r\n     function totalSupply()public  constant returns (uint256 supply);\r\n\r\n     /// @param _owner The address from which the balance will be retrieved\r\n     /// @return The balance\r\n     function balanceOf(address _owner)public constant returns (uint256 balance);\r\n\r\n     /// @notice send `_value` token to `_to` from `msg.sender`\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     function transfer(address _to, uint256 _value)public returns(bool);\r\n\r\n     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     /// @param _from The address of the sender\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     /// @return Whether the transfer was successful or not\r\n     function transferFrom(address _from, address _to, uint256 _value)public returns(bool);\r\n\r\n     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @param _value The amount of wei to be approved for transfer\r\n     /// @return Whether the approval was successful or not\r\n     function approve(address _spender, uint256 _value)public returns (bool success);\r\n\r\n     /// @param _owner The address of the account owning tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @return Amount of remaining tokens allowed to spent\r\n     function allowance(address _owner, address _spender)public constant returns (uint256 remaining);\r\n\r\n     // Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StdToken is Token {\r\n     // Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint public supply = 0;\r\n\r\n     // Functions:\r\n     function transfer(address _to, uint256 _value)public returns(bool) {\r\n         \r\n          require(balances[msg.sender] >= _value,\"INSUFFICIENT BALANCE\");\r\n          require(balances[_to] + _value > balances[_to],\"CANT TRANSFER\");\r\n\r\n          balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n\r\n          emit Transfer(msg.sender, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value)public returns(bool){\r\n          require(balances[_from] >= _value,\"INSUFFICIENT BALANCE\");\r\n          require(allowed[_from][msg.sender] >= _value,\"CANT TRANSFER\");\r\n          require(balances[_to] + _value > balances[_to],\"CANT TRANSFER\");\r\n\r\n          balances[_to] = safeAdd(balances[_to],_value);\r\n          balances[_from] = safeSub(balances[_from],_value);\r\n          allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n\r\n          emit Transfer(_from, _to, _value);\r\n          return true;\r\n     }\r\n\r\n     function totalSupply()public constant returns (uint256) {\r\n          return supply;\r\n     }\r\n\r\n     function balanceOf(address _owner)public constant returns (uint256) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value)public returns (bool) {\r\n          // To change the approve amount you first have to reduce the addresses`\r\n          //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n          //  already 0 to mitigate the race condition described here:\r\n          //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n          require((_value == 0) || (allowed[msg.sender][_spender] == 0),\"CANT ALLOW\");\r\n\r\n          allowed[msg.sender][_spender] = _value;\r\n          emit Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender)public constant returns (uint256) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n}\r\n\r\ncontract GrandMarcheToken is StdToken\r\n{\r\n/// Fields:\r\n    string public constant name = \"Grand Marche Token\";\r\n    string public constant symbol = \"GMT\";\r\n    uint public constant decimals = 18;\r\n    \r\n    uint public constant TOTAL_SUPPLY = 1000000 * (1 ether / 1 wei);\r\n    uint public constant AIRDROP_SHARE = 50000 * (1 ether / 1 wei);\r\n\r\n    uint public constant PRESALE_PRICE = 250;  // per 1 Ether\r\n    uint public constant PRESALE_MAX_ETH = 400;\r\n    \r\n    uint public constant PRESALE_TOKEN_SUPPLY_LIMIT = PRESALE_PRICE * PRESALE_MAX_ETH * (1 ether / 1 wei);\r\n\r\n    uint public constant ICO_PRICE = 100;     // per 1 Ether\r\n\r\n    // 1bln - this includes presale tokens\r\n    uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 300000 * (1 ether / 1 wei);\r\n\r\n    enum State{\r\n       Init,\r\n       Paused,\r\n       PresaleRunning,\r\n       PresaleFinished,\r\n       ICORunning,\r\n       ICOFinished\r\n    }\r\n\r\n    State public currentState = State.Init;\r\n    bool public enableTransfers = false;\r\n\r\n    \r\n    address public AI = 0;\r\n    address public airdrop = 0;\r\n    address public privateSales = 0;\r\n    address public teamTokenBonus = 0;\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow = 0;\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager = 0;\r\n    \r\n    uint public CREATE_CONTRACT = 0;\r\n    \r\n    uint public presaleSoldTokens = 0;\r\n    uint public icoSoldTokens = 0;\r\n    uint public totalSoldTokens = 0;\r\n    \r\n    bool public ai_balout = true;\r\n    bool public privateSales_balout = true;\r\n    bool public teamTokenBonus_balout = true;\r\n\r\n/// Modifiers:\r\n    modifier onlyTokenManager()\r\n    {\r\n        require(msg.sender==tokenManager,\"NOT MANAGER\"); \r\n        _; \r\n    }\r\n\r\n    modifier onlyInState(State state)\r\n    {\r\n        require(state==currentState,\"STATE WRONG\"); \r\n        _; \r\n    }\r\n\r\n/// Events:\r\n    event unlock(address indexed owner, uint value);\r\n    event LogBuy(address indexed owner, uint value);\r\n\r\n/// Functions:\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    constructor (address _tokenManager, address _teamTokenBonus, address _escrow, address _AI, address _privateSales, address _airdrop)public\r\n    {   \r\n        \r\n        supply = TOTAL_SUPPLY;\r\n        \r\n        tokenManager = _tokenManager;\r\n        teamTokenBonus = _teamTokenBonus;\r\n        escrow = _escrow;\r\n        AI = _AI;\r\n        privateSales = _privateSales;\r\n        airdrop = _airdrop;\r\n        uint for_airdrop = AIRDROP_SHARE;\r\n        balances[_airdrop] += for_airdrop;\r\n        totalSoldTokens+= for_airdrop;\r\n        \r\n        CREATE_CONTRACT = uint40(block.timestamp);\r\n\r\n        assert(PRESALE_TOKEN_SUPPLY_LIMIT==100000 * (1 ether / 1 wei));\r\n        assert(TOTAL_SOLD_TOKEN_SUPPLY_LIMIT==300000 * (1 ether / 1 wei));\r\n    }\r\n\r\n    function buyTokens() public payable\r\n    {\r\n        require(currentState==State.PresaleRunning || currentState==State.ICORunning,\"CANT BUY\");\r\n\r\n        if(currentState==State.PresaleRunning){\r\n            return buyTokensPresale();\r\n        }else{\r\n            return buyTokensICO();\r\n        }\r\n    }\r\n    \r\n    function userbalance(address _addrress)public view returns(uint256){\r\n        return balances[_addrress];\r\n    }\r\n    \r\n    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)\r\n    {\r\n        // min - 0.5 ETH\r\n        require(msg.value >= 5e17,\"Min 0.5 ETH\");\r\n        uint newTokens = msg.value * PRESALE_PRICE;\r\n\r\n        require(presaleSoldTokens + newTokens <= PRESALE_TOKEN_SUPPLY_LIMIT,\"PRESALE REACHED\");\r\n\r\n        balances[msg.sender] += newTokens;\r\n        presaleSoldTokens+= newTokens;\r\n        totalSoldTokens+= newTokens;\r\n\r\n        emit LogBuy(msg.sender, newTokens);\r\n    }\r\n\r\n    function buyTokensICO() public payable onlyInState(State.ICORunning)\r\n    {\r\n        // min - 0.1 ETH\r\n        require(msg.value >= 1e17,\"Min 0.1 ETH\");\r\n        uint newTokens = msg.value * getPrice();\r\n\r\n        require(totalSoldTokens + newTokens <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT,\"Total Sold Token REACHED\");\r\n\r\n        balances[msg.sender] += newTokens;\r\n        icoSoldTokens+= newTokens;\r\n        totalSoldTokens+= newTokens;\r\n\r\n        emit LogBuy(msg.sender, newTokens);\r\n    }\r\n\r\n    function getPrice()public constant returns(uint)\r\n    {\r\n        if(currentState==State.ICORunning){\r\n             if(icoSoldTokens<(200000 * (1 ether / 1 wei))){\r\n                  return ICO_PRICE;\r\n             }\r\n        }else{\r\n             return PRESALE_PRICE;\r\n        }\r\n    }\r\n\r\n    function setState(State _nextState) public payable onlyTokenManager\r\n    {\r\n        //setState() method call shouldn't be entertained after ICOFinished\r\n        require(currentState != State.ICOFinished,\"ICO FINISHED\");\r\n        \r\n        currentState = _nextState;\r\n        // enable/disable transfers\r\n        //enable transfers only after ICOFinished, disable otherwise\r\n        enableTransfers = (currentState==State.ICOFinished);\r\n    }\r\n\r\n    function withdrawEther() public onlyTokenManager\r\n    {\r\n        if(address(this).balance > 0) \r\n        {\r\n            escrow.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function request_unlock()public payable{\r\n        if(msg.sender==AI){\r\n            require(uint40(block.timestamp) >= CREATE_CONTRACT +( 730 * 86400),\"LOCKED\"); //lock for 24 month\r\n            require(ai_balout==true,\"Token has been sent\");\r\n            uint tokenai = 400000 * (1 ether / 1 wei);\r\n            balances[msg.sender] += tokenai;\r\n            totalSoldTokens+= tokenai;\r\n            ai_balout=false;\r\n            emit unlock(msg.sender,tokenai);\r\n        }else if(msg.sender==teamTokenBonus){\r\n            require(uint40(block.timestamp) >= CREATE_CONTRACT +( 365 * 86400),\"LOCKED\"); //lock for 12 month\r\n            require(teamTokenBonus_balout==true,\"Token has been sent\");\r\n            uint tokenteam = 150000 * (1 ether / 1 wei);\r\n            balances[msg.sender] += tokenteam;\r\n            totalSoldTokens+= tokenteam;\r\n            teamTokenBonus_balout=false;\r\n            emit unlock(msg.sender,tokenteam);\r\n        }else if(msg.sender==privateSales){\r\n            require(uint40(block.timestamp) >= CREATE_CONTRACT +( 182 * 86400),\"LOCKED\"); //lock for 6 month\r\n            require(privateSales_balout==true,\"Token has been sent\");\r\n            uint tokenprivate = 100000 * (1 ether / 1 wei);\r\n            balances[msg.sender] += tokenprivate;\r\n            privateSales_balout=false;\r\n            totalSoldTokens+= tokenprivate;\r\n            emit unlock(msg.sender,tokenprivate);\r\n        }\r\n    }\r\n    \r\n\r\n/// Overrides:\r\n    function transfer(address _to, uint256 _value)public returns(bool){\r\n        require(enableTransfers,\"TRANSFER DISABLED\");\r\n        \r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)public returns(bool){\r\n        require(enableTransfers,\"TRANSFER DISABLED\");\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)public returns (bool) {\r\n        require(enableTransfers,\"TRANSFER DISABLED\");\r\n        return super.approve(_spender,_value);\r\n    }\r\n\r\n/// Setters/getters\r\n    function setTokenManager(address _mgr) public onlyTokenManager\r\n    {\r\n        tokenManager = _mgr;\r\n    }\r\n\r\n    // Default fallback function\r\n    function()public payable \r\n    {\r\n        buyTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"teamTokenBonus_balout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokenBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SOLD_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAX_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"request_unlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ai_balout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokensICO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addrress\",\"type\":\"address\"}],\"name\":\"userbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSales_balout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_teamTokenBonus\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_AI\",\"type\":\"address\"},{\"name\":\"_privateSales\",\"type\":\"address\"},{\"name\":\"_airdrop\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GrandMarcheToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000053e9058a2754bbd311b4fb561928c2ff76207ae50000000000000000000000001da8129989cd7e35b3e7c3a8e750bbeec2c5edfb000000000000000000000000493d2102863fba8839f2a1052b9cb30a59d59c68000000000000000000000000512d818b1a61e6578c0a4771ada65b3fe2cf1e420000000000000000000000006c4fe72943d37c173fb330f161aa5a1ac0565e8a00000000000000000000000083ad09c9593f4744abf40e570b1bcc951bac7131","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://12af00f367f16f046256e0d5c5085ad294a7ccd0bb99518dadf958f13278bb04"}]}