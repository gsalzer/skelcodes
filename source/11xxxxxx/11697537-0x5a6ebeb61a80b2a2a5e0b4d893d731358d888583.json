{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Governance {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /// @notice The duration of voting on a proposal\r\n  uint public constant votingPeriod = 86000;\r\n\r\n  /// @notice Time since submission before the proposal can be executed\r\n  uint public constant executionPeriod = 86000 * 2;\r\n\r\n  /// @notice The required minimum number of votes in support of a proposal for it to succeed\r\n  uint public constant quorumVotes = 5000e18;\r\n\r\n  /// @notice The minimum number of votes required for an account to create a proposal\r\n  uint public constant proposalThreshold = 100e18;\r\n\r\n  IERC20 public votingToken;\r\n\r\n  /// @notice The total number of proposals\r\n  uint public proposalCount;\r\n\r\n  /// @notice The record of all proposals ever proposed\r\n  mapping (uint256 => Proposal) public proposals;\r\n\r\n  /// @notice The time until which tokens used for voting will be locked\r\n  mapping (address => uint) public voteLock;\r\n\r\n  /// @notice Keeps track of locked tokens per address\r\n  mapping(address => uint) public balanceOf;\r\n\r\n  struct Proposal {\r\n    /// @notice Unique id for looking up a proposal\r\n    uint id;\r\n\r\n    /// @notice Creator of the proposal\r\n    address proposer;\r\n\r\n    /// @notice The time at which voting starts\r\n    uint startTime;\r\n\r\n    /// @notice Current number of votes in favor of this proposal\r\n    uint forVotes;\r\n\r\n    /// @notice Current number of votes in opposition to this proposal\r\n    uint againstVotes;\r\n\r\n    // @notice Queued transaction hash\r\n    bytes32 txHash;\r\n\r\n    bool executed;\r\n\r\n    /// @notice Receipts of ballots for the entire set of voters\r\n    mapping (address => Receipt) receipts;\r\n  }\r\n\r\n  /// @notice Ballot receipt record for a voter\r\n  struct Receipt {\r\n    /// @notice Whether or not a vote has been cast\r\n    bool hasVoted;\r\n\r\n    /// @notice Whether or not the voter supports the proposal\r\n    bool support;\r\n\r\n    /// @notice The number of votes the voter had, which were cast\r\n    uint votes;\r\n  }\r\n\r\n  /// @notice Possible states that a proposal may be in\r\n  enum ProposalState {\r\n    Active,\r\n    Defeated,\r\n    PendingExecution,\r\n    ReadyForExecution,\r\n    Executed\r\n  }\r\n\r\n  /// @notice If the votingPeriod is changed and the user votes again, the lock period will be reset.\r\n  modifier lockVotes() {\r\n    uint tokenBalance = votingToken.balanceOf(msg.sender);\r\n    votingToken.transferFrom(msg.sender, address(this), tokenBalance);\r\n    _mint(msg.sender, tokenBalance);\r\n    voteLock[msg.sender] = block.timestamp.add(votingPeriod);\r\n    _;\r\n  }\r\n\r\n  constructor(IERC20 _votingToken) public {\r\n      votingToken = _votingToken;\r\n  }\r\n\r\n  function state(uint proposalId)\r\n    public\r\n    view\r\n    returns (ProposalState)\r\n  {\r\n    require(proposalCount >= proposalId && proposalId > 0, \"Governance::state: invalid proposal id\");\r\n    Proposal storage proposal = proposals[proposalId];\r\n\r\n    if (block.timestamp <= proposal.startTime.add(votingPeriod)) {\r\n      return ProposalState.Active;\r\n\r\n    } else if (proposal.executed == true) {\r\n      return ProposalState.Executed;\r\n\r\n    } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\r\n      return ProposalState.Defeated;\r\n\r\n    } else if (block.timestamp < proposal.startTime.add(executionPeriod)) {\r\n      return ProposalState.PendingExecution;\r\n\r\n    } else {\r\n      return ProposalState.ReadyForExecution;\r\n    }\r\n  }\r\n\r\n  function getVote(uint _proposalId, address _voter)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return proposals[_proposalId].receipts[_voter].support;\r\n  }\r\n\r\n  function execute(uint _proposalId, address _target, uint _value, bytes memory _data)\r\n    public\r\n    payable\r\n    returns (bytes memory)\r\n  {\r\n    bytes32 txHash = keccak256(abi.encode(_target, _value, _data));\r\n    Proposal storage proposal = proposals[_proposalId];\r\n\r\n    require(proposal.txHash == txHash, \"Governance::execute: Invalid proposal\");\r\n    require(state(_proposalId) == ProposalState.ReadyForExecution, \"Governance::execute: Cannot be executed\");\r\n\r\n    (bool success, bytes memory returnData) = _target.call.value(_value)(_data);\r\n    require(success, \"Governance::execute: Transaction execution reverted.\");\r\n    proposal.executed = true;\r\n\r\n    return returnData;\r\n  }\r\n\r\n  function propose(address _target, uint _value, bytes memory _data)\r\n    public\r\n    lockVotes\r\n    returns (uint)\r\n  {\r\n\r\n    require(balanceOf[msg.sender] > proposalThreshold, \"Governance::propose: proposer votes below proposal threshold\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(_target, _value, _data));\r\n\r\n    proposalCount++;\r\n    Proposal memory newProposal = Proposal({\r\n      id: proposalCount,\r\n      proposer: msg.sender,\r\n      startTime: block.timestamp,\r\n      forVotes: 0,\r\n      againstVotes: 0,\r\n      txHash: txHash,\r\n      executed: false\r\n    });\r\n\r\n    proposals[newProposal.id] = newProposal;\r\n  }\r\n\r\n  function vote(uint _proposalId, bool _support) public lockVotes {\r\n\r\n    require(state(_proposalId) == ProposalState.Active, \"Governance::vote: voting is closed\");\r\n    Proposal storage proposal = proposals[_proposalId];\r\n    Receipt storage receipt = proposal.receipts[msg.sender];\r\n    require(receipt.hasVoted == false, \"Governance::vote: voter already voted\");\r\n\r\n    uint votes = balanceOf[msg.sender];\r\n\r\n    if (_support) {\r\n      proposal.forVotes = proposal.forVotes.add(votes);\r\n    } else {\r\n      proposal.againstVotes = proposal.againstVotes.add(votes);\r\n    }\r\n\r\n    receipt.hasVoted = true;\r\n    receipt.support = _support;\r\n    receipt.votes = votes;\r\n  }\r\n\r\n  function withdraw() public {\r\n    require(block.timestamp > voteLock[msg.sender], \"Governance::withdraw: wait until voteLock expiration\");\r\n    votingToken.transfer(msg.sender, balanceOf[msg.sender]);\r\n    _burn(msg.sender, balanceOf[msg.sender]);\r\n  }\r\n\r\n  function _mint(address _account, uint _amount) internal {\r\n    balanceOf[_account] = balanceOf[_account].add(_amount);\r\n  }\r\n\r\n  function _burn(address _account, uint _amount) internal {\r\n    balanceOf[_account] = balanceOf[_account].sub(_amount, \"ERC20: burn amount exceeds balance\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_votingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governance.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006e36556b3ee5aa28def2a8ec3dae30ec2b208739","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0ecedf6240d8de64929f8a6f908b830b83543435dd39b6adce7b149f33f3b876"}]}