{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n// Author: 0xKiwi.\r\n\r\ninterface IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n    function changeName(uint256 tokenId, string memory newName) external;\r\n    function tokenNameByIndex(uint256 index) external view returns (string memory);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract NFTAtomicSwap {\r\n    uint256 public constant NAME_COST = 1830 ether;\r\n    IERC721 public constant WAIFUSION = IERC721(0x2216d47494E516d8206B70FCa8585820eD3C4946);\r\n    IERC20 public constant WET = IERC20(0x76280AF9D18a868a0aF3dcA95b57DDE816c1aaf2);\r\n\r\n    address owner;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        WET.approve(address(WAIFUSION), 2**255);\r\n    }\r\n    \r\n    function atomicNameTransfer(uint256 inNFT, uint256 outNFT, string memory tempName) external {\r\n        WET.transferFrom(msg.sender, address(this), NAME_COST * 2);\r\n        WAIFUSION.transferFrom(msg.sender, address(this), inNFT);\r\n        WAIFUSION.transferFrom(msg.sender, address(this), outNFT);\r\n        string memory oldName = WAIFUSION.tokenNameByIndex(inNFT);\r\n        WAIFUSION.changeName(inNFT, tempName);\r\n        WAIFUSION.changeName(outNFT, oldName);\r\n        WAIFUSION.transferFrom(address(this), msg.sender, inNFT);\r\n        WAIFUSION.transferFrom(address(this), msg.sender, outNFT);\r\n    }\r\n    \r\n    function atomicNameSwap(uint256 inNFT, uint256 outNFT, string memory tempName) external {\r\n        WET.transferFrom(msg.sender, address(this), NAME_COST * 3);\r\n        WAIFUSION.transferFrom(msg.sender, address(this), inNFT);\r\n        WAIFUSION.transferFrom(msg.sender, address(this), outNFT);\r\n        string memory inOldName = WAIFUSION.tokenNameByIndex(inNFT);\r\n        string memory outOldName = WAIFUSION.tokenNameByIndex(outNFT);\r\n        WAIFUSION.changeName(outNFT, tempName);\r\n        WAIFUSION.changeName(inNFT, outOldName);\r\n        WAIFUSION.changeName(outNFT, inOldName);\r\n        WAIFUSION.transferFrom(address(this), msg.sender, inNFT);\r\n        WAIFUSION.transferFrom(address(this), msg.sender, outNFT);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAIFUSION\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WET\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outNFT\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tempName\",\"type\":\"string\"}],\"name\":\"atomicNameSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outNFT\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tempName\",\"type\":\"string\"}],\"name\":\"atomicNameTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTAtomicSwap","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a589dd498d1c7b16d953c37ae0f207ea815246d2d80952a4dbdf55b3943f8b2d"}]}