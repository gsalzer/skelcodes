{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-05\r\n*/\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns(uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns(uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns(bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns(uint remaining);\r\n\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\ncontract PSandBoxMock{\r\n\r\n    //globals\r\n    mapping (address => mapping (address => uint256)) depositBalances;\r\n    address ETH_TOKEN_ADDRESS  = address(0x0);\r\n    address payable owner;\r\n    address [6] stakableTokensList;\r\n    string [6] stakableTokensByNameList;\r\n    \r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n    \r\n  \r\n  constructor() public payable {\r\n      \r\n        owner= msg.sender;\r\n        \r\n        //Dummy data\r\n        populateData();\r\n         \r\n        \r\n  }\r\n  \r\n  fallback() external payable {\r\n      \r\n    deposit(0x0000000000000000000000000000000000000000, msg.value);\r\n  }\r\n  \r\n    function populateData() public{\r\n        stakableTokensByNameList = [\"WETH\", \"DAI\", \"USDC\", \"PLEX\", \"PLEXUSDCLP\", \"PLEXETHLP\"];\r\n     \r\n         \r\n         \r\n         stakableTokensList = [0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 0x6B175474E89094C44Da98b954EedeAC495271d0F, 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0x0391D2021f89DC339F60Fff84546EA23E337750f, 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xa0246c9032bC3A600820415aE600c6388619A14D]; \r\n        \r\n       \r\n    }\r\n\r\n\r\n   function deposit(address tokenAddress, uint256 amount) payable public returns (bool){\r\n       \r\n       if(tokenAddress == 0x0000000000000000000000000000000000000000){\r\n           \r\n            depositBalances[msg.sender][tokenAddress] = depositBalances[msg.sender][tokenAddress]  + msg.value;\r\n             emit Deposit(msg.sender, amount, tokenAddress);\r\n            return true;\r\n            \r\n        }\r\n        \r\n        ERC20 thisToken = ERC20(tokenAddress);\r\n        require(thisToken.transferFrom(msg.sender, address(this), amount), \"Not enough tokens to transferFrom or no approval\");\r\n        \r\n        depositBalances[msg.sender][tokenAddress] = depositBalances[msg.sender][tokenAddress]  + amount;\r\n         emit Deposit(msg.sender, amount, tokenAddress);\r\n        return true;\r\n   }\r\n\r\n   function withdraw(address tokenAddress, uint256 amount) payable public returns(bool){\r\n       \r\n        if(tokenAddress == 0x0000000000000000000000000000000000000000){\r\n            require(depositBalances[msg.sender][tokenAddress] >= amount, \"You didnt deposit enough eth\");\r\n            depositBalances[msg.sender][tokenAddress] = depositBalances[msg.sender][tokenAddress]  - amount;\r\n            msg.sender.send(amount);\r\n            return true;\r\n            \r\n        }\r\n        \r\n        ERC20 thisToken = ERC20(tokenAddress);\r\n        require(thisToken.balanceOf(msg.sender) >= amount, \"You do not have enough tokens to withdraw in balanceOf\");\r\n        \r\n        depositBalances[msg.sender][tokenAddress] = depositBalances[msg.sender][tokenAddress]  - amount;\r\n        \r\n        require(thisToken.transfer(msg.sender, amount), \"You dont have enough tokens inside this contract to withdraw from deposits\");\r\n        emit Withdrawal(msg.sender, amount, tokenAddress);\r\n        return true;\r\n        \r\n   }\r\n   \r\n    function getStakableTokens() view public  returns (address[6] memory, string[6] memory){\r\n        \r\n        return (stakableTokensList, stakableTokensByNameList);\r\n        \r\n    }\r\n   \r\n   function getComposition() view public returns(uint256[] memory compAmounts, address[] memory compTokens, string[] memory compNames){\r\n      \r\n       uint256[] memory compAmounts1;\r\n       address[] memory compTokens1;\r\n       string[] memory compNames1;\r\n       \r\n       compAmounts[0] =3000402303203202;\r\n       compAmounts[1]= 3000402303203202;\r\n       compAmounts[2] = 3000402303203202;\r\n       \r\n       compNames[0] = \"FARM\";\r\n       compNames[1] = \"Picke\";\r\n       compNames[2] = \"YEARN\";\r\n       \r\n       return (compAmounts1, compTokens1, compNames1);\r\n       \r\n   }\r\n\r\n   function getAPY(address tokenAddress) public view returns(uint256){\r\n    \r\n    return random(uint(tokenAddress));\r\n    \r\n   }\r\n   \r\n\r\n   function getTotalValueLockedAggregated() public view returns (uint256){\r\n      return 770567001;\r\n   }\r\n\r\n   function getTotalValueLockedInternalByToken(address tokenAddress) public view returns (uint256){\r\n    return 40203 + random(3);\r\n   }\r\n   function getTotalValueLockedInternal() public view returns (uint256){\r\n    return 5790567;\r\n   }\r\n   function timeLeftInEpoch() public view returns (uint256){\r\n        random(2);\r\n   }\r\n\r\n   function getAmountStakedByUser(address tokenAddress, address userAddress) public view returns(uint256){\r\n        return depositBalances[userAddress][tokenAddress];\r\n   }\r\n   function getThisTokenPrice() view public returns(uint256){\r\n        return random(1);\r\n   }\r\n   \r\n   function getUserCurrentReward(address userAddress) view public returns(uint256){\r\n        return random(uint256(userAddress));\r\n   }\r\n   \r\n   function getUserPotentialReward(address userAddress) view public returns(uint256){\r\n        return random(7);\r\n   }\r\n   \r\n \r\n   \r\n   function random(uint256 nonce) internal view returns (uint) {\r\n    \r\n    uint randomnumber = uint(keccak256(abi.encodePacked(now, msg.sender, nonce))) % 900;\r\n    randomnumber = randomnumber + 100;\r\n    \r\n    return randomnumber;\r\n}\r\n\r\n\r\n    function getUserWalletBalance(address userAddress, address tokenAddress) public view returns (uint256){\r\n        ERC20 token = ERC20(tokenAddress);\r\n        return token.balanceOf(userAddress);\r\n        \r\n    }\r\n\r\n    function adminWithdrawTokens(address token, uint amount, address payable destination) public onlyOwner returns(bool) {\r\n\r\n         if (address(token) == ETH_TOKEN_ADDRESS) {\r\n             destination.transfer(amount);\r\n         }\r\n         else {\r\n             ERC20 tokenToken = ERC20(token);\r\n             require(tokenToken.transfer(destination, amount));\r\n         }\r\n\r\n         return true;\r\n     }\r\n\r\n\r\n\r\n    function kill() virtual public onlyOwner {\r\n       \r\n            selfdestruct(owner);\r\n         \r\n    }\r\n\r\n\r\n    event Deposit(address indexed user, uint256 amount, address token);\r\n    event Withdrawal(address indexed user, uint256 amount, address token);\r\n    \r\n   \r\n  \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"adminWithdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAmountStakedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComposition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"compAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"compTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"compNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakableTokens\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"},{\"internalType\":\"string[6]\",\"name\":\"\",\"type\":\"string[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThisTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLockedAggregated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLockedInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalValueLockedInternalByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPotentialReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"populateData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLeftInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"PSandBoxMock","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a31ed89a4e215d43d6f3db1d4420a5b20afc06c6ed22e28c911dda2e0e7f6242"}]}