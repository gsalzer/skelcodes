{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-04\r\n*/\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n// File: contracts/interfaces/ITokenConverter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface ITokenConverter {\r\n    function convertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount,\r\n        uint256 _minReceive\r\n    ) external payable returns (uint256 _received);\r\n\r\n    function convertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount,\r\n        uint256 _maxSpend\r\n    ) external payable returns (uint256 _spend);\r\n\r\n    function getPriceConvertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount\r\n    ) external view returns (uint256 _receive);\r\n\r\n    function getPriceConvertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount\r\n    ) external view returns (uint256 _spend);\r\n}\r\n\r\n// File: contracts/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n/**\r\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\r\n*\r\n* Why Transfers: transfer methods could have a return value (bool), throw or revert for insufficient funds or\r\n* unathorized value.\r\n*\r\n* Why Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\r\n* The common strategy used to clean approvals.\r\n*\r\n* We use the Solidity call instead of interface methods because in the case of transfer, it will fail\r\n* for tokens with an implementation without returning a value.\r\n* Since versions of Solidity 0.4.22 the EVM has a new opcode, called RETURNDATASIZE.\r\n* This opcode stores the size of the returned data of an external call. The code checks the size of the return value\r\n* after an external call and reverts the transaction in case the return data is shorter than expected\r\n*\r\n* Source: https://github.com/nachomazzara/SafeERC20/blob/master/contracts/libs/SafeERC20.sol\r\n* Author: Ignacio Mazzara\r\n*/\r\nlibrary SafeERC20 {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        address(_token).call(\r\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\r\n        );\r\n\r\n        // Fail if the new balance its not equal than previous balance sub _value\r\n        return prevBalance - _value == _token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool)\r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        if (\r\n          prevBalance < _value || // Insufficient funds\r\n          _token.allowance(_from, address(this)) < _value // Insufficient allowance\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        address(_token).call(\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\r\n        );\r\n\r\n        // Fail if the new balance its not equal than previous balance sub _value\r\n        return prevBalance - _value == _token.balanceOf(_from);\r\n    }\r\n\r\n   /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @return bool whether the approve was successful or not\r\n   */\r\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\r\n        address(_token).call(\r\n            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\r\n        );\r\n\r\n        // Fail if the new allowance its not equal than _value\r\n        return _token.allowance(address(this), _spender) == _value;\r\n    }\r\n\r\n   /**\r\n   * @dev Clear approval\r\n   * Note that if 0 is not a valid value it will be set to 1.\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   */\r\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\r\n        bool success = safeApprove(_token, _spender, 0);\r\n\r\n        if (!success) {\r\n            success = safeApprove(_token, _spender, 1);\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n// File: contracts/commons/Ownable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\nlibrary SafeMath {\r\n    using SafeMath for uint256;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"Add overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(x >= y, \"Sub overflow\");\r\n        return x - y;\r\n    }\r\n\r\n    function mult(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 z = x * y;\r\n        require(z/x == y, \"Mult overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    function multdiv(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\r\n        require(z != 0, \"div by zero\");\r\n        return x.mult(y) / z;\r\n    }\r\n}\r\n\r\n// File: contracts/BurnerConverter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BurnerConverter is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable burnToken;\r\n    ITokenConverter public converter;\r\n\r\n    constructor(\r\n        IERC20 _burnToken,\r\n        ITokenConverter _converter\r\n    ) public {\r\n        burnToken = _burnToken;\r\n        converter = _converter;\r\n    }\r\n\r\n    event BurnTokens(IERC20 _soldToken, uint256 _soldAmount,uint256 _burnAmount);\r\n    event SetConverter(ITokenConverter _converter);\r\n\r\n    function setConverter(ITokenConverter _converter) external onlyOwner {\r\n        require(address(_converter) != address(0), \"Converter 0x0 is not valid\");\r\n        converter = _converter;\r\n        emit SetConverter(_converter);\r\n    }\r\n\r\n    function getPriceConvertFrom(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount) external view returns (uint256){\r\n        return converter.getPriceConvertFrom(_fromToken,_toToken,_fromAmount);\r\n    }\r\n\r\n    function getSoldTBalance(IERC20 _token) external view returns (uint256){\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    function executeBurning(IERC20 _soldToken, uint256 _soldAmount, uint256 _minReceive) external onlyOwner returns (bool) {\r\n        _approveOnlyOnce(_soldToken, address(converter), _soldAmount);\r\n\r\n        uint256 receivedBurnT = converter.convertFrom(\r\n            _soldToken,\r\n            burnToken,\r\n            _soldAmount,\r\n            _minReceive\r\n        );\r\n\r\n        require(receivedBurnT >= _minReceive, \"BurnerConverter/Amount received is less than minReceived\");\r\n        require(IERC20(burnToken).transfer(address(0), receivedBurnT), \"BurnerConverter/Failed to burn converted Tokens\");\r\n\r\n        emit BurnTokens(_soldToken, _soldAmount, receivedBurnT);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approveOnlyOnce(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) private {\r\n        uint256 allowance = _token.allowance(address(this), _spender);\r\n        if (allowance < _amount) {\r\n            if (allowance != 0) {\r\n                _token.clearApprove(_spender);\r\n            }\r\n\r\n            _token.approve(_spender, uint(-1));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_burnToken\",\"type\":\"address\"},{\"internalType\":\"contract ITokenConverter\",\"name\":\"_converter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITokenConverter\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"SetConverter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract ITokenConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceive\",\"type\":\"uint256\"}],\"name\":\"executeBurning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"getPriceConvertFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getSoldTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenConverter\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BurnerConverter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f970b8e36e23f7fc3fd752eea86f8be8d83375a60000000000000000000000006a7f86c7c9dccba843287407c9db6615972c0a7d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e89f96209920c34fff6c52bf2386b5567aac9b7816ce64259f3cec367094bcca"}]}