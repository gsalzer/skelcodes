{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.3;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Destructor is Ownable {\r\n    bool public destructing;\r\n\r\n    modifier onlyBeforeDestruct() {\r\n        require(!destructing, \"pre destory...\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDestructing() {\r\n        require(destructing, \"destorying...\");\r\n        _;\r\n    }\r\n\r\n    function preDestruct() onlyOwner onlyBeforeDestruct public {\r\n        destructing = true;\r\n    }\r\n\r\n    function destructERC20(address _erc20, uint256 _amount) onlyOwner onlyDestructing public {\r\n        if (_amount == 0) {\r\n            _amount = IERC20(_erc20).balanceOf(address(this));\r\n        }\r\n        require(_amount > 0, \"check balance\");\r\n        IERC20(_erc20).transfer(owner(), _amount);\r\n    }\r\n\r\n    function destory() onlyOwner onlyDestructing public {\r\n        selfdestruct(address(uint160(owner())));\r\n    }\r\n}\r\n\r\nabstract contract Operable is Ownable {\r\n    address public operator;\r\n\r\n    event OperatorUpdated(address indexed previous, address indexed newOperator);\r\n    constructor(address _operator) public {\r\n        if (_operator == address(0)) {\r\n            operator = msg.sender;\r\n        } else {\r\n            operator = _operator;\r\n        }\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"Operable: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function updateOperator(address newOperator) public onlyOwner {\r\n        require(newOperator != address(0), \"Operable: new operator is the zero address\");\r\n        emit OperatorUpdated(operator, newOperator);\r\n        operator = newOperator;\r\n    }\r\n}\r\n\r\ninterface IMigratorChef {\r\n    // Perform LP token migration from legacy UniswapV2 to SushiSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\r\n    // SushiSwap must mint EXACTLY the same amount of SushiSwap LP tokens or\r\n    // else something bad will happen. Traditional UniswapV2 does not\r\n    // do that so be careful!\r\n    function migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\ninterface Mintable {\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IMintProxy {\r\n    function mint(address account, uint256 amount, uint8 tp) external returns (bool);\r\n}\r\n\r\ncontract TmpMintProxy is IMintProxy, Operable, Destructor {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Mint(address indexed user, uint8 indexed tp, uint256 amount);\r\n\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) Operable(address(0)) public {\r\n        token = _token;\r\n    }\r\n\r\n    // mint for deposit lp token\r\n    function mint(address account, uint256 amount, uint8 tp) onlyOperator onlyBeforeDestruct override public returns (bool){\r\n        require(account != address(0), \"mint to the zero address\");\r\n        IERC20(token).safeTransfer(account, amount);\r\n        emit Mint(account, tp, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\nabstract contract Reward is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 private dayRewardAmount;\r\n\r\n    mapping(address => uint256) rewardDetails;\r\n    address[] rewardAddr;\r\n\r\n    uint32 public lastMintDayTime;\r\n    uint32 public units;\r\n\r\n    event Mint(uint32 time, uint256 amount);\r\n\r\n    constructor() public {\r\n        units = 86400;\r\n    }\r\n\r\n    function updateUnits(uint32 _units) onlyOwner public{\r\n        units = _units;\r\n    }\r\n\r\n    // update lastDayTime\r\n    function refreshMintDay() internal returns(uint16)  {\r\n        uint32 _units = units;\r\n        uint32 _dayTime = ( uint32(now) / _units ) * _units;\r\n        require(_dayTime>lastMintDayTime, \"day time check\");\r\n        lastMintDayTime = _dayTime;\r\n    }\r\n\r\n    function clearReward() private {\r\n        uint _addrsLength = rewardAddr.length;\r\n        for (uint i=0; i< _addrsLength; i++) {\r\n            delete rewardDetails[rewardAddr[i]];\r\n        }\r\n        delete rewardAddr;\r\n    }\r\n\r\n    function mint() internal {\r\n        // clear reward\r\n        clearReward();\r\n\r\n        address[] memory _addrs;\r\n        uint256[] memory _amounts;\r\n        uint256 _total;\r\n        (_addrs, _amounts, _total) = mintInfo();\r\n\r\n        require(_addrs.length == _amounts.length, \"check length\");\r\n        require(_total > 0, \"check total\");\r\n\r\n        uint256 _rewardAmount = getRewardAmount();\r\n\r\n        uint _addrsLength = _addrs.length;\r\n        for (uint i=0; i< _addrsLength; i++) {\r\n            require(_addrs[i]!=address(0), \"check address\");\r\n            require(_amounts[i]>0, \"check amount\");\r\n\r\n            rewardDetails[_addrs[i]] = _amounts[i].mul(_rewardAmount).div(_total);\r\n            rewardAddr.push(_addrs[i]);\r\n        }\r\n\r\n        emit Mint(lastMintDayTime, _rewardAmount);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 _amount = rewardDetails[msg.sender];\r\n        require(_amount>0, \"check reward amount\");\r\n        // clear\r\n        rewardDetails[msg.sender] = 0;\r\n\r\n        transferTo(msg.sender, _amount);\r\n    }\r\n\r\n    function myReward(address addr) public view returns(uint256){\r\n        return rewardDetails[addr];\r\n    }\r\n\r\n    function withdrawInfo() public view returns(uint32, address[] memory,  uint256[] memory, uint256) {\r\n        uint256[] memory _amounts = new uint256[](rewardAddr.length);\r\n        uint256 _total = 0;\r\n        uint _arrLength = rewardAddr.length;\r\n        for (uint i=0; i< _arrLength; i++) {\r\n            uint256 amount = rewardDetails[rewardAddr[i]];\r\n            _total = _total.add(amount);\r\n            _amounts[i] = amount;\r\n        }\r\n        return (lastMintDayTime, rewardAddr, _amounts, _total);\r\n    }\r\n\r\n    function transferTo(address _to, uint256 _amount) internal virtual;\r\n    function getRewardAmount() public view virtual returns (uint256);\r\n    function mintInfo() public view virtual returns(address[] memory,  uint256[] memory, uint256);\r\n}\r\n\r\nabstract contract RewardERC20 is Reward {\r\n    uint256 private dayRewardAmount;\r\n    address public rewardToken;\r\n\r\n    constructor(address _rewardToken, uint256 _dayRewardAmount) public {\r\n        dayRewardAmount = _dayRewardAmount;\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function updateRewardAmount(uint256 _amount) onlyOwner public {\r\n        dayRewardAmount = _amount;\r\n    }\r\n\r\n    function getRewardAmount() public view override returns (uint256) {\r\n        return dayRewardAmount;\r\n    }\r\n\r\n\r\n    function transferTo(address _to, uint256 _amount) internal override {\r\n        // transfer erc20 token\r\n        IERC20(rewardToken).transfer(_to, _amount);\r\n    }\r\n}\r\n\r\ninterface ILiquidity {\r\n    function emitJoin(address _taker, uint256 _ethVal) external;\r\n}\r\n\r\ncontract LiquidityStats is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address=>uint8) public factoryOwnerMap;\r\n    address public clearOwner;\r\n\r\n    mapping ( address => uint256 ) public takerValueMap;\r\n    address[] public takerArr;\r\n\r\n    uint256 public threshold;\r\n\r\n    constructor(address[] memory _factorys, uint256 _threshold) public {\r\n        uint _arrLength = _factorys.length;\r\n        for (uint i=0; i< _arrLength; i++) {\r\n            factoryOwnerMap[_factorys[i]] = 1;\r\n        }\r\n        threshold = _threshold;\r\n    }\r\n\r\n    function updateFactoryOwner(address[] memory _addrs, uint8[] memory _vals) onlyOwner public {\r\n        uint _arrLength = _addrs.length;\r\n        for (uint i=0; i< _arrLength; i++) {\r\n            factoryOwnerMap[_addrs[i]] = _vals[i];\r\n        }\r\n    }\r\n\r\n    function updateThreshold(uint256 _threshold) onlyOwner public {\r\n        threshold = _threshold;\r\n    }\r\n\r\n    function updateClearOwner(address _addr) onlyOwner public {\r\n        clearOwner = _addr;\r\n    }\r\n\r\n    function emitJoin(address _taker, uint256 _ethVal) public {\r\n        require(factoryOwnerMap[msg.sender]>0, \"factory address check\");\r\n        if(_ethVal>=threshold){\r\n            uint256 prev = takerValueMap[_taker];\r\n            if (prev == 0) {\r\n                takerArr.push(_taker);\r\n            }\r\n            takerValueMap[_taker] = prev.add(1);\r\n        }\r\n    }\r\n\r\n    function clear() public {\r\n        require(msg.sender == clearOwner, \"clear owner address check\");\r\n\r\n        uint _arrLength = takerArr.length;\r\n        for (uint i=0; i< _arrLength; i++) {\r\n            delete takerValueMap[takerArr[i]];\r\n        }\r\n        delete takerArr;\r\n    }\r\n\r\n    function stats() public view returns(address[] memory,  uint256[] memory, uint256) {\r\n        uint256[] memory _amounts = new uint256[](takerArr.length);\r\n        uint256 _total = 0;\r\n        uint _arrLength = takerArr.length;\r\n        for (uint i=0; i< _arrLength; i++) {\r\n            uint256 amount = takerValueMap[takerArr[i]];\r\n            _total = _total.add(amount);\r\n            _amounts[i] = amount;\r\n        }\r\n        return (takerArr, _amounts, _total);\r\n    }\r\n}\r\n\r\ninterface IStats {\r\n    function stats() external view returns(address[] memory,  uint256[] memory, uint256);\r\n    function clear() external;\r\n}\r\n\r\ncontract LiquidityMiner is Operable, RewardERC20, Destructor {\r\n    address public liquidityStatsAddr;\r\n\r\n    constructor(address _rewardToken, uint256 _dayRewardAmount, address _statsAddr, address _operatorAddr) Operable(_operatorAddr) RewardERC20(_rewardToken,_dayRewardAmount) public {\r\n        liquidityStatsAddr = _statsAddr;\r\n    }\r\n\r\n    function updateStatsAddr(address _addr) onlyOwner public {\r\n        require(_addr!=liquidityStatsAddr, \"check stats address\");\r\n        require(_addr!=address(0), \"check stats address 0\");\r\n        liquidityStatsAddr = _addr;\r\n    }\r\n\r\n    function liquidityMint() onlyOperator onlyBeforeDestruct public{\r\n        // mint\r\n        mint();\r\n        // clear\r\n        IStats(liquidityStatsAddr).clear();\r\n    }\r\n\r\n    function mintInfo() public view override returns(address[] memory,  uint256[] memory, uint256) {\r\n        return IStats(liquidityStatsAddr).stats();\r\n    }\r\n}\r\n\r\ninterface IStaking {\r\n    function hastaked(address _who) external returns(bool);\r\n    function stats() external view returns(address[] memory,  uint256[] memory, uint256);\r\n    function clear() external;\r\n}\r\n\r\ninterface IFee {\r\n    function emitFee(address _addr, uint256 _ethVal) payable external;\r\n}\r\n\r\ncontract FeeStats {\r\n    event Fee(address _addr, uint256 _ethVal);\r\n    function emitFee(address _addr, uint256 _ethVal) payable public {\r\n        require(_ethVal==msg.value, \"fee value\");\r\n        emit Fee(_addr, _ethVal);\r\n    }\r\n}\r\n\r\ninterface Events {\r\n    event CreatePool(uint32 indexed id, address indexed maker, bool priv, address tracker, uint256 amount, uint256 rate, uint256 units);\r\n    event Join(uint32 indexed id, address indexed taker, bool priv, uint256 ethAmount, address tracker, uint256 amount);\r\n    event Withdraw(uint32 indexed id, address indexed sender, uint256 amount, uint32 tp);\r\n    event Close(uint32 indexed id, bool priv);\r\n}\r\n\r\ncontract AbstractFactory is Ownable {\r\n    address public liquidtyAddr;\r\n    address public stakeAddr;\r\n    address public feeAddr;\r\n    uint32 public constant takerFeeBase = 100000;\r\n    uint32 public takerFeeRate;\r\n    uint256 public makerFixedFee;\r\n\r\n    constructor() public {\r\n        takerFeeRate = 0;\r\n        makerFixedFee = 0;\r\n    }\r\n\r\n    modifier makerFee() {\r\n        if(makerFixedFee>0) {\r\n            require(msg.value >= makerFixedFee, \"check maker fee, fee must be le value\");\r\n            require(feeAddr!=address(0), \"check fee address, fail\");\r\n\r\n            // transfer fee to owner\r\n            IFee(feeAddr).emitFee{value:makerFixedFee}(msg.sender, makerFixedFee);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier takerFee(uint256 _value) {\r\n        require(_value>0, \"check taker value, value must be gt 0\");\r\n        uint256 _fee = 0;\r\n        if(takerFeeRate>0){\r\n            _fee = _value * takerFeeRate / takerFeeBase;\r\n            require(_fee > 0, \"check taker fee, fee must be gt 0\");\r\n            require(_fee < _value, \"check taker fee, fee must be le value\");\r\n            require(feeAddr!=address(0), \"check fee address, fail\");\r\n\r\n            // transfer fee to owner\r\n            IFee(feeAddr).emitFee{value:_fee}(msg.sender, _fee);\r\n        }\r\n        require(_value+_fee<=msg.value,\"check taker fee and value, total must be le value\");\r\n        _;\r\n    }\r\n\r\n    function joinPoolAfter(address _taker, uint256 _ethVal) internal {\r\n        if(liquidtyAddr!=address(0)){\r\n            ILiquidity(liquidtyAddr).emitJoin(_taker, _ethVal);\r\n        }\r\n    }\r\n    function updateTakerFeeRate(uint32 _rate) public onlyOwner {\r\n        takerFeeRate = _rate;\r\n    }\r\n    function updateMakerFee(uint256 _fee) public onlyOwner {\r\n        makerFixedFee = _fee;\r\n    }\r\n    function updateFeeAddr(address _addr) public onlyOwner {\r\n        feeAddr = _addr;\r\n    }\r\n    function updateLiquidityAddr(address _addr) public onlyOwner {\r\n        liquidtyAddr = _addr;\r\n    }\r\n    function updateStakeAddr(address _addr) public onlyOwner {\r\n        stakeAddr = _addr;\r\n    }\r\n    function hastaked(address _who) internal returns(bool) {\r\n        if(stakeAddr==address(0)){\r\n            return true;\r\n        }\r\n        return IStaking(stakeAddr).hastaked(_who);\r\n    }\r\n}\r\n\r\ncontract FixedPoolFactory is Events, AbstractFactory, Destructor {\r\n    using SafeMath for uint256;\r\n\r\n    struct FixedPool {\r\n        string name;\r\n        address payable maker;\r\n\r\n        uint32 endTime;\r\n        bool enabled;\r\n\r\n        uint256 tokenRate;\r\n        address tokenaddr;\r\n        uint256 tokenAmount; // left amount\r\n        uint256 units;\r\n        bool onlyHolder;\r\n    }\r\n\r\n    mapping(uint32 => FixedPool) public fixedPools;\r\n    uint32 public fixedPoolCnt = 0;\r\n\r\n\r\n    function createFixedPool(string memory _name, address _tracker, uint256 _amount, uint256 _rate, uint256 _units, uint32 _endTime, bool _onlyHolder) makerFee onlyBeforeDestruct payable public {\r\n        require(_amount>0, \"check create pool amount\");\r\n        require(_rate>0, \"check create pool rate\");\r\n        require(_units>0, \"check create pool units\");\r\n\r\n        // transfer erc20 token from maker\r\n        SafeERC20.safeTransferFrom(IERC20(_tracker), msg.sender, address(this), _amount);\r\n\r\n        fixedPools[fixedPoolCnt] =  FixedPool({\r\n            maker : msg.sender,\r\n            tokenRate : _rate,\r\n            tokenaddr : _tracker,\r\n            tokenAmount : _amount,\r\n            name: _name,\r\n            endTime: uint32(now) + _endTime,\r\n            units: _units,\r\n            enabled: true,\r\n            onlyHolder: _onlyHolder\r\n            });\r\n        emit CreatePool(fixedPoolCnt, msg.sender, false, _tracker, _amount, _rate, _units);\r\n        fixedPoolCnt++;\r\n    }\r\n\r\n    function fixedPoolJoin(uint32 _id, uint256 _value) takerFee(_value) payable public {\r\n        require(msg.value > 0, \"check value, value must be gt 0\");\r\n        require(_value <= msg.value, \"check value, value must be le msg.value\");\r\n\r\n        FixedPool storage _pool = fixedPools[_id];\r\n\r\n        // check pool exist\r\n        require(_pool.enabled, \"check pool exists\");\r\n        if(_pool.onlyHolder){\r\n            require(hastaked(msg.sender), \"only holder\");\r\n        }\r\n        // check end time\r\n        require(now < _pool.endTime, \"check before end time\");\r\n\r\n        uint _order = _value.mul(_pool.tokenRate).div(_pool.units);\r\n        require(_order>0, \"check taker amount\");\r\n        require(_order<=_pool.tokenAmount, \"check left token amount\");\r\n\r\n        address _taker = msg.sender; // todo test gas\r\n\r\n        _pool.tokenAmount = _pool.tokenAmount.sub(_order);\r\n\r\n        // transfer ether to maker\r\n        _pool.maker.transfer(_value);\r\n\r\n        IERC20(_pool.tokenaddr).transfer(_taker, _order);\r\n\r\n        emit Join(_id, msg.sender, false, _value, _pool.tokenaddr, _order);\r\n        joinPoolAfter(msg.sender, _value);\r\n    }\r\n\r\n    function fixedPoolClose(uint32 _id) public {\r\n        FixedPool storage _pool = fixedPools[_id];\r\n\r\n        require(_pool.enabled, \"check pool exists\");\r\n        require(_pool.maker == msg.sender, \"check maker owner\");\r\n\r\n\r\n        _pool.enabled = false;\r\n        IERC20(_pool.tokenaddr).transfer(_pool.maker, _pool.tokenAmount);\r\n        emit Close(_id, false);\r\n    }\r\n\r\n}\r\n\r\ncontract PrivFixedPoolFactory is Events, AbstractFactory, Destructor {\r\n    using SafeMath for uint256;\r\n\r\n    struct PrivFixedPool {\r\n        string name;\r\n        address payable maker;\r\n\r\n        uint32 endTime;\r\n        bool enabled;\r\n\r\n        uint256 tokenRate;\r\n        address tokenaddr;\r\n        uint256 tokenAmount; // left amount\r\n        uint256 units;\r\n        address[] takers;\r\n    }\r\n\r\n    mapping(uint32 => PrivFixedPool) public privFixedPools;\r\n\r\n    uint32 public privFixedPoolCnt = 0;\r\n\r\n    function createPrivFixedPool(string memory  _name, address _tracker, uint256 _amount, uint256 _rate, uint256 _units, uint32 _endTime, address[] memory _takers)\r\n    makerFee onlyBeforeDestruct payable public {\r\n\r\n        require(_amount>0, \"check create pool amount\");\r\n        require(_rate>0, \"check create pool amount\");\r\n        require(_units>0, \"check create pool amount\");\r\n\r\n\r\n        // transfer erc20 token from maker\r\n        SafeERC20.safeTransferFrom(IERC20(_tracker), msg.sender, address(this), _amount);\r\n\r\n        privFixedPools[privFixedPoolCnt] =  PrivFixedPool({\r\n            maker : msg.sender,\r\n            tokenRate : _rate,\r\n            tokenaddr : _tracker,\r\n            tokenAmount : _amount,\r\n            name: _name,\r\n            endTime: uint32(now) + _endTime,\r\n            units: _units,\r\n            enabled: true,\r\n            takers: _takers\r\n            });\r\n\r\n        emit CreatePool(privFixedPoolCnt, msg.sender, true, _tracker, _amount, _rate, _units);\r\n\r\n        privFixedPoolCnt++;\r\n    }\r\n\r\n    function privFixedPoolJoin(uint32 _id, uint32 _index, uint256 _value) takerFee(_value) payable public {\r\n        require(msg.value > 0, \"check value, value must be gt 0\");\r\n        require(_value <= msg.value, \"check value, value must be le msg.value\");\r\n\r\n        PrivFixedPool storage _pool = privFixedPools[_id];\r\n\r\n        // check pool exist\r\n        require(_pool.enabled, \"check pool exists\");\r\n\r\n        // check end time\r\n        require(now < _pool.endTime, \"check before end time\");\r\n        // check taker limit\r\n        require(_pool.takers[_index] == msg.sender, \"check taker limit\");\r\n\r\n        uint _order = msg.value.mul(_pool.tokenRate).div(_pool.units);\r\n        require(_order>0, \"check taker amount\");\r\n        require(_order<=_pool.tokenAmount, \"check left token amount\");\r\n\r\n        address _taker = msg.sender; // todo test gas\r\n\r\n        _pool.tokenAmount = _pool.tokenAmount.sub(_order);\r\n\r\n        // transfer ether to maker\r\n        _pool.maker.transfer(_value);\r\n\r\n        IERC20(_pool.tokenaddr).transfer(_taker, _order);\r\n\r\n        emit Join(_id, msg.sender, true, msg.value, _pool.tokenaddr, _order);\r\n        joinPoolAfter(msg.sender, msg.value);\r\n    }\r\n\r\n    function privFixedPoolClose(uint32 _id) public {\r\n        PrivFixedPool storage _pool = privFixedPools[_id];\r\n\r\n        require(_pool.enabled, \"check pool exists\");\r\n        require(_pool.maker == msg.sender, \"check maker owner\");\r\n\r\n        _pool.enabled = false;\r\n        IERC20(_pool.tokenaddr).transfer(_pool.maker, _pool.tokenAmount);\r\n\r\n        emit Close(_id, true);\r\n    }\r\n\r\n\r\n    function privFixedPoolTakers(uint32 _id) public view returns(address[] memory){\r\n        PrivFixedPool storage _pool = privFixedPools[_id];\r\n        return _pool.takers;\r\n    }\r\n}\r\n\r\ncontract PoolFactory is FixedPoolFactory, PrivFixedPoolFactory {}\r\n\r\ncontract BidPoolFactory is Events, AbstractFactory, Destructor {\r\n    using SafeMath for uint256;\r\n\r\n    struct BidPool {\r\n        string name;\r\n        address payable maker;\r\n\r\n        uint32 endTime;\r\n        bool enabled;\r\n\r\n        address tokenaddr;\r\n        uint256 tokenAmount; // maker erc20 token amount\r\n\r\n        uint256 takerAmountTotal; // taker ether coin amount\r\n        uint256 makerReceiveTotal; // maker received = all - fee\r\n        mapping(address=>uint256) takerAmountMap; // taker ether coin amount\r\n\r\n        bool onlyHolder; // only token holder could join\r\n    }\r\n\r\n    mapping(uint32 => BidPool) public bidPools;\r\n    uint32 public bidPoolCnt = 0;\r\n\r\n    function createBidPool(string memory  _name, address _tracker, uint256 _amount, uint32 _endTime, bool _onlyHolder) makerFee onlyBeforeDestruct payable public {\r\n        require(_amount>0, \"check create pool amount\");\r\n\r\n        // transfer erc20 token from maker\r\n        SafeERC20.safeTransferFrom(IERC20(_tracker), msg.sender, address(this), _amount);\r\n\r\n        bidPools[bidPoolCnt] = BidPool({\r\n            name: _name,\r\n            maker : msg.sender,\r\n            endTime: uint32(now) + _endTime,\r\n            tokenaddr : _tracker,\r\n            tokenAmount : _amount,\r\n            takerAmountTotal: 0,\r\n            enabled: true,\r\n            makerReceiveTotal:0,\r\n            onlyHolder:_onlyHolder\r\n            });\r\n        emit CreatePool(bidPoolCnt, msg.sender, false, _tracker, _amount, 0, 0);\r\n        bidPoolCnt++;\r\n    }\r\n\r\n    function bidPoolJoin(uint32 _id, uint256 _value) takerFee(_value) payable public {\r\n        require(msg.value > 0, \"check value, value must be gt 0\");\r\n        require(_value <= msg.value, \"check value, value must be le msg.value\");\r\n\r\n        BidPool storage _pool = bidPools[_id];\r\n\r\n        // check pool exist\r\n        require(_pool.enabled, \"check pool exists\");\r\n\r\n        // check end time\r\n        require(now < _pool.endTime, \"check before end time\");\r\n\r\n        // check holder\r\n        if(_pool.onlyHolder){\r\n            require(hastaked(msg.sender), \"only holder\");\r\n        }\r\n        address _taker = msg.sender;\r\n        _pool.takerAmountMap[_taker] = _pool.takerAmountMap[_taker].add(_value);\r\n        _pool.takerAmountTotal = _pool.takerAmountTotal.add(_value);\r\n        _pool.makerReceiveTotal = _pool.makerReceiveTotal.add(_value);\r\n\r\n        emit Join(_id, msg.sender, false, _value, _pool.tokenaddr, 0);\r\n        joinPoolAfter(msg.sender, _value);\r\n    }\r\n\r\n    function bidPoolTakerWithdraw(uint32 _id) public {\r\n        BidPool storage _pool = bidPools[_id];\r\n\r\n        // check end time\r\n        require(now > _pool.endTime, \"check after end time\");\r\n\r\n        address _taker = msg.sender;\r\n        uint256 _amount = _pool.takerAmountMap[_taker];\r\n        require(_amount>0, \"amount check\");\r\n\r\n        uint256 _order = _amount.mul(_pool.tokenAmount).div(_pool.takerAmountTotal);\r\n\r\n        // clear taker amount\r\n        delete _pool.takerAmountMap[_taker];\r\n        IERC20(_pool.tokenaddr).transfer(_taker, _order);\r\n        emit Withdraw(_id, _taker, _order, uint32(2));\r\n    }\r\n\r\n    function bidPoolMakerWithdraw(uint32 _id) public {\r\n        BidPool storage _pool = bidPools[_id];\r\n        // check end time\r\n        require(now > _pool.endTime, \"check after end time\");\r\n        require(_pool.enabled, \"check pool enabled\");\r\n        require(_pool.maker == msg.sender, \"check pool owner\");\r\n        if( _pool.takerAmountTotal == 0 ){\r\n            _pool.enabled = false;\r\n            IERC20(_pool.tokenaddr).transfer(_pool.maker, _pool.tokenAmount);\r\n            return;\r\n        }\r\n        uint256 _order = _pool.makerReceiveTotal;\r\n        require( _order>0, \"check received value\");\r\n        _pool.makerReceiveTotal = 0;\r\n        msg.sender.transfer(_order);\r\n        emit Withdraw(_id, msg.sender, _order, uint32(1));\r\n    }\r\n\r\n    function bidTakerAmount(uint32 _id, address _taker) public view returns(uint256) {\r\n        BidPool storage _pool = bidPools[_id];\r\n        uint256 _amount = _pool.takerAmountMap[_taker];\r\n        return _amount;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"priv\",\"type\":\"bool\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"priv\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"priv\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_units\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_onlyHolder\",\"type\":\"bool\"}],\"name\":\"createFixedPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_units\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_takers\",\"type\":\"address[]\"}],\"name\":\"createPrivFixedPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destructERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"fixedPoolClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedPoolCnt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fixedPoolJoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"fixedPools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyHolder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidtyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerFixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preDestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"privFixedPoolClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privFixedPoolCnt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"privFixedPoolJoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"privFixedPoolTakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"privFixedPools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takerFeeBase\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takerFeeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateLiquidityAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateMakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateStakeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rate\",\"type\":\"uint32\"}],\"name\":\"updateTakerFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolFactory","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://df34d21f3aa995cbf29e2bd94e961abd5c361e1c7e0fb4f96c8ca3cd7b1cb493"}]}