{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KryptoWriteAd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport './PausableNFT.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\n/**\\r\\n * It aint much, but it's honest work.\\r\\n */\\r\\ncontract KryptoWriteAd is PausableNFT, Ownable {\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // uint256 constant CONTRACT_SHARE_TENTHS = 1; // implicit\\r\\n  uint256 constant MINTER_SHARE_TENTHS = 2;\\r\\n  uint256 constant PREVIOUS_OWNER_SHARE_TENTHS = 7;\\r\\n\\r\\n  uint256 public discountLimit = 5; // x -> every x is free.\\r\\n  uint256 public mintingCost;\\r\\n\\r\\n  bool private reEntrancyLocked = false;\\r\\n\\r\\n  constructor(\\r\\n    uint88 _gasCompensation,\\r\\n    uint96 _initialTokenPrice,\\r\\n    uint256 _mintingCost,\\r\\n    uint8 _priceIncreaseTenths\\r\\n  ) {\\r\\n    gasCompensation = _gasCompensation;\\r\\n    initialTokenPrice = _initialTokenPrice;\\r\\n    mintingCost = _mintingCost;\\r\\n    priceIncreaseTenths = _priceIncreaseTenths;\\r\\n  }\\r\\n\\r\\n  function buy(uint256 _id) external payable {\\r\\n    require(!reEntrancyLocked);\\r\\n    reEntrancyLocked = true;\\r\\n\\r\\n    require(_id < nextTokenId);\\r\\n\\r\\n    TokenInfo storage info = tokenInfo[_id];\\r\\n\\r\\n    uint256 newPrice = _multiplyByTenths(uint256(info.previousPrice), uint256(info.previousPriceIncrease));\\r\\n    uint256 total = newPrice.add(uint256(info.previousGasCompensation));\\r\\n    _bought(info.owner, msg.sender, _id, total);\\r\\n    require(msg.value >= total);\\r\\n\\r\\n    uint256 refund = msg.value.sub(total);\\r\\n\\r\\n    if (refund > 0) {\\r\\n      (bool refundSuccess, ) = msg.sender.call{value: refund}('');\\r\\n      require(refundSuccess);\\r\\n    }\\r\\n\\r\\n    uint256 previousPrice = uint256(info.previousPrice);\\r\\n    uint256 previousGasCompensation = uint256(info.previousGasCompensation);\\r\\n    address previousOwner = info.owner;\\r\\n    uint256 priceIncrease = newPrice.sub(previousPrice);\\r\\n\\r\\n    info.owner = msg.sender;\\r\\n    info.previousPrice = _toUint96(newPrice);\\r\\n    info.previousPriceIncrease = priceIncreaseTenths;\\r\\n    info.previousGasCompensation = gasCompensation;\\r\\n\\r\\n    info.minter.call{value: _multiplyByTenths(priceIncrease, MINTER_SHARE_TENTHS)}('');\\r\\n    previousOwner.call{\\r\\n      value: previousPrice.add(_multiplyByTenths(priceIncrease, PREVIOUS_OWNER_SHARE_TENTHS)).add(\\r\\n        previousGasCompensation\\r\\n      )\\r\\n    }('');\\r\\n\\r\\n    reEntrancyLocked = false;\\r\\n  }\\r\\n\\r\\n  function buyMany(uint256[] memory ids) external payable {\\r\\n    require(!reEntrancyLocked);\\r\\n    reEntrancyLocked = true;\\r\\n    require(ids.length > 0);\\r\\n\\r\\n    uint256 totalCost = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < ids.length; i++) {\\r\\n      require(ids[i] < nextTokenId);\\r\\n      TokenInfo storage info = tokenInfo[ids[i]];\\r\\n\\r\\n      uint256 newPrice = _multiplyByTenths(uint256(info.previousPrice), uint256(info.previousPriceIncrease));\\r\\n      uint256 total = newPrice.add(uint256(info.previousGasCompensation));\\r\\n      _bought(info.owner, msg.sender, ids[i], total);\\r\\n      totalCost = totalCost.add(total);\\r\\n\\r\\n      uint256 previousPrice = info.previousPrice;\\r\\n      uint256 previousGasCompensation = uint256(info.previousGasCompensation);\\r\\n      address previousOwner = info.owner;\\r\\n      uint256 priceIncrease = newPrice.sub(previousPrice);\\r\\n\\r\\n      info.owner = msg.sender;\\r\\n      info.previousPrice = _toUint96(newPrice);\\r\\n      info.previousPriceIncrease = priceIncreaseTenths;\\r\\n      info.previousGasCompensation = gasCompensation;\\r\\n\\r\\n      info.minter.call{value: _multiplyByTenths(priceIncrease, MINTER_SHARE_TENTHS)}('');\\r\\n      previousOwner.call{\\r\\n        value: previousPrice.add(_multiplyByTenths(priceIncrease, PREVIOUS_OWNER_SHARE_TENTHS)).add(\\r\\n          previousGasCompensation\\r\\n        )\\r\\n      }('');\\r\\n    }\\r\\n    require(msg.value >= totalCost, 'payment too low');\\r\\n\\r\\n    uint256 refund = msg.value.sub(totalCost);\\r\\n    if (refund > 0) {\\r\\n      (bool refundSuccess, ) = msg.sender.call{value: refund}('');\\r\\n      require(refundSuccess, 'could not refund');\\r\\n    }\\r\\n\\r\\n    reEntrancyLocked = false;\\r\\n  }\\r\\n\\r\\n  function calcBuyCost(uint256 id) external view returns (uint256) {\\r\\n    TokenInfo storage info = tokenInfo[id];\\r\\n    return\\r\\n      _multiplyByTenths(uint256(info.previousPrice), uint256(info.previousPriceIncrease)).add(\\r\\n        uint256(info.previousGasCompensation)\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function calcMintManyCost(uint256 amount) public view returns (uint256) {\\r\\n    if (mintingCost == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    if (amount < discountLimit) {\\r\\n      return amount.mul(mintingCost);\\r\\n    }\\r\\n\\r\\n    return amount.sub(amount.div(discountLimit)).mul(mintingCost);\\r\\n  }\\r\\n\\r\\n  function mint() external payable {\\r\\n    require(msg.value == mintingCost, 'payment / token price mismatch');\\r\\n    _mint(msg.sender);\\r\\n  }\\r\\n\\r\\n  function mintMany(uint256 amount) external payable {\\r\\n    require(amount > 0);\\r\\n    uint256 cost = calcMintManyCost(amount);\\r\\n    require(msg.value == cost); // must pay exact. so no refunds necessary.\\r\\n\\r\\n    for (uint256 i = 0; i < amount; i++) {\\r\\n      _mint(msg.sender);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setGasCompensation(uint88 amount) external onlyOwner {\\r\\n    require(amount < 2**88);\\r\\n    gasCompensation = amount;\\r\\n  }\\r\\n\\r\\n  function setInitialTokenPrice(uint96 price) external onlyOwner {\\r\\n    require(price > 0);\\r\\n    initialTokenPrice = price;\\r\\n  }\\r\\n\\r\\n  function setMinterAddress(uint256 id, address newAddress) external {\\r\\n    TokenInfo storage info = tokenInfo[id];\\r\\n    require(msg.sender == info.minter && msg.sender != address(0));\\r\\n    info.minter = newAddress;\\r\\n  }\\r\\n\\r\\n  function setMintingCost(uint256 cost) external onlyOwner {\\r\\n    mintingCost = cost;\\r\\n  }\\r\\n\\r\\n  function setMintingDiscountLimit(uint256 limit) external onlyOwner {\\r\\n    require(limit > 0);\\r\\n    discountLimit = limit;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool status) external onlyOwner {\\r\\n    if (status) {\\r\\n      _pause();\\r\\n    } else {\\r\\n      _unpause();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setPriceIncreaseTenths(uint8 tenths) external onlyOwner {\\r\\n    require(tenths < 2**8 && tenths >= 11); // price guaranteed to increase by 1.1x or more\\r\\n    priceIncreaseTenths = tenths;\\r\\n  }\\r\\n\\r\\n  function withdraw() external onlyOwner {\\r\\n    msg.sender.transfer(address(this).balance);\\r\\n  }\\r\\n\\r\\n  function _multiplyByTenths(uint256 value, uint256 tenths) internal pure returns (uint256) {\\r\\n    return value.div(10).mul(tenths);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PausableNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport './NFT.sol';\\r\\nimport './Pausable.sol';\\r\\n\\r\\n/**\\r\\n * @dev NFT with pausable token transfers and minting\\r\\n\\r\\n */\\r\\nabstract contract PausableNFT is NFT, Pausable {\\r\\n  /**\\r\\n   * @dev Based on {ERC1155-_beforeTokenTransfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the contract must not be paused.\\r\\n   */\\r\\n  function _beforeTokenTransfer() internal virtual override {\\r\\n    require(!paused(), 'PausableNFT: token transfer while paused');\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n// import 'hardhat/console.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\r\\n\\r\\ncontract NFT {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  event Buy(address indexed from, address indexed to, uint256 id, uint256 price);\\r\\n  event Mint(address indexed account, uint256 id);\\r\\n\\r\\n  uint88 public gasCompensation; // adjusted so that early buyers may profit while price increase is below gas costs\\r\\n  uint96 public initialTokenPrice;\\r\\n  uint256 public nextTokenId = 0;\\r\\n  uint8 public priceIncreaseTenths;\\r\\n\\r\\n  struct TokenInfo {\\r\\n    address minter;\\r\\n    uint8 previousPriceIncrease;\\r\\n    uint88 previousGasCompensation;\\r\\n    address owner;\\r\\n    uint96 previousPrice;\\r\\n  }\\r\\n\\r\\n  mapping(uint256 => TokenInfo) public tokenInfo;\\r\\n\\r\\n  function _beforeTokenTransfer() internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev checks if transfer is allowed and emits Buy\\r\\n   */\\r\\n  function _bought(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 id,\\r\\n    uint256 price\\r\\n  ) internal {\\r\\n    require(to != address(0), 'Transfer to the zero address');\\r\\n\\r\\n    _beforeTokenTransfer();\\r\\n    emit Buy(from, to, id, price);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates 1 token and assigns minter, price increase, gas compensation and price\\r\\n   *\\r\\n   * Emits a {Mint} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account) internal virtual {\\r\\n    require(account != address(0), 'NFT: mint to the zero address');\\r\\n    _beforeTokenTransfer();\\r\\n\\r\\n    tokenInfo[nextTokenId] = TokenInfo(account, priceIncreaseTenths, gasCompensation, account, initialTokenPrice);\\r\\n\\r\\n    emit Mint(msg.sender, nextTokenId);\\r\\n    nextTokenId++;\\r\\n  }\\r\\n\\r\\n  function _toUint96(uint256 value) internal pure returns (uint96) {\\r\\n    require(value < 2**96, \\\"_toUint96: value doesn't fit in 96 bits\\\");\\r\\n    return uint96(value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!_paused, 'Pausable: paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(_paused, 'Pausable: not paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    // emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    // emit Unpaused(_msgSender());\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"_gasCompensation\",\"type\":\"uint88\"},{\"internalType\":\"uint96\",\"name\":\"_initialTokenPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_mintingCost\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_priceIncreaseTenths\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"buyMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calcBuyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcMintManyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasCompensation\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokenPrice\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIncreaseTenths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"name\":\"setGasCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"name\":\"setInitialTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setMintingCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMintingDiscountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tenths\",\"type\":\"uint8\"}],\"name\":\"setPriceIncreaseTenths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"previousPriceIncrease\",\"type\":\"uint8\"},{\"internalType\":\"uint88\",\"name\":\"previousGasCompensation\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"previousPrice\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KryptoWriteAd","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}