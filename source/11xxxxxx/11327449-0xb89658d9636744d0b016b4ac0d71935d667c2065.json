{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IPowerswapFactory.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IPowerswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function rSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setrSetter(address) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPowerswapERC20.sol\r\n\r\n//pragma solidity = 0.5.16\r\n\r\ninterface IPowerswapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPowerswapPair.sol\r\n\r\n\r\ninterface IPowerswapPair is IPowerswapERC20{\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function getBalances() external view returns(uint _balanceBuy0, uint _balanceBuy1, uint _balanceSell0, uint _balanceSell1);\r\n    function getPrices() external view returns(uint _priceBuy, uint _priceSell);\r\n    function setR(uint16) external;\r\n    function getR() external view returns(uint16);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function updateVirtualBalances() external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n\r\nlibrary SafeMath{\r\n    function add(uint x, uint y) internal pure returns(uint z){\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n    \r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/PowerswapERC20.sol\r\n\r\n\r\nabstract contract PowerswapERC20 is IPowerswapERC20{\r\n    using SafeMath for uint;\r\n    \r\n    string public constant override name = 'Powerswap';\r\n    string public constant override symbol = 'POWER';\r\n    uint8 public constant override decimals = 18;\r\n    uint public override totalSupply;\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n    \r\n    bytes32 public override DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public override nonces; \r\n    \r\n//    event Approval(address indexed owner, address indexed spender, uint value);\r\n//    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    \r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n    \r\n    function _burn(address from, uint value) internal{\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint value) private{\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint value) private{\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    function approve(address spender, uint value) external override returns(bool){\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint value) external override returns(bool){\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n    }    \r\n    \r\n    function transferFrom(address from, address to, uint value) external override returns(bool){\r\n        if(allowance[from][msg.sender] != uint(-1)){\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override{\r\n        require(deadline >= block.timestamp, 'Powerswap: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Powerswap: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Math.sol\r\n\r\n\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n    \r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n    \r\n        // cbrt = cube root\r\n   function cbrt(uint y) internal pure returns(uint z){\r\n       if(y > 7){\r\n           z = y;\r\n           uint x = y/3 + 1;\r\n           while(x < z){\r\n               z = x;\r\n               x = (2*x + y/(x*x))/3;\r\n           }\r\n       }else if(y != 0){\r\n           z = 1;\r\n       }\r\n   }\r\n\r\n}\r\n\r\n// File: contracts/libraries/UQ112x112.sol\r\n\r\n\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows.\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IPowerswapCallee.sol\r\n\r\n\r\n\r\ninterface IPowerswapCallee {\r\n    function powerswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/PowerswapPair.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PowerswapPair is IPowerswapPair, PowerswapERC20{\r\n    using SafeMath for uint;\r\n    using SafeMath for uint112;\r\n    using UQ112x112 for uint224;\r\n    uint8 private constant RESOLUTION = 112;\r\n\r\n    \r\n    uint public constant override MINIMUM_LIQUIDITY = 1000;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    \r\n    address public override factory;\r\n    address public override token0; // 0 for 'X', 1 for 'Y';\r\n    address public override token1;\r\n    uint16  private  R; // R = r*(2**16-1) = r*65535; r = R/(2**16-1); rounding error\r\n    \r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1;\r\n    \r\n    uint private balanceBuy0; // Buy means \"Buy 1 & Sell 0\";  Sell means \"Sell 1 & Buy 0\";\r\n    uint private balanceBuy1;\r\n    uint private balanceSell0; \r\n    uint private balanceSell1;\r\n    \r\n    uint private priceBuy; // P_{1/0} \r\n    uint private priceSell; //P_{0/1}\r\n\r\n    uint32 private blockTimestampLast;\r\n    \r\n    uint public override price0CumulativeLast;\r\n    uint public override price1CumulativeLast;\r\n    uint public override kLast; // reserveReal0 * reserveReal1, as of immediately after the most recent liquidity event \r\n    \r\n    uint private unlocked = 1;\r\n    modifier lock(){\r\n        require(unlocked == 1, 'Powerswap: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    function getReserves() public view override returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast){\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n    \r\n    function getBalances() public view override returns(uint _balanceBuy0, uint _balanceBuy1, uint _balanceSell0, uint _balanceSell1){\r\n        _balanceBuy0  = balanceBuy0;\r\n        _balanceBuy1  = balanceBuy1;\r\n        _balanceSell0 = balanceSell0;\r\n        _balanceSell1 = balanceSell1;\r\n    }\r\n    \r\n    function getPrices() public view override returns(uint _priceBuy, uint _priceSell){\r\n        _priceBuy   = priceBuy;\r\n        _priceSell  = priceSell;\r\n    }\r\n    \r\n    function getR() public view override returns(uint16 _R){\r\n        _R = R;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private{\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Powerswap: TRANSFER_FAILED');\r\n    }\r\n\r\n    constructor() public{\r\n        factory = msg.sender;\r\n    } \r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _token0, address _token1) external override{\r\n        require(msg.sender == factory, 'Powerswap: FORBIDDEN');\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        R = 32767;  // default r = 0.5;\r\n    }\r\n\r\n    function setR(uint16 _R) external override {\r\n        address _rSetter = IPowerswapFactory(factory).rSetter();\r\n        require(msg.sender == _rSetter, 'Powerswap: FORBIDDEN');\r\n        R = _R;\r\n    }\r\n\r\n    //update reserves and, on the first call per block, price accumulators\r\n    function _updateAtTheInitialBlock(uint balance0, uint balance1) private{\r\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Powerswap: OVERFLOW');\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n\r\n        balanceBuy0  = balance0;\r\n        balanceBuy1  = balance1;\r\n        balanceSell0 = balance0;\r\n        balanceSell1 = balance1;\r\n\r\n        priceBuy     = (balance0 << RESOLUTION) / balance1; // original price * 2**112\r\n        priceSell    = (balance1 << RESOLUTION) / balance0;\r\n        \r\n        blockTimestampLast = uint32(block.timestamp % 2**32);\r\n\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    function _updateAtTheFirstCallInEachBlock(uint112 _reserve0, uint112 _reserve1, uint32 timeElapsed) private{\r\n        // * never overflow, and + overflow is desired\r\n        balanceBuy0  = _reserve0;\r\n        balanceBuy1  = _reserve1;\r\n        balanceSell0 = _reserve0;\r\n        balanceSell1 = _reserve1;\r\n        \r\n        uint _priceBuy  = priceBuy;\r\n        uint _priceSell = priceSell;\r\n        uint16 _R = R;\r\n        priceBuy  = (_priceBuy.mul(_reserve1).mul(_R).add((uint(_reserve0) << RESOLUTION).mul(65535-_R)))/(_reserve1.mul(65535));\r\n        priceSell = (_priceSell.mul(_reserve0).mul(_R).add((uint(_reserve1) << RESOLUTION).mul(65535-_R)))/(_reserve0.mul(65535));\r\n\r\n        price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\r\n        price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\r\n    }\r\n\r\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private{\r\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Powerswap: OVERFLOW');\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\r\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\r\n            _updateAtTheFirstCallInEachBlock(reserve0, reserve1, timeElapsed);\r\n            blockTimestampLast = blockTimestamp;\r\n        }else{\r\n        uint _balanceBuy0  = balanceBuy0;\r\n        uint _balanceBuy1  = balanceBuy1;\r\n        uint _balanceSell0 = balanceSell0;\r\n        uint _balanceSell1 = balanceSell1;\r\n        \r\n        balanceBuy0     = _balanceBuy0.add(balance0).sub(_reserve0); \r\n        balanceBuy1     = _balanceBuy1.add(balance1).sub(_reserve1);\r\n        balanceSell0    = _balanceSell0.add(balance0).sub(_reserve0);\r\n        balanceSell1    = _balanceSell1.add(balance1).sub(_reserve1);\r\n        }\r\n\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n    \r\n\r\n    function _updateAfterSwap(\r\n        uint amount0In,  uint amount1In,\r\n        uint amount0Out, uint amount1Out,\r\n        uint balance0,   uint balance1) private {\r\n/*\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\r\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\r\n        _updateAtTheFirstCallInEachBlock(_reserve0, _reserve1, timeElapsed);\r\n        blockTimestampLast = blockTimestamp;\r\n        }\r\n*/\r\n        if(amount0In > 0){\r\n        balanceBuy0 += amount0In;\r\n        balanceBuy1 -= amount1Out;\r\n        }else{\r\n        balanceSell0 -= amount0Out;\r\n        balanceSell1 += amount1In;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n// if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn){\r\n        address feeTo = IPowerswapFactory(factory).feeTo(); \r\n        feeOn = feeTo != address(0);\r\n        uint _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\r\n                uint rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint denominator = rootK.mul(5).add(rootKLast);\r\n                    uint liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    \r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock override returns(uint liquidity){\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); //gas savings\r\n        uint balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint balance1 = IERC20(token1).balanceOf(address(this));\r\n        uint amount0  = balance0.sub(_reserve0);\r\n        uint amount1  = balance1.sub(_reserve1);\r\n        \r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if(_totalSupply == 0){\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n            _updateAtTheInitialBlock(balance0, balance1);\r\n        }else{\r\n            _update(balance0, balance1, _reserve0, _reserve1);\r\n            liquidity = Math.min(_totalSupply.mul(amount0.mul(98))/(_reserve0.mul(100).add(amount0.mul(2))),\r\n                                 _totalSupply.mul(amount1.mul(98))/(_reserve1.mul(100).add(amount1.mul(2)))); // F = 0.98\r\n            }\r\n        require(liquidity > 0, 'Powerswap: INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n        if(feeOn) {\r\n        kLast = uint(_reserve0).mul(_reserve1);\r\n        } // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n    \r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external lock override returns(uint amount0, uint amount1){\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); //gas savings\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        uint balance0 = IERC20(_token0).balanceOf(address(this)); // this = pair\r\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];\r\n        \r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        uint numerator = _totalSupply.mul(100).sub(liquidity.mul(2));\r\n        uint denominator = (_totalSupply.mul(_totalSupply).mul(98)/liquidity).add(1);\r\n        amount0 = balance0.mul(numerator)/denominator; // F=0.98 here\r\n        amount1 = balance1.mul(numerator)/denominator;\r\n        require(amount0 > 0 && amount1 > 0, 'Powerswap: INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(token0).balanceOf(address(this));\r\n        balance1 = IERC20(token1).balanceOf(address(this));\r\n        \r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn){\r\n        kLast = uint(_reserve0).mul(_reserve1);\r\n        } // reserve0 and reserve1 are up-to-date // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    } \r\n     \r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock override{\r\n        require(amount0Out > 0 || amount1Out > 0, 'Powerswap: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); //gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Powerswap: INSUFFICIENT_LIQUIDITY');\r\n        \r\n        uint balance0;\r\n        uint balance1;\r\n        { // scope for _token{0,1}, avoids stack too deep errors\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        require(to != _token0 && to != _token1, 'Powerswap: INVALID_TO');\r\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n        if (data.length > 0){IPowerswapCallee(to).powerswapCall(msg.sender, amount0Out, amount1Out, data);}\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        require(amount0In > 0 || amount1In > 0, 'Powerswap: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(amount0In <= uint112(-1) && amount1In <= uint112(-1), 'Powerswap: OVERFLOW');\r\n        _updateAfterSwap(amount0In, amount1In, amount0Out, amount1Out, balance0, balance1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);    \r\n    }\r\n    \r\n    function updateVirtualBalances() external lock override{\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\r\n        uint112 _reserve0 = reserve0;\r\n        uint112 _reserve1 = reserve1;\r\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\r\n            _updateAtTheFirstCallInEachBlock(_reserve0, _reserve1, timeElapsed);\r\n            blockTimestampLast = blockTimestamp;\r\n        }\r\n    }\r\n    \r\n    // force balances to match reserves \r\n    function skim(address to) external lock override{\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n\r\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\r\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\r\n    }\r\n    \r\n    // force reserves to match balances\r\n    function sync() external lock override{\r\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\r\n    }\r\n}\r\n\r\n// File: contracts/PowerswapFactory.sol\r\n\r\n\r\n\r\n\r\ncontract PowerswapFactory is IPowerswapFactory{\r\n    address public override feeTo;\r\n    address public override feeToSetter;\r\n    address public override rSetter;\r\n\r\n    mapping(address => mapping(address => address)) public override getPair;\r\n    address[] public override allPairs;\r\n\r\n    constructor(address _feeToSetter, address _rSetter) public{\r\n        feeToSetter = _feeToSetter;\r\n        rSetter = _rSetter;\r\n    }\r\n    \r\n    function allPairsLength() external view override returns(uint){\r\n        return allPairs.length;\r\n    }\r\n    \r\n    function createPair(address tokenA, address tokenB) external override returns(address pair){\r\n        require(tokenA != tokenB, 'Powerswap: IDENTICAL_ADDRESSES');\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'Powerswap: ZERO_ADDRESSES');\r\n        require(getPair[token0][token1] == address(0), 'Powerswap: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(PowerswapPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly{\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt) \r\n        }\r\n        IPowerswapPair(pair).initialize(token0, token1);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair;\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n    \r\n    function setFeeTo(address _feeTo) external override {\r\n        require(msg.sender == feeToSetter, 'Powerswap: FORBIDDEN');\r\n        feeTo = _feeTo;\r\n    }\r\n    \r\n    function setFeeToSetter(address _feeToSetter) external override{\r\n        require(msg.sender == feeToSetter, 'Powerswap: FORBIDDEN');\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function setrSetter(address _rSetter) external override{\r\n        require(msg.sender == rSetter, 'Powerswap: FORBIDDEN');\r\n        rSetter = _rSetter;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rSetter\",\"type\":\"address\"}],\"name\":\"setrSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PowerswapFactory","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cd6289e53f23a0024e40c638caa55d8329373e91000000000000000000000000cd6289e53f23a0024e40c638caa55d8329373e91","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ae4a3f4a6bdce7d5e7bf3f8d4c672582ae951f1411f622628d8835efdd9af39"}]}