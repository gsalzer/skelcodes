{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-22\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function burnTokens(uint256 _amount) external;\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\ncontract Sale is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n\r\n    //@dev ERC20 token address and decimals\r\n    address public tokenAddress;\r\n    uint256 public tokenDecimals = 18;\r\n    \r\n    //@dev amount of tokens per ether 100 indicates 1 token per eth\r\n    uint256 public tokenRatePerEth = 125_00;\r\n    //@dev decimal for tokenRatePerEth,\r\n    //2 means if you want 100 tokens per eth then set the rate as 100 + number of rateDecimals i.e => 10000\r\n    uint256 public rateDecimals = 2;\r\n    \r\n    //@dev max and min token buy limit per account\r\n    uint256 public minEthLimit = 100 finney;\r\n    uint256 public maxEthLimit = 1 ether;\r\n    \r\n    \r\n    address[] internal routerArray;\r\n\r\n    \r\n    \r\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        routerArray = new address[](2);\r\n        routerArray[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; //weth\r\n        routerArray[1] = 0x2d6a03A3AA2e11ff7aef962e7bb0025B6F183F72; //token\r\n    }\r\n    \r\n    function setTokenAddress(address token) external onlyOwner {\r\n        require(tokenAddress == address(0), \"Token address is already set.\");\r\n        require(token != address(0), \"Token address zero not allowed.\");\r\n        \r\n        tokenAddress = token;\r\n    }\r\n    \r\n    function setTokenDecimals(uint256 decimals) external onlyOwner {\r\n       tokenDecimals = decimals;\r\n    }\r\n    \r\n    function setMinEthLimit(uint256 amount) external onlyOwner {\r\n        minEthLimit = amount;    \r\n    }\r\n    \r\n    function setMaxEthLimit(uint256 amount) external onlyOwner {\r\n        maxEthLimit = amount;    \r\n    }\r\n    \r\n    function setTokenRatePerEth(uint256 rate) external onlyOwner {\r\n        tokenRatePerEth = rate;\r\n    }\r\n    \r\n    function setRateDecimals(uint256 decimals) external onlyOwner {\r\n        rateDecimals = decimals;\r\n    }\r\n    \r\n    receive() external payable{\r\n        \r\n        //@dev calculate the amount of tokens to transfer for the given eth\r\n        uint256 tokenAmount = getTokensPerEth(msg.value);\r\n        \r\n        require(IToken(tokenAddress).transfer(msg.sender, tokenAmount), \"Insufficient balance of sale contract!\");\r\n                \r\n        //Buy DIM from Uniswap and send to burn\r\n        uint256 transactionTime = now + 1 hours;\r\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens.value(msg.value)(0,routerArray,0x000000000000000000000000000000000000dEaD,transactionTime);\r\n        \r\n    }\r\n    \r\n    function getTokensPerEth(uint256 amount) public view returns(uint256) {\r\n        return amount.mul(tokenRatePerEth).div(\r\n            10**(uint256(18).sub(tokenDecimals).add(rateDecimals))\r\n            );\r\n    }\r\n    \r\n    //In case of emergency\r\n    function getUnsoldTokens() external onlyOwner {\r\n        IToken(tokenAddress).transfer(owner, IToken(tokenAddress).balanceOf(address(this)) );\r\n    }\r\n    \r\n\r\n    //In case of emergency\r\n    function getStuckEth() external onlyOwner {\r\n        uint256 ethValue = address(this).balance;\r\n        owner.transfer(ethValue);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxEthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinEthLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setRateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRatePerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRatePerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9551b494b6ae6bef0103741954d778e4ab62c696bb82be900de2bce907595d92"}]}