{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive vaults via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Profitable.sol\\\";\\n\\ncontract Controllable is Profitable {\\n    mapping(address =\\u003e bool) private verifiedControllers;\\n    uint256 private numControllers = 0;\\n\\n    event ControllerSet(address account, bool isVerified);\\n    event DirectRedemption(uint256 punkId, address by, address indexed to);\\n\\n    function isController(address account) public view returns (bool) {\\n        return verifiedControllers[account];\\n    }\\n\\n    function getNumControllers() public view returns (uint256) {\\n        return numControllers;\\n    }\\n\\n    function setController(address account, bool isVerified)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        require(isVerified != verifiedControllers[account], \\\"Already set\\\");\\n        if (isVerified) {\\n            numControllers++;\\n        } else {\\n            numControllers--;\\n        }\\n        verifiedControllers[account] = isVerified;\\n        emit ControllerSet(account, isVerified);\\n    }\\n\\n    modifier onlyController() {\\n        require(isController(_msgSender()), \\\"Not a controller\\\");\\n        _;\\n    }\\n\\n    function directRedeem(uint256 tokenId, address to) public onlyController {\\n        require(getERC20().balanceOf(to) \\u003e= 10**18, \\\"ERC20 balance too small\\\");\\n        bool toSelf = (to == address(this));\\n        require(\\n            toSelf || (getERC20().allowance(to, address(this)) \\u003e= 10**18),\\n            \\\"ERC20 allowance too small\\\"\\n        );\\n        require(getReserves().contains(tokenId), \\\"Not in holdings\\\");\\n        getERC20().burnFrom(to, 10**18);\\n        getReserves().remove(tokenId);\\n        if (!toSelf) {\\n            getCPM().transferPunk(to, tokenId);\\n        }\\n        emit DirectRedemption(tokenId, _msgSender(), to);\\n    }\\n}\\n\"},\"CryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\ncontract CryptoPunksMarket {\\n    address owner;\\n\\n    string public standard = \\\"CryptoPunks\\\";\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n\\n    uint256 public nextPunkIndexToAssign = 0;\\n\\n    bool public allPunksAssigned = false;\\n    uint256 public punksRemainingToAssign = 0;\\n\\n    //mapping (address =\\u003e uint) public addressToPunkIndex;\\n    mapping(uint256 =\\u003e address) public punkIndexToAddress;\\n\\n    /* This creates an array with all balances */\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    struct Offer {\\n        bool isForSale;\\n        uint256 punkIndex;\\n        address seller;\\n        uint256 minValue; // in ether\\n        address onlySellTo; // specify to sell only to a specific person\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint256 punkIndex;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\\n    mapping(uint256 =\\u003e Offer) public punksOfferedForSale;\\n\\n    // A record of the highest punk bid\\n    mapping(uint256 =\\u003e Bid) public punkBids;\\n\\n    mapping(address =\\u003e uint256) public pendingWithdrawals;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    constructor() public payable {\\n        //        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\\n        owner = msg.sender;\\n        totalSupply = 10000; // Update total supply\\n        punksRemainingToAssign = totalSupply;\\n        name = \\\"CRYPTOPUNKS\\\"; // Set the name for display purposes\\n        symbol = \\\"Ͼ\\\"; // Set the symbol for display purposes\\n        decimals = 0; // Amount of decimals for display purposes\\n    }\\n\\n    function setInitialOwner(address to, uint256 punkIndex) public {\\n        // require(msg.sender == owner, \\\"msg.sender != owner\\\");\\n        require(!allPunksAssigned);\\n        require(punkIndex \\u003c 10000);\\n        if (punkIndexToAddress[punkIndex] != to) {\\n            if (punkIndexToAddress[punkIndex] != address(0)) {\\n                balanceOf[punkIndexToAddress[punkIndex]]--;\\n            } else {\\n                punksRemainingToAssign--;\\n            }\\n            punkIndexToAddress[punkIndex] = to;\\n            balanceOf[to]++;\\n            emit PunkTransfer(address(0), to, punkIndex);\\n        }\\n    }\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) public {\\n        require(msg.sender == owner);\\n        uint256 n = addresses.length;\\n        for (uint256 i = 0; i \\u003c n; i++) {\\n            setInitialOwner(addresses[i], indices[i]);\\n        }\\n    }\\n\\n    function allInitialOwnersAssigned() public {\\n        require(msg.sender == owner);\\n        allPunksAssigned = true;\\n    }\\n\\n    function getPunk(uint256 punkIndex) public {\\n        // require(allPunksAssigned);\\n        require(punksRemainingToAssign != 0);\\n        require(punkIndexToAddress[punkIndex] == address(0));\\n        require(punkIndex \\u003c 10000);\\n        punkIndexToAddress[punkIndex] = msg.sender;\\n        balanceOf[msg.sender]++;\\n        punksRemainingToAssign--;\\n        emit Assign(msg.sender, punkIndex);\\n    }\\n\\n    // Transfer ownership of a punk to another user without requiring payment\\n    function transferPunk(address to, uint256 punkIndex) public {\\n        // // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] == msg.sender);\\n        require(punkIndex \\u003c 10000);\\n        if (punksOfferedForSale[punkIndex].isForSale) {\\n            punkNoLongerForSale(punkIndex);\\n        }\\n        punkIndexToAddress[punkIndex] = to;\\n        balanceOf[msg.sender]--;\\n        balanceOf[to]++;\\n        emit Transfer(msg.sender, to, 1);\\n        emit PunkTransfer(msg.sender, to, punkIndex);\\n        // Check for the case where there is a bid from the new owner and revault it.\\n        // Any other bid can stay in place.\\n        Bid storage bid = punkBids[punkIndex];\\n        if (bid.bidder == to) {\\n            // Kill bid and revault value\\n            pendingWithdrawals[to] += bid.value;\\n            punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        }\\n    }\\n\\n    function punkNoLongerForSale(uint256 punkIndex) public {\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] == msg.sender);\\n        require(punkIndex \\u003c 10000);\\n        punksOfferedForSale[punkIndex] = Offer(\\n            false,\\n            punkIndex,\\n            msg.sender,\\n            0,\\n            address(0)\\n        );\\n        emit PunkNoLongerForSale(punkIndex);\\n    }\\n\\n    function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei)\\n        public\\n    {\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] == msg.sender);\\n        require(punkIndex \\u003c 10000);\\n        punksOfferedForSale[punkIndex] = Offer(\\n            true,\\n            punkIndex,\\n            msg.sender,\\n            minSalePriceInWei,\\n            address(0)\\n        );\\n        emit PunkOffered(punkIndex, minSalePriceInWei, address(0));\\n    }\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) public {\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] == msg.sender);\\n        require(punkIndex \\u003c 10000);\\n        punksOfferedForSale[punkIndex] = Offer(\\n            true,\\n            punkIndex,\\n            msg.sender,\\n            minSalePriceInWei,\\n            toAddress\\n        );\\n        emit PunkOffered(punkIndex, minSalePriceInWei, toAddress);\\n    }\\n\\n    function buyPunk(uint256 punkIndex) public payable {\\n        // require(allPunksAssigned);\\n        Offer storage offer = punksOfferedForSale[punkIndex];\\n        require(punkIndex \\u003c 10000);\\n        require(offer.isForSale); // punk not actually for sale\\n        (offer.onlySellTo == address(0) || offer.onlySellTo == msg.sender); // punk not supposed to be sold to this user\\n        require(msg.value \\u003e= offer.minValue); // Didn\\u0027t send enough ETH\\n        require(offer.seller == punkIndexToAddress[punkIndex]); // Seller no longer owner of punk\\n\\n        address seller = offer.seller;\\n\\n        punkIndexToAddress[punkIndex] = msg.sender;\\n        balanceOf[seller]--;\\n        balanceOf[msg.sender]++;\\n        emit Transfer(seller, msg.sender, 1);\\n\\n        punkNoLongerForSale(punkIndex);\\n        pendingWithdrawals[seller] += msg.value;\\n        emit PunkBought(punkIndex, msg.value, seller, msg.sender);\\n\\n        // Check for the case where there is a bid from the new owner and revault it.\\n        // Any other bid can stay in place.\\n        Bid storage bid = punkBids[punkIndex];\\n        if (bid.bidder == msg.sender) {\\n            // Kill bid and revault value\\n            pendingWithdrawals[msg.sender] += bid.value;\\n            punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        }\\n    }\\n\\n    function withdraw() public {\\n        // require(allPunksAssigned);\\n        uint256 amount = pendingWithdrawals[msg.sender];\\n        // Remember to zero the pending revault before\\n        // sending to prevent re-entrancy attacks\\n        pendingWithdrawals[msg.sender] = 0;\\n        msg.sender.transfer(amount);\\n    }\\n\\n    function enterBidForPunk(uint256 punkIndex) public payable {\\n        require(punkIndex \\u003c 10000);\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] != address(0));\\n        require(punkIndexToAddress[punkIndex] != msg.sender);\\n        require(msg.value != 0);\\n        Bid storage existing = punkBids[punkIndex];\\n        require(msg.value \\u003e existing.value);\\n        if (existing.value \\u003e 0) {\\n            // Revault the failing bid\\n            pendingWithdrawals[existing.bidder] += existing.value;\\n        }\\n        punkBids[punkIndex] = Bid(true, punkIndex, msg.sender, msg.value);\\n        emit PunkBidEntered(punkIndex, msg.value, msg.sender);\\n    }\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) public {\\n        require(punkIndex \\u003c 10000);\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] == msg.sender);\\n        address seller = msg.sender;\\n        Bid storage bid = punkBids[punkIndex];\\n        require(bid.value != 0);\\n        require(bid.value \\u003e= minPrice);\\n\\n        punkIndexToAddress[punkIndex] = bid.bidder;\\n        balanceOf[seller]--;\\n        balanceOf[bid.bidder]++;\\n        emit Transfer(seller, bid.bidder, 1);\\n\\n        punksOfferedForSale[punkIndex] = Offer(\\n            false,\\n            punkIndex,\\n            bid.bidder,\\n            0,\\n            address(0)\\n        );\\n        uint256 amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        pendingWithdrawals[seller] += amount;\\n        emit PunkBought(punkIndex, bid.value, seller, bid.bidder);\\n    }\\n\\n    function withdrawBidForPunk(uint256 punkIndex) public {\\n        require(punkIndex \\u003c 10000);\\n        // require(allPunksAssigned);\\n        require(punkIndexToAddress[punkIndex] != address(0));\\n        require(punkIndexToAddress[punkIndex] != msg.sender);\\n        Bid storage bid = punkBids[punkIndex];\\n        require(bid.bidder == msg.sender);\\n        emit PunkBidWithdrawn(punkIndex, bid.value, msg.sender);\\n        uint256 amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\n        // Revault the bid money\\n        msg.sender.transfer(amount);\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length \\u003e index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    function _changeName(string memory name_) internal {\\n        _name = name_;\\n    }\\n\\n    function _changeSymbol(string memory symbol_) internal {\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        virtual\\n    {}\\n}\\n\"},\"ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"},\"ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\ninterface ICryptoPunksMarket {\\n    struct Offer {\\n        bool isForSale;\\n        uint256 punkIndex;\\n        address seller;\\n        uint256 minValue;\\n        address onlySellTo;\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint256 punkIndex;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function setInitialOwners(\\n        address[] calldata addresses,\\n        uint256[] calldata indices\\n    ) external;\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei)\\n        external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function buyPunk(uint256 punkIndex) external;\\n\\n    function withdraw() external;\\n\\n    function enterBidForPunk(uint256 punkIndex) external;\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function punkIndexToAddress(uint256 punkIndex) external returns (address);\\n    function punksOfferedForSale(uint256 punkIndex)\\n        external\\n        returns (\\n            bool isForSale,\\n            uint256 _punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function balanceOf(address user) external returns (uint256);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"IPunkToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IERC20.sol\\\";\\n\\npragma solidity 0.6.8;\\n\\ninterface IPunkToken is IERC20 {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function changeName(string calldata name) external;\\n\\n    function changeSymbol(string calldata symbol) external;\\n\\n    function setVaultAddress(address vaultAddress) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"},\"Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Randomizable.sol\\\";\\n\\ncontract Manageable is Randomizable {\\n    event MigrationComplete(address to);\\n    event TokenNameChange(string name);\\n    event TokenSymbolChange(string symbol);\\n\\n    function migrate(address to, uint256 max) public onlyOwner whenNotLockedL {\\n        uint256 count = 0;\\n        uint256 reservesLength = getReserves().length();\\n        for (uint256 i = 0; i \\u003c reservesLength; i++) {\\n            if (count \\u003e= max) {\\n                return;\\n            }\\n            uint256 tokenId = getReserves().at(0);\\n            getCPM().transferPunk(to, tokenId);\\n            getReserves().remove(tokenId);\\n            count = count.add(1);\\n        }\\n        getERC20().transferOwnership(to);\\n        emit MigrationComplete(to);\\n    }\\n\\n    function changeTokenName(string memory newName)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        getERC20().changeName(newName);\\n        emit TokenNameChange(newName);\\n    }\\n\\n    function changeTokenSymbol(string memory newSymbol)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        getERC20().changeSymbol(newSymbol);\\n        emit TokenSymbolChange(newSymbol);\\n    }\\n\\n    function setReverseLink() public onlyOwner {\\n        getERC20().setVaultAddress(address(this));\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Pausable is Ownable {\\n    bool private isPaused = false;\\n\\n    event Paused();\\n    event Unpaused();\\n\\n    function getIsPaused() public view returns (bool) {\\n        return isPaused;\\n    }\\n\\n    function pause() public onlyOwner {\\n        isPaused = true;\\n    }\\n\\n    function unpause() public onlyOwner {\\n        isPaused = false;\\n    }\\n\\n    modifier whenPaused {\\n        require(isPaused, \\\"Contract is not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused {\\n        require(!isPaused, \\\"Contract is paused\\\");\\n        _;\\n    }\\n}\\n\"},\"Profitable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\n\\nimport \\\"./Timelocked.sol\\\";\\n\\ncontract Profitable is Timelocked {\\n    mapping(address =\\u003e bool) private verifiedIntegrators;\\n    uint256 private numIntegrators = 0;\\n    uint256[] private mintFees = [0, 0, 0];\\n    uint256[] private burnFees = [0, 0, 0];\\n    uint256[] private dualFees = [0, 0, 0];\\n    uint256[] private supplierBounty = [(5 * 10**17), 10];\\n\\n    event MintFeesSet(uint256[] mintFees);\\n    event BurnFeesSet(uint256[] burnFees);\\n    event DualFeesSet(uint256[] dualFees);\\n    event SupplierBountySet(uint256[] supplierBounty);\\n    event IntegratorSet(address account, bool isVerified);\\n    event Withdrawal(address to, uint256 amount);\\n\\n    function getMintFees() public view returns (uint256[] memory) {\\n        return mintFees;\\n    }\\n\\n    function getBurnFees() public view returns (uint256[] memory) {\\n        return burnFees;\\n    }\\n\\n    function getDualFees() public view returns (uint256[] memory) {\\n        return dualFees;\\n    }\\n\\n    function getSupplierBounty() public view returns (uint256[] memory) {\\n        return supplierBounty;\\n    }\\n\\n    function _getMintFees() internal view returns (uint256[] storage) {\\n        return mintFees;\\n    }\\n\\n    function _getBurnFees() internal view returns (uint256[] storage) {\\n        return burnFees;\\n    }\\n\\n    function _getDualFees() internal view returns (uint256[] storage) {\\n        return dualFees;\\n    }\\n\\n    function setMintFees(uint256[] memory newMintFees)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        require(newMintFees.length == 3, \\\"Wrong length\\\");\\n        mintFees = newMintFees;\\n        emit MintFeesSet(newMintFees);\\n    }\\n\\n    function setBurnFees(uint256[] memory newBurnFees)\\n        public\\n        onlyOwner\\n        whenNotLockedL\\n    {\\n        require(newBurnFees.length == 3, \\\"Wrong length\\\");\\n        burnFees = newBurnFees;\\n        emit BurnFeesSet(newBurnFees);\\n    }\\n\\n    function setDualFees(uint256[] memory newDualFees)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        require(newDualFees.length == 3, \\\"Wrong length\\\");\\n        dualFees = newDualFees;\\n        emit DualFeesSet(newDualFees);\\n    }\\n\\n    function setSupplierBounty(uint256[] memory newSupplierBounty)\\n        public\\n        onlyOwner\\n        whenNotLockedL\\n    {\\n        require(newSupplierBounty.length == 2, \\\"Wrong length\\\");\\n        supplierBounty = newSupplierBounty;\\n        emit SupplierBountySet(newSupplierBounty);\\n    }\\n\\n    function isIntegrator(address account) public view returns (bool) {\\n        return verifiedIntegrators[account];\\n    }\\n\\n    function getNumIntegrators() public view returns (uint256) {\\n        return numIntegrators;\\n    }\\n\\n    function setIntegrator(address account, bool isVerified)\\n        public\\n        onlyOwner\\n        whenNotLockedM\\n    {\\n        require(isVerified != verifiedIntegrators[account], \\\"Already set\\\");\\n        if (isVerified) {\\n            numIntegrators = numIntegrators.add(1);\\n        } else {\\n            numIntegrators = numIntegrators.sub(1);\\n        }\\n        verifiedIntegrators[account] = isVerified;\\n        emit IntegratorSet(account, isVerified);\\n    }\\n\\n    function getFee(address account, uint256 numTokens, uint256[] storage fees)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 fee = 0;\\n        if (verifiedIntegrators[account]) {\\n            return 0;\\n        } else if (numTokens == 1) {\\n            fee = fees[0];\\n        } else {\\n            fee = fees[1] + numTokens * fees[2];\\n        }\\n        return fee;\\n    }\\n\\n    function getBurnBounty(uint256 numTokens) public view returns (uint256) {\\n        uint256 bounty = 0;\\n        uint256 reservesLength = getReserves().length();\\n        uint256 padding = supplierBounty[1];\\n        if (reservesLength - numTokens \\u003c= padding) {\\n            uint256 addedAmount = 0;\\n            for (uint256 i = 0; i \\u003c numTokens; i++) {\\n                if (reservesLength - i \\u003c= padding \\u0026\\u0026 reservesLength - i \\u003e 0) {\\n                    addedAmount += (supplierBounty[0] *\\n                        (padding - (reservesLength - i) + 1));\\n                }\\n            }\\n            bounty += addedAmount;\\n        }\\n        return bounty;\\n    }\\n\\n    function getMintBounty(uint256 numTokens) public view returns (uint256) {\\n        uint256 bounty = 0;\\n        uint256 reservesLength = getReserves().length();\\n        uint256 padding = supplierBounty[1];\\n        if (reservesLength \\u003c= padding) {\\n            uint256 addedAmount = 0;\\n            for (uint256 i = 0; i \\u003c numTokens; i++) {\\n                if (reservesLength + i \\u003c= padding) {\\n                    addedAmount += (supplierBounty[0] *\\n                        (padding - (reservesLength + i)));\\n                }\\n            }\\n            bounty += addedAmount;\\n        }\\n        return bounty;\\n    }\\n\\n    function withdraw(address payable to) public onlyOwner whenNotLockedM {\\n        uint256 balance = address(this).balance;\\n        to.transfer(balance);\\n        emit Withdrawal(to, balance);\\n    }\\n}\\n\"},\"PunkToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\n\\ncontract PunkToken is Context, Ownable, ERC20Burnable {\\n    address private vaultAddress;\\n\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(name, symbol)\\n    {\\n        _mint(msg.sender, 0);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function changeName(string memory name) public onlyOwner {\\n        _changeName(name);\\n    }\\n\\n    function changeSymbol(string memory symbol) public onlyOwner {\\n        _changeSymbol(symbol);\\n    }\\n\\n    function getVaultAddress() public view returns (address) {\\n        return vaultAddress;\\n    }\\n\\n    function setVaultAddress(address newAddress) public onlyOwner {\\n        vaultAddress = newAddress;\\n    }\\n}\\n\"},\"PunkVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Manageable.sol\\\";\\n\\ncontract PunkVault is Manageable {\\n    event TokenMinted(uint256 tokenId, address indexed to);\\n    event TokensMinted(uint256[] tokenIds, address indexed to);\\n    event TokenBurned(uint256 tokenId, address indexed to);\\n    event TokensBurned(uint256[] tokenIds, address indexed to);\\n\\n    constructor(address erc20Address, address cpmAddress) public {\\n        setERC20Address(erc20Address);\\n        setCpmAddress(cpmAddress);\\n    }\\n\\n    function getCryptoPunkAtIndex(uint256 index) public view returns (uint256) {\\n        return getReserves().at(index);\\n    }\\n\\n    function getReservesLength() public view returns (uint256) {\\n        return getReserves().length();\\n    }\\n\\n    function isCryptoPunkDeposited(uint256 tokenId) public view returns (bool) {\\n        return getReserves().contains(tokenId);\\n    }\\n\\n    function mintPunk(uint256 tokenId)\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        uint256 fee = getFee(_msgSender(), 1, _getMintFees());\\n        uint256 bounty = getMintBounty(1);\\n        if (fee \\u003e bounty) {\\n            uint256 differnce = fee.sub(bounty);\\n            require(msg.value \\u003e= differnce, \\\"Value too low\\\");\\n        }\\n        bool success = _mintPunk(tokenId, false);\\n        if (success \\u0026\\u0026 bounty \\u003e fee) {\\n            uint256 difference = bounty.sub(fee);\\n            uint256 balance = address(this).balance;\\n            address payable sender = _msgSender();\\n            if (balance \\u003e= difference) {\\n                sender.transfer(difference);\\n            } else {\\n                sender.transfer(balance);\\n            }\\n        }\\n    }\\n\\n    function _mintPunk(uint256 tokenId, bool partOfDualOp)\\n        private\\n        returns (bool)\\n    {\\n        address msgSender = _msgSender();\\n\\n        require(tokenId \\u003c 10000, \\\"tokenId too high\\\");\\n        (bool forSale, uint256 _tokenId, address seller, uint256 minVal, address buyer) = getCPM()\\n            .punksOfferedForSale(tokenId);\\n        require(_tokenId == tokenId, \\\"Wrong punk\\\");\\n        require(forSale, \\\"Punk not available\\\");\\n        require(buyer == address(this), \\\"Transfer not approved\\\");\\n        require(minVal == 0, \\\"Min value not zero\\\");\\n        require(msgSender == seller, \\\"Sender is not seller\\\");\\n        require(\\n            msgSender == getCPM().punkIndexToAddress(tokenId),\\n            \\\"Sender is not owner\\\"\\n        );\\n        getCPM().buyPunk(tokenId);\\n        getReserves().add(tokenId);\\n        if (!partOfDualOp) {\\n            uint256 tokenAmount = 10**18;\\n            getERC20().mint(msgSender, tokenAmount);\\n        }\\n        emit TokenMinted(tokenId, _msgSender());\\n        return true;\\n    }\\n\\n    function mintPunkMultiple(uint256[] memory tokenIds)\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n        whenNotInSafeMode\\n    {\\n        uint256 fee = getFee(_msgSender(), tokenIds.length, _getMintFees());\\n        uint256 bounty = getMintBounty(tokenIds.length);\\n        require(bounty \\u003e= fee || msg.value \\u003e= fee.sub(bounty), \\\"Value too low\\\");\\n        uint256 numTokens = _mintPunkMultiple(tokenIds, false);\\n        require(numTokens \\u003e 0, \\\"No tokens minted\\\");\\n        require(numTokens == tokenIds.length, \\\"Untransferable punks\\\");\\n        if (fee \\u003e bounty) {\\n            uint256 differnce = fee.sub(bounty);\\n            require(msg.value \\u003e= differnce, \\\"Value too low\\\");\\n        }\\n        if (bounty \\u003e fee) {\\n            uint256 difference = bounty.sub(fee);\\n            uint256 balance = address(this).balance;\\n            address payable sender = _msgSender();\\n            if (balance \\u003e= difference) {\\n                sender.transfer(difference);\\n            } else {\\n                sender.transfer(balance);\\n            }\\n        }\\n\\n    }\\n\\n    function _mintPunkMultiple(uint256[] memory tokenIds, bool partOfDualOp)\\n        private\\n        returns (uint256)\\n    {\\n        require(tokenIds.length \\u003e 0, \\\"No tokens\\\");\\n        require(tokenIds.length \\u003c= 100, \\\"Over 100 tokens\\\");\\n        uint256[] memory newTokenIds = new uint256[](tokenIds.length);\\n        uint256 numNewTokens = 0;\\n        address msgSender = _msgSender();\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(tokenId \\u003c 10000, \\\"tokenId too high\\\");\\n            (bool forSale, uint256 _tokenId, address seller, uint256 minVal, address buyer) = getCPM()\\n                .punksOfferedForSale(tokenId);\\n            bool rightToken = _tokenId == tokenId;\\n            bool isApproved = buyer == address(this);\\n            bool priceIsZero = minVal == 0;\\n            bool isSeller = msgSender == seller;\\n            bool isOwner = msgSender == getCPM().punkIndexToAddress(tokenId);\\n            if (\\n                forSale \\u0026\\u0026\\n                rightToken \\u0026\\u0026\\n                isApproved \\u0026\\u0026\\n                priceIsZero \\u0026\\u0026\\n                isSeller \\u0026\\u0026\\n                isOwner\\n            ) {\\n                getCPM().buyPunk(tokenId);\\n                getReserves().add(tokenId);\\n                newTokenIds[numNewTokens] = tokenId;\\n                numNewTokens = numNewTokens.add(1);\\n            }\\n        }\\n        if (numNewTokens \\u003e 0) {\\n            if (!partOfDualOp) {\\n                uint256 tokenAmount = numNewTokens * (10**18);\\n                getERC20().mint(msgSender, tokenAmount);\\n            }\\n            emit TokensMinted(newTokenIds, msgSender);\\n        }\\n        return numNewTokens;\\n    }\\n\\n    function redeemPunk() public payable nonReentrant whenNotPaused {\\n        uint256 fee = getFee(_msgSender(), 1, _getBurnFees()) +\\n            getBurnBounty(1);\\n        require(msg.value \\u003e= fee, \\\"Value too low\\\");\\n        _redeemPunk(false);\\n    }\\n\\n    function _redeemPunk(bool partOfDualOp) private {\\n        address msgSender = _msgSender();\\n        uint256 tokenAmount = 10**18;\\n        require(\\n            partOfDualOp || (getERC20().balanceOf(msgSender) \\u003e= tokenAmount),\\n            \\\"ERC20 balance too small\\\"\\n        );\\n        require(\\n            partOfDualOp ||\\n                (getERC20().allowance(msgSender, address(this)) \\u003e= tokenAmount),\\n            \\\"ERC20 allowance too small\\\"\\n        );\\n        uint256 reservesLength = getReserves().length();\\n        uint256 randomIndex = getPseudoRand(reservesLength);\\n        uint256 tokenId = getReserves().at(randomIndex);\\n        if (!partOfDualOp) {\\n            getERC20().burnFrom(msgSender, tokenAmount);\\n        }\\n        getReserves().remove(tokenId);\\n        getCPM().transferPunk(msgSender, tokenId);\\n        emit TokenBurned(tokenId, msgSender);\\n    }\\n\\n    function redeemPunkMultiple(uint256 numTokens)\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n        whenNotInSafeMode\\n    {\\n        uint256 fee = getFee(_msgSender(), numTokens, _getBurnFees()) +\\n            getBurnBounty(numTokens);\\n        require(msg.value \\u003e= fee, \\\"Value too low\\\");\\n        _redeemPunkMultiple(numTokens, false);\\n    }\\n\\n    function _redeemPunkMultiple(uint256 numTokens, bool partOfDualOp) private {\\n        require(numTokens \\u003e 0, \\\"No tokens\\\");\\n        require(numTokens \\u003c= 100, \\\"Over 100 tokens\\\");\\n        address msgSender = _msgSender();\\n        uint256 tokenAmount = numTokens * (10**18);\\n        require(\\n            partOfDualOp || (getERC20().balanceOf(msgSender) \\u003e= tokenAmount),\\n            \\\"ERC20 balance too small\\\"\\n        );\\n        require(\\n            partOfDualOp ||\\n                (getERC20().allowance(msgSender, address(this)) \\u003e= tokenAmount),\\n            \\\"ERC20 allowance too small\\\"\\n        );\\n        if (!partOfDualOp) {\\n            getERC20().burnFrom(msgSender, tokenAmount);\\n        }\\n        uint256[] memory tokenIds = new uint256[](numTokens);\\n        for (uint256 i = 0; i \\u003c numTokens; i++) {\\n            uint256 reservesLength = getReserves().length();\\n            uint256 randomIndex = getPseudoRand(reservesLength);\\n            uint256 tokenId = getReserves().at(randomIndex);\\n            tokenIds[i] = tokenId;\\n            getReserves().remove(tokenId);\\n            getCPM().transferPunk(msgSender, tokenId);\\n        }\\n        emit TokensBurned(tokenIds, msgSender);\\n    }\\n\\n    function mintAndRedeem(uint256 tokenId)\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n        whenNotInSafeMode\\n    {\\n        uint256 fee = getFee(_msgSender(), 1, _getDualFees());\\n        require(msg.value \\u003e= fee, \\\"Value too low\\\");\\n        require(_mintPunk(tokenId, true), \\\"Minting failed\\\");\\n        _redeemPunk(true);\\n    }\\n\\n    function mintAndRedeemMultiple(uint256[] memory tokenIds)\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n        whenNotInSafeMode\\n    {\\n        uint256 numTokens = tokenIds.length;\\n        require(numTokens \\u003e 0, \\\"No tokens\\\");\\n        require(numTokens \\u003c= 20, \\\"Over 20 tokens\\\");\\n        uint256 fee = getFee(_msgSender(), numTokens, _getDualFees());\\n        require(msg.value \\u003e= fee, \\\"Value too low\\\");\\n        uint256 numTokensMinted = _mintPunkMultiple(tokenIds, true);\\n        if (numTokensMinted \\u003e 0) {\\n            _redeemPunkMultiple(numTokens, true);\\n        }\\n    }\\n\\n    function mintRetroactively(uint256 tokenId, address to)\\n        public\\n        onlyOwner\\n        whenNotLockedS\\n    {\\n        require(\\n            getCPM().punkIndexToAddress(tokenId) == address(this),\\n            \\\"Not owner\\\"\\n        );\\n        require(!getReserves().contains(tokenId), \\\"Already in reserves\\\");\\n        uint256 cryptoPunkBalance = getCPM().balanceOf(address(this));\\n        require(\\n            (getERC20().totalSupply() / (10**18)) \\u003c cryptoPunkBalance,\\n            \\\"No excess NFTs\\\"\\n        );\\n        getReserves().add(tokenId);\\n        getERC20().mint(to, 10**18);\\n        emit TokenMinted(tokenId, _msgSender());\\n    }\\n\\n    function redeemRetroactively(address to) public onlyOwner whenNotLockedS {\\n        require(\\n            getERC20().balanceOf(address(this)) \\u003e= (10**18),\\n            \\\"Not enough PUNK\\\"\\n        );\\n        getERC20().burn(10**18);\\n        uint256 reservesLength = getReserves().length();\\n        uint256 randomIndex = getPseudoRand(reservesLength);\\n\\n        uint256 tokenId = getReserves().at(randomIndex);\\n        getReserves().remove(tokenId);\\n        getCPM().transferPunk(to, tokenId);\\n        emit TokenBurned(tokenId, _msgSender());\\n    }\\n}\\n\"},\"PunkVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./IPunkToken.sol\\\";\\nimport \\\"./ICryptoPunksMarket.sol\\\";\\n\\ncontract PunkVaultBase is Pausable {\\n    address private erc20Address;\\n    address private cpmAddress;\\n\\n    IPunkToken private erc20;\\n    ICryptoPunksMarket private cpm;\\n\\n    function getERC20Address() public view returns (address) {\\n        return erc20Address;\\n    }\\n\\n    function getCpmAddress() public view returns (address) {\\n        return cpmAddress;\\n    }\\n\\n    function getERC20() internal view returns (IPunkToken) {\\n        return erc20;\\n    }\\n\\n    function getCPM() internal view returns (ICryptoPunksMarket) {\\n        return cpm;\\n    }\\n\\n    function setERC20Address(address newAddress) internal {\\n        require(erc20Address == address(0), \\\"Already initialized ERC20\\\");\\n        erc20Address = newAddress;\\n        erc20 = IPunkToken(erc20Address);\\n    }\\n\\n    function setCpmAddress(address newAddress) internal {\\n        require(cpmAddress == address(0), \\\"Already initialized CPM\\\");\\n        cpmAddress = newAddress;\\n        cpm = ICryptoPunksMarket(cpmAddress);\\n    }\\n}\\n\"},\"PunkVaultSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./PunkVaultBase.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract PunkVaultSafe is PunkVaultBase, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    EnumerableSet.UintSet private reserves;\\n    bool private inSafeMode = true;\\n\\n    event TokenBurnedSafely(uint256 punkId, address indexed to);\\n\\n    function getReserves()\\n        internal\\n        view\\n        returns (EnumerableSet.UintSet storage)\\n    {\\n        return reserves;\\n    }\\n\\n    function getInSafeMode() public view returns (bool) {\\n        return inSafeMode;\\n    }\\n\\n    function turnOffSafeMode() public onlyOwner {\\n        inSafeMode = false;\\n    }\\n\\n    function turnOnSafeMode() public onlyOwner {\\n        inSafeMode = true;\\n    }\\n\\n    modifier whenNotInSafeMode {\\n        require(!inSafeMode, \\\"Contract is in safe mode\\\");\\n        _;\\n    }\\n\\n    function simpleRedeem() public whenPaused nonReentrant {\\n        require(\\n            getERC20().balanceOf(msg.sender) \\u003e= 10**18,\\n            \\\"ERC20 balance too small\\\"\\n        );\\n        require(\\n            getERC20().allowance(msg.sender, address(this)) \\u003e= 10**18,\\n            \\\"ERC20 allowance too small\\\"\\n        );\\n        uint256 tokenId = reserves.at(0);\\n        getERC20().burnFrom(msg.sender, 10**18);\\n        reserves.remove(tokenId);\\n        getCPM().transferPunk(msg.sender, tokenId);\\n        emit TokenBurnedSafely(tokenId, msg.sender);\\n    }\\n}\\n\"},\"Randomizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Controllable.sol\\\";\\n\\ncontract Randomizable is Controllable {\\n    uint256 private randNonce = 0;\\n\\n    function getPseudoRand(uint256 modulus) internal returns (uint256) {\\n        randNonce = randNonce.add(1);\\n        return\\n            uint256(keccak256(abi.encodePacked(now, _msgSender(), randNonce))) %\\n            modulus;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the revault on every call to nonReentrant will be lower in\\n    // amount. Since revaults are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full revault coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a revault is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Timelocked.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./PunkVaultSafe.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Timelocked is PunkVaultSafe {\\n    using SafeMath for uint256;\\n    enum Timelock {Short, Medium, Long}\\n\\n    uint256 private securityLevel;\\n\\n    function getSecurityLevel() public view returns (string memory) {\\n        if (securityLevel == 0) {\\n            return \\\"red\\\";\\n        } else if (securityLevel == 1) {\\n            return \\\"orange\\\";\\n        } else if (securityLevel == 2) {\\n            return \\\"yellow\\\";\\n        } else {\\n            return \\\"green\\\";\\n        }\\n    }\\n\\n    function increaseSecurityLevel() public onlyOwner {\\n        require(securityLevel \\u003c 3, \\\"Already max\\\");\\n        securityLevel = securityLevel + 1;\\n    }\\n\\n    function timeInDays(uint256 num) internal pure returns (uint256) {\\n        return num * 60 * 60 * 24;\\n    }\\n\\n    function getDelay(Timelock lockId) public view returns (uint256) {\\n        if (securityLevel == 0) {\\n            return 2; // for testing\\n        }\\n        if (lockId == Timelock.Short) {\\n            if (securityLevel == 1) {\\n                return timeInDays(1);\\n            } else if (securityLevel == 2) {\\n                return timeInDays(2);\\n            } else {\\n                return timeInDays(3);\\n            }\\n        } else if (lockId == Timelock.Medium) {\\n            if (securityLevel == 1) {\\n                return timeInDays(2);\\n            } else if (securityLevel == 2) {\\n                return timeInDays(3);\\n            } else {\\n                return timeInDays(5);\\n            }\\n        } else {\\n            if (securityLevel == 1) {\\n                return timeInDays(3);\\n            } else if (securityLevel == 2) {\\n                return timeInDays(5);\\n            } else {\\n                return timeInDays(10);\\n            }\\n        }\\n    }\\n\\n    mapping(Timelock =\\u003e uint256) private releaseTimes;\\n\\n    event Locked(Timelock lockId);\\n\\n    event UnlockInitiated(Timelock lockId, uint256 whenUnlocked);\\n\\n    function getReleaseTime(Timelock lockId) public view returns (uint256) {\\n        return releaseTimes[lockId];\\n    }\\n\\n    function initiateUnlock(Timelock lockId) public onlyOwner {\\n        uint256 newReleaseTime = now.add(getDelay(lockId));\\n        releaseTimes[lockId] = newReleaseTime;\\n        emit UnlockInitiated(lockId, newReleaseTime);\\n    }\\n\\n    function lock(Timelock lockId) public onlyOwner {\\n        releaseTimes[lockId] = 0;\\n        emit Locked(lockId);\\n    }\\n\\n    modifier whenNotLockedS {\\n        uint256 releaseTime = releaseTimes[Timelock.Short];\\n        require(releaseTime \\u003e 0, \\\"Locked\\\");\\n        require(now \\u003e releaseTime, \\\"Not unlocked\\\");\\n        _;\\n    }\\n    modifier whenNotLockedM {\\n        uint256 releaseTime = releaseTimes[Timelock.Medium];\\n        require(releaseTime \\u003e 0, \\\"Locked\\\");\\n        require(now \\u003e releaseTime, \\\"Not unlocked\\\");\\n        _;\\n    }\\n    modifier whenNotLockedL {\\n        uint256 releaseTime = releaseTimes[Timelock.Long];\\n        require(releaseTime \\u003e 0, \\\"Locked\\\");\\n        require(now \\u003e releaseTime, \\\"Not unlocked\\\");\\n        _;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cpmAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"burnFees\",\"type\":\"uint256[]\"}],\"name\":\"BurnFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"ControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DirectRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"dualFees\",\"type\":\"uint256[]\"}],\"name\":\"DualFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"IntegratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MigrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"mintFees\",\"type\":\"uint256[]\"}],\"name\":\"MintFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplierBounty\",\"type\":\"uint256[]\"}],\"name\":\"SupplierBountySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenBurnedSafely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenNameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenSymbolChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"whenUnlocked\",\"type\":\"uint256\"}],\"name\":\"UnlockInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeTokenSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"directRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"getBurnBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCpmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCryptoPunkAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"}],\"name\":\"getDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDualFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"getMintBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumControllers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumIntegrators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"}],\"name\":\"getReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecurityLevel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplierBounty\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseSecurityLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"}],\"name\":\"initiateUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCryptoPunkDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIntegrator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Timelocked.Timelock\",\"name\":\"lockId\",\"type\":\"uint8\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintAndRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintAndRedeemMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"mintPunkMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintRetroactively\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"redeemPunkMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeemRetroactively\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newBurnFees\",\"type\":\"uint256[]\"}],\"name\":\"setBurnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newDualFees\",\"type\":\"uint256[]\"}],\"name\":\"setDualFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"setIntegrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newMintFees\",\"type\":\"uint256[]\"}],\"name\":\"setMintFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReverseLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newSupplierBounty\",\"type\":\"uint256[]\"}],\"name\":\"setSupplierBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOnSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PunkVault","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000092cca15553f244196970eefcd45e13d459418539000000000000000000000000b47e3cd837ddf8e4c57f05d70ab865de6e193bbb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0acf6cddc230a4a23f767dfde065f59e4ec5f5d753a3a36b75124fd7782860a2"}]}