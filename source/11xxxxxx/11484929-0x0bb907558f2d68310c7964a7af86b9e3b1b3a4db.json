{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HopeRaffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\r\\n\\r\\nimport \\\"./interface/IRMU.sol\\\";\\r\\nimport \\\"./interface/IHopeNonTradable.sol\\\";\\r\\nimport \\\"./interface/IHope.sol\\\";\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract HopeRaffle is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Ticket {\\r\\n        address owner;                           // Address owning tickets\\r\\n        uint256 amount;                          // Amount of tickets purchased\\r\\n    }\\r\\n\\r\\n    struct Raffle {\\r\\n        uint256[] nftIds;                        // Raffle will cycle through those NFTs until all are minted\\r\\n        uint256 currentNftIndex;                 // The index of NFT to be won in the raffle (This is the index in nftIds) Ex : if nftIds = [2,5,6] and currentNftIndex is 0, then nftId is 2;\\r\\n        uint256 ticketsPurchased;                // The number of ticket purchased (Once it reaches nbTickets, we can settle)\\r\\n        uint256 ticketsRequired;                 // Amount of tickets required to sell before we can settle\\r\\n        uint256 ticketPrice;                     // Price of each ticket\\r\\n        address[] participants;                  // All participants of current raffle\\r\\n        mapping (address => uint256) tickets;    // Ticket balances\\r\\n        bool isDisabled;                         // If true, this raffle will be disabled once current ends\\r\\n    }\\r\\n\\r\\n    IRMU public rmu;\\r\\n    IHopeNonTradable public hopeNonTradable;\\r\\n    IHope public hope;\\r\\n\\r\\n    Raffle[] public raffles;\\r\\n\\r\\n    ////////////\\r\\n    // Events //\\r\\n    ////////////\\r\\n\\r\\n    event RaffleAdded(uint256 id);\\r\\n    event TicketsPurchased(address indexed user, uint256 indexed id, uint256 amount);\\r\\n    event RaffleSettled(address indexed winner, uint256 indexed id, uint256 nftId, uint256 ticketsPurchased);\\r\\n    event RaffleInitialized(uint256 indexed id, uint256 nftId);\\r\\n    event RaffleDisabled(uint256 id, bool isDisabled);\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    constructor(IRMU _rmu, IHopeNonTradable _hopeNonTradable, IHope _hope) public {\\r\\n        rmu = _rmu;\\r\\n        hopeNonTradable = _hopeNonTradable;\\r\\n        hope = _hope;\\r\\n    }\\r\\n\\r\\n\\r\\n    //////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////\\r\\n\\r\\n    modifier onlyEOA() {\\r\\n        require(msg.sender == tx.origin, \\\"Not eoa\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///////////\\r\\n    // Admin //\\r\\n    ///////////\\r\\n\\r\\n    function addRaffle(uint256[] memory _nftIds, uint256 _ticketsRequired, uint256 _ticketPrice) public onlyOwner {\\r\\n        raffles.push(Raffle({\\r\\n            nftIds: _nftIds,\\r\\n            currentNftIndex: 0,\\r\\n            ticketsPurchased: 0,\\r\\n            ticketsRequired: _ticketsRequired,\\r\\n            ticketPrice: _ticketPrice,\\r\\n            participants: new address[](0),\\r\\n            isDisabled: false\\r\\n        }));\\r\\n\\r\\n        // Mint card and keep it in contract\\r\\n        rmu.mint(address(this), _nftIds[0], 1, \\\"\\\");\\r\\n\\r\\n        emit RaffleAdded(raffles.length.sub(1));\\r\\n    }\\r\\n\\r\\n    function setRaffleDisabled(uint256 _id, bool _state) public onlyOwner {\\r\\n        raffles[_id].isDisabled = _state;\\r\\n        emit RaffleDisabled(_id, _state);\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // View //\\r\\n    //////////\\r\\n\\r\\n    function rafflesLength() public view returns(uint256) {\\r\\n        return raffles.length;\\r\\n    }\\r\\n\\r\\n    function getRaffleNftIds(uint256 _id) public view returns(uint256[] memory) {\\r\\n        return raffles[_id].nftIds;\\r\\n    }\\r\\n\\r\\n    function getRaffleParticipants(uint256 _id) public view returns(address[] memory) {\\r\\n        return raffles[_id].participants;\\r\\n    }\\r\\n\\r\\n    function getRaffleUserTicketBalance(uint256 _id, address _user) public view returns(uint256) {\\r\\n        return raffles[_id].tickets[_user];\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // Main //\\r\\n    //////////\\r\\n\\r\\n    function buyTickets(uint256 _id, uint256 _amount, bool _useHopeNonTradable) public nonReentrant {\\r\\n        Raffle storage raffle = raffles[_id];\\r\\n\\r\\n        require(!(raffle.isDisabled && raffle.ticketsPurchased == 0), \\\"Raffle disabled\\\");\\r\\n\\r\\n        if (raffle.ticketsPurchased.add(_amount) > raffle.ticketsRequired) {\\r\\n            _amount = raffle.ticketsRequired.sub(raffle.ticketsPurchased);\\r\\n            require(_amount != 0, \\\"No tickets left\\\");\\r\\n        }\\r\\n\\r\\n        uint256 totalPrice = raffle.ticketPrice.mul(_amount);\\r\\n\\r\\n        if (_useHopeNonTradable) {\\r\\n            hopeNonTradable.burn(msg.sender, totalPrice);\\r\\n        } else {\\r\\n            hope.burn(msg.sender, totalPrice);\\r\\n        }\\r\\n\\r\\n        raffle.ticketsPurchased = raffle.ticketsPurchased.add(_amount);\\r\\n\\r\\n        if (!_isInArray(msg.sender, raffle.participants)) {\\r\\n            raffle.participants.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        raffle.tickets[msg.sender] = raffle.tickets[msg.sender].add(_amount);\\r\\n\\r\\n        emit TicketsPurchased(msg.sender, _id, _amount);\\r\\n    }\\r\\n\\r\\n    function settleRaffle(uint256 _id) public nonReentrant onlyEOA {\\r\\n        Raffle storage raffle = raffles[_id];\\r\\n        require(raffle.ticketsPurchased == raffle.ticketsRequired, \\\"Tickets not sold out\\\");\\r\\n\\r\\n        uint256 rng = _rng() % raffle.ticketsRequired;\\r\\n\\r\\n        uint256 cumul = 0;\\r\\n        for (uint256 i = 0; i < raffle.participants.length; ++i) {\\r\\n            address user = raffle.participants[i];\\r\\n            uint256 balance = raffle.tickets[user];\\r\\n\\r\\n            if (balance == 0) continue;\\r\\n\\r\\n            cumul = cumul.add(balance);\\r\\n\\r\\n            if (rng < cumul) {\\r\\n                // Winner\\r\\n                uint256 currentNftIndex = raffle.currentNftIndex;\\r\\n                rmu.safeTransferFrom(address(this), user, raffle.nftIds[currentNftIndex], 1, \\\"\\\");\\r\\n                emit RaffleSettled(user, _id, raffle.nftIds[currentNftIndex], balance);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _initNextRaffle(_id);\\r\\n    }\\r\\n\\r\\n    //////////////\\r\\n    // Internal //\\r\\n    //////////////\\r\\n\\r\\n    function _initNextRaffle(uint256 _id) internal {\\r\\n        Raffle storage raffle = raffles[_id];\\r\\n\\r\\n        raffle.ticketsPurchased = 0;\\r\\n\\r\\n        // Reset ticket balances\\r\\n        for (uint256 i = 0; i < raffle.participants.length; ++i) {\\r\\n            address user = raffle.participants[i];\\r\\n            delete raffle.tickets[user];\\r\\n        }\\r\\n\\r\\n        // Reset participants\\r\\n        raffle.participants = new address[](0);\\r\\n\\r\\n        // Look for next available nft\\r\\n        for (uint256 i = 1; i <= raffle.nftIds.length; ++i) {\\r\\n            uint256 newIndex = raffle.currentNftIndex.add(i) % raffle.nftIds.length;\\r\\n\\r\\n            uint256 nftId = raffle.nftIds[newIndex];\\r\\n            if (rmu.totalSupply(nftId) < rmu.maxSupply(nftId)) {\\r\\n                raffle.currentNftIndex = newIndex;\\r\\n\\r\\n                // Mint card and keep it in contract\\r\\n                rmu.mint(address(this), raffle.nftIds[newIndex], 1, \\\"\\\");\\r\\n                emit RaffleInitialized(_id, raffle.nftIds[newIndex]);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If we reach this, there is no more NFT to mint, so we disable this raffle\\r\\n        raffle.isDisabled = true;\\r\\n        emit RaffleDisabled(_id, true);\\r\\n    }\\r\\n\\r\\n    // Utility function to check if a value is inside an array\\r\\n    function _isInArray(address _value, address[] memory _array) internal pure returns(bool) {\\r\\n        uint256 length = _array.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            if (_array[i] == _value) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // This is a pseudo random function, but considering the fact that redeem function is not callable by contract,\\r\\n    // and the fact that Hope is not transferable, this should be enough to protect us from an attack\\r\\n    // I would only expect a miner to be able to exploit this, and the attack cost would not be worth it in our case\\r\\n    function _rng() internal view returns(uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked((block.timestamp).add\\r\\n        (block.difficulty).add\\r\\n        ((uint256(keccak256(abi.encodePacked(block.coinbase)))) /\\r\\n            block.timestamp).add\\r\\n        (block.gaslimit).add\\r\\n        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\\r\\n            block.timestamp).add\\r\\n            (block.number)\\r\\n            )));\\r\\n    }\\r\\n\\r\\n    /////////\\r\\n    /////////\\r\\n    /////////\\r\\n\\r\\n    /**\\r\\n     * @notice Handle the receipt of a single ERC1155 token type\\r\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\r\\n     * This function MAY throw to revert and reject the transfer\\r\\n     * Return of other amount than the magic value MUST result in the transaction being reverted\\r\\n     * Note: The token contract address is always the message sender\\r\\n     * @param _operator  The address which called the `safeTransferFrom` function\\r\\n     * @param _from      The address which previously owned the token\\r\\n     * @param _id        The id of the token being transferred\\r\\n     * @param _amount    The amount of tokens being transferred\\r\\n     * @param _data      Additional data with no specified format\\r\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n     */\\r\\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\\r\\n        return 0xf23a6e61;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Handle the receipt of multiple ERC1155 token types\\r\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\r\\n     * This function MAY throw to revert and reject the transfer\\r\\n     * Return of other amount than the magic value WILL result in the transaction being reverted\\r\\n     * Note: The token contract address is always the message sender\\r\\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\\r\\n     * @param _from      The address which previously owned the token\\r\\n     * @param _ids       An array containing ids of each token being transferred\\r\\n     * @param _amounts   An array containing amounts of each token being transferred\\r\\n     * @param _data      Additional data with no specified format\\r\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n     */\\r\\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\\r\\n        return 0xbc197c81;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\r\\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\r\\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\r\\n     *      This function MUST NOT consume more than 5,000 gas.\\r\\n     * @return Whether ERC-165 or ERC1155TokenReceiver interfaces are supported.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\\r\\n        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\\r\\n        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) ^ bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRMU.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IRMU {\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n    function totalSupply(uint256 _id) external view returns (uint256);\\r\\n    function maxSupply(uint256 _id) external view returns (uint256);\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity, bytes memory _data) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IHopeNonTradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IHopeNonTradable {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function totalClaimed() external view returns (uint256);\\r\\n\\r\\n    function addClaimed(uint256 _amount) external;\\r\\n\\r\\n    function setClaimed(uint256 _amount) external;\\r\\n\\r\\n    function transfer(address receiver, uint numTokens) external returns (bool);\\r\\n\\r\\n    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 value) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IHope.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IHope is IERC20 {\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n    function setLiquidityInitialized() external;\\r\\n    function upgradeHopeNonTradable(uint256 _amount) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IRMU\",\"name\":\"_rmu\",\"type\":\"address\"},{\"internalType\":\"contract IHopeNonTradable\",\"name\":\"_hopeNonTradable\",\"type\":\"address\"},{\"internalType\":\"contract IHope\",\"name\":\"_hope\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RaffleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDisabled\",\"type\":\"bool\"}],\"name\":\"RaffleDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"RaffleInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsPurchased\",\"type\":\"uint256\"}],\"name\":\"RaffleSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_ticketsRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"addRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useHopeNonTradable\",\"type\":\"bool\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRaffleNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRaffleParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRaffleUserTicketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hope\",\"outputs\":[{\"internalType\":\"contract IHope\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopeNonTradable\",\"outputs\":[{\"internalType\":\"contract IHopeNonTradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rmu\",\"outputs\":[{\"internalType\":\"contract IRMU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRaffleDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"settleRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HopeRaffle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000db68df0e86bc7c6176e6a2255a5365f51113bce80000000000000000000000001eadc903341cfdb3406a04506239f52d076b170b0000000000000000000000009d4aa5600e0c8c2085bb82d946ca6642742a8250","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}