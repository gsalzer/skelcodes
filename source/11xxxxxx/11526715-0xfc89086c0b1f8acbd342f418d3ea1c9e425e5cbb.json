{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-16\r\n*/\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/GSN/Context.sol\r\n// SPDX-License-Identifier: MIT\r\n// File: contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n  * @title Careful Math\r\n  * @author Compound\r\n  * @notice Derived from OpenZeppelin's SafeMath library\r\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n  */\r\ncontract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\t\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IVault is IERC20 {\r\n    function token() external view returns (address);\r\n\r\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\r\n\r\n    function getRatio() external view returns (uint256);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function earn() external;\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n\r\n    function devfund() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface IMasterchef {\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\n// Strategy Contract Basics\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n\r\n    // Withdrawal fee 0.2% to buyback\r\n    // - 0.14% to treasury\r\n    // - 0.06% to dev fund\r\n    uint256 public treasuryFee = 140;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 60;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\t\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // buyback coins\r\n    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public wbtcBuyback = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address public renbtcBuyback = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    // Dex\r\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyBenevolent {\r\n        require(\r\n            msg.sender == tx.origin ||\r\n                msg.sender == governance ||\r\n                msg.sender == strategist\r\n        );\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    // **** Setters **** //\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setMmToken(address _mmToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        mmToken = _mmToken;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMasterChef(address _masterChef) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        masterChef = _masterChef;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\t\t\t\t\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        if (buybackEnabled == true) {            \r\n            // we want buyback mm using LP token\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\t\t\t\r\n        } else {\r\n            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\r\n            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\r\n        }        \r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\t\r\n    // buyback MM and notify MasterChef\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\r\n\t\r\n    // convert LP to buyback principle token\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n\r\n    function harvest() public virtual;\r\n\r\n    // **** Emergency functions ****\r\n\r\n    // comment-out function execute(address _target, bytes memory _data)\r\n    \r\n    // **** Internal functions ****\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(_from).safeApprove(univ2Router2, 0);\r\n        IERC20(_from).safeApprove(univ2Router2, _amount);\r\n\r\n        address[] memory path;\r\n\r\n        if (_to == mmToken && buybackEnabled == true) {\r\n            if (_from == usdcBuyback){\r\n                path = new address[](2);\r\n                path[0] = _from;\r\n                path[1] = _to;\t\t\t   \r\n            }else{\r\n                path = new address[](3);\r\n                path[0] = _from;\r\n                path[1] = usdcBuyback;\r\n                path[2] = _to;\r\n            }\r\n        } else{\t\t\r\n            if (_from == weth || _to == weth) {\r\n                path = new address[](2);\r\n                path[0] = _from;\r\n                path[1] = _to;\r\n            } else {\r\n                path = new address[](3);\r\n                path[0] = _from;\r\n                path[1] = weth;\r\n                path[2] = _to;\r\n            }\t\t\r\n        }\r\n\r\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now.add(60)\r\n        );\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface ICToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function totalBorrows() external returns (uint256);\r\n\r\n    function borrowIndex() external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface IComptroller {\r\n    /*** Assets You Are In ***/\r\n\r\n    function enterMarkets(address[] calldata cTokens)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    // Claim all the COMP accrued by holder in all markets\r\n    function claimComp(address holder) external;\r\n\r\n    // Claim all the COMP accrued by holder in specific markets\r\n    function claimComp(address holder, address[] calldata cTokens) external;\r\n\r\n    // Claim all the COMP accrued by specific holders in specific markets for their supplies and/or borrows\r\n    function claimComp(\r\n        address[] calldata holders,\r\n        address[] calldata cTokens,\r\n        bool borrowers,\r\n        bool suppliers\r\n    ) external;\r\n\r\n    function markets(address cTokenAddress)\r\n        external\r\n        view\r\n        returns (bool, uint256);\r\n}\r\n\r\ninterface ICompoundLens {\r\n    function getCompBalanceMetadataExt(\r\n        address comp,\r\n        address comptroller,\r\n        address account\r\n    )\r\n        external\r\n        returns (\r\n            uint256 balance,\r\n            uint256 votes,\r\n            address delegate,\r\n            uint256 allocated\r\n        );\r\n}\r\n\r\n\r\nabstract contract StrategyCmpdDaiBase is Exponential{\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\t\r\n    address public constant comptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address public constant lens = 0xd513d22422a3062Bd342Ae374b4b9c20E0a9a074;\r\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    address public constant cdai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n    address public constant cether = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    // Require a 0.1 buffer between market collateral factor and strategy's collateral factor when leveraging\r\n    uint256 colFactorLeverageBuffer = 100;\r\n    uint256 colFactorLeverageBufferMax = 1000;\r\n\r\n    // Allow a 0.05 buffer between market collateral factor and strategy's collateral factor until we have to deleverage\r\n    // This is so we can hit max leverage and keep accruing interest\r\n    uint256 colFactorSyncBuffer = 50;\r\n    uint256 colFactorSyncBufferMax = 1000;\r\n\r\n    constructor() public {\r\n        // Enter cDAI Market\r\n        address[] memory ctokens = new address[](1);\r\n        ctokens[0] = cdai;\r\n        IComptroller(comptroller).enterMarkets(ctokens);\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    // **** Views **** //\r\n\r\n    function getSuppliedView() public view returns (uint256) {\r\n        (, uint256 cTokenBal, , uint256 exchangeRate) = ICToken(cdai).getAccountSnapshot(address(this));\r\n        (, uint256 bal) = mulScalarTruncate(Exp({mantissa: exchangeRate}), cTokenBal);\r\n        return bal;\r\n    }\r\n\r\n    function getBorrowedView() public view returns (uint256) {\r\n        return ICToken(cdai).borrowBalanceStored(address(this));\r\n    }\r\n\r\n    // Given an unleveraged supply balance, return the target leveraged supply balance which is still within the safety buffer\r\n    function getLeveragedSupplyTarget(uint256 supplyBalance) public view returns (uint256) {\r\n        uint256 leverage = getMaxLeverage();\r\n        return supplyBalance.mul(leverage).div(1e18);\r\n    }\r\n\r\n    function getSafeLeverageColFactor() public view returns (uint256) {\r\n        uint256 colFactor = getMarketColFactor();\r\n        // Collateral factor within the buffer\r\n        uint256 safeColFactor = colFactor.sub(colFactorLeverageBuffer.mul(1e18).div(colFactorLeverageBufferMax));\r\n        return safeColFactor;\r\n    }\r\n\r\n    function getSafeSyncColFactor() public view returns (uint256) {\r\n        uint256 colFactor = getMarketColFactor();\r\n        // Collateral factor within the buffer\r\n        uint256 safeColFactor = colFactor.sub(colFactorSyncBuffer.mul(1e18).div(colFactorSyncBufferMax));\r\n        return safeColFactor;\r\n    }\r\n\r\n    function getMarketColFactor() public view returns (uint256) {\r\n        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\r\n        return colFactor;\r\n    }\r\n\r\n    // Max leverage we can go up to, w.r.t safe buffer\r\n    function getMaxLeverage() public view returns (uint256) {\r\n        uint256 safeLeverageColFactor = getSafeLeverageColFactor();\r\n        // Infinite geometric series\r\n        uint256 leverage = uint256(1e36).div(1e18 - safeLeverageColFactor);\r\n        return leverage;\r\n    }\t\r\n\t\r\n    // If we have a strategy position at this SOS borrow rate and left unmonitored for 24+ hours, we might get liquidated\r\n    // To safeguard with enough buffer, we divide the borrow rate by 2 which indicates allowing 48 hours response time\r\n    function getSOSBorrowRate() public view returns (uint256) {\r\n        uint256 safeColFactor = getSafeLeverageColFactor();\r\n        return (colFactorLeverageBuffer.mul(182).mul(1e36).div(colFactorLeverageBufferMax)).div(safeColFactor);\r\n    }\r\n\r\n    // **** Pseudo-view functions (use `callStatic` on these) **** //\r\n    /* The reason why these exists is because of the nature of the\r\n       interest accruing supply + borrow balance. The \"view\" methods\r\n       are technically snapshots and don't represent the real value.\r\n       As such there are pseudo view methods where you can retrieve the\r\n       results by calling `callStatic`.\r\n    */\r\n\r\n    function getCompAccrued() public returns (uint256) {\r\n        (, , , uint256 accrued) = ICompoundLens(lens).getCompBalanceMetadataExt(comp, comptroller, address(this));\r\n        return accrued;\r\n    }\r\n\r\n    function getColFactor() public returns (uint256) {\r\n        uint256 supplied = getSupplied();\r\n        uint256 borrowed = getBorrowed();\r\n\r\n        return borrowed.mul(1e18).div(supplied);\r\n    }\r\n\r\n    function getSuppliedUnleveraged() public returns (uint256) {\r\n        uint256 supplied = getSupplied();\r\n        uint256 borrowed = getBorrowed();\r\n\r\n        return supplied.sub(borrowed);\r\n    }\r\n\r\n    function getSupplied() public returns (uint256) {\r\n        return ICToken(cdai).balanceOfUnderlying(address(this));\r\n    }\r\n\r\n    function getBorrowed() public returns (uint256) {\r\n        return ICToken(cdai).borrowBalanceCurrent(address(this));\r\n    }\r\n\r\n    function getBorrowable() public returns (uint256) {\r\n        uint256 supplied = getSupplied();\r\n        uint256 borrowed = getBorrowed();\r\n\r\n        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\r\n\r\n        // 99.99% just in case some dust accumulates\r\n        return supplied.mul(colFactor).div(1e18).sub(borrowed).mul(9999).div(10000);\r\n    }\r\n\r\n    function getCurrentLeverage() public returns (uint256) {\r\n        uint256 supplied = getSupplied();\r\n        uint256 borrowed = getBorrowed();\r\n\r\n        return supplied.mul(1e18).div(supplied.sub(borrowed));\r\n    }\r\n\r\n    // **** Setters **** //\r\n\r\n    // **** State mutations **** //\r\n    \r\n    // comment-out function sync() public returns (bool) \r\n\r\n    // Leverages until we're supplying <x> amount\r\n    // 1. Redeem <x> DAI\r\n    // 2. Repay <x> DAI\r\n    function _lUntil(uint256 _supplyAmount) internal {\r\n        // 1. Borrow out <X> DAI\r\n        // 2. Supply <X> DAI\r\n\r\n        uint256 leverage = getMaxLeverage();\r\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\r\n        require(_supplyAmount >= unleveragedSupply && _supplyAmount <= unleveragedSupply.mul(leverage).div(1e18), \"!leverage\");\r\n\r\n        // Since we're only leveraging one asset\r\n        // Supplied = borrowed\r\n        uint256 _borrowAndSupply;\r\n        uint256 supplied = getSupplied();\r\n        while (supplied < _supplyAmount) {\r\n            _borrowAndSupply = getBorrowable();\r\n\r\n            if (supplied.add(_borrowAndSupply) > _supplyAmount) {\r\n                _borrowAndSupply = _supplyAmount.sub(supplied);\r\n            }\r\n\r\n            ICToken(cdai).borrow(_borrowAndSupply);\r\n            _supplyAllDAI();\r\n\r\n            supplied = supplied.add(_borrowAndSupply);\r\n        }\r\n    }\r\n\r\n    // Deleverages until we're supplying <x> amount\r\n    // 1. Redeem <x> DAI\r\n    // 2. Repay <x> DAI\r\n    function _dlUntil(uint256 _supplyAmount) internal {\r\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\r\n        uint256 supplied = getSupplied();\r\n        require(_supplyAmount >= unleveragedSupply && _supplyAmount <= supplied, \"!deleverage\");\r\n\r\n        // Since we're only leveraging on 1 asset\r\n        // redeemable = borrowable\r\n        uint256 _redeemAndRepay = getBorrowable();\r\n        do {\r\n            if (supplied.sub(_redeemAndRepay) < _supplyAmount) {\r\n                _redeemAndRepay = supplied.sub(_supplyAmount);\r\n            }\r\n\r\n            require(ICToken(cdai).redeemUnderlying(_redeemAndRepay) == 0, \"!redeemDlUntil\");\r\n            IERC20(dai).safeApprove(cdai, 0);\r\n            IERC20(dai).safeApprove(cdai, _redeemAndRepay);\r\n            require(ICToken(cdai).repayBorrow(_redeemAndRepay) == 0, \"!repay\");\r\n\r\n            supplied = supplied.sub(_redeemAndRepay);\r\n        } while (supplied > _supplyAmount);\r\n    }\r\n\t\r\n    // **** internal state changer ****\r\n\t\r\n\t// for redeem supplied (unleveraged) DAI from compound\r\n    function _redeemDAI(uint256 _want) internal {\r\n        uint256 maxRedeem = getSuppliedUnleveraged();\r\n        _want = _want > maxRedeem? maxRedeem : _want;\r\n        \r\n\t\tuint256 _redeem = _want;\r\n        if (_redeem > 0) {\r\n            // Make sure market can cover liquidity\r\n            require(ICToken(cdai).getCash() >= _redeem, \"!cash-liquidity\");\r\n\r\n            // How much borrowed amount do we need to free?\r\n            uint256 borrowed = getBorrowed();\r\n            uint256 supplied = getSupplied();\r\n            uint256 curLeverage = getCurrentLeverage();\r\n            uint256 borrowedToBeFree = _redeem.mul(curLeverage).div(1e18);\r\n\r\n            // If the amount we need to free is > borrowed, Just free up all the borrowed amount\r\n            if (borrowedToBeFree > borrowed) {\r\n                _dlUntil(getSuppliedUnleveraged());\r\n            } else {\r\n                // Otherwise just keep freeing up borrowed amounts until we hit a safe number to redeem our underlying\r\n                _dlUntil(supplied.sub(borrowedToBeFree));\r\n            }\r\n\r\n            // Redeems underlying\r\n            require(ICToken(cdai).redeemUnderlying(_redeem) == 0, \"!redeem\");\r\n        }\r\n    }\r\n\t\r\n\tfunction _supplyAllDAI() internal {\r\n\t    uint256 _wad = IERC20(dai).balanceOf(address(this));\r\n        _supplyDAI(_wad);\r\n    }\r\n\t\r\n\tfunction _supplyDAI(uint256 _wad) internal {\r\n        if (_wad > 0) {\r\n            IERC20(dai).safeApprove(cdai, 0);\r\n            IERC20(dai).safeApprove(cdai, _wad);\r\n            require(ICToken(cdai).mint(_wad) == 0, \"!depositIntoCmpd\");\r\n        }\r\n    }\r\n\t\r\n\tfunction _claimComp() internal {\r\n        address[] memory ctokens = new address[](1);\r\n        ctokens[0] = cdai;\r\n        IComptroller(comptroller).claimComp(address(this), ctokens);\r\n\t}\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n  \r\n  function latestRoundData() external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n  );\r\n\r\n}\r\n\r\ninterface ManagerLike {\r\n    function ilks(uint256) external view returns (bytes32);\r\n    function owns(uint256) external view returns (address);\r\n    function urns(uint256) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint256);\r\n    function give(uint256, address) external;\r\n    function frob(uint256, int256, int256) external;\r\n    function flux(uint256, address, uint256) external;\r\n    function move(uint256, address, uint256) external;\r\n    function exit(address, uint256, address, uint256) external;\r\n    function quit(uint256, address) external;\r\n    function enter(address, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint256) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external returns (uint256);\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\n// Base contract for MakerDAO based DAI-minting strategies\r\n\r\nabstract contract StrategyMakerBase is StrategyBase {\r\n    // MakerDAO modules\r\n    address public dssCdpManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public daiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public jug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public vat = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public debtToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    uint256 public minDebt = 501000000000000000000;\r\n\r\n    // sub-strategy related constants\r\n    address public collateral;\r\n    uint256 public collateralDecimal = 1e18;\r\n    address public gemJoin;\r\n    address public collateralOracle;\r\n    bytes32 public collateralIlk;\r\n    AggregatorV3Interface internal priceFeed;\r\n\t\r\n    // singleton CDP for this strategy\r\n    uint256 public cdpId = 0;\r\n\t\r\n    // configurable minimum collateralization percent this strategy would hold for CDP\r\n    uint256 public minRatio = 300;\r\n    // collateralization percent buffer in CDP debt actions\r\n    uint256 public ratioBuff = 500;\r\n    uint256 public ratioBuffMax = 10000;\r\n\r\n    // Keeper bots, maintain ratio above minimum requirement\r\n    mapping(address => bool) keepers;\r\n\r\n    constructor(\r\n        address _collateralJoin,\r\n        bytes32 _collateralIlk,\r\n        address _collateral,\r\n        uint256 _collateralDecimal,\r\n        address _collateralOracle,\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n        public\r\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\r\n    {\r\n        require(_want == _collateral, '!mismatchWant');\r\n\t\t\r\n        gemJoin = _collateralJoin;\r\n        collateralIlk = _collateralIlk;\t\t    \r\n        collateral = _collateral;   \r\n        collateralDecimal = _collateralDecimal;\r\n        collateralOracle = _collateralOracle;\r\n        priceFeed = AggregatorV3Interface(collateralOracle);\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyKeepers {\r\n        require(\r\n            keepers[msg.sender] ||\r\n                msg.sender == address(this) ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance,\r\n            \"!keepers\"\r\n        );\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyGovernanceAndStrategist {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance\");\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyCDPInUse {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        require(collateralAmt > 0, '!zeroCollateral');\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n        require(debtAmt > 0, '!zeroDebt');\t\t\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyCDPInitiated {        \r\n        require(cdpId > 0, '!noCDP');\t\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAboveMinDebt(uint256 _daiAmt) {  \r\n        uint256 debtAmt = getDebtBalance();   \r\n        require((_daiAmt < debtAmt && (debtAmt.sub(_daiAmt) >= minDebt)) || debtAmt <= _daiAmt, '!minDebt');\r\n        _;\r\n    }\r\n\t\r\n    function getCollateralBalance() public view returns (uint256) {\r\n        uint256 ink;\r\n        address urnHandler = ManagerLike(dssCdpManager).urns(cdpId);\r\n        (ink, ) = VatLike(vat).urns(collateralIlk, urnHandler);\r\n        return ink;\r\n    }\r\n\t\r\n    function getDebtBalance() public view returns (uint256) {\t\r\n        uint256 art;\r\n        uint256 rate;\r\n        address urnHandler = ManagerLike(dssCdpManager).urns(cdpId);\r\n        (, art) = VatLike(vat).urns(collateralIlk, urnHandler);\r\n        (, rate, , , ) = VatLike(vat).ilks(collateralIlk);\r\n        return art.mul(rate).div(1e27);\r\n    }\t\r\n\r\n    // **** Getters ****\r\n\t\r\n    function balanceOfPool() public override view returns (uint256){\r\n        return getCollateralBalance();\r\n    }\r\n\r\n    function collateralValue(uint256 collateralAmt) public view returns (uint256){\r\n        uint256 collateralPrice = getLatestCollateralPrice();\r\n        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal);\r\n    }\r\n\r\n    function currentRatio() public onlyCDPInUse view returns (uint256) {\t    \r\n        uint256 collateralAmt = collateralValue(getCollateralBalance()).mul(100);\r\n        uint256 debtAmt = getDebtBalance();\t\t\r\n        return collateralAmt.div(debtAmt);\r\n    } \r\n    \r\n    // if borrow is true (for lockAndDraw): return (maxDebt - currentDebt) if positive value, otherwise return 0\r\n    // if borrow is false (for redeemAndFree): return (currentDebt - maxDebt) if positive value, otherwise return 0\r\n    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\r\n        uint256 maxDebt = collateralValue(collateralAmt).mul(10000).div(minRatio.mul(10000).mul(ratioBuffMax + ratioBuff).div(ratioBuffMax).div(100));\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n\t\t\r\n        uint256 debt = 0;\r\n        \r\n        if (borrow && maxDebt >= debtAmt){\r\n            debt = maxDebt.sub(debtAmt);\r\n        } else if (!borrow && debtAmt >= maxDebt){\r\n            debt = debtAmt.sub(maxDebt);\r\n        }\r\n        \r\n        return (debt > 0)? debt : 0;\r\n    }\r\n\r\n    function borrowableDebt() public view returns (uint256) {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        return calculateDebtFor(collateralAmt, true);\r\n    }\r\n\r\n    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\r\n        uint256 collateralAmt = getCollateralBalance().sub(_redeemCollateralAmt);\r\n        return calculateDebtFor(collateralAmt, false);\r\n    }\r\n\r\n    // **** sub-strategy implementation ****\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\r\n\t\r\n    function _depositDAI(uint256 _daiAmt) internal virtual;\r\n\t\r\n    function _withdrawDAI(uint256 _daiAmt) internal virtual;\r\n\t\r\n    // **** Oracle (using chainlink) ****\r\n\t\r\n    function getLatestCollateralPrice() public view returns (uint256){\r\n        require(collateralOracle != address(0), '!_collateralOracle');\t\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n\t\t\r\n        if (price > 0){\r\n            return uint256(price)/1e8;\r\n        } else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // **** Setters ****\r\n \r\n    function setMinDebt(uint256 _minDebt) external onlyGovernanceAndStrategist {\r\n        minDebt = _minDebt;\r\n    }\t\r\n \r\n    function setMinRatio(uint256 _minRatio) external onlyGovernanceAndStrategist {\r\n        minRatio = _minRatio;\r\n    }\t\r\n\t\r\n    function setRatioBuff(uint256 _ratioBuff) external onlyGovernanceAndStrategist {\r\n        ratioBuff = _ratioBuff;\r\n    }\t\r\n\r\n    function addKeeper(address _keeper) external onlyGovernanceAndStrategist {\r\n        keepers[_keeper] = true;\r\n    }\r\n\r\n    function removeKeeper(address _keeper) external onlyGovernanceAndStrategist {\r\n        keepers[_keeper] = false;\r\n    }\r\n\t\r\n    // **** MakerDAO CDP actions ****\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\t\r\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\r\n        rad = mul(wad, RAY);\r\n    }\r\n\t\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\t\r\n    function toInt(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\t\r\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        wad = mul(amt, 10 ** (18 - GemJoinLike(gemJoin).dec()));\r\n    }\r\n\t\r\n    function _getDrawDart(address vat, address jug, address urn, bytes32 ilk, uint wad) internal returns (int256 dart) {\r\n        uint256 rate = JugLike(jug).drip(ilk);\r\n        uint256 dai = VatLike(vat).dai(urn);\r\n        if (dai < toRad(wad)) {\r\n            dart = toInt(sub(toRad(wad), dai).div(rate));\r\n            dart = mul(uint256(dart), rate) < toRad(wad) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\t\r\n\tfunction _getWipeDart(address vat, uint dai, address urn, bytes32 ilk) internal view returns (int256 dart) {\r\n        (, uint256 rate,,,) = VatLike(vat).ilks(ilk);\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\r\n        dart = toInt(dai.div(rate));\r\n        dart = uint256(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\t\r\n    function openCDP() external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(cdpId <= 0, \"!cdpAlreadyOpened\");\r\n\t\t\r\n        cdpId = ManagerLike(dssCdpManager).open(collateralIlk, address(this));\t\t\r\n\t\t\r\n        IERC20(collateral).approve(gemJoin, uint256(-1));\r\n        IERC20(debtToken).approve(daiJoin, uint256(-1));\r\n    }\r\n\t\r\n    function getUrnVatIlk() internal returns (address, address, bytes32){\r\n        return (ManagerLike(dssCdpManager).urns(cdpId), ManagerLike(dssCdpManager).vat(), ManagerLike(dssCdpManager).ilks(cdpId));\r\n    }\r\n\t\r\n    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _daiAmt) internal onlyCDPInitiated {   \r\n        require(_daiAmt.add(getDebtBalance()) >= minDebt, '!minDebt');\r\n        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\t\t\r\n\t\tGemJoinLike(gemJoin).join(urn, _collateralAmt);  \r\n\t\tManagerLike(dssCdpManager).frob(cdpId, toInt(convertTo18(gemJoin, _collateralAmt)), _getDrawDart(vat, jug, urn, ilk, _daiAmt));\r\n\t\tManagerLike(dssCdpManager).move(cdpId, address(this), toRad(_daiAmt));\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        DaiJoinLike(daiJoin).exit(address(this), _daiAmt);\r\n    } \r\n\t\r\n    function repayDAI(uint256 _daiAmt) internal onlyCDPInitiated onlyAboveMinDebt(_daiAmt) { \r\n        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\t\t\r\n        DaiJoinLike(daiJoin).join(urn, _daiAmt);\r\n        ManagerLike(dssCdpManager).frob(cdpId, 0, _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\r\n    } \r\n\t\r\n    function repayAndRedeemCollateral(uint256 _collateralAmt, uint _daiAmt) internal onlyCDPInitiated onlyAboveMinDebt(_daiAmt) { \r\n        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\r\n        if (_daiAmt > 0){\r\n            DaiJoinLike(daiJoin).join(urn, _daiAmt);\r\n        }\r\n        uint256 wad18 = convertTo18(gemJoin, _collateralAmt);\r\n        ManagerLike(dssCdpManager).frob(cdpId, -toInt(wad18),  _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\r\n        ManagerLike(dssCdpManager).flux(cdpId, address(this), wad18);\r\n        GemJoinLike(gemJoin).exit(address(this), _collateralAmt);\r\n    } \r\n\r\n    // **** State Mutation functions ****\r\n\t\r\n    function keepMinRatio() external onlyCDPInUse onlyKeepers {\t\t\r\n        uint256 requiredPaidback = requiredPaidDebt(0);\r\n        if (requiredPaidback > 0){\r\n            _withdrawDAI(requiredPaidback);\r\n            uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n            require(wad >= requiredPaidback, '!mismatchAfterWithdraw');\r\n\t\t\t\r\n            repayDAI(requiredPaidback);\r\n            uint256 goodRatio = currentRatio();\r\n            require(goodRatio >= minRatio.sub(1), '!stillBelowMinRatio');\r\n        }\r\n    }\r\n\t\r\n    function deposit() public override {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\t\r\n            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\r\n            if(_newDebt.add(getDebtBalance()) >= minDebt){\r\n               addCollateralAndBorrow(_want, _newDebt);\r\n               uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n               if(wad < _newDebt){\r\n                  _newDebt = wad;\r\n               }\r\n               _depositDAI(_newDebt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        uint256 requiredPaidback = requiredPaidDebt(_amount);\r\n        if (requiredPaidback > 0){\r\n            _withdrawDAI(requiredPaidback);\r\n        }\r\n\t\t\r\n        uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n        require(wad >= requiredPaidback, '!mismatchAfterWithdraw');\r\n\t\t\r\n        repayAndRedeemCollateral(_amount, requiredPaidback);\r\n        return _amount;\r\n    }\r\n    \r\n}\r\n\r\ncontract StrategyMakerWETHV1 is StrategyMakerBase, StrategyCmpdDaiBase {\r\n    // strategy specific\r\n    address public weth_collateral = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public link_eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n    uint256 public weth_collateral_decimal = 1e18;\r\n    bytes32 public weth_ilk = \"ETH-A\";\r\n    address public weth_apt = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n\r\n    constructor(address _governance, address _strategist, address _controller, address _timelock) \r\n        public StrategyMakerBase(\r\n            weth_apt,\r\n            weth_ilk,\r\n            weth_collateral,\r\n            weth_collateral_decimal,\t\t\t\r\n            link_eth_usd,\r\n            weth_collateral,\r\n            _governance,\r\n            _strategist,\r\n            _controller,\r\n            _timelock\r\n        )\r\n    {\r\n\t   \r\n    }\r\n\t\r\n    // **** Setters ****\t\r\n\r\n    function setColFactorLeverageBuffer(uint256 _colFactorLeverageBuffer) public onlyGovernanceAndStrategist {\r\n        colFactorLeverageBuffer = _colFactorLeverageBuffer;\r\n    }\r\n\r\n    function setColFactorSyncBuffer(uint256 _colFactorSyncBuffer) public onlyGovernanceAndStrategist {\r\n        colFactorSyncBuffer = _colFactorSyncBuffer;\r\n    }\r\n\t\r\n    // **** State Mutation functions ****\r\n\r\n    function leverageToMax() public onlyKeepers{\r\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\r\n        uint256 idealSupply = getLeveragedSupplyTarget(unleveragedSupply);\r\n        _lUntil(idealSupply);\r\n    }\r\n\r\n    function deleverageToMin() public onlyKeepers{\r\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\r\n        _dlUntil(unleveragedSupply);\r\n    }\r\n\t\r\n    function leverageUntil(uint256 _supplyAmount) public onlyKeepers {\r\n        _lUntil(_supplyAmount);\r\n    }\r\n\t\r\n    function deleverageUntil(uint256 _supplyAmount) public onlyKeepers {\r\n        _dlUntil(_supplyAmount);\r\n    }\r\n\t\r\n    function harvest() public override onlyBenevolent {\r\n        _claimComp();\r\n\t\t\r\n        uint256 _comp = IERC20(comp).balanceOf(address(this));\r\n        if (_comp > 0) {\r\n            _swapUniswap(comp, want, _comp);\r\n        }\r\n\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        uint256 _buybackAmount = _want.mul(performanceFee).div(performanceMax);\r\n\r\n        if (buybackEnabled == true && _buybackAmount > 0) {\r\n            buybackAndNotify(want, _buybackAmount);\r\n        } else {\r\n            // We want to get back WETH\r\n            if (_want > 0) {\r\n                // Performance Fees goes to treasury\r\n                IERC20(want).safeTransfer(IController(controller).treasury(), _want.mul(performanceFee).div(performanceMax));\r\n            }\r\n        }\r\n\r\n        // re-invest to compounding profit\r\n        if (_want > 0) {\r\n            deposit();\r\n        }\r\n    }\r\n\t\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        return (weth_collateral, _lpAmount);\r\n    }\r\n\t\r\n    function _depositDAI(uint256 _daiAmt) internal override{\t\r\n        if (_daiAmt > 0){\t\t\r\n            _supplyDAI(_daiAmt);\r\n        }\r\n    }\r\n\t\r\n    function _withdrawDAI(uint256 _daiAmt) internal override{\t\r\n        if (_daiAmt > 0){\t\t\t\r\n            _redeemDAI(_daiAmt);\r\n        }\r\n    }\r\n\r\n    // **** Views ****\r\n\r\n    function getName() external override pure returns (string memory) {\r\n        return \"StrategyMakerWETHV1\";\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"}],\"name\":\"calculateDebtFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cether\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIlk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"}],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleverageToMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyAmount\",\"type\":\"uint256\"}],\"name\":\"deleverageUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dssCdpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowedView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"}],\"name\":\"getLeveragedSupplyTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketColFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSOSBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeLeverageColFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeSyncColFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliedUnleveraged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliedView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageToMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyAmount\",\"type\":\"uint256\"}],\"name\":\"leverageUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link_eth_usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCDP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuffMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemCollateralAmt\",\"type\":\"uint256\"}],\"name\":\"requiredPaidDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_colFactorLeverageBuffer\",\"type\":\"uint256\"}],\"name\":\"setColFactorLeverageBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_colFactorSyncBuffer\",\"type\":\"uint256\"}],\"name\":\"setColFactorSyncBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebt\",\"type\":\"uint256\"}],\"name\":\"setMinDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRatio\",\"type\":\"uint256\"}],\"name\":\"setMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmToken\",\"type\":\"address\"}],\"name\":\"setMmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBuff\",\"type\":\"uint256\"}],\"name\":\"setRatioBuff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_apt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_collateral_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyMakerWETHV1","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000007cdacba026dddaa0bd77e63474425f630ddf4a0d0000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://206a3c60d9092c1fff733e4e4aae60be270a982654b9d88c265b12e7c9a1bd71"}]}