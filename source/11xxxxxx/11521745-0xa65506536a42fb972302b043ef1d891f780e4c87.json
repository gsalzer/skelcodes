{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/staking/IFestakeRewardManager.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Ferrum Staking interface for adding reward\r\n */\r\ninterface IFestakeRewardManager {\r\n    /**\r\n     * @dev legacy add reward. To be used by contract support time limitted rewards.\r\n     */\r\n    function addReward(uint256 rewardAmount, uint256 withdrawableAmount) external returns (bool);\r\n\r\n    /**\r\n     * @dev withdraw rewards for the user.\r\n     * The only option is to withdraw all rewards is one go.\r\n     */\r\n    function withdrawRewards() external returns (uint256);\r\n\r\n    /**\r\n     * @dev marginal rewards is to be used by contracts supporting ongoing rewards.\r\n     * Send the reward to the contract address first.\r\n     */\r\n    function addMarginalReward() external returns (bool);\r\n\r\n    function rewardToken() external view returns (IERC20);\r\n\r\n    function rewardsTotal() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev returns current rewards for an address\r\n     */\r\n    function rewardOf(address addr) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/staking/IFestakeWithdrawer.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Ferrum Staking interface for adding reward\r\n */\r\ninterface IFestakeWithdrawer {\r\n\r\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker_, uint256 amount_, uint256 reward_);\r\n\r\n    /**\r\n     * @dev withdraws a certain amount and distributes rewards.\r\n     */\r\n    function withdraw(uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/staking/IFestaked.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Ferrum Staking interface\r\n */\r\ninterface IFestaked {\r\n    \r\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\r\n\r\n    function stake (uint256 amount) external returns (bool);\r\n\r\n    function stakeFor (address staker, uint256 amount) external returns (bool);\r\n\r\n    function stakeOf(address account) external view returns (uint256);\r\n\r\n    function getToken() external view returns (address);\r\n\r\n    function stakedTotal() external view returns (uint256);\r\n\r\n    function stakedBalance() external view returns (uint256);\r\n\r\n    function stakingStarts() external view returns (uint256);\r\n\r\n    function stakingEnds() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/staking/Festaked.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * A staking contract distributes rewards.\r\n * One can create several TraditionalFestaking over one\r\n * staking and give different rewards for a single\r\n * staking contract.\r\n */\r\ncontract Festaked is IFestaked {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint256) internal _stakes;\r\n\r\n    string public name;\r\n    address  public tokenAddress;\r\n    uint public override stakingStarts;\r\n    uint public override stakingEnds;\r\n    uint public withdrawStarts;\r\n    uint public withdrawEnds;\r\n    uint256 public override stakedTotal;\r\n    uint256 public stakingCap;\r\n    uint256 public override stakedBalance;\r\n\r\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\r\n\r\n    /**\r\n     * Fixed periods. For an open ended contract use end dates from very distant future.\r\n     */\r\n    constructor (\r\n        string memory name_,\r\n        address tokenAddress_,\r\n        uint stakingStarts_,\r\n        uint stakingEnds_,\r\n        uint withdrawStarts_,\r\n        uint withdrawEnds_,\r\n        uint256 stakingCap_) public {\r\n        name = name_;\r\n        require(tokenAddress_ != address(0), \"Festaking: 0 address\");\r\n        tokenAddress = tokenAddress_;\r\n\r\n        require(stakingStarts_ > 0, \"Festaking: zero staking start time\");\r\n        if (stakingStarts_ < now) {\r\n            stakingStarts = now;\r\n        } else {\r\n            stakingStarts = stakingStarts_;\r\n        }\r\n\r\n        require(stakingEnds_ >= stakingStarts, \"Festaking: staking end must be after staking starts\");\r\n        stakingEnds = stakingEnds_;\r\n\r\n        require(withdrawStarts_ >= stakingEnds, \"Festaking: withdrawStarts must be after staking ends\");\r\n        withdrawStarts = withdrawStarts_;\r\n\r\n        require(withdrawEnds_ >= withdrawStarts, \"Festaking: withdrawEnds must be after withdraw starts\");\r\n        withdrawEnds = withdrawEnds_;\r\n\r\n        require(stakingCap_ >= 0, \"Festaking: stakingCap cannot be negative\");\r\n        stakingCap = stakingCap_;\r\n    }\r\n\r\n    function stakeOf(address account) external override view returns (uint256) {\r\n        return _stakes[account];\r\n    }\r\n\r\n    function getToken() external override view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n\r\n    function stakeFor(address staker, uint256 amount)\r\n    external\r\n    override\r\n    _positive(amount)\r\n    _realAddress(staker)\r\n    _realAddress(msg.sender)\r\n    returns (bool) {\r\n        return _stake(msg.sender, staker, amount);\r\n    }\r\n\r\n    /**\r\n    * Requirements:\r\n    * - `amount` Amount to be staked\r\n    */\r\n    function stake(uint256 amount)\r\n    external\r\n    override\r\n    _positive(amount)\r\n    _realAddress(msg.sender)\r\n    returns (bool) {\r\n        address from = msg.sender;\r\n        return _stake(from, from, amount);\r\n    }\r\n\r\n    function _stake(address payer, address staker, uint256 amount)\r\n    virtual\r\n    internal\r\n    _after(stakingStarts)\r\n    _before(stakingEnds)\r\n    _positive(amount)\r\n    returns (bool) {\r\n        // check the remaining amount to be staked\r\n        uint256 remaining = amount;\r\n        if (stakingCap > 0 && remaining > (stakingCap.sub(stakedBalance))) {\r\n            remaining = stakingCap.sub(stakedBalance);\r\n        }\r\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\r\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\r\n        require(remaining > 0, \"Festaking: Staking cap is filled\");\r\n        require((remaining + stakedTotal) <= stakingCap, \"Festaking: this will increase staking amount pass the cap\");\r\n        if (!_payMe(payer, remaining, tokenAddress)) {\r\n            return false;\r\n        }\r\n        emit Staked(tokenAddress, staker, amount, remaining);\r\n\r\n        // Transfer is completed\r\n        stakedBalance = stakedBalance.add(remaining);\r\n        stakedTotal = stakedTotal.add(remaining);\r\n        _stakes[staker] = _stakes[staker].add(remaining);\r\n        return true;\r\n    }\r\n\r\n    function _payMe(address payer, uint256 amount, address token)\r\n    internal\r\n    returns (bool) {\r\n        return _payTo(payer, address(this), amount, token);\r\n    }\r\n\r\n    function _payTo(address allower, address receiver, uint256 amount, address token)\r\n    internal\r\n    returns (bool) {\r\n        // Request to transfer amount from the contract to receiver.\r\n        // contract does not own the funds, so the allower must have added allowance to the contract\r\n        // Allower is the original owner.\r\n        IERC20(token).safeTransferFrom(allower, receiver, amount);\r\n        return true;\r\n    }\r\n\r\n    modifier _realAddress(address addr) {\r\n        require(addr != address(0), \"Festaking: zero address\");\r\n        _;\r\n    }\r\n\r\n    modifier _positive(uint256 amount) {\r\n        require(amount >= 0, \"Festaking: negative amount\");\r\n        _;\r\n    }\r\n\r\n    modifier _after(uint eventTime) {\r\n        require(now >= eventTime, \"Festaking: bad timing for the request\");\r\n        _;\r\n    }\r\n\r\n    modifier _before(uint eventTime) {\r\n        require(now < eventTime, \"Festaking: bad timing for the request\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/staking/OpenEndedRewardManager.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Allows stake, unstake, and add reward at any time.\r\n * stake and reward token can be different.\r\n */\r\ncontract OpenEndedRewardManager is \r\n        Festaked,\r\n        IFestakeRewardManager, IFestakeWithdrawer {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public override rewardToken;\r\n    uint256 public override rewardsTotal;\r\n    uint256 public fakeRewardsTotal;\r\n    mapping (address=>uint256) fakeRewards;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        address tokenAddress_,\r\n        address rewardTokenAddress_,\r\n        uint stakingStarts_,\r\n        uint stakingEnds_,\r\n        uint withdrawStarts_,\r\n        uint withdrawEnds_,\r\n        uint256 stakingCap_) Festaked(name_, tokenAddress_, stakingStarts_, stakingEnds_,\r\n            withdrawStarts_, withdrawEnds_, stakingCap_) public {\r\n            rewardToken = IERC20(rewardTokenAddress_);\r\n    }\r\n\r\n    /**\r\n     * First send the rewards to this contract, then call this method.\r\n     * Designed to be called by smart contracts.\r\n     */\r\n    function addMarginalReward()\r\n    external override returns (bool) {\r\n        return _addMarginalReward();\r\n    }\r\n\r\n    function _addMarginalReward()\r\n    internal virtual returns (bool) {\r\n        address me = address(this);\r\n        IERC20 _rewardToken = rewardToken;\r\n        uint256 amount = _rewardToken.balanceOf(me).sub(rewardsTotal);\r\n        if (address(_rewardToken) == tokenAddress) {\r\n            amount = amount.sub(stakedBalance);\r\n        }\r\n        if (amount == 0) {\r\n            return true; // No reward to add. Its ok. No need to fail callers.\r\n        }\r\n        rewardsTotal = rewardsTotal.add(amount);\r\n        fakeRewardsTotal = fakeRewardsTotal.add(amount);\r\n    }\r\n\r\n    function addReward(uint256 rewardAmount, uint256 withdrawableAmount)\r\n    external override returns (bool) {\r\n        require(withdrawableAmount == 0, \"OERM: withdrawableAmount > 0 not supported\");\r\n        require(rewardAmount != 0, \"OERM: rewardAmount not supported\");\r\n        rewardToken.safeTransferFrom(msg.sender, address(this), rewardAmount);\r\n        _addMarginalReward();\r\n    }\r\n\r\n    function fakeRewardOf(address staker) external view returns (uint256) {\r\n        return fakeRewards[staker];\r\n    }\r\n\r\n    function rewardOf(address staker)\r\n    external override virtual view returns (uint256) {\r\n        uint256 stake = Festaked._stakes[staker];\r\n        return _calcRewardOf(staker, stakedBalance, stake);\r\n    }\r\n\r\n    function _calcRewardOf(address staker, uint256 totalStaked_, uint256 stake)\r\n    internal view returns (uint256) {\r\n        if (stake == 0) {\r\n            return 0;\r\n        }\r\n        uint256 fr = fakeRewards[staker];\r\n        uint256 rew = _calcReward(totalStaked_, fakeRewardsTotal, stake);\r\n        return rew > fr ? rew.sub(fr) : 0; // Ignoring the overflow problem\r\n    }\r\n\r\n    function withdrawRewards() external override virtual returns (uint256) {\r\n        require(msg.sender != address(0), \"OERM: Bad address\");\r\n        return _withdrawRewards(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * First withdraw all rewards, than withdarw it all, then stake back the remaining.\r\n     */\r\n    function withdraw(uint256 amount) external override virtual returns (bool) {\r\n        address _staker = msg.sender;\r\n        return _withdraw(_staker, amount);\r\n    }\r\n\r\n    function _withdraw(address _staker, uint256 amount)\r\n    internal virtual returns (bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        uint256 actualPay = _withdrawOnlyUpdateState(_staker, amount);\r\n        IERC20(tokenAddress).safeTransfer(_staker, amount);\r\n        if (actualPay != 0) {\r\n            rewardToken.safeTransfer(_staker, actualPay);\r\n        }\r\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, amount, actualPay);\r\n        return true;\r\n    }\r\n\r\n    function _withdrawOnlyUpdateState(address _staker, uint256 amount)\r\n    internal virtual returns (uint256) {\r\n        uint256 userStake = _stakes[_staker];\r\n        require(amount <= userStake, \"OERM: Not enough balance\");\r\n        uint256 userFake = fakeRewards[_staker];\r\n        uint256 fakeTotal = fakeRewardsTotal;\r\n        uint256 _stakedBalance = stakedBalance;\r\n        uint256 actualPay = _calcWithdrawRewards(userStake, userFake, _stakedBalance, fakeTotal);\r\n\r\n        uint256 fakeRewAmount = _calculateFakeRewardAmount(amount, fakeTotal, _stakedBalance);\r\n\r\n        fakeRewardsTotal = fakeRewardsTotal.sub(fakeRewAmount);\r\n        fakeRewards[_staker] = userFake.add(actualPay).sub(fakeRewAmount);\r\n        rewardsTotal = rewardsTotal.sub(actualPay);\r\n        stakedBalance = _stakedBalance.sub(amount);\r\n        _stakes[_staker] = userStake.sub(amount);\r\n        return actualPay;\r\n    }\r\n\r\n    function _stake(address payer, address staker, uint256 amount)\r\n    virtual\r\n    override\r\n    internal\r\n    _after(stakingStarts)\r\n    _before(withdrawEnds)\r\n    _positive(amount)\r\n    _realAddress(payer)\r\n    _realAddress(staker)\r\n    returns (bool) {\r\n        return _stakeNoPreAction(payer, staker, amount);\r\n    }\r\n\r\n    function _stakeNoPreAction(address payer, address staker, uint256 amount)\r\n    internal\r\n    returns (bool) {\r\n        uint256 remaining = amount;\r\n        uint256 _stakingCap = stakingCap;\r\n        uint256 _stakedBalance = stakedBalance;\r\n        if (_stakingCap != 0 && remaining > (_stakingCap.sub(_stakedBalance))) {\r\n            remaining = _stakingCap.sub(_stakedBalance);\r\n        }\r\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\r\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\r\n        require(remaining != 0, \"OERM: Staking cap is filled\");\r\n        require(remaining.add(stakedBalance) <= stakingCap, \"OERM: this will increase staking amount pass the cap\");\r\n        if (!_payMe(payer, remaining, tokenAddress)) {\r\n            return false;\r\n        }\r\n        require(_stakeUpdateStateOnly(staker, remaining), \"OERM: Error staking\");\r\n        // To ensure total is only updated here. Not when simulating the stake.\r\n        stakedTotal = stakedTotal.add(remaining);\r\n        emit Staked(tokenAddress, staker, amount, remaining);\r\n    }\r\n\r\n    function _stakeUpdateStateOnly(address staker, uint256 amount)\r\n    internal returns (bool) {\r\n        uint256 _stakedBalance = stakedBalance;\r\n        uint256 _fakeTotal = fakeRewardsTotal;\r\n        bool isNotNew = _stakedBalance != 0;\r\n        uint256 curRew = isNotNew ?\r\n            _calculateFakeRewardAmount(amount, _fakeTotal, _stakedBalance) :\r\n            _fakeTotal;\r\n\r\n        _stakedBalance = _stakedBalance.add(amount);\r\n        _stakes[staker] = _stakes[staker].add(amount);\r\n        fakeRewards[staker] = fakeRewards[staker].add(curRew);\r\n\r\n        stakedBalance = _stakedBalance;\r\n        if (isNotNew) {\r\n            fakeRewardsTotal = _fakeTotal.add(curRew);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _calculateFakeRewardAmount(\r\n        uint256 amount, uint256 baseFakeTotal, uint256 baseStakeTotal\r\n    ) internal pure returns (uint256) {\r\n        return amount.mul(baseFakeTotal).div(baseStakeTotal);\r\n    }\r\n\r\n    function _withdrawRewards(address _staker) internal returns (uint256) {\r\n        uint256 userStake = _stakes[_staker];\r\n        uint256 _stakedBalance = stakedBalance;\r\n        uint256 totalFake = fakeRewardsTotal;\r\n        uint256 userFake = fakeRewards[_staker];\r\n        uint256 actualPay = _calcWithdrawRewards(userStake, userFake, _stakedBalance, totalFake);\r\n        rewardsTotal = rewardsTotal.sub(actualPay);\r\n        fakeRewards[_staker] = fakeRewards[_staker].add(actualPay);\r\n        if (actualPay != 0) {\r\n            rewardToken.safeTransfer(_staker, actualPay);\r\n        }\r\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, 0, actualPay);\r\n        return actualPay;\r\n    }\r\n\r\n    function _calcWithdrawRewards(\r\n        uint256 _stakedAmount,\r\n        uint256 _userFakeRewards,\r\n        uint256 _totalStaked,\r\n        uint256 _totalFakeRewards)\r\n    internal pure returns (uint256) {\r\n        uint256 toPay = _calcReward(_totalStaked, _totalFakeRewards, _stakedAmount);\r\n        return toPay > _userFakeRewards ? toPay.sub(_userFakeRewards) : 0; // Ignore rounding issue\r\n    }\r\n\r\n    function _calcReward(uint256 total, uint256 fakeTotal, uint256 staked)\r\n    internal pure returns (uint256) {\r\n        return fakeTotal.mul(staked).div(total);\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/common/Constants.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\nlibrary Constants {\r\n    address constant uniV2FactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    IUniswapV2Factory constant uniV2Factory = IUniswapV2Factory(uniV2FactoryAddress);\r\n\r\n    address constant uniV2Router02Address = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 constant uniV2Router02 = IUniswapV2Router02(uniV2Router02Address);\r\n\r\n    uint32 constant Future2100 = 4102448400;\r\n}\r\n\r\n// File: contracts/staking/FestakedRewardContinuation.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Reward continuation can be used to add reward to any staking.\r\n * We cannot withdraw or stake from here, but we can withdrawRewards.\r\n * Key is to do a shaddow management of stakes on this contract.\r\n */\r\ncontract FestakedRewardContinuation is OpenEndedRewardManager {\r\n    IFestaked public targetStake;\r\n    bool initialSync = false;\r\n    constructor(\r\n        address targetStake_,\r\n        address tokenAddress_,\r\n        address rewardTokenAddress_) OpenEndedRewardManager(\r\n            \"RewardContinuation\", tokenAddress_, rewardTokenAddress_, now, Constants.Future2100,\r\n            Constants.Future2100+1, Constants.Future2100+2, 2**128) public {\r\n            targetStake = IFestaked(targetStake_);\r\n    }\r\n\r\n    function initialize() public virtual returns (bool) {\r\n        require(!initialSync, \"FRC: Already initialized\");\r\n        require(now >= targetStake.stakingEnds(), \r\n            \"FRC: Bad timing. Cannot initialize before target stake contribution is closed\");\r\n        uint256 stakedBalance_ = targetStake.stakedBalance();\r\n        stakedTotal = stakedBalance_;\r\n        stakedBalance = stakedBalance_;\r\n        initialSync = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the current stake against the original.\r\n     * runs a dummy withdraw or stake then calculates the rewards accordingly.\r\n     * TODO: Test scenario: Add reward, remote withdraw, then withdraw here.\r\n     */\r\n    function rewardOf(address staker)\r\n    external override view returns (uint256) {\r\n        require(initialSync, \"FRC: Run initialSync\");\r\n        if (_stakes[staker] == 0) {\r\n            uint256 remoteStake = _remoteStake(staker);\r\n            return _calcRewardOf(staker, stakedBalance, remoteStake);\r\n        }\r\n        return _calcRewardOf(staker, stakedBalance, _stakes[staker]);\r\n    }\r\n\r\n    function _stake(address, address, uint256)\r\n    override\r\n    virtual\r\n    internal\r\n    returns (bool)\r\n    {\r\n        require(false, \"RewardContinuation: Stake not supported\");\r\n    }\r\n\r\n    function withdraw(uint256) external override virtual returns (bool) {\r\n        require(false, \"RewardContinuation: Withdraw not supported\");\r\n    }\r\n\r\n    function _addMarginalReward()\r\n    internal override virtual returns (bool) {\r\n        address me = address(this);\r\n        IERC20 _rewardToken = rewardToken;\r\n        uint256 amount = _rewardToken.balanceOf(me).sub(rewardsTotal);\r\n        // We don't carry stakes here\r\n        // if (address(_rewardToken) == tokenAddress) {\r\n        //     amount = amount.sub(...);\r\n        // }\r\n        if (amount == 0) {\r\n            return true; // No reward to add. Its ok. No need to fail callers.\r\n        }\r\n        rewardsTotal = rewardsTotal.add(amount);\r\n        fakeRewardsTotal = fakeRewardsTotal.add(amount);\r\n    }\r\n\r\n    function withdrawRewardsFor(address staker) external returns (uint256) {\r\n        require(msg.sender != address(0), \"OERM: Bad address\");\r\n        return _withdrawRewardsForRemote(staker);\r\n    }\r\n\r\n    function withdrawRewards() external override returns (uint256) {\r\n        require(msg.sender != address(0), \"OERM: Bad address\");\r\n        return _withdrawRewardsForRemote(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev it is important to know there will be no more stake on the remote side\r\n     */\r\n    function _withdrawRewardsForRemote(address staker) internal returns(uint256) {\r\n        require(initialSync, \"FRC: Run initialSync\");\r\n        uint256 currentStake = Festaked._stakes[staker];\r\n        uint256 remoteStake = _remoteStake(staker);\r\n        uint256 stakedBalance_ = targetStake.stakedBalance();\r\n        // Make sure total staked hasnt gone up on the other side.\r\n        require(stakedBalance_ <= stakedTotal, \"FRC: Remote side staked total has increased!\");\r\n        require(currentStake == 0 || remoteStake <= currentStake, \"FRC: Cannot stake more on the remote side\");\r\n        if (currentStake == 0) {\r\n            // First time. Replicate the stake.\r\n            _stakes[staker] = remoteStake;\r\n            _withdrawRewards(staker);\r\n        } else if (remoteStake < currentStake) {\r\n            // This means user has withdrawn remotely! Run the withdraw here to match remote.\r\n            uint256 amount = currentStake.sub(remoteStake);\r\n            _withdraw(staker, amount);\r\n            require(_stakes[staker] == remoteStake, \"FRC: Wirhdraw simulation didn't happen correctly!\");\r\n        } else {\r\n            _withdrawRewards(staker);\r\n        }\r\n    }\r\n\r\n    function _withdraw(address _staker, uint256 amount)\r\n    internal override virtual returns (bool) {\r\n        uint256 actualPay = _withdrawOnlyUpdateState(_staker, amount);\r\n        // We do not have main token to pay. This is just a simulation of withdraw\r\n        // IERC20(tokenAddress).safeTransfer(_staker, amount);\r\n        if (actualPay != 0) {\r\n            rewardToken.safeTransfer(_staker, actualPay);\r\n        }\r\n        emit PaidOut(tokenAddress, address(rewardToken), _staker, 0, actualPay);\r\n        return true;\r\n    }\r\n\r\n    function _remoteStake(address staker) internal view returns (uint256){\r\n        return targetStake.stakeOf(staker);\r\n    }\r\n}\r\n\r\n// File: contracts/staking/beta/FestakedRewardContinuationBeta.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * A beta version of FestakedRewardContinuation with ability of sweeping the rewards\r\n * in case something went wrong.\r\n * NOTE: Once you sweep rewards to owner, do NOT use the contract any more.\r\n */\r\ncontract FestakedRewardContinuationBeta is FestakedRewardContinuation, Ownable {\r\n    constructor(\r\n        address targetStake_,\r\n        address tokenAddress_,\r\n        address rewardTokenAddress_) FestakedRewardContinuation(\r\n            targetStake_, tokenAddress_, rewardTokenAddress_) public {}\r\n    bool nuked = false;\r\n\r\n    function initialize() public override returns (bool) {\r\n        require(!nuked, \"FRCB: Already nuked\");\r\n        return FestakedRewardContinuation.initialize();\r\n    }\r\n\r\n    function sweepToOwner() onlyOwner() external {\r\n        uint256 balance = rewardToken.balanceOf(address(this));\r\n        rewardToken.safeTransfer(owner(), balance);\r\n        initialSync = false; // Make sure contract cannot be used any more.\r\n        nuked = true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetStake_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addMarginalReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"fakeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fakeRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetStake\",\"outputs\":[{\"internalType\":\"contract IFestaked\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawRewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FestakedRewardContinuationBeta","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000de432d6877e158f95aea5786aa94ea04cf2ae6df00000000000000000000000007597255910a51509ca469568b048f2597e7250400000000000000000000000007597255910a51509ca469568b048f2597e72504","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4682f5aac5f39d8fec1c3f77a9b1a6aa01798a26846dbf97a5c2a28032045cbd"}]}