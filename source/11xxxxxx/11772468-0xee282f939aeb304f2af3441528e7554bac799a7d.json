{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface INUXAsset {\r\n    function availableBalanceOf(address _holder) external view returns(uint);\r\n    function scheduleReleaseStart() external;\r\n    function transferLock(address _to, uint _value) external;\r\n    function publicSaleTransferLock(address _to, uint _value) external;\r\n    function locked(address _holder) external view returns(uint, uint);\r\n    function preSaleScheduleReleaseStart() external;\r\n    function preSaleTransferLock(address _to, uint _value) external;\r\n}\r\n\r\ncontract NUXConstants {\r\n    uint constant NUX = 10**18;\r\n}\r\n\r\ncontract Readable {\r\n    function since(uint _timestamp) internal view returns(uint) {\r\n        if (not(passed(_timestamp))) {\r\n            return 0;\r\n        }\r\n        return block.timestamp - _timestamp;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\nlibrary ExtraMath {\r\n    function toUInt32(uint _a) internal pure returns(uint32) {\r\n        require(_a <= uint32(-1), 'uint32 overflow');\r\n        return uint32(_a);\r\n    }\r\n\r\n    function toUInt40(uint _a) internal pure returns(uint40) {\r\n        require(_a <= uint40(-1), 'uint40 overflow');\r\n        return uint40(_a);\r\n    }\r\n\r\n    function toUInt64(uint _a) internal pure returns(uint64) {\r\n        require(_a <= uint64(-1), 'uint64 overflow');\r\n        return uint64(_a);\r\n    }\r\n\r\n    function toUInt128(uint _a) internal pure returns(uint128) {\r\n        require(_a <= uint128(-1), 'uint128 overflow');\r\n        return uint128(_a);\r\n    }\r\n}\r\n\r\ncontract NUXSale is Ownable, NUXConstants, Readable {\r\n    using SafeERC20 for IERC20;\r\n    using ExtraMath for *;\r\n    using SafeMath for *;\r\n    INUXAsset public NUXAsset;\r\n    address payable public treasury;\r\n\r\n\r\n    struct State {\r\n        uint32 etherPriceUSD;\r\n        uint40 minimumDepositUSD;\r\n        uint40 maximumDepositUSD;\r\n        uint64 totalDepositedInUSD;\r\n        uint32 nextDepositId;\r\n        uint32 clearedDepositId;\r\n    }\r\n    State private _state;\r\n    mapping(uint => Deposit) public deposits;\r\n\r\n    uint public constant SALE_START = 1612278000; // Tuesday, February 2, 2021 3:00:00 PM UTC\r\n    uint public constant SALE_END = SALE_START + 84 hours; // Saturday, February 6, 2021 3:00:00 PM UTC\r\n\r\n    struct Deposit {\r\n        address payable user;\r\n        uint amount;\r\n        uint clearing1;\r\n        uint clearing2;\r\n        uint clearing3;\r\n        uint clearing4;\r\n    }\r\n\r\n    event DepositEvent(address _from, uint _value);\r\n    event ETHReturned(address _to, uint _amount);\r\n    event ETHPriceSet(uint _usdPerETH);\r\n    event Cleared();\r\n    event ClearingPaused(uint _lastDepositId);\r\n    event TreasurySet(address _treasury);\r\n\r\n    modifier onlyTreasury {\r\n        require(msg.sender == treasury, 'Only treasury');\r\n        _;\r\n    }\r\n\r\n    constructor(INUXAsset _nux, address payable _treasury) public {\r\n        NUXAsset = _nux;\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function etherPriceUSD() public view returns(uint) {\r\n        return _state.etherPriceUSD;\r\n    }\r\n\r\n    function minimumDepositUSD() public view returns(uint) {\r\n        return _state.minimumDepositUSD;\r\n    }\r\n\r\n    function maximumDepositUSD() public view returns(uint) {\r\n        return _state.maximumDepositUSD;\r\n    }\r\n\r\n    function totalDepositedInUSD() public view returns(uint) {\r\n        return _state.totalDepositedInUSD;\r\n    }\r\n\r\n    function nextDepositId() public view returns(uint) {\r\n        return _state.nextDepositId;\r\n    }\r\n\r\n    function clearedDepositId() public view returns(uint) {\r\n        return _state.clearedDepositId;\r\n    }\r\n\r\n    function setETHPrice(uint _usdPerETH) public onlyOwner {\r\n        State memory state = _state;\r\n        require(state.etherPriceUSD == 0, 'Already set');\r\n        state.etherPriceUSD = _usdPerETH.toUInt32();\r\n        state.minimumDepositUSD = (_usdPerETH / 10).toUInt40(); // 0.1 ETH\r\n        state.maximumDepositUSD = (50 * _usdPerETH).toUInt40(); // 50 ETH\r\n        _state = state;\r\n        emit ETHPriceSet(_usdPerETH);\r\n    }\r\n\r\n    function setTreasury(address payable _treasury) public onlyOwner {\r\n        require(_treasury != address(0), 'Zero address not allowed');\r\n        treasury = _treasury;\r\n        emit TreasurySet(_treasury);\r\n    }\r\n\r\n    function saleStarted() public view returns(bool) {\r\n        return passed(SALE_START);\r\n    }\r\n\r\n    function tokensSold() public view returns(uint) {\r\n        return totalDepositedInUSD() * NUX / getSalePrice();\r\n    }\r\n\r\n    function saleEnded() public view returns(bool) {\r\n        return passed(SALE_END) || _isTokensSold(getSalePrice(), totalDepositedInUSD());\r\n    }\r\n\r\n    function _saleEnded(uint _salePrice, uint _totalDeposited) private view returns(bool) {\r\n        return passed(SALE_END) || _isTokensSold(_salePrice, _totalDeposited);\r\n    }\r\n\r\n    function ETHToUSD(uint _value) public view returns(uint) {\r\n        return _ETHToUSD(_value, etherPriceUSD());\r\n    }\r\n\r\n    function _ETHToUSD(uint _value, uint _etherPrice) private pure returns(uint) {\r\n        return (_value * _etherPrice) / 1 ether;\r\n    }\r\n\r\n    function USDtoETH(uint _value) public view returns(uint) {\r\n        return (_value * 1 ether) / etherPriceUSD();\r\n    }\r\n\r\n    function USDToNUX(uint _value) public view returns(uint) {\r\n        return (_value * NUX) / getSalePrice();\r\n    }\r\n\r\n    function NUXToUSD(uint _value) public view returns(uint) {\r\n        return (_value * getSalePrice()) / NUX;\r\n    }\r\n\r\n    function ETHToNUX(uint _value) public view returns(uint) {\r\n        return _ETHToNUX(_value, etherPriceUSD(), getSalePrice());\r\n    }\r\n\r\n    function NUXToETH(uint _value) public view returns(uint) {\r\n        return _NUXToETH(_value, etherPriceUSD(), getSalePrice());\r\n    }\r\n\r\n    function _ETHToNUX(uint _value, uint _ethPrice, uint _salePrice) private pure returns(uint) {\r\n        return _value * _ethPrice / _salePrice;\r\n    }\r\n\r\n    function _NUXToETH(uint _value, uint _ethPrice, uint _salePrice) private pure returns(uint) {\r\n        return _value * _salePrice / _ethPrice;\r\n    }\r\n\r\n    function getSalePrice() public view returns(uint) {\r\n        return _getSalePrice(totalDepositedInUSD());\r\n    }\r\n\r\n    function _getSalePrice(uint _totalDeposited) private view returns(uint) {\r\n        if (_isTokensSold(2500000, _totalDeposited) || not(passed(SALE_START + 12 hours))) {\r\n            return 2500000; // 2.5 USD\r\n        } else if (_isTokensSold(1830000, _totalDeposited) || not(passed(SALE_START + 24 hours))) {\r\n            return 1830000; // 1.83 USD\r\n        } else if (_isTokensSold(1350000, _totalDeposited) || not(passed(SALE_START + 36 hours))) {\r\n            return 1350000; // 1.35 USD\r\n        } else if (_isTokensSold(990000, _totalDeposited) || not(passed(SALE_START + 48 hours))) {\r\n            return 990000; // 0.99 USD\r\n        } else if (_isTokensSold(730000, _totalDeposited) || not(passed(SALE_START + 60 hours))){\r\n            return 730000; // 0.73 USD\r\n        } else if (_isTokensSold(530000, _totalDeposited) || not(passed(SALE_START + 72 hours))) {\r\n            return 530000; // 0.53 USD\r\n        } else {\r\n            return 350000; // 0.35 USD\r\n        }\r\n    }\r\n\r\n    function _isTokensSold(uint _price, uint _totalDeposited) internal pure returns(bool) {\r\n        return ((_totalDeposited * NUX) / _price) >= (4000000 * NUX);\r\n    }\r\n\r\n    function () external payable {\r\n        if (msg.sender == treasury) {\r\n            return;\r\n        }\r\n        _deposit();\r\n    }\r\n\r\n    function depositETH() public payable {\r\n        _deposit();\r\n    }\r\n\r\n    function _deposit() internal {\r\n        State memory state = _state;\r\n        treasury.transfer(msg.value);\r\n        uint usd = _ETHToUSD(msg.value, state.etherPriceUSD);\r\n        require(saleStarted(), 'Public sale not started yet');\r\n        require(not(_saleEnded(_getSalePrice(state.totalDepositedInUSD), state.totalDepositedInUSD)), 'Public sale already ended');\r\n        require(usd >= uint(state.minimumDepositUSD), 'Minimum deposit not met');\r\n        require(usd <= uint(state.maximumDepositUSD), 'Maximum deposit reached');\r\n\r\n        deposits[state.nextDepositId] = Deposit(msg.sender, msg.value, 1, 1, 1, 1);\r\n        state.nextDepositId = (state.nextDepositId.add(1)).toUInt32();\r\n\r\n        state.totalDepositedInUSD = (state.totalDepositedInUSD.add(usd)).toUInt64();\r\n        _state = state;\r\n        emit DepositEvent(msg.sender, msg.value);\r\n    }\r\n\r\n    function clearing() public onlyOwner {\r\n        State memory state = _state;\r\n        uint salePrice = _getSalePrice(state.totalDepositedInUSD);\r\n        require(_saleEnded(salePrice, state.totalDepositedInUSD), 'Public sale not ended yet');\r\n        require(state.nextDepositId > state.clearedDepositId, 'Clearing finished');\r\n        INUXAsset nuxAsset = NUXAsset;\r\n\r\n        (, uint lockedBalance) = nuxAsset.locked(address(this));\r\n        for (uint i = state.clearedDepositId; i < state.nextDepositId; i++) {\r\n            if (gasleft() < 500000) {\r\n                state.clearedDepositId = i.toUInt32();\r\n                _state = state;\r\n                emit ClearingPaused(i);\r\n                return;\r\n            }\r\n            Deposit memory deposit = deposits[i];\r\n            delete deposits[i];\r\n\r\n            uint nux = _ETHToNUX(deposit.amount, state.etherPriceUSD, salePrice);\r\n            if (lockedBalance >= nux) {\r\n                nuxAsset.publicSaleTransferLock(deposit.user, nux);\r\n                lockedBalance = lockedBalance - nux;\r\n            } else if (lockedBalance > 0) {\r\n                nuxAsset.publicSaleTransferLock(deposit.user, lockedBalance);\r\n                uint tokensLeftToETH = nux - lockedBalance;\r\n                uint ethAmount = _NUXToETH(tokensLeftToETH, state.etherPriceUSD, salePrice);\r\n                lockedBalance = 0;\r\n                deposit.user.transfer(ethAmount);\r\n                emit ETHReturned(deposit.user, ethAmount);\r\n            } else {\r\n                deposit.user.transfer(deposit.amount);\r\n                emit ETHReturned(deposit.user, deposit.amount);\r\n            }\r\n        }\r\n        state.clearedDepositId = state.nextDepositId;\r\n\r\n        if (lockedBalance > 0) {\r\n            nuxAsset.publicSaleTransferLock(address(0), lockedBalance);\r\n        }\r\n\r\n        _state = state;\r\n        emit Cleared();\r\n    }\r\n\r\n    function recoverTokens(IERC20 _token, address _to, uint _value) public onlyTreasury {\r\n        _token.safeTransfer(_to, _value);\r\n    }\r\n\r\n    function recoverETH() public onlyTreasury {\r\n        treasury.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"clearing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ETHToNUX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumDepositUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NUXToUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDepositedInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDepositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NUXToETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"USDToNUX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumDepositUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPriceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ETHToUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUXAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clearedDepositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"clearing1\",\"type\":\"uint256\"},{\"name\":\"clearing2\",\"type\":\"uint256\"},{\"name\":\"clearing3\",\"type\":\"uint256\"},{\"name\":\"clearing4\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerETH\",\"type\":\"uint256\"}],\"name\":\"setETHPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"USDtoETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nux\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ETHReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_usdPerETH\",\"type\":\"uint256\"}],\"name\":\"ETHPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Cleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lastDepositId\",\"type\":\"uint256\"}],\"name\":\"ClearingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NUXSale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000001c2243aef55a316caa0b6a1715b607b898987483000000000000000000000000bb12800e7446a51395b2d853d6ce7f22210bb5e5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c4514907c707602e86ae3ea778fb28b39c3a0dd4e2613c451df8a6222699f7ae"}]}