{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.7\r\n\"\"\"\r\n@title Curve Registry Address Provider\r\n@license MIT\r\n@author Curve.Fi\r\n\"\"\"\r\n\r\nevent NewAddressIdentifier:\r\n    id: indexed(uint256)\r\n    addr: address\r\n    description: String[64]\r\n\r\nevent AddressModified:\r\n    id: indexed(uint256)\r\n    new_address: address\r\n    version: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\n\r\nstruct AddressInfo:\r\n    addr: address\r\n    is_active: bool\r\n    version: uint256\r\n    last_modified: uint256\r\n    description: String[64]\r\n\r\n\r\nregistry: address\r\nadmin: public(address)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_admin: public(address)\r\n\r\nqueue_length: uint256\r\nget_id_info: public(HashMap[uint256, AddressInfo])\r\n\r\n\r\n@external\r\ndef __init__(_admin: address):\r\n    self.admin = _admin\r\n    self.queue_length = 1\r\n    self.get_id_info[0].description = \"Main Registry\"\r\n\r\n\r\n@view\r\n@external\r\ndef get_registry() -> address:\r\n    \"\"\"\r\n    @notice Get the address of the main registry contract\r\n    @dev This is a gas-efficient way of calling `AddressProvider.get_address(0)`\r\n    @return address main registry contract\r\n    \"\"\"\r\n    return self.registry\r\n\r\n\r\n@view\r\n@external\r\ndef max_id() -> uint256:\r\n    \"\"\"\r\n    @notice Get the highest ID set within the address provider\r\n    @return uint256 max ID\r\n    \"\"\"\r\n    return self.queue_length - 1\r\n\r\n\r\n@view\r\n@external\r\ndef get_address(_id: uint256) -> address:\r\n    \"\"\"\r\n    @notice Fetch the address associated with `_id`\r\n    @dev Returns ZERO_ADDRESS if `_id` has not been defined, or has been unset\r\n    @param _id Identifier to fetch an address for\r\n    @return Current address associated to `_id`\r\n    \"\"\"\r\n    return self.get_id_info[_id].addr\r\n\r\n\r\n@external\r\ndef add_new_id(_address: address, _description: String[64]) -> uint256:\r\n    \"\"\"\r\n    @notice Add a new identifier to the registry\r\n    @dev ID is auto-incremented\r\n    @param _address Initial address to assign to new identifier\r\n    @param _description Human-readable description of the identifier\r\n    @return uint256 identifier\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert _address.is_contract  # dev: not a contract\r\n\r\n    id: uint256 = self.queue_length\r\n    self.get_id_info[id] = AddressInfo({\r\n        addr: _address,\r\n        is_active: True,\r\n        version: 1,\r\n        last_modified: block.timestamp,\r\n        description: _description\r\n    })\r\n    self.queue_length = id + 1\r\n\r\n    log NewAddressIdentifier(id, _address, _description)\r\n\r\n    return id\r\n\r\n\r\n@external\r\ndef set_address(_id: uint256, _address: address) -> bool:\r\n    \"\"\"\r\n    @notice Set a new address for an existing identifier\r\n    @param _id Identifier to set the new address for\r\n    @param _address Address to set\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert _address.is_contract  # dev: not a contract\r\n    assert self.queue_length > _id  # dev: id does not exist\r\n\r\n    version: uint256 = self.get_id_info[_id].version + 1\r\n\r\n    self.get_id_info[_id].addr = _address\r\n    self.get_id_info[_id].is_active = True\r\n    self.get_id_info[_id].version = version\r\n    self.get_id_info[_id].last_modified = block.timestamp\r\n\r\n    if _id == 0:\r\n        self.registry = _address\r\n\r\n    log AddressModified(_id, _address, version)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef unset_address(_id: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Unset an existing identifier\r\n    @dev An identifier cannot ever be removed, it can only have the\r\n         address unset so that it returns ZERO_ADDRESS\r\n    @param _id Identifier to unset\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.get_id_info[_id].is_active  # dev: not active\r\n\r\n    self.get_id_info[_id].is_active = False\r\n    self.get_id_info[_id].addr = ZERO_ADDRESS\r\n    self.get_id_info[_id].last_modified = block.timestamp\r\n\r\n    if _id == 0:\r\n        self.registry = ZERO_ADDRESS\r\n\r\n    log AddressModified(_id, ZERO_ADDRESS, self.get_id_info[_id].version)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_new_admin: address) -> bool:\r\n    \"\"\"\r\n    @notice Initiate a transfer of contract ownership\r\n    @dev Once initiated, the actual transfer may be performed three days later\r\n    @param _new_admin Address of the new owner account\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.transfer_ownership_deadline == 0  # dev: transfer already active\r\n\r\n    deadline: uint256 = block.timestamp + 3*86400\r\n    self.transfer_ownership_deadline = deadline\r\n    self.future_admin = _new_admin\r\n\r\n    log CommitNewAdmin(deadline, _new_admin)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Finalize a transfer of contract ownership\r\n    @dev May only be called by the current owner, three days after a\r\n         call to `commit_transfer_ownership`\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.transfer_ownership_deadline != 0  # dev: transfer not active\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: now < deadline\r\n\r\n    new_admin: address = self.future_admin\r\n    self.admin = new_admin\r\n    self.transfer_ownership_deadline = 0\r\n\r\n    log NewAdmin(new_admin)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Revert a transfer of contract ownership\r\n    @dev May only be called by the current owner\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n    return True","ABI":"[{\"name\":\"NewAddressIdentifier\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"id\",\"indexed\":true},{\"type\":\"address\",\"name\":\"addr\",\"indexed\":false},{\"type\":\"string\",\"name\":\"description\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddressModified\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"id\",\"indexed\":true},{\"type\":\"address\",\"name\":\"new_address\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"version\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewAdmin\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"deadline\",\"indexed\":true},{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewAdmin\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"get_registry\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1061},{\"name\":\"max_id\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1258},{\"name\":\"get_address\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_id\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1308},{\"name\":\"add_new_id\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_address\"},{\"type\":\"string\",\"name\":\"_description\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":291275},{\"name\":\"set_address\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_id\"},{\"type\":\"address\",\"name\":\"_address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":182430},{\"name\":\"unset_address\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_id\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":101348},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_admin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":74048},{\"name\":\"apply_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":60125},{\"name\":\"revert_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":21400},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1331},{\"name\":\"transfer_ownership_deadline\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1361},{\"name\":\"future_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"get_id_info\",\"outputs\":[{\"type\":\"address\",\"name\":\"addr\"},{\"type\":\"bool\",\"name\":\"is_active\"},{\"type\":\"uint256\",\"name\":\"version\"},{\"type\":\"uint256\",\"name\":\"last_modified\"},{\"type\":\"string\",\"name\":\"description\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":12168}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.7","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}