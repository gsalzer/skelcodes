{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/hadar/workspace/TradeGoodDollar/contracts/Interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface cERC20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 cTokenAmount) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\ninterface Staking {\\n    struct Staker {\\n        // The staked DAI amount\\n        uint256 stakedDAI;\\n        // The latest block number which the\\n        // staker has staked tokens\\n        uint256 lastStake;\\n    }\\n\\n    function stakeDAI(uint256 amount) external;\\n\\n    function withdrawStake() external;\\n\\n    function stakers(address staker) external view returns (Staker memory);\\n}\\n\\ninterface Uniswap {\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface Reserve {\\n    function buy(\\n        address _buyWith,\\n        uint256 _tokenAmount,\\n        uint256 _minReturn\\n    ) external returns (uint256);\\n\\n    function sell(\\n        address _sellWith,\\n        uint256 _tokenAmount,\\n        uint256 _minReturn\\n    ) external returns (uint256);\\n}\\n\\ninterface AmbBridge {\\n    function relayTokens(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/hadar/workspace/TradeGoodDollar/contracts/trade/TradeGD.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Interfaces.sol\\\";\\n\\ncontract TradeGD is OwnableUpgradeable {\\n    Uniswap public uniswap;\\n    cERC20 public GD;\\n    cERC20 public DAI;\\n    cERC20 public cDAI;\\n    Reserve public reserve;\\n\\n    address public gdBridge;\\n    address public omniBridge;\\n\\n    event GDTraded(\\n        string protocol,\\n        string action,\\n        address from,\\n        uint256 value,\\n        uint256[] uniswap,\\n        uint256 gd\\n    );\\n\\n    /**\\n     * @dev initialize the upgradable contract\\n     * @param _gd address of the GoodDollar token\\n     * @param _dai address of the DAI token\\n     * @param _cdai address of the cDAI token\\n     * @param _reserve address of the GoodDollar reserve\\n     */\\n    function initialize(\\n        address _gd,\\n        address _dai,\\n        address _cdai,\\n        address _reserve\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        uniswap = Uniswap(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\\n        GD = cERC20(_gd);\\n        DAI = cERC20(_dai);\\n        cDAI = cERC20(_cdai);\\n        reserve = Reserve(_reserve);\\n        gdBridge = address(0xD5D11eE582c8931F336fbcd135e98CEE4DB8CCB0);\\n        omniBridge = address(0xf301d525da003e874DF574BCdd309a6BF0535bb6);\\n\\n        GD.approve(\\n            address(uniswap),\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        DAI.approve(\\n            address(cDAI),\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        GD.approve(\\n            address(reserve),\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        cDAI.approve(\\n            address(reserve),\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        DAI.approve(\\n            omniBridge,\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n    }\\n\\n    function setContract(string memory name, address newaddress)\\n        public\\n        onlyOwner\\n    {\\n        bytes32 nameHash = keccak256(bytes(name));\\n        if (nameHash == keccak256(bytes(\\\"GD\\\"))) {\\n            GD = cERC20(newaddress);\\n            GD.approve(\\n                address(uniswap),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n            GD.approve(\\n                address(reserve),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        } else if (nameHash == keccak256(bytes(\\\"uniswap\\\"))) {\\n            uniswap = Uniswap(newaddress);\\n        } else if (nameHash == \\\"reserve\\\") {\\n            reserve = Reserve(newaddress);\\n            GD.approve(\\n                address(reserve),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n            cDAI.approve(\\n                address(reserve),\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        } else if (nameHash == keccak256(bytes(\\\"gdBridge\\\"))) {\\n            gdBridge = newaddress;\\n        } else if (nameHash == keccak256(bytes(\\\"omniBridge\\\"))) {\\n            omniBridge = newaddress;\\n            DAI.approve(\\n                omniBridge,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev buy GD from reserve using ETH since reserve  is in cDAI\\n     * we first buy DAI from uniswap -> mint cDAI -> buy GD\\n     * @param _minDAIAmount - the min amount of DAI to receive for buying with ETH\\n     * @param _minGDAmount - the min amount of GD to receive for buying with cDAI(via DAI)\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function buyGDFromReserve(\\n        uint256 _minDAIAmount,\\n        uint256 _minGDAmount,\\n        address _bridgeTo\\n    ) external payable returns (uint256) {\\n        uint256 gd = _buyGDFromReserve(_minDAIAmount, _minGDAmount);\\n\\n        transferWithFee(GD, gd, _bridgeTo);\\n\\n        return gd;\\n    }\\n\\n    function transferWithFee(\\n        cERC20 _token,\\n        uint256 _amount,\\n        address _bridgeTo\\n    ) internal {\\n        uint256 amountAfterFee = deductFee(_amount);\\n        if (_bridgeTo == address(0)) {\\n            _token.transfer(msg.sender, amountAfterFee);\\n        } else if (_token == GD) {\\n            _token.transferAndCall(\\n                gdBridge,\\n                amountAfterFee,\\n                abi.encodePacked(_bridgeTo)\\n            );\\n        } else {\\n            AmbBridge(omniBridge).relayTokens(\\n                address(_token),\\n                _bridgeTo,\\n                amountAfterFee\\n            );\\n        }\\n    }\\n\\n    function deductFee(uint256 _amount) public pure returns (uint256) {\\n        return (_amount * 998) / 1000;\\n    }\\n\\n    /**\\n     * @dev buy GD from reserve using DAI since reserve  is in cDAI\\n     * we first mint cDAI\\n     * @param _DAIAmount - the amount of DAI approved to buy G$ with\\n     * @param _minGDAmount - the min amount of GD to receive for buying with cDAI(via DAI)\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function buyGDFromReserveWithDAI(\\n        uint256 _DAIAmount,\\n        uint256 _minGDAmount,\\n        address _bridgeTo\\n    ) public returns (uint256) {\\n        uint256 gd = _buyGDFromReserveWithDAI(_DAIAmount, _minGDAmount);\\n        transferWithFee(GD, gd, _bridgeTo);\\n        return gd;\\n    }\\n\\n    function _buyGDFromReserveWithDAI(uint256 _DAIAmount, uint256 _minGDAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        require(_DAIAmount > 0, \\\"DAI amount should not be 0\\\");\\n        require(\\n            DAI.transferFrom(msg.sender, _DAIAmount),\\n            \\\"must approve DAI first\\\"\\n        );\\n\\n        uint256 cdaiRes = cDAI.mint(_DAIAmount);\\n        require(cdaiRes == 0, \\\"cDAI buying failed\\\");\\n        uint256 cdai = cDAI.balanceOf(address(this));\\n        uint256 gd = reserve.buy(address(cDAI), cdai, _minGDAmount);\\n        require(gd > 0, \\\"gd buying failed\\\");\\n        emit GDTraded(\\n            \\\"reserve\\\",\\n            \\\"buy\\\",\\n            msg.sender,\\n            _DAIAmount,\\n            new uint256[](0),\\n            gd\\n        );\\n\\n        return gd;\\n    }\\n\\n    /**\\n     * @dev sell GD to reserve converting resulting cDAI to DAI\\n     * @param _GDAmount - the amount of G$ approved to sell\\n     * @param _minCDAIAmount - the min amount of cDAI to receive for selling G$\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function sellGDToReserveForDAI(\\n        uint256 _GDAmount,\\n        uint256 _minCDAIAmount,\\n        address _bridgeTo\\n    ) external returns (uint256) {\\n        require(_GDAmount > 0, \\\"G$ amount should not be 0\\\");\\n        require(\\n            GD.transferFrom(msg.sender, _GDAmount),\\n            \\\"must approve G$ first\\\"\\n        );\\n\\n        uint256 cdai = reserve.sell(address(cDAI), _GDAmount, _minCDAIAmount);\\n        require(cdai > 0, \\\"G$ selling failed\\\");\\n        uint256 daiRedeemed = DAI.balanceOf(address(this));\\n        require(cDAI.redeem(cdai) == 0, \\\"cDAI redeem faiiled\\\");\\n        daiRedeemed = DAI.balanceOf(address(this)) - daiRedeemed;\\n\\n        transferWithFee(DAI, daiRedeemed, _bridgeTo);\\n\\n        emit GDTraded(\\n            \\\"reserve\\\",\\n            \\\"sell\\\",\\n            msg.sender,\\n            cdai,\\n            new uint256[](0),\\n            _GDAmount\\n        );\\n    }\\n\\n    function _buyGDFromReserve(uint256 _minDAIAmount, uint256 _minGDAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        require(msg.value > 0, \\\"You must send some ETH\\\");\\n\\n        address[] memory path = new address[](2);\\n        path[1] = address(DAI);\\n        path[0] = uniswap.WETH();\\n        uint256[] memory swap =\\n            uniswap.swapExactETHForTokens{value: msg.value}(\\n                _minDAIAmount,\\n                path,\\n                address(this),\\n                now\\n            );\\n        uint256 dai = swap[1];\\n        require(dai > 0, \\\"DAI buying failed\\\");\\n        uint256 cdaiRes = cDAI.mint(dai);\\n        require(cdaiRes == 0, \\\"cDAI buying failed\\\");\\n        uint256 cdai = cDAI.balanceOf(address(this));\\n        uint256 gd = reserve.buy(address(cDAI), cdai, _minGDAmount);\\n        // uint256 gd = GD.balanceOf(address(this));\\n        require(gd > 0, \\\"gd buying failed\\\");\\n        emit GDTraded(\\\"reserve\\\", \\\"buy\\\", msg.sender, msg.value, swap, gd);\\n\\n        return gd;\\n    }\\n\\n    /**\\n     * @dev buy GD from uniswap pool using ETH since pool is in DAI\\n     * we first buy DAI from uniswap -> buy GD\\n     * @param _minGDAmount - the min amount of GD to receive for buying with DAI(via ETH)\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function buyGDFromUniswap(uint256 _minGDAmount, address _bridgeTo)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        require(msg.value > 0, \\\"You must send some ETH\\\");\\n\\n        uint256 value = msg.value;\\n\\n        address[] memory path = new address[](3);\\n        path[2] = address(GD);\\n        path[1] = address(DAI);\\n        path[0] = uniswap.WETH();\\n        uint256[] memory swap =\\n            uniswap.swapExactETHForTokens{value: value}(\\n                _minGDAmount,\\n                path,\\n                address(this),\\n                now\\n            );\\n        uint256 gd = swap[2];\\n        require(gd > 0, \\\"gd buying failed\\\");\\n        emit GDTraded(\\\"uniswap\\\", \\\"buy\\\", msg.sender, msg.value, swap, gd);\\n\\n        transferWithFee(GD, gd, _bridgeTo);\\n        return gd;\\n    }\\n\\n    /**\\n     * @dev buy G$ from reserve using ETH and sell to uniswap pool resulting in DAI\\n     * @param _minDAIAmount - the min amount of dai to receive for selling eth to uniswap\\n     * @param _minGDAmount - the min amount of G$ to receive for buying with cDAI(via ETH) from reserve\\n     * @param _minDAIAmountUniswap - the min amount of DAI to receive for selling G$ to uniswap\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function sellGDFromReserveToUniswap(\\n        uint256 _minDAIAmount,\\n        uint256 _minGDAmount,\\n        uint256 _minDAIAmountUniswap,\\n        address _bridgeTo\\n    ) external payable returns (uint256) {\\n        uint256 gd = _buyGDFromReserve(_minDAIAmount, _minGDAmount);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(GD);\\n        path[1] = address(DAI);\\n        uint256[] memory swap =\\n            uniswap.swapExactTokensForTokens(\\n                gd,\\n                _minDAIAmountUniswap,\\n                path,\\n                address(this),\\n                now\\n            );\\n        uint256 dai = swap[1];\\n        require(dai > 0, \\\"gd selling failed\\\");\\n        emit GDTraded(\\\"uniswap\\\", \\\"sell\\\", msg.sender, msg.value, swap, gd);\\n\\n        transferWithFee(DAI, dai, _bridgeTo);\\n\\n        return dai;\\n    }\\n\\n    /**\\n     * @dev buy GD from reserve using DAI and sell to uniswap pool resulting in DAI\\n     * @param _DAIAmount - the amount of dai approved to buy G$\\n     * @param _minGDAmount - the min amount of GD to receive for buying with cDAI\\n     * @param _minDAIAmount - the min amount of DAI to receive for selling  G$ on uniswap\\n     * @param _bridgeTo - if non 0 will bridge result tokens to _bridgeTo address on Fuse\\n     */\\n    function sellGDFromReserveToUniswapWithDAI(\\n        uint256 _DAIAmount,\\n        uint256 _minGDAmount,\\n        uint256 _minDAIAmount,\\n        address _bridgeTo\\n    ) external payable returns (uint256) {\\n        uint256 gd = _buyGDFromReserveWithDAI(_DAIAmount, _minGDAmount);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(GD);\\n        path[1] = address(DAI);\\n        uint256[] memory swap =\\n            uniswap.swapExactTokensForTokens(\\n                gd,\\n                _minDAIAmount,\\n                path,\\n                address(this),\\n                now\\n            );\\n\\n        uint256 dai = swap[1];\\n        require(dai > 0, \\\"gd selling failed\\\");\\n        emit GDTraded(\\\"uniswap\\\", \\\"sell\\\", msg.sender, msg.value, swap, gd);\\n\\n        transferWithFee(DAI, dai, _bridgeTo);\\n\\n        return dai;\\n    }\\n\\n    function withdraw(address to) public onlyOwner {\\n        GD.transfer(to, GD.balanceOf(address(this)));\\n        DAI.transfer(to, DAI.balanceOf(address(this)));\\n        payable(to).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"uniswap\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gd\",\"type\":\"uint256\"}],\"name\":\"GDTraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract cERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GD\",\"outputs\":[{\"internalType\":\"contract cERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"buyGDFromReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_DAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"buyGDFromReserveWithDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minGDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"buyGDFromUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDAI\",\"outputs\":[{\"internalType\":\"contract cERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deductFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omniBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract Reserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDAIAmountUniswap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"sellGDFromReserveToUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_DAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minGDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"sellGDFromReserveToUniswapWithDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_GDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCDAIAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeTo\",\"type\":\"address\"}],\"name\":\"sellGDToReserveForDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract Uniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TradeGD","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}