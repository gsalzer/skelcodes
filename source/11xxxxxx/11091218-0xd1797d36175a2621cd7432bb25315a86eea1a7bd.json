{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;// Copyright (C) 2020 LimeChain - Blockchain & DLT Solutions <https://limechain.tech>\n\n\n\n/**\n * @title RulesOperator\n * @dev Interface for a IdoneusToken Rules Operator.\n * A Rules Operator must implement the functions below to\n * successfully execute the IdoneusToken approval and transfers\n * functionality.\n */\ninterface RulesOperator {\n    /**\n     * @dev Validates upon ERC-20 `approve` call.\n     */\n    function onApprove(address from, address to, uint256 value)\n        external\n        returns (bool);\n\n    /**\n     * @dev Gets fee amount IdoneusToken owner will take upon ERC-20\n     * `transfer` call.\n     */\n    function onTransfer(address from, address to, uint256 value)\n        external\n        returns (uint256);\n\n    /**\n     * @dev Gets fee amount IdoneusToken owner will take upon ERC-20\n     * `transferFrom` call.\n     */\n    function onTransferFrom(address from, address to, uint256 value)\n        external\n        returns (uint256);\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n// Copyright (C) 2020 LimeChain - Blockchain & DLT Solutions <https://limechain.tech>\n\n\n\n/**\n * @title Operator\n * @dev Simple ownable Operator contract that stores operators.\n */\ncontract Operator is Ownable {\n    // The operators storage\n    mapping(address => bool) private operators;\n\n    event OperatorModified(\n        address indexed executor,\n        address indexed operator,\n        bool status\n    );\n\n    /**\n     * @dev Enables/Disables an operator.\n     * @param _operator The target operator.\n     * @param _status Set to true to enable an operator.\n     */\n    function setOperator(address _operator, bool _status) public onlyOwner {\n        require(\n            _operator != address(0),\n            \"Operator: operator is the zero address\"\n        );\n        operators[_operator] = _status;\n        emit OperatorModified(msg.sender, _operator, _status);\n    }\n\n    /**\n     * @dev Checks if an operator is enabled/disabled.\n     * @param _operator The target operator.\n     */\n    function isOperator(address _operator) public view returns (bool) {\n        return operators[_operator];\n    }\n}\n// Copyright (C) 2020 LimeChain - Blockchain & DLT Solutions <https://limechain.tech>\n\n\n/**\n * @title Whitelisting\n * @dev Manages whitelisting of accounts (EOA or contracts).\n */\ncontract Whitelisting is Operator {\n    // The whitelisted accounts storage\n    mapping(address => bool) private whitelisted;\n\n    event WhitelistedStatusModified(\n        address indexed executor,\n        address[] user,\n        bool status\n    );\n\n    /**\n     * @dev Throws if the sender is neither operator nor owner.\n     */\n    modifier onlyAuthorized() {\n        require(\n            isOperator(msg.sender) || msg.sender == owner(),\n            \"Whitelisting: the caller is not whitelistOperator or owner\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Adds/Removes whitelisted accounts.\n     * @param _users The target accounts.\n     * @param _isWhitelisted Set to true to whitelist accounts.\n     */\n    function setWhitelisted(address[] memory _users, bool _isWhitelisted)\n        public\n        onlyAuthorized\n    {\n        for (uint256 i = 0; i < _users.length; i++) {\n            require(\n                _users[i] != address(0),\n                \"Whitelisting: user is the zero address\"\n            );\n            whitelisted[_users[i]] = _isWhitelisted;\n        }\n        emit WhitelistedStatusModified(msg.sender, _users, _isWhitelisted);\n    }\n\n    /**\n     * @dev Checks if an account is whitelisted.\n     * @param _user The target account.\n     */\n    function isWhitelisted(address _user) public view returns (bool) {\n        return whitelisted[_user];\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n// Copyright (C) 2020 LimeChain - Blockchain & DLT Solutions <https://limechain.tech>\n\n\n\n\n\n/**\n * @title IdonRulesOperator\n * @dev Manages IdoneusToken (IDON) USD price. Used as fee calculator\n * on IDON Token transfers.\n */\ncontract IdonRulesOperator is RulesOperator, Operator {\n    using SafeMath for uint256;\n\n    /**\n     * @notice The IDON token price, stored with 3 digits\n     * after the decimal point (e.g. $12.340 => 12 340).\n     */\n    uint256 public idonTokenPrice;\n\n    /**\n     * @notice The minimum IDON token price, stored with 3 digits\n     * after the decimal point (e.g. $23.456 => 23 456).\n     */\n    uint256 public minimumIDONPrice;\n\n    /**\n     * @notice The transfer fee percentage, stored with 3 digits\n     * after the decimal point (e.g. 12.345% => 12 345).\n     */\n    uint256 public transferFeePercentage;\n\n    // The whitelisting contract storage\n    Whitelisting public whitelisting;\n\n    /**\n     * @dev Throws if the sender is neither operator nor owner.\n     */\n    modifier onlyAuthorized() {\n        require(\n            isOperator(msg.sender) || msg.sender == owner(),\n            \"RulesOperator: the caller is not Authorised\"\n        );\n        _;\n    }\n\n    event TokenPriceModified(address indexed executor, uint256 tokenPrice);\n    event FeePercentageModified(\n        address indexed executor,\n        uint256 feePercentage\n    );\n    event WhitelistingInstanceModified(\n        address indexed executor,\n        address whitelisting\n    );\n\n    /**\n     * @dev Sets the initial values for IDON token price,\n     * minimum IDON token price, transfer fee percetange and whitelisting contract.\n     *\n     * @param _idonTokenPrice Initial IDON token price.\n     * @param _minimumIDONPrice Initial minimum IDON token price.\n     * @param _transferFeePercentage Initial fee percentage on transfers.\n     * @param _whitelisting Initial whitelisting contract.\n     */\n    constructor(\n        uint256 _idonTokenPrice,\n        uint256 _minimumIDONPrice,\n        uint256 _transferFeePercentage,\n        address _whitelisting\n    ) public {\n        require(\n            _idonTokenPrice != 0,\n            \"IdonRulesOperator: idon token price could not be 0\"\n        );\n        require(\n            _transferFeePercentage < 100000,\n            \"IdonRulesOperator: fee percentage could not be higher than 100%\"\n        );\n        require(\n            _whitelisting != address(0),\n            \"IdonRulesOperator: whitelisting contract address could not be 0\"\n        );\n        idonTokenPrice = _idonTokenPrice;\n        minimumIDONPrice = _minimumIDONPrice;\n        transferFeePercentage = _transferFeePercentage;\n        whitelisting = Whitelisting(_whitelisting);\n\n        emit TokenPriceModified(msg.sender, _idonTokenPrice);\n        emit FeePercentageModified(msg.sender, _transferFeePercentage);\n        emit WhitelistingInstanceModified(msg.sender, _whitelisting);\n    }\n\n    /**\n     * @dev Sets IDON Token Price.\n     * @param _price The target price.\n     */\n    function setIdonTokenPrice(uint256 _price) public onlyAuthorized {\n        require(\n            _price != 0,\n            \"IdonRulesOperator: idon token price could not be 0\"\n        );\n        idonTokenPrice = _price;\n        emit TokenPriceModified(msg.sender, _price);\n    }\n\n    /**\n     * @dev Sets fee percentage.\n     * @param _transferFeePercentage The target transfer fee percentage.\n     */\n    function setFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\n        require(\n            _transferFeePercentage < 100000,\n            \"IdonRulesOperator: fee percentage could not be higher than 100%\"\n        );\n        transferFeePercentage = _transferFeePercentage;\n        emit FeePercentageModified(msg.sender, _transferFeePercentage);\n    }\n\n    function setWhitelisting(address _whitelisting) public onlyOwner {\n        require(\n            _whitelisting != address(0),\n            \"IdonRulesOperator: whitelisting contract address could not be zero address\"\n        );\n        whitelisting = Whitelisting(_whitelisting);\n        emit WhitelistingInstanceModified(msg.sender, _whitelisting);\n    }\n\n    /**\n     * @dev Validates upon IDON token `approve` call.\n     * @notice Lacks implementation.\n     */\n    function onApprove(address from, address to, uint256 value)\n        public\n        returns (bool)\n    {\n        return true;\n    }\n\n    /**\n     * @dev Calculates fee on IDON token `transfer` call.\n     * @param from The target sender.\n     * @param to The target recipient.\n     * @param value The target amount.\n     */\n    function onTransfer(address from, address to, uint256 value)\n        public\n        returns (uint256 fee)\n    {\n        return transactionValidation(from, to, value);\n    }\n\n    /**\n     * @dev Calculates fee on IDON token `transferFrom` call.\n     * @param from The target sender.\n     * @param to The target recipient.\n     * @param value The target amount.\n     */\n    function onTransferFrom(address from, address to, uint256 value)\n        public\n        returns (uint256)\n    {\n        return transactionValidation(from, to, value);\n    }\n\n    /**\n     * @dev Calculates fee on IDON Token transfer calls, depending on\n     * IDON Token price and the whitelisting of given accounts (EOA or contracts).\n     * @param _from The target sender.\n     * @param _to The target recipient.\n     * @param _value The target amount.\n     */\n    function transactionValidation(address _from, address _to, uint256 _value)\n        internal\n        view\n        returns (uint256)\n    {\n        if (idonTokenPrice <= minimumIDONPrice) {\n            require(\n                whitelisting.isWhitelisted(_from) &&\n                    whitelisting.isWhitelisted(_to),\n                \"IdonRulesOperator: one of the users is not whitelisted\"\n            );\n        }\n        if (\n            whitelisting.isWhitelisted(_from) && whitelisting.isWhitelisted(_to)\n        ) {\n            return 0;\n        }\n        return calculateFee(_value);\n    }\n\n    /**\n     * @dev Calculates fee of given amount.\n     * @notice `transferFeePercentage` is stored with 3 digits\n     * after the decimal point (e.g. 12.345% => 12 345).\n     * @param _value The target amount\n     */\n    function calculateFee(uint256 _value) public view returns (uint256) {\n        return _value.mul(transferFeePercentage).div(100000);\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minimumIDONPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisting\",\"type\":\"address\"}],\"name\":\"setWhitelisting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelisting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idonTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setIdonTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_idonTokenPrice\",\"type\":\"uint256\"},{\"name\":\"_minimumIDONPrice\",\"type\":\"uint256\"},{\"name\":\"_transferFeePercentage\",\"type\":\"uint256\"},{\"name\":\"_whitelisting\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentageModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisting\",\"type\":\"address\"}],\"name\":\"WhitelistingInstanceModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"OperatorModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IdonRulesOperator","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000027110000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082ff4d776e7a00721d643124e38d447716d99be6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}