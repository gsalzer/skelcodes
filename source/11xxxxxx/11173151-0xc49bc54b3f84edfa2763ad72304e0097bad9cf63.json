{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n███╗   ███╗ ██████╗ ██╗      \r\n████╗ ████║██╔═══██╗██║    \r\n██╔████╔██║██║   ██║██║    \r\n██║╚██╔╝██║██║   ██║██║    \r\n██║ ╚═╝ ██║╚██████╔╝███████╗\r\n███████╗ █████╗ ██████╗                              \r\n╚══███╔╝██╔══██╗██╔══██╗                             \r\n  ███╔╝ ███████║██████╔╝                             \r\n ███╔╝  ██╔══██║██╔═══╝                              \r\n███████╗██║  ██║██║\r\nDEAR MSG.SENDER(S):\r\n/ MolZap (⚡👹⚡) is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// STEAL THIS C0D3SL4W \r\n//// presented by LexDAO LLC\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.4;\r\n\r\ninterface IERC20ApproveTransfer { // brief interface for erc20 token tx\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IMoloch { // brief interface for txs to moloch dao\r\n    function cancelProposal(uint256 proposalId) external;\r\n    \r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        string calldata details\r\n    ) external returns (uint256);\r\n    \r\n    function withdrawBalance(address token, uint256 amount) external;\r\n}\r\n\r\nlibrary SafeMath { // arithmetic wrapper for unit under/overflow check\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MolZap {\r\n    using SafeMath for uint256;\r\n    \r\n    address public manager; // manages moloch zap settings\r\n    address public moloch; // parent moloch for zap proposals \r\n    address public wETH; // ether token wrapper contract reference for proposals\r\n    uint256 public zapRate; // rate to convert ether into zap proposal shares (e.g., `10` will submit proposal for 10 shares per 1 ETH sent)\r\n    string public ZAP_DETAILS; // general zap proposal details \r\n\r\n    mapping(uint256 => Zap) public zaps; // proposalId => Zap\r\n    \r\n    struct Zap {\r\n        address proposer;\r\n        uint256 zapAmount;\r\n    }\r\n\r\n    event ProposeZap(address indexed proposer, uint256 proposalId);\r\n    event WithdrawZapProposal(address indexed proposer, uint256 proposalId);\r\n    event UpdateMolZap(address indexed manager, address indexed moloch, address indexed wETH, uint256 zapRate, string ZAP_DETAILS);\r\n\r\n    constructor(\r\n        address _manager, \r\n        address _moloch, \r\n        address _wETH, \r\n        uint256 _zapRate, \r\n        string memory _ZAP_DETAILS\r\n    ) {\r\n        manager = _manager;\r\n        moloch = _moloch;\r\n        wETH = _wETH;\r\n        zapRate = _zapRate;\r\n        ZAP_DETAILS = _ZAP_DETAILS;\r\n        IERC20ApproveTransfer(wETH).approve(moloch, uint256(-1));\r\n    }\r\n    \r\n    receive() external payable { // msg.sender ether submits share proposal to moloch per zap rate (adjusted for wei conversion to normal moloch amounts)\r\n        (bool success, ) = wETH.call{value: msg.value}(\"\");\r\n        require(success, \"MolZap::transfer failed\");\r\n        \r\n        uint256 proposalId = IMoloch(moloch).submitProposal(\r\n            msg.sender,\r\n            msg.value.mul(zapRate).div(10**18),\r\n            0,\r\n            msg.value,\r\n            wETH,\r\n            0,\r\n            wETH,\r\n            ZAP_DETAILS\r\n        );\r\n        \r\n        zaps[proposalId] = Zap(msg.sender, msg.value);\r\n\r\n        emit ProposeZap(msg.sender, proposalId);\r\n    }\r\n    \r\n    function cancelZapProposal(uint256 proposalId) external { // zap proposer can cancel zap & withdraw proposal funds \r\n        Zap storage zap = zaps[proposalId];\r\n        require(msg.sender == zap.proposer, \"MolZap::!proposer\");\r\n        uint256 zapAmount = zap.zapAmount;\r\n        \r\n        IMoloch(moloch).cancelProposal(proposalId); // cancel zap proposal in parent moloch\r\n        IMoloch(moloch).withdrawBalance(wETH, zapAmount); // withdraw zap funds from moloch\r\n        IERC20ApproveTransfer(wETH).transfer(msg.sender, zapAmount); // redirect funds to zap proposer\r\n        \r\n        emit WithdrawZapProposal(msg.sender, proposalId);\r\n    }\r\n    \r\n    function drawZapProposal(uint256 proposalId) external { // if proposal fails, withdraw back to proposer\r\n        Zap storage zap = zaps[proposalId];\r\n        require(msg.sender == zap.proposer, \"MolZap::!proposer\");\r\n        uint256 zapAmount = zap.zapAmount;\r\n        \r\n        IMoloch(moloch).withdrawBalance(wETH, zapAmount); // withdraw zap funds from parent moloch\r\n        IERC20ApproveTransfer(wETH).transfer(msg.sender, zapAmount); // redirect funds to zap proposer\r\n        \r\n        emit WithdrawZapProposal(msg.sender, proposalId);\r\n    }\r\n    \r\n    function updateMolZap( // manager (e.g., moloch via adminion) adjusts zap proposal settings\r\n        address _manager, \r\n        address _moloch, \r\n        address _wETH, \r\n        uint256 _zapRate, \r\n        string calldata _ZAP_DETAILS\r\n    ) external { \r\n        require(msg.sender == manager, \"MolZap::!manager\");\r\n       \r\n        manager = _manager;\r\n        moloch = _moloch;\r\n        wETH = _wETH;\r\n        zapRate = _zapRate;\r\n        ZAP_DETAILS = _ZAP_DETAILS;\r\n        \r\n        emit UpdateMolZap(_manager, _moloch, _wETH, _zapRate, _ZAP_DETAILS);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zapRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ZAP_DETAILS\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposeZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wETH\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zapRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ZAP_DETAILS\",\"type\":\"string\"}],\"name\":\"UpdateMolZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"WithdrawZapProposal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZAP_DETAILS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelZapProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"drawZapProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moloch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zapRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ZAP_DETAILS\",\"type\":\"string\"}],\"name\":\"updateMolZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"zapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MolZap","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a20000000000000000000000000beb3e32355a933501c247e2dbde6e6ca2489bf3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001954657374204d6f6c5a617020666f7220526169644775696c6400000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91c04028df83716c2218a97b3efad94b4e8479bc17f04902da059f62f15faef6"}]}