{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/c/Users/maxxt/Documents/Projects/defipie/bridge/contracts/contracts/BridgeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"./ProxyStorage.sol\\\";\\r\\n\\r\\ncontract BridgeProxy is ProxyStorage {\\r\\n\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    constructor(\\r\\n        address bridgeImplementation_,\\r\\n        address _courier,\\r\\n        address _guardian,\\r\\n        address _bridgeToken,\\r\\n        uint _fee,\\r\\n        uint[] memory _newRoutes\\r\\n    ) {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n\\r\\n        _setImplementation(bridgeImplementation_);\\r\\n\\r\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\r\\n        delegateTo(implementation, abi.encodeWithSignature(\\\"initialize(address,address,address,uint256,uint256[])\\\",\\r\\n            _courier,\\r\\n            _guardian,\\r\\n            _bridgeToken,\\r\\n            _fee,\\r\\n            _newRoutes)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to delegate execution to another contract\\r\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n     * @param callee The contract to delegatecall\\r\\n     * @param data The raw data to delegatecall\\r\\n     * @return The returned bytes from the delegatecall\\r\\n     */\\r\\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                revert(add(returnData, 0x20), returndatasize())\\r\\n            }\\r\\n        }\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function delegateAndReturn() internal returns (bytes memory) {\\r\\n        (bool success, ) = implementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n            let free_mem_ptr := mload(0x40)\\r\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n            switch success\\r\\n            case 0 { revert(free_mem_ptr, returndatasize()) }\\r\\n            default { return(free_mem_ptr, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates execution to an implementation contract\\r\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n     */\\r\\n    fallback() external {\\r\\n        // delegate all other functions to current implementation\\r\\n        delegateAndReturn();\\r\\n    }\\r\\n\\r\\n    function setImplementation(address newImplementation) external returns (bool) {\\r\\n        require(msg.sender == admin, 'BridgeProxy: Only admin can set implementation');\\r\\n\\r\\n        address oldImplementation = implementation;\\r\\n        _setImplementation(newImplementation);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (bool) {\\r\\n        // Check caller = admin\\r\\n        require(msg.sender == admin, 'BridgeProxy: Only admin can set pending admin');\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _acceptAdmin() public returns (bool) {\\r\\n        // Check caller is pendingAdmin\\r\\n        require(msg.sender == pendingAdmin, 'BridgeProxy: Only pendingAdmin can accept admin');\\r\\n\\r\\n        address oldAdmin = admin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setImplementation(address implementation_) internal {\\r\\n        implementation = implementation_;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"/mnt/c/Users/maxxt/Documents/Projects/defipie/bridge/contracts/contracts/ProxyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\ncontract ProxyStorage {\\r\\n    address public implementation;\\r\\n    address public admin;\\r\\n    address public pendingAdmin;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeImplementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_courier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_newRoutes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeProxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000867d2949d9af87ee1ca7c4d0068d4e8f93da98bc00000000000000000000000084aefb0b787fbc3a2caf83de068937fb8a70cf1c0000000000000000000000006ebd066e2891922f3c1bfd426b2a49d5d0bc11c8000000000000000000000000607c794cda77efb21f8848b7910ecf27451ae8420000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000038","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"1","Implementation":"0x867d2949d9af87ee1ca7c4d0068d4e8f93da98bc","SwarmSource":""}]}