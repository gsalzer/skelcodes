{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/fixedRate/FixedRateExchange.sol\": {\r\n      \"content\": \"pragma solidity 0.5.7;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\nimport '../interfaces/IERC20Template.sol';\\nimport 'openzeppelin-solidity/contracts/math/SafeMath.sol';\\n\\n/**\\n * @title FixedRateExchange\\n * @dev FixedRateExchange is a fixed rate exchange Contract\\n *      Marketplaces uses this contract to allow consumers \\n *      exchanging datatokens with ocean token using a fixed \\n *      exchange rate.\\n */\\ncontract FixedRateExchange {\\n    using SafeMath for uint256;\\n    uint256 private constant BASE = 10 ** 18;\\n    struct Exchange {\\n        bool active;\\n        address exchangeOwner;\\n        address dataToken;\\n        address baseToken;\\n        uint256 fixedRate;\\n    }\\n\\n    // maps an exchangeId to an exchange\\n    mapping(bytes32 => Exchange) private exchanges;\\n    bytes32[] private exchangeIds;\\n\\n    modifier onlyActiveExchange(\\n        bytes32 exchangeId\\n    )\\n    {\\n        require(\\n            exchanges[exchangeId].fixedRate != 0 &&\\n            exchanges[exchangeId].active == true,\\n            'FixedRateExchange: Exchange does not exist!'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExchangeOwner(\\n        bytes32 exchangeId\\n    )\\n    {\\n        require(\\n            exchanges[exchangeId].exchangeOwner == msg.sender,\\n            'FixedRateExchange: invalid exchange owner'\\n        );\\n        _;\\n    }\\n\\n    event ExchangeCreated(\\n        bytes32 indexed exchangeId,\\n        address indexed baseToken,\\n        address indexed dataToken,\\n        address exchangeOwner,\\n        uint256 fixedRate\\n    );\\n\\n    event ExchangeRateChanged(\\n        bytes32 indexed exchangeId,\\n        address indexed exchangeOwner,\\n        uint256 newRate\\n    );\\n\\n    event ExchangeActivated(\\n        bytes32 indexed exchangeId,\\n        address indexed exchangeOwner\\n    );\\n\\n    event ExchangeDeactivated(\\n        bytes32 indexed exchangeId,\\n        address indexed exchangeOwner\\n    );\\n\\n    event Swapped(\\n        bytes32 indexed exchangeId,\\n        address indexed by,\\n        uint256 baseTokenSwappedAmount,\\n        uint256 dataTokenSwappedAmount\\n    );\\n\\n    /**\\n     * @dev create\\n     *      creates new exchange pairs between base token\\n     *      (ocean token) and data tokens.\\n     * @param baseToken refers to a ocean token contract address\\n     * @param dataToken refers to a data token contract address\\n     * @param fixedRate refers to the exact fixed exchange rate in wei\\n     */\\n    function create(\\n        address baseToken,\\n        address dataToken,\\n        uint256 fixedRate\\n    )\\n        external\\n    {\\n        require(\\n            baseToken != address(0),\\n            'FixedRateExchange: Invalid basetoken,  zero address'\\n        );\\n        require(\\n            dataToken != address(0),\\n            'FixedRateExchange: Invalid datatoken,  zero address'\\n        );\\n        require(\\n            baseToken != dataToken,\\n            'FixedRateExchange: Invalid datatoken,  equals basetoken'\\n        );\\n        require(\\n            fixedRate != 0, \\n            'FixedRateExchange: Invalid exchange rate value'\\n        );\\n        require(\\n            IERC20Template(baseToken).cap() != 0 &&\\n            IERC20Template(dataToken).cap() != 0,\\n            'FixedRateExchange: ERC20 compatibility error'\\n        );\\n        bytes32 exchangeId = generateExchangeId(\\n            baseToken,\\n            dataToken,\\n            msg.sender\\n        );\\n        require(\\n            exchanges[exchangeId].fixedRate == 0,\\n            'FixedRateExchange: Exchange already exists!'\\n        );\\n        exchanges[exchangeId] = Exchange({\\n            active: true,\\n            exchangeOwner: msg.sender,\\n            dataToken: dataToken,\\n            baseToken: baseToken,\\n            fixedRate: fixedRate\\n        });\\n        exchangeIds.push(exchangeId);\\n\\n        emit ExchangeCreated(\\n            exchangeId,\\n            baseToken,\\n            dataToken,\\n            msg.sender,\\n            fixedRate\\n        );\\n\\n        emit ExchangeActivated(\\n            exchangeId,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev generateExchangeId\\n     *      creates unique exchange identifier for two token pairs.\\n     * @param baseToken refers to a ocean token contract address\\n     * @param dataToken refers to a data token contract address\\n     * @param exchangeOwner exchange owner address\\n     */\\n    function generateExchangeId(\\n        address baseToken,\\n        address dataToken,\\n        address exchangeOwner\\n    )\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(\\n            abi.encode(\\n                baseToken,\\n                dataToken,\\n                exchangeOwner\\n            )\\n        );\\n    }\\n    \\n    /**\\n     * @dev CalcInGivenOut\\n     *      Calculates how many basetokens are needed to get specifyed amount of datatokens\\n     * @param exchangeId a unique exchange idnetifier \\n     * @param dataTokenAmount the amount of data tokens to be exchanged\\n     */\\n    function CalcInGivenOut(\\n        bytes32 exchangeId,\\n        uint256 dataTokenAmount\\n    )\\n        public\\n        view\\n        onlyActiveExchange(\\n            exchangeId\\n        )\\n        returns (uint256 baseTokenAmount)\\n    {\\n        baseTokenAmount = dataTokenAmount.mul(\\n            exchanges[exchangeId].fixedRate).div(BASE);\\n    }\\n    \\n    /**\\n     * @dev swap\\n     *      atomic swap between two registered fixed rate exchange.\\n     * @param exchangeId a unique exchange idnetifier \\n     * @param dataTokenAmount the amount of data tokens to be exchanged\\n     */\\n    function swap(\\n        bytes32 exchangeId,\\n        uint256 dataTokenAmount\\n    )\\n        external\\n        onlyActiveExchange(\\n            exchangeId\\n        )\\n    {\\n        require(\\n            dataTokenAmount != 0,\\n            'FixedRateExchange: zero data token amount'\\n        );\\n        uint256 baseTokenAmount = CalcInGivenOut(exchangeId,dataTokenAmount);\\n        require(\\n            IERC20Template(exchanges[exchangeId].baseToken).transferFrom(\\n                msg.sender,\\n                exchanges[exchangeId].exchangeOwner,\\n                baseTokenAmount\\n            ),\\n            'FixedRateExchange: transferFrom failed in the baseToken contract'\\n        );\\n        require(\\n            IERC20Template(exchanges[exchangeId].dataToken).transferFrom(\\n                exchanges[exchangeId].exchangeOwner,\\n                msg.sender,\\n                dataTokenAmount\\n            ),\\n            'FixedRateExchange: transferFrom failed in the dataToken contract'\\n        );\\n\\n        emit Swapped(\\n            exchangeId,\\n            msg.sender,\\n            baseTokenAmount,\\n            dataTokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev getNumberOfExchanges\\n     *      gets the total number of registered exchanges\\n     * @return total number of registered exchange IDs\\n     */\\n    function getNumberOfExchanges()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return exchangeIds.length;\\n    }\\n\\n    /**\\n     * @dev setRate\\n     *      changes the fixed rate for an exchange with a new rate\\n     * @param exchangeId a unique exchange idnetifier\\n     * @param newRate new fixed rate value\\n     */\\n    function setRate(\\n        bytes32 exchangeId,\\n        uint256 newRate\\n    )\\n        external\\n        onlyExchangeOwner(exchangeId)\\n    {\\n        require(\\n            newRate != 0,\\n            'FixedRateExchange: Ratio must be >0'\\n        );\\n\\n        exchanges[exchangeId].fixedRate = newRate;\\n        emit ExchangeRateChanged(\\n            exchangeId,\\n            msg.sender,\\n            newRate\\n        );\\n    }\\n\\n     /**\\n     * @dev toggleExchangeState\\n     *      toggles the active state of an existing exchange\\n     * @param exchangeId a unique exchange idnetifier\\n     */\\n    function toggleExchangeState(\\n        bytes32 exchangeId\\n    )\\n        external\\n        onlyExchangeOwner(exchangeId)\\n    {\\n        if(exchanges[exchangeId].active){\\n            exchanges[exchangeId].active = false;\\n            emit ExchangeDeactivated(\\n                exchangeId,\\n                msg.sender\\n            );\\n        } else {\\n            exchanges[exchangeId].active = true;\\n            emit ExchangeActivated(\\n                exchangeId,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev getRate\\n     *      gets the current fixed rate for an exchange\\n     * @param exchangeId a unique exchange idnetifier\\n     * @return fixed rate value\\n     */\\n    function getRate(\\n        bytes32 exchangeId\\n    )\\n        external\\n        view\\n        returns(uint256)\\n    {\\n        return exchanges[exchangeId].fixedRate;\\n    }\\n\\n    /**\\n     * @dev getSupply\\n     *      gets the current supply of datatokens in an fixed\\n     *      rate exchagne\\n     * @param  exchangeId the exchange ID\\n     * @return supply\\n     */\\n    function getSupply(bytes32 exchangeId)\\n        public\\n        view\\n        returns (uint256 supply)\\n    {\\n        if(exchanges[exchangeId].active == false)\\n            supply = 0;\\n        else {\\n            uint256 balance = IERC20Template(exchanges[exchangeId].dataToken)\\n                .balanceOf(exchanges[exchangeId].exchangeOwner);\\n            uint256 allowance = IERC20Template(exchanges[exchangeId].dataToken)\\n                .allowance(exchanges[exchangeId].exchangeOwner, address(this));\\n            if(balance < allowance)\\n                supply = balance;\\n            else\\n                supply = allowance;\\n        }\\n    }\\n\\n    /**\\n     * @dev getExchange\\n     *      gets all the exchange details\\n     * @param exchangeId a unique exchange idnetifier\\n     * @return all the exchange details including  the exchange Owner\\n     *         the dataToken contract address, the base token address, the \\n     *         fixed rate, whether the exchange is active and the supply or the \\n     *         the current data token liquidity.\\n     */\\n    function getExchange(\\n        bytes32 exchangeId\\n    )\\n        external\\n        view\\n        returns (\\n            address exchangeOwner,\\n            address dataToken,\\n            address baseToken,\\n            uint256 fixedRate,\\n            bool active,\\n            uint256 supply\\n        )\\n    {\\n        Exchange memory exchange = exchanges[exchangeId];\\n        exchangeOwner = exchange.exchangeOwner;\\n        dataToken = exchange.dataToken;\\n        baseToken = exchange.baseToken;\\n        fixedRate = exchange.fixedRate;\\n        active = exchange.active;\\n        supply = getSupply(exchangeId);\\n    }\\n\\n    /**\\n     * @dev getExchanges\\n     *      gets all the exchanges list\\n     * @return a list of all registered exchange Ids\\n     */\\n    function getExchanges()\\n        external \\n        view \\n        returns (bytes32[] memory)\\n    {\\n        return exchangeIds;\\n    }\\n\\n    /**\\n     * @dev isActive\\n     *      checks whether exchange is active\\n     * @param exchangeId a unique exchange idnetifier\\n     * @return true if exchange is true, otherwise returns false\\n     */\\n    function isActive(\\n        bytes32 exchangeId\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return exchanges[exchangeId].active;\\n    }\\n}\"\r\n    },\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/interfaces/IERC20Template.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20Template {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address minter,\\n        uint256 cap,\\n        string calldata blob,\\n        address collector\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n    function minter() external view returns(address);    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function cap() external view returns (uint256);\\n    function isMinter(address account) external view returns (bool);\\n    function isInitialized() external view returns (bool);\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function proposeMinter(address newMinter) external;\\n    function approveMinter() external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getExchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"name\":\"toggleExchangeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"name\":\"getExchange\",\"outputs\":[{\"name\":\"exchangeOwner\",\"type\":\"address\"},{\"name\":\"dataToken\",\"type\":\"address\"},{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"fixedRate\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfExchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"name\":\"dataTokenAmount\",\"type\":\"uint256\"}],\"name\":\"CalcInGivenOut\",\"outputs\":[{\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"dataToken\",\"type\":\"address\"},{\"name\":\"exchangeOwner\",\"type\":\"address\"}],\"name\":\"generateExchangeId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"name\":\"dataTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"dataToken\",\"type\":\"address\"},{\"name\":\"fixedRate\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dataToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exchangeOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fixedRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"exchangeOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"exchangeOwner\",\"type\":\"address\"}],\"name\":\"ExchangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"exchangeOwner\",\"type\":\"address\"}],\"name\":\"ExchangeDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseTokenSwappedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dataTokenSwappedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"}]","ContractName":"FixedRateExchange","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}