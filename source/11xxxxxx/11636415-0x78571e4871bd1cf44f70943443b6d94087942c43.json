{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RewardsInitiator.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./lib/IERC20.sol\\\";\\nimport \\\"./lib/IRewardDistributionRecipient.sol\\\";\\n\\n\\ncontract RewardsInitiator {\\n    string constant private ERROR_TOO_EARLY = \\\"REWARDS_CTRL:TOO_EARLY\\\";\\n    string constant private ERROR_ALREADY_INITIATED = \\\"REWARDS_CTRL:ALREADY_INITIATED\\\";\\n\\n    uint256 public earliestStartTime;\\n\\n    // Pools\\n    IRewardDistributionRecipient public uniPool;\\n    IRewardDistributionRecipient public bptPool;\\n\\n    bool initiated;\\n\\n    constructor(uint256 _earliestStartTime, address _uniPool, address _bptPool) public {\\n        earliestStartTime = _earliestStartTime;\\n        uniPool = IRewardDistributionRecipient(_uniPool);\\n        bptPool = IRewardDistributionRecipient(_bptPool);\\n    }\\n\\n    function initiate() external {\\n        require(block.timestamp >= earliestStartTime, ERROR_TOO_EARLY);\\n        require(!initiated, ERROR_ALREADY_INITIATED);\\n\\n        uint256 uniRewardBalance = poolRewardBalance(uniPool);\\n        uniPool.notifyRewardAmount(uniRewardBalance);\\n\\n        uint256 bptRewardBalance = poolRewardBalance(bptPool);\\n        bptPool.notifyRewardAmount(bptRewardBalance);\\n\\n        initiated = true;\\n    }\\n\\n    function poolRewardBalance(IRewardDistributionRecipient _pool) public view returns (uint256) {\\n        IERC20 rewardToken = _pool.rewardToken();\\n        return rewardToken.balanceOf(address(_pool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IRewardDistributionRecipient.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface IRewardDistributionRecipient {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    // Note that this is specific to the Unipool contracts used\\n    function rewardToken() external view returns (IERC20 token);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earliestStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bptPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"bptPool\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionRecipient\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earliestStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IRewardDistributionRecipient\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"poolRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniPool\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionRecipient\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardsInitiator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000603cd740000000000000000000000000874e6486448ac4be4874e0fa3698551855c33d9e00000000000000000000000093b6a0aaebc85f3611b4bb1c4bab7e5fcb500513","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}