{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.22 <0.8.0;\r\n\r\n// \"SPDX-License-Identifier: MIT\"\r\n\r\ncontract SpringField is ERC20 {\r\n    using SafeMath for uint256;\r\n    IERC20 public token;\r\n    uint256 public lastSavedBlock;\r\n    address[] public stakers;\r\n    uint8 public decimals = 18;\r\n    uint256 blockrate = 523211567732115677321156773212;\r\n    uint256 blockDecimals = 14;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    struct stakeData {\r\n        address staker;\r\n        uint256 amount;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => stakeData)) public stakes;\r\n    mapping(uint256 => uint256) public blockdata;\r\n    mapping(address => uint256) public stakeCount;\r\n\r\n    event Saved(uint256 blockNumber);\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n        name = \"SpringField\";\r\n        symbol = \"ySIMP\";\r\n        lastSavedBlock = block.number;\r\n    }\r\n\r\n    // Enter the bar. Pay some SUSHIs. Earn some shares.\r\n    // Locks Sushi and mints xSushi0\r\n    function enter(uint256 _amount) public {\r\n        if (stakers.length == 0) {\r\n            stakers.push(msg.sender);\r\n            blockdata[block.number] = _amount;\r\n        } else {\r\n            for (uint256 i = 0; i < stakers.length; i++) {\r\n                if (msg.sender == stakers[i]) {\r\n                    break;\r\n                } else {\r\n                    if (i == stakers.length - 1) {\r\n                        stakers.push(msg.sender);\r\n                    }\r\n                }\r\n                stakers.push(msg.sender);\r\n            }\r\n        }\r\n        stakes[msg.sender][stakeCount[msg.sender]] = stakeData(\r\n            msg.sender,\r\n            _amount,\r\n            block.number\r\n        );\r\n        stakeCount[msg.sender] += 1;\r\n\r\n        _saveBlockData();\r\n        // Gets the amount of Sushi locked in the contract\r\n        uint256 usersSushi = token.balanceOf(msg.sender);\r\n        uint256 allowedSushi = token.allowance(msg.sender, address(this));\r\n        require(usersSushi >= _amount, \"Insufficient Balance to Stake\");\r\n        require(allowedSushi >= _amount, \"Allowed balance is Insufficient\");\r\n        // Lock the Sushi in the contract\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        // If no xSushi exists, mint it 1:1 to the amount put in\r\n        _mint(msg.sender, _amount);\r\n    }\r\n\r\n    // Leave the bar. Claim back your SUSHIs.\r\n    // Unclocks the staked + gained Sushi and burns xSushi\r\n    function getrewards() public {\r\n        uint256 stakeAmount = 0;\r\n\r\n        for (uint256 i = 0; i < stakeCount[msg.sender]; i++) {\r\n            stakeAmount = stakeAmount.add(stakes[msg.sender][i].amount);\r\n        }\r\n        require(0 < stakeAmount, \"Amount insufficient\");\r\n        uint256 reward = 0;\r\n        _saveBlockData();\r\n        // Gets the amount of xSushi in existence\r\n\r\n        for (uint256 j = 0; j < stakeCount[msg.sender]; j++) {\r\n            for (\r\n                uint256 i = stakes[msg.sender][j].blockNumber;\r\n                i < block.number;\r\n                i++\r\n            ) {\r\n                reward = reward.add(\r\n                    stakes[msg.sender][j]\r\n                        .amount\r\n                        .mul(blockrate.div(10**blockDecimals))\r\n                        .div(blockdata[i])\r\n                );\r\n            }\r\n            stakes[msg.sender][j].blockNumber = block.number;\r\n        }\r\n        token.transfer(msg.sender, reward);\r\n    }\r\n\r\n    function unstake() public {\r\n        uint256 stakeAmount = 0;\r\n\r\n        for (uint256 i = 0; i < stakeCount[msg.sender]; i++) {\r\n            stakeAmount = stakeAmount.add(stakes[msg.sender][i].amount);\r\n        }\r\n        require(0 < stakeAmount, \"Amount insufficient\");\r\n        uint256 reward = 0;\r\n        _saveBlockData();\r\n        // Gets the amount of xSushi in existence\r\n\r\n        for (uint256 j = 0; j < stakeCount[msg.sender]; j++) {\r\n            for (\r\n                uint256 i = stakes[msg.sender][j].blockNumber;\r\n                i < block.number;\r\n                i++\r\n            ) {\r\n                reward = reward.add(\r\n                    stakes[msg.sender][j]\r\n                        .amount\r\n                        .mul(blockrate.div(10**blockDecimals))\r\n                        .div(blockdata[i])\r\n                );\r\n            }\r\n            stakes[msg.sender][j].amount = 0;\r\n        }\r\n        _burn(msg.sender, stakeAmount);\r\n        token.transfer(msg.sender, reward.add(stakeAmount));\r\n    }\r\n\r\n    function _saveBlockData() internal {\r\n        for (uint256 i = 0; i < stakers.length; i++) {\r\n            for (uint256 j = block.number; j > lastSavedBlock; j--) {\r\n                for (uint256 k = 0; k < stakeCount[stakers[i]]; k++) {\r\n                    blockdata[j] = blockdata[j].add(\r\n                        stakes[stakers[i]][k].amount\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        lastSavedBlock = block.number;\r\n        emit Saved(lastSavedBlock);\r\n    }\r\n\r\n    function rewards(address adrs) public view returns (uint256) {\r\n        uint256 reward = 0;\r\n\r\n        for (uint256 j = 0; j < stakeCount[adrs]; j++) {\r\n            for (\r\n                uint256 i = stakes[adrs][j].blockNumber;\r\n                i < lastSavedBlock;\r\n                i++\r\n            ) {\r\n                reward =\r\n                    reward +\r\n                    stakes[adrs][j]\r\n                        .amount\r\n                        .mul(blockrate.div(10**blockDecimals))\r\n                        .div(blockdata[i]);\r\n            }\r\n            for (uint256 k = lastSavedBlock; k < block.number; k++) {\r\n                reward =\r\n                    reward +\r\n                    stakes[adrs][j]\r\n                        .amount\r\n                        .mul(blockrate.div(10**blockDecimals))\r\n                        .div(blockdata[lastSavedBlock]);\r\n            }\r\n        }\r\n        return reward;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adrs\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"staker\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getrewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSavedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Saved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SpringField","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e78c6e0410cc33a0864d0ac6c9ff7dabaf709cb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2b04b15df0f61566c1d18ee338934969e14eb994a2d68e8029ac3b5abd0cf5d9"}]}