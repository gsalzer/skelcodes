{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive vaults via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length \\u003e index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.24 \\u003c0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n    bool private initialized;\\n\\n    /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n    bool private initializing;\\n\\n    /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"},\"ITokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\ninterface ITokenManager {\\n    function mint(address _receiver, uint256 _amount) external;\\n    function issue(uint256 _amount) external;\\n    function assign(address _receiver, uint256 _amount) external;\\n    function burn(address _holder, uint256 _amount) external;\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    ) external returns (uint256);\\n    function revokeVesting(address _holder, uint256 _vestingId) external;\\n}\\n\"},\"IXStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IXToken.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\ninterface IXStore {\\n    struct FeeParams {\\n        uint256 ethBase;\\n        uint256 ethStep;\\n    }\\n\\n    struct BountyParams {\\n        uint256 ethMax;\\n        uint256 length;\\n    }\\n\\n    struct Vault {\\n        address xTokenAddress;\\n        address nftAddress;\\n        address manager;\\n        IXToken xToken;\\n        IERC721 nft;\\n        EnumerableSet.UintSet holdings;\\n        EnumerableSet.UintSet reserves;\\n        mapping(uint256 =\\u003e address) requester;\\n        mapping(uint256 =\\u003e bool) isEligible;\\n        mapping(uint256 =\\u003e bool) shouldReserve;\\n        bool allowMintRequests;\\n        bool flipEligOnRedeem;\\n        bool negateEligibility;\\n        bool isFinalized;\\n        bool isClosed;\\n        FeeParams mintFees;\\n        FeeParams burnFees;\\n        FeeParams dualFees;\\n        BountyParams supplierBounty;\\n        uint256 ethBalance;\\n        uint256 tokenBalance;\\n        bool isD2Vault;\\n        address d2AssetAddress;\\n        IERC20 d2Asset;\\n        uint256 d2Holdings;\\n    }\\n\\n    function isExtension(address addr) external view returns (bool);\\n\\n    function randNonce() external view returns (uint256);\\n\\n    function vaultsLength() external view returns (uint256);\\n\\n    function xTokenAddress(uint256 vaultId) external view returns (address);\\n\\n    function nftAddress(uint256 vaultId) external view returns (address);\\n\\n    function manager(uint256 vaultId) external view returns (address);\\n\\n    function xToken(uint256 vaultId) external view returns (IXToken);\\n\\n    function nft(uint256 vaultId) external view returns (IERC721);\\n\\n    function holdingsLength(uint256 vaultId) external view returns (uint256);\\n\\n    function holdingsContains(uint256 vaultId, uint256 elem)\\n        external\\n        view\\n        returns (bool);\\n\\n    function holdingsAt(uint256 vaultId, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reservesLength(uint256 vaultId) external view returns (uint256);\\n\\n    function reservesContains(uint256 vaultId, uint256 elem)\\n        external\\n        view\\n        returns (bool);\\n\\n    function reservesAt(uint256 vaultId, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requester(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (address);\\n\\n    function isEligible(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function shouldReserve(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allowMintRequests(uint256 vaultId) external view returns (bool);\\n\\n    function flipEligOnRedeem(uint256 vaultId) external view returns (bool);\\n\\n    function negateEligibility(uint256 vaultId) external view returns (bool);\\n\\n    function isFinalized(uint256 vaultId) external view returns (bool);\\n\\n    function isClosed(uint256 vaultId) external view returns (bool);\\n\\n    function mintFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function burnFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function dualFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function supplierBounty(uint256 vaultId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function ethBalance(uint256 vaultId) external view returns (uint256);\\n\\n    function tokenBalance(uint256 vaultId) external view returns (uint256);\\n\\n    function isD2Vault(uint256 vaultId) external view returns (bool);\\n\\n    function d2AssetAddress(uint256 vaultId) external view returns (address);\\n\\n    function d2Asset(uint256 vaultId) external view returns (IERC20);\\n\\n    function d2Holdings(uint256 vaultId) external view returns (uint256);\\n\\n    function setXTokenAddress(uint256 vaultId, address _xTokenAddress) external;\\n\\n    function setNftAddress(uint256 vaultId, address _assetAddress) external;\\n\\n    function setManager(uint256 vaultId, address _manager) external;\\n\\n    function setXToken(uint256 vaultId) external;\\n\\n    function setNft(uint256 vaultId) external;\\n\\n    function holdingsAdd(uint256 vaultId, uint256 elem) external;\\n\\n    function holdingsRemove(uint256 vaultId, uint256 elem) external;\\n\\n    function reservesAdd(uint256 vaultId, uint256 elem) external;\\n\\n    function reservesRemove(uint256 vaultId, uint256 elem) external;\\n\\n    function setRequester(uint256 vaultId, uint256 id, address _requester)\\n        external;\\n\\n    function setIsEligible(uint256 vaultId, uint256 id, bool _bool) external;\\n\\n    function setShouldReserve(uint256 vaultId, uint256 id, bool _shouldReserve)\\n        external;\\n\\n    function setAllowMintRequests(uint256 vaultId, bool isAllowed) external;\\n\\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig) external;\\n\\n    function setNegateEligibility(uint256 vaultId, bool negateElig) external;\\n\\n    function setIsFinalized(uint256 vaultId, bool _isFinalized) external;\\n\\n    function setIsClosed(uint256 vaultId, bool _isClosed) external;\\n\\n    function setMintFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setBurnFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setDualFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\\n        external;\\n\\n    function setEthBalance(uint256 vaultId, uint256 _ethBalance) external;\\n\\n    function setTokenBalance(uint256 vaultId, uint256 _tokenBalance) external;\\n\\n    function setIsD2Vault(uint256 vaultId, bool _isD2Vault) external;\\n\\n    function setD2AssetAddress(uint256 vaultId, address _assetAddress) external;\\n\\n    function setD2Asset(uint256 vaultId) external;\\n\\n    function setD2Holdings(uint256 vaultId, uint256 _d2Holdings) external;\\n\\n    ////////////////////////////////////////////////////////////\\n\\n    function setIsExtension(address addr, bool _isExtension) external;\\n\\n    function setRandNonce(uint256 _randNonce) external;\\n\\n    function addNewVault() external returns (uint256);\\n}\\n\"},\"IXToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IXToken is IERC20 {\\n    function owner() external returns (address);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function changeName(string calldata name) external;\\n\\n    function changeSymbol(string calldata symbol) external;\\n\\n    function setVaultAddress(address vaultAddress) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context, Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initOwnable() internal virtual initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the revault on every call to nonReentrant will be lower in\\n    // amount. Since revaults are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full revault coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function initReentrancyGuard() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a revault is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"TokenAppController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ITokenManager.sol\\\";\\n\\ncontract TokenAppController is Ownable {\\n    ITokenManager public tokenManager;\\n    address public tokenManagerAddr;\\n\\n    function initTAC() internal {\\n        initOwnable();\\n    }\\n\\n    function setTokenManager(address tokenManagerAddress) internal onlyOwner {\\n        tokenManagerAddr = tokenManagerAddress;\\n        tokenManager = ITokenManager(tokenManagerAddr);\\n    }\\n\\n    function callMint(address _receiver, uint256 _amount) internal onlyOwner {\\n        tokenManager.mint(_receiver, _amount);\\n    }\\n\\n    function callIssue(uint256 _amount) internal onlyOwner {\\n        tokenManager.issue(_amount);\\n    }\\n\\n    function callAssign(address _receiver, uint256 _amount) internal onlyOwner {\\n        tokenManager.assign(_receiver, _amount);\\n    }\\n\\n    function callBurn(address _holder, uint256 _amount) internal onlyOwner {\\n        tokenManager.burn(_holder, _amount);\\n    }\\n\\n    function callAssignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    ) internal returns (uint256) {\\n        return\\n            tokenManager.assignVested(\\n                _receiver,\\n                _amount,\\n                _start,\\n                _cliff,\\n                _vested,\\n                _revokable\\n            );\\n    }\\n\\n    function callRevokeVesting(address _holder, uint256 _vestingId)\\n        internal\\n        onlyOwner\\n    {\\n        tokenManager.revokeVesting(_holder, _vestingId);\\n    }\\n\\n}\\n\"},\"XBouties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./TokenAppController.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract XBounties is TokenAppController, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public interval = 15 * 60; // 15 minutes\\n    uint256 public start = 1608667200; // Tue Dec 22 2020, 12pm PST\\n    uint64 public vestedUntil = 1609876800; // Tue, Jan 5 2021, 12pm PST\\n\\n    IERC20 public nftxToken;\\n    address payable public daoMultiSig;\\n\\n    struct Bounty {\\n        address tokenContract;\\n        uint256 nftxPrice;\\n        uint256 paidOut;\\n        uint256 payoutCap;\\n    }\\n\\n    event NewBountyAdded(uint256 bountyId);\\n    event BountyFilled(\\n        uint256 bountyId,\\n        uint256 nftxAmount,\\n        uint256 assetAmount,\\n        address sender,\\n        uint64 start,\\n        uint64 cliff,\\n        uint64 vested\\n    );\\n    event NftxPriceSet(uint256 bountyId, uint256 newNftxPrice);\\n    event PayoutCapSet(uint256 bountyId, uint256 newCap);\\n    event BountyClosed(uint256 bountyId);\\n    event EthWithdrawn(uint256 amount);\\n    event Erc20Withdrawn(address tokenContract, uint256 amount);\\n    event Erc721Withdrawn(address nftContract, uint256 tokenId);\\n\\n    Bounty[] internal bounties;\\n\\n    constructor(\\n        address _tokenManager,\\n        address payable _daoMultiSig,\\n        address _nftxToken,\\n        address _xStore\\n    ) public {\\n        initTAC();\\n        setTokenManager(_tokenManager);\\n        daoMultiSig = _daoMultiSig;\\n        nftxToken = IERC20(_nftxToken);\\n\\n        IXStore xStore = IXStore(_xStore);\\n\\n        createEthBounty(130 * BASE, 65000 * BASE);\\n        createEthBounty(65 * BASE, 65000 * BASE);\\n        createEthBounty(BASE.mul(130).div(3), 65000 * BASE);\\n        createBounty(\\n            xStore.xTokenAddress(0), // PUNK-BASIC\\n            390 * BASE,\\n            31200 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(15), // PUNK-FEMALE\\n            520 * BASE,\\n            15600 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(1), // PUNK-ATTR-4\\n            585 * BASE,\\n            14625 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(2), // PUNK-ATTR-5\\n            1950 * BASE,\\n            15600 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(3), // PUNK-ZOMBIE\\n            8450 * BASE,\\n            16900 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(4), // AXIE-ORIGIN\\n            130 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(5), // AXIE-MYSTIC-1\\n            780 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(6), // AXIE-MYSTIC-2\\n            3900 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(7), // KITTY-GEN-0\\n            325 * BASE.div(10),\\n            6760 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(8), // KITTY-GEN-0-F\\n            39 * BASE,\\n            6240 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(9), // KITTY-FOUNDER\\n            6175 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(10), // AVASTR-BASIC\\n            195 * BASE.div(10),\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(11), // AVASTR-RANK-30\\n            26 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(12), // AVASTR-RANK-60\\n            195 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(13), // GLYPH\\n            1300 * BASE,\\n            23400 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(14), // JOY\\n            650 * BASE,\\n            11700 * BASE\\n        );\\n    }\\n\\n    function setStart(uint256 newStart) public onlyOwner {\\n        start = newStart;\\n    }\\n\\n    function setInterval(uint256 newInterval) public onlyOwner {\\n        interval = newInterval;\\n    }\\n\\n    function setVestedUntil(uint64 newTime) public onlyOwner {\\n        vestedUntil = newTime;\\n    }\\n\\n    function getBountyInfo(uint256 bountyId)\\n        public\\n        view\\n        returns (address, uint256, uint256, uint256)\\n    {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return (\\n            bounties[bountyId].tokenContract,\\n            bounties[bountyId].nftxPrice,\\n            bounties[bountyId].paidOut,\\n            bounties[bountyId].payoutCap\\n        );\\n    }\\n\\n    function getMaxPayout() public view returns (uint256) {\\n        uint256 tMinus4 = start.sub(interval.mul(4));\\n        uint256 tMinus3 = start.sub(interval.mul(3));\\n        uint256 tMinus2 = start.sub(interval.mul(2));\\n        uint256 tMinus1 = start.sub(interval.mul(1));\\n        uint256 tm4Max = 0;\\n        uint256 tm3Max = 50 * BASE;\\n        uint256 tm2Max = 500 * BASE;\\n        uint256 tm1Max = 5000 * BASE;\\n        uint256 tm0Max = 50000 * BASE;\\n        if (now \\u003c tMinus4) {\\n            return 0;\\n        } else if (now \\u003c tMinus3) {\\n            uint256 progressBigNum = now.sub(tMinus4).mul(BASE).div(interval);\\n            uint256 addedPayout = tm3Max.sub(tm4Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm4Max.add(addedPayout);\\n        } else if (now \\u003c tMinus2) {\\n            uint256 progressBigNum = now.sub(tMinus3).mul(BASE).div(interval);\\n            uint256 addedPayout = tm2Max.sub(tm3Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm3Max.add(addedPayout);\\n        } else if (now \\u003c tMinus1) {\\n            uint256 progressBigNum = now.sub(tMinus2).mul(BASE).div(interval);\\n            uint256 addedPayout = tm1Max.sub(tm2Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm2Max.add(addedPayout);\\n        } else if (now \\u003c start) {\\n            uint256 progressBigNum = now.sub(tMinus1).mul(BASE).div(interval);\\n            uint256 addedPayout = tm0Max.sub(tm1Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm1Max.add(addedPayout);\\n        } else {\\n            return tm0Max;\\n        }\\n    }\\n\\n    function getBountiesLength() public view returns (uint256) {\\n        return bounties.length;\\n    }\\n\\n    function getIsEth(uint256 bountyId) public view returns (bool) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract == address(0);\\n    }\\n\\n    function getTokenContract(uint256 bountyId) public view returns (address) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract;\\n    }\\n\\n    function getNftxPrice(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].nftxPrice;\\n    }\\n\\n    function getPayoutCap(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].payoutCap;\\n    }\\n\\n    function getPaidOut(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].paidOut;\\n    }\\n\\n    function setNftxPrice(uint256 bountyId, uint256 newPrice) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].nftxPrice = newPrice;\\n        emit NftxPriceSet(bountyId, newPrice);\\n    }\\n\\n    function setPayoutCap(uint256 bountyId, uint256 newCap) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = newCap;\\n        emit PayoutCapSet(bountyId, newCap);\\n    }\\n\\n    function createEthBounty(uint256 nftxPricePerEth, uint256 amountOfEth)\\n        public\\n        onlyOwner\\n    {\\n        createBounty(address(0), nftxPricePerEth, amountOfEth);\\n    }\\n\\n    function createBounty(address token, uint256 nftxPrice, uint256 payoutCap)\\n        public\\n        onlyOwner\\n    {\\n        Bounty memory newBounty;\\n        newBounty.tokenContract = token;\\n        newBounty.nftxPrice = nftxPrice;\\n        newBounty.payoutCap = payoutCap;\\n        bounties.push(newBounty);\\n        uint256 bountyId = bounties.length.sub(1);\\n        emit NewBountyAdded(bountyId);\\n    }\\n\\n    function closeBounty(uint256 bountyId) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = bounties[bountyId].paidOut;\\n        emit BountyClosed(bountyId);\\n    }\\n\\n    function fillBounty(uint256 bountyId, uint256 amountBeingSent)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        _fillBountyCustom(\\n            bountyId,\\n            amountBeingSent,\\n            vestedUntil - 2,\\n            vestedUntil - 1,\\n            vestedUntil\\n        );\\n    }\\n\\n    /* function fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) public payable nonReentrant {\\n        _fillBountyCustom(bountyId, donationSize, _start, cliff, vested);\\n    } */\\n\\n    function _fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) internal {\\n        require(cliff \\u003e= vestedUntil - 1 \\u0026\\u0026 vested \\u003e= vestedUntil, \\\"Not valid\\\");\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        Bounty storage bounty = bounties[bountyId];\\n        uint256 rewardCap = getMaxPayout();\\n        require(rewardCap \\u003e 0, \\\"Must wait for cap to be lifted\\\");\\n        uint256 remainingNftx = bounty.payoutCap.sub(bounty.paidOut);\\n        require(remainingNftx \\u003e 0, \\\"Bounty is already finished\\\");\\n        uint256 requestedNftx = donationSize.mul(bounty.nftxPrice).div(BASE);\\n        uint256 willGive = remainingNftx \\u003c requestedNftx\\n            ? remainingNftx\\n            : rewardCap \\u003c requestedNftx\\n            ? rewardCap\\n            : requestedNftx;\\n        uint256 willTake = donationSize.mul(willGive).div(requestedNftx);\\n        if (getIsEth(bountyId)) {\\n            require(msg.value \\u003e= willTake, \\\"Value sent is insufficient\\\");\\n            if (msg.value \\u003e willTake) {\\n                address payable _sender = msg.sender;\\n                _sender.transfer(msg.value.sub(willTake));\\n            }\\n            daoMultiSig.transfer(willTake);\\n        } else {\\n            IERC20 fundToken = IERC20(bounty.tokenContract);\\n            fundToken.safeTransferFrom(msg.sender, daoMultiSig, willTake);\\n        }\\n        if (now \\u003e vested) {\\n            nftxToken.safeTransfer(msg.sender, willGive);\\n        } else {\\n            nftxToken.safeTransfer(tokenManagerAddr, willGive);\\n            callAssignVested(\\n                msg.sender,\\n                willGive,\\n                _start,\\n                cliff,\\n                vested,\\n                false\\n            );\\n        }\\n        bounty.paidOut = bounty.paidOut.add(willGive);\\n        emit BountyFilled(\\n            bountyId,\\n            willGive,\\n            willTake,\\n            msg.sender,\\n            _start,\\n            cliff,\\n            vested\\n        );\\n    }\\n\\n    function withdrawEth(uint256 amount) public onlyOwner {\\n        address payable sender = msg.sender;\\n        sender.transfer(amount);\\n        emit EthWithdrawn(amount);\\n    }\\n\\n    function withdrawErc20(address tokenContract, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        IERC20 token = IERC20(tokenContract);\\n        token.safeTransfer(msg.sender, amount);\\n        emit Erc20Withdrawn(tokenContract, amount);\\n    }\\n\\n    function withdrawErc721(address nftContract, uint256 tokenId)\\n        public\\n        onlyOwner\\n    {\\n        IERC721 nft = IERC721(nftContract);\\n        nft.safeTransferFrom(address(this), msg.sender, tokenId);\\n        emit Erc721Withdrawn(nftContract, tokenId);\\n    }\\n}\\n\"},\"XBoutiesRinkeby.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./TokenAppController.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract XBountiesRinkeby is TokenAppController, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public interval = 15 * 60; // 15 minutes\\n    uint256 public start = 1608580800; // Mon, Dec 21 2020, 12pm PST\\n    uint64 public vestedUntil = 1609876800; // Tue, Jan 5 2021, 12pm PST\\n\\n    IERC20 public nftxToken;\\n    address payable public daoMultiSig;\\n\\n    struct Bounty {\\n        address tokenContract;\\n        uint256 nftxPrice;\\n        uint256 paidOut;\\n        uint256 payoutCap;\\n    }\\n\\n    event NewBountyAdded(uint256 bountyId);\\n    event BountyFilled(\\n        uint256 bountyId,\\n        uint256 nftxAmount,\\n        uint256 assetAmount,\\n        address sender,\\n        uint64 start,\\n        uint64 cliff,\\n        uint64 vested\\n    );\\n    event NftxPriceSet(uint256 bountyId, uint256 newNftxPrice);\\n    event PayoutCapSet(uint256 bountyId, uint256 newCap);\\n    event BountyClosed(uint256 bountyId);\\n    event EthWithdrawn(uint256 amount);\\n    event Erc20Withdrawn(address tokenContract, uint256 amount);\\n    event Erc721Withdrawn(address nftContract, uint256 tokenId);\\n\\n    Bounty[] internal bounties;\\n\\n    constructor(\\n        address _tokenManager,\\n        address payable _daoMultiSig,\\n        address _nftxToken,\\n        address _xStore\\n    ) public {\\n        initTAC();\\n        setTokenManager(_tokenManager);\\n        daoMultiSig = _daoMultiSig;\\n        nftxToken = IERC20(_nftxToken);\\n\\n        IXStore xStore = IXStore(_xStore);\\n\\n        createEthBounty(130 * BASE, 65000 * BASE);\\n        createEthBounty(65 * BASE, 65000 * BASE);\\n        createEthBounty(BASE.mul(130).div(3), 65000 * BASE);\\n        createBounty(\\n            xStore.xTokenAddress(0), // PUNK-BASIC\\n            390 * BASE,\\n            31200 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(1), // PUNK-ATTR-4\\n            585 * BASE,\\n            14625 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(2), // PUNK-ATTR-5\\n            1950 * BASE,\\n            15600 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(3), // PUNK-ZOMBIE\\n            8450 * BASE,\\n            16900 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(4), // AXIE-ORIGIN\\n            130 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(5), // AXIE-MYSTIC-1\\n            780 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(6), // AXIE-MYSTIC-2\\n            3900 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(7), // KITTY-GEN-0\\n            26 * BASE,\\n            5850 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(8), // KITTY-GEN-0-F\\n            39 * BASE,\\n            5850 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(9), // KITTY-FOUNDER\\n            6175 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(10), // AVASTR-BASIC\\n            20 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(11), // AVASTR-RANK-30\\n            26 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(12), // AVASTR-RANK-60\\n            195 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(13), // GLYPH\\n            1300 * BASE,\\n            26000 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(14), // JOY\\n            455 * BASE,\\n            10010 * BASE\\n        );\\n    }\\n\\n    function setStart(uint256 newStart) public onlyOwner {\\n        start = newStart;\\n    }\\n\\n    function setInterval(uint256 newInterval) public onlyOwner {\\n        interval = newInterval;\\n    }\\n\\n    function setVestedUntil(uint64 newTime) public onlyOwner {\\n        vestedUntil = newTime;\\n    }\\n\\n    function getBountyInfo(uint256 bountyId)\\n        public\\n        view\\n        returns (address, uint256, uint256, uint256)\\n    {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return (\\n            bounties[bountyId].tokenContract,\\n            bounties[bountyId].nftxPrice,\\n            bounties[bountyId].paidOut,\\n            bounties[bountyId].payoutCap\\n        );\\n    }\\n\\n    function getMaxPayout() public view returns (uint256) {\\n        uint256 tMinus4 = start.sub(interval.mul(4));\\n        uint256 tMinus3 = start.sub(interval.mul(3));\\n        uint256 tMinus2 = start.sub(interval.mul(2));\\n        uint256 tMinus1 = start.sub(interval.mul(1));\\n        uint256 tm4Max = 0;\\n        uint256 tm3Max = 50 * BASE;\\n        uint256 tm2Max = 500 * BASE;\\n        uint256 tm1Max = 5000 * BASE;\\n        uint256 tm0Max = 50000 * BASE;\\n        if (now \\u003c tMinus4) {\\n            return 0;\\n        } else if (now \\u003c tMinus3) {\\n            uint256 progressBigNum = now.sub(tMinus4).mul(BASE).div(interval);\\n            uint256 addedPayout = tm3Max.sub(tm4Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm4Max.add(addedPayout);\\n        } else if (now \\u003c tMinus2) {\\n            uint256 progressBigNum = now.sub(tMinus3).mul(BASE).div(interval);\\n            uint256 addedPayout = tm2Max.sub(tm3Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm3Max.add(addedPayout);\\n        } else if (now \\u003c tMinus1) {\\n            uint256 progressBigNum = now.sub(tMinus2).mul(BASE).div(interval);\\n            uint256 addedPayout = tm1Max.sub(tm2Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm2Max.add(addedPayout);\\n        } else if (now \\u003c start) {\\n            uint256 progressBigNum = now.sub(tMinus1).mul(BASE).div(interval);\\n            uint256 addedPayout = tm0Max.sub(tm1Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm1Max.add(addedPayout);\\n        } else {\\n            return tm0Max;\\n        }\\n    }\\n\\n    function getBountiesLength() public view returns (uint256) {\\n        return bounties.length;\\n    }\\n\\n    function getIsEth(uint256 bountyId) public view returns (bool) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract == address(0);\\n    }\\n\\n    function getTokenContract(uint256 bountyId) public view returns (address) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract;\\n    }\\n\\n    function getNftxPrice(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].nftxPrice;\\n    }\\n\\n    function getPayoutCap(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].payoutCap;\\n    }\\n\\n    function getPaidOut(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].paidOut;\\n    }\\n\\n    function setNftxPrice(uint256 bountyId, uint256 newPrice) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].nftxPrice = newPrice;\\n        emit NftxPriceSet(bountyId, newPrice);\\n    }\\n\\n    function setPayoutCap(uint256 bountyId, uint256 newCap) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = newCap;\\n        emit PayoutCapSet(bountyId, newCap);\\n    }\\n\\n    function createEthBounty(uint256 nftxPricePerEth, uint256 amountOfEth)\\n        public\\n        onlyOwner\\n    {\\n        createBounty(address(0), nftxPricePerEth, amountOfEth);\\n    }\\n\\n    function createBounty(address token, uint256 nftxPrice, uint256 payoutCap)\\n        public\\n        onlyOwner\\n    {\\n        Bounty memory newBounty;\\n        newBounty.tokenContract = token;\\n        newBounty.nftxPrice = nftxPrice;\\n        newBounty.payoutCap = payoutCap;\\n        bounties.push(newBounty);\\n        uint256 bountyId = bounties.length.sub(1);\\n        emit NewBountyAdded(bountyId);\\n    }\\n\\n    function closeBounty(uint256 bountyId) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = bounties[bountyId].paidOut;\\n        emit BountyClosed(bountyId);\\n    }\\n\\n    function fillBounty(uint256 bountyId, uint256 amountBeingSent)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        _fillBountyCustom(\\n            bountyId,\\n            amountBeingSent,\\n            vestedUntil - 2,\\n            vestedUntil - 1,\\n            vestedUntil\\n        );\\n    }\\n\\n    /* function fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) public payable nonReentrant {\\n        _fillBountyCustom(bountyId, donationSize, _start, cliff, vested);\\n    } */\\n\\n    function _fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) internal {\\n        require(cliff \\u003e= vestedUntil - 1 \\u0026\\u0026 vested \\u003e= vestedUntil, \\\"Not valid\\\");\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        Bounty storage bounty = bounties[bountyId];\\n        uint256 rewardCap = getMaxPayout();\\n        require(rewardCap \\u003e 0, \\\"Must wait for cap to be lifted\\\");\\n        uint256 remainingNftx = bounty.payoutCap.sub(bounty.paidOut);\\n        require(remainingNftx \\u003e 0, \\\"Bounty is already finished\\\");\\n        uint256 requestedNftx = donationSize.mul(bounty.nftxPrice).div(BASE);\\n        uint256 willGive = remainingNftx \\u003c requestedNftx\\n            ? remainingNftx\\n            : rewardCap \\u003c requestedNftx\\n            ? rewardCap\\n            : requestedNftx;\\n        uint256 willTake = donationSize.mul(willGive).div(requestedNftx);\\n        if (getIsEth(bountyId)) {\\n            require(msg.value \\u003e= willTake, \\\"Value sent is insufficient\\\");\\n            if (msg.value \\u003e willTake) {\\n                address payable _sender = msg.sender;\\n                _sender.transfer(msg.value.sub(willTake));\\n            }\\n            daoMultiSig.transfer(willTake);\\n        } else {\\n            IERC20 fundToken = IERC20(bounty.tokenContract);\\n            fundToken.safeTransferFrom(msg.sender, daoMultiSig, willTake);\\n        }\\n        if (now \\u003e vested) {\\n            nftxToken.safeTransfer(msg.sender, willGive);\\n        } else {\\n            nftxToken.safeTransfer(tokenManagerAddr, willGive);\\n            callAssignVested(\\n                msg.sender,\\n                willGive,\\n                _start,\\n                cliff,\\n                vested,\\n                false\\n            );\\n        }\\n        bounty.paidOut = bounty.paidOut.add(willGive);\\n        emit BountyFilled(\\n            bountyId,\\n            willGive,\\n            willTake,\\n            msg.sender,\\n            _start,\\n            cliff,\\n            vested\\n        );\\n    }\\n\\n    function withdrawEth(uint256 amount) public onlyOwner {\\n        address payable sender = msg.sender;\\n        sender.transfer(amount);\\n        emit EthWithdrawn(amount);\\n    }\\n\\n    function withdrawErc20(address tokenContract, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        IERC20 token = IERC20(tokenContract);\\n        token.safeTransfer(msg.sender, amount);\\n        emit Erc20Withdrawn(tokenContract, amount);\\n    }\\n\\n    function withdrawErc721(address nftContract, uint256 tokenId)\\n        public\\n        onlyOwner\\n    {\\n        IERC721 nft = IERC721(nftContract);\\n        nft.safeTransferFrom(address(this), msg.sender, tokenId);\\n        emit Erc721Withdrawn(nftContract, tokenId);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_daoMultiSig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"BountyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"cliff\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"vested\",\"type\":\"uint64\"}],\"name\":\"BountyFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Erc20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Erc721Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"NewBountyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNftxPrice\",\"type\":\"uint256\"}],\"name\":\"NftxPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"PayoutCapSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"closeBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutCap\",\"type\":\"uint256\"}],\"name\":\"createBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftxPricePerEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfEth\",\"type\":\"uint256\"}],\"name\":\"createEthBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoMultiSig\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBeingSent\",\"type\":\"uint256\"}],\"name\":\"fillBounty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBountiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getBountyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getIsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getNftxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getPayoutCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"getTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setNftxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setPayoutCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newTime\",\"type\":\"uint64\"}],\"name\":\"setVestedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedUntil\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawErc721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XBounties","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005566b3e5fc300a1b28c214b49a5950c34d00eb3300000000000000000000000040d73df4f99bae688ce3c23a01022224fe16c7b200000000000000000000000087d73e916d7057945c9bcd8cdd94e42a6f47f776000000000000000000000000be54738723cea167a76ad5421b50caa49692e7b7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2ce394f5db69e2f6c189aa6edd57df66bc8d44ea08e1935bd47d9b37d2846be"}]}