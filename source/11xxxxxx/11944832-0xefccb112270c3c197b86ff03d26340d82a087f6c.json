{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/DeFiatGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./interfaces/IDeFiatGov.sol\\\";\\r\\nimport \\\"./utils/DeFiatUtils.sol\\\";\\r\\n\\r\\ncontract DeFiatGov is IDeFiatGov, DeFiatUtils {\\r\\n    event RightsUpdated(address indexed caller, address indexed subject, uint256 level);\\r\\n    event RightsRevoked(address indexed caller, address indexed subject);\\r\\n    event MastermindUpdated(address indexed caller, address indexed subject);\\r\\n    event FeeDestinationUpdated(address indexed caller, address feeDestination);\\r\\n    event TxThresholdUpdated(address indexed caller, uint256 txThreshold);\\r\\n    event BurnRateUpdated(address indexed caller, uint256 burnRate);\\r\\n    event FeeRateUpdated(address indexed caller, uint256 feeRate);\\r\\n\\r\\n    address public override mastermind;\\r\\n    mapping (address => uint256) private actorLevel; // governance = multi-tier level\\r\\n    \\r\\n    address private feeDestination; // target address for fees\\r\\n    uint256 private txThreshold; // min dft transferred to mint dftp\\r\\n    uint256 private burnRate; // % burn on each tx, 10 = 1%\\r\\n    uint256 private feeRate; // % fee on each tx, 10 = 1% \\r\\n\\r\\n    modifier onlyMastermind {\\r\\n        require(msg.sender == mastermind, \\\"Gov: Only Mastermind\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        require(actorLevel[msg.sender] >= 2,\\\"Gov: Only Governors\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPartner {\\r\\n        require(actorLevel[msg.sender] >= 1,\\\"Gov: Only Partners\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        mastermind = msg.sender;\\r\\n        actorLevel[mastermind] = 3;\\r\\n        feeDestination = mastermind;\\r\\n    }\\r\\n    \\r\\n    // VIEW\\r\\n\\r\\n    // Gov - Actor Level\\r\\n    function viewActorLevelOf(address _address) public override view returns (uint256) {\\r\\n        return actorLevel[_address];\\r\\n    }\\r\\n\\r\\n    // Gov - Fee Destination / Treasury\\r\\n    function viewFeeDestination() public override view returns (address) {\\r\\n        return feeDestination;\\r\\n    }\\r\\n\\r\\n    // Points - Transaction Threshold\\r\\n    function viewTxThreshold() public override view returns (uint256) {\\r\\n        return txThreshold;\\r\\n    }\\r\\n\\r\\n    // Token - Burn Rate\\r\\n    function viewBurnRate() public override view returns (uint256) {\\r\\n        return burnRate;\\r\\n    }\\r\\n\\r\\n    // Token - Fee Rate\\r\\n    function viewFeeRate() public override view returns (uint256) {\\r\\n        return feeRate;\\r\\n    }\\r\\n\\r\\n    // Governed Functions\\r\\n\\r\\n    // Update Actor Level, can only be performed with level strictly lower than msg.sender's level\\r\\n    // Add/Remove user governance rights\\r\\n    function setActorLevel(address user, uint256 level) public {\\r\\n        require(level < actorLevel[msg.sender], \\\"ActorLevel: Can only grant rights below you\\\");\\r\\n        require(actorLevel[user] < actorLevel[msg.sender], \\\"ActorLevel: Can only update users below you\\\");\\r\\n\\r\\n        actorLevel[user] = level; // updates level -> adds or removes rights\\r\\n        emit RightsUpdated(msg.sender, user, level);\\r\\n    }\\r\\n    \\r\\n    // MasterMind - Revoke all rights\\r\\n    function removeAllRights(address user) public onlyMastermind {\\r\\n        require(user != mastermind, \\\"Mastermind: Cannot revoke own rights\\\");\\r\\n\\r\\n        actorLevel[user] = 0; \\r\\n        emit RightsRevoked(msg.sender, user);\\r\\n    }\\r\\n\\r\\n    // Mastermind - Transfer ownership of Governance\\r\\n    function setMastermind(address _mastermind) public onlyMastermind {\\r\\n        require(_mastermind != mastermind, \\\"Mastermind: Cannot call self\\\");\\r\\n\\r\\n        mastermind = _mastermind; // Only one mastermind\\r\\n        actorLevel[_mastermind] = 3;\\r\\n        actorLevel[mastermind] = 2; // new level for previous mastermind\\r\\n        emit MastermindUpdated(msg.sender, mastermind);\\r\\n    }\\r\\n\\r\\n    // Gov - Update the Fee Destination\\r\\n    function setFeeDestination(address _feeDestination) public onlyGovernor {\\r\\n        require(_feeDestination != feeDestination, \\\"FeeDestination: No destination change\\\");\\r\\n\\r\\n        feeDestination = _feeDestination;\\r\\n        emit FeeDestinationUpdated(msg.sender, feeDestination);\\r\\n    }\\r\\n\\r\\n    // Points - Update the Tx Threshold\\r\\n    function changeTxThreshold(uint _txThreshold) public onlyGovernor {\\r\\n        require(_txThreshold != txThreshold, \\\"TxThreshold: No threshold change\\\");\\r\\n\\r\\n        txThreshold = _txThreshold;\\r\\n        emit TxThresholdUpdated(msg.sender, txThreshold);\\r\\n    }\\r\\n    \\r\\n    // Token - Update the Burn Rate\\r\\n    function changeBurnRate(uint _burnRate) public onlyGovernor {\\r\\n        require(_burnRate <= 200, \\\"BurnRate: 20% limit\\\");\\r\\n\\r\\n        burnRate = _burnRate; \\r\\n        emit BurnRateUpdated(msg.sender, burnRate);\\r\\n    }\\r\\n\\r\\n    // Token - Update the Fee Rate\\r\\n    function changeFeeRate(uint _feeRate) public onlyGovernor {\\r\\n        require(_feeRate <= 200, \\\"FeeRate: 20% limit\\\");\\r\\n\\r\\n        feeRate = _feeRate;\\r\\n        emit FeeRateUpdated(msg.sender, feeRate);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeFiatGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IDeFiatGov {\\r\\n    function mastermind() external view returns (address);\\r\\n    function viewActorLevelOf(address _address) external view returns (uint256);\\r\\n    function viewFeeDestination() external view returns (address);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewBurnRate() external view returns (uint256);\\r\\n    function viewFeeRate() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/DeFiatUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"../lib/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../lib/@openzeppelin/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract DeFiatUtils is Ownable {\\r\\n    event TokenSweep(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\\r\\n    function sweep(address token) external onlyOwner {\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        require(amount > 0, \\\"Sweep: No token balance\\\");\\r\\n\\r\\n        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n\\r\\n        emit TokenSweep(msg.sender, token, amount);\\r\\n    }\\r\\n\\r\\n    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\\r\\n    function kill() external onlyOwner {\\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"}],\"name\":\"BurnRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeDestination\",\"type\":\"address\"}],\"name\":\"FeeDestinationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"MastermindUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"RightsRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txThreshold\",\"type\":\"uint256\"}],\"name\":\"TxThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"changeBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"changeFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txThreshold\",\"type\":\"uint256\"}],\"name\":\"changeTxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mastermind\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAllRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setActorLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastermind\",\"type\":\"address\"}],\"name\":\"setMastermind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewActorLevelOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeFiatGov","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}