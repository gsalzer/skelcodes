{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/utils/SafeERC20.sol\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n\npragma solidity ^0.6.12;\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance =\n            token.allowance(address(this), spender).sub(\n                value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata =\n            address(token).functionCall(\n                data,\n                \"SafeERC20: low-level call failed\"\n            );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\nlibrary UniversalERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function universalTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token == IERC20(0)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    function universalApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token != IERC20(0)) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token == IERC20(0)) {\n            require(\n                from == msg.sender && msg.value >= amount,\n                \"msg.value is zero\"\n            );\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who)\n        internal\n        view\n        returns (uint256)\n    {\n        if (token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n\n// File: contracts/interfaces/IXChanger.sol\n\n\npragma solidity ^0.6.0;\n\n\ninterface XChanger {\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) external payable returns (uint256 result);\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    )\n        external\n        view\n        returns (\n            uint256 returnAmount,\n            uint256[3] memory swapAmountsIn,\n            uint256[3] memory swapAmountsOut,\n            bool swapVia\n        );\n\n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    )\n        external\n        view\n        returns (\n            uint256 inputAmount,\n            uint256[3] memory swapAmountsIn,\n            uint256[3] memory swapAmountsOut,\n            bool swapVia\n        );\n}\n\n// File: contracts/XChangerUser.sol\n\n\npragma solidity ^0.6.12;\n\n\n\n/**\n * @dev Helper contract to communicate to XChanger(XTrinity) contract to obtain prices and change tokens as needed\n */\ncontract XChangerUser {\n    using UniversalERC20 for IERC20;\n\n    XChanger public xchanger;\n\n    /**\n     * @dev get a price of one token amount in another\n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param amount - of the fromToken\n     */\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) public view returns (uint256 returnAmount) {\n        if (amount == 0) {\n            return (0);\n        }\n        if (fromToken == toToken) {\n            returnAmount = amount;\n        } else {\n            (returnAmount, , , ) = xchanger.quote(fromToken, toToken, amount);\n        }\n    }\n\n    /**\n     * @dev get a reverse price of one token amount in another\n     * the opposite of above 'quote' method when we need to understand how much we need to spend actually\n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param returnAmount - of the toToken\n     */\n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    ) public view returns (uint256 inputAmount) {\n        if (fromToken == toToken) {\n            inputAmount = returnAmount;\n        } else {\n            (inputAmount, , , ) = xchanger.reverseQuote(\n                fromToken,\n                toToken,\n                returnAmount\n            );\n\n            inputAmount += 1;\n            // Curve requires this\n        }\n    }\n\n    /**\n     * @dev swap one token to another given the amount we want to spend\n     \n     * @param fromToken - token we want to change/spend\n     * @param toToken - token we want to receive/spend to\n     * @param amount - of the fromToken we are spending\n     * @param slipProtect - flag to ensure the transaction will be performed if the received amount is not less than expected within the given slip %% range (like 1%)\n     */\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) public payable returns (uint256 returnAmount) {\n        if (fromToken.allowance(address(this), address(xchanger)) < amount) {\n            fromToken.universalApprove(address(xchanger), 0);\n            fromToken.universalApprove(address(xchanger), uint256(-1));\n        }\n\n        returnAmount = xchanger.swap(fromToken, toToken, amount, slipProtect);\n    }\n}\n\n// File: contracts/access/Context.sol\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/access/Ownable.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/interfaces/ICurve.sol\n\n\npragma solidity ^0.6.0;\n\nabstract contract ICurveFiCurve {\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external virtual;\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view virtual returns (uint256 out);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view virtual returns (uint256 out);\n\n    function A() external view virtual returns (uint256);\n\n    function balances(uint256 arg0) external view virtual returns (uint256);\n\n    function fee() external view virtual returns (uint256);\n}\n\n// File: contracts/utils/CurveUtils.sol\n\n\npragma solidity ^0.6.12;\n\n\n/**\n * @dev reverse-engineered utils to help Curve amount calculations\n */\ncontract CurveUtils {\n    address internal constant CURVE_ADDRESS =\n        0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7; // 3-pool DAI/USDC/USDT\n    address internal constant DAI_ADDRESS =\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address internal constant USDC_ADDRESS =\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDT_ADDRESS =\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    ICurveFiCurve internal curve = ICurveFiCurve(CURVE_ADDRESS);\n\n    uint256 private constant N_COINS = 3;\n    uint256[N_COINS] private RATES; //\n    uint256[N_COINS] private PRECISION_MUL;\n    uint256 private constant LENDING_PRECISION = 10**18;\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    mapping(address => int128) internal curveIndex;\n    mapping(int128 => address) internal reverseCurveIndex;\n\n    /**\n     * @dev get index of a token in Curve pool contract\n     */\n    function getCurveIndex(address token) internal view returns (int128) {\n        // to avoid 'stack too deep' compiler issue\n        return curveIndex[token] - 1;\n    }\n\n    /**\n     * @dev init internal variables at creation\n     */\n    function init() public virtual {\n        RATES = [\n            1000000000000000000,\n            1000000000000000000000000000000,\n            1000000000000000000000000000000\n        ];\n        PRECISION_MUL = [1, 1000000000000, 1000000000000];\n\n        curveIndex[DAI_ADDRESS] = 1; // actual index is 1 less\n        curveIndex[USDC_ADDRESS] = 2;\n        curveIndex[USDT_ADDRESS] = 3;\n        reverseCurveIndex[0] = DAI_ADDRESS;\n        reverseCurveIndex[1] = USDC_ADDRESS;\n        reverseCurveIndex[2] = USDT_ADDRESS;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function get_D(uint256[N_COINS] memory xp, uint256 amp)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 S = 0;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev = 0;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n\n        for (uint256 i = 0; i < 255; i++) {\n            uint256 D_P = D;\n\n            for (uint256 j = 0; j < N_COINS; j++) {\n                D_P = (D_P * D) / (xp[j] * N_COINS + 1); // +1 is to prevent /0\n            }\n\n            Dprev = D;\n            D =\n                ((Ann * S + D_P * N_COINS) * D) /\n                ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if ((D - Dprev) <= 1) {\n                    break;\n                }\n            } else {\n                if ((Dprev - D) <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function get_y(\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) internal view returns (uint256) {\n        //x in the input is converted to the same price/precision\n        uint256 amp = curve.A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_ = 0;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x = 0;\n\n        for (uint256 _i = 0; _i < N_COINS; _i++) {\n            if (_i == i) {\n                _x = x;\n            } else if (_i != j) {\n                _x = xp_[_i];\n            } else {\n                continue;\n            }\n\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; //  # - D\n        uint256 y_prev = 0;\n        uint256 y = D;\n\n        for (uint256 _i = 0; _i < 255; _i++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            //# Equality with the precision of 1\n            if (y > y_prev) {\n                if ((y - y_prev) <= 1) {\n                    break;\n                } else if ((y_prev - y) <= 1) {\n                    break;\n                }\n            }\n        }\n\n        return y;\n    }\n\n    /**\n     * @dev curve-specific maths - this method does not exists in the curve pool but we recreated it\n     */\n    function get_dx_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dy\n    ) internal view returns (uint256) {\n        //dx and dy in underlying units\n        //uint256[N_COINS] rates = self._stored_rates();\n\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n\n        uint256 y =\n            xp[j] -\n                ((dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - curve.fee())) *\n                precisions[j];\n        uint256 x = get_y(j, i, y, xp);\n        uint256 dx = (x - xp[i]) / precisions[i];\n        return dx;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function _xp() internal view returns (uint256[N_COINS] memory) {\n        uint256[N_COINS] memory result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * curve.balances(i)) / LENDING_PRECISION;\n        }\n\n        return result;\n    }\n}\n\n// File: contracts/aCRVMinerStaker.sol\n\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\nabstract contract ICurvePool {\n    function add_liquidity(\n        uint256[3] memory _amounts,\n        uint256 _min_mint_amount,\n        bool _use_underlying\n    ) external virtual returns (uint256 out);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount,\n        bool _use_underlying\n    ) external virtual returns (uint256 out);\n\n    function balances(uint256 i) external view virtual returns (uint256);\n}\n\nabstract contract ICurveGauge is IERC20 {\n    function deposit(uint256 _value) external virtual;\n\n    function withdraw(uint256 _value) external virtual;\n\n    function claim_rewards() external virtual;\n}\n\nabstract contract IMinter {\n    function mint(address gauge_addr) external virtual;\n}\n\n/**\n * @title aCRV external pool contract\n * @dev is an example of external pool which implements maximizing CRV yield mining capabilities.\n */\n\ncontract aCRVMiner is Ownable, XChangerUser, CurveUtils {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    bool private initialized;\n\n    address public ValueHolder;\n    ICurvePool private constant curveAAVE =\n        ICurvePool(0xDeBF20617708857ebe4F679508E7b7863a8A8EeE);\n    IERC20 private constant A3Token =\n        IERC20(0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900);\n    ICurveGauge private constant curveGauge =\n        ICurveGauge(0xd662908ADA2Ea1916B3318327A97eB18aD588b5d);\n\n    IMinter private constant minter =\n        IMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\n\n    IERC20 crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\n\n    address public enterToken; //= DAI_ADDRESS;\n    IERC20 private enterTokenIERC20; //= IERC20(enterToken);\n\n    event LogValueHolderUpdated(address Manager);\n\n    /**\n     * @dev main init function\n     */\n\n    function init(address _enterToken, address _xChanger) external {\n        require(!initialized, \"Initialized\");\n        initialized = true;\n        Ownable.initialize(); // Do not forget this call!\n        _init(_enterToken, _xChanger);\n    }\n\n    /**\n     * @dev internal variable initialization\n     */\n    function _init(address _enterToken, address _xChanger) internal {\n        CurveUtils.init();\n        enterToken = _enterToken;\n        enterTokenIERC20 = IERC20(enterToken);\n        ValueHolder = msg.sender;\n        xchanger = XChanger(_xChanger);\n    }\n\n    /**\n     * @dev re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already.\n     * This method might help fixing the storage state.\n     */\n    function reInit(address _enterToken, address _xChanger) external onlyOwner {\n        _init(_enterToken, _xChanger);\n    }\n\n    /**\n     * @dev this modifier is only for methods that should be called by ValueHolder contract\n     */\n    modifier onlyValueHolder() {\n        require(msg.sender == ValueHolder, \"Not Value Holder\");\n        _;\n    }\n\n    /**\n     * @dev Sets new ValueHolder address\n     */\n    function setValueHolder(address _ValueHolder) external onlyOwner {\n        ValueHolder = _ValueHolder;\n        emit LogValueHolderUpdated(_ValueHolder);\n    }\n\n    /**\n     * @dev set new XChanger (XTrinity) contract implementation address to use\n     */\n    function setXChangerImpl(address _Xchanger) external onlyOwner {\n        xchanger = XChanger(_Xchanger);\n    }\n\n    /**\n     * @dev method for retrieving tokens back to ValueHolder or whereever\n     */\n\n    function transferTokenTo(\n        address TokenAddress,\n        address recipient,\n        uint256 amount\n    ) external onlyValueHolder returns (uint256) {\n        IERC20 Token = IERC20(TokenAddress);\n        uint256 balance = Token.balanceOf(address(this));\n        if (balance < amount) {\n            amount = balance;\n        }\n\n        Token.universalTransfer(recipient, amount);\n        return amount;\n    }\n\n    /**\n     * @dev Main function to enter Compound supply/borrow position using the available [DAI] token balance\n     */\n    function addPosition() external onlyValueHolder returns (uint256 amount) {\n        amount = enterTokenIERC20.balanceOf(address(this));\n        require(amount > 0, \"No available enterToken\");\n\n        uint256[3] memory _amounts;\n\n        int128 tokenindex = getCurveIndex(enterToken);\n\n        if (tokenindex == 0) {\n            _amounts = [amount, 0, 0];\n        } else if (tokenindex == 1) {\n            _amounts = [0, amount, 0];\n        } else if (tokenindex == 2) {\n            _amounts = [0, 0, amount];\n        } else {\n            revert(\"wrong token index\");\n        }\n\n        allow(enterTokenIERC20, address(curveAAVE));\n\n        curveAAVE.add_liquidity(_amounts, 0, true);\n\n        uint256 balance_a3 = A3Token.balanceOf(address(this));\n\n        allow(A3Token, address(curveGauge));\n\n        curveGauge.deposit(balance_a3);\n    }\n\n    /**\n     * @dev function to fix allowance if needed\n     */\n    function allow(IERC20 token, address spender) internal {\n        if (token.allowance(address(this), spender) != uint256(-1)) {\n            token.universalApprove(spender, uint256(-1));\n        }\n    }\n\n    /**\n     * @dev Main function to exit position - partially or completely\n     */\n    function exitPosition(uint256 amount) public onlyValueHolder {\n        uint256 balance_a3 = A3Token.balanceOf(address(this));\n        balance_a3 += curveGauge.balanceOf(address(this));\n        uint256 a3_token_to_withdraw;\n\n        if (amount == uint256(-1)) {\n            //115792089237316195423570985008687907853269984665640564039457584007913129639935\n            //10000000000000000000000\n\n            //TODO: completely close position\n            a3_token_to_withdraw = balance_a3;\n        } else {\n            // TODO partial close - find out how much\n            uint256 totalStaked = getTokenStaked();\n\n            require(amount <= totalStaked, \"too much\");\n\n            a3_token_to_withdraw = amount.mul(balance_a3).div(totalStaked);\n        }\n\n        curveGauge.withdraw(a3_token_to_withdraw);\n\n        int128 tokenindex = getCurveIndex(enterToken);\n\n        require(tokenindex < 3, \"wrong token index\");\n\n        curveAAVE.remove_liquidity_one_coin(\n            a3_token_to_withdraw,\n            tokenindex,\n            0,\n            true\n        );\n    }\n\n    /**\n     * @dev Get the total amount of enterToken value of the pool\n     */\n    function getTokenStaked() public view returns (uint256 totalTokenStaked) {\n        uint256 a3CRVbalance = IERC20(curveGauge).balanceOf(address(this));\n        a3CRVbalance += A3Token.balanceOf(address(this));\n\n        uint256 a3CRVTotal = A3Token.totalSupply();\n        uint256 balance;\n\n        for (int128 i = 0; i < 3; i++) {\n            balance = curveAAVE.balances(uint256(i)).mul(a3CRVbalance).div(\n                a3CRVTotal\n            );\n            if (reverseCurveIndex[i] != enterToken) {\n                balance = quote(\n                    IERC20(reverseCurveIndex[i]),\n                    enterTokenIERC20,\n                    balance\n                );\n            }\n\n            totalTokenStaked += balance;\n        }\n    }\n\n    /**\n     * @dev Get the total value the Pool in [denominateTo] tokens [DAI?]\n     */\n\n    function getPoolValue(address denominateTo)\n        public\n        view\n        returns (uint256 totalValue)\n    {\n        uint256 freeDAI = enterTokenIERC20.balanceOf(address(this));\n        uint256 totalDAI = freeDAI.add(getTokenStaked());\n        totalValue = quote(enterTokenIERC20, IERC20(denominateTo), totalDAI);\n\n        //TODO: add CRV ???\n        /*\n        uint256 balanceComp = comp.balanceOf(address(this));\n        if (balanceComp > 0) {\n            uint256 compQuote = quote(comp, IERC20(denominateTo), balanceComp);\n            totalValue = totalValue.add(compQuote);\n        }\n        */\n    }\n\n    /**\n     * @dev Claim all available CRV from compound and convert to DAI as needed\n     */\n    function claimValue() external {\n        minter.mint(address(curveGauge));\n        convertCRV();\n    }\n\n    /**\n     * @dev Convert CRV to [DAI] using XChanger (XTrinity swap)\n     */\n    function convertCRV() public {\n        uint256 returnAmount;\n        uint256 balanceCRV = crv.balanceOf(address(this));\n        if (balanceCRV > 0) {\n            returnAmount = swap(crv, enterTokenIERC20, balanceCRV, false);\n        }\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Manager\",\"type\":\"address\"}],\"name\":\"LogValueHolderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ValueHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"denominateTo\",\"type\":\"address\"}],\"name\":\"getPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xChanger\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xChanger\",\"type\":\"address\"}],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ValueHolder\",\"type\":\"address\"}],\"name\":\"setValueHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Xchanger\",\"type\":\"address\"}],\"name\":\"setXChangerImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"slipProtect\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xchanger\",\"outputs\":[{\"internalType\":\"contract XChanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"aCRVMiner","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}