{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n   \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    \r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n   \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n       \r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Panzerprotocol is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant NAME = \"Panzerprotocol.io\";\r\n    string private constant SYMBOL = \"PNZR\";\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => uint256) private actual;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    mapping(address => bool) private excludedFromFees;\r\n    mapping(address => bool) private excludedFromRewards;\r\n    address[] private rewardExcluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant ACTUAL_TOTAL = 111_000_000 * 1e18;\r\n    uint256 private rewardsTotal = (MAX - (MAX % ACTUAL_TOTAL));\r\n    uint256 private holderFeeTotal;\r\n    uint256 private marketingFeeTotal;\r\n    uint256 private lpFeeTotal;\r\n    \r\n\r\n    uint256 public taxPercentage = 3;\r\n    uint256 public holderTaxAlloc = 10;\r\n    uint256 public marketingTaxAlloc = 10;\r\n    uint256 public lpTaxAlloc = 10;\r\n    uint256 public totalTaxAlloc = marketingTaxAlloc.add(holderTaxAlloc).add(lpTaxAlloc);\r\n\r\n    address public marketingAddress;\r\n    address public lpStakingAddress;\r\n    \r\n\r\n    constructor(address _marketingAddress) {\r\n        rewards[_marketingAddress] = rewardsTotal;\r\n        emit Transfer(address(0), _marketingAddress, ACTUAL_TOTAL);\r\n\r\n        marketingAddress = _marketingAddress;\r\n\r\n        excludeFromRewards(_msgSender());\r\n        excludeFromFees(_marketingAddress);\r\n\r\n        if (_marketingAddress != _msgSender()) {\r\n            excludeFromRewards(_marketingAddress);\r\n            excludeFromFees(_msgSender());\r\n\r\n\r\n        }\r\n\r\n        excludeFromFees(address(0x000000000000000000000000000000000000dEaD));\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return ACTUAL_TOTAL;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        if (excludedFromRewards[_account]) {\r\n            return actual[_account];\r\n        }\r\n        return tokenWithRewards(rewards[_account]);\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n\r\n        _approve(\r\n        _sender,\r\n            _msgSender(),\r\n            allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            _spender,\r\n            allowances[_msgSender()][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromRewards(address _account) external view returns (bool) {\r\n        return excludedFromRewards[_account];\r\n    }\r\n\r\n    function isExcludedFromFees(address _account) external view returns (bool) {\r\n        return excludedFromFees[_account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return holderFeeTotal.add(marketingFeeTotal).add(lpFeeTotal);\r\n    }\r\n\r\n    function totalHolderFees() external view returns (uint256) {\r\n        return holderFeeTotal;\r\n    }\r\n\r\n    function totalMarketingFees() external view returns (uint256) {\r\n        return marketingFeeTotal;\r\n    }\r\n\r\n    function totalLpFees() external view returns (uint256) {\r\n        return lpFeeTotal;\r\n    }\r\n\r\n   \r\n\r\n    function distribute(uint256 _actualAmount) public {\r\n        address sender = _msgSender();\r\n        require(!excludedFromRewards[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n        rewards[sender] = rewards[sender].sub(rewardAmount);\r\n        rewardsTotal = rewardsTotal.sub(rewardAmount);\r\n        holderFeeTotal = holderFeeTotal.add(_actualAmount);\r\n    }\r\n\r\n    function excludeFromFees(address _account) public onlyOwner() {\r\n        require(!excludedFromFees[_account], \"Account is already excluded from fee\");\r\n        excludedFromFees[_account] = true;\r\n    }\r\n\r\n    function includeInFees(address _account) public onlyOwner() {\r\n        require(excludedFromFees[_account], \"Account is already included in fee\");\r\n        excludedFromFees[_account] = false;\r\n    }\r\n\r\n    function excludeFromRewards(address _account) public onlyOwner() {\r\n        require(!excludedFromRewards[_account], \"Account is already excluded from reward\");\r\n\r\n        if (rewards[_account] > 0) {\r\n            actual[_account] = tokenWithRewards(rewards[_account]);\r\n        }\r\n\r\n        excludedFromRewards[_account] = true;\r\n        rewardExcluded.push(_account);\r\n    }\r\n\r\n    function includeInRewards(address _account) public onlyOwner() {\r\n        require(excludedFromRewards[_account], \"Account is already included in rewards\");\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewardExcluded[i] == _account) {\r\n                rewardExcluded[i] = rewardExcluded[rewardExcluded.length - 1];\r\n                actual[_account] = 0;\r\n                excludedFromRewards[_account] = false;\r\n                rewardExcluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 currentTaxPercentage = taxPercentage;\r\n        if (excludedFromFees[_sender] || excludedFromFees[_recipient]) {\r\n            taxPercentage = 0;\r\n        } else {\r\n            uint256 fee = _getFee(_amount);\r\n            uint256 marketingFee = _getMarketingFee(fee);\r\n            uint256 lpFee = _getLpFee(fee);\r\n\r\n            _updateMarketingFee(marketingFee);\r\n            _updateLpFee(lpFee);\r\n            \r\n        }\r\n\r\n        if (excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithoutSenderRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithRecipientRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        } else if (excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithoutRewards(_sender, _recipient, _amount);\r\n        } else {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        }\r\n\r\n        if (currentTaxPercentage != taxPercentage) {\r\n            taxPercentage = currentTaxPercentage;\r\n        }\r\n    }\r\n\r\n    function _transferWithRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithRecipientRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutSenderRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _updateHolderFee(uint256 _rewardFee, uint256 _actualFee) private {\r\n        rewardsTotal = rewardsTotal.sub(_rewardFee);\r\n        holderFeeTotal = holderFeeTotal.add(_actualFee);\r\n    }\r\n\r\n    function _updateMarketingFee(uint256 _marketingFee) private {\r\n        if (marketingAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardMarketingFee = _marketingFee.mul(rewardsRate);\r\n        marketingFeeTotal = marketingFeeTotal.add(_marketingFee);\r\n\r\n        rewards[marketingAddress] = rewards[marketingAddress].add(rewardMarketingFee);\r\n        if (excludedFromRewards[marketingAddress]) {\r\n            actual[marketingAddress] = actual[marketingAddress].add(_marketingFee);\r\n        }\r\n    }\r\n\r\n    function _updateLpFee(uint256 _lpFee) private {\r\n        if (lpStakingAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardLpFee = _lpFee.mul(rewardsRate);\r\n        lpFeeTotal = lpFeeTotal.add(_lpFee);\r\n\r\n        rewards[lpStakingAddress] = rewards[lpStakingAddress].add(rewardLpFee);\r\n        if (excludedFromRewards[lpStakingAddress]) {\r\n            actual[lpStakingAddress] = actual[lpStakingAddress].add(_lpFee);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function rewardsFromToken(uint256 _actualAmount, bool _deductTransferFee) public view returns (uint256) {\r\n        require(_actualAmount <= ACTUAL_TOTAL, \"Amount must be less than supply\");\r\n        if (!_deductTransferFee) {\r\n            (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n            return rewardAmount;\r\n        } else {\r\n            (, uint256 rewardTransferAmount, , , ) = _getValues(_actualAmount);\r\n            return rewardTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenWithRewards(uint256 _rewardAmount) public view returns (uint256) {\r\n        require(_rewardAmount <= rewardsTotal, \"Amount must be less than total rewards\");\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        return _rewardAmount.div(rewardsRate);\r\n    }\r\n\r\n    function _getValues(uint256 _actualAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 actualTransferAmount, uint256 actualFee) = _getActualValues(_actualAmount);\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee\r\n        ) = _getRewardValues(_actualAmount, actualFee, rewardsRate);\r\n\r\n        return (rewardAmount, rewardTransferAmount, rewardFee, actualTransferAmount, actualFee);\r\n    }\r\n\r\n    function _getActualValues(uint256 _actualAmount) private view returns (uint256, uint256) {\r\n        uint256 actualFee = _getFee(_actualAmount);\r\n        uint256 actualHolderFee = _getHolderFee(actualFee);\r\n        uint256 actualTransferAmount = _actualAmount.sub(actualFee);\r\n        return (actualTransferAmount, actualHolderFee);\r\n    }\r\n\r\n    function _getRewardValues(\r\n        uint256 _actualAmount,\r\n        uint256 _actualHolderFee,\r\n        uint256 _rewardsRate\r\n    )\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 actualFee = _getFee(_actualAmount).mul(_rewardsRate);\r\n        uint256 rewardAmount = _actualAmount.mul(_rewardsRate);\r\n        uint256 rewardTransferAmount = rewardAmount.sub(actualFee);\r\n        uint256 rewardFee = _actualHolderFee.mul(_rewardsRate);\r\n        return (rewardAmount, rewardTransferAmount, rewardFee);\r\n    }\r\n\r\n    function _getRewardsRate() private view returns (uint256) {\r\n        (uint256 rewardsSupply, uint256 actualSupply) = _getCurrentSupply();\r\n        return rewardsSupply.div(actualSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rewardsSupply = rewardsTotal;\r\n        uint256 actualSupply = ACTUAL_TOTAL;\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewards[rewardExcluded[i]] > rewardsSupply || actual[rewardExcluded[i]] > actualSupply) {\r\n                return (rewardsTotal, ACTUAL_TOTAL);\r\n            }\r\n\r\n            rewardsSupply = rewardsSupply.sub(rewards[rewardExcluded[i]]);\r\n            actualSupply = actualSupply.sub(actual[rewardExcluded[i]]);\r\n        }\r\n\r\n        if (rewardsSupply < rewardsTotal.div(ACTUAL_TOTAL)) {\r\n            return (rewardsTotal, ACTUAL_TOTAL);\r\n        }\r\n\r\n        return (rewardsSupply, actualSupply);\r\n    }\r\n\r\n    function _getFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(taxPercentage).div(100);\r\n    }\r\n\r\n    function _getHolderFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(holderTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getMarketingFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(marketingTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getLpFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(lpTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n\r\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\r\n        require(_taxPercentage >= 1 && _taxPercentage <= 10, \"Value is outside of range 1-10\");\r\n        taxPercentage = _taxPercentage;\r\n    }\r\n\r\n    function setTaxAllocations(\r\n        uint256 _holderTaxAlloc,\r\n        uint256 _marketingTaxAlloc,\r\n        uint256 _lpTaxAlloc\r\n        \r\n    ) external onlyOwner {\r\n        totalTaxAlloc = _holderTaxAlloc.add(_marketingTaxAlloc).add(_lpTaxAlloc);\r\n\r\n        require(_holderTaxAlloc >= 5 && _holderTaxAlloc <= 10, \"_holderTaxAlloc is outside of range 5-10\");\r\n        require(_lpTaxAlloc >= 5 && _lpTaxAlloc <= 10, \"_lpTaxAlloc is outside of range 5-10\");\r\n       \r\n\r\n        holderTaxAlloc = _holderTaxAlloc;\r\n        marketingTaxAlloc = _marketingTaxAlloc;\r\n        lpTaxAlloc = _lpTaxAlloc;\r\n        \r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    function setLpStakingAddress(address _lpStakingAddress) external onlyOwner {\r\n        lpStakingAddress = _lpStakingAddress;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deductTransferFee\",\"type\":\"bool\"}],\"name\":\"rewardsFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStakingAddress\",\"type\":\"address\"}],\"name\":\"setLpStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holderTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTaxAlloc\",\"type\":\"uint256\"}],\"name\":\"setTaxAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"tokenWithRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Panzerprotocol","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008650501ba870b8df5353c21a6a62953a8ff5ea91","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://570c4252a59e23995950ead8b639aa6a16bec506caa031f3c5fcbe274581fb79"}]}