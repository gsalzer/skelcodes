{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (c) 2018-2020 double jump.tokyo inc.\r\npragma solidity 0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"role already has the account\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"role dosen't have the account\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\nlibrary Uint96 {\r\n\r\n    function cast(uint256 a) public pure returns (uint96) {\r\n        require(a < 2**96);\r\n        return uint96(a);\r\n    }\r\n\r\n    function add(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        require(a >= b, \"subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint96 c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        require(b != 0, \"division by 0\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint96 a, uint96 b) internal pure returns (uint96) {\r\n        require(b != 0, \"modulo by 0\");\r\n        return a % b;\r\n    }\r\n\r\n    function toString(uint96 a) internal pure returns (string memory) {\r\n        bytes32 retBytes32;\r\n        uint96 len = 0;\r\n        if (a == 0) {\r\n            retBytes32 = \"0\";\r\n            len++;\r\n        } else {\r\n            uint96 value = a;\r\n            while (value > 0) {\r\n                retBytes32 = bytes32(uint256(retBytes32) / (2 ** 8));\r\n                retBytes32 |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\r\n                value /= 10;\r\n                len++;\r\n            }\r\n        }\r\n\r\n        bytes memory ret = new bytes(len);\r\n        uint96 i;\r\n\r\n        for (i = 0; i < len; i++) {\r\n            ret[i] = retBytes32[i];\r\n        }\r\n        return string(ret);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Optionals {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ncontract Operatable {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n    Roles.Role private operators;\r\n\r\n    constructor() {\r\n        operators.add(msg.sender);\r\n        _paused = false;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Must be operator\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return operators.has(account);\r\n    }\r\n\r\n    function addOperator(address account) public onlyOperator() {\r\n        operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOperator() {\r\n        operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function pause() public onlyOperator() whenNotPaused() {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOperator() whenPaused() {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function withdrawEther() public onlyOperator() {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\ncontract MCHCMine is Operatable {\r\n    using Uint96 for uint96;\r\n\r\n    event Claim(address indexed owner, uint96 value);\r\n    event Value(address indexed owner, uint96 value);\r\n\r\n    struct Balance {\r\n        address recipient;\r\n        uint96 value;\r\n    }\r\n\r\n    IERC20 public token;\r\n    address public validator;\r\n    mapping(address => uint96) public claimed;\r\n\r\n    constructor(IERC20 _token, address _validator) {\r\n        token = _token;\r\n        validator = _validator;\r\n    }\r\n\r\n    function claim(Balance memory _balance, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\r\n        require(ecrecover(toEthSignedMessageHash(prepareMessage(_balance)), v, r, s) == validator, \"Mine: invalid claim signature\");\r\n        require(_balance.recipient == msg.sender, \"Mine: receipient must be sender\");\r\n        \r\n        address recipient = _balance.recipient;\r\n        uint96 toClaim = _balance.value.sub(claimed[recipient]);\r\n        require(toClaim > 0, \"Mine: nothing to claim\");\r\n        claimed[recipient] = _balance.value;\r\n        require(token.transfer(msg.sender, toClaim), \"Mine: mint is not successful\");\r\n        emit Claim(recipient, toClaim);\r\n        emit Value(recipient, claimed[recipient]);\r\n    }\r\n\r\n    function doOverride(Balance[] memory _balances) external onlyOperator {\r\n        for (uint i = 0; i < _balances.length; i++) {\r\n            claimed[_balances[i].recipient] = _balances[i].value;\r\n            emit Value(_balances[i].recipient, _balances[i].value);\r\n        }\r\n    }\r\n\r\n    function prepareMessage(Balance memory _balance) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(_balance));\r\n    }\r\n    \r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    function withdraw() external onlyOperator {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"Value\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct MCHCMine.Balance\",\"name\":\"_balance\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct MCHCMine.Balance[]\",\"name\":\"_balances\",\"type\":\"tuple[]\"}],\"name\":\"doOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MCHCMine","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c376aba6c1d4a9ca85afdd50f95b17791532529300000000000000000000000035c5fd312ef06b88ae7d2f9928dbebf486d0784d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91cdd0c59fe079fe94cd8e8c26839dc8f31193fd483fd84f55afbe907e73c06a"}]}