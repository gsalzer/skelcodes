{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract TokenSale is Owned{\r\n    IERC20Token public tokenContract;  // the token being sold\r\n    uint256 public price = 875;              // 1eth = 87.5 tokens\r\n    uint256 public decimals = 18;\r\n    \r\n    uint256 public tokensSold;\r\n    uint256 public ethRaised;\r\n    uint256 public MaxETHAmount;\r\n    \r\n    bool public PresaleStarted = false;\r\n    \r\n    address[] internal buyers;\r\n    mapping (address => uint256) public _balances;\r\n\r\n    event Sold(address buyer, uint256 amount);\r\n    event DistributedTokens(uint256 tokensSold);\r\n\r\n    constructor(IERC20Token _tokenContract, uint256 _maxEthAmount) {\r\n        owner = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        MaxETHAmount = _maxEthAmount;\r\n    }\r\n    \r\n    fallback() external payable {\r\n        buyTokensWithETH(msg.sender);\r\n    }\r\n    \r\n    receive() external payable{ buyTokensWithETH(msg.sender); }\r\n\r\n    // Guards against integer overflows\r\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    \r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    \r\n    function setPrice(uint256 price_) external onlyOwner{\r\n        price = price_;\r\n    }\r\n    \r\n    function isBuyer(address _address)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        for (uint256 s = 0; s < buyers.length; s += 1) {\r\n            if (_address == buyers[s]) return (true);\r\n        }\r\n        return (false);\r\n    }\r\n\r\n    function addbuyer(address _buyer, uint256 _amount) internal {\r\n        bool _isbuyer = isBuyer(_buyer);\r\n        if (!_isbuyer) buyers.push(_buyer);\r\n        \r\n        _balances[_buyer] = add(_balances[_buyer], _amount);\r\n    }\r\n    \r\n    function togglePresale() public onlyOwner{\r\n        PresaleStarted = !PresaleStarted;\r\n    }\r\n    \r\n    function changeToken(IERC20Token newToken) external onlyOwner{\r\n        tokenContract = newToken;\r\n    }\r\n\r\n\r\n    function buyTokensWithETH(address _receiver) public payable {\r\n        require(PresaleStarted, \"Presale not started yet!\");\r\n        require(ethRaised < MaxETHAmount, \"Presale finished\");\r\n        uint _amount = msg.value;\r\n        require(ethRaised+_amount <= MaxETHAmount, \"Remaining Limit not Enough\");\r\n        require(_receiver != address(0), \"Can't send to 0x00 address\"); \r\n        require(_amount > 0, \"Can't buy with 0 eth\"); \r\n        \r\n        require(owner.send(_amount), \"Unable to transfer eth to owner\");\r\n        ethRaised += _amount;\r\n        \r\n        addbuyer(msg.sender, _amount);\r\n        \r\n    }\r\n    \r\n    function airDrop() public onlyOwner{\r\n        require(multiply(ethRaised, div(price, 10)) <= tokenContract.balanceOf(address(this)), 'Error: Contract dont have Enough tokens');\r\n        for (uint256 s = 0; s < buyers.length; s += 1) {\r\n            uint256 gBalance = _balances[buyers[s]];\r\n            \r\n            if(gBalance > 0) {\r\n                _balances[buyers[s]] = 0;\r\n                \r\n                uint tokensToBuy = multiply(div(gBalance, 10), (price));\r\n                require(tokenContract.transfer( buyers[s], tokensToBuy), \"Unable to transfer token to user\");\r\n                \r\n                tokensSold += tokensToBuy;\r\n                \r\n                emit Sold(msg.sender, tokensToBuy);\r\n            }\r\n        }\r\n        \r\n        ethRaised = 0;\r\n        emit DistributedTokens(tokensSold);\r\n    }\r\n    \r\n\r\n    function endSale() public {\r\n        require(msg.sender == owner);\r\n\r\n        // Send unsold tokens to the owner.\r\n        require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))));\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEthAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"DistributedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MaxETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyTokensWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenSale","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4d82f81221f4c9c0f9010a25e4e508bcb6adff1000000000000000000000000000000000000000000000015af1d78b58c400000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b2899c72aa902cad1d9f845d6c208411c6e11deac479e0e225407019d1701cc"}]}