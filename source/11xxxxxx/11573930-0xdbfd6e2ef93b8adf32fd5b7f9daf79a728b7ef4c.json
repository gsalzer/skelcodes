{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* Interface for ERC20 Tokens */\r\ncontract Token {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n/* Interface for pTokens contract */\r\ncontract pToken {\r\n    function redeem(uint256 _value, string memory _btcAddress) public returns (bool _success);\r\n}\r\n\r\ninterface IAMB {\r\n    function messageSender() external view returns (address);\r\n    function maxGasPerTx() external view returns (uint256);\r\n    function transactionHash() external view returns (bytes32);\r\n    function messageId() external view returns (bytes32);\r\n    function messageSourceChainId() external view returns (bytes32);\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\r\n    function requireToPassMessage(address _contract, bytes _data, uint256 _gas) external returns (bytes32);\r\n    function requireToConfirmMessage(address _contract, bytes _data, uint256 _gas) external returns (bytes32);\r\n    function sourceChainId() external view returns (uint256);\r\n    function destinationChainId() external view returns (uint256);\r\n}\r\n\r\ninterface DMEXXDAI {\r\n    function depositTokenForUser(address token, uint128 amount, address user);\r\n}\r\n\r\n// The DMEX base Contract\r\ncontract DMEX_Base {\r\n    function assert(bool assertion) {\r\n        if (!assertion) throw;\r\n    }\r\n\r\n    // Safe Multiply Function - prevents integer overflow \r\n    function safeMul(uint a, uint b) returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    // Safe Subtraction Function - prevents integer overflow \r\n    function safeSub(uint a, uint b) returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    // Safe Addition Function - prevents integer overflow \r\n    function safeAdd(uint a, uint b) returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    address public owner; // holds the address of the contract owner\r\n    mapping (address => bool) public admins; // mapping of admin addresses\r\n    address public AMBBridgeContract;\r\n    address public DMEX_XDAI_CONTRACT;\r\n\r\n    // Event fired when the owner of the contract is changed\r\n    event SetOwner(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Allows only the owner of the contract to execute the function\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Changes the owner of the contract\r\n    function setOwner(address newOwner) onlyOwner {\r\n        SetOwner(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Owner getter function\r\n    function getOwner() returns (address out) {\r\n        return owner;\r\n    }\r\n\r\n    // Adds or disables an admin account\r\n    function setAdmin(address admin, bool isAdmin) onlyOwner {\r\n        admins[admin] = isAdmin;\r\n    }\r\n\r\n\r\n    // Allows for admins only to call the function\r\n    modifier onlyAdmin {\r\n        if (msg.sender != owner && !admins[msg.sender]) throw;\r\n        _;\r\n    }\r\n\r\n\r\n    // Allows for AMB Bridge only to call the function\r\n    modifier onlyAMBBridge {\r\n        if (msg.sender != AMBBridgeContract) throw;\r\n        _;\r\n    }\r\n\r\n    function() external {\r\n        throw;\r\n    }\r\n\r\n    address public gasFeeAccount; // the account that receives the trading fees\r\n\r\n    uint256 public inactivityReleasePeriod; // period in blocks before a user can use the withdraw() function\r\n    mapping (bytes32 => bool) public withdrawn; // mapping of withdraw requests, makes sure the same withdrawal is not executed twice\r\n\r\n    bool public destroyed = false; // contract is destoryed\r\n    uint256 public destroyDelay = 1000000; // number of blocks after destroy contract still active (aprox 6 monthds)\r\n    uint256 public destroyBlock;\r\n\r\n    // Deposit event fired when a deposit takes place\r\n    event Deposit(address indexed token, address indexed user, uint256 amount, bytes32 msgId);\r\n\r\n    // Withdraw event fired when a withdrawal id executed\r\n    event Withdraw(address indexed token, address indexed user, uint256 amount, bytes32 msgId);\r\n    \r\n    // pTokenRedeemEvent event fired when a pToken withdrawal is executed\r\n    event pTokenRedeemEvent(address indexed token, address indexed user, uint256 amount, string destinationAddress);\r\n\r\n    // Change inactivity release period event\r\n    event InactivityReleasePeriodChange(uint256 value);\r\n\r\n    // Fee account changed event\r\n    event FeeAccountChanged(address indexed newFeeAccount);\r\n\r\n    // Sets the inactivity period before a user can withdraw funds manually\r\n    function setInactivityReleasePeriod(uint256 expiry) onlyOwner returns (bool success) {\r\n        if (expiry > 1000000) throw;\r\n        inactivityReleasePeriod = expiry;\r\n\r\n        emit InactivityReleasePeriodChange(expiry);\r\n        return true;\r\n    }\r\n\r\n    // Change fee account\r\n    function changeFeeAccount (address feeAccount_) onlyOwner {\r\n        gasFeeAccount = feeAccount_;\r\n        emit FeeAccountChanged(feeAccount_);\r\n    }\r\n\r\n    // Constructor function, initializes the contract and sets the core variables\r\n    function DMEX_Base(address feeAccount_, uint256 inactivityReleasePeriod_, address AMBBridgeContract_, address DMEX_XDAI_CONTRACT_) {\r\n        owner = msg.sender;\r\n        gasFeeAccount = feeAccount_;\r\n        inactivityReleasePeriod = inactivityReleasePeriod_;\r\n        AMBBridgeContract = AMBBridgeContract_;\r\n        DMEX_XDAI_CONTRACT = DMEX_XDAI_CONTRACT_;\r\n    }\r\n\r\n    // Sets the inactivity period before a user can withdraw funds manually\r\n    function destroyContract() onlyOwner returns (bool success) {\r\n        if (destroyed) throw;\r\n        destroyBlock = block.number;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Returns the inactivity release perios\r\n    function getInactivityReleasePeriod() view returns (uint256)\r\n    {\r\n        return inactivityReleasePeriod;\r\n    }\r\n\r\n\r\n\r\n    // Deposit ETH to contract\r\n    function deposit() payable {\r\n        if (destroyed) revert();\r\n        \r\n        sendDepositInstructionToAMBBridge(msg.sender, address(0), msg.value);\r\n    }\r\n\r\n\r\n\r\n    // Deposit token to contract\r\n    function depositToken(address token, uint128 amount) {\r\n        if (destroyed) revert();\r\n\r\n        sendDepositInstructionToAMBBridge(msg.sender, token, amount);\r\n    }\r\n\r\n\r\n    function pTokenRedeem(address token, uint256 amount, string destinationAddress) onlyAMBBridge returns (bool success) {\r\n        \r\n        // if (availableBalanceOf(token, msg.sender) < amount) revert();\r\n\r\n        // subBalance(token, msg.sender, amount); // subtracts the withdrawal amount from user balance\r\n\r\n        if (!pToken(token).redeem(amount, destinationAddress)) revert();\r\n        emit pTokenRedeemEvent(token, msg.sender, amount, destinationAddress);\r\n    }\r\n\r\n\r\n    function sendDepositInstructionToAMBBridge(address user, address token, uint256 amount) internal\r\n    {\r\n        bytes4 methodSelector = DMEXXDAI(DMEX_XDAI_CONTRACT).depositTokenForUser.selector;\r\n        bytes memory data = abi.encodeWithSelector(methodSelector, token, amount, user);\r\n\r\n        uint256 gas = 3000000;\r\n\r\n        // send AMB bridge instruction\r\n        bytes32 msgId = IAMB(AMBBridgeContract).requireToPassMessage(DMEX_XDAI_CONTRACT, data, gas);\r\n\r\n        emit Deposit(token, user, amount, msgId); // fires the deposit event\r\n    }    \r\n \r\n\r\n\r\n    // Withdrawal function used by the server to execute withdrawals\r\n    function withdrawForUser(\r\n        address token, // the address of the token to be withdrawn\r\n        uint256 amount, // the amount to be withdrawn\r\n        address user // address of the user\r\n    ) onlyAMBBridge returns (bool success) {\r\n        bytes32 msgId = IAMB(AMBBridgeContract).messageId();\r\n        if (withdrawn[msgId]) throw; // checks if the withdrawal was already executed, if true, throws an error\r\n        withdrawn[msgId] = true; // sets the withdrawal as executed\r\n\r\n        if (token == address(0)) { // checks if the withdrawal is in ETH or Tokens\r\n            if (!user.send(amount)) throw; // sends ETH\r\n        } else {\r\n            if (!Token(token).transfer(user, amount)) throw; // sends tokens\r\n        }\r\n        emit Withdraw(token, user, amount, msgId); // fires the withdraw event\r\n    }\r\n\r\n\r\n    function releaseFundsAfterDestroy(address token, uint256 amount) onlyOwner returns (bool success) {\r\n        if (!destroyed) throw;\r\n        if (safeAdd(destroyBlock, destroyDelay) > block.number) throw; // destroy delay not yet passed\r\n\r\n        if (token == address(0)) { // checks if withdrawal is a token or ETH, ETH has address 0x00000... \r\n            if (!msg.sender.send(amount)) throw; // send ETH\r\n        } else {\r\n            if (!Token(token).transfer(msg.sender, amount)) throw; // Send token\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawForUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assertion\",\"type\":\"bool\"}],\"name\":\"assert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMBBridgeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasFeeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"destinationAddress\",\"type\":\"string\"}],\"name\":\"pTokenRedeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"out\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DMEX_XDAI_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInactivityReleasePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseFundsAfterDestroy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destroyDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"setInactivityReleasePeriod\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inactivityReleasePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"inactivityReleasePeriod_\",\"type\":\"uint256\"},{\"name\":\"AMBBridgeContract_\",\"type\":\"address\"},{\"name\":\"DMEX_XDAI_CONTRACT_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"msgId\",\"type\":\"bytes32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"msgId\",\"type\":\"bytes32\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destinationAddress\",\"type\":\"string\"}],\"name\":\"pTokenRedeemEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InactivityReleasePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newFeeAccount\",\"type\":\"address\"}],\"name\":\"FeeAccountChanged\",\"type\":\"event\"}]","ContractName":"DMEX_Base","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4fb07efa6ff433b61aa331a7dcc7886ff51466c00000000000000000000000000000000000000000000000000000000000805200000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e000000000000000000000000d3d1a219796b1adb2798082f08f641bb4a25bc5a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://07d5ae53c1a5028f739964a8bb261b984c79158ad171f2760ce001861e28e142"}]}