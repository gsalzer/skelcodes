{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.0;\r\n\r\n/**\r\n * @title IERC1404 - Simple Restricted Token Standard \r\n * @dev https://github.com/ethereum/eips/issues/1404\r\n */\r\ninterface IERC1404 {\r\n    // Implementation of all the restriction of transfer and returns error code\r\n    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\r\n    // Returns error message off error code\r\n    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\r\n}\r\n    \r\n    \r\n/**\r\n * @title IERC1404Checks \r\n * @dev Interface for all the checks for Restricted Transfer Contract \r\n */\r\ninterface IERC1404Checks {\r\n    // Check if the transfer is paused or not.\r\n    function paused () external view returns (bool);\r\n    // Check if sender and receiver waller is whitelisted\r\n    function checkWhitelists (address from, address to) external view returns (bool);\r\n    // Check if the sender wallet is locked\r\n    function isLocked(address wallet) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n    address private _newOwner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    // Throws if called by any account other than the owner\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // True if `msg.sender` is the owner of the contract.\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    // Allows the current owner to relinquish control of the contract.\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    // Propose the new Owner of the smart contract \r\n    function proposeOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n    \r\n    // Accept the ownership of the smart contract as a new Owner\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Ownable: caller is not the new owner\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title RestrictedMessages\r\n * @dev All the messages and code of transfer restriction\r\n */ \r\ncontract RestrictedMessages {\r\n    \r\n    uint8 internal constant SUCCESS = 0;\r\n    uint8 internal constant PAUSED_FAILURE = 1;\r\n    uint8 internal constant WHITELIST_FAILURE = 2;\r\n    uint8 internal constant TIMELOCK_FAILURE = 3;\r\n    \r\n    string internal constant SUCCESS_MSG = \"SUCCESS\";\r\n    string internal constant PAUSED_FAILURE_MSG = \"ERROR: All transfer is paused now\";\r\n    string internal constant WHITELIST_FAILURE_MSG = \"ERROR: Wallet is not whitelisted\";\r\n    string internal constant TIMELOCK_FAILURE_MSG = \"ERROR: Wallet is locked\";\r\n    string internal constant UNKNOWN = \"ERROR: Unknown\";\r\n}\r\n\r\n\r\n/**\r\n * @title ERC1404\r\n * @dev Simple Restricted Token Standard  \r\n */ \r\ncontract ERC1404 is IERC1404, RestrictedMessages, Ownable {\r\n    \r\n    // Checkers contract address, basically RVW token contract address\r\n    IERC1404Checks public checker;\r\n\r\n    event UpdatedChecker(IERC1404Checks indexed _checker);\r\n    \r\n    // Update the token contract address\r\n    function updateChecker(IERC1404Checks _checker) public onlyOwner{\r\n        require(_checker != IERC1404Checks(0), \"ERC1404: Address should not be zero.\");\r\n        checker = _checker;\r\n        emit UpdatedChecker(_checker);\r\n    }\r\n    \r\n    // All checks of transfer function\r\n    // If contract paused, sender wallet locked and wallet not whitelisted then return error code else success\r\n    // Note, Now there is no use of amount for restriction, but might be in the future\r\n    function detectTransferRestriction (address from, address to, uint256 amount) public override view returns (uint8) {\r\n        if(checker.paused()){ \r\n            return PAUSED_FAILURE; \r\n        }\r\n        if(!checker.checkWhitelists(from, to)){ \r\n            return WHITELIST_FAILURE;\r\n        }\r\n        if(checker.isLocked(from)){ \r\n            return TIMELOCK_FAILURE;\r\n        }\r\n        return SUCCESS;\r\n    }\r\n    \r\n    // Return the error message of error code\r\n    function messageForTransferRestriction (uint8 code) public override pure returns (string memory){\r\n        if (code == SUCCESS) {\r\n            return SUCCESS_MSG;\r\n        }\r\n        if (code == PAUSED_FAILURE) {\r\n            return PAUSED_FAILURE_MSG;\r\n        }\r\n        if (code == WHITELIST_FAILURE) {\r\n            return WHITELIST_FAILURE_MSG;\r\n        }\r\n        if (code == TIMELOCK_FAILURE) {\r\n            return TIMELOCK_FAILURE_MSG;\r\n        }\r\n        return UNKNOWN;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC1404Checks\",\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"UpdatedChecker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"contract IERC1404Checks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1404Checks\",\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"updateChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC1404","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9841dcb9dd0ec4a3795256766ab4c58795062b2a511fbec1ebcc9e7050cf1043"}]}