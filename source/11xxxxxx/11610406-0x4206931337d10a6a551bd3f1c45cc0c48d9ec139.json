{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address \\r\\n{\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Permit.sol\\\";\\r\\n\\r\\nabstract contract ERC20 is IERC20, IERC20Permit\\r\\n{\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n    uint8 public immutable override decimals;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n    mapping (address =\\u003e uint256) public override balanceOf;\\r\\n    mapping (address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\r\\n    mapping (address =\\u003e uint256) public override nonces;\\r\\n\\r\\n    bytes32 private immutable cachedDomainSeparator;\\r\\n    uint256 private immutable cachedChainId = block.chainid;\\r\\n    bytes32 private constant permitTypeHash = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 private constant eip712DomainHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n    bytes32 private constant versionDomainHash = keccak256(bytes(\\\"1\\\"));\\r\\n    bytes32 private immutable nameDomainHash;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals)\\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n\\r\\n        bytes32 _nameDomainHash = keccak256(bytes(_name));\\r\\n        nameDomainHash = _nameDomainHash;\\r\\n        cachedDomainSeparator = keccak256(abi.encode(\\r\\n            eip712DomainHash,\\r\\n            _nameDomainHash,\\r\\n            versionDomainHash,\\r\\n            block.chainid,\\r\\n            address(this)));\\r\\n    }\\r\\n\\r\\n    function approveCore(address _owner, address _spender, uint256 _amount) internal virtual returns (bool)\\r\\n    {\\r\\n        allowance[_owner][_spender] = _amount;\\r\\n        emit Approval(_owner, _spender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) public virtual override returns (bool)\\r\\n    {\\r\\n        return approveCore(msg.sender, _spender, _amount);\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address _spender, uint256 _toAdd) public virtual override returns (bool)\\r\\n    {\\r\\n        return approve(_spender, allowance[msg.sender][_spender] + _toAdd);\\r\\n    }\\r\\n    \\r\\n    function decreaseAllowance(address _spender, uint256 _toRemove) public virtual override returns (bool)\\r\\n    {\\r\\n        return approve(_spender, allowance[msg.sender][_spender] - _toRemove);\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _amount) public virtual override returns (bool)\\r\\n    {\\r\\n        return transferCore(msg.sender, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _amount) public virtual override returns (bool)\\r\\n    {\\r\\n        uint256 oldAllowance = allowance[_from][msg.sender];\\r\\n        require (oldAllowance \\u003e= _amount, \\\"Insufficient allowance\\\");\\r\\n        if (oldAllowance != type(uint256).max) {\\r\\n            allowance[_from][msg.sender] = oldAllowance - _amount;\\r\\n        }\\r\\n        return transferCore(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function transferCore(address _from, address _to, uint256 _amount) internal virtual returns (bool)\\r\\n    {\\r\\n        require (_from != address(0));\\r\\n        if (_to == address(0)) {\\r\\n            burnCore(_from, _amount);\\r\\n            return true;\\r\\n        }\\r\\n        uint256 oldBalance = balanceOf[_from];\\r\\n        require (oldBalance \\u003e= _amount, \\\"Insufficient balance\\\");\\r\\n        balanceOf[_from] = oldBalance - _amount;\\r\\n        balanceOf[_to] += _amount;\\r\\n        emit Transfer(_from, _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintCore(address _to, uint256 _amount) internal virtual\\r\\n    {\\r\\n        require (_to != address(0));\\r\\n\\r\\n        totalSupply += _amount;\\r\\n        balanceOf[_to] += _amount;\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n    }\\r\\n\\r\\n    function burnCore(address _from, uint256 _amount) internal virtual\\r\\n    {\\r\\n        uint256 oldBalance = balanceOf[_from];\\r\\n        require (oldBalance \\u003e= _amount, \\\"Insufficient balance\\\");\\r\\n        balanceOf[_from] = oldBalance - _amount;\\r\\n        totalSupply -= _amount;\\r\\n        emit Transfer(_from, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount) public override\\r\\n    {\\r\\n        burnCore(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function DOMAIN_SEPARATOR() public override view returns (bytes32) \\r\\n    {\\r\\n        if (block.chainid == cachedChainId) {\\r\\n            return cachedDomainSeparator;\\r\\n        }\\r\\n        return keccak256(abi.encode(\\r\\n            eip712DomainHash,\\r\\n            nameDomainHash,\\r\\n            versionDomainHash,\\r\\n            block.chainid,\\r\\n            address(this)));\\r\\n    }\\r\\n\\r\\n    function getSigningHash(bytes32 _dataHash) internal view returns (bytes32) \\r\\n    {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), _dataHash));\\r\\n    }\\r\\n\\r\\n    function permit(address _owner, address _spender, uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) public virtual override\\r\\n    {\\r\\n        require (block.timestamp \\u003c= _deadline, \\\"Deadline expired\\\");\\r\\n\\r\\n        uint256 nonce = nonces[_owner];\\r\\n        bytes32 hash = getSigningHash(keccak256(abi.encode(permitTypeHash, _owner, _spender, _amount, nonce, _deadline)));\\r\\n        address signer = ecrecover(hash, _v, _r, _s);\\r\\n        require (signer == _owner \\u0026\\u0026 signer != address(0), \\\"Invalid signature\\\");\\r\\n        nonces[_owner] = nonce + 1;\\r\\n        approveCore(_owner, _spender, _amount);\\r\\n    }\\r\\n}\"},\"IDogey.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\n\\r\\ninterface IDogey\\r\\n{\\r\\n    event Dogeification(IERC20 indexed doge, bool isDogey);\\r\\n\\r\\n    function doge(uint256 _index) external view returns (IERC20);\\r\\n    function isDogey(IERC20 _doge) external view returns (bool);\\r\\n    function dogeCount() external view returns (uint256);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20\\r\\n{\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function nonces(address _owner) external view returns (uint256);\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\r\\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\\r\\n    function increaseAllowance(address _spender, uint256 _toAdd) external returns (bool);\\r\\n    function decreaseAllowance(address _spender, uint256 _toRemove) external returns (bool);\\r\\n    function burn(uint256 _amount) external;\\r\\n}\"},\"IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Permit is IERC20\\r\\n{\\r\\n    function permit(address _owner, address _spender, uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external;\\r\\n}\"},\"IMegadoge.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../IERC20Permit.sol\\\";\\r\\n\\r\\ninterface IMegadoge\\r\\n{\\r\\n    function create(IERC20 _doge, uint256 _megadogeAmount) external;\\r\\n    function createFromManyDoges(IERC20[] calldata _doges, uint256[] calldata _amounts) external;\\r\\n    function createWithPermit(IERC20Permit _doge, uint256 _megadogeAmount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external;\\r\\n}\"},\"ISafelyOwned.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ISafelyOwned\\r\\n{\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n    function claimOwnership() external;\\r\\n    function recoverTokens(IERC20 _token) external;\\r\\n    function recoverETH() external;\\r\\n}\"},\"Megadoge.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IMegadoge.sol\\\";\\r\\nimport \\\"../ERC20.sol\\\";\\r\\nimport \\\"../SafelyOwned.sol\\\";\\r\\nimport \\\"../SafeERC20.sol\\\";\\r\\nimport \\\"./IDogey.sol\\\";\\r\\n\\r\\ncontract Megadoge is ERC20(\\\"Megadoge\\\", \\\"MEGADOGE\\\", 0), SafelyOwned, IMegadoge\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IDogey immutable dogey;\\r\\n\\r\\n    constructor (IDogey _dogey)\\r\\n    {\\r\\n        dogey = _dogey;\\r\\n    }\\r\\n\\r\\n    function dogesNeeded(IERC20 _doge, uint256 _megadogeAmount) private view returns (uint256)\\r\\n    {\\r\\n        return _megadogeAmount * 1000000 * (10 ** _doge.decimals());\\r\\n    }\\r\\n\\r\\n    function create(IERC20 _doge, uint256 _megadogeAmount) public override\\r\\n    {\\r\\n        require (_megadogeAmount \\u003e 0, \\\"Amount is 0\\\");\\r\\n        require (dogey.isDogey(_doge), \\\"Token is not dogey\\\");\\r\\n        _doge.safeTransferFrom(msg.sender, address(this), dogesNeeded(_doge, _megadogeAmount));\\r\\n        mintCore(msg.sender, _megadogeAmount);\\r\\n    }\\r\\n\\r\\n    function createFromManyDoges(IERC20[] calldata _doges, uint256[] calldata _amounts) public override\\r\\n    {\\r\\n        require (_doges.length == _amounts.length, \\\"Bad params\\\");\\r\\n        uint256 len = _doges.length;\\r\\n        uint256 totalDogeE18 = 0;\\r\\n        for (uint256 x=0; x\\u003clen; ++x) {     \\r\\n            IERC20 doge = _doges[x];       \\r\\n            require (dogey.isDogey(doge), \\\"Token is not dogey\\\");\\r\\n            uint8 decimals = doge.decimals();\\r\\n            require (decimals \\u003c= 18, \\\"Doge has too many decimals\\\");\\r\\n            totalDogeE18 += _amounts[x] * (10 ** (18 - decimals));\\r\\n        }\\r\\n        require (totalDogeE18 \\u003e 0, \\\"Amount is 0\\\");\\r\\n        require (totalDogeE18 % (1000000 ether) == 0, \\\"Sum doesn\\u0027t exactly create megadoges\\\");\\r\\n        for (uint256 x=0; x\\u003clen; ++x) {\\r\\n            _doges[x].safeTransferFrom(msg.sender, address(this), _amounts[x]);\\r\\n        }\\r\\n        mintCore(msg.sender, totalDogeE18 / (1000000 ether));\\r\\n    }\\r\\n\\r\\n    function createWithPermit(IERC20Permit _doge, uint256 _megadogeAmount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) public override\\r\\n    {\\r\\n        _doge.permit(msg.sender, address(this), dogesNeeded(_doge, _megadogeAmount), _deadline, _v, _r, _s);\\r\\n        create(_doge, _megadogeAmount);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 \\r\\n{\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafelyOwned.sol\":{\"content\":\"// SPDX-License-Identifier: DOGE WORLD\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ISafelyOwned.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\nabstract contract SafelyOwned is ISafelyOwned\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    address public override owner = msg.sender;\\r\\n    address internal pendingOwner;\\r\\n\\r\\n    modifier ownerOnly()\\r\\n    {\\r\\n        require (msg.sender == owner, \\\"Owner only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _newOwner) public override ownerOnly()\\r\\n    {\\r\\n        pendingOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public override\\r\\n    {\\r\\n        require (pendingOwner == msg.sender);\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnershipTransferred(owner, msg.sender);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function recoverTokens(IERC20 _token) public override ownerOnly() \\r\\n    {\\r\\n        require (canRecoverTokens(_token));\\r\\n        _token.safeTransfer(msg.sender, _token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 _token) internal virtual view returns (bool) \\r\\n    { \\r\\n        return address(_token) != address(this); \\r\\n    }\\r\\n\\r\\n    function recoverETH() public override ownerOnly()\\r\\n    {\\r\\n        require (canRecoverETH());\\r\\n        (bool success,) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\r\\n        require (success, \\\"Transfer fail\\\");\\r\\n    }\\r\\n\\r\\n    function canRecoverETH() internal virtual view returns (bool) \\r\\n    {\\r\\n        return true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IDogey\",\"name\":\"_dogey\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_doge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_megadogeAmount\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_doges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"createFromManyDoges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"_doge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_megadogeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toRemove\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toAdd\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Megadoge","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004206931337d62555b19b53ab8a002bb4eeb0f74b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1673676ea575b0b4fd7195e7a8024ee2da7815fe336d4d85446674bb44b4d0f1"}]}