{"status":"1","message":"OK","result":[{"SourceCode":"# (c) 2020 Greenwood\r\n# @title Greenwood Metrics\r\n# @author Greenwood (Attribution: Max Wolff, http://maxcwolff.com/rhoSpec.pdf)\r\n# @notice A swap metric storage contract for the Greenwood protocol\r\n\r\nCONTRACT_PRECISION: constant(decimal) = 0.0000000001\r\n\r\nstruct Metrics:\r\n    swapCollateral: int128\r\n    receiveFixedCollateral: int128\r\n    payFixedCollateral: int128\r\n    swapNotional: int128\r\n    receiveFixedNotional: int128\r\n    payFixedNotional: int128\r\n    receiveFixedCount: int128\r\n    payFixedCount: int128\r\n\r\nadmin: address\r\ngreenwoodContract: address\r\nswapCollateral: decimal\r\nreceiveFixedCollateral: decimal\r\npayFixedCollateral: decimal\r\nswapNotional: decimal\r\nreceiveFixedNotional: decimal\r\npayFixedNotional: decimal\r\nreceiveFixedCount: decimal\r\npayFixedCount: decimal\r\n\r\n@external\r\ndef __init__(\r\n        _admin_addr: address\r\n    ):\r\n    self.admin = _admin_addr\r\n\r\n@external\r\n@view\r\ndef getMetrics() -> Metrics:\r\n\r\n    return Metrics({\r\n        swapCollateral: convert(self.swapCollateral / CONTRACT_PRECISION, int128),\r\n        receiveFixedCollateral: convert(self.receiveFixedCollateral / CONTRACT_PRECISION, int128),\r\n        payFixedCollateral: convert(self.payFixedCollateral / CONTRACT_PRECISION, int128),\r\n        swapNotional: convert(self.swapNotional / CONTRACT_PRECISION, int128),\r\n        receiveFixedNotional: convert(self.receiveFixedNotional / CONTRACT_PRECISION, int128),\r\n        payFixedNotional: convert(self.payFixedNotional / CONTRACT_PRECISION, int128),\r\n        receiveFixedCount: convert(self.receiveFixedCount, int128),\r\n        payFixedCount: convert(self.payFixedCount, int128)\r\n    })\r\n\r\n@external\r\ndef updateMetrics(\r\n        _swap_type: String[4], \r\n        _notional: int128, \r\n        _collateral: int128\r\n    ):\r\n    assert msg.sender == self.greenwoodContract\r\n\r\n    notionalDecimal: decimal = convert(_notional, decimal) * CONTRACT_PRECISION\r\n    collateralDecimal: decimal = convert(_collateral, decimal) * CONTRACT_PRECISION\r\n\r\n    self.swapCollateral += collateralDecimal\r\n    self.swapNotional += notionalDecimal\r\n\r\n    if keccak256(_swap_type) == keccak256(\"pFix\"):\r\n        self.payFixedCollateral += collateralDecimal\r\n        self.payFixedCount += 1.0\r\n        self.payFixedNotional += notionalDecimal\r\n    elif keccak256(_swap_type) == keccak256(\"rFix\"):\r\n        self.receiveFixedCollateral += collateralDecimal\r\n        self.receiveFixedCount += 1.0\r\n        self.receiveFixedNotional += notionalDecimal\r\n\r\n@external\r\ndef setContract(_contract_addr: address):\r\n    assert self.admin == msg.sender\r\n    self.greenwoodContract = _contract_addr","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_admin_addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"getMetrics\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"int128\",\"name\":\"swapCollateral\"},{\"type\":\"int128\",\"name\":\"receiveFixedCollateral\"},{\"type\":\"int128\",\"name\":\"payFixedCollateral\"},{\"type\":\"int128\",\"name\":\"swapNotional\"},{\"type\":\"int128\",\"name\":\"receiveFixedNotional\"},{\"type\":\"int128\",\"name\":\"payFixedNotional\"},{\"type\":\"int128\",\"name\":\"receiveFixedCount\"},{\"type\":\"int128\",\"name\":\"payFixedCount\"}]}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9396},{\"name\":\"updateMetrics\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_swap_type\"},{\"type\":\"int128\",\"name\":\"_notional\"},{\"type\":\"int128\",\"name\":\"_collateral\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":182305},{\"name\":\"setContract\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_contract_addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36307}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.3","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000e3d5260cd7f8a4207f41c3b2ac87882489f97213","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}