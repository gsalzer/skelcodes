{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n\r\nabstract contract IERC20 {\r\n    \r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address tokenOwner) virtual public view returns (uint);\r\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint);\r\n    function transfer(address to, uint tokens) virtual public returns (bool);\r\n    function approve(address spender, uint tokens) virtual public returns (bool);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Buyerlist(address indexed tokenHolder);\r\n    event issueDivi(address indexed tokenHolder,uint256 amount);\r\n    event startSale(uint256 fromtime,uint256 totime,uint256 rate,uint256 supply);\r\n}\r\n\r\n\r\ncontract SafeMath {\r\n    \r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Favcoin is IERC20, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals; \r\n    \r\n    uint256 public _totalSupply;\r\n    uint256 public _circulating_supply;\r\n    uint256 public _sold;\r\n    address public owner;\r\n    address private feecollectaddress=0x222926cA4E89Dc1D6099b98C663efd3b0f60f474;\r\n    bool public isMinting;\r\n    uint256 public RATE;\r\n    uint256 public Start;\r\n    uint256 public End;\r\n    uint256 total;\r\n    address private referaddr=0x0000000000000000000000000000000000000000;\r\n    uint256 private referamt=0;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    constructor() payable public {\r\n        name = \"Favcoin\";\r\n        symbol = \"FAV\";\r\n        decimals = 3;\r\n        owner = msg.sender;\r\n        isMinting = true;\r\n        RATE = 1;\r\n        _totalSupply = 1000000000 * 10 ** uint256(decimals);   // 24 decimals \r\n        balances[msg.sender] = _totalSupply;\r\n        _circulating_supply = 0;\r\n        _sold=0;\r\n        address(uint160(referamt)).transfer(referamt);\r\n        address(uint160(feecollectaddress)).transfer(safeSub(msg.value,referamt));\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"UnAuthorized\");\r\n         _;\r\n     }\r\n    \r\n    /**\r\n     * @dev allowance : Check approved balance\r\n     */\r\n    function allowance(address tokenOwner, address spender) virtual override public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev approve : Approve token for spender\r\n     */ \r\n    function approve(address spender, uint tokens) virtual override public returns (bool success) {\r\n        require(tokens >= 0, \"Invalid value\");\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer : Transfer token to another etherum address\r\n     */ \r\n    function transfer(address to, uint tokens) virtual override public returns (bool success) {\r\n        require(to != address(0), \"Null address\");                                         \r\n        require(tokens > 0, \"Invalid Value\");\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev transferFrom : Transfer token after approval \r\n     */ \r\n    function transferFrom(address from, address to, uint tokens) virtual override public returns (bool success) {\r\n        require(to != address(0), \"Null address\");\r\n        require(from != address(0), \"Null address\");\r\n        require(tokens > 0, \"Invalid value\"); \r\n        require(tokens <= balances[from], \"Insufficient balance\");\r\n        require(tokens <= allowed[from][msg.sender], \"Insufficient allowance\");\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev totalSupply : Display total supply of token\r\n     */ \r\n    function totalSupply() virtual override public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n      function circulatingSupply() virtual public view returns (uint) {\r\n        return _circulating_supply;\r\n    }\r\n    \r\n    \r\n     function sold() virtual public view returns (uint) {\r\n        return _sold;\r\n    }\r\n    /**\r\n     * @dev balanceOf : Displya token balance of given address\r\n     */ \r\n    function balanceOf(address tokenOwner) virtual override public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    \r\n    function buyTokens(uint256 tokens) payable public {\r\n        if(isMinting==true && Start <= block.timestamp && End >= block.timestamp)\r\n        {\r\n             require(msg.value > 0);\r\n             require(_totalSupply >= _sold,\"Token sold\");\r\n             uint256 value = safeMul(tokens,RATE);\r\n             value=safeDiv(value,(10**(decimals)));\r\n             require(msg.value==value);\r\n             require(_circulating_supply >= tokens,\"Circulating supply not enough\");\r\n             address(uint160(owner)).transfer(msg.value);\r\n             _circulating_supply = safeSub(_circulating_supply,tokens);\r\n             _sold=safeAdd(_sold,tokens);\r\n             balances[owner]=safeSub(balances[owner],tokens);\r\n             balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n             if(balances[msg.sender]==tokens){\r\n                  emit Buyerlist(msg.sender);\r\n            }\r\n            emit Transfer(owner,msg.sender, tokens);\r\n              \r\n        }\r\n        else\r\n        {\r\n            revert(\"isMiniting False\");\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    function endCrowdsale() onlyOwner public {\r\n        isMinting = false;\r\n    }\r\n\r\n    function changeCrowdsaleRate(uint256 _value) onlyOwner public {\r\n        RATE = _value;\r\n    }\r\n    \r\n    function startCrowdsale(uint256 _fromtime,uint256 _totime,uint256 _rate, uint256 supply) onlyOwner public returns(bool){\r\n        require(safeAdd(_sold,supply) <= _totalSupply, \"Token sold issue\");\r\n        Start=_fromtime;\r\n        End=_totime;\r\n        RATE=_rate;\r\n        isMinting = true;\r\n        _circulating_supply=safeAdd(_circulating_supply,supply);\r\n        emit startSale(_fromtime,_totime,_rate,supply);\r\n        return true;\r\n    }\r\n    \r\n    function getblocktime() public view returns(uint256)\r\n    {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function issueDivident(address[] memory addr,uint256[] memory amount) payable public onlyOwner returns(bool){\r\n        require(amount.length > 0,\"Enter valid amount\");\r\n        for(uint256 i; i < amount.length;i++)\r\n        {\r\n            address(uint160(addr[i])).transfer(amount[i]);\r\n            emit issueDivi(addr[i],amount[i]);\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev burn : To decrease total supply of tokens\r\n     */ \r\n    function burn(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        require(_amount <= balances[msg.sender], \"Insufficient Balance\");\r\n        _totalSupply = safeSub(_totalSupply, _amount);\r\n        balances[owner] = safeSub(balances[owner], _amount);\r\n        emit Transfer(owner, address(0), _amount);\r\n        return true;\r\n    }\r\n    \r\n      function mint(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        _totalSupply = safeAdd(_totalSupply, _amount);\r\n         balances[owner] = safeAdd(balances[owner], _amount);\r\n        return true;\r\n    }\r\n \r\n     receive() external payable {\r\n     revert(\"Incorrect Function access\");\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"Buyerlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueDivi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"End\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_circulating_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeCrowdsaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getblocktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"issueDivident\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"startCrowdsale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Favcoin","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://642b7af5b67a2bc1bd1954244f0f8c158b69697324829a2c04a909cb2c81c32e"}]}