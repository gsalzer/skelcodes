{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: SPDX-License-Identifier\n\npragma solidity ^0.6.0;\n\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n//Designed by Shadiyar Kempirbay\n//Twitter: https://twitter.com/shadiyarCTx\n//Website: https://connectx.network\n//\n//The purpose of this contract is to store ETH raised from the presale, and release when middleman gives permission.\n// Abilities of middleman: Approve to release funds\ncontract EscrowConnect {\r\n    enum State {MIDDLEMAN_NOT_DECLARED, MIDDLEMAN_DECLARED, CONFIRMED, RELEASED}\r\n    State public currState;\r\n\r\n    struct Middleman {\r\n        address middleman;\r\n        bool alreadyDeclared;\r\n        bool middleManConfirmed;\r\n    }\r\n\r\n    event Deposit(address sender, uint256 amount);\r\n    event Received(address, uint256);\r\n    event Withdraw(address middleman, address dev, uint256 amount);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    address payable public middleman;\r\n    address payable public dev;\r\n    bool public alreadyDeclared;\r\n    bool public middlemanConfirmedWithdraw;\r\n    uint256 private middlemanCommission = 2;\r\n    uint256 private devPercentage = 100;\r\n\r\n    modifier onlyMiddleman() {\r\n        require(msg.sender == middleman, \"Only Middleman can call this method\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(msg.sender == dev, \"Only Dev can call this method\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _dev) public {\r\n        dev = _dev;\r\n    }\r\n\r\n    //This function allows to change middleman's address. Can be called only by middleman.\r\n    function renounceMiddleman(address payable newMiddleman)\r\n        external\r\n        onlyMiddleman\r\n    {\r\n        require(\r\n            alreadyDeclared == true,\r\n            \"This function can only be called by middleman\"\r\n        );\r\n        currState = State.MIDDLEMAN_DECLARED;\r\n        middleman = newMiddleman;\r\n        middlemanConfirmedWithdraw = false;\r\n    }\r\n\r\n    function setMiddleman(address payable declareMiddleman) external onlyDev {\r\n        require(alreadyDeclared == false, \"Middleman already declared\");\r\n        currState = State.MIDDLEMAN_DECLARED;\r\n        middleman = declareMiddleman;\r\n        alreadyDeclared = true;\r\n    }\r\n\r\n    //Approve withdrawal. Function can be called only by middleman.\r\n    function confirmToRelease() external onlyMiddleman {\r\n        require(\r\n            currState == State.MIDDLEMAN_DECLARED,\r\n            \"This function can be only called by middleman!\"\r\n        );\r\n        currState = State.CONFIRMED;\r\n        middlemanConfirmedWithdraw = true;\r\n    }\r\n\r\n    //Function to release funds to dev account. Can be called only by dev.\r\n    function releaseFunds() external onlyDev {\r\n        require(\r\n            currState == State.CONFIRMED,\r\n            \"Middleman did not confirm to release\"\r\n        );\r\n        middleman.transfer((address(this).balance * middlemanCommission / 100));\r\n        dev.transfer((address(this).balance * devPercentage / 100));\r\n        currState = State.RELEASED;\r\n    }\r\n\r\n    //This function resets state to \"2\" - in case if more ETH is transferred after funds are released. Middleman will be required to approve again.\r\n    function resetState() external onlyDev {\r\n        require(currState == State.RELEASED, \"Only dev can call this method\");\r\n        currState = State.MIDDLEMAN_DECLARED;\r\n        middlemanConfirmedWithdraw = false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"middleman\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"alreadyDeclared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmToRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currState\",\"outputs\":[{\"internalType\":\"enum EscrowConnect.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleman\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middlemanConfirmedWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMiddleman\",\"type\":\"address\"}],\"name\":\"renounceMiddleman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"declareMiddleman\",\"type\":\"address\"}],\"name\":\"setMiddleman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EscrowConnect","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000049c3966519b16b458bd4d373fec37db681584b44","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}