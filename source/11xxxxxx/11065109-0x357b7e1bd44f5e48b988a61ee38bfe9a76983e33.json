{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDelegable.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\ninterface IDelegable {\r\n    function addDelegate(address) external;\r\n    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\r\n}\r\n\r\n// File: contracts/interfaces/IVat.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the vat contract from MakerDAO\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md\r\ninterface IVat {\r\n    // function can(address, address) external view returns (uint);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function live() external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n    // function dai(address) external view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) external;\r\n    function fork(bytes32, address, address, int, int) external;\r\n    function move(address, address, uint) external;\r\n    function flux(bytes32, address, address, uint) external;\r\n}\r\n\r\n// File: contracts/interfaces/IWeth.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function approve(address, uint) external returns (bool) ;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IGemJoin.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using ERC20\r\ninterface IGemJoin {\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function cage() external;\r\n    function join(address usr, uint WAD) external;\r\n    function exit(address usr, uint WAD) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDaiJoin.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev Interface to interact with the `Join.sol` contract from MakerDAO using Dai\r\ninterface IDaiJoin {\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function cage() external;\r\n    function join(address usr, uint WAD) external;\r\n    function exit(address usr, uint WAD) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPot.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev interface for the pot contract from MakerDao\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\r\ninterface IPot {\r\n    function chi() external view returns (uint256);\r\n    function pie(address) external view returns (uint256); // Not a function, but a public variable.\r\n    function rho() external returns (uint256);\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n// File: contracts/interfaces/IChai.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n/// @dev interface for the chai contract\r\n/// Taken from https://github.com/makerdao/developerguides/blob/master/dai/dsr-integration-guide/dsr.sol\r\ninterface IChai {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    function move(address src, address dst, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n    function approve(address usr, uint wad) external returns (bool);\r\n    function dai(address usr) external returns (uint wad);\r\n    function join(address dst, uint wad) external;\r\n    function exit(address src, uint wad) external;\r\n    function draw(address src, uint wad) external;\r\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\r\n    function nonces(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ITreasury {\r\n    function debt() external view returns(uint256);\r\n    function savings() external view returns(uint256);\r\n    function pushDai(address user, uint256 dai) external;\r\n    function pullDai(address user, uint256 dai) external;\r\n    function pushChai(address user, uint256 chai) external;\r\n    function pullChai(address user, uint256 chai) external;\r\n    function pushWeth(address to, uint256 weth) external;\r\n    function pullWeth(address to, uint256 weth) external;\r\n    function shutdown() external;\r\n    function live() external view returns(bool);\r\n\r\n    function vat() external view returns (IVat);\r\n    function weth() external view returns (IWeth);\r\n    function dai() external view returns (IERC20);\r\n    function daiJoin() external view returns (IDaiJoin);\r\n    function wethJoin() external view returns (IGemJoin);\r\n    function pot() external view returns (IPot);\r\n    function chai() external view returns (IChai);\r\n}\r\n\r\n// File: contracts/interfaces/IERC2612.sol\r\n\r\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC2612 standard as defined in the EIP.\r\n *\r\n * Adds the {permit} method, which can be used to change one's\r\n * {IERC20-allowance} without having to send a transaction, by signing a\r\n * message. This allows users to spend tokens without having to hold Ether.\r\n *\r\n * See https://eips.ethereum.org/EIPS/eip-2612.\r\n */\r\ninterface IERC2612 {\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IFYDai.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\ninterface IFYDai is IERC20, IERC2612 {\r\n    function isMature() external view returns(bool);\r\n    function maturity() external view returns(uint);\r\n    function chi0() external view returns(uint);\r\n    function rate0() external view returns(uint);\r\n    function chiGrowth() external view returns(uint);\r\n    function rateGrowth() external view returns(uint);\r\n    function mature() external;\r\n    function unlocked() external view returns (uint);\r\n    function mint(address, uint) external;\r\n    function burn(address, uint) external;\r\n    function flashMint(uint, bytes calldata) external;\r\n    function redeem(address, address, uint256) external returns (uint256);\r\n    // function transfer(address, uint) external returns (bool);\r\n    // function transferFrom(address, address, uint) external returns (bool);\r\n    // function approve(address, uint) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IController.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\ninterface IController is IDelegable {\r\n    function treasury() external view returns (ITreasury);\r\n    function series(uint256) external view returns (IFYDai);\r\n    function seriesIterator(uint256) external view returns (uint256);\r\n    function totalSeries() external view returns (uint256);\r\n    function containsSeries(uint256) external view returns (bool);\r\n    function posted(bytes32, address) external view returns (uint256);\r\n    function debtFYDai(bytes32, uint256, address) external view returns (uint256);\r\n    function debtDai(bytes32, uint256, address) external view returns (uint256);\r\n    function totalDebtDai(bytes32, address) external view returns (uint256);\r\n    function isCollateralized(bytes32, address) external view returns (bool);\r\n    function inDai(bytes32, uint256, uint256) external view returns (uint256);\r\n    function inFYDai(bytes32, uint256, uint256) external view returns (uint256);\r\n    function erase(bytes32, address) external returns (uint256, uint256);\r\n    function shutdown() external;\r\n    function post(bytes32, address, address, uint256) external;\r\n    function withdraw(bytes32, address, address, uint256) external;\r\n    function borrow(bytes32, uint256, address, address, uint256) external;\r\n    function repayFYDai(bytes32, uint256, address, address, uint256) external returns (uint256);\r\n    function repayDai(bytes32, uint256, address, address, uint256) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ILiquidations.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\ninterface ILiquidations {\r\n    function shutdown() external;\r\n    function totals() external view returns(uint128, uint128);\r\n    function erase(address) external returns(uint128, uint128);\r\n\r\n    function controller() external returns(IController);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/DecimalMath.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n/// @dev Implements simple fixed point math mul and div operations for 27 decimals.\r\ncontract DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public UNIT = 1e27;\r\n\r\n    /// @dev Multiplies x and y, assuming they are both fixed point with 27 digits.\r\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(y).div(UNIT);\r\n    }\r\n\r\n    /// @dev Divides x between y, assuming they are both fixed point with 27 digits.\r\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /// @dev Multiplies x and y, rounding up to the closest representable number.\r\n    /// Assumes x and y are both fixed point with `decimals` digits.\r\n    function muldrup(uint256 x, uint256 y) internal pure returns (uint256)\r\n    {\r\n        uint256 z = x.mul(y);\r\n        return z.mod(UNIT) == 0 ? z.div(UNIT) : z.div(UNIT).add(1);\r\n    }\r\n\r\n    /// @dev Divides x between y, rounding up to the closest representable number.\r\n    /// Assumes x and y are both fixed point with `decimals` digits.\r\n    function divdrup(uint256 x, uint256 y) internal pure returns (uint256)\r\n    {\r\n        uint256 z = x.mul(UNIT);\r\n        return z.mod(y) == 0 ? z.div(y) : z.div(y).add(1);\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Delegable.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n/// @dev Delegable enables users to delegate their account management to other users.\r\n/// Delegable implements addDelegateBySignature, to add delegates using a signature instead of a separate transaction.\r\ncontract Delegable is IDelegable {\r\n    event Delegate(address indexed user, address indexed delegate, bool enabled);\r\n\r\n    // keccak256(\"Signature(address user,address delegate,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public immutable SIGNATURE_TYPEHASH = 0x0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb7;\r\n    bytes32 public immutable DELEGABLE_DOMAIN;\r\n    mapping(address => uint) public signatureCount;\r\n\r\n    mapping(address => mapping(address => bool)) public delegated;\r\n\r\n    constructor () public {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        DELEGABLE_DOMAIN = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes('Yield')),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @dev Require that msg.sender is the account holder or a delegate\r\n    modifier onlyHolderOrDelegate(address holder, string memory errorMessage) {\r\n        require(\r\n            msg.sender == holder || delegated[holder][msg.sender],\r\n            errorMessage\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Enable a delegate to act on the behalf of caller\r\n    function addDelegate(address delegate) public override {\r\n        _addDelegate(msg.sender, delegate);\r\n    }\r\n\r\n    /// @dev Stop a delegate from acting on the behalf of caller\r\n    function revokeDelegate(address delegate) public {\r\n        _revokeDelegate(msg.sender, delegate);\r\n    }\r\n\r\n    /// @dev Add a delegate through an encoded signature\r\n    function addDelegateBySignature(address user, address delegate, uint deadline, uint8 v, bytes32 r, bytes32 s) public override {\r\n        require(deadline >= block.timestamp, 'Delegable: Signature expired');\r\n\r\n        bytes32 hashStruct = keccak256(\r\n            abi.encode(\r\n                SIGNATURE_TYPEHASH,\r\n                user,\r\n                delegate,\r\n                signatureCount[user]++,\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DELEGABLE_DOMAIN,\r\n                hashStruct\r\n            )\r\n        );\r\n        address signer = ecrecover(digest, v, r, s);\r\n        require(\r\n            signer != address(0) && signer == user,\r\n            'Delegable: Invalid signature'\r\n        );\r\n\r\n        _addDelegate(user, delegate);\r\n    }\r\n\r\n    /// @dev Enable a delegate to act on the behalf of an user\r\n    function _addDelegate(address user, address delegate) internal {\r\n        require(!delegated[user][delegate], \"Delegable: Already delegated\");\r\n        delegated[user][delegate] = true;\r\n        emit Delegate(user, delegate, true);\r\n    }\r\n\r\n    /// @dev Stop a delegate from acting on the behalf of an user\r\n    function _revokeDelegate(address user, address delegate) internal {\r\n        require(delegated[user][delegate], \"Delegable: Already undelegated\");\r\n        delegated[user][delegate] = false;\r\n        emit Delegate(user, delegate, false);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Orchestrated.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @dev Orchestrated allows to define static access control between multiple contracts.\r\n * This contract would be used as a parent contract of any contract that needs to restrict access to some methods,\r\n * which would be marked with the `onlyOrchestrated` modifier.\r\n * During deployment, the contract deployer (`owner`) can register any contracts that have privileged access by calling `orchestrate`.\r\n * Once deployment is completed, `owner` should call `transferOwnership(address(0))` to avoid any more contracts ever gaining privileged access.\r\n */\r\n\r\ncontract Orchestrated is Ownable {\r\n    event GrantedAccess(address access, bytes4 signature);\r\n\r\n    mapping(address => mapping (bytes4 => bool)) public orchestration;\r\n\r\n    constructor () public Ownable() {}\r\n\r\n    /// @dev Restrict usage to authorized users\r\n    /// @param err The error to display if the validation fails \r\n    modifier onlyOrchestrated(string memory err) {\r\n        require(orchestration[msg.sender][msg.sig], err);\r\n        _;\r\n    }\r\n\r\n    /// @dev Add orchestration\r\n    /// @param user Address of user or contract having access to this contract.\r\n    /// @param signature bytes4 signature of the function we are giving orchestrated access to.\r\n    /// It seems to me a bad idea to give access to humans, and would use this only for predictable smart contracts.\r\n    function orchestrate(address user, bytes4 signature) public onlyOwner {\r\n        orchestration[user][signature] = true;\r\n        emit GrantedAccess(user, signature);\r\n    }\r\n\r\n    /// @dev Adds orchestration for the provided function signatures\r\n    function batchOrchestrate(address user, bytes4[] memory signatures) public onlyOwner {\r\n        for (uint256 i = 0; i < signatures.length; i++) {\r\n            orchestrate(user, signatures[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Liquidations.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev The Liquidations contract allows to liquidate undercollateralized weth vaults in a reverse Dutch auction.\r\n * Undercollateralized vaults can be liquidated by calling `liquidate`. This will result in debt and collateral records\r\n * being read and removed from the Controller using `controller.erase`.\r\n * Collateral from vaults can be bought with Dai using `buy`.\r\n * Dai taken in payment will be handed over to Treasury, and collateral assets bought will be taken from Treasury as well.\r\n */\r\ncontract Liquidations is ILiquidations, Orchestrated(), Delegable(), DecimalMath {\r\n\r\n    event Liquidation(address indexed user, uint256 started, uint256 collateral, uint256 debt);\r\n\r\n    bytes32 public constant WETH = \"ETH-A\";\r\n    uint256 public constant AUCTION_TIME = 3600;\r\n    uint256 public constant DUST = 25e15; // 0.025 ETH\r\n\r\n    ITreasury public treasury;\r\n    IController public override controller;\r\n\r\n    struct Vault {\r\n        uint128 collateral;\r\n        uint128 debt;\r\n    }\r\n\r\n    mapping(address => uint256) public liquidations;\r\n    mapping(address => Vault) public vaults;\r\n    Vault public override totals;\r\n\r\n    bool public live = true;\r\n\r\n    /// @dev The Liquidations constructor links it to the Treasury and Controller contracts.\r\n    constructor (\r\n        address controller_\r\n    ) public {\r\n        controller = IController(controller_);\r\n        treasury = controller.treasury();\r\n    }\r\n\r\n    /// @dev Only while Liquidations is not unwinding due to a MakerDAO shutdown.\r\n    modifier onlyLive() {\r\n        require(live == true, \"Controller: Not available during unwind\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Overflow-protected addition, from OpenZeppelin\r\n    function add(uint128 a, uint128 b)\r\n        internal pure returns (uint128)\r\n    {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"Liquidations: Addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /// @dev Overflow-protected substraction, from OpenZeppelin\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"Liquidations: Substraction overflow\");\r\n        uint128 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /// @dev Safe casting from uint256 to uint128\r\n    function toUint128(uint256 x) internal pure returns(uint128) {\r\n        require(\r\n            x <= type(uint128).max,\r\n            \"Liquidations: Cast overflow\"\r\n        );\r\n        return uint128(x);\r\n    }\r\n\r\n    /// @dev Disables buying at liquidations. To be called only when Treasury shuts down.\r\n    function shutdown() public override {\r\n        require(\r\n            treasury.live() == false,\r\n            \"Liquidations: Treasury is live\"\r\n        );\r\n        live = false;\r\n    }\r\n\r\n\r\n    /// @dev Return if the debt of an user is between zero and the dust level\r\n    /// @param user Address of the user vault\r\n    function aboveDustOrZero(address user) public view returns (bool) {\r\n        uint256 collateral = vaults[user].collateral;\r\n        return collateral == 0 || DUST < collateral;\r\n    }\r\n\r\n    /// @dev Starts a liquidation process for an undercollateralized vault.\r\n    /// @param user Address of the user vault to liquidate.\r\n    function liquidate(address user)\r\n        public onlyLive\r\n    {\r\n        require(\r\n            !controller.isCollateralized(WETH, user),\r\n            \"Liquidations: Vault is not undercollateralized\"\r\n        );\r\n        // A user in liquidation can be liquidated again, but doesn't restart the auction clock\r\n        // solium-disable-next-line security/no-block-members\r\n        if (liquidations[user] == 0) liquidations[user] = now;\r\n\r\n        (uint256 userCollateral, uint256 userDebt) = controller.erase(WETH, user);\r\n        totals = Vault({\r\n            collateral: add(totals.collateral, toUint128(userCollateral)),\r\n            debt: add(totals.debt, toUint128(userDebt))\r\n        });\r\n\r\n        Vault memory vault = Vault({ // TODO: Test a user that is liquidated twice\r\n            collateral: add(vaults[user].collateral, toUint128(userCollateral)),\r\n            debt: add(vaults[user].debt, toUint128(userDebt))\r\n        });\r\n        vaults[user] = vault;\r\n\r\n        emit Liquidation(user, now, userCollateral, userDebt);\r\n    }\r\n\r\n    /// @dev Buy a portion of a position under liquidation.\r\n    /// The caller pays the debt of `user`, and `from` receives an amount of collateral.\r\n    /// `from` can delegate to other addresses to buy for him. Also needs to use `ERC20.approve`.\r\n    /// @param liquidated Address of the user vault to liquidate.\r\n    /// @param from Address of the wallet paying Dai for liquidated collateral.\r\n    /// @param to Address of the wallet to send the obtained collateral to.\r\n    /// @param daiAmount Amount of Dai to give in exchange for liquidated collateral.\r\n    /// @return The amount of collateral obtained.\r\n    function buy(address from, address to, address liquidated, uint256 daiAmount)\r\n        public onlyLive\r\n        onlyHolderOrDelegate(from, \"Controller: Only Holder Or Delegate\")\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            vaults[liquidated].debt > 0,\r\n            \"Liquidations: Vault is not in liquidation\"\r\n        );\r\n        treasury.pushDai(from, daiAmount);\r\n\r\n        // calculate collateral to grab. Using divdrup stops rounding from leaving 1 stray wei in vaults.\r\n        uint256 tokenAmount = divdrup(daiAmount, price(liquidated));\r\n\r\n        totals = Vault({\r\n            collateral: sub(totals.collateral, toUint128(tokenAmount)),\r\n            debt: sub(totals.debt, toUint128(daiAmount))\r\n        });\r\n\r\n        Vault memory vault = Vault({\r\n            collateral: sub(vaults[liquidated].collateral, toUint128(tokenAmount)),\r\n            debt: sub(vaults[liquidated].debt, toUint128(daiAmount))\r\n        });\r\n        vaults[liquidated] = vault;\r\n\r\n        if (vaults[liquidated].debt == 0) delete liquidations[liquidated];\r\n\r\n        treasury.pullWeth(to, tokenAmount);\r\n\r\n        require(\r\n            aboveDustOrZero(liquidated),\r\n            \"Liquidations: Below dust\"\r\n        );\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /// @dev Retrieve weth from a liquidations account. This weth could be a remainder from liquidations.\r\n    /// If any weth is not withdrawn, it will be auctioned if the user gets liquidated again.\r\n    /// `from` can delegate to other addresses to withdraw from him.\r\n    /// @param from Address of the liquidations user vault to withdraw weth from.\r\n    /// @param to Address of the wallet receiving the withdrawn weth.\r\n    /// @param tokenAmount Amount of Weth to withdraw.\r\n    function withdraw(address from, address to, uint256 tokenAmount)\r\n        public onlyLive\r\n        onlyHolderOrDelegate(from, \"Controller: Only Holder Or Delegate\")\r\n    {\r\n        Vault storage vault = vaults[from];\r\n        require(\r\n            vault.debt == 0,\r\n            \"Liquidations: User still in liquidation\"\r\n        );\r\n\r\n        totals.collateral = sub(totals.collateral, toUint128(tokenAmount));\r\n        vault.collateral = sub(vault.collateral, toUint128(tokenAmount));\r\n\r\n        treasury.pullWeth(to, tokenAmount);\r\n    }\r\n\r\n    /// @dev Removes all collateral and debt for an user.\r\n    /// This function can only be called by other Yield contracts, not users directly.\r\n    /// @param user Address of the user vault\r\n    /// @return The amounts of collateral and debt removed from Liquidations.\r\n    function erase(address user)\r\n        public override\r\n        onlyOrchestrated(\"Liquidations: Not Authorized\")\r\n        returns (uint128, uint128)\r\n    {\r\n        Vault storage vault = vaults[user];\r\n        uint128 collateral = vault.collateral;\r\n        uint128 debt = vault.debt;\r\n\r\n        totals = Vault({\r\n            collateral: sub(totals.collateral, collateral),\r\n            debt: sub(totals.debt, debt)\r\n        });\r\n        delete vaults[user];\r\n\r\n        return (collateral, debt);\r\n    }\r\n\r\n    /// @dev Return price of a collateral unit, in dai, at the present moment, for a given user\r\n    /// @param user Address of the user vault in liquidation.\r\n    // dai = price * collateral\r\n    //\r\n    //                collateral      1      min(auction, elapsed)\r\n    // price = 1 / (------------- * (--- + -----------------------))\r\n    //                   debt         2       2 * auction\r\n    function price(address user) public view returns (uint256) {\r\n        require(\r\n            liquidations[user] > 0,\r\n            \"Liquidations: Vault is not targeted\"\r\n        );\r\n        uint256 dividend1 = uint256(vaults[user].collateral);\r\n        uint256 divisor1 = uint256(vaults[user].debt);\r\n        uint256 term1 = dividend1.mul(UNIT).div(divisor1);\r\n        uint256 dividend3 = Math.min(AUCTION_TIME, now - liquidations[user]); // - unlikely to overflow\r\n        uint256 divisor3 = AUCTION_TIME.mul(2);\r\n        uint256 term2 = UNIT.div(2);\r\n        uint256 term3 = dividend3.mul(UNIT).div(divisor3);\r\n        return divd(UNIT, muld(term1, term2 + term3)); // + unlikely to overflow\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"access\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"started\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGABLE_DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"aboveDustOrZero\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addDelegateBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"signatures\",\"type\":\"bytes4[]\"}],\"name\":\"batchOrchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidated\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"erase\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"orchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"orchestration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Liquidations","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b94199866fe06b535d019c11247d3f921460b91a","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4f0197027c8ec3b77916f3332021cbc001d3fe0cda7b86ec1e271efc162ec87c"}]}