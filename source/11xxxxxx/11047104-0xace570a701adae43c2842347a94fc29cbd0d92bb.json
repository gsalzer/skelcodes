{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.4.26;\r\n\r\n// Interface declarations\r\n\r\n/* solhint-disable func-order */\r\n\r\ninterface IERC20 {\r\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\r\n    // Value is the new allowance\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    // Emitted when value tokens are moved from one account (from) to another (to).\r\n    // Note that value may be zero\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    // Returns the amount of tokens in existence\r\n    function totalSupply() external view returns (uint);\r\n\r\n    // Returns the amount of tokens owned by account\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\r\n    // through transferFrom. This is zero by default\r\n    // This value changes when approve or transferFrom are called\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Sets amount as the allowance of spender over the caller’s tokens\r\n    // Returns a boolean value indicating whether the operation succeeded\r\n    // Emits an Approval event.\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    // Moves amount tokens from the caller’s account to recipient\r\n    // Returns a boolean value indicating whether the operation succeeded\r\n    // Emits a Transfer event.\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    // Moves amount tokens from sender to recipient using the allowance mechanism\r\n    // Amount is then deducted from the caller’s allowance\r\n    // Returns a boolean value indicating whether the operation succeeded\r\n    // Emits a Transfer event\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n\r\n// Copyright (C) 2017  MixBytes, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n  // TYPES\r\n\r\n  // struct for the status of a pending operation.\r\n  struct MultiOwnedOperationPendingState {\r\n    // count of confirmations needed\r\n    uint yetNeeded;\r\n\r\n    // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n    uint ownersDone;\r\n\r\n    // position of this operation key in m_multiOwnedPendingIndex\r\n    uint index;\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event Confirmation(address owner, bytes32 operation);\r\n  event Revoke(address owner, bytes32 operation);\r\n  event FinalConfirmation(address owner, bytes32 operation);\r\n  event Op(bytes32 operation);\r\n\r\n  // some others are in the case of an owner changing.\r\n  event OwnerChanged(address oldOwner, address newOwner);\r\n  event OwnerAdded(address newOwner);\r\n  event OwnerRemoved(address oldOwner);\r\n\r\n  // the last one is emitted if the required signatures change\r\n  event RequirementChanged(uint newRequirement);\r\n\r\n  // MODIFIERS\r\n\r\n  // simple single-sig function modifier.\r\n  modifier onlyowner {\r\n    require(isOwner(msg.sender));\r\n    _;\r\n  }\r\n  // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n  // that later attempts can be realised as the same underlying operation and\r\n  // thus count as confirmations.\r\n  modifier onlymanyowners(bytes32 _operation) {\r\n    if (confirmAndCheck(_operation)) {\r\n      _;\r\n    }\r\n    // Even if required number of confirmations has't been collected yet,\r\n    // we can't throw here - because changes to the state have to be preserved.\r\n    // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n  }\r\n\r\n  modifier onlyallowners(bytes32 _operation) {\r\n    if (confirmAndCheckForAll(_operation)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier onlyalmostallowners(bytes32 _operation) {\r\n    if (confirmAndCheckForAlmostAll(_operation)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier validNumOwners(uint _numOwners) {\r\n    require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n    _;\r\n  }\r\n\r\n  modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n    require(_required > 0 && _required <= _numOwners);\r\n    _;\r\n  }\r\n\r\n  modifier ownerExists(address _address) {\r\n    require(isOwner(_address));\r\n    _;\r\n  }\r\n\r\n  modifier ownerDoesNotExist(address _address) {\r\n    require(!isOwner(_address));\r\n    _;\r\n  }\r\n\r\n  modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n    require(isOperationActive(_operation));\r\n    _;\r\n  }\r\n\r\n  // METHODS\r\n\r\n  // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n  // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n  constructor(address[] _owners, uint _required)\r\n      public\r\n      validNumOwners(_owners.length)\r\n      multiOwnedValidRequirement(_required, _owners.length)\r\n  {\r\n    assert(c_maxOwners <= 255);\r\n\r\n    require(_owners.length == 6, \"Gath3r: Number of total multisig owners must be equal to 6\");\r\n    require(_required == 3, \"Gath3r: Number of required multisig owners must be equal to 3\");\r\n\r\n    m_numOwners = _owners.length;\r\n    m_multiOwnedRequired = _required;\r\n\r\n    for (uint i = 0; i < _owners.length; ++i)\r\n    {\r\n      address owner = _owners[i];\r\n      // invalid and duplicate addresses are not allowed\r\n      require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n      uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n      m_owners[currentOwnerIndex] = owner;\r\n      m_ownerIndex[owner] = currentOwnerIndex;\r\n    }\r\n\r\n    assertOwnersAreConsistent();\r\n  }\r\n\r\n  /// @notice replaces an owner `_from` with another `_to`.\r\n  /// @param _from address of owner to replace\r\n  /// @param _to address of new owner\r\n  // All pending operations will be canceled!\r\n  function changeOwner(address _from, address _to)\r\n      external\r\n      ownerExists(_from)\r\n      ownerDoesNotExist(_to)\r\n      onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n    m_owners[ownerIndex] = _to;\r\n    m_ownerIndex[_from] = 0;\r\n    m_ownerIndex[_to] = ownerIndex;\r\n\r\n    assertOwnersAreConsistent();\r\n    emit OwnerChanged(_from, _to);\r\n  }\r\n\r\n  /// @notice adds an owner\r\n  /// @param _owner address of new owner\r\n  // All pending operations will be canceled!\r\n  function addOwner(address _owner)\r\n      external\r\n      ownerDoesNotExist(_owner)\r\n      validNumOwners(m_numOwners + 1)\r\n      onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    m_numOwners++;\r\n    m_owners[m_numOwners] = _owner;\r\n    m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n    assertOwnersAreConsistent();\r\n    OwnerAdded(_owner);\r\n  }\r\n\r\n  /// @notice removes an owner\r\n  /// @param _owner address of owner to remove\r\n  // All pending operations will be canceled!\r\n  function removeOwner(address _owner)\r\n    external\r\n    ownerExists(_owner)\r\n    validNumOwners(m_numOwners - 1)\r\n    multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n    onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n    m_owners[ownerIndex] = 0;\r\n    m_ownerIndex[_owner] = 0;\r\n    //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n    reorganizeOwners();\r\n\r\n    assertOwnersAreConsistent();\r\n    OwnerRemoved(_owner);\r\n  }\r\n\r\n  /// @notice changes the required number of owner signatures\r\n  /// @param _newRequired new number of signatures required\r\n  // All pending operations will be canceled!\r\n  function changeRequirement(uint _newRequired)\r\n    external\r\n    multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n    onlymanyowners(keccak256(msg.data))\r\n  {\r\n    m_multiOwnedRequired = _newRequired;\r\n    clearPending();\r\n    RequirementChanged(_newRequired);\r\n  }\r\n\r\n  /// @notice Gets an owner by 0-indexed position\r\n  /// @param ownerIndex 0-indexed owner position\r\n  function getOwner(uint ownerIndex) public view returns (address) {\r\n    return m_owners[ownerIndex + 1];\r\n  }\r\n\r\n  /// @notice Gets owners\r\n  /// @return memory array of owners\r\n  function getOwners() public view returns (address[]) {\r\n    address[] memory result = new address[](m_numOwners);\r\n    for (uint i = 0; i < m_numOwners; i++)\r\n      result[i] = getOwner(i);\r\n\r\n    return result;\r\n  }\r\n\r\n  /// @notice checks if provided address is an owner address\r\n  /// @param _addr address to check\r\n  /// @return true if it's an owner\r\n  function isOwner(address _addr) public view returns (bool) {\r\n    return m_ownerIndex[_addr] > 0;\r\n  }\r\n\r\n  /// @notice Tests ownership of the current caller.\r\n  /// @return true if it's an owner\r\n  // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n  // addOwner/changeOwner and to isOwner.\r\n  function amIOwner() external view onlyowner returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @notice Revokes a prior confirmation of the given operation\r\n  /// @param _operation operation value, typically keccak256(msg.data)\r\n  function revoke(bytes32 _operation)\r\n    external\r\n    multiOwnedOperationIsActive(_operation)\r\n    onlyowner\r\n  {\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n    assertOperationIsConsistent(_operation);\r\n\r\n    pending.yetNeeded++;\r\n    pending.ownersDone -= ownerIndexBit;\r\n\r\n    assertOperationIsConsistent(_operation);\r\n    Revoke(msg.sender, _operation);\r\n  }\r\n\r\n  /// @notice Checks if owner confirmed given operation\r\n  /// @param _operation operation value, typically keccak256(msg.data)\r\n  /// @param _owner an owner address\r\n  function hasConfirmed(bytes32 _operation, address _owner)\r\n    external\r\n    view\r\n    multiOwnedOperationIsActive(_operation)\r\n    ownerExists(_owner)\r\n    returns (bool)\r\n  {\r\n    return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n  }\r\n\r\n  // INTERNAL METHODS\r\n\r\n  function confirmAndCheck(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_multiOwnedRequired;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistent(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistent(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  function confirmAndCheckForAll(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_numOwners;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistentForAll(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistentForAll(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  function confirmAndCheckForAlmostAll(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_numOwners - 1;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistentForAlmostAll(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistentForAlmostAll(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reclaims free slots between valid owners in m_owners.\r\n  // TODO given that its called after each removal, it could be simplified.\r\n  function reorganizeOwners() private {\r\n    uint free = 1;\r\n    while (free < m_numOwners)\r\n    {\r\n      // iterating to the first free slot from the beginning\r\n      while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n      // iterating to the first occupied slot from the end\r\n      while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n      // swap, if possible, so free slot is located at the end after the swap\r\n      if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n      {\r\n        // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n        m_owners[free] = m_owners[m_numOwners];\r\n        m_ownerIndex[m_owners[free]] = free;\r\n        m_owners[m_numOwners] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  function clearPending() private onlyowner {\r\n    uint length = m_multiOwnedPendingIndex.length;\r\n    // TODO block gas limit\r\n    for (uint i = 0; i < length; ++i) {\r\n      if (m_multiOwnedPendingIndex[i] != 0)\r\n        delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n    }\r\n    delete m_multiOwnedPendingIndex;\r\n  }\r\n\r\n  function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\r\n    assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n    return ownerIndex;\r\n  }\r\n\r\n  function makeOwnerBitmapBit(address owner) private view returns (uint) {\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n    return 2 ** ownerIndex;\r\n  }\r\n\r\n  function isOperationActive(bytes32 _operation) private view returns (bool) {\r\n    return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n  }\r\n\r\n\r\n  function assertOwnersAreConsistent() private view {\r\n    assert(m_numOwners > 0);\r\n    assert(m_numOwners <= c_maxOwners);\r\n    assert(m_owners[0] == 0);\r\n    assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n  }\r\n\r\n  function assertOperationIsConsistent(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n  }\r\n\r\n  function assertOperationIsConsistentForAll(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_numOwners);\r\n  }\r\n\r\n  function assertOperationIsConsistentForAlmostAll(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_numOwners - 1);\r\n  }\r\n\r\n\r\n  // FIELDS\r\n\r\n  uint constant c_maxOwners = 250;\r\n\r\n  // the number of owners that must confirm the same operation before it is run.\r\n  uint256 public m_multiOwnedRequired;\r\n\r\n\r\n  // pointer used to find a free slot in m_owners\r\n  uint public m_numOwners;\r\n\r\n  // list of owners (addresses),\r\n  // slot 0 is unused so there are no owner which index is 0.\r\n  // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n  address[256] internal m_owners;\r\n\r\n  // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n  mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n  // the ongoing operations.\r\n  mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n  bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenHolder is multiowned {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    event Transferred(address to, uint256 amount);\r\n\r\n    constructor (address[] _owners, uint _required, address _token) multiowned(_owners, _required) public {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function transferTokensTo(address _address, uint256 _amount) external onlymanyowners(keccak256(msg.data)) {\r\n        token.transfer(_address, _amount);\r\n        emit Transferred(_address, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Op\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"TokenHolder","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000c3771d47e2ab5a519e2917e61e23078d0c05ed7f0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000fa9d5f6d0a4823a87f37f9a3216d80e34cbb75ab00000000000000000000000050ec98ffd7fc601240679462b5a9cd490879587a0000000000000000000000004f959d80040bc1c5a799521eebc450b3b3b95ed4000000000000000000000000fd5b2eaeb9792c21674c723b0091336a1db39b6d000000000000000000000000b179210b997b60c4c2a2cd64ba417e95a3e33faa0000000000000000000000001b5c5d240447f7792186404233a13b8623c61cbf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8a108d8b24e8af724823f69b6bf3b9acd1ef54dea802a224a8becfe74592a484"}]}