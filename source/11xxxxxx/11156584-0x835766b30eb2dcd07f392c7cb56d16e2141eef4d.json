{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\n\n// \ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // non-standard\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\n\n// \ninterface IOracle {\r\n    // Each oracle should have a set function. The first parameter will be 'address pair' and any parameters can come after.\r\n    // Setting should only be allowed ONCE for each pair.\r\n\r\n    // Get the latest exchange rate, if no valid (recent) rate is available, return false\r\n    function get(address pair) external returns (bool, uint256);\r\n\r\n    // Check the last exchange rate without any state changes\r\n    function peek(address pair) external view returns (uint256);\r\n}\n\n// \ninterface IVault {\r\n    event FlashLoan(address indexed user, address indexed token, uint256 amount, uint256 fee);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event PairContractSet(address indexed pairContract, bool enabled);\r\n    event PairCreated(\r\n        address indexed pairContract, IERC20 indexed tokenCollateral, IERC20 indexed tokenAsset, address oracle, address clone_address);\r\n    event SwapperSet(address swapper, bool enabled);\r\n    function dev() external view returns (address);\r\n    function feeTo() external view returns (address);\r\n    function feesPending(address) external view returns (uint256);\r\n    function isPair(address) external view returns (bool);\r\n    function owner() external view returns (address);\r\n    function pairContracts(address) external view returns (bool);\r\n    function renounceOwnership() external;\r\n    function swappers(address) external view returns (bool);\r\n    function transferOwnership(address newOwner) external;\r\n    function setPairContract(address pairContract, bool enabled) external;\r\n    function setSwapper(address swapper, bool enabled) external;\r\n    function setFeeTo(address newFeeTo) external;\r\n    function setDev(address newDev) external;\r\n    function deploy(address pairContract, IERC20 tokenCollateral, IERC20 tokenAsset, address oracle, bytes calldata oracleData) external;\r\n    function transfer(IERC20 token, address to, uint256 amount) external;\r\n    function transferFrom(IERC20 token, address from, uint256 amount) external;\r\n    function flashLoan(address user, address token, uint256 amount, bytes calldata params) external;\r\n    function withdrawFees(address token) external;\r\n}\n\n// \ninterface IPair {\r\n    event AddAsset(address indexed user, uint256 amount, uint256 share);\r\n    event AddBorrow(address indexed user, uint256 amount, uint256 share);\r\n    event AddCollateral(address indexed user, uint256 amount, uint256 share);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event NewExchangeRate(uint256 rate);\r\n    event RemoveAsset(address indexed user, uint256 amount, uint256 share);\r\n    event RemoveBorrow(address indexed user, uint256 amount, uint256 share);\r\n    event RemoveCollateral(address indexed user, uint256 amount, uint256 share);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function colRate() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function exchangeRate() external view returns (uint256);\r\n    function feesPending() external view returns (uint256);\r\n    function interestPerBlock() external view returns (uint256);\r\n    function lastBlockAccrued() external view returns (uint256);\r\n    function lastInterestBlock() external view returns (uint256);\r\n    function liqMultiplier() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function openColRate() external view returns (uint256);\r\n    function oracle() external view returns (IOracle);\r\n    function symbol() external view returns (string memory);\r\n    function tokenAsset() external view returns (IERC20);\r\n    function tokenCollateral() external view returns (IERC20);\r\n    function totalAsset() external view returns (uint256);\r\n    function totalBorrow() external view returns (uint256);\r\n    function totalBorrowShare() external view returns (uint256);\r\n    function totalCollateral() external view returns (uint256);\r\n    function totalCollateralShare() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success);\r\n    function userBorrowShare(address) external view returns (uint256);\r\n    function userCollateralShare(address) external view returns (uint256);\r\n    function vault() external view returns (IVault);\r\n    function init(IVault vault_, IERC20 collateral_address, IERC20 asset_address, IOracle oracle_address, bytes calldata oracleData) external;\r\n    function accrue() external;\r\n    function withdrawFees() external;\r\n    function isSolvent(address user, bool open) external view returns (bool);\r\n    function updateExchangeRate() external returns (uint256);\r\n    function updateInterestRate() external;\r\n    function addCollateral(uint256 amount) external;\r\n    function addAsset(uint256 amount) external;\r\n    function removeCollateral(uint256 share, address to) external;\r\n    function removeAsset(uint256 share, address to) external;\r\n    function borrow(uint256 amount, address to) external;\r\n    function repay(uint256 share) external;\r\n    function short(address swapper, uint256 amountAsset, uint256 minAmountCollateral) external;\r\n    function unwind(address swapper, uint256 borrowShare, uint256 maxAmountCollateral) external;\r\n    function liquidate(address[] calldata users, uint256[] calldata borrowShares, address to, address swapper, bool open) external;\r\n}\n\n// \ncontract BentoHelper {\r\n    struct PairInfo {\r\n        IPair pair;\r\n        IOracle oracle;\r\n        IVault vault;\r\n        IERC20 tokenAsset;\r\n        IERC20 tokenCollateral;\r\n\r\n        uint256 latestExchangeRate;\r\n        uint256 lastBlockAccrued;\r\n        uint256 interestRate;\r\n        uint256 totalCollateral;\r\n        uint256 totalAsset;\r\n        uint256 totalBorrow;\r\n\r\n        uint256 totalCollateralShare;\r\n        uint256 totalAssetShare;\r\n        uint256 totalBorrowShare;\r\n\r\n        uint256 interestPerBlock;\r\n        uint256 lastInterestBlock;\r\n\r\n        uint256 colRate;\r\n        uint256 openColRate;\r\n        uint256 liqMultiplier;\r\n        uint256 feesPending;\r\n\r\n        uint256 userCollateralShare;\r\n        uint256 userAssetShare;\r\n        uint256 userBorrowShare;\r\n\r\n        uint256 userAssetBalance;\r\n        uint256 userCollateralBalance;\r\n        uint256 userAssetAllowance;\r\n        uint256 userCollateralAllowance;\r\n    }\r\n\r\n    function getPairs(address user, IPair[] calldata pairs) public view returns (PairInfo[] memory info) {\r\n        info = new PairInfo[](pairs.length);\r\n        for(uint256 i = 0; i < pairs.length; i++) {\r\n            IPair pair = pairs[i];\r\n            info[i].pair = pair;\r\n            info[i].oracle = pair.oracle();\r\n            info[i].vault = pair.vault();\r\n            info[i].tokenAsset = pair.tokenAsset();\r\n            info[i].tokenCollateral = pair.tokenCollateral();\r\n\r\n            info[i].latestExchangeRate = info[i].oracle.peek(address(pair));\r\n            info[i].lastBlockAccrued = pair.lastBlockAccrued();\r\n            info[i].totalCollateral = pair.totalCollateral();\r\n            info[i].totalAsset = pair.totalAsset();\r\n            info[i].totalBorrow = pair.totalBorrow();\r\n\r\n            info[i].totalCollateralShare = pair.totalCollateralShare();\r\n            info[i].totalAssetShare = pair.totalSupply();\r\n            info[i].totalBorrowShare = pair.totalBorrowShare();\r\n\r\n            info[i].interestPerBlock = pair.interestPerBlock();\r\n            info[i].lastInterestBlock = pair.lastInterestBlock();\r\n\r\n            info[i].colRate = pair.colRate();\r\n            info[i].openColRate = pair.openColRate();\r\n            info[i].liqMultiplier = pair.liqMultiplier();\r\n            info[i].feesPending = pair.feesPending();\r\n\r\n            info[i].userCollateralShare = pair.userCollateralShare(user);\r\n            info[i].userAssetShare = pair.balanceOf(user);\r\n            info[i].userBorrowShare = pair.userBorrowShare(user);\r\n\r\n            info[i].userAssetBalance = info[i].tokenAsset.balanceOf(user);\r\n            info[i].userCollateralBalance = info[i].tokenCollateral.balanceOf(user);\r\n            info[i].userAssetAllowance = info[i].tokenAsset.allowance(user, address(info[i].vault));\r\n            info[i].userCollateralAllowance = info[i].tokenCollateral.allowance(user, address(info[i].vault));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"latestExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssetShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInterestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openColRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAssetShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBorrowShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAssetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAssetAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct BentoHelper.PairInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BentoHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}