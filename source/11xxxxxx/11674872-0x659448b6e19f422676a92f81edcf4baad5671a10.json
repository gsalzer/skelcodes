{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity ^0.7.0;\r\n\r\n// Standard ERC-20 interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface GasToken {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (bool success);\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) external returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor (address initOwner) {\r\n        owner = initOwner;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Dummy is Ownable(msg.sender) {\r\n    receive() external payable {\r\n    }\r\n    //transfers tokens from this contract\r\n    function transferStuff(address tokenAddress, uint256 amountTokens, address dest) external onlyOwner() {\r\n        IERC20(tokenAddress).transfer(dest, amountTokens);\r\n    }\r\n    //transfers ETH from this contract\r\n    function drain(address payable dest) external onlyOwner() {\r\n        dest.transfer( address(this).balance );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract GasTokenSwitcher is Dummy {\r\n    //address public GasToken_one = 0x88d60255f917e3eb94eae199d827dad837fac4cb;\r\n    //address public GasToken_two = 0x0000000000b3F879cb30FE243b4Dfee438691c04\r\n    //address public chi =  0x0000000000004946c0e9f43f4dee607b0ef1fa1c\r\n    /*\r\n    function mintAndFreeFrom(address burnToken, address from, uint256 free, address mintToken, uint256 newTokens) public onlyOwner() {\r\n        require(GasToken(burnToken).freeFrom(from, free));\r\n        GasToken(mintToken).mint(newTokens);\r\n    }\r\n    */\r\n    modifier discountGasToken(address burnToken, address from) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        GasToken(burnToken).freeFromUpTo(from, (gasSpent + 14154) / 41130);\r\n    }\r\n    function mintAndBurn(address burnToken, address from, address mintToken, uint256 newTokens) public onlyOwner() discountGasToken(burnToken, from) {\r\n        GasToken(mintToken).mint(newTokens);\r\n    }\r\n    function burnAndDeploy(address burnToken, address from, bytes memory data) public onlyOwner() discountGasToken(burnToken, from) returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create(0, add(data, 32), mload(data))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//code below copied from https://etherscan.io/address/deployer.eth#code\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n\r\ncontract Deployer {\r\n    IFreeFromUpTo public constant gst = IFreeFromUpTo(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountGST {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        gst.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\r\n    function gstDeploy(bytes memory data) public discountGST returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create(0, add(data, 32), mload(data))\r\n        }\r\n    }\r\n\r\n    function chiDeploy(bytes memory data) public discountCHI returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create(0, add(data, 32), mload(data))\r\n        }\r\n    }\r\n\r\n    function gstDeploy2(uint256 salt, bytes memory data) public discountGST returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create2(0, add(data, 32), mload(data), salt)\r\n        }\r\n    }\r\n\r\n    function chiDeploy2(uint256 salt, bytes memory data) public discountCHI returns(address contractAddress) {\r\n        assembly {\r\n            contractAddress := create2(0, add(data, 32), mload(data), salt)\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnAndDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokens\",\"type\":\"uint256\"}],\"name\":\"mintAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"transferStuff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GasTokenSwitcher","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a5509e7356133758e1036284367b53d7b78272fc17f9e2a45e4c6be834e82be6"}]}