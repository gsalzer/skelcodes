{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"YFDAO\";\r\n    string public  name = \"YFDAO\";\r\n    uint256 public decimals = 18;\r\n   uint256 public currentSupply = 1000000 * 10**(decimals); // 1 million\r\n    uint256 _totalSupply =10000000 * 10**(decimals); // 10 million\r\n    uint256 public totalBurnt=0;\r\n    address public owner1= 0x5102CfE9dcbB621BB22883D655e35D76aA2ebb70;\r\n    address public owner2=0xe9f87ad9976A831C358fD08E4ac71c2eA80887E0;\r\n    address public stakeFarmingContract;    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        // mint _totalSupply amount of tokens and send to owner\r\n        balances[owner] = balances[owner].add(currentSupply);\r\n        emit Transfer(address(0),owner,currentSupply);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Set the STAKE_FARMING_CONTRACT\r\n    // @required only owner\r\n    // ------------------------------------------------------------------------\r\n    function setStakeFarmingContract(address _address) external onlyOwner{\r\n        require(_address != address(0), \"Invalid address\");\r\n        stakeFarmingContract = _address;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token Minting function\r\n    // @params _amount expects the amount of tokens to be minted excluding the \r\n    // required decimals\r\n    // @params _beneficiary tokens will be sent to _beneficiary\r\n    // @required only stakeFarmingContract\r\n    // ------------------------------------------------------------------------\r\n    function mintTokens(uint256 _amount, address _beneficiary) public returns(bool){\r\n        require(msg.sender == stakeFarmingContract);\r\n        require(_beneficiary != address(0), \"Invalid address\");\r\n        require(currentSupply.add(_amount) <= _totalSupply, \"exceeds max cap supply 10 million\");\r\n       currentSupply = currentSupply.add(_amount);\r\n        \r\n        // mint _amount tokens and keep inside contract\r\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\r\n        \r\n        emit Transfer(address(0),_beneficiary, _amount);\r\n        return true;\r\n    }\r\n    \r\n  \r\n    \r\n    /** ERC20Interface function's implementation **/\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the total supply of the `token`\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply; \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // - 1% burn on every transaction except for owners and stakeFarmingContract(In and Out both the transactions are included)\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns  (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to].add(tokens) >= balances[to]);\r\n        if(msg.sender==owner1|| msg.sender==owner2 || to==stakeFarmingContract || msg.sender==stakeFarmingContract){\r\n             balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n             balances[to] = balances[to].add(tokens);\r\n              emit Transfer(msg.sender,to,tokens);\r\n        }else{\r\n            uint256 burnAmount= (tokens.mul(1)).div(100);\r\n            totalBurnt=totalBurnt.add(burnAmount);\r\n            currentSupply=currentSupply.sub(burnAmount);\r\n             balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n             balances[to] = balances[to].add(tokens.sub(burnAmount));\r\n              emit Transfer(msg.sender,to,tokens.sub(burnAmount));\r\n              emit Transfer(msg.sender,address(0),burnAmount);\r\n           \r\n    }\r\n     return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // - 1% burn on every transaction except for owners and stakeFarmingContract(In and Out both the transactions are included)\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        \r\n        if(from==owner1|| from==owner2 || to==stakeFarmingContract){\r\n             balances[from] = balances[from].sub(tokens);\r\n             balances[to] = balances[to].add(tokens);\r\n               allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n              emit Transfer(from,to,tokens);\r\n        }else{\r\n            uint256 burnAmount= (tokens.mul(1)).div(100);\r\n            totalBurnt=totalBurnt.add(burnAmount);\r\n            currentSupply=currentSupply.sub(burnAmount);\r\n             balances[from] = balances[from].sub(tokens);\r\n             balances[to] = balances[to].add(tokens.sub(burnAmount));\r\n             allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens.sub(burnAmount));\r\n              emit Transfer(from,to,tokens.sub(burnAmount));\r\n              emit Transfer(from,address(0),burnAmount);\r\n           \r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract YFDAO_STAKE_FARM is Owned{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public yieldCollectionFee = 0.1 ether;\r\n    uint256 public stakingPeriod = 30 days;\r\n    uint256 public stakeClaimFee = 0.01 ether;\r\n    uint256 public totalYield;\r\n    uint256 public totalRewards;\r\n    uint256 public totalLockedStaking;\r\n    \r\n    Token public yfdao;\r\n    \r\n    struct Tokens{\r\n        bool exists;\r\n        uint256 rate;\r\n    }\r\n    \r\n    mapping(address => Tokens) public tokens;\r\n    address[] TokensAddresses;\r\n    \r\n    struct DepositedToken{\r\n      \r\n        uint256 activeDeposit;\r\n        uint256 totalDeposits;\r\n        uint256 startTime;\r\n        uint256 pendingGains;\r\n        uint256 lastClaimedDate;\r\n        uint256 totalGained;\r\n        uint    rate;\r\n        uint    period;\r\n    }\r\n    \r\n    mapping(address => mapping(address => DepositedToken)) public users;\r\n    \r\n    event TokenAdded(address tokenAddress, uint256 APY);\r\n    event TokenRemoved(address tokenAddress);\r\n    event FarmingRateChanged(address tokenAddress, uint256 newAPY);\r\n    event YieldCollectionFeeChanged(uint256 yieldCollectionFee);\r\n    event FarmingStarted(address _tokenAddress, uint256 _amount);\r\n    event YieldCollected(address _tokenAddress, uint256 _yield);\r\n    event AddedToExistingFarm(address _tokenAddress, uint256 tokens);\r\n    \r\n    event Staked(address staker, uint256 tokens);\r\n    event AddedToExistingStake(uint256 tokens);\r\n    event StakingRateChanged(uint256 newAPY);\r\n    event TokensClaimed(address claimer, uint256 stakedTokens);\r\n    event RewardClaimed(address claimer, uint256 reward);\r\n    \r\n    \r\n    \r\n    constructor(address _tokenAddress) public {\r\n        yfdao = Token(_tokenAddress);\r\n        \r\n        // add yfdao token to ecosystem\r\n        _addToken(_tokenAddress, 300); // 40 apy initially\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //####################################################FARMING EXTERNAL FUNCTIONS###########################################################################//\r\n    //#########################################################################################################################################################// \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add assets to farm\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function FARM(address _tokenAddress, uint256 _amount) external{\r\n        require(_tokenAddress != address(yfdao), \"Use staking instead\"); \r\n        \r\n        // add to farm\r\n        _newDeposit(_tokenAddress, _amount);\r\n        \r\n        // transfer tokens from user to the contract balance\r\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        emit FarmingStarted(_tokenAddress, _amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add more deposits to already running farm\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function addToFarm(address _tokenAddress, uint256 _amount) external{\r\n        require(_tokenAddress != address(yfdao), \"use staking instead\");\r\n        _addToExisting(_tokenAddress, _amount);\r\n        \r\n        // move the tokens from the caller to the contract address\r\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender,address(this), _amount));\r\n        \r\n        emit AddedToExistingFarm(_tokenAddress, _amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Withdraw accumulated yield\r\n    // @param _tokenAddress address of the token asset\r\n    // @required must pay yield claim fee\r\n    // ------------------------------------------------------------------------\r\n    function YIELD(address _tokenAddress) external payable {\r\n        require(msg.value >= yieldCollectionFee, \"should pay exact claim fee\");\r\n        require(pendingYield(_tokenAddress, msg.sender) > 0, \"No pending yield\");\r\n        require(tokens[_tokenAddress].exists, \"Token doesn't exist\");\r\n         require(_tokenAddress != address(yfdao), \"use staking instead\");\r\n        uint256 _pendingYield = pendingYield(_tokenAddress, msg.sender);\r\n        \r\n        // Global stats update\r\n        totalYield = totalYield.add(_pendingYield);\r\n        \r\n        // update the record\r\n        users[msg.sender][_tokenAddress].totalGained = users[msg.sender][_tokenAddress].totalGained.add(pendingYield(_tokenAddress, msg.sender));\r\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\r\n        users[msg.sender][_tokenAddress].pendingGains = 0;\r\n        \r\n        // transfer fee to the owner\r\n        owner.transfer(msg.value);\r\n        \r\n        // mint more tokens inside token contract equivalent to _pendingYield\r\n        require(yfdao.mintTokens(_pendingYield, msg.sender));\r\n        \r\n        emit YieldCollected(_tokenAddress, _pendingYield);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Withdraw any amount of tokens, the contract will update the farming \r\n    // @param _tokenAddress address of the token asset\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function withdrawFarmedTokens(address _tokenAddress, uint256 _amount) external {\r\n         require(users[msg.sender][_tokenAddress].activeDeposit >= _amount, \"insufficient amount in farming\");\r\n        require(_tokenAddress != address(yfdao), \"use withdraw of staking instead\");\r\n        \r\n        // update farming stats\r\n            // check if we have any pending yield, add it to previousYield var\r\n            users[msg.sender][_tokenAddress].pendingGains = pendingYield(_tokenAddress, msg.sender);\r\n            // update amount \r\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.sub(_amount);\r\n            // update farming start time -- new farming will begin from this time onwards\r\n            users[msg.sender][_tokenAddress].startTime = now;\r\n            // reset last claimed figure as well -- new farming will begin from this time onwards\r\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\r\n        \r\n        // withdraw the tokens and move from contract to the caller\r\n        require(ERC20Interface(_tokenAddress).transfer(msg.sender, _amount));\r\n        \r\n        emit TokensClaimed(msg.sender, _amount);\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //####################################################STAKING EXTERNAL FUNCTIONS###########################################################################//\r\n    //#########################################################################################################################################################//    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Start staking\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function STAKE(uint256 _amount) external  {\r\n        // add new stake\r\n        _newDeposit(address(yfdao), _amount);\r\n        totalLockedStaking=totalLockedStaking.add(_amount);\r\n        // transfer tokens from user to the contract balance\r\n        require(yfdao.transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        emit Staked(msg.sender, _amount);\r\n        \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add more deposits to already running farm\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _amount amount of tokens to deposit\r\n    // ------------------------------------------------------------------------\r\n    function addToStake(uint256 _amount) external {\r\n        require(now - users[msg.sender][address(yfdao)].startTime < users[msg.sender][address(yfdao)].period, \"current staking expired\");\r\n        _addToExisting(address(yfdao), _amount);\r\n         totalLockedStaking=totalLockedStaking.add(_amount);\r\n\r\n        // move the tokens from the caller to the contract address\r\n        require(yfdao.transferFrom(msg.sender,address(this), _amount));\r\n        \r\n        emit AddedToExistingStake(_amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Claim reward and staked tokens\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function ClaimStakedTokens() external {\r\n         //require(users[msg.sender][address(yfdao)].running, \"no running stake\");\r\n        require(users[msg.sender][address(yfdao)].activeDeposit > 0, \"no running stake\");\r\n        require(users[msg.sender][address(yfdao)].startTime.add(users[msg.sender][address(yfdao)].period) < now, \"not claimable before staking period\");\r\n        \r\n        uint256 _currentDeposit = users[msg.sender][address(yfdao)].activeDeposit;\r\n        \r\n        // check if we have any pending reward, add it to pendingGains var\r\n        users[msg.sender][address(yfdao)].pendingGains = pendingReward(msg.sender);\r\n        // update amount \r\n        users[msg.sender][address(yfdao)].activeDeposit = 0;\r\n        \r\n        // transfer staked tokens\r\n        require(yfdao.transfer(msg.sender, _currentDeposit));\r\n        \r\n        emit TokensClaimed(msg.sender, _currentDeposit);\r\n        \r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Claim reward and staked tokens\r\n    // @required user must be a staker\r\n    // @required must be claimable\r\n    // ------------------------------------------------------------------------\r\n    function ClaimReward() external payable {\r\n         require(msg.value >= stakeClaimFee, \"should pay exact claim fee\");\r\n        require(pendingReward(msg.sender) > 0, \"nothing pending to claim\");\r\n    \r\n        uint256 _pendingReward = pendingReward(msg.sender);\r\n        \r\n        // add claimed reward to global stats\r\n        totalRewards = totalRewards.add(_pendingReward);\r\n        // add the reward to total claimed rewards\r\n        users[msg.sender][address(yfdao)].totalGained = users[msg.sender][address(yfdao)].totalGained.add(_pendingReward);\r\n        // update lastClaim amount\r\n        users[msg.sender][address(yfdao)].lastClaimedDate = now;\r\n        // reset previous rewards\r\n        users[msg.sender][address(yfdao)].pendingGains = 0;\r\n        \r\n        // transfer the claim fee to the owner\r\n        owner.transfer(msg.value);\r\n        \r\n        // mint more tokens inside token contract\r\n        require(yfdao.mintTokens(_pendingReward, msg.sender));\r\n         \r\n        emit RewardClaimed(msg.sender, _pendingReward);\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //##########################################################FARMING QUERIES################################################################################//\r\n    //#########################################################################################################################################################//\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the pending yield\r\n    // @param _tokenAddress address of the token asset\r\n    // ------------------------------------------------------------------------\r\n    function pendingYield(address _tokenAddress, address _caller) public view returns(uint256 _pendingRewardWeis){\r\n        uint256 _totalFarmingTime = now.sub(users[_caller][_tokenAddress].lastClaimedDate);\r\n        \r\n        uint256 _reward_token_second = ((tokens[_tokenAddress].rate).mul(10 ** 21)).div(365 days); // added extra 10^21\r\n        \r\n        uint256 yield = ((users[_caller][_tokenAddress].activeDeposit).mul(_totalFarmingTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // 10^2 are for 100 (%)\r\n        \r\n        return yield.add(users[_caller][_tokenAddress].pendingGains);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the active farm of the user\r\n    // @param farming asset/ token address\r\n    // ------------------------------------------------------------------------\r\n    function activeFarmDeposit(address _tokenAddress, address _user) external view returns(uint256 _activeDeposit){\r\n        return users[_user][_tokenAddress].activeDeposit;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the total farming of the user\r\n    // @param farming asset/ token address\r\n    // ------------------------------------------------------------------------\r\n    function yourTotalFarmingTillToday(address _tokenAddress, address _user) external view returns(uint256 _totalFarming){\r\n        return users[_user][_tokenAddress].totalDeposits;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the time of last farming of user\r\n    // ------------------------------------------------------------------------\r\n    function lastFarmedOn(address _tokenAddress, address _user) external view returns(uint256 _unixLastFarmedTime){\r\n        return users[_user][_tokenAddress].startTime;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get total earned rewards from particular farming\r\n    // @param farming asset/ token address\r\n    // ------------------------------------------------------------------------\r\n    function totalFarmingRewards(address _tokenAddress, address _user) external view returns(uint256 _totalEarned){\r\n        return users[_user][_tokenAddress].totalGained;\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //####################################################FARMING ONLY OWNER FUNCTIONS#########################################################################//\r\n    //#########################################################################################################################################################//\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add supported tokens\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _farmingRate rate applied for farming yield to produce\r\n    // @required only owner \r\n    // ------------------------------------------------------------------------    \r\n    function addToken(address _tokenAddress, uint256 _rate) external onlyOwner {\r\n        _addToken(_tokenAddress, _rate);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Remove tokens if no longer supported\r\n    // @param _tokenAddress address of the token asset\r\n    // @required only owner \r\n    // ------------------------------------------------------------------------  \r\n    function removeToken(address _tokenAddress) external onlyOwner {\r\n        \r\n        require(tokens[_tokenAddress].exists, \"token doesn't exist\");\r\n        \r\n        tokens[_tokenAddress].exists = false;\r\n        \r\n        emit TokenRemoved(_tokenAddress);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change farming rate of the supported token\r\n    // @param _tokenAddress address of the token asset\r\n    // @param _newFarmingRate new rate applied for farming yield to produce\r\n    // @required only owner \r\n    // ------------------------------------------------------------------------  \r\n    function changeFarmingRate(address _tokenAddress, uint256 _newFarmingRate) external onlyOwner {\r\n        \r\n        require(tokens[_tokenAddress].exists, \"token doesn't exist\");\r\n        \r\n        tokens[_tokenAddress].rate = _newFarmingRate;\r\n        \r\n        emit FarmingRateChanged(_tokenAddress, _newFarmingRate);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Change Yield collection fee\r\n    // @param _fee fee to claim the yield\r\n    // @required only owner \r\n    // ------------------------------------------------------------------------     \r\n    function setYieldCollectionFee(uint256 _fee) public onlyOwner{\r\n        yieldCollectionFee = _fee;\r\n        emit YieldCollectionFeeChanged(_fee);\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //####################################################STAKING QUERIES######################################################################################//\r\n    //#########################################################################################################################################################//\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the pending reward\r\n    // ------------------------------------------------------------------------\r\n    function pendingReward(address _caller) public view returns(uint256 _pendingReward){\r\n         uint256 _totalStakedTime = 0;\r\n        uint256 expiryDate = (users[_caller][address(yfdao)].period).add(users[_caller][address(yfdao)].startTime);\r\n        \r\n        if(now < expiryDate)\r\n            _totalStakedTime = now.sub(users[_caller][address(yfdao)].lastClaimedDate);\r\n        else{\r\n            if(users[_caller][address(yfdao)].lastClaimedDate >= expiryDate) // if claimed after expirydate already\r\n                _totalStakedTime = 0;\r\n            else\r\n                _totalStakedTime = expiryDate.sub(users[_caller][address(yfdao)].lastClaimedDate);\r\n        }\r\n            \r\n        uint256 _reward_token_second = ((users[_caller][address(yfdao)].rate).mul(10 ** 21)); // added extra 10^21\r\n        uint256 reward =  ((users[_caller][address(yfdao)].activeDeposit).mul(_totalStakedTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // the two extra 10^2 is for 100 (%) // another two extra 10^4 is for decimals to be allowed\r\n        reward = reward.div(365 days);\r\n        return (reward.add(users[_caller][address(yfdao)].pendingGains));\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the active stake of the user\r\n    // ------------------------------------------------------------------------\r\n    function yourActiveStake(address _user) external view returns(uint256 _activeStake){\r\n        return users[_user][address(yfdao)].activeDeposit;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the total stakes of the user\r\n    // ------------------------------------------------------------------------\r\n    function yourTotalStakesTillToday(address _user) external view returns(uint256 _totalStakes){\r\n        return users[_user][address(yfdao)].totalDeposits;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the time of last stake of user\r\n    // ------------------------------------------------------------------------\r\n    function lastStakedOn(address _user) public view returns(uint256 _unixLastStakedTime){\r\n        return users[_user][address(yfdao)].startTime;\r\n    }\r\n    \r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get total earned rewards from stake\r\n    // ------------------------------------------------------------------------\r\n    function totalStakeRewardsClaimedTillToday(address _user) external view returns(uint256 _totalEarned){\r\n        return users[_user][address(yfdao)].totalGained;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the staking rate\r\n    // ------------------------------------------------------------------------\r\n    function latestStakingRate() public view returns(uint256 APY){\r\n        return tokens[address(yfdao)].rate;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the staking rate you staked at\r\n    // ------------------------------------------------------------------------\r\n    function yourStakingRate(address _user) public view returns(uint256 _stakingRate){\r\n        return users[_user][address(yfdao)].rate;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the staking period you staked at\r\n    // ------------------------------------------------------------------------\r\n    function yourStakingPeriod(address _user) public view returns(uint256 _stakingPeriod){\r\n        return users[_user][address(yfdao)].period;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the staking time left\r\n    // ------------------------------------------------------------------------\r\n    function stakingTimeLeft(address _user) external view returns(uint256 _secsLeft){\r\n        uint256 left = 0; \r\n        uint256 expiryDate = (users[_user][address(yfdao)].period).add(lastStakedOn(_user));\r\n        \r\n        if(now < expiryDate)\r\n            left = expiryDate.sub(now);\r\n            \r\n        return left;\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //####################################################STAKING ONLY OWNER FUNCTION##########################################################################//\r\n    //#########################################################################################################################################################//\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change staking rate\r\n    // @param _newStakingRate new rate applied for staking\r\n    // @required only owner \r\n    // ------------------------------------------------------------------------  \r\n    function changeStakingRate(uint256 _newStakingRate) public onlyOwner{\r\n        \r\n        tokens[address(yfdao)].rate = _newStakingRate;\r\n        \r\n        emit StakingRateChanged(_newStakingRate);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add accounts to the white list\r\n    // @param _account the address of the account to be added to the whitelist\r\n    // @required only callable by owner\r\n    // ------------------------------------------------------------------------\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change the staking period\r\n    // @param _seconds number of seconds to stake (n days = n*24*60*60)\r\n    // @required only callable by owner\r\n    // ------------------------------------------------------------------------\r\n    function setStakingPeriod(uint256 _seconds) public onlyOwner{\r\n       stakingPeriod = _seconds;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change the staking claim fee\r\n    // @param _fee claim fee in weis\r\n    // @required only callable by owner\r\n    // ------------------------------------------------------------------------\r\n    function setClaimFee(uint256 _fee) public onlyOwner{\r\n       stakeClaimFee = _fee;\r\n    }\r\n    \r\n    //#########################################################################################################################################################//\r\n    //################################################################COMMON UTILITIES#########################################################################//\r\n    //#########################################################################################################################################################//    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Internal function to add new deposit\r\n    // ------------------------------------------------------------------------        \r\n    function _newDeposit(address _tokenAddress, uint256 _amount) internal{\r\n        require(users[msg.sender][_tokenAddress].activeDeposit ==  0, \"Already running\");\r\n        require(tokens[_tokenAddress].exists, \"Token doesn't exist\");\r\n        \r\n        // add that token into the contract balance\r\n        // check if we have any pending reward/yield, add it to pendingGains variable\r\n        if(_tokenAddress == address(yfdao)){\r\n            users[msg.sender][_tokenAddress].pendingGains = pendingReward(msg.sender);\r\n            users[msg.sender][_tokenAddress].period = stakingPeriod;\r\n            users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate for stakers will be fixed at time of staking\r\n        }\r\n        else\r\n       users[msg.sender][_tokenAddress].pendingGains = pendingYield(_tokenAddress, msg.sender);\r\n            \r\n        users[msg.sender][_tokenAddress].activeDeposit = _amount;\r\n        users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\r\n        users[msg.sender][_tokenAddress].startTime = now;\r\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\r\n        \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Internal function to add to existing deposit\r\n    // ------------------------------------------------------------------------        \r\n     function _addToExisting(address _tokenAddress, uint256 _amount) internal{\r\n        require(tokens[_tokenAddress].exists, \"Token doesn't exist\");\r\n        // require(users[msg.sender][_tokenAddress].running, \"no running farming/stake\");\r\n        require(users[msg.sender][_tokenAddress].activeDeposit > 0, \"no running farming/stake\");\r\n        // update farming stats\r\n            // check if we have any pending reward/yield, add it to pendingGains variable\r\n            if(_tokenAddress == address(yfdao)){\r\n                users[msg.sender][_tokenAddress].pendingGains = pendingReward(msg.sender);\r\n                users[msg.sender][_tokenAddress].period = stakingPeriod;\r\n                users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate of only staking will be updated when more is added to stake\r\n            }\r\n            else\r\n                users[msg.sender][_tokenAddress].pendingGains = pendingYield(_tokenAddress, msg.sender);\r\n            // update current deposited amount \r\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.add(_amount);\r\n            // update total deposits till today\r\n            users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\r\n            // update new deposit start time -- new stake/farming will begin from this time onwards\r\n            users[msg.sender][_tokenAddress].startTime = now;\r\n            // reset last claimed figure as well -- new stake/farming will begin from this time onwards\r\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Internal function to add token\r\n    // ------------------------------------------------------------------------     \r\n    function _addToken(address _tokenAddress, uint256 _rate) internal{\r\n        require(!tokens[_tokenAddress].exists, \"token already exists\");\r\n        \r\n        tokens[_tokenAddress] = Tokens({\r\n            exists: true,\r\n            rate: _rate\r\n        });\r\n        \r\n        TokensAddresses.push(_tokenAddress);\r\n        emit TokenAdded(_tokenAddress, _rate);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"FarmingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FarmingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"StakingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldCollectionFee\",\"type\":\"uint256\"}],\"name\":\"YieldCollectionFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FARM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"YIELD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"activeFarmDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFarmingRate\",\"type\":\"uint256\"}],\"name\":\"changeFarmingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingRate\",\"type\":\"uint256\"}],\"name\":\"changeStakingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lastFarmedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastFarmedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lastStakedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastStakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"pendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingRewardWeis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setYieldCollectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeClaimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakingTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalFarmingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalStakeRewardsClaimedTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingGains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGained\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFarmedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yfdao\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"yourActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"yourStakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"yourStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"yourTotalFarmingTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFarming\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"yourTotalStakesTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YFDAO_STAKE_FARM","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000098cc695d0c6e40239ea9c2411b71a17b6a85d5ea","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://33466f74eea7b2d63a143425fab039392816ebab224f86611219e45fd0d64ddd"}]}