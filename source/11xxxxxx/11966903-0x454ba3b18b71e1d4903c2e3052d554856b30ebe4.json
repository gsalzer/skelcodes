{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function drip() external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function file(bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ncontract FlipperMomAbstract {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\r\ncontract IlkRegistryAbstract {\r\n    function list() external view returns (bytes32[] memory);\r\n    function flip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log/blob/master/src/ChainLog.sol\r\ncontract ChainlogAbstract {\r\n    function getAddress(bytes32) public view returns (address);\r\n}\r\n\r\ncontract SpellAction {\r\n    // This address should correspond to the latest MCD Chainlog contract; verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant ZERO_PCT_RATE = 1000000000000000000000000000;\r\n\r\n    // Common orders of magnitude needed in spells\r\n    //\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n    uint256 constant RAD = 10**45;\r\n    uint256 constant MLN = 10**6;\r\n    uint256 constant BLN = 10**9;\r\n\r\n    function execute() external {\r\n        address MCD_VAT      = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        address MCD_JUG      = CHANGELOG.getAddress(\"MCD_JUG\");\r\n        address MCD_POT      = CHANGELOG.getAddress(\"MCD_POT\");\r\n        address ILK_REGISTRY = CHANGELOG.getAddress(\"ILK_REGISTRY\");\r\n        uint256 totalLine = 0;\r\n\r\n        // MCD Modifications\r\n\r\n        // Ensure we drip pot prior to modifications (housekeeping).\r\n        //\r\n        PotAbstract(MCD_POT).drip();\r\n\r\n        // Set the Dai Savings Rate\r\n        // DSR_RATE is a value determined by the rate accumulator calculation\r\n        // ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        PotAbstract(MCD_POT).file(\"dsr\", ZERO_PCT_RATE);\r\n\r\n        // Loop over all ilks\r\n        //\r\n        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);\r\n        bytes32[] memory ilks = registry.list();\r\n\r\n        for (uint i = 0; i < ilks.length; i++) {\r\n            // Set the ilk's flip tau\r\n            //\r\n            FlipAbstract(registry.flip(ilks[i])).file(bytes32(\"tau\"), 24 hours);\r\n\r\n            // skip the rest of the loop for the following ilks:\r\n            //\r\n            if (ilks[i] == \"USDC-B\") {\r\n                continue;\r\n            }\r\n\r\n            // Always drip the ilk prior to modifications (housekeeping)\r\n            //\r\n            JugAbstract(MCD_JUG).drip(ilks[i]);\r\n\r\n            // Set the ilk stability fee\r\n            //\r\n            JugAbstract(MCD_JUG).file(ilks[i], \"duty\", ZERO_PCT_RATE);\r\n\r\n            // Keep a running total of all ilk Debt Ceilings\r\n            //\r\n            (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks(ilks[i]);\r\n            totalLine += ilkLine;\r\n        }\r\n\r\n        // Set the USDC-B debt ceiling\r\n        // USDC_B_LINE is the number of Dai that can be created with USDC token\r\n        // collateral.\r\n        // ex. a 60 million Dai USDC-B ceiling will be USDC_B_LINE = 60000000\r\n        //\r\n        // New Line: +50m\r\n        (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks(\"USDC-B\");\r\n        uint256 USDC_B_LINE = ilkLine + (50 * MLN * RAD);\r\n        VatAbstract(MCD_VAT).file(\"USDC-B\", \"line\", USDC_B_LINE);\r\n        totalLine += USDC_B_LINE;\r\n\r\n        // Set the Global Debt Ceiling to the sum of all ilk line\r\n        //\r\n        VatAbstract(MCD_VAT).file(\"Line\", totalLine);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    // This address should correspond to the latest MCD Chainlog contract; verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\r\n    ChainlogAbstract constant CHANGELOG =\r\n        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n\r\n    DSPauseAbstract  public pause;\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    uint256 constant T2021_07_01_1200UTC = 1625140800;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    string constant public description = \"DEFCON-2 Emergency Spell\";\r\n\r\n    constructor() public {\r\n        address MCD_PAUSE = CHANGELOG.getAddress(\"MCD_PAUSE\");\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        pause = DSPauseAbstract(MCD_PAUSE);\r\n        expiration = T2021_07_01_1200UTC;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + pause.delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://806bcb7c1d8a20e06490c9fcf81bcc527958608a8290cf5d833dbd06a9e416bf"}]}