{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/builders/CompoundPrizePoolBuilder.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PrizePoolBuilder.sol\\\";\\nimport \\\"./SingleRandomWinnerBuilder.sol\\\";\\nimport \\\"../registry/RegistryInterface.sol\\\";\\nimport \\\"../prize-strategy/single-random-winner/SingleRandomWinnerProxyFactory.sol\\\";\\nimport \\\"../prize-pool/compound/CompoundPrizePoolProxyFactory.sol\\\";\\nimport \\\"../token/ControlledTokenProxyFactory.sol\\\";\\nimport \\\"../token/TicketProxyFactory.sol\\\";\\nimport \\\"../external/compound/CTokenInterface.sol\\\";\\nimport \\\"../external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol\\\";\\n\\n/// @title Builds new Compound Prize Pools\\n/* solium-disable security/no-block-members */\\ncontract CompoundPrizePoolBuilder is PrizePoolBuilder {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  struct CompoundPrizePoolConfig {\\n    CTokenInterface cToken;\\n    uint256 maxExitFeeMantissa;\\n    uint256 maxTimelockDuration;\\n  }\\n\\n  RegistryInterface public reserveRegistry;\\n  CompoundPrizePoolProxyFactory public compoundPrizePoolProxyFactory;\\n  SingleRandomWinnerBuilder public singleRandomWinnerBuilder;\\n  address public trustedForwarder;\\n\\n  constructor (\\n    RegistryInterface _reserveRegistry,\\n    address _trustedForwarder,\\n    CompoundPrizePoolProxyFactory _compoundPrizePoolProxyFactory,\\n    SingleRandomWinnerBuilder _singleRandomWinnerBuilder\\n  ) public {\\n    require(address(_reserveRegistry) != address(0), \\\"CompoundPrizePoolBuilder/reserveRegistry-not-zero\\\");\\n    require(address(_singleRandomWinnerBuilder) != address(0), \\\"CompoundPrizePoolBuilder/single-random-winner-builder-not-zero\\\");\\n    require(address(_compoundPrizePoolProxyFactory) != address(0), \\\"CompoundPrizePoolBuilder/compound-prize-pool-builder-not-zero\\\");\\n    reserveRegistry = _reserveRegistry;\\n    singleRandomWinnerBuilder = _singleRandomWinnerBuilder;\\n    trustedForwarder = _trustedForwarder;\\n    compoundPrizePoolProxyFactory = _compoundPrizePoolProxyFactory;\\n  }\\n\\n  function createSingleRandomWinner(\\n    CompoundPrizePoolConfig calldata prizePoolConfig,\\n    SingleRandomWinnerBuilder.SingleRandomWinnerConfig calldata prizeStrategyConfig,\\n    uint8 decimals\\n  ) external returns (CompoundPrizePool) {\\n    CompoundPrizePool prizePool = compoundPrizePoolProxyFactory.create();\\n\\n    SingleRandomWinner prizeStrategy = singleRandomWinnerBuilder.createSingleRandomWinner(\\n      prizePool,\\n      prizeStrategyConfig,\\n      decimals,\\n      msg.sender\\n    );\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      prizePoolConfig.maxExitFeeMantissa,\\n      prizePoolConfig.maxTimelockDuration,\\n      prizePoolConfig.cToken\\n    );\\n\\n    _setupSingleRandomWinner(\\n      prizePool,\\n      prizeStrategy,\\n      prizeStrategyConfig.ticketCreditRateMantissa,\\n      prizeStrategyConfig.ticketCreditLimitMantissa\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n\\n  function createCompoundPrizePool(\\n    CompoundPrizePoolConfig calldata config\\n  )\\n    external\\n    returns (CompoundPrizePool)\\n  {\\n    CompoundPrizePool prizePool = compoundPrizePoolProxyFactory.create();\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      config.maxExitFeeMantissa,\\n      config.maxTimelockDuration,\\n      config.cToken\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/builders/PrizePoolBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-pool/PrizePool.sol\\\";\\nimport \\\"../prize-strategy/single-random-winner/SingleRandomWinner.sol\\\";\\n\\ncontract PrizePoolBuilder {\\n  using SafeCast for uint256;\\n\\n  event PrizePoolCreated (\\n    address indexed creator,\\n    address indexed prizePool\\n  );\\n\\n  function _setupSingleRandomWinner(\\n    PrizePool prizePool,\\n    SingleRandomWinner singleRandomWinner,\\n    uint256 ticketCreditRateMantissa,\\n    uint256 ticketCreditLimitMantissa\\n  ) internal {\\n    address ticket = address(singleRandomWinner.ticket());\\n\\n    prizePool.setPrizeStrategy(singleRandomWinner);\\n\\n    prizePool.addControlledToken(ticket);\\n    prizePool.addControlledToken(address(singleRandomWinner.sponsorship()));\\n\\n    prizePool.setCreditPlanOf(\\n      ticket,\\n      ticketCreditRateMantissa.toUint128(),\\n      ticketCreditLimitMantissa.toUint128()\\n    );\\n  }\\n}\"\r\n    },\r\n    \"contracts/prize-pool/PrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"../registry/RegistryInterface.sol\\\";\\nimport \\\"../reserve/ReserveInterface.sol\\\";\\nimport \\\"./YieldSource.sol\\\";\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\nimport \\\"../token/ControlledToken.sol\\\";\\nimport \\\"../token/TokenControllerInterface.sol\\\";\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"../utils/RelayRecipient.sol\\\";\\nimport \\\"./PrizePoolInterface.sol\\\";\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\nabstract contract PrizePool is PrizePoolInterface, YieldSource, OwnableUpgradeSafe, RelayRecipient, ReentrancyGuardUpgradeSafe, TokenControllerInterface {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Initialized(\\n    address trustedForwarder,\\n    address reserveRegistry,\\n    uint256 maxExitFeeMantissa,\\n    uint256 maxTimelockDuration\\n  );\\n\\n  /// @dev Event emitted when controlled token is added\\n  event ControlledTokenAdded(\\n    address indexed token\\n  );\\n\\n  /// @dev Emitted when reserve is captured.\\n  event ReserveFeeCaptured(\\n    uint256 amount\\n  );\\n\\n  event AwardCaptured(\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when assets are deposited\\n  event Deposited(\\n    address indexed operator,\\n    address indexed to,\\n    address indexed token,\\n    uint256 amount,\\n    address referrer\\n  );\\n\\n  /// @dev Event emitted when timelocked funds are re-deposited\\n  event TimelockDeposited(\\n    address indexed operator,\\n    address indexed to,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when interest is awarded to a winner\\n  event Awarded(\\n    address indexed winner,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC20s are awarded to a winner\\n  event AwardedExternalERC20(\\n    address indexed winner,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC20s are transferred out\\n  event TransferredExternalERC20(\\n    address indexed to,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC721s are awarded to a winner\\n  event AwardedExternalERC721(\\n    address indexed winner,\\n    address indexed token,\\n    uint256[] tokenIds\\n  );\\n\\n  /// @dev Event emitted when assets are withdrawn instantly\\n  event InstantWithdrawal(\\n    address indexed operator,\\n    address indexed from,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 redeemed,\\n    uint256 exitFee\\n  );\\n\\n  /// @dev Event emitted upon a withdrawal with timelock\\n  event TimelockedWithdrawal(\\n    address indexed operator,\\n    address indexed from,\\n    address indexed token,\\n    uint256 amount,\\n    uint256 unlockTimestamp\\n  );\\n\\n  event ReserveWithdrawal(\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when timelocked funds are swept back to a user\\n  event TimelockedWithdrawalSwept(\\n    address indexed operator,\\n    address indexed from,\\n    uint256 amount,\\n    uint256 redeemed\\n  );\\n\\n  /// @dev Event emitted when the Liquidity Cap is set\\n  event LiquidityCapSet(\\n    uint256 liquidityCap\\n  );\\n\\n  /// @dev Event emitted when the Credit plan is set\\n  event CreditPlanSet(\\n    address token,\\n    uint128 creditLimitMantissa,\\n    uint128 creditRateMantissa\\n  );\\n\\n  /// @dev Event emitted when the Prize Strategy is set\\n  event PrizeStrategySet(\\n    address indexed prizeStrategy\\n  );\\n\\n  /// @dev Emitted when credit is minted\\n  event CreditMinted(\\n    address indexed user,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Emitted when credit is burned\\n  event CreditBurned(\\n    address indexed user,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  struct CreditPlan {\\n    uint128 creditLimitMantissa;\\n    uint128 creditRateMantissa;\\n  }\\n\\n  struct CreditBalance {\\n    uint192 balance;\\n    uint32 timestamp;\\n    bool initialized;\\n  }\\n\\n  /// @dev Reserve to which reserve fees are sent\\n  RegistryInterface public reserveRegistry;\\n\\n  /// @dev A linked list of all the controlled tokens\\n  MappedSinglyLinkedList.Mapping internal _tokens;\\n\\n  /// @dev The Prize Strategy that this Prize Pool is bound to.\\n  TokenListenerInterface public prizeStrategy;\\n\\n  /// @dev The maximum possible exit fee fraction as a fixed point 18 number.\\n  /// For example, if the maxExitFeeMantissa is \\\"0.1 ether\\\", then the maximum exit fee for a withdrawal of 100 Dai will be 10 Dai\\n  uint256 public maxExitFeeMantissa;\\n\\n  /// @dev The maximum possible timelock duration for a timelocked withdrawal (in seconds).\\n  uint256 public maxTimelockDuration;\\n\\n  /// @dev The total funds that are timelocked.\\n  uint256 public timelockTotalSupply;\\n\\n  /// @dev The total funds that have been allocated to the reserve\\n  uint256 public reserveTotalSupply;\\n\\n  /// @dev The total amount of funds that the prize pool can hold.\\n  uint256 public liquidityCap;\\n\\n  /// @dev the The awardable balance\\n  uint256 internal _currentAwardBalance;\\n\\n  /// @dev The timelocked balances for each user\\n  mapping(address => uint256) internal _timelockBalances;\\n\\n  /// @dev The unlock timestamps for each user\\n  mapping(address => uint256) internal _unlockTimestamps;\\n\\n  /// @dev Stores the credit plan for each token.\\n  mapping(address => CreditPlan) internal tokenCreditPlans;\\n\\n  /// @dev Stores each users balance of credit per token.\\n  mapping(address => mapping(address => CreditBalance)) internal tokenCreditBalances;\\n\\n  /// @notice Initializes the Prize Pool\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controlledTokens Array of ControlledTokens that are controlled by this Prize Pool.\\n  /// @param _maxExitFeeMantissa The maximum exit fee size\\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock\\n  function initialize (\\n    address _trustedForwarder,\\n    RegistryInterface _reserveRegistry,\\n    address[] memory _controlledTokens,\\n    uint256 _maxExitFeeMantissa,\\n    uint256 _maxTimelockDuration\\n  )\\n    public\\n    initializer\\n  {\\n    require(address(_reserveRegistry) != address(0), \\\"PrizePool/reserveRegistry-not-zero\\\");\\n    require(_trustedForwarder != address(0), \\\"PrizePool/forwarder-not-zero\\\");\\n    _tokens.initialize();\\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\\n      _addControlledToken(_controlledTokens[i]);\\n    }\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    _setLiquidityCap(uint256(-1));\\n\\n    trustedForwarder = _trustedForwarder;\\n    reserveRegistry = _reserveRegistry;\\n    maxExitFeeMantissa = _maxExitFeeMantissa;\\n    maxTimelockDuration = _maxTimelockDuration;\\n\\n    emit Initialized(\\n      _trustedForwarder,\\n      address(_reserveRegistry),\\n      maxExitFeeMantissa,\\n      maxTimelockDuration\\n    );\\n  }\\n\\n  /// @dev Returns the address of the underlying ERC20 asset\\n  /// @return The address of the asset\\n  function token() external override view returns (IERC20) {\\n    return _token();\\n  }\\n\\n  /// @dev Returns the total underlying balance of all assets. This includes both principal and interest.\\n  /// @return The underlying balance of assets\\n  function balance() external returns (uint256) {\\n    return _balance();\\n  }\\n\\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function canAwardExternal(address _externalToken) external view returns (bool) {\\n    return _canAwardExternal(_externalToken);\\n  }\\n\\n  /// @notice Deposits timelocked tokens for a user back into the Prize Pool as another asset.\\n  /// @param to The address receiving the tokens\\n  /// @param amount The amount of timelocked assets to re-deposit\\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\\n  function timelockDepositTo(\\n    address to,\\n    uint256 amount,\\n    address controlledToken\\n  )\\n    external\\n    onlyControlledToken(controlledToken)\\n    canAddLiquidity(amount)\\n    nonReentrant\\n  {\\n    address operator = _msgSender();\\n    _mint(to, amount, controlledToken, address(0));\\n    _timelockBalances[operator] = _timelockBalances[operator].sub(amount);\\n    timelockTotalSupply = timelockTotalSupply.sub(amount);\\n\\n    emit TimelockDeposited(operator, to, controlledToken, amount);\\n  }\\n\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n  /// @param to The address receiving the newly minted tokens\\n  /// @param amount The amount of assets to deposit\\n  /// @param controlledToken The address of the type of token the user is minting\\n  /// @param referrer The referrer of the deposit\\n  function depositTo(\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  )\\n    external override\\n    onlyControlledToken(controlledToken)\\n    canAddLiquidity(amount)\\n    nonReentrant\\n  {\\n    address operator = _msgSender();\\n\\n    _mint(to, amount, controlledToken, referrer);\\n\\n    _token().safeTransferFrom(operator, address(this), amount);\\n    _supply(amount);\\n\\n    emit Deposited(operator, to, controlledToken, amount, referrer);\\n  }\\n\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n  /// @param from The address to redeem tokens from.\\n  /// @param amount The amount of tokens to redeem for assets.\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\\n  /// @return The actual exit fee paid\\n  function withdrawInstantlyFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken,\\n    uint256 maximumExitFee\\n  )\\n    external override\\n    nonReentrant\\n    onlyControlledToken(controlledToken)\\n    returns (uint256)\\n  {\\n    (uint256 exitFee, uint256 burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\n    require(exitFee <= maximumExitFee, \\\"PrizePool/exit-fee-exceeds-user-maximum\\\");\\n\\n    // burn the credit\\n    _burnCredit(from, controlledToken, burnedCredit);\\n\\n    // burn the tickets\\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\\n\\n    // redeem the tickets less the fee\\n    uint256 amountLessFee = amount.sub(exitFee);\\n    uint256 redeemed = _redeem(amountLessFee);\\n\\n    _token().safeTransfer(from, redeemed);\\n\\n    emit InstantWithdrawal(_msgSender(), from, controlledToken, amount, redeemed, exitFee);\\n\\n    return exitFee;\\n  }\\n\\n  /// @notice Limits the exit fee to the maximum as hard-coded into the contract\\n  /// @param withdrawalAmount The amount that is attempting to be withdrawn\\n  /// @param exitFee The exit fee to check against the limit\\n  /// @return The passed exit fee if it is less than the maximum, otherwise the maximum fee is returned.\\n  function _limitExitFee(uint256 withdrawalAmount, uint256 exitFee) internal view returns (uint256) {\\n    uint256 maxFee = FixedPoint.multiplyUintByMantissa(withdrawalAmount, maxExitFeeMantissa);\\n    if (exitFee > maxFee) {\\n      exitFee = maxFee;\\n    }\\n    return exitFee;\\n  }\\n\\n  /// @notice Withdraw assets from the Prize Pool by placing them into the timelock.\\n  /// The timelock is used to ensure that the tickets have contributed their fair share of the prize.\\n  /// @dev Note that if the user has previously timelocked funds then this contract will try to sweep them.\\n  /// If the existing timelocked funds are still locked, then the incoming\\n  /// balance is added to their existing balance and the new timelock unlock timestamp will overwrite the old one.\\n  /// @param from The address to withdraw from\\n  /// @param amount The amount to withdraw\\n  /// @param controlledToken The type of token being withdrawn\\n  /// @return The timestamp from which the funds can be swept\\n  function withdrawWithTimelockFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken\\n  )\\n    external override\\n    nonReentrant\\n    onlyControlledToken(controlledToken)\\n    returns (uint256)\\n  {\\n    uint256 blockTime = _currentTime();\\n    (uint256 lockDuration, uint256 burnedCredit) = _calculateTimelockDuration(from, controlledToken, amount);\\n    uint256 unlockTimestamp = blockTime.add(lockDuration);\\n    _burnCredit(from, controlledToken, burnedCredit);\\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\\n    _mintTimelock(from, amount, unlockTimestamp);\\n    emit TimelockedWithdrawal(_msgSender(), from, controlledToken, amount, unlockTimestamp);\\n\\n    // return the block at which the funds will be available\\n    return unlockTimestamp;\\n  }\\n\\n  /// @notice Adds to a user's timelock balance.  It will attempt to sweep before updating the balance.\\n  /// Note that this will overwrite the previous unlock timestamp.\\n  /// @param user The user whose timelock balance should increase\\n  /// @param amount The amount to increase by\\n  /// @param timestamp The new unlock timestamp\\n  function _mintTimelock(address user, uint256 amount, uint256 timestamp) internal {\\n    // Sweep the old balance, if any\\n    address[] memory users = new address[](1);\\n    users[0] = user;\\n    _sweepTimelockBalances(users);\\n\\n    timelockTotalSupply = timelockTotalSupply.add(amount);\\n    _timelockBalances[user] = _timelockBalances[user].add(amount);\\n    _unlockTimestamps[user] = timestamp;\\n\\n    // if the funds should already be unlocked\\n    if (timestamp <= _currentTime()) {\\n      _sweepTimelockBalances(users);\\n    }\\n  }\\n\\n  /// @notice Updates the Prize Strategy when tokens are transferred between holders.\\n  /// @param from The address the tokens are being transferred from (0 if minting)\\n  /// @param to The address the tokens are being transferred to (0 if burning)\\n  /// @param amount The amount of tokens being trasferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external override onlyControlledToken(msg.sender) {\\n    if (from != address(0)) {\\n      uint256 fromBeforeBalance = IERC20(msg.sender).balanceOf(from);\\n      // first accrue credit for their old balance\\n      uint256 newCreditBalance = _calculateCreditBalance(from, msg.sender, fromBeforeBalance, 0);\\n      // now limit their credit based on the new balance\\n      newCreditBalance = _applyCreditLimit(msg.sender, fromBeforeBalance.sub(amount), newCreditBalance);\\n      _updateCreditBalance(from, msg.sender, newCreditBalance);\\n    }\\n    if (to != address(0)) {\\n      _accrueCredit(to, msg.sender, IERC20(msg.sender).balanceOf(to), 0);\\n    }\\n    // if we aren't minting\\n    if (from != address(0) && address(prizeStrategy) != address(0)) {\\n      prizeStrategy.beforeTokenTransfer(from, to, amount, msg.sender);\\n    }\\n  }\\n\\n  /// @notice Returns the balance that is available to award.\\n  /// @dev captureAwardBalance() should be called first\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function awardBalance() external override view returns (uint256) {\\n    return _currentAwardBalance;\\n  }\\n\\n  /// @notice Captures any available interest as award balance.\\n  /// @dev This function also captures the reserve fees.\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function captureAwardBalance() external override nonReentrant returns (uint256) {\\n    uint256 tokenTotalSupply = _tokenTotalSupply();\\n\\n    // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\\n    uint256 currentBalance = _balance();\\n    uint256 totalInterest = (currentBalance > tokenTotalSupply) ? currentBalance.sub(tokenTotalSupply) : 0;\\n    uint256 unaccountedPrizeBalance = (totalInterest > _currentAwardBalance) ? totalInterest.sub(_currentAwardBalance) : 0;\\n\\n    if (unaccountedPrizeBalance > 0) {\\n      uint256 reserveFee = calculateReserveFee(unaccountedPrizeBalance);\\n      if (reserveFee > 0) {\\n        reserveTotalSupply = reserveTotalSupply.add(reserveFee);\\n        unaccountedPrizeBalance = unaccountedPrizeBalance.sub(reserveFee);\\n        emit ReserveFeeCaptured(reserveFee);\\n      }\\n      _currentAwardBalance = _currentAwardBalance.add(unaccountedPrizeBalance);\\n\\n      emit AwardCaptured(unaccountedPrizeBalance);\\n    }\\n\\n    return _currentAwardBalance;\\n  }\\n\\n  function withdrawReserve(address to) external override onlyReserve returns (uint256) {\\n\\n    uint256 amount = reserveTotalSupply;\\n    reserveTotalSupply = 0;\\n    uint256 redeemed = _redeem(amount);\\n\\n    _token().safeTransfer(address(to), redeemed);\\n\\n    emit ReserveWithdrawal(to, amount);\\n\\n    return redeemed;\\n  }\\n\\n  /// @notice Called by the prize strategy to award prizes.\\n  /// @dev The amount awarded must be less than the awardBalance()\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of assets to be awarded\\n  /// @param controlledToken The address of the asset token being awarded\\n  function award(\\n    address to,\\n    uint256 amount,\\n    address controlledToken\\n  )\\n    external override\\n    onlyPrizeStrategy\\n    onlyControlledToken(controlledToken)\\n  {\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    require(amount <= _currentAwardBalance, \\\"PrizePool/award-exceeds-avail\\\");\\n    _currentAwardBalance = _currentAwardBalance.sub(amount);\\n\\n    _mint(to, amount, controlledToken, address(0));\\n\\n    uint256 extraCredit = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\\n    _accrueCredit(to, controlledToken, IERC20(controlledToken).balanceOf(to), extraCredit);\\n\\n    emit Awarded(to, controlledToken, amount);\\n  }\\n\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function transferExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    if (_transferOut(to, externalToken, amount)) {\\n      emit TransferredExternalERC20(to, externalToken, amount);\\n    }\\n  }\\n\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function awardExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    if (_transferOut(to, externalToken, amount)) {\\n      emit AwardedExternalERC20(to, externalToken, amount);\\n    }\\n  }\\n\\n  function _transferOut(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    internal\\n    returns (bool)\\n  {\\n    require(_canAwardExternal(externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n    if (amount == 0) {\\n      return false;\\n    }\\n\\n    IERC20(externalToken).safeTransfer(to, amount);\\n\\n    return true;\\n  }\\n\\n  /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\\n  /// @param to The user who is receiving the tokens\\n  /// @param amount The amount of tokens they are receiving\\n  /// @param controlledToken The token that is going to be minted\\n  /// @param referrer The user who referred the minting\\n  function _mint(address to, uint256 amount, address controlledToken, address referrer) internal {\\n    if (address(prizeStrategy) != address(0)) {\\n      prizeStrategy.beforeTokenMint(to, amount, controlledToken, referrer);\\n    }\\n    ControlledToken(controlledToken).controllerMint(to, amount);\\n  }\\n\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param externalToken The address of the external NFT token being awarded\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\n  function awardExternalERC721(\\n    address to,\\n    address externalToken,\\n    uint256[] calldata tokenIds\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    require(_canAwardExternal(externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n    if (tokenIds.length == 0) {\\n      return;\\n    }\\n\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      IERC721(externalToken).transferFrom(address(this), to, tokenIds[i]);\\n    }\\n\\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\\n  }\\n\\n  /// @notice Calculates the reserve portion of the given amount of funds.  If there is no reserve address, the portion will be zero.\\n  /// @param amount The prize amount\\n  /// @return The size of the reserve portion of the prize\\n  function calculateReserveFee(uint256 amount) public view returns (uint256) {\\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\\n    if (address(reserve) == address(0)) {\\n      return 0;\\n    }\\n    uint256 reserveRateMantissa = reserve.reserveRateMantissa(address(this));\\n    if (reserveRateMantissa == 0) {\\n      return 0;\\n    }\\n    return FixedPoint.multiplyUintByMantissa(amount, reserveRateMantissa);\\n  }\\n\\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\\n  /// @param users An array of account addresses to sweep balances for\\n  /// @return The total amount of assets swept from the Prize Pool\\n  function sweepTimelockBalances(\\n    address[] calldata users\\n  )\\n    external override\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    return _sweepTimelockBalances(users);\\n  }\\n\\n  /// @notice Sweep available timelocked balances to their owners.  The full balances will be swept to the owners.\\n  /// @param users An array of owner addresses\\n  /// @return The total amount of assets swept from the Prize Pool\\n  function _sweepTimelockBalances(\\n    address[] memory users\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    address operator = _msgSender();\\n\\n    uint256[] memory balances = new uint256[](users.length);\\n\\n    uint256 totalWithdrawal;\\n\\n    uint256 i;\\n    for (i = 0; i < users.length; i++) {\\n      address user = users[i];\\n      if (_unlockTimestamps[user] <= _currentTime()) {\\n        totalWithdrawal = totalWithdrawal.add(_timelockBalances[user]);\\n        balances[i] = _timelockBalances[user];\\n        delete _timelockBalances[user];\\n      }\\n    }\\n\\n    // if there is nothing to do, just quit\\n    if (totalWithdrawal == 0) {\\n      return 0;\\n    }\\n\\n    timelockTotalSupply = timelockTotalSupply.sub(totalWithdrawal);\\n\\n    uint256 redeemed = _redeem(totalWithdrawal);\\n\\n    IERC20 underlyingToken = IERC20(_token());\\n\\n    for (i = 0; i < users.length; i++) {\\n      if (balances[i] > 0) {\\n        delete _unlockTimestamps[users[i]];\\n        uint256 shareMantissa = FixedPoint.calculateMantissa(balances[i], totalWithdrawal);\\n        uint256 transferAmount = FixedPoint.multiplyUintByMantissa(redeemed, shareMantissa);\\n        underlyingToken.safeTransfer(users[i], transferAmount);\\n        emit TimelockedWithdrawalSwept(operator, users[i], balances[i], transferAmount);\\n      }\\n    }\\n\\n    return totalWithdrawal;\\n  }\\n\\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\\n  /// @param from The user who is withdrawing\\n  /// @param amount The amount the user is withdrawing\\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\\n  /// @return durationSeconds The duration of the timelock in seconds\\n  function calculateTimelockDuration(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external override\\n    returns (\\n      uint256 durationSeconds,\\n      uint256 burnedCredit\\n    )\\n  {\\n    return _calculateTimelockDuration(from, controlledToken, amount);\\n  }\\n\\n  /// @dev Calculates a timelocked withdrawal duration and credit consumption.\\n  /// @param from The user who is withdrawing\\n  /// @param amount The amount the user is withdrawing\\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\\n  /// @return durationSeconds The duration of the timelock in seconds\\n  /// @return burnedCredit The credit that was burned\\n  function _calculateTimelockDuration(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    internal\\n    returns (\\n      uint256 durationSeconds,\\n      uint256 burnedCredit\\n    )\\n  {\\n    (uint256 exitFee, uint256 _burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\n    uint256 duration = _estimateCreditAccrualTime(controlledToken, amount, exitFee);\\n    if (duration > maxTimelockDuration) {\\n      duration = maxTimelockDuration;\\n    }\\n    return (duration, _burnedCredit);\\n  }\\n\\n  /// @notice Calculates the early exit fee for the given amount\\n  /// @param from The user who is withdrawing\\n  /// @param controlledToken The type of collateral being withdrawn\\n  /// @param amount The amount of collateral to be withdrawn\\n  /// @return exitFee The exit fee\\n  /// @return burnedCredit The user's credit that was burned\\n  function calculateEarlyExitFee(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external override\\n    returns (\\n      uint256 exitFee,\\n      uint256 burnedCredit\\n    )\\n  {\\n    return _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\\n  }\\n\\n  /// @dev Calculates the early exit fee for the given amount\\n  /// @param amount The amount of collateral to be withdrawn\\n  /// @return Exit fee\\n  function _calculateEarlyExitFeeNoCredit(address controlledToken, uint256 amount) internal view returns (uint256) {\\n    return _limitExitFee(\\n      amount,\\n      FixedPoint.multiplyUintByMantissa(amount, tokenCreditPlans[controlledToken].creditLimitMantissa)\\n    );\\n  }\\n\\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\\n  /// @param _principal The principal amount on which interest is accruing\\n  /// @param _interest The amount of interest that must accrue\\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\n  function estimateCreditAccrualTime(\\n    address _controlledToken,\\n    uint256 _principal,\\n    uint256 _interest\\n  )\\n    external override\\n    view\\n    returns (uint256 durationSeconds)\\n  {\\n    return _estimateCreditAccrualTime(\\n      _controlledToken,\\n      _principal,\\n      _interest\\n    );\\n  }\\n\\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit\\n  /// @param _principal The principal amount on which interest is accruing\\n  /// @param _interest The amount of interest that must accrue\\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\n  function _estimateCreditAccrualTime(\\n    address _controlledToken,\\n    uint256 _principal,\\n    uint256 _interest\\n  )\\n    internal\\n    view\\n    returns (uint256 durationSeconds)\\n  {\\n    // interest = credit rate * principal * time\\n    // => time = interest / (credit rate * principal)\\n    uint256 accruedPerSecond = FixedPoint.multiplyUintByMantissa(_principal, tokenCreditPlans[_controlledToken].creditRateMantissa);\\n    if (accruedPerSecond == 0) {\\n      return 0;\\n    }\\n    return _interest.div(accruedPerSecond);\\n  }\\n\\n  /// @notice Burns a users credit.\\n  /// @param user The user whose credit should be burned\\n  /// @param credit The amount of credit to burn\\n  function _burnCredit(address user, address controlledToken, uint256 credit) internal {\\n    tokenCreditBalances[controlledToken][user].balance = uint256(tokenCreditBalances[controlledToken][user].balance).sub(credit).toUint128();\\n\\n    emit CreditBurned(user, controlledToken, credit);\\n  }\\n\\n  /// @notice Accrues ticket credit for a user assuming their current balance is the passed balance.  May burn credit if they exceed their limit.\\n  /// @param user The user for whom to accrue credit\\n  /// @param controlledToken The controlled token whose balance we are checking\\n  /// @param controlledTokenBalance The balance to use for the user\\n  /// @param extra Additional credit to be added\\n  function _accrueCredit(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal {\\n    _updateCreditBalance(\\n      user,\\n      controlledToken,\\n      _calculateCreditBalance(user, controlledToken, controlledTokenBalance, extra)\\n    );\\n  }\\n\\n  function _calculateCreditBalance(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal view returns (uint256) {\\n    uint256 newBalance;\\n    CreditBalance storage creditBalance = tokenCreditBalances[controlledToken][user];\\n    if (!creditBalance.initialized) {\\n      newBalance = 0;\\n    } else {\\n      uint256 credit = calculateAccruedCredit(user, controlledToken, controlledTokenBalance);\\n      newBalance = _applyCreditLimit(controlledToken, controlledTokenBalance, uint256(creditBalance.balance).add(credit).add(extra));\\n    }\\n    return newBalance;\\n  }\\n\\n  function _updateCreditBalance(address user, address controlledToken, uint256 newBalance) internal {\\n    uint256 oldBalance = tokenCreditBalances[controlledToken][user].balance;\\n\\n    tokenCreditBalances[controlledToken][user] = CreditBalance({\\n      balance: newBalance.toUint128(),\\n      timestamp: _currentTime().toUint32(),\\n      initialized: true\\n    });\\n\\n    if (oldBalance < newBalance) {\\n      emit CreditMinted(user, controlledToken, newBalance.sub(oldBalance));\\n    } else {\\n      emit CreditBurned(user, controlledToken, oldBalance.sub(newBalance));\\n    }\\n  }\\n\\n  /// @notice Applies the credit limit to a credit balance.  The balance cannot exceed the credit limit.\\n  /// @param controlledToken The controlled token that the user holds\\n  /// @param controlledTokenBalance The users ticket balance (used to calculate credit limit)\\n  /// @param creditBalance The new credit balance to be checked\\n  /// @return The users new credit balance.  Will not exceed the credit limit.\\n  function _applyCreditLimit(address controlledToken, uint256 controlledTokenBalance, uint256 creditBalance) internal view returns (uint256) {\\n    uint256 creditLimit = FixedPoint.multiplyUintByMantissa(\\n      controlledTokenBalance,\\n      tokenCreditPlans[controlledToken].creditLimitMantissa\\n    );\\n    if (creditBalance > creditLimit) {\\n      creditBalance = creditLimit;\\n    }\\n\\n    return creditBalance;\\n  }\\n\\n  /// @notice Calculates the accrued interest for a user\\n  /// @param user The user whose credit should be calculated.\\n  /// @param controlledToken The controlled token that the user holds\\n  /// @param controlledTokenBalance The user's current balance of the controlled tokens.\\n  /// @return The credit that has accrued since the last credit update.\\n  function calculateAccruedCredit(address user, address controlledToken, uint256 controlledTokenBalance) internal view returns (uint256) {\\n    uint256 userTimestamp = tokenCreditBalances[controlledToken][user].timestamp;\\n\\n    if (!tokenCreditBalances[controlledToken][user].initialized) {\\n      return 0;\\n    }\\n\\n    uint256 deltaTime = _currentTime().sub(userTimestamp);\\n    uint256 creditPerSecond = FixedPoint.multiplyUintByMantissa(controlledTokenBalance, tokenCreditPlans[controlledToken].creditRateMantissa);\\n    return deltaTime.mul(creditPerSecond);\\n  }\\n\\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\\n  /// @param user The user whose credit balance should be returned\\n  /// @return The balance of the users credit\\n  function balanceOfCredit(address user, address controlledToken) external override onlyControlledToken(controlledToken) returns (uint256) {\\n    _accrueCredit(user, controlledToken, IERC20(controlledToken).balanceOf(user), 0);\\n    return tokenCreditBalances[controlledToken][user].balance;\\n  }\\n\\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\\n  /// @param _controlledToken The controlled token for whom to set the credit plan\\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\\n  function setCreditPlanOf(\\n    address _controlledToken,\\n    uint128 _creditRateMantissa,\\n    uint128 _creditLimitMantissa\\n  )\\n    external override\\n    onlyControlledToken(_controlledToken)\\n    onlyOwner\\n  {\\n    tokenCreditPlans[_controlledToken] = CreditPlan({\\n      creditLimitMantissa: _creditLimitMantissa,\\n      creditRateMantissa: _creditRateMantissa\\n    });\\n\\n    emit CreditPlanSet(_controlledToken, _creditLimitMantissa, _creditRateMantissa);\\n  }\\n\\n  /// @notice Returns the credit rate of a controlled token\\n  /// @param controlledToken The controlled token to retrieve the credit rates for\\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\\n  function creditPlanOf(\\n    address controlledToken\\n  )\\n    external override\\n    view\\n    returns (\\n      uint128 creditLimitMantissa,\\n      uint128 creditRateMantissa\\n    )\\n  {\\n    creditLimitMantissa = tokenCreditPlans[controlledToken].creditLimitMantissa;\\n    creditRateMantissa = tokenCreditPlans[controlledToken].creditRateMantissa;\\n  }\\n\\n  /// @notice Calculate the early exit for a user given a withdrawal amount.  The user's credit is taken into account.\\n  /// @param from The user who is withdrawing\\n  /// @param controlledToken The token they are withdrawing\\n  /// @param amount The amount of funds they are withdrawing\\n  /// @return earlyExitFee The additional exit fee that should be charged.\\n  /// @return creditBurned The amount of credit that will be burned\\n  function _calculateEarlyExitFeeLessBurnedCredit(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    internal\\n    returns (\\n      uint256 earlyExitFee,\\n      uint256 creditBurned\\n    )\\n  {\\n    uint256 controlledTokenBalance = IERC20(controlledToken).balanceOf(from);\\n    require(controlledTokenBalance >= amount, \\\"PrizePool/insuff-funds\\\");\\n    _accrueCredit(from, controlledToken, controlledTokenBalance, 0);\\n    /*\\n    The credit is used *last*.  Always charge the fees up-front.\\n\\n    How to calculate:\\n\\n    Calculate their remaining exit fee.  I.e. full exit fee of their balance less their credit.\\n\\n    If the exit fee on their withdrawal is greater than the remaining exit fee, then they'll have to pay the difference.\\n    */\\n\\n    // Determine available usable credit based on withdraw amount\\n    uint256 remainingExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, controlledTokenBalance.sub(amount));\\n\\n    uint256 availableCredit;\\n    if (tokenCreditBalances[controlledToken][from].balance >= remainingExitFee) {\\n      availableCredit = uint256(tokenCreditBalances[controlledToken][from].balance).sub(remainingExitFee);\\n    }\\n\\n    // Determine amount of credit to burn and amount of fees required\\n    uint256 totalExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\\n    creditBurned = (availableCredit > totalExitFee) ? totalExitFee : availableCredit;\\n    earlyExitFee = totalExitFee.sub(creditBurned);\\n    return (earlyExitFee, creditBurned);\\n  }\\n\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\n  function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\\n    _setLiquidityCap(_liquidityCap);\\n  }\\n\\n  function _setLiquidityCap(uint256 _liquidityCap) internal {\\n    liquidityCap = _liquidityCap;\\n    emit LiquidityCapSet(_liquidityCap);\\n  }\\n\\n  /// @notice Allows the Governor to add Controlled Tokens to the Prize Pool\\n  /// @param _controlledToken The address of the Controlled Token to add\\n  function addControlledToken(address _controlledToken) external override onlyOwner {\\n    _addControlledToken(_controlledToken);\\n  }\\n\\n  /// @notice Adds a new controlled token\\n  /// @param _controlledToken The controlled token to add.  Cannot be a duplicate.\\n  function _addControlledToken(address _controlledToken) internal {\\n    require(ControlledToken(_controlledToken).controller() == this, \\\"PrizePool/token-ctrlr-mismatch\\\");\\n    _tokens.addAddress(_controlledToken);\\n\\n    emit ControlledTokenAdded(_controlledToken);\\n  }\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external override onlyOwner {\\n    _setPrizeStrategy(_prizeStrategy);\\n  }\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy\\n  function _setPrizeStrategy(TokenListenerInterface _prizeStrategy) internal {\\n    require(address(_prizeStrategy) != address(0), \\\"PrizePool/prizeStrategy-not-zero\\\");\\n    prizeStrategy = _prizeStrategy;\\n\\n    emit PrizeStrategySet(address(_prizeStrategy));\\n  }\\n\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n  /// @return An array of controlled token addresses\\n  function tokens() external override view returns (address[] memory) {\\n    return _tokens.addressArray();\\n  }\\n\\n  /// @dev Gets the current time as represented by the current block\\n  /// @return The timestamp of the current block\\n  function _currentTime() internal virtual view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  /// @notice The timestamp at which an account's timelocked balance will be made available to sweep\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The timestamp at which the locked assets will be made available\\n  function timelockBalanceAvailableAt(address user) external override view returns (uint256) {\\n    return _unlockTimestamps[user];\\n  }\\n\\n  /// @notice The balance of timelocked assets for an account\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The amount of assets that have been timelocked\\n  function timelockBalanceOf(address user) external override view returns (uint256) {\\n    return _timelockBalances[user];\\n  }\\n\\n  /// @notice The total of all controlled tokens and timelock.\\n  /// @return The current total of all tokens and timelock.\\n  function accountedBalance() external override view returns (uint256) {\\n    return _tokenTotalSupply();\\n  }\\n\\n  /// @notice The total of all controlled tokens and timelock.\\n  /// @return The current total of all tokens and timelock.\\n  function _tokenTotalSupply() internal view returns (uint256) {\\n    uint256 total = timelockTotalSupply.add(reserveTotalSupply);\\n    address currentToken = _tokens.start();\\n    while (currentToken != address(0) && currentToken != _tokens.end()) {\\n      total = total.add(IERC20(currentToken).totalSupply());\\n      currentToken = _tokens.next(currentToken);\\n    }\\n    return total;\\n  }\\n\\n  /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\\n  /// @param _amount The amount of liquidity to be added to the Prize Pool\\n  /// @return True if the Prize Pool can receive the specified amount of liquidity\\n  function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\\n    uint256 tokenTotalSupply = _tokenTotalSupply();\\n    return (tokenTotalSupply.add(_amount) <= liquidityCap);\\n  }\\n\\n  /// @dev Checks if a specific token is controlled by the Prize Pool\\n  /// @param controlledToken The address of the token to check\\n  /// @return True if the token is a controlled token, false otherwise\\n  function _isControlled(address controlledToken) internal view returns (bool) {\\n    return _tokens.contains(controlledToken);\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgSender()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (address payable)\\n  {\\n    return BaseRelayRecipient._msgSender();\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgData()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (bytes memory)\\n  {\\n    return BaseRelayRecipient._msgData();\\n  }\\n\\n  /// @dev Function modifier to ensure usage of tokens controlled by the Prize Pool\\n  /// @param controlledToken The address of the token to check\\n  modifier onlyControlledToken(address controlledToken) {\\n    require(_isControlled(controlledToken), \\\"PrizePool/unknown-token\\\");\\n    _;\\n  }\\n\\n  /// @dev Function modifier to ensure caller is the prize-strategy\\n  modifier onlyPrizeStrategy() {\\n    require(_msgSender() == address(prizeStrategy), \\\"PrizePool/only-prizeStrategy\\\");\\n    _;\\n  }\\n\\n  /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\\n  modifier canAddLiquidity(uint256 _amount) {\\n    require(_canAddLiquidity(_amount), \\\"PrizePool/exceeds-liquidity-cap\\\");\\n    _;\\n  }\\n\\n  modifier onlyReserve() {\\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\\n    require(address(reserve) == msg.sender, \\\"PrizePool/only-reserve\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/pooltogether/FixedPoint.sol\": {\r\n      \"content\": \"/**\\nCopyright 2020 PoolTogether Inc.\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @author Brendan Asselstine\\n * @notice Provides basic fixed point math calculations.\\n *\\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n\\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /**\\n        * Calculates a Fixed18 mantissa given the numerator and denominator\\n        *\\n        * The mantissa = (numerator * 1e18) / denominator\\n        *\\n        * @param numerator The mantissa numerator\\n        * @param denominator The mantissa denominator\\n        * @return The mantissa of the fraction\\n        */\\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\\n        uint256 mantissa = numerator.mul(SCALE);\\n        mantissa = mantissa.div(denominator);\\n        return mantissa;\\n    }\\n\\n    /**\\n        * Multiplies a Fixed18 number by an integer.\\n        *\\n        * @param b The whole integer to multiply\\n        * @param mantissa The Fixed18 number\\n        * @return An integer that is the result of multiplying the params.\\n        */\\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = mantissa.mul(b);\\n        result = result.div(SCALE);\\n        return result;\\n    }\\n\\n    /**\\n    * Divides an integer by a fixed point 18 mantissa\\n    *\\n    * @param dividend The integer to divide\\n    * @param mantissa The fixed point 18 number to serve as the divisor\\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\\n    */\\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = SCALE.mul(dividend);\\n        result = result.div(mantissa);\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/RegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Interface that allows a user to draw an address using an index\\ninterface RegistryInterface {\\n  function lookup() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/reserve/ReserveInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Interface that allows a user to draw an address using an index\\ninterface ReserveInterface {\\n  function reserveRateMantissa(address prizePool) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/YieldSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\\nabstract contract YieldSource {\\n  /// @notice Determines whether the passed token can be transferred out as an external award.\\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n  /// prize strategy should not be allowed to move those tokens.\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\\n\\n  /// @notice Returns the ERC20 asset token used for deposits.\\n  /// @return The ERC20 asset token\\n  function _token() internal virtual view returns (IERC20);\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal virtual returns (uint256);\\n\\n  /// @notice Supplies asset tokens to the yield source.\\n  /// @param mintAmount The amount of asset tokens to be supplied\\n  function _supply(uint256 mintAmount) internal virtual;\\n\\n  /// @notice Redeems asset tokens from the yield source.\\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\\n  /// @return The actual amount of tokens that were redeemed.\\n  function _redeem(uint256 redeemAmount) internal virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/token/TokenListenerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\\ninterface TokenListenerInterface {\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\n}\"\r\n    },\r\n    \"contracts/token/ControlledToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../utils/RelayRecipient.sol\\\";\\nimport \\\"./TokenControllerInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ncontract ControlledToken is RelayRecipient, ERC20UpgradeSafe {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  TokenControllerInterface public controller;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param _decimals The number of decimals for the Token\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    address _trustedForwarder,\\n    TokenControllerInterface _controller\\n  )\\n    public\\n    virtual\\n    initializer\\n  {\\n    trustedForwarder = _trustedForwarder;\\n    __ERC20_init(_name, _symbol);\\n    controller = _controller;\\n    _setupDecimals(_decimals);\\n  }\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external virtual onlyController {\\n    _mint(_user, _amount);\\n  }\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external virtual onlyController {\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual onlyController {\\n    if (_operator != _user) {\\n      uint256 decreasedAllowance = allowance(_user, _operator).sub(_amount, \\\"ControlledToken/exceeds-allowance\\\");\\n      _approve(_user, _operator, decreasedAllowance);\\n    }\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @dev Function modifier to ensure that the caller is the controller contract\\n  modifier onlyController {\\n    require(_msgSender() == address(controller), \\\"ControlledToken/only-controller\\\");\\n    _;\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    controller.beforeTokenTransfer(from, to, amount);\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgSender()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (address payable)\\n  {\\n    return BaseRelayRecipient._msgSender();\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgData()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (bytes memory)\\n  {\\n    return BaseRelayRecipient._msgData();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\\\";\\n\\ncontract RelayRecipient is BaseRelayRecipient {\\n  function versionRecipient() external override view returns (string memory) {\\n    return \\\"2.0.0\\\";\\n  }\\n}\\n\"\r\n    },\r\n    \"@opengsn/gsn/contracts/BaseRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity ^0.6.2;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/token/TokenControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Controlled ERC20 Token Interface\\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\\ninterface TokenControllerInterface {\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MappedSinglyLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\n/// @notice An efficient implementation of a singly linked list of addresses\\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\\nlibrary MappedSinglyLinkedList {\\n\\n  /// @notice The special value address used to denote the end of the list\\n  address public constant SENTINEL = address(0x1);\\n\\n  /// @notice The data structure to use for the list.\\n  struct Mapping {\\n    uint256 count;\\n\\n    mapping(address => address) addressMap;\\n  }\\n\\n  /// @notice Initializes the list.\\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\\n  function initialize(Mapping storage self) internal {\\n    require(self.count == 0, \\\"Already init\\\");\\n    self.addressMap[SENTINEL] = SENTINEL;\\n  }\\n\\n  function start(Mapping storage self) internal view returns (address) {\\n    return self.addressMap[SENTINEL];\\n  }\\n\\n  function next(Mapping storage self, address current) internal view returns (address) {\\n    return self.addressMap[current];\\n  }\\n\\n  function end(Mapping storage) internal pure returns (address) {\\n    return SENTINEL;\\n  }\\n\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      addAddress(self, addresses[i]);\\n    }\\n  }\\n\\n  /// @notice Adds an address to the front of the list.\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param newAddress The address to shift to the front of the list\\n  function addAddress(Mapping storage self, address newAddress) internal {\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[newAddress] == address(0), \\\"Already added\\\");\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\n    self.addressMap[SENTINEL] = newAddress;\\n    self.count = self.count + 1;\\n  }\\n\\n  /// @notice Removes an address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\\n  /// @param addr The address to remove from the list.\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\n    require(addr != SENTINEL && addr != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[prevAddress] == addr, \\\"Invalid prevAddress\\\");\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\n    delete self.addressMap[addr];\\n    self.count = self.count - 1;\\n  }\\n\\n  /// @notice Determines whether the list contains the given address\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param addr The address to check\\n  /// @return True if the address is contained, false otherwise.\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\n  }\\n\\n  /// @notice Returns an address array of all the addresses in this list\\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @return An array of all the addresses\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\n    address[] memory array = new address[](self.count);\\n    uint256 count;\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      array[count] = currentAddress;\\n      currentAddress = self.addressMap[currentAddress];\\n      count++;\\n    }\\n    return array;\\n  }\\n\\n  /// @notice Removes every address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  function clearAll(Mapping storage self) internal {\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      address nextAddress = self.addressMap[currentAddress];\\n      delete self.addressMap[currentAddress];\\n      currentAddress = nextAddress;\\n    }\\n    self.addressMap[SENTINEL] = SENTINEL;\\n    self.count = 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/PrizePoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"../reserve/ReserveInterface.sol\\\";\\nimport \\\"./YieldSource.sol\\\";\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\nimport \\\"../token/ControlledToken.sol\\\";\\nimport \\\"../token/TokenControllerInterface.sol\\\";\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"../utils/RelayRecipient.sol\\\";\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\ninterface PrizePoolInterface {\\n\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n  /// @param to The address receiving the newly minted tokens\\n  /// @param amount The amount of assets to deposit\\n  /// @param controlledToken The address of the type of token the user is minting\\n  /// @param referrer The referrer of the deposit\\n  function depositTo(\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  )\\n    external;\\n\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n  /// @param from The address to redeem tokens from.\\n  /// @param amount The amount of tokens to redeem for assets.\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\\n  /// @return The actual exit fee paid\\n  function withdrawInstantlyFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken,\\n    uint256 maximumExitFee\\n  ) external returns (uint256);\\n\\n  /// @notice Withdraw assets from the Prize Pool by placing them into the timelock.\\n  /// The timelock is used to ensure that the tickets have contributed their fair share of the prize.\\n  /// @dev Note that if the user has previously timelocked funds then this contract will try to sweep them.\\n  /// If the existing timelocked funds are still locked, then the incoming\\n  /// balance is added to their existing balance and the new timelock unlock timestamp will overwrite the old one.\\n  /// @param from The address to withdraw from\\n  /// @param amount The amount to withdraw\\n  /// @param controlledToken The type of token being withdrawn\\n  /// @return The timestamp from which the funds can be swept\\n  function withdrawWithTimelockFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken\\n  ) external returns (uint256);\\n\\n  function withdrawReserve(address to) external returns (uint256);\\n\\n  /// @notice Returns the balance that is available to award.\\n  /// @dev captureAwardBalance() should be called first\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function awardBalance() external view returns (uint256);\\n\\n  /// @notice Captures any available interest as award balance.\\n  /// @dev This function also captures the reserve fees.\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function captureAwardBalance() external returns (uint256);\\n\\n  /// @notice Called by the prize strategy to award prizes.\\n  /// @dev The amount awarded must be less than the awardBalance()\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of assets to be awarded\\n  /// @param controlledToken The address of the asset token being awarded\\n  function award(\\n    address to,\\n    uint256 amount,\\n    address controlledToken\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function transferExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function awardExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param externalToken The address of the external NFT token being awarded\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\n  function awardExternalERC721(\\n    address to,\\n    address externalToken,\\n    uint256[] calldata tokenIds\\n  )\\n    external;\\n\\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\\n  /// @param users An array of account addresses to sweep balances for\\n  /// @return The total amount of assets swept from the Prize Pool\\n  function sweepTimelockBalances(\\n    address[] calldata users\\n  )\\n    external\\n    returns (uint256);\\n\\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\\n  /// @param from The user who is withdrawing\\n  /// @param amount The amount the user is withdrawing\\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\\n  /// @return durationSeconds The duration of the timelock in seconds\\n  function calculateTimelockDuration(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external\\n    returns (\\n      uint256 durationSeconds,\\n      uint256 burnedCredit\\n    );\\n\\n  /// @notice Calculates the early exit fee for the given amount\\n  /// @param from The user who is withdrawing\\n  /// @param controlledToken The type of collateral being withdrawn\\n  /// @param amount The amount of collateral to be withdrawn\\n  /// @return exitFee The exit fee\\n  /// @return burnedCredit The user's credit that was burned\\n  function calculateEarlyExitFee(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external\\n    returns (\\n      uint256 exitFee,\\n      uint256 burnedCredit\\n    );\\n\\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\\n  /// @param _principal The principal amount on which interest is accruing\\n  /// @param _interest The amount of interest that must accrue\\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\n  function estimateCreditAccrualTime(\\n    address _controlledToken,\\n    uint256 _principal,\\n    uint256 _interest\\n  )\\n    external\\n    view\\n    returns (uint256 durationSeconds);\\n\\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\\n  /// @param user The user whose credit balance should be returned\\n  /// @return The balance of the users credit\\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\\n\\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\\n  /// @param _controlledToken The controlled token for whom to set the credit plan\\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\\n  function setCreditPlanOf(\\n    address _controlledToken,\\n    uint128 _creditRateMantissa,\\n    uint128 _creditLimitMantissa\\n  )\\n    external;\\n\\n  /// @notice Returns the credit rate of a controlled token\\n  /// @param controlledToken The controlled token to retrieve the credit rates for\\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\\n  function creditPlanOf(\\n    address controlledToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint128 creditLimitMantissa,\\n      uint128 creditRateMantissa\\n    );\\n\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\n  function setLiquidityCap(uint256 _liquidityCap) external;\\n\\n  /// @notice Allows the Governor to add Controlled Tokens to the Prize Pool\\n  /// @param _controlledToken The address of the Controlled Token to add\\n  function addControlledToken(address _controlledToken) external;\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external;\\n\\n  /// @dev Returns the address of the underlying ERC20 asset\\n  /// @return The address of the asset\\n  function token() external view returns (IERC20);\\n\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n  /// @return An array of controlled token addresses\\n  function tokens() external view returns (address[] memory);\\n\\n  /// @notice The timestamp at which an account's timelocked balance will be made available to sweep\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The timestamp at which the locked assets will be made available\\n  function timelockBalanceAvailableAt(address user) external view returns (uint256);\\n\\n  /// @notice The balance of timelocked assets for an account\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The amount of assets that have been timelocked\\n  function timelockBalanceOf(address user) external view returns (uint256);\\n\\n  /// @notice The total of all controlled tokens and timelock.\\n  /// @return The current total of all tokens and timelock.\\n  function accountedBalance() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/prize-strategy/single-random-winner/SingleRandomWinner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../PeriodicPrizeStrategy.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract SingleRandomWinner is PeriodicPrizeStrategy {\\n  function _distribute(uint256 randomNumber) internal override {\\n    uint256 prize = prizePool.captureAwardBalance();\\n    address winner = ticket.draw(randomNumber);\\n    if (winner != address(0)) {\\n      _awardTickets(winner, prize);\\n      _awardAllExternalTokens(winner);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-strategy/PeriodicPrizeStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\nimport \\\"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\\\";\\n\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"../token/TokenControllerInterface.sol\\\";\\nimport \\\"../token/ControlledToken.sol\\\";\\nimport \\\"../token/TicketInterface.sol\\\";\\nimport \\\"../prize-pool/PrizePool.sol\\\";\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../utils/RelayRecipient.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\nabstract contract PeriodicPrizeStrategy is Initializable,\\n                                           OwnableUpgradeSafe,\\n                                           RelayRecipient,\\n                                           ReentrancyGuardUpgradeSafe,\\n                                           TokenListenerInterface {\\n\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n  using Address for address;\\n\\n  uint256 internal constant ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA = 13.4 ether;\\n\\n  event PrizePoolOpened(\\n    address indexed operator,\\n    uint256 indexed prizePeriodStartedAt\\n  );\\n\\n  event PrizePoolAwardStarted(\\n    address indexed operator,\\n    address indexed prizePool,\\n    uint32 indexed rngRequestId,\\n    uint32 rngLockBlock\\n  );\\n\\n  event RngRequestFailed();\\n\\n  event PrizePoolAwarded(\\n    address indexed operator,\\n    uint256 randomNumber\\n  );\\n\\n  event RngServiceUpdated(\\n    address indexed rngService\\n  );\\n\\n  event TokenListenerUpdated(\\n    address indexed tokenListener\\n  );\\n\\n  event RngRequestTimeoutSet(\\n    uint32 rngRequestTimeout\\n  );\\n\\n  event ExternalErc721AwardAdded(\\n    address indexed externalErc721,\\n    uint256[] tokenIds\\n  );\\n\\n  event ExternalErc20AwardAdded(\\n    address indexed externalErc20\\n  );\\n\\n  event ExternalErc721AwardRemoved(\\n    address indexed externalErc721Award\\n  );\\n\\n  event ExternalErc20AwardRemoved(\\n    address indexed externalErc20Award\\n  );\\n\\n  struct RngRequest {\\n    uint32 id;\\n    uint32 lockBlock;\\n    uint32 requestedAt;\\n  }\\n\\n  // Comptroller\\n  TokenListenerInterface public tokenListener;\\n\\n  // Contract Interfaces\\n  PrizePool public prizePool;\\n  TicketInterface public ticket;\\n  IERC20 public sponsorship;\\n  RNGInterface public rng;\\n\\n  // Current RNG Request\\n  RngRequest internal rngRequest;\\n\\n  // RNG Request Timeout\\n  uint32 public rngRequestTimeout;\\n\\n  // Prize period\\n  uint256 public prizePeriodSeconds;\\n  uint256 public prizePeriodStartedAt;\\n\\n  // External tokens awarded as part of prize\\n  MappedSinglyLinkedList.Mapping internal externalErc20s;\\n  MappedSinglyLinkedList.Mapping internal externalErc721s;\\n\\n  // External NFT token IDs to be awarded\\n  //   NFT Address => TokenIds\\n  mapping (address => uint256[]) internal externalErc721TokenIds;\\n\\n  function initialize (\\n    address _trustedForwarder,\\n    uint256 _prizePeriodStart,\\n    uint256 _prizePeriodSeconds,\\n    PrizePool _prizePool,\\n    address _ticket,\\n    address _sponsorship,\\n    RNGInterface _rng,\\n    address[] memory _externalErc20s\\n  ) public initializer {\\n    require(_prizePeriodSeconds > 0, \\\"PeriodicPrizeStrategy/prize-period-greater-than-zero\\\");\\n    require(address(_prizePool) != address(0), \\\"PeriodicPrizeStrategy/prize-pool-not-zero\\\");\\n    require(address(_ticket) != address(0), \\\"PeriodicPrizeStrategy/ticket-not-zero\\\");\\n    require(address(_sponsorship) != address(0), \\\"PeriodicPrizeStrategy/sponsorship-not-zero\\\");\\n    require(address(_rng) != address(0), \\\"PeriodicPrizeStrategy/rng-not-zero\\\");\\n    prizePool = _prizePool;\\n    ticket = TicketInterface(_ticket);\\n    rng = _rng;\\n    sponsorship = IERC20(_sponsorship);\\n    trustedForwarder = _trustedForwarder;\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n\\n    for (uint256 i = 0; i < _externalErc20s.length; i++) {\\n      require(prizePool.canAwardExternal(_externalErc20s[i]), \\\"PeriodicPrizeStrategy/cannot-award-external\\\");\\n    }\\n    externalErc20s.initialize();\\n    externalErc20s.addAddresses(_externalErc20s);\\n\\n    prizePeriodSeconds = _prizePeriodSeconds;\\n    prizePeriodStartedAt = _prizePeriodStart;\\n\\n    externalErc721s.initialize();\\n\\n    // 1 hour timeout\\n    _setRngRequestTimeout(3600);\\n\\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\\n  }\\n\\n  function _distribute(uint256 randomNumber) internal virtual;\\n\\n  /// @notice Calculates and returns the currently accrued prize\\n  /// @return The current prize size\\n  function currentPrize() public view returns (uint256) {\\n    return prizePool.awardBalance();\\n  }\\n\\n  function setTokenListener(TokenListenerInterface _tokenListener) external onlyOwner {\\n    tokenListener = _tokenListener;\\n\\n    emit TokenListenerUpdated(address(tokenListener));\\n  }\\n\\n  /// @notice Estimates the remaining blocks until the prize given a number of seconds per block\\n  /// @param secondsPerBlockMantissa The number of seconds per block to use for the calculation.  Should be a fixed point 18 number like Ether.\\n  /// @return The estimated number of blocks remaining until the prize can be awarded.\\n  function estimateRemainingBlocksToPrize(uint256 secondsPerBlockMantissa) public view returns (uint256) {\\n    return FixedPoint.divideUintByMantissa(\\n      _prizePeriodRemainingSeconds(),\\n      secondsPerBlockMantissa\\n    );\\n  }\\n\\n  /// @notice Returns the number of seconds remaining until the prize can be awarded.\\n  /// @return The number of seconds remaining until the prize can be awarded.\\n  function prizePeriodRemainingSeconds() external view returns (uint256) {\\n    return _prizePeriodRemainingSeconds();\\n  }\\n\\n  /// @notice Returns the number of seconds remaining until the prize can be awarded.\\n  /// @return The number of seconds remaining until the prize can be awarded.\\n  function _prizePeriodRemainingSeconds() internal view returns (uint256) {\\n    uint256 endAt = _prizePeriodEndAt();\\n    uint256 time = _currentTime();\\n    if (time > endAt) {\\n      return 0;\\n    }\\n    return endAt.sub(time);\\n  }\\n\\n  /// @notice Returns whether the prize period is over\\n  /// @return True if the prize period is over, false otherwise\\n  function isPrizePeriodOver() external view returns (bool) {\\n    return _isPrizePeriodOver();\\n  }\\n\\n  /// @notice Returns whether the prize period is over\\n  /// @return True if the prize period is over, false otherwise\\n  function _isPrizePeriodOver() internal view returns (bool) {\\n    return _currentTime() >= _prizePeriodEndAt();\\n  }\\n\\n  /// @notice Awards collateral as tickets to a user\\n  /// @param user The user to whom the tickets are minted\\n  /// @param amount The amount of interest to mint as tickets.\\n  function _awardTickets(address user, uint256 amount) internal {\\n    prizePool.award(user, amount, address(ticket));\\n  }\\n\\n  /// @notice Awards all external tokens with non-zero balances to the given user.  The external tokens must be held by the PrizePool contract.\\n  /// @param winner The user to transfer the tokens to\\n  function _awardAllExternalTokens(address winner) internal {\\n    _awardExternalErc20s(winner);\\n    _awardExternalErc721s(winner);\\n  }\\n\\n  /// @notice Awards all external ERC20 tokens with non-zero balances to the given user.\\n  /// The external tokens must be held by the PrizePool contract.\\n  /// @param winner The user to transfer the tokens to\\n  function _awardExternalErc20s(address winner) internal {\\n    address currentToken = externalErc20s.start();\\n    while (currentToken != address(0) && currentToken != externalErc20s.end()) {\\n      uint256 balance = IERC20(currentToken).balanceOf(address(prizePool));\\n      if (balance > 0) {\\n        prizePool.awardExternalERC20(winner, currentToken, balance);\\n      }\\n      currentToken = externalErc20s.next(currentToken);\\n    }\\n  }\\n\\n  /// @notice Awards all external ERC721 tokens to the given user.\\n  /// The external tokens must be held by the PrizePool contract.\\n  /// @dev The list of ERC721s is reset after every award\\n  /// @param winner The user to transfer the tokens to\\n  function _awardExternalErc721s(address winner) internal {\\n    address currentToken = externalErc721s.start();\\n    while (currentToken != address(0) && currentToken != externalErc721s.end()) {\\n      uint256 balance = IERC721(currentToken).balanceOf(address(prizePool));\\n      if (balance > 0) {\\n        prizePool.awardExternalERC721(winner, currentToken, externalErc721TokenIds[currentToken]);\\n        delete externalErc721TokenIds[currentToken];\\n      }\\n      currentToken = externalErc721s.next(currentToken);\\n    }\\n    externalErc721s.clearAll();\\n  }\\n\\n  /// @notice Returns the timestamp at which the prize period ends\\n  /// @return The timestamp at which the prize period ends.\\n  function prizePeriodEndAt() external view returns (uint256) {\\n    // current prize started at is non-inclusive, so add one\\n    return _prizePeriodEndAt();\\n  }\\n\\n  /// @notice Returns the timestamp at which the prize period ends\\n  /// @return The timestamp at which the prize period ends.\\n  function _prizePeriodEndAt() internal view returns (uint256) {\\n    // current prize started at is non-inclusive, so add one\\n    return prizePeriodStartedAt.add(prizePeriodSeconds);\\n  }\\n\\n  /// @notice Called by the PrizePool for transfers of controlled tokens\\n  /// @dev Note that this is only for *transfers*, not mints or burns\\n  /// @param controlledToken The type of collateral that is being sent\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external override onlyPrizePool {\\n    if (controlledToken == address(ticket)) {\\n      _requireNotLocked();\\n    }\\n    if (address(tokenListener) != address(0)) {\\n      tokenListener.beforeTokenTransfer(from, to, amount, controlledToken);\\n    }\\n  }\\n\\n  /// @notice Called by the PrizePool when minting controlled tokens\\n  /// @param controlledToken The type of collateral that is being minted\\n  function beforeTokenMint(\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  )\\n    external\\n    override\\n    onlyPrizePool\\n  {\\n    if (controlledToken == address(ticket)) {\\n      _requireNotLocked();\\n    }\\n    if (address(tokenListener) != address(0)) {\\n      tokenListener.beforeTokenMint(to, amount, controlledToken, referrer);\\n    }\\n  }\\n\\n  /// @notice returns the current time.  Used for testing.\\n  /// @return The current time (block.timestamp)\\n  function _currentTime() internal virtual view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  /// @notice returns the current time.  Used for testing.\\n  /// @return The current time (block.timestamp)\\n  function _currentBlock() internal virtual view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /// @notice Starts the award process by starting random number request.  The prize period must have ended.\\n  /// @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\\n  function startAward() external requireCanStartAward {\\n    if (isRngTimedOut()) {\\n      delete rngRequest;\\n      emit RngRequestFailed();\\n    }\\n    (address feeToken, uint256 requestFee) = rng.getRequestFee();\\n    if (feeToken != address(0) && requestFee > 0) {\\n      IERC20(feeToken).approve(address(rng), requestFee);\\n    }\\n\\n    (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\\n    rngRequest.id = requestId;\\n    rngRequest.lockBlock = lockBlock;\\n    rngRequest.requestedAt = _currentTime().toUint32();\\n\\n    emit PrizePoolAwardStarted(_msgSender(), address(prizePool), requestId, lockBlock);\\n  }\\n\\n  /// @notice Completes the award process and awards the winners.  The random number must have been requested and is now available.\\n  function completeAward() external requireCanCompleteAward {\\n    uint256 randomNumber = rng.randomNumber(rngRequest.id);\\n    delete rngRequest;\\n\\n    _distribute(randomNumber);\\n\\n    // to avoid clock drift, we should calculate the start time based on the previous period start time.\\n    prizePeriodStartedAt = _calculateNextPrizePeriodStartTime(_currentTime());\\n\\n    emit PrizePoolAwarded(_msgSender(), randomNumber);\\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\\n  }\\n\\n  function _calculateNextPrizePeriodStartTime(uint256 currentTime) internal view returns (uint256) {\\n    uint256 elapsedPeriods = currentTime.sub(prizePeriodStartedAt).div(prizePeriodSeconds);\\n    return prizePeriodStartedAt.add(elapsedPeriods.mul(prizePeriodSeconds));\\n  }\\n\\n  function calculateNextPrizePeriodStartTime(uint256 currentTime) external view returns (uint256) {\\n    return _calculateNextPrizePeriodStartTime(currentTime);\\n  }\\n\\n  /// @notice Returns whether an award process can be started\\n  /// @return True if an award can be started, false otherwise.\\n  function canStartAward() external view returns (bool) {\\n    return _isPrizePeriodOver() && !isRngRequested();\\n  }\\n\\n  /// @notice Returns whether an award process can be completed\\n  /// @return True if an award can be completed, false otherwise.\\n  function canCompleteAward() external view returns (bool) {\\n    return isRngRequested() && isRngCompleted();\\n  }\\n\\n  /// @notice Returns whether a random number has been requested\\n  /// @return True if a random number has been requested, false otherwise.\\n  function isRngRequested() public view returns (bool) {\\n    return rngRequest.id != 0;\\n  }\\n\\n  /// @notice Returns whether the random number request has completed.\\n  /// @return True if a random number request has completed, false otherwise.\\n  function isRngCompleted() public view returns (bool) {\\n    return rng.isRequestComplete(rngRequest.id);\\n  }\\n\\n  /// @notice Returns the block number that the current RNG request has been locked to\\n  /// @return The block number that the RNG request is locked to\\n  function getLastRngLockBlock() external view returns (uint32) {\\n    return rngRequest.lockBlock;\\n  }\\n\\n  /// @notice Returns the current RNG Request ID\\n  /// @return The current Request ID\\n  function getLastRngRequestId() external view returns (uint32) {\\n    return rngRequest.id;\\n  }\\n\\n  /// @notice Sets the RNG service that the Prize Strategy is connected to\\n  /// @param rngService The address of the new RNG service interface\\n  function setRngService(RNGInterface rngService) external onlyOwner {\\n    require(!isRngRequested(), \\\"PeriodicPrizeStrategy/rng-in-flight\\\");\\n\\n    rng = rngService;\\n    emit RngServiceUpdated(address(rngService));\\n  }\\n\\n  function setRngRequestTimeout(uint32 _rngRequestTimeout) external onlyOwner {\\n    _setRngRequestTimeout(_rngRequestTimeout);\\n  }\\n\\n  function _setRngRequestTimeout(uint32 _rngRequestTimeout) internal {\\n    require(_rngRequestTimeout > 60, \\\"PeriodicPrizeStrategy/rng-timeout-gt-60-secs\\\");\\n    rngRequestTimeout = _rngRequestTimeout;\\n    emit RngRequestTimeoutSet(rngRequestTimeout);\\n  }\\n\\n  /// @notice Gets the current list of External ERC20 tokens that will be awarded with the current prize\\n  /// @return An array of External ERC20 token addresses\\n  function getExternalErc20Awards() external view returns (address[] memory) {\\n    return externalErc20s.addressArray();\\n  }\\n\\n  /// @notice Adds an external ERC20 token type as an additional prize that can be awarded\\n  /// @dev Only the Prize-Strategy owner/creator can assign external tokens,\\n  /// and they must be approved by the Prize-Pool\\n  /// @param _externalErc20 The address of an ERC20 token to be awarded\\n  function addExternalErc20Award(address _externalErc20) external onlyOwner {\\n    // require(_externalErc20.isContract(), \\\"PeriodicPrizeStrategy/external-erc20-not-contract\\\");\\n    require(prizePool.canAwardExternal(_externalErc20), \\\"PeriodicPrizeStrategy/cannot-award-external\\\");\\n    externalErc20s.addAddress(_externalErc20);\\n    emit ExternalErc20AwardAdded(_externalErc20);\\n  }\\n\\n  /// @notice Removes an external ERC20 token type as an additional prize that can be awarded\\n  /// @dev Only the Prize-Strategy owner/creator can remove external tokens\\n  /// @param _externalErc20 The address of an ERC20 token to be removed\\n  /// @param _prevExternalErc20 The address of the previous ERC20 token in the `externalErc20s` list.\\n  /// If the ERC20 is the first address, then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function removeExternalErc20Award(address _externalErc20, address _prevExternalErc20) external onlyOwner {\\n    externalErc20s.removeAddress(_prevExternalErc20, _externalErc20);\\n    emit ExternalErc20AwardRemoved(_externalErc20);\\n  }\\n\\n  /// @notice Gets the current list of External ERC721 tokens that will be awarded with the current prize\\n  /// @return An array of External ERC721 token addresses\\n  function getExternalErc721Awards() external view returns (address[] memory) {\\n    return externalErc721s.addressArray();\\n  }\\n\\n  /// @notice Gets the current list of External ERC721 tokens that will be awarded with the current prize\\n  /// @return An array of External ERC721 token addresses\\n  function getExternalErc721AwardTokenIds(address _externalErc721) external view returns (uint256[] memory) {\\n    return externalErc721TokenIds[_externalErc721];\\n  }\\n\\n  /// @notice Adds an external ERC721 token as an additional prize that can be awarded\\n  /// @dev Only the Prize-Strategy owner/creator can assign external tokens,\\n  /// and they must be approved by the Prize-Pool\\n  /// NOTE: The NFT must already be owned by the Prize-Pool\\n  /// @param _externalErc721 The address of an ERC721 token to be awarded\\n  /// @param _tokenIds An array of token IDs of the ERC721 to be awarded\\n  function addExternalErc721Award(address _externalErc721, uint256[] calldata _tokenIds) external onlyOwner {\\n    // require(_externalErc721.isContract(), \\\"PeriodicPrizeStrategy/external-erc721-not-contract\\\");\\n    require(prizePool.canAwardExternal(_externalErc721), \\\"PeriodicPrizeStrategy/cannot-award-external\\\");\\n    externalErc721s.addAddress(_externalErc721);\\n\\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\\n      uint256 tokenId = _tokenIds[i];\\n      require(IERC721(_externalErc721).ownerOf(tokenId) == address(prizePool), \\\"PeriodicPrizeStrategy/unavailable-token\\\");\\n      externalErc721TokenIds[_externalErc721].push(tokenId);\\n    }\\n\\n    emit ExternalErc721AwardAdded(_externalErc721, _tokenIds);\\n  }\\n\\n  /// @notice Removes an external ERC721 token as an additional prize that can be awarded\\n  /// @dev Only the Prize-Strategy owner/creator can remove external tokens\\n  /// @param _externalErc721 The address of an ERC721 token to be removed\\n  /// @param _prevExternalErc721 The address of the previous ERC721 token in the list.\\n  /// If no previous, then pass the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function removeExternalErc721Award(address _externalErc721, address _prevExternalErc721) external onlyOwner {\\n    externalErc721s.removeAddress(_prevExternalErc721, _externalErc721);\\n    delete externalErc721TokenIds[_externalErc721];\\n    emit ExternalErc721AwardRemoved(_externalErc721);\\n  }\\n\\n  /// @notice Allows the owner to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param to The address that receives the tokens\\n  /// @param externalToken The address of the external asset token being transferred\\n  /// @param amount The amount of external assets to be transferred\\n  function transferExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    prizePool.transferExternalERC20(to, externalToken, amount);\\n  }\\n\\n  function _requireNotLocked() internal view {\\n    uint256 currentBlock = _currentBlock();\\n    require(rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock, \\\"PeriodicPrizeStrategy/rng-in-flight\\\");\\n  }\\n\\n  function isRngTimedOut() public view returns (bool) {\\n    if (rngRequest.requestedAt == 0) {\\n      return false;\\n    } else {\\n      return _currentTime() > uint256(rngRequestTimeout).add(rngRequest.requestedAt);\\n    }\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgSender()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (address payable)\\n  {\\n    return BaseRelayRecipient._msgSender();\\n  }\\n\\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\\n  /// @return The payable address of the message sender\\n  function _msgData()\\n    internal\\n    override(BaseRelayRecipient, ContextUpgradeSafe)\\n    virtual\\n    view\\n    returns (bytes memory)\\n  {\\n    return BaseRelayRecipient._msgData();\\n  }\\n\\n  modifier requireNotLocked() {\\n    _requireNotLocked();\\n    _;\\n  }\\n\\n  modifier requireCanStartAward() {\\n    require(_isPrizePeriodOver(), \\\"PeriodicPrizeStrategy/prize-period-not-over\\\");\\n    require(!isRngRequested() || isRngTimedOut(), \\\"PeriodicPrizeStrategy/rng-already-requested\\\");\\n    _;\\n  }\\n\\n  modifier requireCanCompleteAward() {\\n    require(_isPrizePeriodOver(), \\\"PeriodicPrizeStrategy/prize-period-not-over\\\");\\n    require(isRngRequested(), \\\"PeriodicPrizeStrategy/rng-not-requested\\\");\\n    require(isRngCompleted(), \\\"PeriodicPrizeStrategy/rng-not-complete\\\");\\n    _;\\n  }\\n\\n  modifier onlyPrizePool() {\\n    require(_msgSender() == address(prizePool), \\\"PeriodicPrizeStrategy/only-prize-pool\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\r\n    },\r\n    \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Random Number Generator Interface\\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\\ninterface RNGInterface {\\n\\n  /// @notice Emitted when a new request for a random number has been submitted\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param sender The indexed address of the sender of the request\\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\n\\n  /// @notice Emitted when an existing request for a random number has been completed\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param randomNumber The random number produced by the 3rd-party service\\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\n\\n  /// @notice Gets the last request id used by the RNG service\\n  /// @return requestId The last request id used in the last request\\n  function getLastRequestId() external view returns (uint32 requestId);\\n\\n  /// @notice Gets the Fee for making a Request against an RNG service\\n  /// @return feeToken The address of the token that is used to pay fees\\n  /// @return requestFee The fee required to be paid to make a request\\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n  /// @notice Sends a request for a random number to the 3rd-party service\\n  /// @dev Some services will complete the request immediately, others may have a time-delay\\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n  /// @return requestId The ID of the request used to get the results of the RNG service\\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\\n  /// should \\\"lock\\\" all activity until the result is available via the `requestId`\\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\n\\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\n\\n  /// @notice Gets the random number produced by the 3rd-party service\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return randomNum The random number\\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\n}\\n\"\r\n    },\r\n    \"contracts/token/TicketInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Interface that allows a user to draw an address using an index\\ninterface TicketInterface {\\n  /// @notice Selects a user using a random number.  The random number will be uniformly bounded to the ticket totalSupply.\\n  /// @param randomNumber The random number to use to select a user.\\n  /// @return The winner\\n  function draw(uint256 randomNumber) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\n\\nlibrary Constants {\\n  IERC1820Registry public constant REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  // keccak256(\\\"ERC777TokensSender\\\")\\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n  // keccak256(\\\"ERC777TokensRecipient\\\")\\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n  // keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n  bytes32 public constant ACCEPT_MAGIC =\\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\\n}\"\r\n    },\r\n    \"contracts/builders/SingleRandomWinnerBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\\\";\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\nimport \\\"../prize-pool/PrizePool.sol\\\";\\nimport \\\"../prize-strategy/single-random-winner/SingleRandomWinnerProxyFactory.sol\\\";\\nimport \\\"../token/ControlledTokenProxyFactory.sol\\\";\\nimport \\\"../token/TicketProxyFactory.sol\\\";\\nimport \\\"../external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract SingleRandomWinnerBuilder {\\n  using SafeCast for uint256;\\n\\n  event SingleRandomWinnerCreated (\\n    address indexed singleRandomWinner,\\n    address indexed ticket,\\n    address indexed sponsorship\\n  );\\n\\n  struct SingleRandomWinnerConfig {\\n    RNGInterface rngService;\\n    uint256 prizePeriodStart;\\n    uint256 prizePeriodSeconds;\\n    string ticketName;\\n    string ticketSymbol;\\n    string sponsorshipName;\\n    string sponsorshipSymbol;\\n    uint256 ticketCreditLimitMantissa;\\n    uint256 ticketCreditRateMantissa;\\n    address[] externalERC20Awards;\\n  }\\n\\n  ControlledTokenProxyFactory public controlledTokenProxyFactory;\\n  TicketProxyFactory public ticketProxyFactory;\\n  SingleRandomWinnerProxyFactory public singleRandomWinnerProxyFactory;\\n  address public trustedForwarder;\\n\\n  constructor (\\n    SingleRandomWinnerProxyFactory _singleRandomWinnerProxyFactory,\\n    address _trustedForwarder,\\n    ControlledTokenProxyFactory _controlledTokenProxyFactory,\\n    TicketProxyFactory _ticketProxyFactory\\n  ) public {\\n    require(address(_singleRandomWinnerProxyFactory) != address(0), \\\"SingleRandomWinnerBuilder/single-random-winner-factory-not-zero\\\");\\n    require(address(_controlledTokenProxyFactory) != address(0), \\\"SingleRandomWinnerBuilder/controlled-token-proxy-factory-not-zero\\\");\\n    require(address(_ticketProxyFactory) != address(0), \\\"SingleRandomWinnerBuilder/ticket-proxy-factory-not-zero\\\");\\n    ticketProxyFactory = _ticketProxyFactory;\\n    singleRandomWinnerProxyFactory = _singleRandomWinnerProxyFactory;\\n    trustedForwarder = _trustedForwarder;\\n    controlledTokenProxyFactory = _controlledTokenProxyFactory;\\n  }\\n\\n  function createSingleRandomWinner(\\n    PrizePool prizePool,\\n    SingleRandomWinnerConfig calldata config,\\n    uint8 decimals,\\n    address owner\\n  ) external returns (SingleRandomWinner) {\\n    SingleRandomWinner prizeStrategy = singleRandomWinnerProxyFactory.create();\\n\\n    address ticket = address(\\n      _createTicket(\\n        prizePool,\\n        config.ticketName,\\n        config.ticketSymbol,\\n        decimals\\n      )\\n    );\\n\\n    address sponsorship = address(\\n      _createControlledToken(\\n        prizePool,\\n        config.sponsorshipName,\\n        config.sponsorshipSymbol,\\n        decimals\\n      )\\n    );\\n\\n    prizeStrategy.initialize(\\n      trustedForwarder,\\n      config.prizePeriodStart,\\n      config.prizePeriodSeconds,\\n      prizePool,\\n      ticket,\\n      sponsorship,\\n      config.rngService,\\n      config.externalERC20Awards\\n    );\\n\\n    prizeStrategy.transferOwnership(owner);\\n\\n    emit SingleRandomWinnerCreated(address(prizeStrategy), ticket, sponsorship);\\n\\n    return prizeStrategy;\\n  }\\n\\n  function _createControlledToken(\\n    TokenControllerInterface controller,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) internal returns (ControlledToken) {\\n    ControlledToken token = controlledTokenProxyFactory.create();\\n    token.initialize(string(name), string(symbol), decimals, trustedForwarder, controller);\\n    return token;\\n  }\\n\\n  function _createTicket(\\n    TokenControllerInterface controller,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) internal returns (Ticket) {\\n    Ticket ticket = ticketProxyFactory.create();\\n    ticket.initialize(string(name), string(symbol), decimals, trustedForwarder, controller);\\n    return ticket;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-strategy/single-random-winner/SingleRandomWinnerProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./SingleRandomWinner.sol\\\";\\nimport \\\"../../external/openzeppelin/ProxyFactory.sol\\\";\\n\\ncontract SingleRandomWinnerProxyFactory is ProxyFactory {\\n\\n  SingleRandomWinner public instance;\\n\\n  constructor () public {\\n    instance = new SingleRandomWinner();\\n  }\\n\\n  function create() external returns (SingleRandomWinner) {\\n    return SingleRandomWinner(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\"\r\n    },\r\n    \"contracts/external/openzeppelin/ProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ControlledTokenProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./ControlledToken.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract ControlledTokenProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  ControlledToken public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () public {\\n    instance = new ControlledToken();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create() external returns (ControlledToken) {\\n    return ControlledToken(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/TicketProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\nimport \\\"./Ticket.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract TicketProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  Ticket public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () public {\\n    instance = new Ticket();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create() external returns (Ticket) {\\n    return Ticket(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/Ticket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\\\";\\nimport \\\"@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol\\\";\\n\\nimport \\\"./ControlledToken.sol\\\";\\nimport \\\"./TicketInterface.sol\\\";\\n\\ncontract Ticket is ControlledToken, TicketInterface {\\n  using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n  bytes32 constant private TREE_KEY = keccak256(\\\"PoolTogether/Ticket\\\");\\n  uint256 constant private MAX_TREE_LEAVES = 5;\\n\\n  // Ticket-weighted odds\\n  SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param _decimals The number of decimals for the Token\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    address _trustedForwarder,\\n    TokenControllerInterface _controller\\n  )\\n    public\\n    virtual\\n    override\\n    initializer\\n  {\\n    super.initialize(_name, _symbol, _decimals, _trustedForwarder, _controller);\\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\\n  }\\n\\n  /// @notice Returns the user's chance of winning.\\n  function chanceOf(address user) external view returns (uint256) {\\n    return sortitionSumTrees.stakeOf(TREE_KEY, bytes32(uint256(user)));\\n  }\\n\\n  /// @notice Selects a user using a random number.  The random number will be uniformly bounded to the ticket totalSupply.\\n  /// @param randomNumber The random number to use to select a user.\\n  /// @return The winner\\n  function draw(uint256 randomNumber) public view override returns (address) {\\n    uint256 bound = totalSupply();\\n    address selected;\\n    if (bound == 0) {\\n      selected = address(0);\\n    } else {\\n      uint256 token = UniformRandomNumber.uniform(randomNumber, bound);\\n      selected = address(uint256(sortitionSumTrees.draw(TREE_KEY, token)));\\n    }\\n    return selected;\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    if (from != address(0)) {\\n      uint256 fromBalance = balanceOf(from).sub(amount);\\n      sortitionSumTrees.set(TREE_KEY, fromBalance, bytes32(uint256(from)));\\n    }\\n\\n    if (to != address(0)) {\\n      uint256 toBalance = balanceOf(to).add(amount);\\n      sortitionSumTrees.set(TREE_KEY, toBalance, bytes32(uint256(to)));\\n    }\\n  }\\n\\n}\"\r\n    },\r\n    \"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\": {\r\n      \"content\": \"/**\\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\\n *  @auditors: []\\n *  @bounties: [<14 days 10 ETH max payout>]\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\\n *  @dev A factory of trees that keep track of staked values for sortition.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint[] stack;\\n        uint[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint) IDsToNodeIndexes;\\n        mapping(uint => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* internal */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.stack = new uint[](0);\\n        tree.nodes = new uint[](0);\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) { // No existing node.\\n            if (_value != 0) { // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) { // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { // Is first child.\\n                        uint parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else { // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else { // Existing node.\\n            if (_value == 0) { // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) { // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* internal Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start\\n     *  @return values The values of the returned leaves\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _cursor,\\n        uint _count\\n    ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint loopStartIndex = startIndex + _cursor;\\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\\n        uint valuesIndex = 0;\\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\\n     *  @param _key The key of the tree.\\n     *  @param _drawnNumber The drawn number.\\n     *  @return ID The drawn ID.\\n     *  `O(k * log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else { // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n        \\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        if (tree.nodes.length == 0) {\\n            return 0;\\n        } else {\\n            return tree.nodes[0];\\n        }\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol\": {\r\n      \"content\": \"/**\\nCopyright 2019 PoolTogether LLC\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @author Brendan Asselstine\\n * @notice A library that uses entropy to select a random number within a bound.  Compensates for modulo bias.\\n * @dev Thanks to https://medium.com/hownetworks/dont-waste-cycles-with-modulo-bias-35b6fdafcf94\\n */\\nlibrary UniformRandomNumber {\\n  /// @notice Select a random number without modulo bias using a random seed and upper bound\\n  /// @param _entropy The seed for randomness\\n  /// @param _upperBound The upper bound of the desired number\\n  /// @return A random number less than the _upperBound\\n  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\\n    require(_upperBound > 0, \\\"UniformRand/min-bound\\\");\\n    uint256 min = -_upperBound % _upperBound;\\n    uint256 random = _entropy;\\n    while (true) {\\n      if (random >= min) {\\n        break;\\n      }\\n      random = uint256(keccak256(abi.encodePacked(random)));\\n    }\\n    return random % _upperBound;\\n  }\\n}\"\r\n    },\r\n    \"contracts/external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface OpenZeppelinProxyFactoryInterface {\\n  function deploy(uint256 _salt, address _logic, address _admin, bytes calldata _data) external returns (address);\\n  function getDeploymentAddress(uint256 _salt, address _sender) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/compound/CompoundPrizePoolProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./CompoundPrizePool.sol\\\";\\nimport \\\"../../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Compound Prize Pool Proxy Factory\\n/// @notice Minimal proxy pattern for creating new Compound Prize Pools\\ncontract CompoundPrizePoolProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied Prize Pools\\n  CompoundPrizePool public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Compound Prize Pool\\n  constructor () public {\\n    instance = new CompoundPrizePool();\\n  }\\n\\n  /// @notice Creates a new Compound Prize Pool as a proxy of the template instance\\n  /// @return A reference to the new proxied Compound Prize Pool\\n  function create() external returns (CompoundPrizePool) {\\n    return CompoundPrizePool(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/compound/CompoundPrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"../../external/compound/CTokenInterface.sol\\\";\\nimport \\\"../PrizePool.sol\\\";\\n\\n/// @title Prize Pool with Compound's cToken\\n/// @notice Manages depositing and withdrawing assets from the Prize Pool\\ncontract CompoundPrizePool is PrizePool {\\n  using SafeMath for uint256;\\n\\n  event CompoundPrizePoolInitialized(address indexed cToken);\\n\\n  /// @notice Interface for the Yield-bearing cToken by Compound\\n  CTokenInterface public cToken;\\n\\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock could be\\n  /// @param _cToken Address of the Compound cToken interface\\n  function initialize (\\n    address _trustedForwarder,\\n    RegistryInterface _reserveRegistry,\\n    address[] memory _controlledTokens,\\n    uint256 _maxExitFeeMantissa,\\n    uint256 _maxTimelockDuration,\\n    CTokenInterface _cToken\\n  )\\n    public\\n    initializer\\n  {\\n    PrizePool.initialize(\\n      _trustedForwarder,\\n      _reserveRegistry,\\n      _controlledTokens,\\n      _maxExitFeeMantissa,\\n      _maxTimelockDuration\\n    );\\n    cToken = _cToken;\\n\\n    emit CompoundPrizePoolInitialized(address(cToken));\\n  }\\n\\n  /// @dev Gets the balance of the underlying assets held by the Yield Service\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal override returns (uint256) {\\n    return cToken.balanceOfUnderlying(address(this));\\n  }\\n\\n  /// @dev Allows a user to supply asset tokens in exchange for yield-bearing tokens\\n  /// to be held in escrow by the Yield Service\\n  /// @param amount The amount of asset tokens to be supplied\\n  function _supply(uint256 amount) internal override {\\n    _token().approve(address(cToken), amount);\\n    require(cToken.mint(amount) == 0, \\\"CompoundPrizePool/mint-failed\\\");\\n  }\\n\\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as a prize enhancement\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\\n    return _externalToken != address(cToken);\\n  }\\n\\n  /// @dev Allows a user to redeem yield-bearing tokens in exchange for the underlying\\n  /// asset tokens held in escrow by the Yield Service\\n  /// @param amount The amount of underlying tokens to be redeemed\\n  /// @return The actual amount of tokens transferred\\n  function _redeem(uint256 amount) internal override returns (uint256) {\\n    IERC20 assetToken = _token();\\n    uint256 before = assetToken.balanceOf(address(this));\\n    require(cToken.redeemUnderlying(amount) == 0, \\\"CompoundPrizePool/redeem-failed\\\");\\n    uint256 diff = assetToken.balanceOf(address(this)).sub(before);\\n    return diff;\\n  }\\n\\n  /// @dev Gets the underlying asset token used by the Yield Service\\n  /// @return A reference to the interface of the underling asset token\\n  function _token() internal override view returns (IERC20) {\\n    return IERC20(cToken.underlying());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/compound/CTokenInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CTokenInterface is IERC20 {\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external override view returns (uint256);\\n    function underlying() external view returns (address);\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n    function supplyRatePerBlock() external returns (uint256);\\n    function exchangeRateCurrent() external returns (uint256);\\n    function mint(uint256 mintAmount) external returns (uint256);\\n    function balanceOf(address user) external override view returns (uint256);\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/builders/ControlledTokenBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../token/ControlledTokenProxyFactory.sol\\\";\\nimport \\\"../token/TicketProxyFactory.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract ControlledTokenBuilder {\\n\\n  event CreatedControlledToken(address indexed token);\\n  event CreatedTicket(address indexed token);\\n\\n  address public trustedForwarder;\\n  ControlledTokenProxyFactory public controlledTokenProxyFactory;\\n  TicketProxyFactory public ticketProxyFactory;\\n\\n  struct ControlledTokenConfig {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    TokenControllerInterface controller;\\n  }\\n\\n  constructor (\\n    address _trustedForwarder,\\n    ControlledTokenProxyFactory _controlledTokenProxyFactory,\\n    TicketProxyFactory _ticketProxyFactory\\n  ) public {\\n    require(address(_controlledTokenProxyFactory) != address(0), \\\"ControlledTokenBuilder/controlledTokenProxyFactory-not-zero\\\");\\n    require(address(_ticketProxyFactory) != address(0), \\\"ControlledTokenBuilder/ticketProxyFactory-not-zero\\\");\\n    controlledTokenProxyFactory = _controlledTokenProxyFactory;\\n    trustedForwarder = _trustedForwarder;\\n    ticketProxyFactory = _ticketProxyFactory;\\n  }\\n\\n  function createControlledToken(\\n    ControlledTokenConfig calldata config\\n  ) external returns (ControlledToken) {\\n    ControlledToken token = controlledTokenProxyFactory.create();\\n\\n    token.initialize(\\n      config.name,\\n      config.symbol,\\n      config.decimals,\\n      trustedForwarder,\\n      config.controller\\n    );\\n\\n    emit CreatedControlledToken(address(token));\\n\\n    return token;\\n  }\\n\\n  function createTicket(\\n    ControlledTokenConfig calldata config\\n  ) external returns (Ticket) {\\n    Ticket token = ticketProxyFactory.create();\\n\\n    token.initialize(\\n      config.name,\\n      config.symbol,\\n      config.decimals,\\n      trustedForwarder,\\n      config.controller\\n    );\\n\\n    emit CreatedTicket(address(token));\\n\\n    return token;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/builders/StakePrizePoolBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PrizePoolBuilder.sol\\\";\\nimport \\\"../registry/RegistryInterface.sol\\\";\\nimport \\\"./SingleRandomWinnerBuilder.sol\\\";\\nimport \\\"../prize-pool/stake/StakePrizePoolProxyFactory.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract StakePrizePoolBuilder is PrizePoolBuilder {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  struct StakePrizePoolConfig {\\n    IERC20 token;\\n    uint256 maxExitFeeMantissa;\\n    uint256 maxTimelockDuration;\\n  }\\n\\n  RegistryInterface public reserveRegistry;\\n  StakePrizePoolProxyFactory public stakePrizePoolProxyFactory;\\n  SingleRandomWinnerBuilder public singleRandomWinnerBuilder;\\n  address public trustedForwarder;\\n\\n  constructor (\\n    RegistryInterface _reserveRegistry,\\n    address _trustedForwarder,\\n    StakePrizePoolProxyFactory _stakePrizePoolProxyFactory,\\n    SingleRandomWinnerBuilder _singleRandomWinnerBuilder\\n  ) public {\\n    require(address(_reserveRegistry) != address(0), \\\"StakePrizePoolBuilder/reserveRegistry-not-zero\\\");\\n    require(address(_singleRandomWinnerBuilder) != address(0), \\\"StakePrizePoolBuilder/single-random-winner-builder-not-zero\\\");\\n    require(address(_stakePrizePoolProxyFactory) != address(0), \\\"StakePrizePoolBuilder/stake-prize-pool-proxy-factory-not-zero\\\");\\n    reserveRegistry = _reserveRegistry;\\n    singleRandomWinnerBuilder = _singleRandomWinnerBuilder;\\n    trustedForwarder = _trustedForwarder;\\n    stakePrizePoolProxyFactory = _stakePrizePoolProxyFactory;\\n  }\\n\\n  function createSingleRandomWinner(\\n    StakePrizePoolConfig calldata prizePoolConfig,\\n    SingleRandomWinnerBuilder.SingleRandomWinnerConfig calldata prizeStrategyConfig,\\n    uint8 decimals\\n  ) external returns (StakePrizePool) {\\n    StakePrizePool prizePool = stakePrizePoolProxyFactory.create();\\n\\n    SingleRandomWinner prizeStrategy = singleRandomWinnerBuilder.createSingleRandomWinner(\\n      prizePool,\\n      prizeStrategyConfig,\\n      decimals,\\n      msg.sender\\n    );\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      prizePoolConfig.maxExitFeeMantissa,\\n      prizePoolConfig.maxTimelockDuration,\\n      prizePoolConfig.token\\n    );\\n\\n    _setupSingleRandomWinner(\\n      prizePool,\\n      prizeStrategy,\\n      prizeStrategyConfig.ticketCreditRateMantissa,\\n      prizeStrategyConfig.ticketCreditLimitMantissa\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n\\n  function createStakePrizePool(\\n    StakePrizePoolConfig calldata config\\n  )\\n    external\\n    returns (StakePrizePool)\\n  {\\n    StakePrizePool prizePool = stakePrizePoolProxyFactory.create();\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      config.maxExitFeeMantissa,\\n      config.maxTimelockDuration,\\n      config.token\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/stake/StakePrizePoolProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./StakePrizePool.sol\\\";\\nimport \\\"../../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Stake Prize Pool Proxy Factory\\n/// @notice Minimal proxy pattern for creating new yVault Prize Pools\\ncontract StakePrizePoolProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied Prize Pools\\n  StakePrizePool public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the yVault Prize Pool\\n  constructor () public {\\n    instance = new StakePrizePool();\\n  }\\n\\n  /// @notice Creates a new Stake Prize Pool as a proxy of the template instance\\n  /// @return A reference to the new proxied Stake Prize Pool\\n  function create() external returns (StakePrizePool) {\\n    return StakePrizePool(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/stake/StakePrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../PrizePool.sol\\\";\\n\\ncontract StakePrizePool is PrizePool {\\n\\n  IERC20 private stakeToken;\\n\\n  event StakePrizePoolInitialized(address indexed stakeToken);\\n\\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock could be\\n  /// @param _stakeToken Address of the stake token\\n  function initialize (\\n    address _trustedForwarder,\\n    RegistryInterface _reserveRegistry,\\n    address[] memory _controlledTokens,\\n    uint256 _maxExitFeeMantissa,\\n    uint256 _maxTimelockDuration,\\n    IERC20 _stakeToken\\n  )\\n    public\\n    initializer\\n  {\\n    PrizePool.initialize(\\n      _trustedForwarder,\\n      _reserveRegistry,\\n      _controlledTokens,\\n      _maxExitFeeMantissa,\\n      _maxTimelockDuration\\n    );\\n    stakeToken = _stakeToken;\\n\\n    emit StakePrizePoolInitialized(address(stakeToken));\\n  }\\n\\n  /// @notice Determines whether the passed token can be transferred out as an external award.\\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n  /// prize strategy should not be allowed to move those tokens.\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\\n    return address(stakeToken) != _externalToken;\\n  }\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal override returns (uint256) {\\n    return stakeToken.balanceOf(address(this));\\n  }\\n\\n  function _token() internal override view returns (IERC20) {\\n    return stakeToken;\\n  }\\n\\n  /// @notice Supplies asset tokens to the yield source.\\n  /// @param mintAmount The amount of asset tokens to be supplied\\n  function _supply(uint256 mintAmount) internal override {\\n    // no-op because nothing else needs to be done\\n  }\\n\\n  /// @notice Redeems asset tokens from the yield source.\\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\\n  /// @return The actual amount of tokens that were redeemed.\\n  function _redeem(uint256 redeemAmount) internal override returns (uint256) {\\n    // no-op because nothing needs to be done\\n  }\\n}\"\r\n    },\r\n    \"contracts/builders/yVaultPrizePoolBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../registry/RegistryInterface.sol\\\";\\nimport \\\"./SingleRandomWinnerBuilder.sol\\\";\\nimport \\\"./PrizePoolBuilder.sol\\\";\\nimport \\\"../prize-strategy/single-random-winner/SingleRandomWinnerProxyFactory.sol\\\";\\nimport \\\"../prize-pool/yearn/yVaultPrizePoolProxyFactory.sol\\\";\\nimport \\\"../token/ControlledTokenProxyFactory.sol\\\";\\nimport \\\"../token/TicketProxyFactory.sol\\\";\\nimport \\\"../external/yearn/yVaultInterface.sol\\\";\\nimport \\\"../external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract yVaultPrizePoolBuilder is PrizePoolBuilder {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  struct yVaultPrizePoolConfig {\\n    yVaultInterface vault;\\n    uint256 reserveRateMantissa;\\n    uint256 maxExitFeeMantissa;\\n    uint256 maxTimelockDuration;\\n  }\\n\\n  RegistryInterface public reserveRegistry;\\n  yVaultPrizePoolProxyFactory public vaultPrizePoolProxyFactory;\\n  SingleRandomWinnerBuilder public singleRandomWinnerBuilder;\\n  address public trustedForwarder;\\n\\n  constructor (\\n    RegistryInterface _reserveRegistry,\\n    address _trustedForwarder,\\n    yVaultPrizePoolProxyFactory _vaultPrizePoolProxyFactory,\\n    SingleRandomWinnerBuilder _singleRandomWinnerBuilder\\n  ) public {\\n    require(address(_reserveRegistry) != address(0), \\\"yVaultPrizePoolBuilder/reserveRegistry-not-zero\\\");\\n    require(address(_singleRandomWinnerBuilder) != address(0), \\\"yVaultPrizePoolBuilder/single-random-winner-builder-not-zero\\\");\\n    require(address(_vaultPrizePoolProxyFactory) != address(0), \\\"yVaultPrizePoolBuilder/compound-prize-pool-builder-not-zero\\\");\\n    reserveRegistry = _reserveRegistry;\\n    singleRandomWinnerBuilder = _singleRandomWinnerBuilder;\\n    trustedForwarder = _trustedForwarder;\\n    vaultPrizePoolProxyFactory = _vaultPrizePoolProxyFactory;\\n  }\\n\\n  function createSingleRandomWinner(\\n    yVaultPrizePoolConfig calldata prizePoolConfig,\\n    SingleRandomWinnerBuilder.SingleRandomWinnerConfig calldata prizeStrategyConfig,\\n    uint8 decimals\\n  ) external returns (yVaultPrizePool) {\\n\\n    yVaultPrizePool prizePool = vaultPrizePoolProxyFactory.create();\\n\\n    SingleRandomWinner prizeStrategy = singleRandomWinnerBuilder.createSingleRandomWinner(\\n      prizePool,\\n      prizeStrategyConfig,\\n      decimals,\\n      msg.sender\\n    );\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      prizePoolConfig.maxExitFeeMantissa,\\n      prizePoolConfig.maxTimelockDuration,\\n      prizePoolConfig.vault,\\n      prizePoolConfig.reserveRateMantissa\\n    );\\n\\n    _setupSingleRandomWinner(\\n      prizePool,\\n      prizeStrategy,\\n      prizeStrategyConfig.ticketCreditRateMantissa,\\n      prizeStrategyConfig.ticketCreditLimitMantissa\\n    );\\n\\n    prizePool.setCreditPlanOf(\\n      address(prizeStrategy.sponsorship()),\\n      prizeStrategyConfig.ticketCreditRateMantissa.toUint128(),\\n      prizeStrategyConfig.ticketCreditLimitMantissa.toUint128()\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n\\n  function createyVaultPrizePool(\\n    yVaultPrizePoolConfig calldata config\\n  )\\n    external\\n    returns (yVaultPrizePool)\\n  {\\n    yVaultPrizePool prizePool = vaultPrizePoolProxyFactory.create();\\n\\n    address[] memory tokens;\\n\\n    prizePool.initialize(\\n      trustedForwarder,\\n      reserveRegistry,\\n      tokens,\\n      config.maxExitFeeMantissa,\\n      config.maxTimelockDuration,\\n      config.vault,\\n      config.reserveRateMantissa\\n    );\\n\\n    prizePool.transferOwnership(msg.sender);\\n\\n    emit PrizePoolCreated(msg.sender, address(prizePool));\\n\\n    return prizePool;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/yearn/yVaultPrizePoolProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./yVaultPrizePool.sol\\\";\\nimport \\\"../../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title yVault Prize Pool Proxy Factory\\n/// @notice Minimal proxy pattern for creating new yVault Prize Pools\\ncontract yVaultPrizePoolProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied Prize Pools\\n  yVaultPrizePool public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the yVault Prize Pool\\n  constructor () public {\\n    instance = new yVaultPrizePool();\\n  }\\n\\n  /// @notice Creates a new yVault Prize Pool as a proxy of the template instance\\n  /// @return A reference to the new proxied yVault Prize Pool\\n  function create() external returns (yVaultPrizePool) {\\n    return yVaultPrizePool(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/yearn/yVaultPrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../external/yearn/yVaultInterface.sol\\\";\\nimport \\\"../PrizePool.sol\\\";\\n\\n/// @title Prize Pool for yEarn's yVaults\\ncontract yVaultPrizePool is PrizePool {\\n  using SafeMath for uint256;\\n\\n  event yVaultPrizePoolInitialized(address indexed vault);\\n  event ReserveRateMantissaSet(uint256 reserveRateMantissa);\\n\\n  /// @notice Interface for the yEarn yVault\\n  yVaultInterface public vault;\\n\\n  /// Amount that is never exposed to the prize\\n  uint256 public reserveRateMantissa;\\n\\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock could be\\n  /// @param _vault Address of the yEarn yVaultInterface\\n  function initialize (\\n    address _trustedForwarder,\\n    RegistryInterface _reserveRegistry,\\n    address[] memory _controlledTokens,\\n    uint256 _maxExitFeeMantissa,\\n    uint256 _maxTimelockDuration,\\n    yVaultInterface _vault,\\n    uint256 _reserveRateMantissa\\n  )\\n    public\\n    initializer\\n  {\\n    PrizePool.initialize(\\n      _trustedForwarder,\\n      _reserveRegistry,\\n      _controlledTokens,\\n      _maxExitFeeMantissa,\\n      _maxTimelockDuration\\n    );\\n    vault = _vault;\\n    _setReserveRateMantissa(_reserveRateMantissa);\\n\\n    emit yVaultPrizePoolInitialized(address(vault));\\n  }\\n\\n  function setReserveRateMantissa(uint256 _reserveRateMantissa) external onlyOwner {\\n    _setReserveRateMantissa(_reserveRateMantissa);\\n  }\\n\\n  function _setReserveRateMantissa(uint256 _reserveRateMantissa) internal {\\n    require(_reserveRateMantissa < 1 ether, \\\"yVaultPrizePool/reserve-rate-lt-one\\\");\\n    reserveRateMantissa = _reserveRateMantissa;\\n\\n    emit ReserveRateMantissaSet(reserveRateMantissa);\\n  }\\n\\n  /// @dev Gets the balance of the underlying assets held by the Yield Service\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal override returns (uint256) {\\n    uint256 total = _sharesToToken(vault.balanceOf(address(this)));\\n    uint256 reserve = FixedPoint.multiplyUintByMantissa(total, reserveRateMantissa);\\n    return total.sub(reserve);\\n  }\\n\\n  /// @dev Allows a user to supply asset tokens in exchange for yield-bearing tokens\\n  /// to be held in escrow by the Yield Service\\n  function _supply(uint256) internal override {\\n    IERC20 assetToken = _token();\\n    uint256 total = assetToken.balanceOf(address(this));\\n    assetToken.approve(address(vault), total);\\n    vault.deposit(total);\\n  }\\n\\n  /// @dev Allows a user to supply asset tokens in exchange for yield-bearing tokens\\n  /// to be held in escrow by the Yield Service\\n  function _supplySpecific(uint256 amount) internal {\\n    _token().approve(address(vault), amount);\\n    vault.deposit(amount);\\n  }\\n\\n  /// @dev The external token cannot be yDai or Dai\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\\n    return _externalToken != address(vault) && _externalToken != vault.token();\\n  }\\n\\n  /// @dev Allows a user to redeem yield-bearing tokens in exchange for the underlying\\n  /// asset tokens held in escrow by the Yield Service\\n  /// @param amount The amount of underlying tokens to be redeemed\\n  /// @return The actual amount of tokens transferred\\n  function _redeem(uint256 amount) internal override returns (uint256) {\\n    IERC20 token = _token();\\n\\n    require(_balance() >= amount, \\\"yVaultPrizePool/insuff-liquidity\\\");\\n\\n    // yVault will try to over-withdraw so that amount is always available\\n    // we want: amount = X - X*feeRate\\n    // amount = X(1 - feeRate)\\n    // amount / (1 - feeRate) = X\\n    // calculate possible fee\\n    uint256 withdrawal;\\n    if (reserveRateMantissa > 0) {\\n      withdrawal = FixedPoint.divideUintByMantissa(amount, uint256(1e18).sub(reserveRateMantissa));\\n    } else {\\n      withdrawal = amount;\\n    }\\n\\n    uint256 sharesToWithdraw = _tokenToShares(withdrawal);\\n    uint256 preBalance = token.balanceOf(address(this));\\n    vault.withdraw(sharesToWithdraw);\\n    uint256 postBalance = token.balanceOf(address(this));\\n\\n    uint256 amountWithdrawn = postBalance.sub(preBalance);\\n    uint256 amountRedeemable = (amountWithdrawn < amount) ? amountWithdrawn : amount;\\n\\n    // Redeposit any asset funds that were removed premptively for fees\\n    if (postBalance > amountRedeemable) {\\n      _supplySpecific(postBalance.sub(amountRedeemable));\\n    }\\n\\n    return amountRedeemable;\\n  }\\n\\n  function _tokenToShares(uint256 tokens) internal view returns (uint256) {\\n    /**\\n      ex. rate = tokens / shares\\n      => shares = shares_total * (tokens / tokens total)\\n     */\\n    return vault.totalSupply().mul(tokens).div(vault.balance());\\n  }\\n\\n  function _sharesToToken(uint256 shares) internal view returns (uint256) {\\n    uint256 ts = vault.totalSupply();\\n    if (ts == 0 || shares == 0) {\\n      return 0;\\n    }\\n    return (vault.balance().mul(shares)).div(ts);\\n  }\\n\\n  /// @dev Gets the underlying asset token used by the Yield Service\\n  /// @return A reference to the interface of the underling asset token\\n  function _token() internal override view returns (IERC20) {\\n    return IERC20(vault.token());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/yearn/yVaultInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface yVaultInterface is IERC20 {\\n    function token() external view returns (address);\\n\\n    function balance() external view returns (uint);\\n    \\n    function deposit(uint _amount) external;\\n    \\n    function withdraw(uint _shares) external;\\n    \\n    function getPricePerFullShare() external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/comptroller/Comptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"../utils/UInt256Array.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\n\\n/// @title The Comptroller disburses rewards to pool users\\n/* solium-disable security/no-block-members */\\ncontract Comptroller is ComptrollerStorage, TokenListenerInterface {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using UInt256Array for uint256[];\\n  using ExtendedSafeCast for uint256;\\n  using BalanceDrip for BalanceDrip.State;\\n  using VolumeDrip for VolumeDrip.State;\\n  using BalanceDripManager for BalanceDripManager.State;\\n  using VolumeDripManager for VolumeDripManager.State;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n  /// @notice Emitted when a balance drip is actived\\n  event BalanceDripActivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    uint256 dripRatePerSecond\\n  );\\n\\n  /// @notice Emitted when a balance drip is deactivated\\n  event BalanceDripDeactivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken\\n  );\\n\\n  /// @notice Emitted when a balance drip rate is updated\\n  event BalanceDripRateSet(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    uint256 dripRatePerSecond\\n  );\\n\\n  /// @notice Emitted when a balance drip drips tokens\\n  event BalanceDripDripped(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    address user,\\n    uint256 amount\\n  );\\n\\n  event DripTokenDripped(\\n    address indexed dripToken,\\n    address indexed user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a volue drip drips tokens\\n  event VolumeDripDripped(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    address user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a user claims drip tokens\\n  event DripTokenClaimed(\\n    address indexed operator,\\n    address indexed dripToken,\\n    address indexed user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a volume drip is activated\\n  event VolumeDripActivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint256 periodSeconds,\\n    uint256 dripAmount\\n  );\\n\\n  event TransferredOut(\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a new volume drip period has started\\n  event VolumeDripPeriodStarted(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint32 period,\\n    uint256 dripAmount,\\n    uint256 endTime\\n  );\\n\\n  /// @notice Emitted when a volume drip period has ended\\n  event VolumeDripPeriodEnded(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint32 period,\\n    uint256 totalSupply,\\n    uint256 drippedTokens\\n  );\\n\\n  /// @notice Emitted when a volume drip is updated\\n  event VolumeDripSet(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint256 periodSeconds,\\n    uint256 dripAmount\\n  );\\n\\n  /// @notice Emitted when a volume drip is deactivated.\\n  event VolumeDripDeactivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral\\n  );\\n\\n  /// @notice Convenience struct used when updating drips\\n  struct UpdatePair {\\n    address source;\\n    address measure;\\n  }\\n\\n  /// @notice Convenience struct used to retrieve balances after updating drips\\n  struct DripTokenBalance {\\n    address dripToken;\\n    uint256 balance;\\n  }\\n\\n  /// @notice Initializes a new Comptroller.\\n  constructor () public {\\n    __Ownable_init();\\n  }\\n\\n  function transferOut(address token, address to, uint256 amount) external onlyOwner {\\n    IERC20(token).transfer(to, amount);\\n\\n    emit TransferredOut(token, to, amount);\\n  }\\n\\n  /// @notice Activates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param dripRatePerSecond The amount of drip tokens that are awarded each second to the total supply of measure.\\n  function activateBalanceDrip(address source, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\\n\\n    balanceDrips[source].activateDrip(measure, dripToken, dripRatePerSecond);\\n\\n    emit BalanceDripActivated(\\n      source,\\n      measure,\\n      dripToken,\\n      dripRatePerSecond\\n    );\\n  }\\n\\n  /// @notice Deactivates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param prevDripToken The previous drip token in the balance drip list.  If the dripToken is the first address,\\n  /// then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function deactivateBalanceDrip(address source, address measure, address dripToken, address prevDripToken) external onlyOwner {\\n    _deactivateBalanceDrip(source, measure, dripToken, prevDripToken);\\n  }\\n\\n  /// @notice Deactivates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param prevDripToken The previous drip token in the balance drip list.  If the dripToken is the first address,\\n  /// then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function _deactivateBalanceDrip(address source, address measure, address dripToken, address prevDripToken) internal {\\n    balanceDrips[source].deactivateDrip(measure, dripToken, prevDripToken, _currentTime().toUint32(), _availableDripTokenBalance(dripToken));\\n\\n    emit BalanceDripDeactivated(source, measure, dripToken);\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @return An array of active Balance Drip token addresses\\n  function getActiveBalanceDripTokens(address source, address measure) external view returns (address[] memory) {\\n    return balanceDrips[source].getActiveBalanceDrips(measure);\\n  }\\n\\n  /// @notice Returns the state of a balance drip.\\n  /// @param source The balance drip \\\"source\\\"; i.e. Prize Pool\\n  /// @param measure The token that measure's a users share of the drip\\n  /// @param dripToken The token that is being dripped to users\\n  /// @return dripRatePerSecond The current drip rate of the balance drip.\\n  /// @return exchangeRateMantissa The current exchange rate from measure to dripTokens\\n  /// @return timestamp The timestamp at which the balance drip was last updated.\\n  function getBalanceDrip(\\n    address source,\\n    address measure,\\n    address dripToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 dripRatePerSecond,\\n      uint128 exchangeRateMantissa,\\n      uint32 timestamp\\n    )\\n  {\\n    BalanceDrip.State storage balanceDrip = balanceDrips[source].getDrip(measure, dripToken);\\n    dripRatePerSecond = balanceDrip.dripRatePerSecond;\\n    exchangeRateMantissa = balanceDrip.exchangeRateMantissa;\\n    timestamp = balanceDrip.timestamp;\\n  }\\n\\n  /// @notice Sets the drip rate for a balance drip.  The drip rate is the number of drip tokens given to the\\n  /// entire supply of measure tokens.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. Prize Pool\\n  /// @param measure The token to use to measure a user's share of the drip rate\\n  /// @param dripToken The token that is dripped to the user\\n  /// @param dripRatePerSecond The new drip rate per second\\n  function setBalanceDripRate(address source, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\\n    balanceDrips[source].setDripRate(measure, dripToken, dripRatePerSecond, _currentTime().toUint32(), _availableDripTokenBalance(dripToken));\\n\\n    emit BalanceDripRateSet(\\n      source,\\n      measure,\\n      dripToken,\\n      dripRatePerSecond\\n    );\\n  }\\n\\n  /// @notice Activates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param periodSeconds The period of the volume drip, in seconds\\n  /// @param dripAmount The amount of dripTokens disbursed each period.\\n  /// @param endTime The time at which the first period ends.\\n  function activateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint32 periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    external\\n    onlyOwner\\n  {\\n    uint32 period;\\n\\n    if (isReferral) {\\n      period = referralVolumeDrips[source].activate(measure, dripToken, periodSeconds, dripAmount, endTime);\\n    } else {\\n      period = volumeDrips[source].activate(measure, dripToken, periodSeconds, dripAmount, endTime);\\n    }\\n\\n    emit VolumeDripActivated(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      periodSeconds,\\n      dripAmount\\n    );\\n\\n    emit VolumeDripPeriodStarted(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      period,\\n      dripAmount,\\n      endTime\\n    );\\n  }\\n\\n  /// @notice Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param prevDripToken The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.\\n  function deactivateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address prevDripToken\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _deactivateVolumeDrip(source, measure, dripToken, isReferral, prevDripToken);\\n  }\\n\\n  /// @notice Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param prevDripToken The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.\\n  function _deactivateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address prevDripToken\\n  )\\n    internal\\n  {\\n    if (isReferral) {\\n      referralVolumeDrips[source].deactivate(measure, dripToken, prevDripToken);\\n    } else {\\n      volumeDrips[source].deactivate(measure, dripToken, prevDripToken);\\n    }\\n\\n    emit VolumeDripDeactivated(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral\\n    );\\n  }\\n\\n\\n  /// @notice Sets the parameters for the *next* volume drip period.  The source, measure, dripToken and isReferral combined\\n  /// are used to uniquely identify a volume drip.  Only callable by the owner.\\n  /// @param source The Prize Pool of the volume drip\\n  /// @param measure The token whose volume is being measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is a referral\\n  /// @param periodSeconds The length to use for the next period\\n  /// @param dripAmount The amount of tokens to drip for the next period\\n  function setVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint32 periodSeconds,\\n    uint112 dripAmount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    if (isReferral) {\\n      referralVolumeDrips[source].set(measure, dripToken, periodSeconds, dripAmount);\\n    } else {\\n      volumeDrips[source].set(measure, dripToken, periodSeconds, dripAmount);\\n    }\\n\\n    emit VolumeDripSet(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      periodSeconds,\\n      dripAmount\\n    );\\n  }\\n\\n  function getVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 periodSeconds,\\n      uint256 dripAmount,\\n      uint256 periodCount\\n    )\\n  {\\n    VolumeDrip.State memory drip;\\n\\n    if (isReferral) {\\n      drip = referralVolumeDrips[source].volumeDrips[measure][dripToken];\\n    } else {\\n      drip = volumeDrips[source].volumeDrips[measure][dripToken];\\n    }\\n\\n    return (\\n      drip.nextPeriodSeconds,\\n      drip.nextDripAmount,\\n      drip.periodCount\\n    );\\n  }\\n\\n  /// @notice Gets a list of active volume drip tokens\\n  /// @param source The volume drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose volume determines user's share of the drip rate.\\n  /// @param isReferral Whether this volume drip is a referral\\n  /// @return An array of active Volume Drip token addresses\\n  function getActiveVolumeDripTokens(address source, address measure, bool isReferral) external view returns (address[] memory) {\\n    if (isReferral) {\\n      return referralVolumeDrips[source].getActiveVolumeDrips(measure);\\n    } else {\\n      return volumeDrips[source].getActiveVolumeDrips(measure);\\n    }\\n  }\\n\\n  function isVolumeDripActive(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    if (isReferral) {\\n      return referralVolumeDrips[source].isActive(measure, dripToken);\\n    } else {\\n      return volumeDrips[source].isActive(measure, dripToken);\\n    }\\n  }\\n\\n  function getVolumeDripPeriod(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint16 period\\n  )\\n    external\\n    view\\n    returns (\\n      uint112 totalSupply,\\n      uint112 dripAmount,\\n      uint32 endTime\\n    )\\n  {\\n    VolumeDrip.Period memory periodState;\\n\\n    if (isReferral) {\\n      periodState = referralVolumeDrips[source].volumeDrips[measure][dripToken].periods[period];\\n    } else {\\n      periodState = volumeDrips[source].volumeDrips[measure][dripToken].periods[period];\\n    }\\n\\n    return (\\n      periodState.totalSupply,\\n      periodState.dripAmount,\\n      periodState.endTime\\n    );\\n  }\\n\\n  /// @notice Returns a users claimable balance of drip tokens.  This is the combination of all balance and volume drips.\\n  /// @param dripToken The token that is being disbursed\\n  /// @param user The user whose balance should be checked.\\n  /// @return The claimable balance of the dripToken by the user.\\n  function balanceOfDrip(address user, address dripToken) external view returns (uint256) {\\n    return dripTokenBalances[dripToken][user];\\n  }\\n\\n  /// @notice Claims a drip token on behalf of a user.  If the passed amount is less than or equal to the users drip balance, then\\n  /// they will be transferred that amount.  Otherwise, it fails.\\n  /// @param user The user for whom to claim the drip tokens\\n  /// @param dripToken The drip token to claim\\n  /// @param amount The amount of drip token to claim\\n  function claimDrip(address user, address dripToken, uint256 amount) public {\\n    address sender = _msgSender();\\n    dripTokenTotalSupply[dripToken] = dripTokenTotalSupply[dripToken].sub(amount);\\n    dripTokenBalances[dripToken][user] = dripTokenBalances[dripToken][user].sub(amount);\\n    require(IERC20(dripToken).transfer(user, amount), \\\"Comptroller/claim-transfer-failed\\\");\\n\\n    emit DripTokenClaimed(sender, dripToken, user, amount);\\n  }\\n\\n  function claimDrips(address user, address[] memory dripTokens) public {\\n    for (uint i = 0; i < dripTokens.length; i++) {\\n      claimDrip(user, dripTokens[i], dripTokenBalances[dripTokens[i]][user]);\\n    }\\n  }\\n\\n  function updateActiveBalanceDripsForPairs(\\n    UpdatePair[] memory pairs\\n  ) public {\\n    uint256 currentTime = _currentTime();\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      _updateActiveBalanceDrips(\\n        balanceDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        IERC20(pair.measure).totalSupply(),\\n        currentTime\\n      );\\n    }\\n  }\\n\\n  function updateActiveVolumeDripsForPairs(\\n    UpdatePair[] memory pairs\\n  ) public {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      _updateActiveVolumeDrips(\\n        volumeDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        false\\n      );\\n      _updateActiveVolumeDrips(\\n        referralVolumeDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        true\\n      );\\n    }\\n  }\\n\\n  function mintAndCaptureVolumeDripsForPairs(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) public {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n\\n      _mintAndCaptureForVolumeDrips(pair.source, pair.measure, user, amount, dripTokens);\\n      _mintAndCaptureReferralVolumeDrips(pair.source, pair.measure, user, amount, dripTokens);\\n    }\\n  }\\n\\n  function _mintAndCaptureForVolumeDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      VolumeDrip.State storage state = volumeDrips[source].volumeDrips[measure][dripToken];\\n      _captureClaimForVolumeDrip(state, source, measure, dripToken, false, user, amount);\\n    }\\n  }\\n\\n  function _mintAndCaptureReferralVolumeDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      VolumeDrip.State storage referralState = referralVolumeDrips[source].volumeDrips[measure][dripToken];\\n      _captureClaimForVolumeDrip(referralState, source, measure, dripToken, true, user, amount);\\n    }\\n  }\\n\\n  function _captureClaimForVolumeDrip(\\n    VolumeDrip.State storage dripState,\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address user,\\n    uint256 amount\\n  ) internal {\\n    uint256 newUserTokens = dripState.mint(\\n      user,\\n      amount\\n    );\\n\\n    if (newUserTokens > 0) {\\n      _addDripBalance(dripToken, user, newUserTokens);\\n      emit VolumeDripDripped(source, measure, dripToken, isReferral, user, newUserTokens);\\n    }\\n  }\\n\\n  /// @param pairs The (source, measure) pairs to update.  For each pair all of the balance drips, volume drips, and referral volume drips will be updated.\\n  /// @param user The user whose drips and balances will be updated.\\n  /// @param dripTokens The drip tokens to retrieve claim balances for.\\n  function captureClaimsForBalanceDripsForPairs(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    address[] memory dripTokens\\n  )\\n    public\\n  {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      uint256 measureBalance = IERC20(pair.measure).balanceOf(user);\\n      _captureClaimsForBalanceDrips(pair.source, pair.measure, user, measureBalance, dripTokens);\\n    }\\n  }\\n\\n  function _captureClaimsForBalanceDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 userMeasureBalance,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      BalanceDrip.State storage state = balanceDrips[source].balanceDrips[measure][dripToken];\\n      if (state.exchangeRateMantissa > 0) {\\n        _captureClaimForBalanceDrip(state, source, measure, dripToken, user, userMeasureBalance);\\n      }\\n    }\\n  }\\n\\n  function _captureClaimForBalanceDrip(\\n    BalanceDrip.State storage dripState,\\n    address source,\\n    address measure,\\n    address dripToken,\\n    address user,\\n    uint256 measureBalance\\n  ) internal {\\n    uint256 newUserTokens = dripState.captureNewTokensForUser(\\n      user,\\n      measureBalance\\n    );\\n\\n    if (newUserTokens > 0) {\\n      _addDripBalance(dripToken, user, newUserTokens);\\n      emit BalanceDripDripped(source, measure, dripToken, user, newUserTokens);\\n    }\\n  }\\n\\n  function balanceOfClaims(\\n    address user,\\n    address[] memory dripTokens\\n  ) public view returns (DripTokenBalance[] memory) {\\n    DripTokenBalance[] memory balances = new DripTokenBalance[](dripTokens.length);\\n    uint256 i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      balances[i] = DripTokenBalance({\\n        dripToken: dripTokens[i],\\n        balance: dripTokenBalances[dripTokens[i]][user]\\n      });\\n    }\\n    return balances;\\n  }\\n\\n  /// @notice Updates the given drips for a user and then claims the given drip tokens.  This call will\\n  /// poke all of the drips and update the claim balances for the given user.\\n  /// @dev This function will be useful to check the *current* claim balances for a user.\\n  /// Just need to run this as a constant function to see the latest balances.\\n  /// in order to claim the values, this function needs to be run alongside a claimDrip function.\\n  /// @param pairs The (source, measure) pairs of drips to update for the given user\\n  /// @param user The user for whom to update and claim tokens\\n  /// @param dripTokens The drip tokens whose entire balance will be claimed after the update.\\n  /// @return The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\\n  function updateDrips(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    address[] memory dripTokens\\n  )\\n    public returns (DripTokenBalance[] memory)\\n  {\\n    updateActiveBalanceDripsForPairs(pairs);\\n    captureClaimsForBalanceDripsForPairs(pairs, user, dripTokens);\\n    updateActiveVolumeDripsForPairs(pairs);\\n    mintAndCaptureVolumeDripsForPairs(pairs, user, 0, dripTokens);\\n    DripTokenBalance[] memory balances = balanceOfClaims(user, dripTokens);\\n    return balances;\\n  }\\n\\n  /// @notice Updates the given drips for a user and then claims the given drip tokens.  This call will\\n  /// poke all of the drips and update the claim balances for the given user.\\n  /// @dev This function will be useful to check the *current* claim balances for a user.\\n  /// Just need to run this as a constant function to see the latest balances.\\n  /// in order to claim the values, this function needs to be run alongside a claimDrip function.\\n  /// @param pairs The (source, measure) pairs of drips to update for the given user\\n  /// @param user The user for whom to update and claim tokens\\n  /// @param dripTokens The drip tokens whose entire balance will be claimed after the update.\\n  /// @return The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\\n  function updateAndClaimDrips(\\n    UpdatePair[] calldata pairs,\\n    address user,\\n    address[] calldata dripTokens\\n  )\\n    external returns (DripTokenBalance[] memory)\\n  {\\n    DripTokenBalance[] memory balances = updateDrips(pairs, user, dripTokens);\\n    claimDrips(user, dripTokens);\\n    return balances;\\n  }\\n\\n  function _activeBalanceDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return balanceDrips[source].activeBalanceDrips[measure].addressArray();\\n  }\\n\\n  function _activeVolumeDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return volumeDrips[source].activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  function _activeReferralVolumeDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return referralVolumeDrips[source].activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Updates the balance drips\\n  /// @param source The Prize Pool of the balance drip\\n  /// @param manager The BalanceDripManager whose drips should be updated\\n  /// @param measure The measure token whose balance is changing\\n  /// @param measureTotalSupply The last total supply of the measure tokens\\n  /// @param currentTime The current\\n  function _updateActiveBalanceDrips(\\n    BalanceDripManager.State storage manager,\\n    address source,\\n    address measure,\\n    uint256 measureTotalSupply,\\n    uint256 currentTime\\n  ) internal {\\n    address prevDripToken = manager.activeBalanceDrips[measure].end();\\n    address currentDripToken = manager.activeBalanceDrips[measure].start();\\n    while (currentDripToken != address(0) && currentDripToken != manager.activeBalanceDrips[measure].end()) {\\n      BalanceDrip.State storage dripState = manager.balanceDrips[measure][currentDripToken];\\n      uint256 limit = _availableDripTokenBalance(currentDripToken);\\n\\n      uint256 newTokens = dripState.drip(\\n        measureTotalSupply,\\n        currentTime,\\n        limit\\n      );\\n\\n      // if we've hit the limit, then kill it.\\n      bool isDripComplete = newTokens == limit;\\n\\n      if (isDripComplete) {\\n        _deactivateBalanceDrip(source, measure, currentDripToken, prevDripToken);\\n      }\\n\\n      prevDripToken = currentDripToken;\\n      currentDripToken = manager.activeBalanceDrips[measure].next(currentDripToken);\\n    }\\n  }\\n\\n  /// @notice Records a deposit for a volume drip\\n  /// @param source The Prize Pool of the volume drip\\n  /// @param manager The VolumeDripManager containing the drips that need to be iterated through.\\n  /// @param isReferral Whether the passed manager contains referral volume drip\\n  /// @param measure The token that was deposited\\n  function _updateActiveVolumeDrips(\\n    VolumeDripManager.State storage manager,\\n    address source,\\n    address measure,\\n    bool isReferral\\n  )\\n    internal\\n  {\\n    address prevDripToken = manager.activeVolumeDrips[measure].end();\\n    uint256 currentTime = _currentTime();\\n    address currentDripToken = manager.activeVolumeDrips[measure].start();\\n    while (currentDripToken != address(0) && currentDripToken != manager.activeVolumeDrips[measure].end()) {\\n      VolumeDrip.State storage dripState = manager.volumeDrips[measure][currentDripToken];\\n      uint256 limit = _availableDripTokenBalance(currentDripToken);\\n\\n      uint32 lastPeriod = dripState.periodCount;\\n      uint256 newTokens = dripState.drip(\\n        currentTime,\\n        limit\\n      );\\n      if (lastPeriod != dripState.periodCount) {\\n        emit VolumeDripPeriodEnded(\\n          source,\\n          measure,\\n          currentDripToken,\\n          isReferral,\\n          lastPeriod,\\n          dripState.periods[lastPeriod].totalSupply,\\n          newTokens\\n        );\\n        emit VolumeDripPeriodStarted(\\n          source,\\n          measure,\\n          currentDripToken,\\n          isReferral,\\n          dripState.periodCount,\\n          dripState.periods[dripState.periodCount].dripAmount,\\n          dripState.periods[dripState.periodCount].endTime\\n        );\\n      }\\n\\n      // if we've hit the limit, then kill it.\\n      bool isDripComplete = newTokens == limit;\\n\\n\\n      if (isDripComplete) {\\n        _deactivateVolumeDrip(source, measure, currentDripToken, isReferral, prevDripToken);\\n      }\\n\\n      prevDripToken = currentDripToken;\\n      currentDripToken = manager.activeVolumeDrips[measure].next(currentDripToken);\\n    }\\n  }\\n\\n  function _addDripBalance(address dripToken, address user, uint256 amount) internal returns (uint256) {\\n    uint256 amountAvailable = _availableDripTokenBalance(dripToken);\\n    uint256 actualAmount = (amount > amountAvailable) ? amountAvailable : amount;\\n\\n    dripTokenTotalSupply[dripToken] = dripTokenTotalSupply[dripToken].add(actualAmount);\\n    dripTokenBalances[dripToken][user] = dripTokenBalances[dripToken][user].add(actualAmount);\\n\\n    emit DripTokenDripped(dripToken, user, actualAmount);\\n    return actualAmount;\\n  }\\n\\n  function _availableDripTokenBalance(address dripToken) internal view returns (uint256) {\\n    uint256 comptrollerBalance = IERC20(dripToken).balanceOf(address(this));\\n    uint256 totalClaimable = dripTokenTotalSupply[dripToken];\\n    return (totalClaimable < comptrollerBalance) ? comptrollerBalance.sub(totalClaimable) : 0;\\n  }\\n\\n  /// @notice Called by a \\\"source\\\" (i.e. Prize Pool) when a user mints new \\\"measure\\\" tokens.\\n  /// @param to The user who is minting the tokens\\n  /// @param amount The amount of tokens they are minting\\n  /// @param measure The measure token they are minting\\n  /// @param referrer The user who referred the minting.\\n  function beforeTokenMint(\\n    address to,\\n    uint256 amount,\\n    address measure,\\n    address referrer\\n  )\\n    external\\n    override\\n  {\\n    address source = _msgSender();\\n    uint256 balance = IERC20(measure).balanceOf(to);\\n    uint256 totalSupply = IERC20(measure).totalSupply();\\n\\n    address[] memory balanceDripTokens = _activeBalanceDripTokens(source, measure);\\n    _updateActiveBalanceDrips(\\n      balanceDrips[source],\\n      source,\\n      measure,\\n      totalSupply,\\n      _currentTime()\\n    );\\n    _captureClaimsForBalanceDrips(source, measure, to, balance, balanceDripTokens);\\n\\n    address[] memory volumeDripTokens = _activeVolumeDripTokens(source, measure);\\n    _updateActiveVolumeDrips(\\n      volumeDrips[source],\\n      source,\\n      measure,\\n      false\\n    );\\n    _mintAndCaptureForVolumeDrips(source, measure, to, amount, volumeDripTokens);\\n\\n    if (referrer != address(0)) {\\n      address[] memory referralVolumeDripTokens = _activeReferralVolumeDripTokens(source, measure);\\n      _updateActiveVolumeDrips(\\n        referralVolumeDrips[source],\\n        source,\\n        measure,\\n        true\\n      );\\n      _mintAndCaptureReferralVolumeDrips(source, measure, referrer, amount, referralVolumeDripTokens);\\n     }\\n  }\\n\\n  /// @notice Called by a \\\"source\\\" (i.e. Prize Pool) when tokens change hands or are burned\\n  /// @param from The user who is sending the tokens\\n  /// @param to The user who is receiving the tokens\\n  /// @param measure The measure token they are burning\\n  function beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256,\\n    address measure\\n  )\\n    external\\n    override\\n  {\\n    if (from == address(0)) {\\n      // ignore minting\\n      return;\\n    }\\n    address source = _msgSender();\\n    uint256 totalSupply = IERC20(measure).totalSupply();\\n    uint256 fromBalance = IERC20(measure).balanceOf(from);\\n\\n    address[] memory balanceDripTokens = _activeBalanceDripTokens(source, measure);\\n\\n    _updateActiveBalanceDrips(\\n      balanceDrips[source],\\n      source,\\n      measure,\\n      totalSupply,\\n      _currentTime()\\n    );\\n\\n    _captureClaimsForBalanceDrips(source, measure, from, fromBalance, balanceDripTokens);\\n\\n    if (to != address(0)) {\\n      uint256 toBalance = IERC20(measure).balanceOf(to);\\n      _captureClaimsForBalanceDrips(source, measure, to, toBalance, balanceDripTokens);\\n    }\\n  }\\n\\n  /// @notice returns the current time.  Allows for override in testing.\\n  /// @return The current time (block.timestamp)\\n  function _currentTime() internal virtual view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/UInt256Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nlibrary UInt256Array {\\n  function remove(uint256[] storage self, uint256 index) internal {\\n    require(index < self.length, \\\"UInt256Array/unknown-index\\\");\\n    self[index] = self[self.length-1];\\n    delete self[self.length-1];\\n    self.pop();\\n  }\\n}\"\r\n    },\r\n    \"contracts/comptroller/ComptrollerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../drip/BalanceDripManager.sol\\\";\\nimport \\\"../drip/VolumeDripManager.sol\\\";\\n\\ncontract ComptrollerStorage is OwnableUpgradeSafe {\\n  mapping(address => VolumeDripManager.State) internal volumeDrips;\\n  mapping(address => VolumeDripManager.State) internal referralVolumeDrips;\\n  mapping(address => BalanceDripManager.State) internal balanceDrips;\\n\\n  mapping(address => uint256) internal dripTokenTotalSupply;\\n  mapping(address => mapping(address => uint256)) internal dripTokenBalances;\\n}\\n\"\r\n    },\r\n    \"contracts/drip/BalanceDripManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"./BalanceDrip.sol\\\";\\n\\n/// @title Manages the lifecycle of a set of Balance Drips.\\nlibrary BalanceDripManager {\\n  using SafeMath for uint256;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n  using BalanceDrip for BalanceDrip.State;\\n\\n  struct State {\\n    mapping(address => MappedSinglyLinkedList.Mapping) activeBalanceDrips;\\n    mapping(address => mapping(address => BalanceDrip.State)) balanceDrips;\\n  }\\n\\n  /// @notice Activates a drip by setting it's state and adding it to the active balance drips list.\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param dripRatePerSecond The amount of the drip token to be dripped per second\\n  function activateDrip(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint256 dripRatePerSecond\\n  )\\n    internal\\n  {\\n    require(!self.activeBalanceDrips[measure].contains(dripToken), \\\"BalanceDripManager/drip-active\\\");\\n    if (self.activeBalanceDrips[measure].count == 0) {\\n      self.activeBalanceDrips[measure].initialize();\\n    }\\n    self.activeBalanceDrips[measure].addAddress(dripToken);\\n    self.balanceDrips[measure][dripToken].resetTotalDripped();\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\\n  }\\n\\n  /// @notice Deactivates an active balance drip.  The balance drip is removed from the active balance drips list.\\n  /// The drip rate for the balance drip will be set to zero to ensure it's \\\"frozen\\\".\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param prevDripToken The previous drip token previous in the list.\\n  /// If no previous, then pass the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  /// @param currentTime The current time\\n  function deactivateDrip(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    address prevDripToken,\\n    uint32 currentTime,\\n    uint256 maxNewTokens\\n  )\\n    internal\\n  {\\n    self.activeBalanceDrips[measure].removeAddress(prevDripToken, dripToken);\\n    self.balanceDrips[measure][dripToken].drip(IERC20(measure).totalSupply(), currentTime, maxNewTokens);\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = 0;\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @return An array of Balance Drip token addresses\\n  function getActiveBalanceDrips(State storage self, address measure) internal view returns (address[] memory) {\\n    return self.activeBalanceDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Sets the drip rate for an active balance drip.\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param dripRatePerSecond The amount to drip of the token each second\\n  /// @param currentTime The current time.\\n  function setDripRate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint256 dripRatePerSecond,\\n    uint32 currentTime,\\n    uint256 maxNewTokens\\n  ) internal {\\n    require(self.activeBalanceDrips[measure].contains(dripToken), \\\"BalanceDripManager/drip-not-active\\\");\\n    self.balanceDrips[measure][dripToken].drip(IERC20(measure).totalSupply(), currentTime, maxNewTokens);\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\\n  }\\n\\n  /// @notice Returns whether or not a drip is active for the given measure, dripToken pair\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @return True if there is an active balance drip for the pair, false otherwise\\n  function isDripActive(State storage self, address measure, address dripToken) internal view returns (bool) {\\n    return self.activeBalanceDrips[measure].contains(dripToken);\\n  }\\n\\n  /// @notice Returns the BalanceDrip.State for the given measure, dripToken pair\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @return The BalanceDrip.State for the pair\\n  function getDrip(State storage self, address measure, address dripToken) internal view returns (BalanceDrip.State storage) {\\n    return self.balanceDrips[measure][dripToken];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/drip/BalanceDrip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"../utils/ExtendedSafeCast.sol\\\";\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\n\\n/// @title Calculates a users share of a token faucet.\\n/// @notice The tokens are dripped at a \\\"drip rate per second\\\".  This is the number of tokens that\\n/// are dripped each second to the entire supply of a \\\"measure\\\" token.  A user's share of ownership\\n/// of the measure token corresponds to the share of the drip tokens per second.\\nlibrary BalanceDrip {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using ExtendedSafeCast for uint256;\\n\\n  struct UserState {\\n    uint128 lastExchangeRateMantissa;\\n  }\\n\\n  struct State {\\n    uint256 dripRatePerSecond;\\n    uint112 exchangeRateMantissa;\\n    uint112 totalDripped;\\n    uint32 timestamp;\\n    mapping(address => UserState) userStates;\\n  }\\n\\n  /// @notice Captures new tokens for a user\\n  /// @dev This must be called before changes to the user's balance (i.e. before mint, transfer or burns)\\n  /// @param self The balance drip state\\n  /// @param user The user to capture tokens for\\n  /// @param userMeasureBalance The current balance of the user's measure tokens\\n  /// @return The number of new tokens\\n  function captureNewTokensForUser(\\n    State storage self,\\n    address user,\\n    uint256 userMeasureBalance\\n  ) internal returns (uint128) {\\n    return _captureNewTokensForUser(\\n      self,\\n      user,\\n      userMeasureBalance\\n    );\\n  }\\n\\n  function resetTotalDripped(State storage self) internal {\\n    self.totalDripped = 0;\\n  }\\n\\n  /// @notice Drips new tokens.\\n  /// @dev Should be called immediately before a change to the measure token's total supply\\n  /// @param self The balance drip state\\n  /// @param measureTotalSupply The measure token's last total supply (prior to any change)\\n  /// @param timestamp The current time\\n  /// @param maxNewTokens Maximum new tokens that can be dripped\\n  /// @return The number of new tokens dripped.\\n  function drip(\\n    State storage self,\\n    uint256 measureTotalSupply,\\n    uint256 timestamp,\\n    uint256 maxNewTokens\\n  ) internal returns (uint256) {\\n    // this should only run once per block.\\n    if (self.timestamp == uint32(timestamp)) {\\n      return 0;\\n    }\\n\\n    uint256 lastTime = self.timestamp == 0 ? timestamp : self.timestamp;\\n    uint256 newSeconds = timestamp.sub(lastTime);\\n\\n    uint112 exchangeRateMantissa = self.exchangeRateMantissa == 0 ? FixedPoint.SCALE.toUint112() : self.exchangeRateMantissa;\\n\\n    uint256 newTokens;\\n    if (newSeconds > 0 && self.dripRatePerSecond > 0) {\\n      newTokens = newSeconds.mul(self.dripRatePerSecond);\\n      if (newTokens > maxNewTokens) {\\n        newTokens = maxNewTokens;\\n      }\\n      uint256 indexDeltaMantissa = measureTotalSupply > 0 ? FixedPoint.calculateMantissa(newTokens, measureTotalSupply) : 0;\\n      exchangeRateMantissa = uint256(exchangeRateMantissa).add(indexDeltaMantissa).toUint112();\\n    }\\n\\n    self.exchangeRateMantissa = exchangeRateMantissa;\\n    self.totalDripped = uint256(self.totalDripped).add(newTokens).toUint112();\\n    self.timestamp = timestamp.toUint32();\\n\\n    return newTokens;\\n  }\\n\\n  function _captureNewTokensForUser(\\n    State storage self,\\n    address user,\\n    uint256 userMeasureBalance\\n  ) private returns (uint128) {\\n    UserState storage userState = self.userStates[user];\\n    uint256 lastExchangeRateMantissa = userState.lastExchangeRateMantissa;\\n    if (lastExchangeRateMantissa == 0) {\\n      // if the index is not intialized\\n      lastExchangeRateMantissa = FixedPoint.SCALE.toUint112();\\n    }\\n\\n    uint256 deltaExchangeRateMantissa = uint256(self.exchangeRateMantissa).sub(lastExchangeRateMantissa);\\n    uint128 newTokens = FixedPoint.multiplyUintByMantissa(userMeasureBalance, deltaExchangeRateMantissa).toUint128();\\n\\n    self.userStates[user] = UserState({\\n      lastExchangeRateMantissa: self.exchangeRateMantissa\\n    });\\n\\n    return newTokens;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ExtendedSafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nlibrary ExtendedSafeCast {\\n\\n  /**\\n    * @dev Converts an unsigned uint256 into a unsigned uint112.\\n    *\\n    * Requirements:\\n    *\\n    * - input must be less than or equal to maxUint112.\\n    */\\n  function toUint112(uint256 value) internal pure returns (uint112) {\\n    require(value < 2**112, \\\"SafeCast: value doesn't fit in an uint112\\\");\\n    return uint112(value);\\n  }\\n\\n  /**\\n    * @dev Converts an unsigned uint256 into a unsigned uint96.\\n    *\\n    * Requirements:\\n    *\\n    * - input must be less than or equal to maxUint96.\\n    */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value < 2**96, \\\"SafeCast: value doesn't fit in an uint96\\\");\\n    return uint96(value);\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/drip/VolumeDripManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"./VolumeDrip.sol\\\";\\n\\n/// @title Manages the active set of Volume Drips.\\nlibrary VolumeDripManager {\\n  using SafeMath for uint256;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n  using VolumeDrip for VolumeDrip.State;\\n\\n  struct State {\\n    mapping(address => MappedSinglyLinkedList.Mapping) activeVolumeDrips;\\n    mapping(address => mapping(address => VolumeDrip.State)) volumeDrips;\\n  }\\n\\n  /// @notice Activates a volume drip for the given (measure,dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param periodSeconds The period of the volume drip in seconds\\n  /// @param dripAmount The amount of tokens to drip each period\\n  /// @param endTime The end time to set for the current period.\\n  function activate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint32 periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    internal\\n    returns (uint32)\\n  {\\n    require(!self.activeVolumeDrips[measure].contains(dripToken), \\\"VolumeDripManager/drip-active\\\");\\n    if (self.activeVolumeDrips[measure].count == 0) {\\n      self.activeVolumeDrips[measure].initialize();\\n    }\\n    self.activeVolumeDrips[measure].addAddress(dripToken);\\n    self.volumeDrips[measure][dripToken].setNewPeriod(periodSeconds, dripAmount, endTime);\\n\\n    return self.volumeDrips[measure][dripToken].periodCount;\\n  }\\n\\n  /// @notice Deactivates the volume drip for the given (measure, dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param prevDripToken The active drip token previous to the passed on in the list.\\n  function deactivate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    address prevDripToken\\n  )\\n    internal\\n  {\\n    self.activeVolumeDrips[measure].removeAddress(prevDripToken, dripToken);\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @return An array of Balance Drip token addresses\\n  function getActiveVolumeDrips(State storage self, address measure) internal view returns (address[] memory) {\\n    return self.activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Sets the parameters for the next period of an active volume drip\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param periodSeconds The length in seconds to use for the next period\\n  /// @param dripAmount The amount of tokens to be dripped in the next period\\n  function set(State storage self, address measure, address dripToken, uint32 periodSeconds, uint112 dripAmount) internal {\\n    require(self.activeVolumeDrips[measure].contains(dripToken), \\\"VolumeDripManager/drip-not-active\\\");\\n    self.volumeDrips[measure][dripToken].setNextPeriod(periodSeconds, dripAmount);\\n  }\\n\\n  /// @notice Returns whether or not an active volume drip exists for the given (measure, dripToken) pair\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  function isActive(State storage self, address measure, address dripToken) internal view returns (bool) {\\n    return self.activeVolumeDrips[measure].contains(dripToken);\\n  }\\n\\n  /// @notice Returns the VolumeDrip.State for the given (measure, dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  function getDrip(State storage self, address measure, address dripToken) internal view returns (VolumeDrip.State storage) {\\n    return self.volumeDrips[measure][dripToken];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/drip/VolumeDrip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"../utils/ExtendedSafeCast.sol\\\";\\n\\nlibrary VolumeDrip {\\n  using SafeMath for uint256;\\n  using SafeCast for uint256;\\n  using ExtendedSafeCast for uint256;\\n\\n  struct Deposit {\\n    uint112 balance;\\n    uint32 period;\\n  }\\n\\n  struct Period {\\n    uint112 totalSupply;\\n    uint112 dripAmount;\\n    uint32 endTime;\\n  }\\n\\n  struct State {\\n    mapping(address => Deposit) deposits;\\n    mapping(uint32 => Period) periods;\\n    uint32 nextPeriodSeconds;\\n    uint112 nextDripAmount;\\n    uint112 __gap;\\n    uint112 totalDripped;\\n    uint32 periodCount;\\n  }\\n\\n  function setNewPeriod(\\n    State storage self,\\n    uint32 _periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    internal\\n    minPeriod(_periodSeconds)\\n  {\\n    self.nextPeriodSeconds = _periodSeconds;\\n    self.nextDripAmount = dripAmount;\\n    self.totalDripped = 0;\\n    self.periodCount = uint256(self.periodCount).add(1).toUint16();\\n    self.periods[self.periodCount] = Period({\\n      totalSupply: 0,\\n      dripAmount: dripAmount,\\n      endTime: endTime\\n    });\\n  }\\n\\n  function setNextPeriod(\\n    State storage self,\\n    uint32 _periodSeconds,\\n    uint112 dripAmount\\n  )\\n    internal\\n    minPeriod(_periodSeconds)\\n  {\\n    self.nextPeriodSeconds = _periodSeconds;\\n    self.nextDripAmount = dripAmount;\\n  }\\n\\n  function drip(\\n    State storage self,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    if (_isPeriodOver(self, currentTime)) {\\n      return _completePeriod(self, currentTime, maxNewTokens);\\n    }\\n    return 0;\\n  }\\n\\n  function mint(\\n    State storage self,\\n    address user,\\n    uint256 amount\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    if (self.periodCount == 0) {\\n      return 0;\\n    }\\n    uint256 accrued = _lastBalanceAccruedAmount(self, self.deposits[user].period, self.deposits[user].balance);\\n    uint32 currentPeriod = self.periodCount;\\n    if (accrued > 0) {\\n      self.deposits[user] = Deposit({\\n        balance: amount.toUint112(),\\n        period: currentPeriod\\n      });\\n    } else {\\n      self.deposits[user] = Deposit({\\n        balance: uint256(self.deposits[user].balance).add(amount).toUint112(),\\n        period: currentPeriod\\n      });\\n    }\\n    self.periods[currentPeriod].totalSupply = uint256(self.periods[currentPeriod].totalSupply).add(amount).toUint112();\\n\\n    return accrued;\\n  }\\n\\n  function currentPeriod(State storage self) internal view returns (Period memory) {\\n    return self.periods[self.periodCount];\\n  }\\n\\n  function _isPeriodOver(State storage self, uint256 currentTime) private view returns (bool) {\\n    return currentTime >= self.periods[self.periodCount].endTime;\\n  }\\n\\n  function _completePeriod(\\n    State storage self,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  ) private onlyPeriodOver(self, currentTime) returns (uint256) {\\n    // calculate the actual drip amount\\n    uint112 dripAmount;\\n    // If no one deposited, then don't drip anything\\n    if (self.periods[self.periodCount].totalSupply > 0) {\\n      dripAmount = self.periods[self.periodCount].dripAmount;\\n    }\\n\\n    // if the drip amount is not valid, it has to be updated.\\n    if (dripAmount > maxNewTokens) {\\n      dripAmount = maxNewTokens.toUint112();\\n      self.periods[self.periodCount].dripAmount = dripAmount;\\n    }\\n\\n    // if we are completing the period far into the future, then we'll have skipped a lot of periods.\\n    // Here we set the end time so that it's the next period from *now*\\n    uint256 lastEndTime = self.periods[self.periodCount].endTime;\\n    uint256 numberOfPeriods = currentTime.sub(lastEndTime).div(self.nextPeriodSeconds).add(1);\\n    uint256 endTime = lastEndTime.add(numberOfPeriods.mul(self.nextPeriodSeconds));\\n    self.totalDripped = uint256(self.totalDripped).add(dripAmount).toUint112();\\n    self.periodCount = uint256(self.periodCount).add(1).toUint16();\\n\\n    self.periods[self.periodCount] = Period({\\n      totalSupply: 0,\\n      dripAmount: self.nextDripAmount,\\n      endTime: endTime.toUint32()\\n    });\\n\\n    return dripAmount;\\n  }\\n\\n  function _lastBalanceAccruedAmount(\\n    State storage self,\\n    uint32 depositPeriod,\\n    uint128 balance\\n  )\\n    private view\\n    returns (uint256)\\n  {\\n    uint256 accrued;\\n    if (depositPeriod < self.periodCount && self.periods[depositPeriod].totalSupply > 0) {\\n      uint256 fractionMantissa = FixedPoint.calculateMantissa(balance, self.periods[depositPeriod].totalSupply);\\n      accrued = FixedPoint.multiplyUintByMantissa(self.periods[depositPeriod].dripAmount, fractionMantissa);\\n    }\\n    return accrued;\\n  }\\n\\n  modifier onlyPeriodNotOver(State storage self, uint256 _currentTime) {\\n    require(!_isPeriodOver(self, _currentTime), \\\"VolumeDrip/period-over\\\");\\n    _;\\n  }\\n\\n  modifier onlyPeriodOver(State storage self, uint256 _currentTime) {\\n    require(_isPeriodOver(self, _currentTime), \\\"VolumeDrip/period-not-over\\\");\\n    _;\\n  }\\n\\n  modifier minPeriod(uint256 _periodSeconds) {\\n    require(_periodSeconds > 0, \\\"VolumeDrip/period-gt-zero\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/counterfactual-action/CounterfactualAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-pool/PrizePool.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract CounterfactualAction {\\n  function depositTo(address payable user, PrizePool prizePool, address output, address referrer) external {\\n    IERC20 token = prizePool.token();\\n    uint256 amount = token.balanceOf(address(this));\\n    token.approve(address(prizePool), amount);\\n    prizePool.depositTo(user, amount, output, referrer);\\n    selfdestruct(user);\\n  }\\n\\n  function cancel(address payable user, PrizePool prizePool) external {\\n    IERC20 token = prizePool.token();\\n    token.transfer(user, token.balanceOf(address(this)));\\n    selfdestruct(user);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/counterfactual-action/CounterfactualActionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Create2.sol\\\";\\nimport \\\"./CounterfactualAction.sol\\\";\\nimport \\\"../utils/MinimalProxyLibrary.sol\\\";\\n\\ncontract CounterfactualActionFactory {\\n\\n  CounterfactualAction public depositor;\\n  PrizePool public prizePool;\\n\\n  function initialize(PrizePool _prizePool) external {\\n    require(address(_prizePool) != address(0), \\\"CounterfactualActionFactory/prize-pool-not-zero\\\");\\n    depositor = new CounterfactualAction();\\n    prizePool = _prizePool;\\n  }\\n\\n  function calculateAddress(address payable user) external view returns (address) {\\n    return Create2.computeAddress(salt(user), keccak256(MinimalProxyLibrary.minimalProxy(address(depositor))));\\n  }\\n\\n  function depositTo(address payable user, address token, address referrer) external {\\n    CounterfactualAction d = newAction(user);\\n    d.depositTo(user, prizePool, token, referrer);\\n  }\\n\\n  function cancel(address payable user) external {\\n    CounterfactualAction d = newAction(user);\\n    d.cancel(user, prizePool);\\n  }\\n\\n  function newAction(address payable user) internal returns (CounterfactualAction) {\\n    return CounterfactualAction(Create2.deploy(0, salt(user), MinimalProxyLibrary.minimalProxy(address(depositor))));\\n  }\\n\\n  function salt(address payable user) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(user));\\n  }\\n\\n  function code() external view returns (bytes memory) {\\n    return MinimalProxyLibrary.minimalProxy(address(depositor));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Create2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(bytes20(_data << 96));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MinimalProxyLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\n// solium-disable security/no-inline-assembly\\nlibrary MinimalProxyLibrary {\\n  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let size := 0x37\\n      // allocate output byte array - this could also be done without assembly\\n      // by using clone = new bytes(size)\\n      clone := mload(0x40)\\n      // new \\\"memory end\\\" including padding\\n      mstore(0x40, add(clone, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n      // store length in memory\\n      mstore(clone, size)\\n      mstore(add(clone, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x34), targetBytes)\\n      mstore(add(clone, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/maker/DaiInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface DaiInterface is IERC20 {\\n    // --- Approve by signature ---\\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n  function transferFrom(address src, address dst, uint wad) external override returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/opengsn/TrustedForwarder.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@opengsn/gsn/contracts/forwarder/Forwarder.sol\\\";\\n\\ncontract TrustedForwarder is Forwarder {}\"\r\n    },\r\n    \"@opengsn/gsn/contracts/forwarder/Forwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() public {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _updateNonce(req);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\\n        if ( address(this).balance>0 ) {\\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest memory req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"nonce mismatch\\\");\\n    }\\n\\n    function _updateNonce(ForwardRequest memory req) internal {\\n        nonces[req.from]++;\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n\\n    function _verifySig(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData,\\n        bytes memory sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"unregistered domain separator\\\");\\n        require(typeHashes[requestTypeHash], \\\"unregistered request typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest memory req,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            abi.encode(\\n                req.from,\\n                req.to,\\n                req.value,\\n                req.gas,\\n                req.nonce,\\n                keccak256(req.data)\\n            ),\\n            suffixData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@opengsn/gsn/contracts/forwarder/IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)\\n     *        if it does contain a value, then a comma is added first.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\"\r\n    },\r\n    \"contracts/permit/PermitAndDepositDai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../external/maker/DaiInterface.sol\\\";\\nimport \\\"../prize-pool/PrizePoolInterface.sol\\\";\\n\\n/// @title Allows users to approve and deposit dai into a prize pool in a single transaction.\\ncontract PermitAndDepositDai {\\n  using SafeERC20 for DaiInterface;\\n\\n  /// @notice Permits this contract to spend on a users behalf, and deposits into the prize pool.\\n  /// @dev The Dai permit params match the Dai#permit function, but it expects the `spender` to be\\n  /// the address of this contract.\\n  /// @param holder The address spending the tokens\\n  /// @param nonce The nonce of the tx.  Should be retrieved from the Dai token\\n  /// @param expiry The timestamp at which the sig expires\\n  /// @param allowed If true, then the spender is approving holder the max allowance.  False makes the allowance zero.\\n  /// @param v The `v` portion of the signature.\\n  /// @param r The `r` portion of the signature.\\n  /// @param s The `s` portion of the signature.\\n  /// @param prizePool The prize pool to deposit into\\n  /// @param to The address that will receive the controlled tokens\\n  /// @param amount The amount to deposit\\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\\n  /// @param referrer The address that referred the deposit\\n  function permitAndDepositTo(\\n    // --- Approve by signature ---\\n    address dai, address holder, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s,\\n    address prizePool, address to, uint256 amount, address controlledToken, address referrer\\n  ) external {\\n    DaiInterface(dai).permit(holder, address(this), nonce, expiry, allowed, v, r, s);\\n    _depositTo(dai, holder, prizePool, to, amount, controlledToken, referrer);\\n  }\\n\\n  /// @notice Deposits into a Prize Pool from the sender.  Tokens will be transferred from the sender\\n  /// then deposited into the Pool on the sender's behalf.  This can be called after permitAndDepositTo is called,\\n  /// as this contract will have full approval for a user.\\n  /// @param prizePool The prize pool to deposit into\\n  /// @param to The address that will receive the controlled tokens\\n  /// @param amount The amount to deposit\\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\\n  /// @param referrer The address that referred the deposit\\n  function depositTo(\\n    address dai,\\n    address prizePool,\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  ) external {\\n    _depositTo(dai, msg.sender, prizePool, to, amount, controlledToken, referrer);\\n  }\\n\\n  function _depositTo(\\n    address dai,\\n    address holder,\\n    address prizePool,\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  ) internal {\\n    DaiInterface(dai).safeTransferFrom(holder, address(this), amount);\\n    DaiInterface(dai).approve(address(prizePool), amount);\\n    PrizePoolInterface(prizePool).depositTo(to, amount, controlledToken, referrer);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/registry/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./RegistryInterface.sol\\\";\\n\\n/// @title Interface that allows a user to draw an address using an index\\ncontract Registry is OwnableUpgradeSafe, RegistryInterface {\\n  address private pointer;\\n\\n  event Registered(address indexed pointer);\\n\\n  constructor () public {\\n    __Ownable_init();\\n  }\\n\\n  function register(address _pointer) external onlyOwner {\\n    pointer = _pointer;\\n\\n    emit Registered(pointer);\\n  }\\n\\n  function lookup() external override view returns (address) {\\n    return pointer;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reserve/Reserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ReserveInterface.sol\\\";\\nimport \\\"../prize-pool/PrizePoolInterface.sol\\\";\\n\\n/// @title Interface that allows a user to draw an address using an index\\ncontract Reserve is OwnableUpgradeSafe, ReserveInterface {\\n\\n  event ReserveRateMantissaSet(uint256 rateMantissa);\\n\\n  uint256 public rateMantissa;\\n\\n  constructor () public {\\n    __Ownable_init();\\n  }\\n\\n  function setRateMantissa(\\n    uint256 _rateMantissa\\n  )\\n    external\\n    onlyOwner\\n  {\\n    rateMantissa = _rateMantissa;\\n\\n    emit ReserveRateMantissaSet(rateMantissa);\\n  }\\n\\n  function withdrawReserve(address prizePool, address to) external onlyOwner returns (uint256) {\\n    return PrizePoolInterface(prizePool).withdrawReserve(to);\\n  }\\n\\n  function reserveRateMantissa(address) external view override returns (uint256) {\\n    return rateMantissa;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/BalanceDripExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../drip/BalanceDrip.sol\\\";\\n\\ncontract BalanceDripExposed {\\n  using BalanceDrip for BalanceDrip.State;\\n\\n  event DrippedTotalSupply(\\n    uint256 newTokens\\n  );\\n\\n  event Dripped(\\n    address indexed user,\\n    uint256 newTokens\\n  );\\n\\n  BalanceDrip.State internal dripState;\\n\\n  function setDripRate(\\n    uint256 dripRatePerSecond\\n  ) external {\\n    dripState.dripRatePerSecond = dripRatePerSecond;\\n  }\\n\\n  function drip(\\n    uint256 measureTotalSupply,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  ) external returns (uint256) {\\n    uint256 newTokens = dripState.drip(\\n      measureTotalSupply,\\n      currentTime,\\n      maxNewTokens\\n    );\\n\\n    emit DrippedTotalSupply(newTokens);\\n\\n    return newTokens;\\n  }\\n\\n  function captureNewTokensForUser(\\n    address user,\\n    uint256 userMeasureBalance\\n  ) external returns (uint128) {\\n    uint128 newTokens = dripState.captureNewTokensForUser(\\n      user,\\n      userMeasureBalance\\n    );\\n\\n    emit Dripped(user, newTokens);\\n\\n    return newTokens;\\n  }\\n\\n  function dripTwice(\\n    uint256 measureTotalSupply,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  ) external returns (uint256) {\\n    uint256 newTokens = dripState.drip(\\n      measureTotalSupply,\\n      currentTime,\\n      maxNewTokens\\n    );\\n\\n    newTokens = newTokens + dripState.drip(\\n      measureTotalSupply,\\n      currentTime,\\n      maxNewTokens\\n    );\\n\\n    emit DrippedTotalSupply(newTokens);\\n\\n    return newTokens;\\n  }\\n\\n  function exchangeRateMantissa() external view returns (uint256) {\\n    return dripState.exchangeRateMantissa;\\n  }\\n\\n  function totalDripped() external view returns (uint256) {\\n    return dripState.totalDripped;\\n  }\\n\\n  function resetTotalDripped() external {\\n    dripState.resetTotalDripped();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/BalanceDripManagerExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../drip/BalanceDripManager.sol\\\";\\n\\ncontract BalanceDripManagerExposed {\\n  using BalanceDripManager for BalanceDripManager.State;\\n\\n  BalanceDripManager.State dripManager;\\n\\n  function activateDrip(address measure, address dripToken, uint256 dripRatePerSecond) external {\\n    dripManager.activateDrip(measure, dripToken, dripRatePerSecond);\\n  }\\n\\n  function deactivateDrip(address measure, address prevDripToken, address dripToken, uint32 currentTime, uint256 maxNewTokens) external {\\n    dripManager.deactivateDrip(measure, prevDripToken, dripToken, currentTime, maxNewTokens);\\n  }\\n\\n  function isDripActive(address measure, address dripToken) external view returns (bool) {\\n    return dripManager.isDripActive(measure, dripToken);\\n  }\\n\\n  function setDripRate(address measure, address dripToken, uint256 dripRatePerSecond, uint32 currentTime, uint256 maxNewTokens) external {\\n    dripManager.setDripRate(measure, dripToken, dripRatePerSecond, currentTime, maxNewTokens);\\n  }\\n\\n  function getActiveBalanceDrips(address measure) external view returns (address[] memory) {\\n    return dripManager.getActiveBalanceDrips(measure);\\n  }\\n\\n  function getDrip(\\n    address measure,\\n    address dripToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 dripRatePerSecond,\\n      uint128 exchangeRateMantissa,\\n      uint32 timestamp\\n    )\\n  {\\n    BalanceDrip.State storage dripState = dripManager.getDrip(measure, dripToken);\\n    dripRatePerSecond = dripState.dripRatePerSecond;\\n    exchangeRateMantissa = dripState.exchangeRateMantissa;\\n    timestamp = dripState.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/CompoundPrizePoolHarness.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-pool/compound/CompoundPrizePool.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract CompoundPrizePoolHarness is CompoundPrizePool {\\n\\n  uint256 public currentTime;\\n\\n  function setCurrentTime(uint256 _currentTime) external {\\n    currentTime = _currentTime;\\n  }\\n\\n  function setTimelockBalance(uint256 _timelockBalance) external {\\n    timelockTotalSupply = _timelockBalance;\\n  }\\n\\n  function _currentTime() internal override view returns (uint256) {\\n    return currentTime;\\n  }\\n\\n  function supply(uint256 mintAmount) external {\\n    _supply(mintAmount);\\n  }\\n\\n  function redeem(uint256 redeemAmount) external returns (uint256) {\\n    return _redeem(redeemAmount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/CompoundPrizePoolHarnessProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./CompoundPrizePoolHarness.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Compound Prize Pool Proxy Factory\\n/// @notice Minimal proxy pattern for creating new Compound Prize Pools\\ncontract CompoundPrizePoolHarnessProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied Prize Pools\\n  CompoundPrizePoolHarness public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Compound Prize Pool\\n  constructor () public {\\n    instance = new CompoundPrizePoolHarness();\\n  }\\n\\n  /// @notice Creates a new Compound Prize Pool as a proxy of the template instance\\n  /// @return A reference to the new proxied Compound Prize Pool\\n  function create() external returns (CompoundPrizePoolHarness) {\\n    return CompoundPrizePoolHarness(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ComptrollerHarness.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../comptroller/Comptroller.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract ComptrollerHarness is Comptroller {\\n\\n  uint256 internal time;\\n\\n  function setCurrentTime(uint256 _time) external {\\n    time = _time;\\n  }\\n\\n  function _currentTime() internal override view returns (uint256) {\\n    return time;\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/test/CTokenMock.sol\": {\r\n      \"content\": \"/**\\nCopyright 2019 PoolTogether LLC\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\n\\nimport \\\"./ERC20Mintable.sol\\\";\\n\\ncontract CTokenMock is ERC20UpgradeSafe {\\n  mapping(address => uint256) internal ownerTokenAmounts;\\n  ERC20Mintable public underlying;\\n\\n  uint256 internal __supplyRatePerBlock;\\n\\n  constructor (\\n    ERC20Mintable _token,\\n    uint256 _supplyRatePerBlock\\n  ) public {\\n    require(address(_token) != address(0), \\\"token is not defined\\\");\\n    underlying = _token;\\n    __supplyRatePerBlock = _supplyRatePerBlock;\\n  }\\n\\n  function mint(uint256 amount) external returns (uint) {\\n    uint256 newCTokens;\\n    if (totalSupply() == 0) {\\n      newCTokens = amount;\\n    } else {\\n      // they need to hold the same assets as tokens.\\n      // Need to calculate the current exchange rate\\n      uint256 fractionOfCredit = FixedPoint.calculateMantissa(amount, underlying.balanceOf(address(this)));\\n      newCTokens = FixedPoint.multiplyUintByMantissa(totalSupply(), fractionOfCredit);\\n    }\\n    _mint(msg.sender, newCTokens);\\n    require(underlying.transferFrom(msg.sender, address(this), amount), \\\"could not transfer tokens\\\");\\n    return 0;\\n  }\\n\\n  function getCash() external view returns (uint) {\\n    return underlying.balanceOf(address(this));\\n  }\\n\\n  function redeemUnderlying(uint256 requestedAmount) external returns (uint) {\\n    uint256 cTokens = cTokenValueOf(requestedAmount);\\n    _burn(msg.sender, cTokens);\\n    require(underlying.transfer(msg.sender, requestedAmount), \\\"could not transfer tokens\\\");\\n  }\\n\\n  function accrue() external {\\n    uint256 newTokens = (underlying.balanceOf(address(this)) * 120) / 100;\\n    underlying.mint(address(this), newTokens);\\n  }\\n\\n  function accrueCustom(uint256 amount) external {\\n    underlying.mint(address(this), amount);\\n  }\\n\\n  function burn(uint256 amount) external {\\n    underlying.burn(address(this), amount);\\n  }\\n\\n  function cTokenValueOf(uint256 tokens) public view returns (uint256) {\\n    return FixedPoint.divideUintByMantissa(tokens, exchangeRateCurrent());\\n  }\\n\\n  function balanceOfUnderlying(address account) public view returns (uint) {\\n    return FixedPoint.multiplyUintByMantissa(balanceOf(account), exchangeRateCurrent());\\n  }\\n\\n  function exchangeRateCurrent() public view returns (uint256) {\\n    if (totalSupply() == 0) {\\n      return FixedPoint.SCALE;\\n    } else {\\n      return FixedPoint.calculateMantissa(underlying.balanceOf(address(this)), totalSupply());\\n    }\\n  }\\n\\n  function supplyRatePerBlock() external view returns (uint) {\\n    return __supplyRatePerBlock;\\n  }\\n\\n  function setSupplyRateMantissa(uint256 _supplyRatePerBlock) external {\\n    __supplyRatePerBlock = _supplyRatePerBlock;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ERC20Mintable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20UpgradeSafe {\\n\\n    constructor(string memory _name, string memory _symbol) public {\\n        __ERC20_init(_name, _symbol);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) public returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/Dai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../external/maker/DaiInterface.sol\\\";\\n\\ncontract Dai is DaiInterface {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n    * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n    * a default value of 18.\\n    *\\n    * To select a different value for {decimals}, use {_setupDecimals}.\\n    *\\n    * All three of these values are immutable: they can only be set once during\\n    * construction.\\n    */\\n  constructor (uint256 chainId_) public {\\n    string memory version = \\\"1\\\";\\n\\n    _name = \\\"Dai Stablecoin\\\";\\n    _symbol = \\\"DAI\\\";\\n    _decimals = 18;\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(_name)),\\n        keccak256(bytes(version)),\\n        chainId_,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  /**\\n    * @dev Returns the name of the token.\\n    */\\n  function name() public view returns (string memory) {\\n      return _name;\\n  }\\n\\n  /**\\n    * @dev Returns the symbol of the token, usually a shorter version of the\\n    * name.\\n    */\\n  function symbol() public view returns (string memory) {\\n      return _symbol;\\n  }\\n\\n  /**\\n    * @dev Returns the number of decimals used to get its user representation.\\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    *\\n    * Tokens usually opt for a value of 18, imitating the relationship between\\n    * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n    * called.\\n    *\\n    * NOTE: This information is only used for _display_ purposes: it in\\n    * no way affects any of the arithmetic of the contract, including\\n    * {IERC20-balanceOf} and {IERC20-transfer}.\\n    */\\n  function decimals() public view returns (uint8) {\\n      return _decimals;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-totalSupply}.\\n    */\\n  function totalSupply() public view override returns (uint256) {\\n      return _totalSupply;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-balanceOf}.\\n    */\\n  function balanceOf(address account) public view override returns (uint256) {\\n      return _balances[account];\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transfer}.\\n    *\\n    * Requirements:\\n    *\\n    * - `recipient` cannot be the zero address.\\n    * - the caller must have a balance of at least `amount`.\\n    */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n      _transfer(msg.sender, recipient, amount);\\n      return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-allowance}.\\n    */\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n      return _allowances[owner][spender];\\n  }\\n\\n  /**\\n    * @dev See {IERC20-approve}.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n      _approve(msg.sender, spender, amount);\\n      return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\n    * required by the EIP. See the note at the beginning of {ERC20};\\n    *\\n    * Requirements:\\n    * - `sender` and `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    * - the caller must have allowance for ``sender``'s tokens of at least\\n    * `amount`.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n      _transfer(sender, recipient, amount);\\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n      return true;\\n  }\\n\\n  /**\\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\\n    *\\n    * This is an alternative to {approve} that can be used as a mitigation for\\n    * problems described in {IERC20-approve}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n      return true;\\n  }\\n\\n  /**\\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n    *\\n    * This is an alternative to {approve} that can be used as a mitigation for\\n    * problems described in {IERC20-approve}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    * - `spender` must have allowance for the caller of at least\\n    * `subtractedValue`.\\n    */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n      return true;\\n  }\\n\\n  /**\\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\\n    *\\n    * This is internal function is equivalent to {transfer}, and can be used to\\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\\n    *\\n    * Emits a {Transfer} event.\\n    *\\n    * Requirements:\\n    *\\n    * - `sender` cannot be the zero address.\\n    * - `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    */\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n      require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n      require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n      _beforeTokenTransfer(sender, recipient, amount);\\n\\n      _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n      _balances[recipient] = _balances[recipient].add(amount);\\n      emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n    * the total supply.\\n    *\\n    * Emits a {Transfer} event with `from` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `to` cannot be the zero address.\\n    */\\n  function _mint(address account, uint256 amount) internal virtual {\\n      require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n      _beforeTokenTransfer(address(0), account, amount);\\n\\n      _totalSupply = _totalSupply.add(amount);\\n      _balances[account] = _balances[account].add(amount);\\n      emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n    * @dev Destroys `amount` tokens from `account`, reducing the\\n    * total supply.\\n    *\\n    * Emits a {Transfer} event with `to` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `account` cannot be the zero address.\\n    * - `account` must have at least `amount` tokens.\\n    */\\n  function _burn(address account, uint256 amount) internal virtual {\\n      require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n      _beforeTokenTransfer(account, address(0), amount);\\n\\n      _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n      _totalSupply = _totalSupply.sub(amount);\\n      emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n    *\\n    * This internal function is equivalent to `approve`, and can be used to\\n    * e.g. set automatic allowances for certain subsystems, etc.\\n    *\\n    * Emits an {Approval} event.\\n    *\\n    * Requirements:\\n    *\\n    * - `owner` cannot be the zero address.\\n    * - `spender` cannot be the zero address.\\n    */\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n      require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n      require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n      _allowances[owner][spender] = amount;\\n      emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n    * @dev Sets {decimals} to a value other than the default one of 18.\\n    *\\n    * WARNING: This function should only be called from the constructor. Most\\n    * applications that interact with token contracts will not expect\\n    * {decimals} to ever change, and may work incorrectly if it does.\\n    */\\n  function _setupDecimals(uint8 decimals_) internal {\\n      _decimals = decimals_;\\n  }\\n\\n  /**\\n    * @dev Hook that is called before any transfer of tokens. This includes\\n    * minting and burning.\\n    *\\n    * Calling conditions:\\n    *\\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n    * will be to transferred to `to`.\\n    * - when `from` is zero, `amount` tokens will be minted for `to`.\\n    * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n    * - `from` and `to` are never both zero.\\n    *\\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n    */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n  mapping (address => uint)                      public nonces;\\n\\n  // --- EIP712 niceties ---\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n  // --- Approve by signature ---\\n  function permit(\\n    address holder, address spender, uint256 nonce, uint256 expiry,\\n    bool allowed, uint8 v, bytes32 r, bytes32 s) external override\\n  {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        \\\"\\\\x19\\\\x01\\\",\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(\\n            PERMIT_TYPEHASH,\\n            holder,\\n            spender,\\n            nonce,\\n            expiry,\\n            allowed\\n          )\\n        )\\n      )\\n    );\\n\\n    require(holder != address(0), \\\"Dai/invalid-address-0\\\");\\n    require(holder == ecrecover(digest, v, r, s), \\\"Dai/invalid-permit\\\");\\n    require(expiry == 0 || now <= expiry, \\\"Dai/permit-expired\\\");\\n    require(nonce == nonces[holder]++, \\\"Dai/invalid-nonce\\\");\\n    uint wad = allowed ? uint(-1) : 0;\\n    _allowances[holder][spender] = wad;\\n    emit Approval(holder, spender, wad);\\n  }\\n\\n  function mint(address to, uint256 amount) external {\\n    _mint(to, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/DoppelgangerWithExec.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\n/* solium-disable security/no-inline-assembly */\\ncontract DoppelgangerWithExec {\\n    struct MockCall {\\n        bool initialized;\\n        bool reverts;\\n        bytes returnValue;\\n    }\\n\\n    mapping(bytes32 => MockCall) mockConfig;\\n\\n    fallback() external payable {\\n        MockCall storage mockCall = __internal__getMockCall();\\n        if (mockCall.reverts == true) {\\n            __internal__mockRevert();\\n            return;\\n        }\\n        __internal__mockReturn(mockCall.returnValue);\\n    }\\n\\n    function __waffle__mockReverts(bytes memory data) public {\\n        mockConfig[keccak256(data)] = MockCall({\\n            initialized: true,\\n            reverts: true,\\n            returnValue: \\\"\\\"\\n        });\\n    }\\n\\n    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\\n        mockConfig[keccak256(data)] = MockCall({\\n            initialized: true,\\n            reverts: false,\\n            returnValue: value\\n        });\\n    }\\n\\n    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\\n      (bool succeeded, bytes memory returnValue) = target.call(data);\\n      require(succeeded, string(returnValue));\\n      return returnValue;\\n    }\\n\\n    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\\n      require(succeeded, string(returnValue));\\n      return returnValue;\\n    }\\n\\n    function __internal__getMockCall() view private returns (MockCall storage mockCall) {\\n        mockCall = mockConfig[keccak256(msg.data)];\\n        if (mockCall.initialized == true) {\\n            // Mock method with specified arguments\\n            return mockCall;\\n        }\\n        mockCall = mockConfig[keccak256(abi.encodePacked(msg.sig))];\\n        if (mockCall.initialized == true) {\\n            // Mock method with any arguments\\n            return mockCall;\\n        }\\n        revert(\\\"Mock on the method is not initialized\\\");\\n    }\\n\\n    function __internal__mockReturn(bytes memory ret) pure private {\\n        assembly {\\n            return (add(ret, 0x20), mload(ret))\\n        }\\n    }\\n\\n    function __internal__mockRevert() pure private {\\n        revert(\\\"Mock revert\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/ERC1820ImplementerMock.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\n\\nimport \\\"../Constants.sol\\\";\\n\\ncontract ERC1820ImplementerMock is IERC1820Implementer, IERC777Recipient {\\n\\n  constructor () public {\\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n  }\\n\\n  function canImplementInterfaceForAddress(bytes32, address) external view virtual override returns(bytes32) {\\n    return Constants.ACCEPT_MAGIC;\\n  }\\n\\n  function tokensReceived(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes calldata userData,\\n    bytes calldata operatorData\\n  ) external override {\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/test/ERC721Mintable.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC721} for Minting/Burning\\n */\\ncontract ERC721Mintable is ERC721UpgradeSafe {\\n\\n    constructor () public {\\n        __ERC721_init(\\\"ERC 721\\\", \\\"NFT\\\");\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_mint}.\\n     */\\n    function mint(address to, uint256 tokenId) public {\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}.\\n     */\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721UpgradeSafe is Initializable, ContextUpgradeSafe, ERC165UpgradeSafe, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n\\n    function __ERC721_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner address to query the balance of\\n     * @return uint256 representing the amount owned by the passed address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev Gets the token name.\\n     * @return string representing the token name\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Gets the token symbol.\\n     * @return string representing the token symbol\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID. May return an empty string.\\n     *\\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\\n     * token's own URI (via {_setTokenURI}).\\n     *\\n     * If there is a base URI but no token URI, the token's ID will be used as\\n     * its URI when appending it to the base URI. This pattern for autogenerated\\n     * token URIs can lead to large gas savings.\\n     *\\n     * .Examples\\n     * |===\\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\\n     * | \\\"\\\"\\n     * | \\\"\\\"\\n     * | \\\"\\\"\\n     * | \\\"\\\"\\n     * | \\\"token.uri/123\\\"\\n     * | \\\"token.uri/123\\\"\\n     * | \\\"token.uri/\\\"\\n     * | \\\"123\\\"\\n     * | \\\"token.uri/123\\\"\\n     * | \\\"token.uri/\\\"\\n     * | \\\"\\\"\\n     * | \\\"token.uri/<tokenId>\\\"\\n     * |===\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\\n     * @param owner address owning the tokens list to be accessed\\n     * @param index uint256 representing the index to be accessed of the requested tokens list\\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of tokens stored by the contract.\\n     * @return uint256 representing the total amount of tokens\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of all the tokens in this contract\\n     * Reverts if the index is greater or equal to the total number of tokens.\\n     * @param index uint256 representing the index to be accessed of the tokens list\\n     * @return uint256 token ID at the given index of the tokens list\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Approves another address to transfer the given token ID\\n     * The zero address indicates there is no approved address.\\n     * There can only be one approved address per token at a given time.\\n     * Can only be called by the token owner or an approved operator.\\n     * @param to address to be approved for the given token ID\\n     * @param tokenId uint256 ID of the token to be approved\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to query the approval of\\n     * @return address currently approved for the given token ID\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets or unsets the approval of a given operator\\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\\n     * @param operator operator address to set the approval\\n     * @param approved representing the status of the approval to be set\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Tells whether an operator is approved by a given owner.\\n     * @param owner owner address which you want to query the approval of\\n     * @param operator operator address which you want to query the approval of\\n     * @return bool whether the given operator is approved by the given owner\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address.\\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * Requires the msg.sender to be the owner, approved, or operator.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the _msgSender() to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg.sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists.\\n     * @param tokenId uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID.\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     * is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to safely mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to set the token URI for a given token.\\n     *\\n     * Reverts if the token ID does not exist.\\n     *\\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\\n     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\\n     * it and save gas.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ));\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        } else {\\n            bytes4 retval = abi.decode(returndata, (bytes4));\\n            return (retval == _ERC721_RECEIVED);\\n        }\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - when `from` is zero, `tokenId` will be minted for `to`.\\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n\\n    uint256[41] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n\\n\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ExtendedSafeCastExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../utils/ExtendedSafeCast.sol\\\";\\n\\ncontract ExtendedSafeCastExposed {\\n  function toUint112(uint256 value) external pure returns (uint112) {\\n    return ExtendedSafeCast.toUint112(value);\\n  }\\n  function toUint96(uint256 value) external pure returns (uint96) {\\n    return ExtendedSafeCast.toUint96(value);\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/MappedSinglyLinkedListExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\n\\ncontract MappedSinglyLinkedListExposed {\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n  MappedSinglyLinkedList.Mapping list;\\n\\n  function initialize() external {\\n    list.initialize();\\n  }\\n\\n  function addressArray() external view returns (address[] memory) {\\n    return list.addressArray();\\n  }\\n\\n  function addAddresses(address[] calldata addresses) external {\\n    list.addAddresses(addresses);\\n  }\\n\\n  function addAddress(address newAddress) external {\\n    list.addAddress(newAddress);\\n  }\\n\\n  function removeAddress(address prevAddress, address addr) external {\\n    list.removeAddress(prevAddress, addr);\\n  }\\n\\n  function contains(address addr) external view returns (bool) {\\n    return list.contains(addr);\\n  }\\n\\n  function clearAll() external {\\n    list.clearAll();\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/test/PrizePoolHarness.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-pool/PrizePool.sol\\\";\\nimport \\\"./YieldSourceStub.sol\\\";\\n\\ncontract PrizePoolHarness is PrizePool {\\n\\n  uint256 public currentTime;\\n\\n  YieldSourceStub stubYieldSource;\\n\\n  function initializeAll(\\n    address _trustedForwarder,\\n    RegistryInterface _reserveRegistry,\\n    address[] memory _controlledTokens,\\n    uint256 _maxExitFeeMantissa,\\n    uint256 _maxTimelockDuration,\\n    YieldSourceStub _stubYieldSource\\n  )\\n    public\\n  {\\n    PrizePool.initialize(\\n      _trustedForwarder,\\n      _reserveRegistry,\\n      _controlledTokens,\\n      _maxExitFeeMantissa,\\n      _maxTimelockDuration\\n    );\\n    stubYieldSource = _stubYieldSource;\\n  }\\n\\n  function supply(uint256 mintAmount) external {\\n    _supply(mintAmount);\\n  }\\n\\n  function redeem(uint256 redeemAmount) external {\\n    _redeem(redeemAmount);\\n  }\\n\\n  function setCurrentTime(uint256 _currentTime) external {\\n    currentTime = _currentTime;\\n  }\\n\\n  function setTimelockBalance(uint256 _timelockBalance) external {\\n    timelockTotalSupply = _timelockBalance;\\n  }\\n\\n  function _currentTime() internal override view returns (uint256) {\\n    return currentTime;\\n  }\\n\\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\\n    return stubYieldSource.canAwardExternal(_externalToken);\\n  }\\n\\n  function _token() internal override view returns (IERC20) {\\n    return stubYieldSource.token();\\n  }\\n\\n  function _balance() internal override returns (uint256) {\\n    return stubYieldSource.balance();\\n  }\\n\\n  function _supply(uint256 mintAmount) internal override {\\n    return stubYieldSource.supply(mintAmount);\\n  }\\n\\n  function _redeem(uint256 redeemAmount) internal override returns (uint256) {\\n    return stubYieldSource.redeem(redeemAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/YieldSourceStub.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface YieldSourceStub {\\n  function canAwardExternal(address _externalToken) external view returns (bool);\\n\\n  function token() external view returns (IERC20);\\n\\n  function balance() external returns (uint256);\\n\\n  function supply(uint256 mintAmount) external;\\n\\n  function redeem(uint256 redeemAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/test/RNGServiceMock.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\\\";\\n\\ncontract RNGServiceMock is RNGInterface {\\n\\n  uint256 internal random;\\n  address internal feeToken;\\n  uint256 internal requestFee;\\n\\n  function getLastRequestId() external override view returns (uint32 requestId) {\\n    return 1;\\n  }\\n\\n  function setRequestFee(address _feeToken, uint256 _requestFee) external {\\n    feeToken = _feeToken;\\n    requestFee = _requestFee;\\n  }\\n\\n  /// @return _feeToken\\n  /// @return _requestFee\\n  function getRequestFee() external override view returns (address _feeToken, uint256 _requestFee) {\\n    return (feeToken, requestFee);\\n  }\\n\\n  function setRandomNumber(uint256 _random) external {\\n    random = _random;\\n  }\\n\\n  function requestRandomNumber() external override returns (uint32, uint32) {\\n    return (1, 1);\\n  }\\n\\n  function isRequestComplete(uint32) external override view returns (bool) {\\n    return true;\\n  }\\n\\n  function randomNumber(uint32) external override returns (uint256) {\\n    return random;\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/SingleRandomWinnerHarness.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-strategy/single-random-winner/SingleRandomWinner.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract SingleRandomWinnerHarness is SingleRandomWinner {\\n\\n  uint256 internal time;\\n  function setCurrentTime(uint256 _time) external {\\n    time = _time;\\n  }\\n\\n  function _currentTime() internal override view returns (uint256) {\\n    return time;\\n  }\\n\\n  function setRngRequest(uint32 requestId, uint32 lockBlock) external {\\n    rngRequest.id = requestId;\\n    rngRequest.lockBlock = lockBlock;\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/test/SingleRandomWinnerHarnessProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./SingleRandomWinnerHarness.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\ncontract SingleRandomWinnerHarnessProxyFactory is ProxyFactory {\\n\\n  SingleRandomWinnerHarness public instance;\\n\\n  constructor () public {\\n    instance = new SingleRandomWinnerHarness();\\n  }\\n\\n  function create() external returns (SingleRandomWinnerHarness) {\\n    return SingleRandomWinnerHarness(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/Timestamp.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\n/* solium-disable security/no-block-members */\\ncontract Timestamp {\\n  function blockTime() public view returns (uint256) {\\n    return block.timestamp;\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/UInt256ArrayExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../utils/UInt256Array.sol\\\";\\n\\ncontract UInt256ArrayExposed {\\n  using UInt256Array for uint256[];\\n\\n  uint256[] internal array;\\n\\n  constructor (uint256[] memory _array) public {\\n    array = new uint256[](_array.length);\\n    for (uint256 i = 0; i < _array.length; i++) {\\n      array[i] = _array[i];\\n    }\\n  }\\n\\n  function remove(uint256 index) external {\\n    array.remove(index);\\n  }\\n\\n  function toArray() external view returns (uint256[] memory) {\\n    return array;\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/VolumeDripExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../drip/VolumeDrip.sol\\\";\\n\\ncontract VolumeDripExposed {\\n  using VolumeDrip for VolumeDrip.State;\\n\\n  event DripTokensBurned(address user, uint256 amount);\\n  event Minted(uint256 amount);\\n  event MintedTotalSupply(uint256 amount);\\n\\n  VolumeDrip.State state;\\n\\n  function setNewPeriod(uint32 periodSeconds, uint112 dripAmount, uint32 endTime) external {\\n    state.setNewPeriod(periodSeconds, dripAmount, endTime);\\n  }\\n\\n  function setNextPeriod(uint32 periodSeconds, uint112 dripAmount) external {\\n    state.setNextPeriod(periodSeconds, dripAmount);\\n  }\\n\\n  function drip(uint256 currentTime, uint256 maxNewTokens) external returns (uint256) {\\n    uint256 newTokens = state.drip(currentTime, maxNewTokens);\\n\\n    emit MintedTotalSupply(newTokens);\\n\\n    return newTokens;\\n  }\\n\\n  function mint(address user, uint256 amount) external returns (uint256) {\\n    uint256 accrued = state.mint(user, amount);\\n\\n    emit Minted(accrued);\\n\\n    return accrued;\\n  }\\n\\n  function getDrip()\\n    external\\n    view\\n    returns (\\n      uint32 periodSeconds,\\n      uint128 dripAmount\\n    )\\n  {\\n    periodSeconds = state.nextPeriodSeconds;\\n    dripAmount = state.nextDripAmount;\\n  }\\n\\n  function getPeriod(uint32 period)\\n    external\\n    view\\n    returns (\\n      uint112 totalSupply,\\n      uint112 dripAmount,\\n      uint32 endTime\\n    )\\n  {\\n    totalSupply = state.periods[period].totalSupply;\\n    endTime = state.periods[period].endTime;\\n    dripAmount = state.periods[period].dripAmount;\\n  }\\n\\n  function getDeposit(address user)\\n    external\\n    view\\n    returns (\\n      uint112 balance,\\n      uint32 period\\n    )\\n  {\\n    balance = state.deposits[user].balance;\\n    period = state.deposits[user].period;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/test/VolumeDripManagerExposed.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../drip/VolumeDripManager.sol\\\";\\n\\ncontract VolumeDripManagerExposed {\\n  using VolumeDripManager for VolumeDripManager.State;\\n  using VolumeDrip for VolumeDrip.State;\\n\\n  VolumeDripManager.State manager;\\n\\n  function activate(\\n    address measure,\\n    address dripToken,\\n    uint32 periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    external\\n  {\\n    manager.activate(measure, dripToken, periodSeconds, dripAmount, endTime);\\n  }\\n\\n  function deactivate(\\n    address measure,\\n    address dripToken,\\n    address prevDripToken\\n  )\\n    external\\n  {\\n    manager.deactivate(measure, dripToken, prevDripToken);\\n  }\\n\\n  function set(address measure, address dripToken, uint32 periodSeconds, uint112 dripAmount) external {\\n    manager.set(measure, dripToken, periodSeconds, dripAmount);\\n  }\\n\\n  function isActive(address measure, address dripToken) external view returns (bool) {\\n    return manager.isActive(measure, dripToken);\\n  }\\n\\n  function getPeriod(\\n    address measure,\\n    address dripToken,\\n    uint32 period\\n  )\\n    external\\n    view\\n    returns (\\n      uint112 totalSupply,\\n      uint112 dripAmount,\\n      uint32 endTime\\n    )\\n  {\\n    VolumeDrip.State storage drip = manager.getDrip(measure, dripToken);\\n    VolumeDrip.Period memory state = drip.periods[period];\\n    totalSupply = state.totalSupply;\\n    dripAmount = state.dripAmount;\\n    endTime = state.endTime;\\n  }\\n\\n  function getActiveVolumeDrips(address measure) external view returns (address[] memory) {\\n    return manager.getActiveVolumeDrips(measure);\\n  }\\n\\n  function getDrip(\\n    address measure,\\n    address dripToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint32 periodSeconds,\\n      uint112 dripAmount\\n    )\\n  {\\n    VolumeDrip.State storage drip = manager.getDrip(measure, dripToken);\\n    dripAmount = drip.nextDripAmount;\\n    periodSeconds = drip.nextPeriodSeconds;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/yVaultMock.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../external/yearn/yVaultInterface.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"../external/pooltogether/FixedPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract yVaultMock is yVaultInterface, ERC20UpgradeSafe {\\n\\n  ERC20UpgradeSafe private asset;\\n  uint256 public vaultFeeMantissa;\\n\\n  constructor (ERC20Mintable _asset) public {\\n    asset = _asset;\\n    vaultFeeMantissa = 0.05 ether;\\n  }\\n\\n  function token() external override view returns (address) {\\n    return address(asset);\\n  }\\n\\n  function balance() public override view returns (uint) {\\n    return asset.balanceOf(address(this));\\n  }\\n\\n  function removeLiquidity(uint _amount) external {\\n    asset.transfer(msg.sender, _amount);\\n  }\\n\\n  function setVaultFeeMantissa(uint256 _vaultFeeMantissa) external {\\n    vaultFeeMantissa = _vaultFeeMantissa;\\n  }\\n\\n  function deposit(uint _amount) external override {\\n    uint _pool = balance();\\n    uint _before = asset.balanceOf(address(this));\\n    asset.transferFrom(msg.sender, address(this), _amount);\\n    uint _after = asset.balanceOf(address(this));\\n    uint diff = _after.sub(_before); // Additional check for deflationary assets\\n    uint shares = 0;\\n    if (totalSupply() == 0) {\\n      shares = diff;\\n    } else {\\n      shares = (diff.mul(totalSupply())).div(_pool);\\n    }\\n    _mint(msg.sender, shares);\\n  }\\n\\n  function withdraw(uint _shares) external override {\\n    uint256 sharesFee = FixedPoint.multiplyUintByMantissa(_shares, vaultFeeMantissa);\\n\\n    uint256 withdrawal = (balance().mul(_shares.sub(sharesFee))).div(totalSupply());\\n    asset.transfer(msg.sender, withdrawal);\\n\\n    _mint(address(this), sharesFee);\\n    _burn(msg.sender, _shares);\\n  }\\n\\n  function getPricePerFullShare() external override view returns (uint) {\\n    return balance().mul(1e18).div(totalSupply());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/yVaultPrizePoolHarness.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../prize-pool/yearn/yVaultPrizePool.sol\\\";\\n\\ncontract yVaultPrizePoolHarness is yVaultPrizePool {\\n\\n  uint256 public currentTime;\\n\\n  function setCurrentTime(uint256 _currentTime) external {\\n    currentTime = _currentTime;\\n  }\\n\\n  function _currentTime() internal override view returns (uint256) {\\n    return currentTime;\\n  }\\n\\n  function supply(uint256 mintAmount) external {\\n    _supply(mintAmount);\\n  }\\n\\n  function redeem(uint256 redeemAmount) external returns (uint256) {\\n    return _redeem(redeemAmount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/test/yVaultPrizePoolHarnessProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./yVaultPrizePoolHarness.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Compound Prize Pool Proxy Factory\\n/// @notice Minimal proxy pattern for creating new Compound Prize Pools\\ncontract yVaultPrizePoolHarnessProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied Prize Pools\\n  yVaultPrizePoolHarness public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Compound Prize Pool\\n  constructor () public {\\n    instance = new yVaultPrizePoolHarness();\\n  }\\n\\n  /// @notice Creates a new Compound Prize Pool as a proxy of the template instance\\n  /// @return A reference to the new proxied Compound Prize Pool\\n  function create() external returns (yVaultPrizePoolHarness) {\\n    return yVaultPrizePoolHarness(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\"\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract RegistryInterface\",\"name\":\"_reserveRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"contract CompoundPrizePoolProxyFactory\",\"name\":\"_compoundPrizePoolProxyFactory\",\"type\":\"address\"},{\"internalType\":\"contract SingleRandomWinnerBuilder\",\"name\":\"_singleRandomWinnerBuilder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"}],\"name\":\"PrizePoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"compoundPrizePoolProxyFactory\",\"outputs\":[{\"internalType\":\"contract CompoundPrizePoolProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExitFeeMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimelockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundPrizePoolBuilder.CompoundPrizePoolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"createCompoundPrizePool\",\"outputs\":[{\"internalType\":\"contract CompoundPrizePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExitFeeMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimelockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundPrizePoolBuilder.CompoundPrizePoolConfig\",\"name\":\"prizePoolConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract RNGInterface\",\"name\":\"rngService\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizePeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ticketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sponsorshipName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sponsorshipSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketCreditLimitMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketCreditRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"externalERC20Awards\",\"type\":\"address[]\"}],\"internalType\":\"struct SingleRandomWinnerBuilder.SingleRandomWinnerConfig\",\"name\":\"prizeStrategyConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createSingleRandomWinner\",\"outputs\":[{\"internalType\":\"contract CompoundPrizePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRegistry\",\"outputs\":[{\"internalType\":\"contract RegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleRandomWinnerBuilder\",\"outputs\":[{\"internalType\":\"contract SingleRandomWinnerBuilder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundPrizePoolBuilder","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e8b9901dbfe766d3fe44b36c180a1bca2b9a295000000000000000000000000a530f85085c6fe2f866e7fdb716849714a89f4cd00000000000000000000000017cfe08818e8260fae3a19761668ebc27b24d72a000000000000000000000000a6358441f68ed4707e1c4366a0d2e2233bb4841d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}