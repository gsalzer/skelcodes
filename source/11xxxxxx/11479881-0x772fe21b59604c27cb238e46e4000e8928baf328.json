{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWantToEth {\r\n    function wantToEth(uint256 input) external view returns (uint256);\r\n\r\n    function ethToWant(uint256 input) external view returns (uint256);\r\n}\r\n\r\ninterface IUni {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IGenericLender {\r\n    function lenderName() external view returns (string memory);\r\n\r\n    function nav() external view returns (uint256);\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    function apr() external view returns (uint256);\r\n\r\n    function weightedApr() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    function emergencyWithdraw(uint256 amount) external;\r\n\r\n    function deposit() external;\r\n\r\n    function withdrawAll() external returns (bool);\r\n\r\n    function enabled() external view returns (bool);\r\n\r\n    function hasAssets() external view returns (bool);\r\n\r\n    function aprAfterDeposit(uint256 amount) external view returns (uint256);\r\n\r\n    function setDust(uint256 _dust) external;\r\n\r\n    function sweep(address _token) external;\r\n}\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtLimit;\r\n    uint256 rateLimit;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function is used in the scenario where there is a newer Strategy\r\n     * that would hold the same positions as this one, and those positions are\r\n     * easily transferrable to the newer Strategy. These positions must be able\r\n     * to be transferred at the moment this call is made, if any prep is\r\n     * required to execute a full transfer in one transaction, that must be\r\n     * accounted for separately from this call.\r\n     */\r\n    function migrateStrategy(address _newStrategy) external;\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n}\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.2.2\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external virtual pure returns (string memory);\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay = 86400; // ~ once a day\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor = 100;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold = 0;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     */\r\n    constructor(address _vault) public {\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = msg.sender;\r\n        rewards = msg.sender;\r\n        keeper = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. Any distributed rewards will cease flowing\r\n     *  to the old address and begin flowing to this address once the change\r\n     *  is in effect.\r\n     *\r\n     *  This will not change any Strategy reports in progress, only\r\n     *  new reports made after this change goes into effect.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for collecting rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        rewards = _rewards;\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass before `harvest()` is called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs, to prevent excessive costs. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of blocks to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some\r\n     * slippage is allowed, since when this method is called the strategist is\r\n     * no longer receiving their performance fee. The goal is for the Strategy\r\n     * to divest as quickly as possible while not suffering exorbitant losses.\r\n     * This function is used during emergency exit instead of\r\n     * `prepareReturn()`. This method returns any realized losses incurred,\r\n     * and should also return the amount of `want` tokens available to repay\r\n     * outstanding debt to the Vault.\r\n     */\r\n    function exitPosition(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     *  `Harvest()` calls this function after shares are created during\r\n     *  `vault.report()`. You can customize this function to any share\r\n     *  distribution mechanism you want.\r\n     *\r\n     *   See `vault.report()` for further details.\r\n     */\r\n    function distributeRewards() internal virtual {\r\n        // Transfer 100% of newly-minted shares awarded to this contract to the rewards address.\r\n        uint256 balance = vault.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            vault.transfer(rewards, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `minReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropriate\r\n        //       to always trigger here, because the resulting change should be\r\n        //       large (might not always be the case).\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > 0) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            // NOTE: Don't take performance fee in this scenario\r\n            (profit, loss, debtPayment) = exitPosition(vault.debtOutstanding());\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Distribute any reward shares earned by the strategy on this report\r\n        distributeRewards();\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * Liquidate as many assets as possible to `want`, irregardless of\r\n     * slippage, up to `_amountNeeded`. Any excess should be re-invested\r\n     * here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amount`\r\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.transfer(msg.sender, amountFreed);\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by governance or the Vault.\r\n     * @dev\r\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     *\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     */\r\n    function protectedTokens() internal virtual view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Strategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public constant uniswapRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    IGenericLender[] public lenders;\r\n    bool public externalOracle = false;\r\n    address public wantToEthOracle;\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) {\r\n        debtThreshold = 1000;\r\n\r\n        //we do this horrible thing because you can't compare strings in solidity\r\n        require(keccak256(bytes(apiVersion())) == keccak256(bytes(VaultAPI(_vault).apiVersion())), \"WRONG VERSION\");\r\n    }\r\n\r\n    function setPriceOracle(address _oracle) external onlyAuthorized {\r\n        wantToEthOracle = _oracle;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return \"StrategyLenderYieldOptimiser\";\r\n    }\r\n\r\n    //management functions\r\n    //add lenders for the strategy to choose between\r\n    // only governance to stop strategist adding dodgy lender\r\n    function addLender(address a) public onlyGovernance {\r\n        IGenericLender n = IGenericLender(a);\r\n        require(n.strategy() == address(this), \"Undocked Lender\");\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            require(a != address(lenders[i]), \"Already Added\");\r\n        }\r\n        lenders.push(n);\r\n    }\r\n\r\n    //but strategist can remove for safety\r\n    function safeRemoveLender(address a) public onlyAuthorized {\r\n        _removeLender(a, false);\r\n    }\r\n\r\n    function forceRemoveLender(address a) public onlyAuthorized {\r\n        _removeLender(a, true);\r\n    }\r\n\r\n    //force removes the lender even if it still has a balance\r\n    function _removeLender(address a, bool force) internal {\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            if (a == address(lenders[i])) {\r\n                bool allWithdrawn = lenders[i].withdrawAll();\r\n\r\n                if (!force) {\r\n                    require(allWithdrawn, \"WITHDRAW FAILED\");\r\n                }\r\n\r\n                //put the last index here\r\n                //remove last index\r\n                if (i != lenders.length - 1) {\r\n                    lenders[i] = lenders[lenders.length - 1];\r\n                }\r\n\r\n                //pop shortens array by 1 thereby deleting the last index\r\n                lenders.pop();\r\n\r\n                //if balance to spend we might as well put it into the best lender\r\n                if (want.balanceOf(address(this)) > 0) {\r\n                    adjustPosition(0);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        require(false, \"NOT LENDER\");\r\n    }\r\n\r\n    //we could make this more gas efficient but it is only used by a view function\r\n    struct lendStatus {\r\n        string name;\r\n        uint256 assets;\r\n        uint256 rate;\r\n        address add;\r\n    }\r\n\r\n    //Returns the status of all lenders attached the strategy\r\n    function lendStatuses() public view returns (lendStatus[] memory) {\r\n        lendStatus[] memory statuses = new lendStatus[](lenders.length);\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            lendStatus memory s;\r\n            s.name = lenders[i].lenderName();\r\n            s.add = address(lenders[i]);\r\n            s.assets = lenders[i].nav();\r\n            s.rate = lenders[i].apr();\r\n            statuses[i] = s;\r\n        }\r\n\r\n        return statuses;\r\n    }\r\n\r\n    // lent assets plus loose assets\r\n    function estimatedTotalAssets() public view override returns (uint256) {\r\n        uint256 nav = lentTotalAssets();\r\n        nav += want.balanceOf(address(this));\r\n\r\n        return nav;\r\n    }\r\n\r\n    function numLenders() public view returns (uint256) {\r\n        return lenders.length;\r\n    }\r\n\r\n    //the weighted apr of all lenders. sum(nav * apr)/totalNav\r\n    function estimatedAPR() public view returns (uint256) {\r\n        uint256 bal = estimatedTotalAssets();\r\n        if (bal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 weightedAPR = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            weightedAPR += lenders[i].weightedApr();\r\n        }\r\n\r\n        return weightedAPR.div(bal);\r\n    }\r\n\r\n    //Estimates the impact on APR if we add more money. It does not take into account adjusting position\r\n    function _estimateDebtLimitIncrease(uint256 change) internal view returns (uint256) {\r\n        uint256 highestAPR = 0;\r\n        uint256 aprChoice = 0;\r\n        uint256 assets = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            uint256 apr = lenders[i].aprAfterDeposit(change);\r\n            if (apr > highestAPR) {\r\n                aprChoice = i;\r\n                highestAPR = apr;\r\n                assets = lenders[i].nav();\r\n            }\r\n        }\r\n\r\n        uint256 weightedAPR = highestAPR.mul(assets.add(change));\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            if (i != aprChoice) {\r\n                weightedAPR += lenders[i].weightedApr();\r\n            }\r\n        }\r\n\r\n        uint256 bal = estimatedTotalAssets().add(change);\r\n\r\n        return weightedAPR.div(bal);\r\n    }\r\n\r\n    //Estimates debt limit decrease. It is not accurate and should only be used for very broad decision making\r\n    function _estimateDebtLimitDecrease(uint256 change) internal view returns (uint256) {\r\n        uint256 lowestApr = uint256(-1);\r\n        uint256 aprChoice = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            uint256 apr = lenders[i].aprAfterDeposit(change);\r\n            if (apr < lowestApr) {\r\n                aprChoice = i;\r\n                lowestApr = apr;\r\n            }\r\n        }\r\n\r\n        uint256 weightedAPR = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            if (i != aprChoice) {\r\n                weightedAPR += lenders[i].weightedApr();\r\n            } else {\r\n                uint256 asset = lenders[i].nav();\r\n                if (asset < change) {\r\n                    //simplistic. not accurate\r\n                    change = asset;\r\n                }\r\n                weightedAPR += lowestApr.mul(change);\r\n            }\r\n        }\r\n        uint256 bal = estimatedTotalAssets().add(change);\r\n        return weightedAPR.div(bal);\r\n    }\r\n\r\n    //estimates highest and lowest apr lenders. Public for debugging purposes but not much use to general public\r\n    function estimateAdjustPosition()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _lowest,\r\n            uint256 _lowestApr,\r\n            uint256 _highest,\r\n            uint256 _potential\r\n        )\r\n    {\r\n        //all loose assets are to be invested\r\n        uint256 looseAssets = want.balanceOf(address(this));\r\n\r\n        // our simple algo\r\n        // get the lowest apr strat\r\n        // cycle through and see who could take its funds plus want for the highest apr\r\n        _lowestApr = uint256(-1);\r\n        _lowest = 0;\r\n        uint256 lowestNav = 0;\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            if (lenders[i].hasAssets()) {\r\n                uint256 apr = lenders[i].apr();\r\n                if (apr < _lowestApr) {\r\n                    _lowestApr = apr;\r\n                    _lowest = i;\r\n                    lowestNav = lenders[i].nav();\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 toAdd = lowestNav.add(looseAssets);\r\n\r\n        uint256 highestApr = 0;\r\n        _highest = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            uint256 apr;\r\n            apr = lenders[i].aprAfterDeposit(looseAssets);\r\n\r\n            if (apr > highestApr) {\r\n                highestApr = apr;\r\n                _highest = i;\r\n            }\r\n        }\r\n\r\n        //if we can improve apr by withdrawing we do so\r\n        _potential = lenders[_highest].aprAfterDeposit(toAdd);\r\n    }\r\n\r\n    //gives estiomate of future APR with a change of debt limit. Useful for governance to decide debt limits\r\n    function estimatedFutureAPR(uint256 newDebtLimit) public view returns (uint256) {\r\n        uint256 oldDebtLimit = vault.strategies(address(this)).totalDebt;\r\n        uint256 change;\r\n        if (oldDebtLimit < newDebtLimit) {\r\n            change = newDebtLimit - oldDebtLimit;\r\n            return _estimateDebtLimitIncrease(change);\r\n        } else {\r\n            change = oldDebtLimit - newDebtLimit;\r\n            return _estimateDebtLimitDecrease(change);\r\n        }\r\n    }\r\n\r\n    //cycle all lenders and collect balances\r\n    function lentTotalAssets() public view returns (uint256) {\r\n        uint256 nav = 0;\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            nav += lenders[i].nav();\r\n        }\r\n        return nav;\r\n    }\r\n\r\n    //we need to free up profit plus _debtOutstanding.\r\n    //If _debtOutstanding is more than we can free we get as much as possible\r\n    // should be no way for there to be a loss. we hope...\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        _profit = 0;\r\n        _loss = 0; //for clarity\r\n        _debtPayment = _debtOutstanding;\r\n\r\n        uint256 lentAssets = lentTotalAssets();\r\n\r\n        uint256 looseAssets = want.balanceOf(address(this));\r\n\r\n        uint256 total = looseAssets.add(lentAssets);\r\n\r\n        if (lentAssets == 0) {\r\n            //no position to harvest or profit to report\r\n            if (_debtPayment > looseAssets) {\r\n                //we can only return looseAssets\r\n                _debtPayment = looseAssets;\r\n            }\r\n\r\n            return (_profit, _loss, _debtPayment);\r\n        }\r\n\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n\r\n        if (total > debt) {\r\n            _profit = total - debt;\r\n            uint256 amountToFree = _profit.add(_debtPayment);\r\n\r\n            //we need to add outstanding to our profit\r\n            //dont need to do logic if there is nothiing to free\r\n            if (amountToFree > 0 && looseAssets < amountToFree) {\r\n                //withdraw what we can withdraw\r\n                _withdrawSome(amountToFree.sub(looseAssets));\r\n                uint256 newLoose = want.balanceOf(address(this));\r\n\r\n                //if we dont have enough money adjust _debtOutstanding and only change profit if needed\r\n                if (newLoose < amountToFree) {\r\n                    if (_profit > newLoose) {\r\n                        _profit = newLoose;\r\n                        _debtPayment = 0;\r\n                    } else {\r\n                        _debtPayment = Math.min(newLoose - _profit, _debtPayment);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            //serious loss should never happen but if it does lets record it accurately\r\n            _loss = debt - total;\r\n            uint256 amountToFree = _loss.add(_debtPayment);\r\n\r\n            if (amountToFree > 0 && looseAssets < amountToFree) {\r\n                //withdraw what we can withdraw\r\n\r\n                _withdrawSome(amountToFree.sub(looseAssets));\r\n                uint256 newLoose = want.balanceOf(address(this));\r\n\r\n                //if we dont have enough money adjust _debtOutstanding and only change profit if needed\r\n                if (newLoose < amountToFree) {\r\n                    if (_loss > newLoose) {\r\n                        _loss = newLoose;\r\n                        _debtPayment = 0;\r\n                    } else {\r\n                        _debtPayment = Math.min(newLoose - _loss, _debtPayment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Key logic.\r\n     *   The algorithm moves assets from lowest return to highest\r\n     *   like a very slow idiots bubble sort\r\n     *   we ignore debt outstanding for an easy life\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        //we just keep all money in want if we dont have any lenders\r\n        if (lenders.length == 0) {\r\n            return;\r\n        }\r\n\r\n        _debtOutstanding; //ignored. we handle it in prepare return\r\n        //emergency exit is dealt with at beginning of harvest\r\n        if (emergencyExit) {\r\n            return;\r\n        }\r\n\r\n        (uint256 lowest, uint256 lowestApr, uint256 highest, uint256 potential) = estimateAdjustPosition();\r\n\r\n        if (potential > lowestApr) {\r\n            //apr should go down after deposit so wont be withdrawing from self\r\n            lenders[lowest].withdrawAll();\r\n        }\r\n\r\n        uint256 bal = want.balanceOf(address(this));\r\n        if (bal > 0) {\r\n            want.safeTransfer(address(lenders[highest]), bal);\r\n            lenders[highest].deposit();\r\n        }\r\n    }\r\n\r\n    struct lenderRatio {\r\n        address lender;\r\n        //share x 1000\r\n        uint16 share;\r\n    }\r\n\r\n    //share must add up to 1000.\r\n    function manualAllocation(lenderRatio[] memory _newPositions) public onlyAuthorized {\r\n        uint256 share = 0;\r\n\r\n        for (uint256 i = 0; i < lenders.length; i++) {\r\n            lenders[i].withdrawAll();\r\n        }\r\n\r\n        uint256 assets = want.balanceOf(address(this));\r\n\r\n        for (uint256 i = 0; i < _newPositions.length; i++) {\r\n            bool found = false;\r\n\r\n            //might be annoying and expensive to do this second loop but worth it for safety\r\n            for (uint256 j = 0; j < lenders.length; j++) {\r\n                if (address(lenders[j]) == _newPositions[j].lender) {\r\n                    found = true;\r\n                }\r\n            }\r\n            require(found, \"NOT LENDER\");\r\n\r\n            share += _newPositions[i].share;\r\n            uint256 toSend = assets.mul(_newPositions[i].share).div(1000);\r\n            want.safeTransfer(_newPositions[i].lender, toSend);\r\n            IGenericLender(_newPositions[i].lender).deposit();\r\n        }\r\n\r\n        require(share == 1000, \"SHARE!=1000\");\r\n    }\r\n\r\n    //cycle through withdrawing from worst rate first\r\n    function _withdrawSome(uint256 _amount) internal returns (uint256 amountWithdrawn) {\r\n        //dont withdraw dust\r\n        if (_amount < debtThreshold) {\r\n            return 0;\r\n        }\r\n\r\n        amountWithdrawn = 0;\r\n        //most situations this will only run once. Only big withdrawals will be a gas guzzler\r\n        uint256 j = 0;\r\n        while (amountWithdrawn < _amount) {\r\n            uint256 lowestApr = uint256(-1);\r\n            uint256 lowest = 0;\r\n            for (uint256 i = 0; i < lenders.length; i++) {\r\n                if (lenders[i].hasAssets()) {\r\n                    uint256 apr = lenders[i].apr();\r\n                    if (apr < lowestApr) {\r\n                        lowestApr = apr;\r\n                        lowest = i;\r\n                    }\r\n                }\r\n            }\r\n            if (!lenders[lowest].hasAssets()) {\r\n                return amountWithdrawn;\r\n            }\r\n            amountWithdrawn += lenders[lowest].withdraw(_amount - amountWithdrawn);\r\n            j++;\r\n            //dont want infinite loop\r\n            if (j >= 6) {\r\n                return amountWithdrawn;\r\n            }\r\n        }\r\n    }\r\n\r\n    function exitPosition(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        return prepareReturn(_debtOutstanding);\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed) {\r\n        uint256 _balance = want.balanceOf(address(this));\r\n\r\n        if (_balance >= _amountNeeded) {\r\n            //if we don't set reserve here withdrawer will be sent our full balance\r\n            return _amountNeeded;\r\n        } else {\r\n            uint256 received = _withdrawSome(_amountNeeded - _balance).add(_balance);\r\n            if (received >= _amountNeeded) {\r\n                return _amountNeeded;\r\n            } else {\r\n                return received;\r\n            }\r\n        }\r\n    }\r\n\r\n    function harvestTrigger(uint256 callCost) public view override returns (bool) {\r\n        uint256 wantCallCost = _callCostToWant(callCost);\r\n\r\n        return super.harvestTrigger(wantCallCost);\r\n    }\r\n\r\n    function ethToWant(uint256 _amount) internal view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path = new address[](2);\r\n        path[0] = weth;\r\n        path[1] = address(want);\r\n\r\n        uint256[] memory amounts = IUni(uniswapRouter).getAmountsOut(_amount, path);\r\n\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _callCostToWant(uint256 callCost) internal view returns (uint256) {\r\n        uint256 wantCallCost;\r\n\r\n        //three situations\r\n        //1 currency is eth so no change.\r\n        //2 we use uniswap swap price\r\n        //3 we use external oracle\r\n        if (address(want) == weth) {\r\n            wantCallCost = callCost;\r\n        } else if (wantToEthOracle == address(0)) {\r\n            wantCallCost = ethToWant(callCost);\r\n        } else {\r\n            wantCallCost = IWantToEth(wantToEthOracle).ethToWant(callCost);\r\n        }\r\n\r\n        return wantCallCost;\r\n    }\r\n\r\n    function tendTrigger(uint256 callCost) public view override returns (bool) {\r\n        // make sure to call tendtrigger with same callcost as harvestTrigger\r\n        if (harvestTrigger(callCost)) {\r\n            return false;\r\n        }\r\n\r\n        //now let's check if there is better apr somewhere else.\r\n        //If there is and profit potential is worth changing then lets do it\r\n        (uint256 lowest, uint256 lowestApr, , uint256 potential) = estimateAdjustPosition();\r\n\r\n        //if protential > lowestApr it means we are changing horses\r\n        if (potential > lowestApr) {\r\n            uint256 nav = lenders[lowest].nav();\r\n\r\n            //profit increase is 1 days profit with new apr\r\n            uint256 profitIncrease = (nav.mul(potential) - nav.mul(lowestApr)).div(1e18).div(365);\r\n\r\n            uint256 wantCallCost = _callCostToWant(callCost);\r\n\r\n            return (wantCallCost * callCost < profitIncrease);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * revert if we can't withdraw full balance\r\n     */\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        uint256 outstanding = vault.strategies(address(this)).totalDebt;\r\n        (, uint256 loss, uint256 wantBalance) = prepareReturn(outstanding);\r\n\r\n        require(wantBalance.add(loss) >= outstanding, \"LIQUIDITY LOCKED\");\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    function protectedTokens() internal view override returns (address[] memory) {\r\n        address[] memory protected = new address[](1);\r\n        protected[0] = address(want);\r\n        return protected;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateAdjustPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_potential\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtLimit\",\"type\":\"uint256\"}],\"name\":\"estimatedFutureAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"forceRemoveLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"internalType\":\"struct Strategy.lendStatus[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"contract IGenericLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lentTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"share\",\"type\":\"uint16\"}],\"internalType\":\"struct Strategy.lenderRatio[]\",\"name\":\"_newPositions\",\"type\":\"tuple[]\"}],\"name\":\"manualAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLenders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"safeRemoveLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantToEthOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000019db27d2e9e4b780cf9a296d575abbddee1578da","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4d9729f00ffc85a76a6833c56649de251cf0fc79891b86f26123bea14b4716b3"}]}