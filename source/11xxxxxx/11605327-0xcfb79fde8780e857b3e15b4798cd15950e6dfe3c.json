{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address payable owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = payable(msg.sender);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable newOwner) onlyOwner public {\r\n    require(newOwner != address(0), \"Cannot transfer ownership to the 0 address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface TRYToken {\r\n    function setTrans100 (uint256 _trans100) external;\r\n    function setRewardPoolDivisor (uint256 _rdiv) external;    \r\n    function setRebalanceDivisor (uint256 _rebalanceDivisor) external; \r\n    function setRebalanceInterval (uint256 _interval) external;  \r\n    function setRebalanceRewardDivisior (uint256 _rDivisor) external;\r\n    function toggleFeeless (address _addr) external; \r\n    function setOracle (address _addr, bool _bool) external; \r\n    function setMinRebalanceAmount (uint256 amount_) external;\r\n    function setBurnTxFee (uint256 amount_) external;\r\n    function setAntiDumpFee (uint256 amount_) external;\r\n    function RebalanceLiquidity () external;\r\n    function addLPFarm(address _farm) external;\r\n}\r\n\r\ncontract TRYowner is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    TRYToken public token;\r\n    \r\n    \r\n    constructor() \r\n    {\r\n        token = TRYToken(0xc12eCeE46ed65D970EE5C899FCC7AE133AfF9b03); \r\n        \r\n    }\r\n    \r\n    function setTrans100(uint256 _trans100) public onlyOwner {\r\n        require(_trans100 <= 100e18, \"Cannot set over 100 transactions\"); \r\n        token.setTrans100(_trans100);\r\n    }\r\n    \r\n    function setRewardPoolDivisor(uint256 _rdiv) public onlyOwner {\r\n        require(_rdiv >= 100, \"Cannot set over 1% RewardPoolDivisor\"); \r\n        token.setRewardPoolDivisor(_rdiv);\r\n    }\r\n    \r\n    function setRebalanceDivisor(uint256 _rebalanceDivisor) public onlyOwner {\r\n        require(_rebalanceDivisor >= 10, \"Cannot set rebalanceDivisor over 10%\");\r\n        require(_rebalanceDivisor <= 100, \"Cannot set rebalanceDivisor under 1%\");\r\n        token.setRebalanceDivisor(_rebalanceDivisor);\r\n    }\r\n    \r\n    function setRebalanceInterval(uint256 _interval) public onlyOwner{\r\n        require(_interval<= 7200, \"Cannot set over 2 hour interval\");  \r\n        require(_interval>= 3600, \"Cannot set under 1 hour interval\");\r\n        token.setRebalanceInterval(_interval);\r\n    }\r\n    \r\n    function setRebalanceRewardDivisior(uint256 _rDivisor) public onlyOwner {\r\n        require(_rDivisor <= 25, \"Cannot set rebalanceRewardDivisor under 4%\");\r\n        require(_rDivisor >= 10, \"Cannot set rebalanceRewardDivisor over 10%\");\r\n        token.setRebalanceRewardDivisior(_rDivisor);   \r\n    } \r\n\r\n    function toggleFeeless(address _addr) public onlyOwner {\r\n        token.toggleFeeless(_addr); \r\n    }\r\n    \r\n    function setOracle(address _addr, bool _bool) public onlyOwner {  \r\n        token.setOracle(_addr, _bool);\r\n    } \r\n    \r\n    function setMinRebalanceAmount(uint256 amount_) public onlyOwner {\r\n        require(amount_ <= 100e18, \"Cannot set over 100 TRY tokens\");\r\n        require(amount_ >= 20e18, \"Cannot set under 20 TRY tokens\");\r\n        token.setMinRebalanceAmount(amount_);\r\n    }\r\n    \r\n    function setBurnTxFee(uint256 amount_) public onlyOwner {\r\n        require(amount_ >= 100, \"Cannot set over 1% burnTxFee\"); \r\n        token.setBurnTxFee(amount_);\r\n    }\r\n    \r\n    function setAntiDumpFee(uint256 amount_) public onlyOwner {\r\n        require(amount_ >= 10, \"Cannot set over 10% antiDumpFee\"); \r\n        require(amount_ <= 100, \"Cannot set under 1% antiDumpFee\");\r\n        token.setAntiDumpFee(amount_);\r\n    }\r\n    \r\n    function RebalanceLiquidity() public {\r\n        token.RebalanceLiquidity();\r\n    }\r\n    \r\n    function addLPFarm(address _farm) public onlyOwner{\r\n        require(_farm == address(0), \"LPfarm already set\");\r\n        token.addLPFarm(_farm);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"addLPFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setAntiDumpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setBurnTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMinRebalanceAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebalanceDivisor\",\"type\":\"uint256\"}],\"name\":\"setRebalanceDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rDivisor\",\"type\":\"uint256\"}],\"name\":\"setRebalanceRewardDivisior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rdiv\",\"type\":\"uint256\"}],\"name\":\"setRewardPoolDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trans100\",\"type\":\"uint256\"}],\"name\":\"setTrans100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"toggleFeeless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TRYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TRYowner","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://218e8d9b538ce44b4981dce65350eaffea0ebbd56f4510ef35d633fc30b19eb8"}]}