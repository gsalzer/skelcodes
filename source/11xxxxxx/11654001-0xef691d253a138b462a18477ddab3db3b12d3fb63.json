{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenList is Pausable {\r\n    bool public IsTokenFilterOn;\r\n    uint256 public NumberOfTokens;\r\n    mapping(address => bool) private _IsAllowed;\r\n    mapping(uint256 => address) private _Tokens;\r\n\r\n    constructor() public {\r\n        NumberOfTokens = 0;\r\n        IsTokenFilterOn = false; //true on prod\r\n    }\r\n\r\n    function SwapTokenFilter() public onlyOwner {\r\n        IsTokenFilterOn = !IsTokenFilterOn;\r\n    }\r\n\r\n    function AddToken(address _address) public onlyOwner {\r\n        require(!_IsAllowed[_address], \"This Token in List\");\r\n        _IsAllowed[_address] = true;\r\n        _Tokens[NumberOfTokens] = _address;\r\n        NumberOfTokens++;\r\n    }\r\n\r\n    function RemoveToken(address _address) public onlyOwner {\r\n        require(_IsAllowed[_address], \"This Token not in List\");\r\n        _IsAllowed[_address] = false;\r\n    }\r\n\r\n    function IsValidToken(address _address) public view returns (bool) {\r\n        return !IsTokenFilterOn || _IsAllowed[_address];\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Helper is TokenList {\r\n    event TransferOut(uint256 Amount, address To, address Token);\r\n    event TransferIn(uint256 Amount, address From, address Token);\r\n    modifier TestAllownce(\r\n        address _token,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) {\r\n        require(\r\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\r\n            \"no allowance\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function TransferToken(\r\n        address _Token,\r\n        address _Reciver,\r\n        uint256 _Amount\r\n    ) internal {\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        emit TransferOut(_Amount, _Reciver, _Token);\r\n        ERC20(_Token).transfer(_Reciver, _Amount);\r\n        require(\r\n            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\r\n                ,\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function TransferInToken(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\r\n        require(_Amount > 0);\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\r\n        emit TransferIn(_Amount, _Subject, _Token);\r\n        require(\r\n            (SafeMath.add(OldBalance, _Amount)) ==\r\n                CheckBalance(_Token, address(this)),\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n//True POZ Token will have this, \r\ninterface IPOZBenefit {\r\n    function IsPOZHolder(address _Subject) external view returns(bool);\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PozBenefit is ERC20Helper {\r\n    constructor() public {\r\n        PozFee = 15; // *10000\r\n        PozTimer = 1000; // *10000\r\n        MinPoz = 80; // ^Token.decimals\r\n        POZ_Address = address(0x0);\r\n        POZBenefit_Address = address(0x0);\r\n    }\r\n\r\n    uint256 internal PozFee; // the fee for the first part of the pool\r\n    uint256 internal PozTimer; //the timer for the first part fo the pool\r\n    uint256 internal MinPoz; //minimum ammount ofpoz to be part of the discount\r\n    address public POZ_Address; //The address of the POZ Token\r\n    address public POZBenefit_Address; //the address for implementation of IPozBenefit - to get POZ benefit status from other contracts\r\n\r\n    modifier PercentCheckOk(uint256 _percent) {\r\n        if (_percent < 10000) _;\r\n        else revert(\"Not in range\");\r\n    }\r\n    modifier LeftIsBigger(uint256 _left, uint256 _right) {\r\n        if (_left > _right) _;\r\n        else revert(\"Not bigger\");\r\n    }\r\n\r\n    function GetPozTimer() public view returns (uint256) {\r\n        return PozTimer;\r\n    }\r\n\r\n    function SetPozTimer(uint256 _pozTimer)\r\n        public\r\n        onlyOwner\r\n        PercentCheckOk(_pozTimer)\r\n    {\r\n        PozTimer = _pozTimer;\r\n    }\r\n\r\n    function GetPOZFee() public view returns (uint256) {\r\n        return PozFee;\r\n    }\r\n\r\n    function GetMinPoz() public view returns (uint256) {\r\n        return MinPoz;\r\n    }\r\n\r\n    function SetMinPoz(uint256 _MinPoz) public onlyOwner {\r\n        MinPoz = _MinPoz;\r\n    }\r\n\r\n    function SetPOZBenefit_Address(address _POZBenefit_Address)\r\n        public\r\n        onlyOwner\r\n    {\r\n        POZBenefit_Address = _POZBenefit_Address;\r\n    }\r\n\r\n    function SetPozAdress(address _POZ_Address) public onlyOwner {\r\n        POZ_Address = _POZ_Address;\r\n    }\r\n\r\n    function AmIPOZInvestor() public view returns (bool) {\r\n        return IsPOZInvestor(msg.sender);\r\n    }\r\n\r\n    //@dev Taken from interface, To join the POZ Benefit club\r\n    function IsPOZInvestor(address _investor) internal view returns (bool) {\r\n        if (POZ_Address == address(0x0) && POZBenefit_Address == address(0x0)) return true; //false; // for testing stage, until got the address\r\n        return ((POZ_Address != address(0x0) &&\r\n            CheckBalance(POZ_Address, _investor) >= MinPoz) ||\r\n            (POZBenefit_Address != address(0x0) &&\r\n                IPOZBenefit(POZBenefit_Address).IsPOZHolder(_investor)));\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract ETHHelper is PozBenefit {\r\n    constructor() public {\r\n        IsPayble = false;\r\n    }\r\n\r\n    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\r\n        require(msgValue >= _MinETHInvest, \"Send ETH to invest\");\r\n        emit TransferInETH(msgValue, msgSender);\r\n        _;\r\n    }\r\n\r\n    //@dev not/allow contract to receive funds\r\n    function() public payable {\r\n        if (!IsPayble) revert();\r\n    }\r\n\r\n    event TransferOutETH(uint256 Amount, address To);\r\n    event TransferInETH(uint256 Amount, address From);\r\n\r\n    bool internal IsPayble;\r\n \r\n    function GetIsPayble() public view returns (bool) {\r\n        return IsPayble;\r\n    }\r\n\r\n    function SwitchIsPayble() public onlyOwner {\r\n        IsPayble = !IsPayble;\r\n    }\r\n\r\n    function TransferETH(address _Reciver, uint256 _ammount) internal {\r\n        emit TransferOutETH(_ammount, _Reciver);\r\n        uint256 beforeBalance = address(_Reciver).balance;\r\n        _Reciver.transfer(_ammount);\r\n        require(\r\n            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\r\n            \"The transfer did not complite\"\r\n        );\r\n    }\r\n \r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract Manageable is ETHHelper {\r\n    constructor() public {\r\n        Fee = 20; // *10000\r\n        MinDuration = 0; //need to set\r\n        PoolPrice = 0; // Price for create a pool\r\n        MaxDuration = 60 * 60 * 24 * 30 * 6; // half year\r\n        MinETHInvest = 10000; // for percent calc\r\n        MaxETHInvest = 100 * 10**18; // 100 eth per wallet\r\n    }\r\n\r\n    mapping(address => uint256) FeeMap;\r\n    //@dev for percent use uint16\r\n    uint256 internal Fee; //the fee for the pool\r\n    uint256 internal MinDuration; //the minimum duration of a pool, in seconds\r\n    uint256 internal MaxDuration; //the maximum duration of a pool from the creation, in seconds\r\n    uint256 internal PoolPrice;\r\n    uint256 internal MinETHInvest;\r\n    uint256 internal MaxETHInvest;\r\n\r\n    function SetMinMaxETHInvest(uint256 _MinETHInvest, uint256 _MaxETHInvest)\r\n        public\r\n        onlyOwner\r\n    {\r\n        MinETHInvest = _MinETHInvest;\r\n        MaxETHInvest = _MaxETHInvest;\r\n    }\r\n    function GetMinMaxETHInvest() public view returns (uint256 _MinETHInvest, uint256 _MaxETHInvest)\r\n    {\r\n       return (MinETHInvest,MaxETHInvest);\r\n    }\r\n\r\n    function GetMinMaxDuration() public view returns (uint256, uint256) {\r\n        return (MinDuration, MaxDuration);\r\n    }\r\n\r\n    function SetMinMaxDuration(uint256 _minDuration, uint256 _maxDuration)\r\n        public\r\n        onlyOwner\r\n    {\r\n        MinDuration = _minDuration;\r\n        MaxDuration = _maxDuration;\r\n    }\r\n\r\n    function GetPoolPrice() public view returns (uint256) {\r\n        return PoolPrice;\r\n    }\r\n\r\n    function SetPoolPrice(uint256 _PoolPrice) public onlyOwner {\r\n        PoolPrice = _PoolPrice;\r\n    }\r\n\r\n    function GetFee() public view returns (uint256) {\r\n        return Fee;\r\n    }\r\n\r\n    function SetFee(uint256 _fee)\r\n        public\r\n        onlyOwner\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger(_fee, PozFee)\r\n    {\r\n        Fee = _fee;\r\n    }\r\n\r\n    function SetPOZFee(uint256 _fee)\r\n        public\r\n        onlyOwner\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger(Fee, _fee)\r\n    {\r\n        PozFee = _fee;\r\n    }\r\n\r\n    function WithdrawETHFee(address _to) public onlyOwner {\r\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\r\n    }\r\n\r\n    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {\r\n        uint256 temp = FeeMap[_Token];\r\n        FeeMap[_Token] = 0;\r\n        TransferToken(_Token, _to, temp);\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract MainCoinManager is Manageable {\r\n    event MainCoinAdded (address Token);\r\n    event MainCoinRemoved (address Token);\r\n\r\n    mapping(address => bool) public ERC20MainCoins; //when approve new erc20 main coin - it will list here\r\n\r\n    function AddERC20Maincoin(address _token) public onlyOwner {\r\n        emit MainCoinAdded(_token);\r\n        ERC20MainCoins[_token] = true;\r\n    }\r\n\r\n    function RemoveERC20Maincoin(address _token) public onlyOwner {\r\n        emit MainCoinRemoved(_token);\r\n        ERC20MainCoins[_token] = false;\r\n    }\r\n\r\n    function IsERC20Maincoin(address _token) public view returns (bool) {\r\n        return ERC20MainCoins[_token];\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Pools is MainCoinManager {\r\n    event NewPool(address token, uint256 id);\r\n    event FinishPool(uint256 id);\r\n    event PoolUpdate(uint256 id);\r\n\r\n    constructor() public {\r\n        poolsCount = 0; //Start with 0\r\n    }\r\n\r\n    uint256 public poolsCount; // the ids of the pool\r\n    mapping(uint256 => Pool) public pools; //the id of the pool with the data\r\n    mapping(address => uint256[]) public poolsMap; //the address and all of the pools id's\r\n    struct Pool {\r\n        address Token; //the address of the erc20 toke for sale\r\n        address Creator; //the project owner\r\n        uint256 FinishTime; //Until what time the pool is active\r\n        uint256 Rate; //for eth Wei, in token, by the decemal. the cost of 1 token\r\n        uint256 POZRate; //the rate for the until OpenForAll, if the same as Rate , OpenForAll = StartTime .\r\n        address Maincoin; // on adress.zero = ETH\r\n        uint256 StartAmount; //The total amount of the tokens for sale\r\n        bool IsLocked; // true - the investors getting the tokens after the FinishTime. false - intant deal\r\n        uint256 Lefttokens; // the ammount of tokens left for sale\r\n        uint256 StartTime; // the time the pool open //TODO Maybe Delete this?\r\n        uint256 OpenForAll; // The Time that all investors can invest\r\n        uint256 UnlockedTokens; //for locked pools\r\n        bool TookLeftOvers; //The Creator took the left overs after the pool finished\r\n        bool Is21DecimalRate; //If true, the rate will be rate*10^-21\r\n    }\r\n\r\n    function GetLastPoolId() public view returns (uint256) {\r\n        return poolsCount;\r\n    }\r\n    \r\n     //create a new pool\r\n    function CreatePool(\r\n        address _Token, //token to sell address\r\n        uint256 _FinishTime, //Until what time the pool will work\r\n        uint256 _Rate, //the rate of the trade\r\n        uint256 _POZRate, //the rate for POZ Holders, how much each token = main coin\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        bool _IsLocked, //False = DSP or True = TLP\r\n        address _MainCoin, // address(0x0) = ETH, address of main token\r\n        bool _Is21Decimal, //focus the for smaller tokens.\r\n        uint256 _Now //Start Time - can be 0 to not change current flow\r\n    ) public whenNotPaused payable {\r\n        require(msg.value >= PoolPrice, \"Need to pay for the pool\");\r\n        require(IsValidToken(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\r\n        require(\r\n            _MainCoin == address(0x0) || IsERC20Maincoin(_MainCoin),\r\n            \"Main coin not in list\"\r\n        );\r\n        require(_FinishTime - now < MaxDuration, \"Can't be that long pool\");\r\n        require(\r\n            _Rate <= _POZRate,\r\n            \"POZ holders need to have better price (or the same)\"\r\n        );\r\n        require(_POZRate > 0, \"It will not work\");\r\n        if (_Now < now)\r\n            _Now = now;\r\n        require(\r\n            SafeMath.add(now, MinDuration) <= _FinishTime,\r\n            \"Need more then MinDuration\"\r\n        ); // check if the time is OK\r\n        TransferInToken(_Token, msg.sender, _StartAmount);\r\n        uint256 Openforall = (_Rate == _POZRate)\r\n            ? _Now\r\n            : SafeMath.add(\r\n                SafeMath.div(\r\n                    SafeMath.mul(\r\n                        SafeMath.sub(_FinishTime, _Now),\r\n                        PozTimer\r\n                    ),\r\n                    10000\r\n                ),\r\n                _Now\r\n            );\r\n        //register the pool\r\n        pools[poolsCount] = Pool(\r\n            _Token,\r\n            msg.sender,\r\n            _FinishTime,\r\n            _Rate,\r\n            _POZRate,\r\n            _MainCoin,\r\n            _StartAmount,\r\n            _IsLocked,\r\n            _StartAmount,\r\n            _Now,\r\n            Openforall,\r\n            0,\r\n            false,\r\n            _Is21Decimal\r\n        );\r\n        poolsMap[msg.sender].push(poolsCount);\r\n        emit NewPool(_Token, poolsCount);\r\n        poolsCount = SafeMath.add(poolsCount, 1); //joke - overflowfrom 0 on int256 = 1.16E77\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\ncontract PoolsData is Pools {\r\n    enum PoolStatus {Created, Open,PreMade , OutOfstock, Finished, Close} //the status of the pools\r\n\r\n    function GetMyPoolsId() public view returns (uint256[]) {\r\n        return poolsMap[msg.sender];\r\n    }\r\n\r\n    function IsReadyWithdrawLeftOvers(uint256 _PoolId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            pools[_PoolId].FinishTime <= now && \r\n           pools[_PoolId].Lefttokens > 0 && \r\n            !pools[_PoolId].TookLeftOvers;\r\n    }\r\n\r\n    //@dev no use of revert to make sure the loop will work\r\n    function WithdrawLeftOvers(uint256 _PoolId) public returns (bool) {\r\n        //pool is finished + got left overs + did not took them\r\n        if (IsReadyWithdrawLeftOvers(_PoolId)) {\r\n            pools[_PoolId].TookLeftOvers = true;\r\n            TransferToken(\r\n                pools[_PoolId].Token,\r\n                pools[_PoolId].Creator,\r\n                pools[_PoolId].Lefttokens\r\n            );\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //give the data of the pool, by id\r\n    function GetPoolData(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n            PoolStatus,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(_id < poolsCount, \"Wrong Id\");\r\n        return (\r\n            //check if sender POZ Invester?\r\n            GetPoolStatus(_id),\r\n            pools[_id].Token,\r\n            pools[_id].Rate,\r\n            pools[_id].POZRate,\r\n            pools[_id].Maincoin, //incase of ETH will be address.zero\r\n            pools[_id].StartAmount,\r\n            pools[_id].Lefttokens\r\n        );\r\n    }\r\n\r\n    function GetMorePoolData(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            bool\r\n        )\r\n    {\r\n        require(_id < poolsCount, \"Wrong Id\");\r\n        return (\r\n            pools[_id].IsLocked,\r\n            pools[_id].StartTime,\r\n            pools[_id].FinishTime,\r\n            pools[_id].OpenForAll,\r\n            pools[_id].Creator,\r\n            pools[_id].Is21DecimalRate\r\n        );\r\n    }\r\n\r\n    //calculate the status of a pool\r\n    function GetPoolStatus(uint256 _id) public view returns (PoolStatus) {\r\n        require(_id < poolsCount, \"Wrong pool id, Can't get Status\");\r\n        //Don't like the logic here - ToDo Boolean checks (truth table)\r\n        if (now < pools[_id].StartTime) return PoolStatus.PreMade;\r\n        if (now < pools[_id].OpenForAll && pools[_id].Lefttokens > 0) {\r\n            //got tokens + only poz investors\r\n            return (PoolStatus.Created);\r\n        }\r\n        if (\r\n            now >= pools[_id].OpenForAll &&\r\n            pools[_id].Lefttokens > 0 &&\r\n            now < pools[_id].FinishTime\r\n        ) {\r\n            //got tokens + all investors\r\n            return (PoolStatus.Open);\r\n        }\r\n        if (\r\n            pools[_id].Lefttokens == 0 &&\r\n            pools[_id].IsLocked &&\r\n            now < pools[_id].FinishTime\r\n        ) //no tokens on locked pool, got time\r\n        {\r\n            return (PoolStatus.OutOfstock);\r\n        }\r\n        if (\r\n            pools[_id].Lefttokens == 0 && !pools[_id].IsLocked\r\n        ) //no tokens on direct pool\r\n        {\r\n            return (PoolStatus.Close);\r\n        }\r\n        if (now >= pools[_id].FinishTime && !pools[_id].IsLocked) {\r\n            // After finish time - not locked\r\n            if (pools[_id].TookLeftOvers) return (PoolStatus.Close);\r\n            return (PoolStatus.Finished);\r\n        }\r\n        if (\r\n            (pools[_id].TookLeftOvers || pools[_id].Lefttokens == 0) &&\r\n            (pools[_id].UnlockedTokens + pools[_id].Lefttokens ==\r\n                pools[_id].StartAmount)\r\n        ) return (PoolStatus.Close);\r\n        return (PoolStatus.Finished);\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract Invest is PoolsData {\r\n    event NewInvestorEvent(uint256 Investor_ID);\r\n\r\n    modifier CheckTime(uint256 _Time) {\r\n        require(now >= _Time, \"Pool not open yet\");\r\n        _;\r\n    }\r\n\r\n    //using SafeMath for uint256;\r\n    constructor() public {\r\n        TotalInvestors = 0;\r\n    }\r\n\r\n    //Investorsr Data\r\n    uint256 internal TotalInvestors;\r\n    mapping(uint256 => Investor) Investors;\r\n    mapping(address => uint256[]) InvestorsMap;\r\n    struct Investor {\r\n        uint256 Poolid; //the id of the pool, he got the rate info and the token, check if looked pool\r\n        address InvestorAddress; //\r\n        uint256 MainCoin; //the amount of the main coin invested (eth/dai), calc with rate\r\n        bool IsPozInvestor; //If the blance of the address got > MinPoz, can get discout if got early\r\n        uint256 TokensOwn; //the amount of Tokens the investor needto get from the contract\r\n        uint256 InvestTime; //the time that investment made\r\n    }\r\n\r\n    //@dev Send in wei\r\n    function InvestETH(uint256 _PoolId)\r\n        external\r\n        payable\r\n        ReceivETH(msg.value, msg.sender,MinETHInvest)\r\n        whenNotPaused\r\n        CheckTime(pools[_PoolId].StartTime)\r\n    {\r\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestETH fail\");\r\n        require(pools[_PoolId].Maincoin == address(0x0), \"Pool is not for ETH\");\r\n        require(msg.value >= MinETHInvest && msg.value <= MaxETHInvest, \"Investment amount not valid\");\r\n        require(msg.sender == tx.origin && !isContract(msg.sender), \"Some tihng wrong with the msgSender\");\r\n        uint256 ThisInvestor = NewInvestor(msg.sender, msg.value, _PoolId);\r\n        uint256 Tokens = CalcTokens(_PoolId, msg.value, msg.sender);\r\n        if (pools[_PoolId].IsLocked) {\r\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\r\n                Investors[ThisInvestor].TokensOwn,\r\n                Tokens\r\n            );\r\n        } else {\r\n            // not locked, will transfer the toke\r\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\r\n        }\r\n\r\n        uint256 EthMinusFee = SafeMath.div(\r\n            SafeMath.mul(msg.value, SafeMath.sub(10000, CalcFee(_PoolId))),\r\n            10000\r\n        );\r\n\r\n        TransferETH(pools[_PoolId].Creator, EthMinusFee); // send money to project owner - the fee stays on contract\r\n        RegisterInvest(_PoolId, Tokens);\r\n    }\r\n\r\n    function InvestERC20(uint256 _PoolId, uint256 _Amount)\r\n        external\r\n        whenNotPaused\r\n        CheckTime(pools[_PoolId].StartTime)\r\n    {\r\n        require(_PoolId < poolsCount, \"Wrong pool id, InvestERC20 fail\");\r\n        require(\r\n            pools[_PoolId].Maincoin != address(0x0),\r\n            \"Pool is for ETH, use InvetETH\"\r\n        );\r\n        require(_Amount > 10000, \"Need invest more then 10000\");\r\n        require(msg.sender == tx.origin && !isContract(msg.sender), \"Some tihng wrong with the msgSender\");\r\n        TransferInToken(pools[_PoolId].Maincoin, msg.sender, _Amount);\r\n        uint256 ThisInvestor = NewInvestor(msg.sender, _Amount, _PoolId);\r\n        uint256 Tokens = CalcTokens(_PoolId, _Amount, msg.sender);\r\n\r\n        if (pools[_PoolId].IsLocked) {\r\n            Investors[ThisInvestor].TokensOwn = SafeMath.add(\r\n                Investors[ThisInvestor].TokensOwn,\r\n                Tokens\r\n            );\r\n        } else {\r\n            // not locked, will transfer the tokens\r\n            TransferToken(pools[_PoolId].Token, msg.sender, Tokens);\r\n        }\r\n\r\n        uint256 RegularFeePay = SafeMath.div(\r\n            SafeMath.mul(_Amount, CalcFee(_PoolId)),\r\n            10000\r\n        );\r\n\r\n        uint256 RegularPaymentMinusFee = SafeMath.sub(_Amount, RegularFeePay);\r\n        FeeMap[pools[_PoolId].Maincoin] = SafeMath.add(\r\n            FeeMap[pools[_PoolId].Maincoin],\r\n            RegularFeePay\r\n        );\r\n        TransferToken(\r\n            pools[_PoolId].Maincoin,\r\n            pools[_PoolId].Creator,\r\n            RegularPaymentMinusFee\r\n        ); // send money to project owner - the fee stays on contract\r\n        RegisterInvest(_PoolId, Tokens);\r\n    }\r\n\r\n    function RegisterInvest(uint256 _PoolId, uint256 _Tokens) internal {\r\n        require(\r\n            _Tokens <= pools[_PoolId].Lefttokens,\r\n            \"Not enough tokens in the pool\"\r\n        );\r\n        pools[_PoolId].Lefttokens = SafeMath.sub(\r\n            pools[_PoolId].Lefttokens,\r\n            _Tokens\r\n        );\r\n        if (pools[_PoolId].Lefttokens == 0) emit FinishPool(_PoolId);\r\n        else emit PoolUpdate(_PoolId);\r\n    }\r\n\r\n    function NewInvestor(\r\n        address _Sender,\r\n        uint256 _Amount,\r\n        uint256 _Pid\r\n    ) internal returns (uint256) {\r\n        Investors[TotalInvestors] = Investor(\r\n            _Pid,\r\n            _Sender,\r\n            _Amount,\r\n            IsPOZInvestor(_Sender),\r\n            0,\r\n            block.timestamp\r\n        );\r\n        InvestorsMap[msg.sender].push(TotalInvestors);\r\n        emit NewInvestorEvent(TotalInvestors);\r\n        TotalInvestors = SafeMath.add(TotalInvestors, 1);\r\n        return SafeMath.sub(TotalInvestors, 1);\r\n    }\r\n\r\n    function CalcTokens(\r\n        uint256 _Pid,\r\n        uint256 _Amount,\r\n        address _Sender\r\n    ) internal view returns (uint256) {\r\n        uint256 msgValue = _Amount;\r\n        uint256 result = 0;\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\r\n            if (!IsPOZInvestor(_Sender)) {\r\n                revert(\"Need to be POZ Holder to invest\");\r\n            }\r\n            result = SafeMath.mul(msgValue, pools[_Pid].POZRate);\r\n        }\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\r\n            result = SafeMath.mul(msgValue, pools[_Pid].Rate);\r\n        }\r\n        if (result > 10**21) {\r\n            if (pools[_Pid].Is21DecimalRate) {\r\n                result = SafeMath.div(result, 10**21);\r\n            }\r\n            return result;\r\n        }\r\n        revert(\"Wrong pool status to CalcTokens\");\r\n    }\r\n\r\n    function CalcFee(uint256 _Pid) internal view returns (uint256) {\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Created) {\r\n            return PozFee;\r\n        }\r\n        if (GetPoolStatus(_Pid) == PoolStatus.Open) {\r\n            return Fee;\r\n        }\r\n        //will not get here, will fail on CalcTokens\r\n        //revert(\"Wrong pool status to CalcFee\");\r\n    }\r\n\r\n       //@dev use it with  require(msg.sender == tx.origin)\r\n    function isContract(address _addr) internal view returns (bool) {      \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\ncontract InvestorData is Invest {\r\n    function IsReadyWithdrawInvestment(uint256 _id) public view returns (bool) {\r\n        return\r\n            _id <= TotalInvestors &&\r\n            Investors[_id].TokensOwn > 0 &&\r\n            pools[Investors[_id].Poolid].FinishTime <= now;\r\n    }\r\n\r\n    function WithdrawInvestment(uint256 _id) public returns (bool) {\r\n        if (IsReadyWithdrawInvestment(_id)) {\r\n            uint256 temp = Investors[_id].TokensOwn;\r\n            Investors[_id].TokensOwn = 0;\r\n            TransferToken(\r\n                pools[Investors[_id].Poolid].Token,\r\n                Investors[_id].InvestorAddress,\r\n                temp\r\n            );\r\n            pools[Investors[_id].Poolid].UnlockedTokens = SafeMath.add(\r\n                pools[Investors[_id].Poolid].UnlockedTokens,\r\n                temp\r\n            );\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Give all the id's of the investment  by sender address\r\n    function GetMyInvestmentIds() public view returns (uint256[]) {\r\n        return InvestorsMap[msg.sender];\r\n    }\r\n\r\n    function GetInvestmentData(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        require(\r\n            Investors[_id].InvestorAddress == msg.sender || msg.sender == owner,\r\n            \"Only for the investor (or Admin)\"\r\n        );\r\n        return (\r\n            Investors[_id].Poolid,\r\n            Investors[_id].InvestorAddress,\r\n            Investors[_id].MainCoin,\r\n            Investors[_id].IsPozInvestor,\r\n            Investors[_id].TokensOwn,\r\n            Investors[_id].InvestTime\r\n        );\r\n    }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\ncontract ThePoolz is InvestorData {\r\n    event InvestorsWork(uint256 NewStart, uint256 TotalDone);\r\n    event ProjectOwnerWork(uint256 NewStart, uint256 TotalDone);\r\n\r\n    constructor() public {\r\n        StartInvestor = 0;\r\n        StartProjectOwner = 0;\r\n        MinWorkInvestor = 0;\r\n        MinWorkProjectOwner = 0;\r\n    }\r\n\r\n    uint256 internal MinWorkInvestor;\r\n    uint256 internal MinWorkProjectOwner;\r\n    uint256 internal StartInvestor;\r\n    uint256 internal StartProjectOwner;\r\n\r\n    function SetStartForWork(uint256 _StartInvestor, uint256 _StartProjectOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        StartInvestor = _StartInvestor;\r\n        StartProjectOwner = _StartProjectOwner;\r\n    }\r\n\r\n    function GetMinWorkInvestor() public view returns (uint256) {\r\n        return MinWorkInvestor;\r\n    }\r\n\r\n    function SetMinWorkInvestor(uint256 _MinWorkInvestor) public onlyOwner {\r\n        MinWorkInvestor = _MinWorkInvestor;\r\n    }\r\n\r\n    function GetMinWorkProjectOwner() public view returns (uint256) {\r\n        return MinWorkProjectOwner;\r\n    }\r\n\r\n    function SetMinWorkProjectOwner(uint256 _MinWorkProjectOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        MinWorkProjectOwner = _MinWorkProjectOwner;\r\n    }\r\n\r\n    //will revert if less than parameters\r\n    function SafeWork() external returns (uint256, uint256) {\r\n        require(CanWork(), \"Need more than minimal work count\");\r\n        return DoWork();\r\n    }\r\n\r\n    function CanWork() public view returns (bool) {\r\n        uint256 inv;\r\n        uint256 pro;\r\n        (inv, pro) = CountWork();\r\n        return (inv > MinWorkInvestor || pro > MinWorkProjectOwner);\r\n    }\r\n\r\n    function DoWork() public returns (uint256, uint256) {\r\n        uint256 pro = WorkForProjectOwner();\r\n        uint256 inv = WorkForInvestors();\r\n        return (inv, pro);\r\n    }\r\n\r\n    function CountWork() public view returns (uint256, uint256) {\r\n        uint256 temp_investor_count = 0;\r\n        uint256 temp_projectowner_count = 0;\r\n        for (\r\n            uint256 Investorindex = StartInvestor;\r\n            Investorindex < TotalInvestors;\r\n            Investorindex++\r\n        ) {\r\n            if (IsReadyWithdrawInvestment(Investorindex)) temp_investor_count++;\r\n        }\r\n        for (\r\n            uint256 POindex = StartProjectOwner;\r\n            POindex < poolsCount;\r\n            POindex++\r\n        ) {\r\n            if (IsReadyWithdrawLeftOvers(POindex)) temp_projectowner_count++;\r\n        }\r\n        return (temp_investor_count, temp_projectowner_count);\r\n    }\r\n\r\n    function WorkForInvestors() internal returns (uint256) {\r\n        uint256 WorkDone = 0;\r\n        for (uint256 index = StartInvestor; index < TotalInvestors; index++) {\r\n            if (WithdrawInvestment(index)) WorkDone++;\r\n        }\r\n        SetInvestorStart();\r\n        emit InvestorsWork(StartInvestor, WorkDone);\r\n        return WorkDone;\r\n    }\r\n\r\n    function SetInvestorStart() internal {\r\n        for (uint256 index = StartInvestor; index < TotalInvestors; index++) {\r\n            if (GetPoolStatus(Investors[index].Poolid) == PoolStatus.Close)\r\n                StartInvestor = index;\r\n            else return;\r\n        }\r\n    }\r\n\r\n    function WorkForProjectOwner() internal returns (uint256) {\r\n        uint256 WorkDone = 0;\r\n        bool FixStart = true;\r\n        for (uint256 index = StartProjectOwner; index < poolsCount; index++) {\r\n            if (WithdrawLeftOvers(index)) WorkDone++;\r\n            if (\r\n                FixStart &&\r\n                (pools[index].TookLeftOvers || pools[index].Lefttokens == 0)\r\n            ) {\r\n                StartProjectOwner = index;\r\n            } else {\r\n                FixStart = false;\r\n            }\r\n        }\r\n        emit ProjectOwnerWork(StartProjectOwner, WorkDone);\r\n        return WorkDone;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemoveERC20Maincoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPozTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SwapTokenFilter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetPoolStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"IsValidToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPOZFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_StartInvestor\",\"type\":\"uint256\"},{\"name\":\"_StartProjectOwner\",\"type\":\"uint256\"}],\"name\":\"SetStartForWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POZ_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ERC20MainCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinWorkInvestor\",\"type\":\"uint256\"}],\"name\":\"SetMinWorkInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinETHInvest\",\"type\":\"uint256\"},{\"name\":\"_MaxETHInvest\",\"type\":\"uint256\"}],\"name\":\"SetMinMaxETHInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Token\",\"type\":\"address\"},{\"name\":\"_FinishTime\",\"type\":\"uint256\"},{\"name\":\"_Rate\",\"type\":\"uint256\"},{\"name\":\"_POZRate\",\"type\":\"uint256\"},{\"name\":\"_StartAmount\",\"type\":\"uint256\"},{\"name\":\"_IsLocked\",\"type\":\"bool\"},{\"name\":\"_MainCoin\",\"type\":\"address\"},{\"name\":\"_Is21Decimal\",\"type\":\"bool\"},{\"name\":\"_Now\",\"type\":\"uint256\"}],\"name\":\"CreatePool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTokenFilterOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinPoz\",\"type\":\"uint256\"}],\"name\":\"SetMinPoz\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetInvestmentData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetIsPayble\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyPoolsId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetMorePoolData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CountWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_POZBenefit_Address\",\"type\":\"address\"}],\"name\":\"SetPOZBenefit_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CanWork\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinWorkProjectOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"WithdrawInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinWorkProjectOwner\",\"type\":\"uint256\"}],\"name\":\"SetMinWorkProjectOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinWorkInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyInvestmentIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPoolPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DoWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawETHFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinPoz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"AddERC20Maincoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"IsReadyWithdrawLeftOvers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetPOZFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SwitchIsPayble\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"name\":\"Token\",\"type\":\"address\"},{\"name\":\"Creator\",\"type\":\"address\"},{\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"name\":\"Rate\",\"type\":\"uint256\"},{\"name\":\"POZRate\",\"type\":\"uint256\"},{\"name\":\"Maincoin\",\"type\":\"address\"},{\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"name\":\"IsLocked\",\"type\":\"bool\"},{\"name\":\"Lefttokens\",\"type\":\"uint256\"},{\"name\":\"StartTime\",\"type\":\"uint256\"},{\"name\":\"OpenForAll\",\"type\":\"uint256\"},{\"name\":\"UnlockedTokens\",\"type\":\"uint256\"},{\"name\":\"TookLeftOvers\",\"type\":\"bool\"},{\"name\":\"Is21DecimalRate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minDuration\",\"type\":\"uint256\"},{\"name\":\"_maxDuration\",\"type\":\"uint256\"}],\"name\":\"SetMinMaxDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PoolPrice\",\"type\":\"uint256\"}],\"name\":\"SetPoolPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"InvestERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLastPoolId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SafeWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AmIPOZInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinMaxETHInvest\",\"outputs\":[{\"name\":\"_MinETHInvest\",\"type\":\"uint256\"},{\"name\":\"_MaxETHInvest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_POZ_Address\",\"type\":\"address\"}],\"name\":\"SetPozAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"IsReadyWithdrawInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"IsERC20Maincoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetPoolData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"InvestETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pozTimer\",\"type\":\"uint256\"}],\"name\":\"SetPozTimer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMinMaxDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POZBenefit_Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawERC20Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"WithdrawLeftOvers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalDone\",\"type\":\"uint256\"}],\"name\":\"InvestorsWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalDone\",\"type\":\"uint256\"}],\"name\":\"ProjectOwnerWork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Investor_ID\",\"type\":\"uint256\"}],\"name\":\"NewInvestorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"FinishPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"MainCoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"MainCoinRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"To\",\"type\":\"address\"}],\"name\":\"TransferOutETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"From\",\"type\":\"address\"}],\"name\":\"TransferInETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"To\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ThePoolz","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://643138ed3f7e28aeaf8488733f6bce4491b6ce4b8988d0e32cdf3d480dc220fc"}]}