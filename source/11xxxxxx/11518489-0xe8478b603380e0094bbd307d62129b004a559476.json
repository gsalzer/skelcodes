{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CollectableDust.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../interfaces/ICollectableDust.sol';\\n\\nabstract\\ncontract CollectableDust is ICollectableDust {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() public {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).transfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"interfaces/ICollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(address _to, address _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/zTreasury/V2/zTreasuryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../../../interfaces/zTreasury/V2/IZTreasuryV2.sol';\\n\\nimport '../../Governable.sol';\\nimport '../../Manageable.sol';\\nimport '../../CollectableDust.sol';\\n\\nimport './zTreasuryV2Metadata.sol';\\nimport './zTreasuryV2ProtocolParameters.sol';\\n\\ncontract zTreasuryV2 is \\n  Governable, \\n  Manageable,\\n  CollectableDust,\\n  zTreasuryV2Metadata,\\n  zTreasuryV2ProtocolParameters, \\n  IZTreasuryV2 {\\n\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public override lastEarningsDistribution = 0;\\n  uint256 public override totalEarningsDistributed = 0;\\n  \\n  constructor(\\n    address _governor,\\n    address _manager,\\n    address _zGov,\\n    address _lotManager,\\n    address _maintainer,\\n    address _zToken,\\n    uint256 _maintainerShare,\\n    uint256 _governanceShare,\\n    uint256[] memory _initialDistributionValues\\n  ) public \\n    zTreasuryV2ProtocolParameters(\\n      _zGov,\\n      _lotManager,\\n      _maintainer, \\n      _zToken,\\n      _maintainerShare,\\n      _governanceShare\\n    )\\n    Governable(_governor)\\n    Manageable(_manager)\\n    CollectableDust() {\\n      lastEarningsDistribution = _initialDistributionValues[0];\\n      totalEarningsDistributed = _initialDistributionValues[1];\\n      _addProtocolToken(_zToken);\\n  }\\n\\n  // Modifiers\\n  modifier onlyManagerOrLotManager {\\n    require(msg.sender == manager || msg.sender == lotManager, 'zTreasuryV2::only-manager-or-lot-manager');\\n    _;\\n  }\\n  \\n  function distributeEarnings() external override onlyManagerOrLotManager {\\n    uint256 _balance = zToken.balanceOf(address(this));\\n    \\n    // Send zToken to maintainer\\n    uint256 _maintainerEarnings = _balance.mul(maintainerShare).div(SHARES_PRECISION).div(100);\\n    zToken.safeTransfer(maintainer, _maintainerEarnings);\\n\\n    // Send zToken to zGov\\n    uint256 _governanceEarnings = _balance.sub(_maintainerEarnings);\\n    zToken.safeApprove(address(zGov), 0);\\n    zToken.safeApprove(address(zGov), _governanceEarnings);\\n\\n    // Notify governance reward amount to distribute\\n    zGov.notifyRewardAmount(_governanceEarnings);\\n\\n    // Set last time distributed\\n    lastEarningsDistribution = block.timestamp;\\n    totalEarningsDistributed = totalEarningsDistributed.add(_balance);\\n\\n    // Emit event\\n    emit EarningsDistributed(_maintainerEarnings, _governanceEarnings, totalEarningsDistributed);\\n  }\\n\\n  // zTreasuryProtocolParameters\\n  function setZGov(address _zGov) external override onlyGovernor {\\n    _setZGov(_zGov);\\n  }\\n\\n  function setLotManager(address _lotManager) external override onlyGovernor {\\n    _setLotManager(_lotManager);\\n  }\\n\\n  function setMaintainer(address _maintainer) external override onlyGovernor {\\n    _setMaintainer(_maintainer);\\n  }\\n\\n  function setZToken(address _zToken) external override onlyGovernor {\\n    require(address(zToken) != _zToken, 'zTreasuryV2::setZToken::same-ztoken');\\n    _removeProtocolToken(address(zToken));\\n    _addProtocolToken(address(_zToken));\\n    _setZToken(_zToken);\\n  }\\n\\n  function setShares(uint256 _maintainerShare, uint256 _governanceShare) external override onlyGovernor {\\n    _setShares(_maintainerShare, _governanceShare);\\n  }\\n\\n  // Governable\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Manageable\\n  function setPendingManager(address _pendingManager) external override onlyManager {\\n    _setPendingManager(_pendingManager);\\n  }\\n\\n  function acceptManager() external override onlyPendingManager {\\n    _acceptManager();\\n  }\\n\\n  // Collectable Dust\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/zTreasury/V2/IZTreasuryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport './IZTreasuryV2Metadata.sol';\\nimport './IZTreasuryV2ProtocolParameters.sol';\\n\\ninterface IZTreasuryV2 is IZTreasuryV2ProtocolParameters, IZTreasuryV2Metadata {\\n  event EarningsDistributed(\\n    uint256 maintainerRewards, \\n    uint256 governanceRewards, \\n    uint256 totalEarningsDistributed\\n  );\\n\\n  function lastEarningsDistribution() external returns (uint256);\\n  function totalEarningsDistributed() external returns (uint256);\\n  function distributeEarnings() external;\\n}\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '../interfaces/IGovernable.sol';\\n\\nabstract\\ncontract Governable is IGovernable {\\n  address public governor;\\n  address public pendingGovernor;\\n\\n  constructor(address _governor) public {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  modifier onlyGovernor {\\n    require(msg.sender == governor, 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"contracts/Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '../interfaces/IManageable.sol';\\n\\nabstract\\ncontract Manageable is IManageable {\\n  address public manager;\\n  address public pendingManager;\\n\\n  constructor(address _manager) public {\\n    require(_manager != address(0), 'manageable/manager-should-not-be-zero-address');\\n    manager = _manager;\\n  }\\n\\n  function _setPendingManager(address _pendingManager) internal {\\n    require(_pendingManager != address(0), 'manageable/pending-manager-should-not-be-zero-addres');\\n    pendingManager = _pendingManager;\\n    emit PendingManagerSet(_pendingManager);\\n  }\\n\\n  function _acceptManager() internal {\\n    manager = pendingManager;\\n    pendingManager = address(0);\\n    emit ManagerAccepted();\\n  }\\n\\n  modifier onlyManager {\\n    require(msg.sender == manager, 'manageable/only-manager');\\n    _;\\n  }\\n\\n  modifier onlyPendingManager {\\n    require(msg.sender == pendingManager, 'manageable/only-pending-manager');\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"contracts/zTreasury/V2/zTreasuryV2Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../../../interfaces/zTreasury/V2/IZTreasuryV2Metadata.sol';\\n\\ncontract zTreasuryV2Metadata is IZTreasuryV2Metadata {\\n  function isZTreasury() external override pure returns (bool) {\\n    return true;\\n  }\\n}\"\r\n    },\r\n    \"contracts/zTreasury/V2/zTreasuryV2ProtocolParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../../../interfaces/LotManager/ILotManagerMetadata.sol';\\nimport '../../../interfaces/zTreasury/V2/IZTreasuryV2ProtocolParameters.sol';\\n\\nabstract\\ncontract zTreasuryV2ProtocolParameters is IZTreasuryV2ProtocolParameters {\\n  using SafeMath for uint256;\\n  \\n  uint256 public constant override SHARES_PRECISION = 10000;\\n  uint256 public constant override MAX_MAINTAINER_SHARE = 25 * SHARES_PRECISION;\\n\\n  IERC20 public override zToken; // zhegic\\n  zGovernance public override zGov; // zgov\\n\\n  address public override lotManager;\\n  address public override maintainer;\\n\\n  uint256 public override maintainerShare;\\n  uint256 public override governanceShare;\\n  \\n  constructor(\\n    address _zGov,\\n    address _lotManager,\\n    address _maintainer,\\n    address _zToken,\\n    uint256 _maintainerShare,\\n    uint256 _governanceShare\\n  ) public {\\n    _setZGov(_zGov);\\n    _setLotManager(_lotManager);\\n    _setMaintainer(_maintainer);\\n    _setZToken(_zToken);\\n    _setShares(_maintainerShare, _governanceShare);\\n  }\\n  \\n  function _setZGov(address _zGov) internal {\\n    require(_zGov != address(0), 'zTreasuryV2ProtocolParameters::_setZGov::no-zero-address');\\n    zGov = zGovernance(_zGov);\\n    emit ZGovSet(_zGov);\\n  }\\n\\n  function _setLotManager(address _lotManager) internal {\\n    require(_lotManager != address(0), 'zTreasuryV2ProtocolParameters::_setLotManager::no-zero-address');\\n    require(ILotManagerMetadata(_lotManager).isLotManager(), 'zTreasuryV2ProtocolParameters::_setLotManager::not-lot-manager');\\n    lotManager = _lotManager;\\n    emit LotManagerSet(_lotManager);\\n  }\\n\\n  function _setMaintainer(address _maintainer) internal {\\n    require(_maintainer != address(0), 'zTreasuryV2ProtocolParameters::_setMaintainer::no-zero-address');\\n    maintainer = _maintainer;\\n    emit MaintainerSet(_maintainer);\\n  }\\n\\n  function _setZToken(address _zToken) internal {\\n    require(_zToken != address(0), 'zTreasuryV2ProtocolParameters::_setZToken::no-zero-address');\\n    zToken = IERC20(_zToken);\\n    emit ZTokenSet(_zToken);\\n  }\\n\\n  function _setShares(uint256 _maintainerShare, uint256 _governanceShare) internal {\\n    require(_maintainerShare.add(_governanceShare) == SHARES_PRECISION.mul(100), 'zTreasuryV2ProtocolParameters::_setShares::not-100-percent');\\n    require(_maintainerShare <= MAX_MAINTAINER_SHARE, 'zTreasuryV2ProtocolParameters::_setShares::exceeds-max-mantainer-share');\\n    maintainerShare = _maintainerShare;\\n    governanceShare = _governanceShare;\\n    emit SharesSet(_maintainerShare, _governanceShare);\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/zTreasury/V2/IZTreasuryV2Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IZTreasuryV2Metadata {\\n  function isZTreasury() external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/zTreasury/V2/IZTreasuryV2ProtocolParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface zGovernance {\\n  function notifyRewardAmount(uint) external;\\n}\\n\\ninterface IZTreasuryV2ProtocolParameters {\\n  event ZGovSet(address zGov);\\n  event LotManagerSet(address lotManager);\\n  event MaintainerSet(address maintainer);\\n  event ZTokenSet(address zToken);\\n  event SharesSet(uint256 maintainerShare, uint256 governanceShare);\\n\\n  function zToken() external returns (IERC20);\\n\\n  function zGov() external returns (zGovernance);\\n  function lotManager() external returns (address);\\n  function maintainer() external returns (address);\\n\\n  function SHARES_PRECISION() external returns (uint256);\\n  function MAX_MAINTAINER_SHARE() external returns (uint256);\\n  function maintainerShare() external returns (uint256);\\n  function governanceShare() external returns (uint256);\\n\\n  function setZGov(address _zGov) external;\\n  function setLotManager(address _lotManager) external;\\n  function setMaintainer(address _maintainer) external;\\n  function setZToken(address _zToken) external;\\n  function setShares(uint256 _maintainerShare, uint256 _governanceShare) external;\\n}\"\r\n    },\r\n    \"interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n  function acceptGovernor() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IManageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IManageable {\\n  event PendingManagerSet(address pendingManager);\\n  event ManagerAccepted();\\n\\n  function setPendingManager(address _pendingManager) external;\\n  function acceptManager() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/LotManager/ILotManagerMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface ILotManagerMetadata {\\n  function isLotManager() external pure returns (bool);\\n  function getName() external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2ProtocolParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../../../interfaces/HegicPool/IHegicPoolV2.sol';\\nimport '../../../interfaces/IHegicStaking.sol';\\n\\nimport '../../../interfaces/zTreasury/V2/IZTreasuryV2.sol';\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2ProtocolParameters.sol';\\n\\nabstract\\ncontract LotManagerV2ProtocolParameters is ILotManagerV2ProtocolParameters {\\n\\n  uint256 public constant override LOT_PRICE = 888_000e18;\\n\\n  uint256 public constant override FEE_PRECISION = 10000;\\n  uint256 public constant override MAX_PERFORMANCE_FEE = 50 * FEE_PRECISION;\\n  \\n  address public override uniswapV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n  uint256 public override performanceFee;\\n  IZTreasuryV2 public override zTreasury;\\n\\n  address public override weth;\\n  address public override wbtc;\\n  IHegicStaking public override hegicStakingETH;\\n  IHegicStaking public override hegicStakingWBTC;\\n\\n  IHegicPoolV2 public override pool;\\n  IERC20 public override token;\\n\\n  constructor(\\n    uint256 _performanceFee,\\n    address _zTreasury,\\n    address _pool,\\n    address _weth,\\n    address _wbtc,\\n    address _hegicStakingETH,\\n    address _hegicStakingWBTC\\n  ) public {\\n    _setPerformanceFee(_performanceFee);\\n    _setZTreasury(_zTreasury);\\n    _setPool(_pool);\\n    _setWETH(_weth);\\n    _setWBTC(_wbtc);\\n    _setHegicStaking(_hegicStakingETH, _hegicStakingWBTC);\\n  }\\n\\n  function lotPrice() external override view returns (uint256) {\\n    return LOT_PRICE;\\n  }\\n\\n  function getPool() external override view returns (address) {\\n    return address(pool);\\n  }\\n\\n  function _setPerformanceFee(uint256 _performanceFee) internal {\\n    require(_performanceFee <= MAX_PERFORMANCE_FEE, 'LotManagerV2ProtocolParameters::_setPerformanceFee::bigger-than-max');\\n    performanceFee = _performanceFee;\\n    emit PerformanceFeeSet(_performanceFee);\\n  }\\n  \\n  function _setZTreasury(address _zTreasury) internal {\\n    require(_zTreasury != address(0), 'LotManagerV2ProtocolParameters::_setZTreasury::not-zero-address');\\n    require(IZTreasuryV2(_zTreasury).isZTreasury(), 'LotManagerV2ProtocolParameters::_setZTreasury::not-treasury');\\n    zTreasury = IZTreasuryV2(_zTreasury);\\n    emit ZTreasurySet(_zTreasury);\\n  }\\n\\n  function _setPool(address _pool) internal {\\n    require(_pool != address(0), 'LotManagerV2ProtocolParameters::_setPool::not-zero-address');\\n    require(IHegicPoolMetadata(_pool).isHegicPool(), 'LotManagerV2ProtocolParameters::_setPool::not-setting-a-hegic-pool');\\n    pool = IHegicPoolV2(_pool);\\n    token = IERC20(pool.getToken());\\n    emit PoolSet(_pool, address(token));\\n  }\\n\\n  function _setWETH(address _weth) internal {\\n    require(_weth != address(0), 'LotManagerV2ProtocolParameters::_setWETH::not-zero-address');\\n    weth = _weth;\\n    emit WETHSet(_weth);\\n  }\\n\\n  function _setWBTC(address _wbtc) internal {\\n    require(_wbtc != address(0), 'LotManagerV2ProtocolParameters::_setWBTC::not-zero-address');\\n    wbtc = _wbtc;\\n    emit WBTCSet(_wbtc);\\n  }\\n\\n  function _setHegicStaking(\\n    address _hegicStakingETH,\\n    address _hegicStakingWBTC\\n  ) internal {\\n    require(\\n      _hegicStakingETH != address(0) && \\n      _hegicStakingWBTC != address(0), \\n      'LotManagerV2ProtocolParameters::_setHegicStaking::not-zero-addresses'\\n    );\\n\\n    hegicStakingETH = IHegicStaking(_hegicStakingETH);\\n    hegicStakingWBTC = IHegicStaking(_hegicStakingWBTC);\\n\\n    emit HegicStakingSet(_hegicStakingETH, _hegicStakingWBTC);\\n  }\\n}\"\r\n    },\r\n    \"interfaces/HegicPool/IHegicPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport '../IGovernable.sol';\\nimport '../IManageable.sol';\\nimport '../ICollectableDust.sol';\\n\\nimport './IHegicPoolMetadata.sol';\\nimport './IHegicPoolProtocolParameters.sol';\\n\\ninterface IHegicPoolV2 is\\n  IGovernable,\\n  IManageable,\\n  ICollectableDust,\\n  IHegicPoolMetadata,\\n  IHegicPoolProtocolParameters {\\n\\n  // Governance events\\n  event LotManagerSet(address lotManager);\\n  event PoolMigrated(address pool, uint256 balance);\\n\\n  // Protocol events\\n  event RewardsClaimed(uint256 rewards);\\n  event LotsBought(uint256 eth, uint256 wbtc);\\n\\n  // User events\\n  event Deposited(address depositor, uint256 tokenAmount, uint256 mintedShares);\\n  event Withdrew(address withdrawer, uint256 burntShares, uint256 withdrawedTokens, uint256 withdrawFee);\\n\\n  function getToken() external view returns (address);\\n  function getZToken() external view returns (address);\\n  function getLotManager() external view returns (address);\\n  function migrate(address newPool) external;\\n\\n  // User interactions\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n  function depositAll() external returns (uint256 shares);\\n  function withdraw(uint256 shares) external returns (uint256 underlyingToWithdraw);\\n  function withdrawAll() external returns (uint256 underlyingToWithdraw);\\n\\n  // State queries\\n  function unusedUnderlyingBalance() external view returns (uint256);\\n  function totalUnderlying() external view returns (uint256);\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  // Lot Managment\\n  function setLotManager(address lotManager) external;\\n  function claimRewards() external returns (uint rewards);\\n  function buyLots(uint256 eth, uint256 wbtc) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IHegicStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHegicStaking is IERC20 {    \\n    event Claim(address indexed acount, uint amount);\\n    event Profit(uint amount);\\n\\n    function lockupPeriod() external view returns (uint256);\\n    function lastBoughtTimestamp(address) external view returns (uint256);\\n\\n    function claimProfit() external returns (uint profit);\\n    function buy(uint amount) external;\\n    function sell(uint amount) external;\\n    function profitOf(address account) external view returns (uint);\\n}\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2ProtocolParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../../../interfaces/zTreasury/V2/IZTreasuryV2.sol';\\nimport '../../../interfaces/HegicPool/IHegicPoolV2.sol';\\nimport '../../../interfaces/IHegicStaking.sol';\\n\\ninterface ILotManagerV2ProtocolParameters {\\n  event PerformanceFeeSet(uint256 _performanceFee);\\n  event ZTreasurySet(address _zTreasury);\\n  event PoolSet(address _pool, address _token);\\n  event WETHSet(address _weth);\\n  event WBTCSet(address _wbtc);\\n  event HegicStakingSet(address _hegicStakingETH, address _hegicStakingWBTc);\\n\\n  function uniswapV2() external returns (address);\\n  function LOT_PRICE() external returns (uint256);\\n  function FEE_PRECISION() external returns (uint256);\\n  function MAX_PERFORMANCE_FEE() external returns (uint256);\\n  function lotPrice() external view returns (uint256); // deprecated for LOT_PRICE\\n  function getPool() external view returns (address); // deprecated for pool\\n\\n  function performanceFee() external returns (uint256);\\n  function zTreasury() external returns (IZTreasuryV2);\\n\\n  function weth() external returns (address);\\n  function wbtc() external returns (address);\\n  function hegicStakingETH() external returns (IHegicStaking);\\n  function hegicStakingWBTC() external returns (IHegicStaking);\\n\\n  function pool() external returns (IHegicPoolV2);\\n  function token() external returns (IERC20);\\n\\n  function setPerformanceFee(uint256 _performanceFee) external;\\n  function setZTreasury(address _zTreasury) external;\\n  function setPool(address _pool) external;\\n  function setWETH(address _weth) external;\\n  function setWBTC(address _wbtc) external;\\n  function setHegicStaking(address _hegicStakingETH, address _hetgicStakingWBTC) external;\\n}\"\r\n    },\r\n    \"interfaces/HegicPool/IHegicPoolMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IHegicPoolMetadata {\\n  function isHegicPool() external pure returns (bool);\\n  function getName() external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"interfaces/HegicPool/IHegicPoolProtocolParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IHegicPoolProtocolParameters {\\n  event MinTokenReservesSet(uint256 minTokenReserves);\\n  event WithdrawCooldownSet(uint256 withdrawCooldown);\\n  event WidthawFeeSet(uint256 withdrawFee);\\n  function setMinTokenReserves(uint256 minTokenReserves) external;\\n  function setWithdrawCooldown(uint256 withdrawCooldown) external;\\n  function setWithdrawFee(uint256 withdrawFee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2.sol';\\nimport '../../../interfaces/IWETH9.sol';\\n\\nimport '../../Governable.sol';\\nimport '../../Manageable.sol';\\nimport '../../CollectableDust.sol';\\n\\nimport '../LotManagerMetadata.sol';\\nimport './LotManagerV2ProtocolParameters.sol';\\nimport './LotManagerV2LotsHandler.sol';\\nimport './LotManagerV2RewardsHandler.sol';\\nimport './LotManagerV2Migrable.sol';\\nimport './LotManagerV2Unwindable.sol';\\n\\ncontract LotManagerV2 is\\n  Governable,\\n  Manageable,\\n  CollectableDust,\\n  LotManagerMetadata,\\n  LotManagerV2ProtocolParameters,\\n  LotManagerV2LotsHandler,\\n  LotManagerV2RewardsHandler,\\n  LotManagerV2Migrable,\\n  LotManagerV2Unwindable,\\n  ILotManagerV2 {\\n\\n  constructor(\\n    address _governor,\\n    address _manager,\\n    uint256 _performanceFee,\\n    address _zTreasury,\\n    address _pool,\\n    address _weth,\\n    address _wbtc,\\n    address[2] memory _hegicStakings\\n  ) public\\n    Governable(_governor)\\n    Manageable(_manager)\\n    CollectableDust()\\n    LotManagerMetadata()\\n    LotManagerV2ProtocolParameters(\\n      _performanceFee,\\n      _zTreasury,\\n      _pool,\\n      _weth,\\n      _wbtc,\\n      _hegicStakings[0],\\n      _hegicStakings[1])\\n    LotManagerV2LotsHandler()\\n    LotManagerV2RewardsHandler()\\n    LotManagerV2Migrable()\\n    LotManagerV2Unwindable() {\\n    _addProtocolToken(_pool);\\n    _addProtocolToken(address(token));\\n    _addProtocolToken(_weth);\\n    _addProtocolToken(_wbtc);\\n    _addProtocolToken(_hegicStakings[0]);\\n    _addProtocolToken(_hegicStakings[1]);\\n  }\\n\\n  // Modifiers\\n  modifier onlyManagerOrPool {\\n    require(msg.sender == address(pool) || msg.sender == manager, 'LotManagerV2::only-manager-or-pool');\\n    _;\\n  }\\n\\n  modifier onlyPool {\\n    require(msg.sender == address(pool), 'LotManagerV2::only-pool');\\n    _;\\n  }\\n\\n  // Unwind\\n  function unwind(uint256 _amount) external override onlyPool returns (uint256 _total) {\\n    return _unwind(_amount);\\n  }\\n\\n  // Rewards handler\\n  function claimRewards() external override onlyManagerOrPool returns (uint256 _totalRewards) {\\n    return _claimRewards();\\n  }\\n\\n  // Lot Handler\\n  function buyLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyPool returns (bool) {\\n    return _buyLots(_ethLots, _wbtcLots);\\n  }\\n\\n  function sellLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyGovernor returns (bool) {\\n    return _sellLots(_ethLots, _wbtcLots);\\n  }\\n\\n  function rebalanceLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyManagerOrPool returns (bool) {\\n    return _rebalanceLots(_ethLots, _wbtcLots);\\n  }\\n\\n  // Protocol Parameters\\n  function setPerformanceFee(uint256 _peformanceFee) external override onlyGovernor {\\n    _setPerformanceFee(_peformanceFee);\\n  }\\n\\n  function setZTreasury(address _zTreasury) external override onlyGovernor {\\n    _setZTreasury(_zTreasury);\\n  }\\n\\n  function setPool(address _pool) external override onlyGovernor {\\n    _removeProtocolToken(address(pool));\\n    _removeProtocolToken(address(token));\\n    _setPool(_pool);\\n    _addProtocolToken(_pool);\\n    _addProtocolToken(address(token));\\n  }\\n\\n  function setWETH(address _weth) external override onlyGovernor {\\n    _removeProtocolToken(weth);\\n    _addProtocolToken(_weth);\\n    _setWETH(_weth);\\n  }\\n\\n  function setWBTC(address _wbtc) external override onlyGovernor {\\n    _removeProtocolToken(wbtc);\\n    _addProtocolToken(_wbtc);\\n    _setWBTC(_wbtc);\\n  }\\n\\n  function setHegicStaking(\\n    address _hegicStakingETH, \\n    address _hegicStakingWBTC\\n  ) external override onlyGovernor {\\n    if (address(hegicStakingETH) != _hegicStakingETH) {\\n      _removeProtocolToken(address(hegicStakingETH));\\n      _addProtocolToken(_hegicStakingETH);\\n    }\\n    if (address(hegicStakingWBTC) != _hegicStakingWBTC) {\\n      _removeProtocolToken(address(hegicStakingWBTC));\\n      _addProtocolToken(_hegicStakingWBTC);\\n    }\\n    _setHegicStaking(\\n      _hegicStakingETH,\\n      _hegicStakingWBTC\\n    );\\n  }\\n\\n  // Migrable\\n  function migrate(address _newLotManager) external override virtual onlyGovernor {\\n    _migrate(_newLotManager);\\n  }\\n\\n  // Governable\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Manageable\\n  function setPendingManager(address _pendingManager) external override onlyManager {\\n    _setPendingManager(_pendingManager);\\n  }\\n\\n  function acceptManager() external override onlyPendingManager {\\n    _acceptManager();\\n  }\\n\\n  // Collectable Dust\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '../../IGovernable.sol';\\nimport '../../IManageable.sol';\\nimport '../../ICollectableDust.sol';\\n\\nimport '../ILotManagerMetadata.sol';\\n\\nimport './ILotManagerV2ProtocolParameters.sol';\\nimport './ILotManagerV2LotsHandler.sol';\\nimport './ILotManagerV2RewardsHandler.sol';\\nimport './ILotManagerV2Migrable.sol';\\nimport './ILotManagerV2Unwindable.sol';\\n\\ninterface ILotManagerV2 is \\n  IGovernable,\\n  IManageable,\\n  ICollectableDust,\\n  ILotManagerMetadata, \\n  ILotManagerV2ProtocolParameters, \\n  ILotManagerV2LotsHandler,\\n  ILotManagerV2RewardsHandler,\\n  ILotManagerV2Migrable,\\n  ILotManagerV2Unwindable { }\"\r\n    },\r\n    \"interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IWETH9 {\\n    function deposit() external payable;\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/LotManager/LotManagerMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '../../interfaces/LotManager/ILotManagerMetadata.sol';\\n\\ncontract LotManagerMetadata is ILotManagerMetadata {\\n  function isLotManager() external override pure returns (bool) {\\n    return true;\\n  }\\n  function getName() external override pure returns (string memory) {\\n    return 'LotManager';\\n  }\\n}\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2LotsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2LotsHandler.sol';\\n\\nimport './LotManagerV2ProtocolParameters.sol';\\n\\nabstract\\ncontract LotManagerV2LotsHandler is \\n  LotManagerV2ProtocolParameters, \\n  ILotManagerV2LotsHandler {\\n\\n  using SafeMath for uint256;\\n\\n  function balanceOfUnderlying() public override view returns (uint256 _underlyingBalance) {\\n    (uint256 _ethLots, uint256 _wbtcLots) = balanceOfLots();\\n    return _ethLots.add(_wbtcLots).mul(LOT_PRICE);\\n  }\\n\\n  function balanceOfLots() public override view returns (uint256 _ethLots, uint256 _wbtcLots) {\\n    return (\\n      hegicStakingETH.balanceOf(address(this)),\\n      hegicStakingWBTC.balanceOf(address(this))\\n    );\\n  }\\n\\n  function profitOfLots() public override view returns (uint256 _ethProfit, uint256 _wbtcProfit) {\\n    return (\\n      hegicStakingETH.profitOf(address(this)),\\n      hegicStakingWBTC.profitOf(address(this))\\n    );\\n  }\\n\\n  function _buyLots(uint256 _ethLots, uint256 _wbtcLots) internal returns (bool) {\\n    // Get allowance\\n    uint256 allowance = token.allowance(address(pool), address(this));\\n    // Check if Allowance exceeds lot contract cost\\n    uint256 lotsCosts = _ethLots.add(_wbtcLots).mul(LOT_PRICE);\\n    require (allowance >= lotsCosts, 'LotManagerV2LotsHandler::_buyLots::not-enough-allowance');\\n    // Buy lot by transfering tokens\\n    token.transferFrom(address(pool), address(this), lotsCosts);\\n\\n    // Buys Lot(s) (defaults buys ETH lot)\\n    if (_ethLots > 0) _buyETHLots(_ethLots);\\n    if (_wbtcLots > 0) _buyWBTCLots(_wbtcLots);\\n\\n    // Transfer unused tokens(underlying) back to the pool\\n    token.transfer(address(pool), token.balanceOf(address(this)));\\n\\n    return true;\\n  }\\n\\n  function _buyETHLots(uint256 _ethLots) internal {\\n    // Allow hegicStakingETH to spend allowance\\n    token.approve(address(hegicStakingETH), 0);\\n    token.approve(address(hegicStakingETH), _ethLots * LOT_PRICE);\\n    hegicStakingETH.buy(_ethLots);\\n    emit ETHLotBought(_ethLots);\\n  }\\n\\n  function _buyWBTCLots(uint256 _wbtcLots) internal {\\n    // Allow hegicStakingWBTC to spend allowance\\n    token.approve(address(hegicStakingWBTC), 0);\\n    token.approve(address(hegicStakingWBTC), _wbtcLots * LOT_PRICE);\\n    hegicStakingWBTC.buy(_wbtcLots);\\n    emit WBTCLotBought(_wbtcLots);\\n  }\\n\\n  function _sellLots(uint256 _ethLots, uint256 _wbtcLots) internal returns (bool) {\\n    // Sells Lot(s) used for unwinding/rebalancing\\n    (uint256 _ownedETHLots, uint256 _ownedWBTCLots) = balanceOfLots();\\n    require (_ethLots <= _ownedETHLots && _wbtcLots <= _ownedWBTCLots, 'LotManagerV2LotsHandler::_sellLots::not-enough-lots');\\n    if (_ethLots > 0) _sellETHLots(_ethLots);\\n    if (_wbtcLots > 0) _sellWBTCLots(_wbtcLots);\\n\\n    // Transfer all underlying back to pool\\n    token.transfer(address(pool), token.balanceOf(address(this)));\\n\\n    return true;\\n  }\\n\\n  function _sellETHLots(uint256 _eth) internal {\\n    hegicStakingETH.sell(_eth);\\n    emit ETHLotSold(_eth);\\n  }\\n\\n  function _sellWBTCLots(uint256 _wbtc) internal {\\n    hegicStakingWBTC.sell(_wbtc);\\n    emit WBTCLotSold(_wbtc);\\n  }\\n\\n  function _rebalanceLots(uint _ethLots, uint256 _wbtcLots) internal returns (bool) {\\n    (uint256 _ownedETHLots, uint256 _ownedWBTCLots) = balanceOfLots();\\n    require(\\n      _ethLots.add(_wbtcLots) == _ownedETHLots.add(_ownedWBTCLots) &&\\n      _ethLots != _ownedETHLots &&\\n      _wbtcLots != _ownedWBTCLots, \\n      'LotManagerV2LotsHandler::_rebalanceLots::not-rebalancing-lots'\\n    );\\n\\n    uint256 lotsDelta;\\n    if (_ethLots > _ownedETHLots) {\\n      lotsDelta = _ethLots.sub(_ownedETHLots);\\n      _sellWBTCLots(lotsDelta);\\n      _buyETHLots(lotsDelta);\\n    } else if (_wbtcLots > _ownedWBTCLots) {\\n      lotsDelta = _wbtcLots.sub(_ownedWBTCLots);\\n      _sellETHLots(lotsDelta);\\n      _buyWBTCLots(lotsDelta);\\n    }\\n\\n    emit LotsRebalanced(_ethLots, _wbtcLots);\\n    return true;\\n  }\\n}\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2RewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2RewardsHandler.sol';\\nimport '../../../interfaces/IWETH9.sol';\\n\\nimport './LotManagerV2ProtocolParameters.sol';\\nimport './LotManagerV2LotsHandler.sol';\\n\\nabstract\\ncontract LotManagerV2RewardsHandler is \\n  LotManagerV2ProtocolParameters, \\n  LotManagerV2LotsHandler,\\n  ILotManagerV2RewardsHandler {\\n\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  receive() external payable { }\\n\\n  function claimableRewards() public override view returns (uint256) {\\n    (uint256 _ethProfit, uint256 _wbtcProfit) = profitOfLots();\\n\\n    if (_wbtcProfit > 0) {\\n      _ethProfit = _ethProfit.add(_getAmountOut(_wbtcProfit, wbtc, weth));\\n    }\\n\\n    if (_ethProfit == 0) return 0;\\n\\n    return _getAmountOut(_ethProfit, weth, address(token));\\n  }\\n    \\n  function _claimRewards() internal returns (uint256 _totalRewards) {\\n    (uint256 _ethProfit, uint256 _wbtcProfit) = profitOfLots();\\n    require(_ethProfit > 0 || _wbtcProfit > 0, 'LotManagerV2RewardsHandler::_claimRewards::no-proft-available');\\n\\n    // Claim x888 Lot Rewards in WBTC if there is profit\\n    if (_wbtcProfit > 0) {\\n      hegicStakingWBTC.claimProfit();\\n\\n      if (_ethProfit == 0) {\\n        // Swaps WBTC for Hegic\\n        _swapWBTCForToken();\\n      } else {\\n        // Swaps WBTC for WETH\\n        _swapWBTCForWETH();\\n      }\\n    }\\n\\n    // If there is ETH profit\\n    if (_ethProfit > 0) {\\n      // Claim it\\n      hegicStakingETH.claimProfit();\\n\\n      // Swap eth for weth\\n      IWETH9(weth).deposit{value:payable(address(this)).balance}();\\n\\n      // Swap all WETH for Hegic\\n      _swapWETHForToken();\\n    }\\n\\n    // Gets amount of tokens as rewards\\n    _totalRewards = token.balanceOf(address(this));\\n\\n    // Take fee in HEGIC\\n    uint256 _fee = _totalRewards.mul(performanceFee).div(FEE_PRECISION).div(100);\\n\\n    // Deposit fee in Pool to get zHEGIC\\n    token.approve(address(pool), 0);\\n    token.approve(address(pool), _fee);\\n    pool.deposit(_fee);\\n\\n    // Transfer zHegic to feeRecipient\\n    IERC20 zToken = IERC20(pool.getZToken());\\n    zToken.transfer(address(zTreasury), zToken.balanceOf(address(this)));\\n    zTreasury.distributeEarnings();\\n\\n    // Transfer HEGIC _totalRewards minus _fee to pool\\n    token.transfer(address(pool), _totalRewards.sub(_fee));\\n\\n    emit RewardsClaimed(_totalRewards, _fee);\\n  }\\n\\n  function _swapWBTCForWETH() internal {\\n    uint256 _wbtcBalance = IERC20(wbtc).balanceOf(address(this));\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = wbtc;\\n    _path[1] = weth;\\n\\n    // Swap wbtc for weth\\n    _swap(_wbtcBalance, _path);\\n  }\\n\\n  function _swapWBTCForToken() internal {\\n    uint256 _wbtcBalance = IERC20(wbtc).balanceOf(address(this));\\n\\n    address[] memory _path = new address[](3);\\n    _path[0] = wbtc;\\n    _path[1] = weth;\\n    _path[2] = address(token);\\n\\n    // Swap wbtc for token\\n    _swap(_wbtcBalance, _path);\\n  }\\n\\n  function _swapWETHForToken() internal {\\n    uint256 _wethBalance = IERC20(weth).balanceOf(address(this));\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = weth;\\n    _path[1] = address(token);\\n\\n    // Swap weth for token\\n    _swap(_wethBalance, _path);\\n  }\\n\\n  function _swap(\\n    uint256 _amount,\\n    address[] memory _path\\n  ) internal {\\n    // Approve given erc20\\n    IERC20(_path[0]).safeApprove(uniswapV2, 0);\\n    IERC20(_path[0]).safeApprove(uniswapV2, _amount);\\n    // Swap it\\n    IUniswapV2Router02(uniswapV2).swapExactTokensForTokens(\\n      _amount,\\n      0,\\n      _path,\\n      address(this),\\n      now.add(1800)\\n    );\\n  }\\n\\n  function _getAmountOut(\\n    uint256 _amountIn,\\n    address _fromToken,\\n    address _toToken\\n  ) internal view returns (uint256) {\\n    IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(uniswapV2);\\n    IUniswapV2Factory uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\\n    IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(uniswapV2Factory.getPair(_fromToken, _toToken));\\n    (uint112 _reserve0, uint112 _reserve1,) = uniswapV2Pair.getReserves();\\n    (uint112 _reserveFromToken, uint112 _reserveToToken) = (_fromToken < _toToken) ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n    return uniswapV2Router.getAmountOut(_amountIn, _reserveFromToken, _reserveToToken);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2Migrable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../../../interfaces/LotManager/ILotManagerMetadata.sol';\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2ProtocolParameters.sol';\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2Migrable.sol';\\n\\nimport './LotManagerV2ProtocolParameters.sol';\\n\\nabstract\\ncontract LotManagerV2Migrable is \\n  LotManagerV2ProtocolParameters, \\n  ILotManagerV2Migrable {\\n  \\n  function _migrate(address _newLotManager) internal {\\n    require(_newLotManager != address(0) && ILotManagerMetadata(_newLotManager).isLotManager(), 'LotManagerV2Migrable::_migrate::not-a-lot-manager');\\n    require(address(ILotManagerV2ProtocolParameters(_newLotManager).pool()) == address(pool), 'LotManagerV2Migrable::_migrate::migrate-pool-discrepancy');\\n    hegicStakingETH.transfer(_newLotManager, hegicStakingETH.balanceOf(address(this)));\\n    hegicStakingWBTC.transfer(_newLotManager, hegicStakingWBTC.balanceOf(address(this)));\\n    token.transfer(address(pool), token.balanceOf(address(this)));\\n    emit LotManagerMigrated(_newLotManager);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2Unwindable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2Unwindable.sol';\\nimport './LotManagerV2LotsHandler.sol';\\n\\nabstract\\ncontract LotManagerV2Unwindable is \\n  LotManagerV2LotsHandler, \\n  ILotManagerV2Unwindable {\\n  \\n  function _unwind(uint256 _amount) internal returns (uint256 _total) {\\n    (uint256 _ethLots, uint256 _wbtcLots) = balanceOfLots();\\n    require (_ethLots > 0 || _wbtcLots > 0, 'LotManagerV2Unwindable::_unwind::no-lots');\\n\\n    bool areETHLotsUnlocked = hegicStakingETH.lastBoughtTimestamp(address(this)).add(hegicStakingETH.lockupPeriod()) <= block.timestamp;\\n    bool areWBTCLotsUnlocked = hegicStakingWBTC.lastBoughtTimestamp(address(this)).add(hegicStakingWBTC.lockupPeriod()) <= block.timestamp;\\n    require (areETHLotsUnlocked || areWBTCLotsUnlocked, 'LotManagerV2Unwindable::_unwind::no-unlocked-lots');\\n    _ethLots = areETHLotsUnlocked ? _ethLots : 0;\\n    _wbtcLots = areWBTCLotsUnlocked ? _wbtcLots : 0;\\n    uint256 _lotsToSell = _amount.div(LOT_PRICE).add(_amount.mod(LOT_PRICE) == 0 ? 0 : 1);\\n    require (_ethLots.add(_wbtcLots) >= _lotsToSell, 'LotManagerV2Unwindable::_unwind::not-enough-unlocked-lots');\\n\\n    uint256 _totalSold = 0;\\n\\n    if (_ethLots > 0) {\\n      _ethLots = _ethLots < _lotsToSell.sub(_totalSold) ? _ethLots : _lotsToSell.sub(_totalSold);\\n      _sellETHLots(_ethLots);\\n      _totalSold = _totalSold.add(_ethLots);\\n    }\\n\\n    if (_wbtcLots > 0) {\\n      _wbtcLots = _wbtcLots < _lotsToSell.sub(_totalSold) ? _wbtcLots : _lotsToSell.sub(_totalSold);\\n      _sellWBTCLots(_wbtcLots);\\n      _totalSold = _totalSold.add(_wbtcLots);\\n    }\\n\\n    require(_totalSold == _lotsToSell, 'LotManagerV2Unwindable::_unwind::not-enough-lots-sold');\\n\\n    _total = _lotsToSell.mul(LOT_PRICE);\\n\\n    require(_total >= _amount, 'LotManagerV2Unwindable::_unwind::not-enough-tokens-aquired');\\n\\n    token.transfer(address(pool), _total);\\n\\n    emit Unwound(_total);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2LotsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface ILotManagerV2LotsHandler {\\n  event ETHLotBought(uint256 amount);\\n  event WBTCLotBought(uint256 amount);\\n  event ETHLotSold(uint256 amount);\\n  event WBTCLotSold(uint256 amount);\\n  event LotsRebalanced(uint256 _ethLots, uint256 _wbtcLots);\\n  \\n  function balanceOfUnderlying() external view returns (uint256 _underlyingBalance);\\n  function balanceOfLots() external view returns (uint256 _ethLots, uint256 _wbtcLots);\\n  function profitOfLots() external view returns (uint256 _ethProfit, uint256 _wbtcProfit);\\n  function buyLots(uint256 _ethLots, uint256 _wbtcLots) external returns (bool);\\n  function sellLots(uint256 _ethLots, uint256 _wbtcLots) external returns (bool);\\n  function rebalanceLots(uint256 _ethLots, uint256 _wbtcLots) external returns (bool);\\n}\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2RewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface ILotManagerV2RewardsHandler {\\n  event RewardsClaimed(uint256 rewards, uint256 fees);\\n\\n  function claimRewards() external returns (uint256 _totalRewards);\\n  function claimableRewards() external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2Migrable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface ILotManagerV2Migrable {\\n  event LotManagerMigrated(address newLotManager);\\n\\n  function migrate(address newLotManager) external;\\n}\"\r\n    },\r\n    \"interfaces/LotManager/V2/ILotManagerV2Unwindable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\ninterface ILotManagerV2Unwindable {\\n  event Unwound(uint256 amount);\\n\\n  function unwind(uint256 _amount) external returns (uint256 _total);\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/LotManager/V2/LotManagerV2.1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../../../interfaces/LotManager/V2/ILotManagerV2.sol';\\nimport '../../../interfaces/IWETH9.sol';\\n\\nimport '../../Governable.sol';\\nimport '../../Manageable.sol';\\nimport '../../CollectableDust.sol';\\n\\nimport '../LotManagerMetadata.sol';\\nimport './LotManagerV2ProtocolParameters.sol';\\nimport './LotManagerV2LotsHandler.sol';\\nimport './LotManagerV2RewardsHandler.sol';\\nimport './LotManagerV2Migrable.sol';\\nimport './LotManagerV2Unwindable.sol';\\n\\ncontract LotManagerV2Dot1 is\\n  Governable,\\n  Manageable,\\n  CollectableDust,\\n  LotManagerMetadata,\\n  LotManagerV2ProtocolParameters,\\n  LotManagerV2LotsHandler,\\n  LotManagerV2RewardsHandler,\\n  LotManagerV2Migrable,\\n  LotManagerV2Unwindable,\\n  ILotManagerV2 {\\n\\n  constructor(\\n    address _governor,\\n    address _manager,\\n    uint256 _performanceFee,\\n    address _zTreasury,\\n    address _pool,\\n    address _weth,\\n    address _wbtc,\\n    address[2] memory _hegicStakings\\n  ) public\\n    Governable(_governor)\\n    Manageable(_manager)\\n    CollectableDust()\\n    LotManagerMetadata()\\n    LotManagerV2ProtocolParameters(\\n      _performanceFee,\\n      _zTreasury,\\n      _pool,\\n      _weth,\\n      _wbtc,\\n      _hegicStakings[0],\\n      _hegicStakings[1])\\n    LotManagerV2LotsHandler()\\n    LotManagerV2RewardsHandler()\\n    LotManagerV2Migrable()\\n    LotManagerV2Unwindable() {\\n    _addProtocolToken(_pool);\\n    _addProtocolToken(address(token));\\n    _addProtocolToken(_weth);\\n    _addProtocolToken(_wbtc);\\n    _addProtocolToken(_hegicStakings[0]);\\n    _addProtocolToken(_hegicStakings[1]);\\n  }\\n\\n  // Modifiers\\n  modifier onlyManagerOrPool {\\n    require(msg.sender == manager || msg.sender == address(pool), 'LotManagerV2::only-manager-or-pool');\\n    _;\\n  }\\n\\n  modifier onlyGovernorOrPool {\\n    require(msg.sender == governor || msg.sender == address(pool), 'LotManagerV2::only-governor-or-pool');\\n    _;\\n  }\\n\\n  modifier onlyPool {\\n    require(msg.sender == address(pool), 'LotManagerV2::only-pool');\\n    _;\\n  }\\n\\n  // Unwind\\n  function unwind(uint256 _amount) external override onlyPool returns (uint256 _total) {\\n    return _unwind(_amount);\\n  }\\n\\n  // Rewards handler\\n  function claimRewards() external override onlyManagerOrPool returns (uint256 _totalRewards) {\\n    return _claimRewards();\\n  }\\n\\n  // Lot Handler\\n  function buyLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyPool returns (bool) {\\n    return _buyLots(_ethLots, _wbtcLots);\\n  }\\n\\n  function sellLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyGovernor returns (bool) {\\n    return _sellLots(_ethLots, _wbtcLots);\\n  }\\n\\n  function rebalanceLots(uint256 _ethLots, uint256 _wbtcLots) external override onlyManagerOrPool returns (bool) {\\n    return _rebalanceLots(_ethLots, _wbtcLots);\\n  }\\n\\n  // Protocol Parameters\\n  function setPerformanceFee(uint256 _peformanceFee) external override onlyGovernor {\\n    _setPerformanceFee(_peformanceFee);\\n  }\\n\\n  function setZTreasury(address _zTreasury) external override onlyGovernor {\\n    _setZTreasury(_zTreasury);\\n  }\\n\\n  function setPool(address _pool) external override onlyGovernorOrPool {\\n    _removeProtocolToken(address(pool));\\n    _removeProtocolToken(address(token));\\n    _setPool(_pool);\\n    _addProtocolToken(_pool);\\n    _addProtocolToken(address(token));\\n  }\\n\\n  function setWETH(address _weth) external override onlyGovernor {\\n    _removeProtocolToken(weth);\\n    _addProtocolToken(_weth);\\n    _setWETH(_weth);\\n  }\\n\\n  function setWBTC(address _wbtc) external override onlyGovernor {\\n    _removeProtocolToken(wbtc);\\n    _addProtocolToken(_wbtc);\\n    _setWBTC(_wbtc);\\n  }\\n\\n  function setHegicStaking(\\n    address _hegicStakingETH, \\n    address _hegicStakingWBTC\\n  ) external override onlyGovernor {\\n    if (address(hegicStakingETH) != _hegicStakingETH) {\\n      _removeProtocolToken(address(hegicStakingETH));\\n      _addProtocolToken(_hegicStakingETH);\\n    }\\n    if (address(hegicStakingWBTC) != _hegicStakingWBTC) {\\n      _removeProtocolToken(address(hegicStakingWBTC));\\n      _addProtocolToken(_hegicStakingWBTC);\\n    }\\n    _setHegicStaking(\\n      _hegicStakingETH,\\n      _hegicStakingWBTC\\n    );\\n  }\\n\\n  // Migrable\\n  function migrate(address _newLotManager) external override onlyGovernor {\\n    _migrate(_newLotManager);\\n  }\\n\\n  // Governable\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Manageable\\n  function setPendingManager(address _pendingManager) external override onlyManager {\\n    _setPendingManager(_pendingManager);\\n  }\\n\\n  function acceptManager() external override onlyPendingManager {\\n    _acceptManager();\\n  }\\n\\n  // Collectable Dust\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/zHEGIC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport '../interfaces/HegicPool/IHegicPoolMetadata.sol';\\nimport './Governable.sol';\\n\\ncontract zHEGIC is ERC20, Governable {\\n\\n  IHegicPoolMetadata public pool;\\n\\n  constructor() public\\n    ERC20('zHEGIC', 'zHEGIC')\\n    Governable(msg.sender) {\\n  }\\n\\n  modifier onlyPool {\\n    require(msg.sender == address(pool), 'zHEGIC/only-pool');\\n    _;\\n  }\\n\\n  modifier onlyPoolOrGovernor {\\n    require(msg.sender == address(pool) || msg.sender == governor, 'zHEGIC/only-pool-or-governor');\\n    _;\\n  }\\n\\n  function setPool(address _newPool) external onlyPoolOrGovernor {\\n    require(IHegicPoolMetadata(_newPool).isHegicPool(), 'zHEGIC/not-setting-a-hegic-pool');\\n    pool = IHegicPoolMetadata(_newPool);\\n  }\\n\\n  function mint(address account, uint256 amount) external onlyPool {\\n    _mint(account, amount);\\n  }\\n\\n  function burn(address account, uint256 amount) external onlyPool {\\n    _burn(account, amount);\\n  }\\n\\n  // Governable\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"_hegicStakings\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHLotBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHLotSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hegicStakingETH\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_hegicStakingWBTc\",\"type\":\"address\"}],\"name\":\"HegicStakingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLotManager\",\"type\":\"address\"}],\"name\":\"LotManagerMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethLots\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wbtcLots\",\"type\":\"uint256\"}],\"name\":\"LotsRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ManagerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingManager\",\"type\":\"address\"}],\"name\":\"PendingManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"PoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unwound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WBTCLotBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WBTCLotSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"}],\"name\":\"WBTCSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"WETHSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zTreasury\",\"type\":\"address\"}],\"name\":\"ZTreasurySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfLots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethLots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcLots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethLots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcLots\",\"type\":\"uint256\"}],\"name\":\"buyLots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicStakingETH\",\"outputs\":[{\"internalType\":\"contract IHegicStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicStakingWBTC\",\"outputs\":[{\"internalType\":\"contract IHegicStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLotManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLotManager\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IHegicPoolV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitOfLots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethLots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcLots\",\"type\":\"uint256\"}],\"name\":\"rebalanceLots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethLots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wbtcLots\",\"type\":\"uint256\"}],\"name\":\"sellLots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hegicStakingETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicStakingWBTC\",\"type\":\"address\"}],\"name\":\"setHegicStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingManager\",\"type\":\"address\"}],\"name\":\"setPendingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_peformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"}],\"name\":\"setWBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zTreasury\",\"type\":\"address\"}],\"name\":\"setZTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zTreasury\",\"outputs\":[{\"internalType\":\"contract IZTreasuryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LotManagerV2Dot1","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000752fbdcbb0242bdef2d0d6825623679c47eb7b4f0000000000000000000000002cddcbc4305ba08a97a0dde1ab9f07a6639f124e00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000004c45fc89e3ac5a4eef16db96186150951e74dde60000000000000000000000009e4e091fc8921fe3575eab1c9a6446114f3b5ef2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000001ef61e3e5676ec182eed6f052f8920fd49c7f69a000000000000000000000000840a1ae46b7364855206eb5b7286ab7e207e515b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}