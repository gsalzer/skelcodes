{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\n\r\n// File: contracts/VaultParameters.sol\r\npragma solidity ^0.7.1;\r\n\r\n\r\n/**\r\n * @title Auth\r\n * @author Unit Protocol: Ivan Zakharov (@34x4p08)\r\n * @dev Manages USDP's system access\r\n **/\r\ncontract Auth {\r\n\r\n    // address of the the contract with vault parameters\r\n    VaultParameters public vaultParameters;\r\n\r\n    constructor(address _parameters) public {\r\n        vaultParameters = VaultParameters(_parameters);\r\n    }\r\n\r\n    // ensures tx's sender is a manager\r\n    modifier onlyManager() {\r\n        require(vaultParameters.isManager(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is able to modify the Vault\r\n    modifier hasVaultAccess() {\r\n        require(vaultParameters.canModifyVault(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is the Vault\r\n    modifier onlyVault() {\r\n        require(msg.sender == vaultParameters.vault(), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VaultParameters\r\n * @author Unit Protocol: Ivan Zakharov (@34x4p08)\r\n **/\r\ncontract VaultParameters is Auth {\r\n\r\n    // map token to stability fee percentage; 3 decimals\r\n    mapping(address => uint) public stabilityFee;\r\n\r\n    // map token to liquidation fee percentage, 0 decimals\r\n    mapping(address => uint) public liquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // permissions to modify the Vault\r\n    mapping(address => bool) public canModifyVault;\r\n\r\n    // managers\r\n    mapping(address => bool) public isManager;\r\n\r\n    // enabled oracle types\r\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\r\n\r\n    // address of the Vault\r\n    address payable public vault;\r\n\r\n    // The foundation address\r\n    address public foundation;\r\n\r\n    /**\r\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\r\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\r\n     * hashed with Keccak-256.\r\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\r\n    **/\r\n    constructor(address payable _vault, address _foundation) public Auth(address(this)) {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        isManager[msg.sender] = true;\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status of any address\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setManager(address who, bool permit) external onlyManager {\r\n        isManager[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the foundation address\r\n     * @param newFoundation The new foundation address\r\n     **/\r\n    function setFoundation(address newFoundation) external onlyManager {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param oracles The enables oracle types\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        setTokenDebtLimit(asset, usdpLimit);\r\n        for (uint i=0; i < oracles.length; i++) {\r\n            setOracleType(oracles[i], asset, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for an address to modify the Vault\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setVaultAccess(address who, bool permit) external onlyManager {\r\n        canModifyVault[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The stability fee percentage (3 decimals)\r\n     **/\r\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\r\n        stabilityFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation fee percentage (0 decimals)\r\n     **/\r\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        liquidationFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _type The type of the oracle\r\n     * @param asset The address of the main collateral token\r\n     * @param enabled The control flag\r\n     **/\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limit for a specific collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param limit The limit number\r\n     **/\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canModifyVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracleTypeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFoundation\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOracleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setStabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setTokenDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"setVaultAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VaultParameters","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b1cff81b9305166ff1efc49a129ad2afcd7bcf190000000000000000000000009cf0389322fedd2a3dceacac0c3108c8151615a3","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21508b615a9559702f309313c1a1539541514c902b032b41a74177c093a5ca88"}]}