{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 value) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IFlashReceiver {\r\n    function receiveFlash(\r\n        bytes32 _id,\r\n        uint256 _amountIn,\r\n        uint256 _expireAfter,\r\n        uint256 _mintedAmount,\r\n        address _staker,\r\n        bytes calldata _data\r\n    ) external returns (uint256);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IFlashProtocol {\r\n    function stake(\r\n        uint256 _amountIn,\r\n        uint256 _days,\r\n        address _receiver,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns (\r\n            uint256 mintedAmount,\r\n            uint256 matchedAmount,\r\n            bytes32 id\r\n        );\r\n\r\n    function unstake(bytes32 _id)\r\n        external\r\n        returns (uint256 withdrawAmount);\r\n\r\n    function getFPY(uint256 _amountIn) external view returns (uint256);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\r\n// Modified to include only the essentials\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"MATH:: ADD_OVERFLOW\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"MATH:: SUB_UNDERFLOW\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MATH:: MUL_OVERFLOW\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"MATH:: DIVISION_BY_ZERO\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\r\n        );\r\n        return address(uint256(_data));\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IPool {\r\n    function initialize(address _token) external;\r\n\r\n    function stakeWithFeeRewardDistribution(\r\n        uint256 _amountIn,\r\n        address _staker,\r\n        uint256 _expectedOutput\r\n    ) external returns (uint256 result);\r\n\r\n    function addLiquidity(\r\n        uint256 _amountFLASH,\r\n        uint256 _amountALT,\r\n        uint256 _amountFLASHMin,\r\n        uint256 _amountALTMin,\r\n        address _maker\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function removeLiquidity(address _maker) external returns (uint256, uint256);\r\n\r\n    function swapWithFeeRewardDistribution(\r\n        uint256 _amountIn,\r\n        address _staker,\r\n        uint256 _expectedOutput\r\n    ) external returns (uint256 result);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n// Lightweight token modelled after UNI-LP:\r\n// https://github.com/Uniswap/uniswap-v2-core/blob/v1.0.1/contracts/UniswapV2ERC20.sol\r\n// Adds:\r\n//   - An exposed `mint()` with minting role\r\n//   - An exposed `burn()`\r\n//   - ERC-3009 (`transferWithAuthorization()`)\r\n//   - flashMint() - allows to flashMint an arbitrary amount of FLASH, with the\r\n//     condition that it is burned before the end of the transaction.\r\ncontract PoolERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // bytes32 private constant EIP712DOMAIN_HASH =\r\n    // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n    bytes32 private constant EIP712DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\r\n    // bytes32 private constant NAME_HASH = keccak256(\"FLASH-ALT-LP Token\")\r\n    bytes32 private constant NAME_HASH = 0xfdde3a7807889787f51ab17062704a0d81341ba7debe5a9773b58a1b5e5f422c;\r\n\r\n    // bytes32 private constant VERSION_HASH = keccak256(\"1\")\r\n    bytes32 private constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\r\n\r\n    // bytes32 public constant PERMIT_TYPEHASH =\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    // bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\r\n    // keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\");\r\n    bytes32\r\n        public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\r\n\r\n    string public constant name = \"FLASH-ALT-LP Token\";\r\n    string public constant symbol = \"FLASH-ALT-LP\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public override totalSupply;\r\n\r\n    address public minter;\r\n\r\n    mapping(address => uint256) public override balanceOf;\r\n    mapping(address => mapping(address => uint256)) public override allowance;\r\n\r\n    // ERC-2612, ERC-3009 state\r\n    mapping(address => uint256) public nonces;\r\n    mapping(address => mapping(bytes32 => bool)) public authorizationState;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n\r\n    function _validateSignedData(\r\n        address signer,\r\n        bytes32 encodeData,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal view {\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), encodeData));\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\r\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \"FLASH-ALT-LP Token:: INVALID_SIGNATURE\");\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        require(to != address(0), \"FLASH-ALT-LP Token:: RECEIVER_IS_TOKEN_OR_ZERO\");\r\n        // Balance is implicitly checked with SafeMath's underflow protection\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function getChainId() public pure returns (uint256 chainId) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n\r\n    function getDomainSeparator() public view returns (bytes32) {\r\n        return keccak256(abi.encode(EIP712DOMAIN_HASH, NAME_HASH, VERSION_HASH, getChainId(), address(this)));\r\n    }\r\n\r\n    function burn(uint256 value) external override returns (bool) {\r\n        _burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override returns (bool) {\r\n        uint256 fromAllowance = allowance[from][msg.sender];\r\n        if (fromAllowance != uint256(-1)) {\r\n            // Allowance is implicitly checked with SafeMath's underflow protection\r\n            allowance[from][msg.sender] = fromAllowance.sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"FLASH-ALT-LP Token:: AUTH_EXPIRED\");\r\n\r\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner], deadline));\r\n        nonces[owner] = nonces[owner].add(1);\r\n        _validateSignedData(owner, encodeData, v, r, s);\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(block.timestamp > validAfter, \"FLASH-ALT-LP Token:: AUTH_NOT_YET_VALID\");\r\n        require(block.timestamp < validBefore, \"FLASH-ALT-LP Token:: AUTH_EXPIRED\");\r\n        require(!authorizationState[from][nonce], \"FLASH-ALT-LP Token:: AUTH_ALREADY_USED\");\r\n\r\n        bytes32 encodeData = keccak256(\r\n            abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce)\r\n        );\r\n        _validateSignedData(from, encodeData, v, r, s);\r\n\r\n        authorizationState[from][nonce] = true;\r\n        emit AuthorizationUsed(from, nonce);\r\n\r\n        _transfer(from, to, value);\r\n    }\r\n}\r\n\r\n// File: ../../../../media/shakeib98/xio-flashapp-contracts/contracts/pool/contracts/Pool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Pool is PoolERC20, IPool {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    address public constant FLASH_TOKEN = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;\r\n    address public constant FLASH_PROTOCOL = 0xEc02f813404656E2A2AEd5BaeEd41D785324E8D0;\r\n\r\n    uint256 public reserveFlashAmount;\r\n    uint256 public reserveAltAmount;\r\n    uint256 private unlocked = 1;\r\n\r\n    address public token;\r\n    address public factory;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Pool: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == factory, \"Pool:: ONLY_FACTORY\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Pool:: TRANSFER_FAILED\");\r\n    }\r\n\r\n    function initialize(address _token) public override onlyFactory {\r\n        token = _token;\r\n    }\r\n\r\n    function swapWithFeeRewardDistribution(\r\n        uint256 _amountIn,\r\n        address _staker,\r\n        uint256 _expectedOutput\r\n    ) public override lock onlyFactory returns (uint256 result) {\r\n        result = getAPYSwap(_amountIn);\r\n        require(_expectedOutput <= result, \"Pool:: EXPECTED_IS_GREATER\");\r\n        calcNewReserveSwap(_amountIn, result);\r\n        _safeTransfer(FLASH_TOKEN, _staker, result);\r\n    }\r\n\r\n    function stakeWithFeeRewardDistribution(\r\n        uint256 _amountIn,\r\n        address _staker,\r\n        uint256 _expectedOutput\r\n    ) public override lock onlyFactory returns (uint256 result) {\r\n        result = getAPYStake(_amountIn);\r\n        require(_expectedOutput <= result, \"Pool:: EXPECTED_IS_GREATER\");\r\n        calcNewReserveStake(_amountIn, result);\r\n        _safeTransfer(token, _staker, result);\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 _amountFLASH,\r\n        uint256 _amountALT,\r\n        uint256 _amountFLASHMin,\r\n        uint256 _amountALTMin,\r\n        address _maker\r\n    )\r\n        public\r\n        override\r\n        onlyFactory\r\n        returns (\r\n            uint256 amountFLASH,\r\n            uint256 amountALT,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        (amountFLASH, amountALT) = _addLiquidity(_amountFLASH, _amountALT, _amountFLASHMin, _amountALTMin);\r\n        liquidity = mintLiquidityTokens(_maker, amountFLASH, amountALT);\r\n        calcNewReserveAddLiquidity(amountFLASH, amountALT);\r\n    }\r\n\r\n    function removeLiquidity(address _maker)\r\n        public\r\n        override\r\n        onlyFactory\r\n        returns (uint256 amountFLASH, uint256 amountALT)\r\n    {\r\n        (amountFLASH, amountALT) = burn(_maker);\r\n    }\r\n\r\n    function getAPYStake(uint256 _amountIn) public view returns (uint256 result) {\r\n        uint256 amountInWithFee = _amountIn.mul(getLPFee());\r\n        uint256 num = amountInWithFee.mul(reserveAltAmount);\r\n        uint256 den = (reserveFlashAmount.mul(1000)).add(amountInWithFee);\r\n        result = num.div(den);\r\n    }\r\n\r\n    function getAPYSwap(uint256 _amountIn) public view returns (uint256 result) {\r\n        uint256 amountInWithFee = _amountIn.mul(getLPFee());\r\n        uint256 num = amountInWithFee.mul(reserveFlashAmount);\r\n        uint256 den = (reserveAltAmount.mul(1000)).add(amountInWithFee);\r\n        result = num.div(den);\r\n    }\r\n\r\n    function getLPFee() public view returns (uint256) {\r\n        uint256 fpy = IFlashProtocol(FLASH_PROTOCOL).getFPY(0);\r\n        return uint256(1000).sub(fpy.div(5e15));\r\n    }\r\n\r\n    function quote(\r\n        uint256 _amountA,\r\n        uint256 _reserveA,\r\n        uint256 _reserveB\r\n    ) public pure returns (uint256 amountB) {\r\n        require(_amountA > 0, \"Pool:: INSUFFICIENT_AMOUNT\");\r\n        require(_reserveA > 0 && _reserveB > 0, \"Pool:: INSUFFICIENT_LIQUIDITY\");\r\n        amountB = _amountA.mul(_reserveB).div(_reserveA);\r\n    }\r\n\r\n    function burn(address to) private lock returns (uint256 amountFLASH, uint256 amountALT) {\r\n        uint256 balanceFLASH = IERC20(FLASH_TOKEN).balanceOf(address(this));\r\n        uint256 balanceALT = IERC20(token).balanceOf(address(this));\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        amountFLASH = liquidity.mul(balanceFLASH) / totalSupply;\r\n        amountALT = liquidity.mul(balanceALT) / totalSupply;\r\n\r\n        require(amountFLASH > 0 && amountALT > 0, \"Pool:: INSUFFICIENT_LIQUIDITY_BURNED\");\r\n\r\n        _burn(address(this), liquidity);\r\n\r\n        _safeTransfer(FLASH_TOKEN, to, amountFLASH);\r\n        _safeTransfer(token, to, amountALT);\r\n\r\n        balanceFLASH = balanceFLASH.sub(IERC20(FLASH_TOKEN).balanceOf(address(this)));\r\n        balanceALT = balanceALT.sub(IERC20(token).balanceOf(address(this)));\r\n\r\n        calcNewReserveRemoveLiquidity(balanceFLASH, balanceALT);\r\n    }\r\n\r\n    function _addLiquidity(\r\n        uint256 _amountFLASH,\r\n        uint256 _amountALT,\r\n        uint256 _amountFLASHMin,\r\n        uint256 _amountALTMin\r\n    ) private view returns (uint256 amountFLASH, uint256 amountALT) {\r\n        if (reserveAltAmount == 0 && reserveFlashAmount == 0) {\r\n            (amountFLASH, amountALT) = (_amountFLASH, _amountALT);\r\n        } else {\r\n            uint256 amountALTQuote = quote(_amountFLASH, reserveFlashAmount, reserveAltAmount);\r\n            if (amountALTQuote <= _amountALT) {\r\n                require(amountALTQuote >= _amountALTMin, \"Pool:: INSUFFICIENT_B_AMOUNT\");\r\n                (amountFLASH, amountALT) = (_amountFLASH, amountALTQuote);\r\n            } else {\r\n                uint256 amountFLASHQuote = quote(_amountALT, reserveAltAmount, reserveFlashAmount);\r\n                require(\r\n                    (amountFLASHQuote <= _amountFLASH) && (amountFLASHQuote >= _amountFLASHMin),\r\n                    \"Pool:: INSUFFICIENT_A_AMOUNT\"\r\n                );\r\n                (amountFLASH, amountALT) = (amountFLASHQuote, _amountALT);\r\n            }\r\n        }\r\n    }\r\n\r\n    function mintLiquidityTokens(\r\n        address _to,\r\n        uint256 _flashAmount,\r\n        uint256 _altAmount\r\n    ) private returns (uint256 liquidity) {\r\n        if (totalSupply == 0) {\r\n            liquidity = SafeMath.sqrt(_flashAmount.mul(_altAmount)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n        } else {\r\n            liquidity = SafeMath.min(\r\n                _flashAmount.mul(totalSupply) / reserveFlashAmount,\r\n                _altAmount.mul(totalSupply) / reserveAltAmount\r\n            );\r\n        }\r\n        require(liquidity > 0, \"Pool:: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(_to, liquidity);\r\n    }\r\n\r\n    function calcNewReserveStake(uint256 _amountIn, uint256 _amountOut) private {\r\n        reserveFlashAmount = reserveFlashAmount.add(_amountIn);\r\n        reserveAltAmount = reserveAltAmount.sub(_amountOut);\r\n    }\r\n\r\n    function calcNewReserveSwap(uint256 _amountIn, uint256 _amountOut) private {\r\n        reserveFlashAmount = reserveFlashAmount.sub(_amountOut);\r\n        reserveAltAmount = reserveAltAmount.add(_amountIn);\r\n    }\r\n\r\n    function calcNewReserveAddLiquidity(uint256 _amountFLASH, uint256 _amountALT) private {\r\n        reserveFlashAmount = reserveFlashAmount.add(_amountFLASH);\r\n        reserveAltAmount = reserveAltAmount.add(_amountALT);\r\n    }\r\n\r\n    function calcNewReserveRemoveLiquidity(uint256 _amountFLASH, uint256 _amountALT) private {\r\n        reserveFlashAmount = reserveFlashAmount.sub(_amountFLASH);\r\n        reserveAltAmount = reserveAltAmount.sub(_amountALT);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FlashApp is IFlashReceiver {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant FLASH_TOKEN = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;\r\n    address public constant FLASH_PROTOCOL = 0xEc02f813404656E2A2AEd5BaeEd41D785324E8D0;\r\n\r\n    mapping(bytes32 => uint256) public stakerReward;\r\n    mapping(address => address) public pools; // token -> pools\r\n\r\n    event PoolCreated(address _pool, address _token);\r\n\r\n    event Staked(bytes32 _id, uint256 _rewardAmount, address _pool);\r\n\r\n    event LiquidityAdded(address _pool, uint256 _amountFLASH, uint256 _amountALT, uint256 _liquidity, address _sender);\r\n\r\n    event LiquidityRemoved(\r\n        address _pool,\r\n        uint256 _amountFLASH,\r\n        uint256 _amountALT,\r\n        uint256 _liquidity,\r\n        address _sender\r\n    );\r\n\r\n    event Swapped(address _sender, uint256 _swapAmount, uint256 _flashReceived, address _pool);\r\n\r\n    modifier onlyProtocol() {\r\n        require(msg.sender == FLASH_PROTOCOL, \"FlashApp:: ONLY_PROTOCOL\");\r\n        _;\r\n    }\r\n\r\n    function createPool(address _token) external returns (address poolAddress) {\r\n        require(_token != address(0), \"FlashApp:: INVALID_TOKEN_ADDRESS\");\r\n        require(pools[_token] == address(0), \"FlashApp:: POOL_ALREADY_EXISTS\");\r\n        bytes memory bytecode = type(Pool).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(block.timestamp, msg.sender));\r\n        poolAddress = Create2.deploy(0, salt, bytecode);\r\n        pools[_token] = poolAddress;\r\n        IPool(poolAddress).initialize(_token);\r\n        emit PoolCreated(poolAddress, _token);\r\n    }\r\n\r\n    function receiveFlash(\r\n        bytes32 _id,\r\n        uint256 _amountIn, //unused\r\n        uint256 _expireAfter, //unused\r\n        uint256 _mintedAmount,\r\n        address _staker,\r\n        bytes calldata _data\r\n    ) external override onlyProtocol returns (uint256) {\r\n        (address token, uint256 expectedOutput) = abi.decode(_data, (address, uint256));\r\n        address pool = pools[token];\r\n        IERC20(FLASH_TOKEN).transfer(pool, _mintedAmount);\r\n        uint256 reward = IPool(pool).stakeWithFeeRewardDistribution(_mintedAmount, _staker, expectedOutput);\r\n        stakerReward[_id] = reward;\r\n        emit Staked(_id, reward, pool);\r\n    }\r\n\r\n    function unstake(bytes32[] memory _expiredIds) public {\r\n        for (uint256 i = 0; i < _expiredIds.length; i = i.add(1)) {\r\n            IFlashProtocol(FLASH_PROTOCOL).unstake(_expiredIds[i]);\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        uint256 _altQuantity,\r\n        address _token,\r\n        uint256 _expectedOutput\r\n    ) public returns (uint256 result) {\r\n        address user = msg.sender;\r\n        address pool = pools[_token];\r\n\r\n        require(pool != address(0), \"FlashApp:: POOL_DOESNT_EXIST\");\r\n        require(_altQuantity > 0, \"FlashApp:: INVALID_AMOUNT\");\r\n\r\n        IERC20(_token).transferFrom(user, address(this), _altQuantity);\r\n        IERC20(_token).transfer(pool, _altQuantity);\r\n\r\n        result = IPool(pool).swapWithFeeRewardDistribution(_altQuantity, user, _expectedOutput);\r\n\r\n        emit Swapped(user, _altQuantity, result, pool);\r\n    }\r\n\r\n    function addLiquidityInPool(\r\n        uint256 _amountFLASH,\r\n        uint256 _amountALT,\r\n        uint256 _amountFLASHMin,\r\n        uint256 _amountALTMin,\r\n        address _token\r\n    ) public {\r\n        address maker = msg.sender;\r\n        address pool = pools[_token];\r\n\r\n        require(pool != address(0), \"FlashApp:: POOL_DOESNT_EXIST\");\r\n        require(_amountFLASH > 0 && _amountALT > 0, \"FlashApp:: INVALID_AMOUNT\");\r\n\r\n        (uint256 amountFLASH, uint256 amountALT, uint256 liquidity) = IPool(pool).addLiquidity(\r\n            _amountFLASH,\r\n            _amountALT,\r\n            _amountFLASHMin,\r\n            _amountALTMin,\r\n            maker\r\n        );\r\n\r\n        IERC20(FLASH_TOKEN).transferFrom(maker, address(this), amountFLASH);\r\n        IERC20(FLASH_TOKEN).transfer(pool, amountFLASH);\r\n        IERC20(_token).transferFrom(maker, address(this), amountALT);\r\n        IERC20(_token).transfer(pool, amountALT);\r\n\r\n        emit LiquidityAdded(pool, amountFLASH, amountALT, liquidity, maker);\r\n    }\r\n\r\n    function removeLiquidityInPool(uint256 _liquidity, address _token) public {\r\n        address maker = msg.sender;\r\n\r\n        address pool = pools[_token];\r\n\r\n        require(pool != address(0), \"FlashApp:: POOL_DOESNT_EXIST\");\r\n\r\n        IERC20(pool).transferFrom(maker, address(this), _liquidity);\r\n        IERC20(pool).transfer(pool, _liquidity);\r\n\r\n        (uint256 amountFLASH, uint256 amountALT) = IPool(pool).removeLiquidity(maker);\r\n\r\n        emit LiquidityRemoved(pool, amountFLASH, amountALT, _liquidity, maker);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountFLASH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountALT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountFLASH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountALT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_flashReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_PROTOCOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountFLASH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountALT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFLASHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountALTMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addLiquidityInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expireAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveFlash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeLiquidityInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_altQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expectedOutput\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_expiredIds\",\"type\":\"bytes32[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlashApp","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d839cc9fb5b62ee208926dbb39706d7e64f35d486cdf2211120671def7eb971"}]}