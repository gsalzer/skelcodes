{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/* \r\n * @author Patrick McCorry & Chris Buckland (ITX)\r\n * @title Payment Deposit contract\r\n * @notice Handles customers deposits and only the owner/child contracts can issue withdraws. \r\n */\r\ncontract PaymentDeposit is Ownable {\r\n\r\n    // Every depositor has a unique identifier. Helps with off-chain tracking. \r\n    mapping(address => uint) public depositors;\r\n    uint public uniqueDepositors; \r\n\r\n    event Deposit(address indexed sender, uint amount, uint indexed index);\r\n    event Withdraw(address indexed depositor, address indexed recipient, uint amount);\r\n\r\n    /**\r\n     * @param _recipient Associate funds with this address. \r\n     * Supply a deposit for a specified recipient.\r\n     * Caution: The recipient must be an externally owned account as all jobs sent to \r\n     * any.sender must be signed and associated with a positive balance in this contract. \r\n     */\r\n    function depositFor(address _recipient) public payable { \r\n        require(msg.value > 0, \"No value provided to depositFor.\");\r\n        uint index = getDepositorIndex(_recipient);\r\n        emit Deposit(_recipient, msg.value, index);\r\n    }\r\n\r\n    /** \r\n     * @param _depositor Depositor address\r\n     * Sets the depositors index if necessary.\r\n     */\r\n    function getDepositorIndex(address _depositor) internal returns(uint) {\r\n        if(depositors[_depositor] == 0) {\r\n            uniqueDepositors = uniqueDepositors + 1;\r\n            depositors[_depositor] = uniqueDepositors;\r\n        }\r\n\r\n        return depositors[_depositor];\r\n    }\r\n\r\n    /*\r\n     * It is only intended for external users who want to deposit via a wallet.\r\n     */ \r\n    receive() external payable {\r\n        require(msg.value > 0, \"No value provided to fallback.\");\r\n        require(tx.origin == msg.sender, \"Only EOA can deposit directly.\");\r\n        uint index = getDepositorIndex(msg.sender);\r\n        emit Deposit(msg.sender, msg.value, index);\r\n    }\r\n\r\n    /**\r\n     * Internal function for sending funds. \r\n     */\r\n    function withdraw(address payable _depositor, address payable _recipient, uint _amount) internal {\r\n        _recipient.transfer(_amount);\r\n        emit Withdraw(_depositor, _recipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _depositor Funds being withdrawn from (e.g. deducts their balance). \r\n     * @param _recipient Receiver of the funds\r\n     * @param _amount Funds to send\r\n     * Move funds out of the contract\r\n     * Depositor is the OWNER of the funds being withdrawn. \r\n     * Recipient is the RECEIVER of the funds. \r\n     */\r\n    function withdrawFor(address payable _depositor, address payable _recipient, uint _amount) public onlyOwner {\r\n        withdraw(_depositor, _recipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @param _recipient Address that receives funds in the new PaymentDeposit\r\n     * @param _amount Funds to send\r\n     * @param _otherDeposit New Payment Deposit contract\r\n     * Use admin privileges to migrate a user's deposits to another deposit contract\r\n     */\r\n    function migrate(address payable _recipient, uint _amount, PaymentDeposit _otherDeposit) public onlyOwner {\r\n        require(address(this).balance >= _amount, \"Not enough balance to migrate.\");\r\n        require(address(_otherDeposit) != address(this), \"Cannot migrate to same contract.\");\r\n        _otherDeposit.depositFor.value(_amount)(_recipient); // We assume an upgraded contract has this interface.\r\n        emit Withdraw(address(this), _recipient, _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @author Patrick McCorry & Chris Buckland (ITX)\r\n * @title Relayer Manager contract\r\n * @notice  Manage relayers and issue topups \r\n */\r\ncontract RelayerManager is PaymentDeposit {\r\n\r\n    mapping(address => bool) public relayers;\r\n\r\n    event RelayerInstalled(address relayer);\r\n    event RelayerUninstalled(address relayer);\r\n\r\n    modifier onlyRelayer {\r\n        require(relayers[msg.sender], \"Only relayer can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /** \r\n     * @param newOwner Owner of contract\r\n     * @dev Owner cannot be a relayer or this contract.\r\n     */\r\n    function transferOwnership(address newOwner) public override onlyOwner { \r\n        require(!relayers[newOwner], \"Relayer cannot be an owner.\");\r\n        require(newOwner != address(this), \"Contract cannot own itself.\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @param _relayer New relayer address\r\n     * @dev Only the owner can install a new relayer\r\n     */\r\n    function installRelayer(address _relayer) onlyOwner public {\r\n        require(!relayers[_relayer], \"Relayer is already installed.\");\r\n        require(_relayer != address(this), \"The relay contract cannot be installed as a relayer.\");\r\n        require(_relayer != owner(), \"Avoid mixing relayer and owner roles.\");\r\n\r\n        relayers[_relayer] = true;\r\n        emit RelayerInstalled(_relayer);\r\n    }\r\n\r\n    /** \r\n     * @param _relayer New relayer address\r\n     * @dev Only the owner can uninstall a new relayer\r\n     */ \r\n    function uninstallRelayer(address _relayer) onlyOwner public {\r\n        require(relayers[_relayer], \"Relayer must be installed.\");\r\n\r\n        relayers[_relayer] = false;\r\n        emit RelayerUninstalled(_relayer);\r\n    }\r\n\r\n\r\n    /** \r\n     * @param _recipient Receiver of the topup\r\n     * @param _maxBalance Maximum topup to send \r\n     * Called by a relayer to perform a relative top up.\r\n     * Only sends enough funds for relayer to reach max balance. \r\n     */  \r\n    function relativeTopUp(address payable _recipient, uint256 _maxBalance) public onlyRelayer {\r\n        require(relayers[_recipient], \"Recipient must be a relayer to receive a top up.\");\r\n        uint256 relayerBalance = address(_recipient).balance;\r\n\r\n        // The contract or relayer must be pre-collateralized with the\r\n        // max balance in advance. So if maxBalance = 3 ETH, then a new relayer\r\n        // should have a balance at or greater than 3 ETH.\r\n        if (_maxBalance > relayerBalance) {\r\n            uint256 toTopUp = _maxBalance - relayerBalance;\r\n            withdraw(msg.sender, _recipient, toTopUp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param _recipient Receiver of the topup\r\n     * @param _topUp Funds to send\r\n     * Called by a relayer to perform an \"absolute\" top up.\r\n     * It can exceed the expected max balance of a relayer.\r\n     */ \r\n    function absoluteTopUp(address payable _recipient, uint256 _topUp) public onlyRelayer {\r\n        require(relayers[_recipient], \"Recipient must be a relayer to receive an emergency topup.\");\r\n        withdraw(msg.sender, _recipient, _topUp);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/** \r\n * @author Patrick McCorry & Chris Buckland (ITX)\r\n * @title Relay contract\r\n * @notice Handles relaying transactions, managing the relayers & user deposits. \r\n * @dev Two-stage deployment required. Deploy via CREATE2 and INIT() in the same transaction.\r\n */\r\ncontract InstantRefundRelay is RelayerManager {\r\n    using SafeMath for uint256;\r\n\r\n    event RelayExecuted(bytes32 indexed relayTxId, bool success, address indexed to, uint gasUsed, uint gasPrice);\r\n    event OutOfCoins();\r\n\r\n    // @dev The relay transaction\r\n    struct RelayTx {\r\n        bytes32 id; // Off-chain identifier to track transaction & payment.\r\n        address to; // Address for external contract.\r\n        bytes data; // Call data that we need to send. Includes function call name, etc.\r\n        uint gasLimit; // How much gas is allocated to this function call?\r\n    }\r\n    \r\n    /** \r\n     * @param _relayTx A relay tx containing the job to execute\r\n     * @param _gasRefund Gas amount to refund\r\n     * @dev Only authorised relayer can execute relay jobs and they are refunded gas at the end of the call.\r\n     *     Critically, if the relay job fails, we can simply catch exception and continue with the refund. \r\n     */\r\n    function execute(RelayTx calldata _relayTx, uint _gasRefund) external {\r\n        uint gasStarted = gasleft();\r\n\r\n        // The msg.sender check protects against two problems:\r\n        // - Replay attacks across chains (chainid in transaction)\r\n        // - Re-entrancy attacks back into .execute() (signer required)\r\n        // - Stops external relayers spending the contract balance without any.sender authorisation\r\n        require(relayers[msg.sender], \"Relayer must call this function.\");\r\n\r\n        // In the worst case, the contract will only send 63/64 of the transaction's\r\n        // remaining gas due to https://eips.ethereum.org/EIPS/eip-150\r\n        // But this is problematic as outlined in https://eips.ethereum.org/EIPS/eip-1930\r\n        // so to fix... we need to make sure we supply 64/63 * gasLimit.\r\n        // Assumption: Underlying contract called did not have a minimum gas required check\r\n        // We add 1000 to cover the cost of calculating new gas limit - this should be a lot more than\r\n        // is required - measuring shows cost of 58\r\n        require(gasleft() > _relayTx.gasLimit.div(63).add(_relayTx.gasLimit).add(1000), \"Not enough gas supplied.\");\r\n\r\n        // execute the actual call\r\n        (bool success,) = _relayTx.to.call.gas(_relayTx.gasLimit)(_relayTx.data);\r\n\r\n        uint gasUsed = gasStarted.add(_gasRefund).sub(gasleft()); // Takes into account gas cost for refund. \r\n\r\n        if(_gasRefund > 0) {\r\n            if(!msg.sender.send(gasUsed*tx.gasprice)) {\r\n                // Notify admin we need to provide more refund to this contract\r\n                emit OutOfCoins();\r\n            }\r\n        }\r\n\r\n        emit RelayExecuted(_relayTx.id, success, _relayTx.to, gasUsed, tx.gasprice);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OutOfCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"relayTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"RelayExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerUninstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_topUp\",\"type\":\"uint256\"}],\"name\":\"absoluteTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct InstantRefundRelay.RelayTx\",\"name\":\"_relayTx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefund\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"installRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract PaymentDeposit\",\"name\":\"_otherDeposit\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBalance\",\"type\":\"uint256\"}],\"name\":\"relativeTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"uninstallRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstantRefundRelay","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec7d0afe773b5ec77a36102cd31416beee4c1a8cdc4ac7dced43131f24ac5cde"}]}