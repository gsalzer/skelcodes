{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity = 0.7.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface Minter is ERC20 {\r\n    event Mint(address indexed to, uint256 value, uint indexed period, uint userEthLocked, uint totalEthLocked);\r\n\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function mint(address to, uint period, uint128 userEthLocked, uint totalEthLocked) external returns (uint amount);\r\n    function userTokensToClaim(address user) external view returns (uint amount);\r\n    function periodTokens(uint period) external pure returns (uint128);\r\n    function periodDecayK() external pure returns (uint decayK);\r\n    function initialPeriodTokens() external pure returns (uint128);\r\n}\r\n\r\ninterface PoolFactory {\r\n    event PoolCreatedEvent(address tokenA, address tokenB, bool aIsWETH, address indexed pool);\r\n\r\n    function getPool(address tokenA, address tokenB) external returns (address);\r\n    function findPool(address tokenA, address tokenB) external view returns (address);\r\n    function pools(uint poolIndex) external view returns (address pool);\r\n    function getPoolCount() external view returns (uint);\r\n}\r\n\r\ninterface WETH is ERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface GovernanceRouter {\r\n    event GovernanceApplied(uint packedGovernance);\r\n    event GovernorChanged(address covernor);\r\n    event ProtocolFeeReceiverChanged(address protocolFeeReceiver);\r\n    event PoolFactoryChanged(address poolFactory);\r\n\r\n    function schedule() external returns(uint timeZero, uint miningPeriod);\r\n    function creator() external returns(address);\r\n    function weth() external returns(WETH);\r\n\r\n    function activityMeter() external returns(ActivityMeter);\r\n    function setActivityMeter(ActivityMeter _activityMeter) external;\r\n\r\n    function minter() external returns(Minter);\r\n    function setMinter(Minter _minter) external;\r\n\r\n    function poolFactory() external returns(PoolFactory);\r\n    function setPoolFactory(PoolFactory _poolFactory) external;\r\n\r\n    function protocolFeeReceiver() external returns(address);\r\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external;\r\n\r\n    function governance() external view returns (address _governor, uint96 _defaultGovernancePacked);\r\n    function setGovernor(address _governor) external;\r\n    function applyGovernance(uint96 _defaultGovernancePacked) external;\r\n}\r\n\r\ninterface ActivityMeter {\r\n    event Deposit(address indexed user, address indexed pool, uint amount);\r\n    event Withdraw(address indexed user, address indexed pool, uint amount);\r\n\r\n    function actualizeUserPool(uint endPeriod, address user, address pool) external returns (uint ethLocked, uint mintedAmount) ;  \r\n    function deposit(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function withdraw(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function actualizeUserPools() external returns (uint ethLocked, uint mintedAmount);\r\n    function liquidityEthPriceChanged(uint effectiveTime, uint availableBalanceEth, uint totalSupply) external;\r\n    function effectivePeriod(uint effectiveTime) external view returns (uint periodNumber, uint quantaElapsed);\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function userEthLocked(address user) external view returns (uint ethLockedPeriod, uint ethLocked, uint totalEthLocked);\r\n    \r\n    function ethLockedHistory(uint period) external view returns (uint ethLockedTotal);\r\n\r\n    function poolsPriceHistory(uint period, address pool) external view returns (\r\n        uint cumulativeEthPrice,\r\n        uint240 lastEthPrice,\r\n        uint16 timeRef\r\n    );\r\n\r\n    function userPoolsSummaries(address user, address pool) external view returns (\r\n        uint144 cumulativeAmountLocked,\r\n        uint16 amountChangeQuantaElapsed,\r\n\r\n        uint128 lastAmountLocked,\r\n        uint16 firstPeriod,\r\n        uint16 lastPriceRecord,\r\n        uint16 earnedForPeriod\r\n    );\r\n\r\n    function userPools(address user, uint poolIndex) external view returns (address pool);\r\n    function userPoolsLength(address user) external view returns (uint length);\r\n\r\n    function userSummaries(address user) external view returns (\r\n        uint128 ethLocked,\r\n        uint16 ethLockedPeriod,\r\n        uint16 firstPeriod\r\n    );\r\n    \r\n    function poolSummaries(address pool) external view returns (\r\n        uint16 lastPriceRecord\r\n    );\r\n    \r\n    function users(uint userIndex) external view returns (address user);\r\n    function usersLength() external view returns (uint);\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\ncontract LiquifiGovernanceRouter is GovernanceRouter {\r\n    uint private immutable timeZero;\r\n    uint private immutable miningPeriod;\r\n\r\n    address public immutable override creator;\r\n    WETH public immutable override weth;\r\n    \r\n    // write once props\r\n    PoolFactory public override poolFactory;\r\n    ActivityMeter public override activityMeter;\r\n    Minter public override minter;\r\n    \r\n    // props managed by governor\r\n    address public override protocolFeeReceiver;\r\n\r\n    address private governor;\r\n    uint96 private defaultGovernancePacked;\r\n    \r\n    constructor(uint _miningPeriod, address _weth) public {\r\n        defaultGovernancePacked = (\r\n            /*instantSwapFee*/uint96(3) << 88 | // 0.3%\r\n            /*fee*/uint96(3) << 80 | // 0.3%\r\n            /*maxPeriod*/uint96(1 hours) << 40 |\r\n            /*desiredMaxHistory*/uint96(100) << 24\r\n        );\r\n\r\n        creator = tx.origin;\r\n        timeZero = block.timestamp;\r\n        miningPeriod = _miningPeriod;\r\n        weth = WETH(_weth);\r\n    }\r\n\r\n    function schedule() external override view returns(uint _timeZero, uint _miningPeriod) {\r\n        _timeZero = timeZero;\r\n        _miningPeriod = address(activityMeter) == address(0) ? 0 : miningPeriod;\r\n    }\r\n\r\n    function setActivityMeter(ActivityMeter _activityMeter) external override {\r\n        require(address(activityMeter) == address(0) && tx.origin == creator, \"LIQUIFI_GVR: INVALID INIT SENDER\");\r\n        activityMeter = _activityMeter;\r\n    }\r\n\r\n    function setMinter(Minter _minter) external override {\r\n        require(address(minter) == address(0) && tx.origin == creator, \"LIQUIFI_GVR: INVALID INIT SENDER\");\r\n        minter = _minter;\r\n    }\r\n\r\n    function setPoolFactory(PoolFactory _poolFactory) external override {\r\n        require(msg.sender == governor || (address(poolFactory) == address(0) && tx.origin == creator), \"LIQUIFI_GVR: INVALID INIT SENDER\");\r\n        poolFactory = _poolFactory;\r\n        emit PoolFactoryChanged(address(_poolFactory));\r\n    }\r\n\r\n    function setGovernor(address _governor) external override {\r\n        require(msg.sender == governor || (governor == address(0) && tx.origin == creator), \"LIQUIFI_GVR: INVALID GOVERNANCE SENDER\");\r\n        governor = _governor;\r\n        emit GovernorChanged(_governor);\r\n    }\r\n\r\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external override {\r\n        require(msg.sender == governor, \"LIQUIFI_GVR: INVALID GOVERNANCE SENDER\");\r\n        protocolFeeReceiver = _protocolFeeReceiver;\r\n        emit ProtocolFeeReceiverChanged(_protocolFeeReceiver);\r\n    }\r\n\r\n    function applyGovernance(uint96 _defaultGovernancePacked) external override {\r\n        require(msg.sender == governor, \"LIQUIFI_GVR: INVALID GOVERNANCE SENDER\");\r\n        defaultGovernancePacked = _defaultGovernancePacked;\r\n        emit GovernanceApplied(_defaultGovernancePacked);\r\n    }\r\n\r\n    // grouped read for gas saving\r\n    function governance() external override view returns (address _governor, uint96 _defaultGovernancePacked) {\r\n        _governor = governor;\r\n        _defaultGovernancePacked = defaultGovernancePacked;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packedGovernance\",\"type\":\"uint256\"}],\"name\":\"GovernanceApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"covernor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"PoolFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"ProtocolFeeReceiverChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activityMeter\",\"outputs\":[{\"internalType\":\"contract ActivityMeter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_defaultGovernancePacked\",\"type\":\"uint96\"}],\"name\":\"applyGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_defaultGovernancePacked\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract PoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeZero\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miningPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ActivityMeter\",\"name\":\"_activityMeter\",\"type\":\"address\"}],\"name\":\"setActivityMeter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Minter\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PoolFactory\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract WETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquifiGovernanceRouter","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a0ff9c88a9a3c47aac9b5b8c89754af9f9353b32bbd0a1faf2afb4354d51692b"}]}