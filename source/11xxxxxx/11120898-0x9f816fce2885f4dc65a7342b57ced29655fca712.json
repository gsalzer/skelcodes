{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.7;\r\n\r\ninterface AggregatorInterface {\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n\r\n  function latestAnswer() external returns (int256);\r\n  function latestTimestamp() external returns (uint256);\r\n  function latestRound() external returns (uint256);\r\n  function getAnswer(uint256 roundId) external returns (int256);\r\n  function getTimestamp(uint256 roundId) external returns (uint256);\r\n\r\n  // post-Historic\r\n\r\n  function decimals() external returns (uint8);\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\n\r\ncontract ChainlinkPriceFeedMedianizer {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"ChainlinkPriceFeedMedianizer/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    AggregatorInterface public chainlinkAggregator;\r\n\r\n    // Delay between updates after which the reward starts to increase\r\n    uint256 public periodSize;\r\n    // Starting reward for the feeReceiver\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the feeReceiver\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond periodSize seconds since the last update call\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n    // Latest median price\r\n    uint256 private medianPrice;                    // [wad]\r\n    // Timestamp of the Chainlink aggregator\r\n    uint256 public linkAggregatorTimestamp;\r\n    // Last timestamp when the median was updated\r\n    uint256 public  lastUpdateTime;                 // [unix timestamp]\r\n    // Multiplier for the Chainlink price feed in order to scaled it to 18 decimals. Default to 10 for USD price feeds\r\n    uint8   public  multiplier = 10;\r\n\r\n    // You want to change these every deployment\r\n    uint256 public staleThreshold = 3;\r\n    bytes32 public symbol         = \"ethusd\";\r\n\r\n    // SF treasury contract\r\n    StabilityFeeTreasuryLike public treasury;\r\n\r\n    // --- Events ---\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event ModifyParameters(bytes32 parameter, uint256 data);\r\n    event UpdateResult(uint256 medianPrice, uint256 lastUpdateTime);\r\n    event RewardCaller(address feeReceiver, uint256 amount);\r\n    event FailRewardCaller(bytes revertReason, address finalFeeReceiver, uint256 reward);\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor(\r\n      address aggregator,\r\n      address treasury_,\r\n      uint256 periodSize_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        require(aggregator != address(0), \"ChainlinkPriceFeedMedianizer/null-aggregator\");\r\n        require(multiplier >= 1, \"ChainlinkPriceFeedMedianizer/null-multiplier\");\r\n        require(maxUpdateCallerReward_ > baseUpdateCallerReward_, \"ChainlinkPriceFeedMedianizer/invalid-max-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"ChainlinkPriceFeedMedianizer/invalid-reward-increase\");\r\n        require(periodSize_ > 0, \"ChainlinkPriceFeedMedianizer/null-period-size\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n        treasury                       = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward         = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward          = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease  = perSecondCallerRewardIncrease_;\r\n        periodSize                     = periodSize_;\r\n        chainlinkAggregator            = AggregatorInterface(aggregator);\r\n        maxRewardIncreaseDelay         = uint(-1);\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(bytes32(\"treasury\"), treasury_);\r\n        emit ModifyParameters(bytes32(\"maxRewardIncreaseDelay\"), uint(-1));\r\n        emit ModifyParameters(bytes32(\"periodSize\"), periodSize);\r\n        emit ModifyParameters(bytes32(\"aggregator\"), aggregator);\r\n        emit ModifyParameters(bytes32(\"baseUpdateCallerReward\"), baseUpdateCallerReward);\r\n        emit ModifyParameters(bytes32(\"maxUpdateCallerReward\"), maxUpdateCallerReward);\r\n        emit ModifyParameters(bytes32(\"perSecondCallerRewardIncrease\"), perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- General Utils ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 internal constant WAD = 10 ** 18;\r\n    uint256 internal constant RAY = 10 ** 27;\r\n    function minimum(uint x, uint y) internal pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function multiply(uint x, int y) internal pure returns (int z) {\r\n        z = int(x) * y;\r\n        require(int(x) >= 0);\r\n        require(y == 0 || z / y == int(x));\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function wmultiply(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rmultiply(uint x, uint y) internal pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rpower(uint x, uint n, uint base) internal pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Administration ---\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"baseUpdateCallerReward\") baseUpdateCallerReward = data;\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(data > baseUpdateCallerReward, \"ChainlinkPriceFeedMedianizer/invalid-max-reward\");\r\n          maxUpdateCallerReward = data;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(data >= RAY, \"ChainlinkPriceFeedMedianizer/invalid-reward-increase\");\r\n          perSecondCallerRewardIncrease = data;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(data > 0, \"ChainlinkPriceFeedMedianizer/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = data;\r\n        }\r\n        else if (parameter == \"periodSize\") {\r\n          require(data > 0, \"ChainlinkPriceFeedMedianizer/null-period-size\");\r\n          periodSize = data;\r\n        }\r\n        else if (parameter == \"staleThreshold\") {\r\n          require(data > 1, \"ChainlinkPriceFeedMedianizer/invalid-stale-threshold\");\r\n          staleThreshold = data;\r\n        }\r\n        else revert(\"ChainlinkPriceFeedMedianizer/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        if (parameter == \"aggregator\") chainlinkAggregator = AggregatorInterface(addr);\r\n        else if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"ChainlinkPriceFeedMedianizer/treasury-coin-not-set\");\r\n      \t  treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else revert(\"ChainlinkPriceFeedMedianizer/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n\r\n    function read() external view returns (uint256) {\r\n        require(both(medianPrice > 0, subtract(now, linkAggregatorTimestamp) <= multiply(periodSize, staleThreshold)), \"ChainlinkPriceFeedMedianizer/invalid-price-feed\");\r\n        return medianPrice;\r\n    }\r\n\r\n    function getResultWithValidity() external view returns (uint256,bool) {\r\n        return (medianPrice, both(medianPrice > 0, subtract(now, linkAggregatorTimestamp) <= multiply(periodSize, staleThreshold)));\r\n    }\r\n\r\n    // --- Treasury Utils ---\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    function getCallerReward() public view returns (uint256) {\r\n        if (lastUpdateTime == 0) return baseUpdateCallerReward;\r\n        uint256 timeElapsed = subtract(now, lastUpdateTime);\r\n        if (timeElapsed < periodSize) {\r\n            return 0;\r\n        }\r\n        uint256 baseReward   = baseUpdateCallerReward;\r\n        uint256 adjustedTime = subtract(timeElapsed, periodSize);\r\n        if (adjustedTime > 0) {\r\n            adjustedTime = (adjustedTime > maxRewardIncreaseDelay) ? maxRewardIncreaseDelay : adjustedTime;\r\n            baseReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), baseReward);\r\n        }\r\n        uint256 maxReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (baseReward > maxReward) {\r\n            baseReward = maxReward;\r\n        }\r\n        return baseReward;\r\n    }\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {\r\n            emit RewardCaller(finalFeeReceiver, reward);\r\n        }\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n\r\n    // --- Median Updates ---\r\n    function updateResult(address feeReceiver) external {\r\n        int256 aggregatorPrice = chainlinkAggregator.latestAnswer();\r\n        uint256 aggregatorTimestamp = chainlinkAggregator.latestTimestamp();\r\n        require(aggregatorPrice > 0, \"ChainlinkPriceFeedMedianizer/invalid-price-feed\");\r\n        require(aggregatorTimestamp > 0 && aggregatorTimestamp > linkAggregatorTimestamp, \"ChainlinkPriceFeedMedianizer/invalid-timestamp\");\r\n        uint256 callerReward    = getCallerReward();\r\n        medianPrice             = multiply(uint(aggregatorPrice), 10 ** uint(multiplier));\r\n        linkAggregatorTimestamp = aggregatorTimestamp;\r\n        lastUpdateTime          = now;\r\n        emit UpdateResult(medianPrice, lastUpdateTime);\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n}\r\n\r\ncontract ChainlinkMedianETHUSD is ChainlinkPriceFeedMedianizer {\r\n  constructor(\r\n    address aggregator,\r\n    uint256 periodSize,\r\n    uint256 baseUpdateCallerReward,\r\n    uint256 maxUpdateCallerReward,\r\n    uint256 perSecondCallerRewardIncrease\r\n  ) ChainlinkPriceFeedMedianizer(aggregator, address(0), periodSize, baseUpdateCallerReward, maxUpdateCallerReward, perSecondCallerRewardIncrease) public {\r\n        symbol = \"ETHUSD\";\r\n        multiplier = 10;\r\n        staleThreshold = 6;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finalFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"medianPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResultWithValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAggregatorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staleThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkMedianETHUSD","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000033b57034a98502542e4fba8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://47b0f08f15530f2a8b93da7ef38bcfc39b75c443b0e8bfa5efbf21d7e9f1ed66"}]}