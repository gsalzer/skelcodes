{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IGraSwapBlackList {\r\n    // event OwnerChanged(address);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AddedBlackLists(address[]);\r\n    event RemovedBlackLists(address[]);\r\n\r\n    function owner()external view returns (address);\r\n    // function newOwner()external view returns (address);\r\n    function isBlackListed(address)external view returns (bool);\r\n\r\n    // function changeOwner(address ownerToSet) external;\r\n    // function updateOwner() external;\r\n    function transferOwnership(address newOwner) external;\r\n    function addBlackLists(address[] calldata  accounts)external;\r\n    function removeBlackLists(address[] calldata  accounts)external;\r\n}\r\n\r\ninterface IGraWhiteList {\r\n    event AppendWhiter(address adder);\r\n    event RemoveWhiter(address remover);\r\n    \r\n    function appendWhiter(address account) external;\r\n    function removeWhiter(address account) external;\r\n    function isWhiter(address account) external;\r\n    function isNotWhiter(address account) external;\r\n}\r\n\r\ninterface IGraSwapToken is IERC20, IGraSwapBlackList{\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    // function multiTransfer(uint256[] calldata mixedAddrVal) external returns (bool);\r\n    function batchTransfer(address[] memory addressList, uint256[] memory amountList) external returns (bool);\r\n}\r\n\r\ninterface IGraSwapGov {\r\n    event NewFundsProposal  (uint64 proposalID, string title, string desc, string url, uint32 deadline, address beneficiary, uint256 amount);\r\n    event NewParamProposal  (uint64 proposalID, string title, string desc, string url, uint32 deadline, address factory, uint32 feeBPS);\r\n    event NewUpgradeProposal(uint64 proposalID, string title, string desc, string url, uint32 deadline, address factory, address pairLogic);\r\n    event NewTextProposal   (uint64 proposalID, string title, string desc, string url, uint32 deadline);\r\n    event NewVote(uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\r\n    event AddVote(uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\r\n    event Revote (uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\r\n    event TallyResult(uint64 proposalID, bool pass);\r\n\r\n    function graContract() external pure returns (address);\r\n    function proposalInfo() external view returns (\r\n            uint24 id, address proposer, uint8 _type, uint32 deadline, address addr, uint256 value,\r\n            uint112 totalYes, uint112 totalNo, uint112 totalDeposit);\r\n    function voterInfo(address voter) external view returns (\r\n            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt);\r\n\r\n    function submitFundsProposal  (string calldata title, string calldata desc, string calldata url, address beneficiary, uint256 fundsAmt, uint112 voteAmt) external;\r\n    function submitParamProposal  (string calldata title, string calldata desc, string calldata url, address factory, uint32 feeBPS, uint112 voteAmt) external;\r\n    function submitUpgradeProposal(string calldata title, string calldata desc, string calldata url, address factory, address pairLogic, uint112 voteAmt) external;\r\n    function submitTextProposal   (string calldata title, string calldata desc, string calldata url, uint112 voteAmt) external;\r\n    function vote(uint8 opinion, uint112 voteAmt) external;\r\n    function tally() external;\r\n    function withdrawGras(uint112 amt) external;\r\n}\r\n\r\ninterface IGraSwapFactory {\r\n    event PairCreated(address indexed pair, address stock, address money, bool isOnlySwap);\r\n\r\n    function createPair(address stock, address money, bool isOnlySwap) external returns (address pair);\r\n    function setFeeToAddresses(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setFeeBPS(uint32 bps) external;\r\n    function setPairLogic(address implLogic) external;\r\n\r\n    function allPairsLength() external view returns (uint);\r\n    function feeTo_1() external view returns (address);\r\n    function feeTo_2() external view returns (address);\r\n    function feeToPrivate() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function feeBPS() external view returns (uint32);\r\n    function pairLogic() external returns (address);\r\n    function getTokensFromPair(address pair) external view returns (address stock, address money);\r\n    function tokensToPair(address stock, address money, bool isOnlySwap) external view returns (address pair);\r\n}\r\n\r\ncontract GraSwapGov is IGraSwapGov {\r\n\r\n    struct VoterInfo {\r\n        uint24  votedProposal;\r\n        uint8   votedOpinion;\r\n        uint112 votedAmt;     // enouth to store GraS\r\n        uint112 depositedAmt; // enouth to store GraS\r\n    }\r\n\r\n    uint8   private constant _PROPOSAL_TYPE_FUNDS   = 1; // ask for funds\r\n    uint8   private constant _PROPOSAL_TYPE_PARAM   = 2; // change factory.feeBPS\r\n    uint8   private constant _PROPOSAL_TYPE_UPGRADE = 3; // change factory.pairLogic\r\n    uint8   private constant _PROPOSAL_TYPE_TEXT    = 4; // pure text proposal\r\n    uint8   private constant _YES = 1;\r\n    uint8   private constant _NO  = 2;\r\n    uint32  private constant _MIN_FEE_BPS = 0;\r\n    uint32  private constant _MAX_FEE_BPS = 50;\r\n    uint256 private constant _MAX_FUNDS_REQUEST = 5000000; // 5000000 GraS\r\n    uint256 private constant _FAILED_PROPOSAL_COST = 1000; //    1000 GraS\r\n    uint256 private constant _SUBMIT_GraS_PERCENT = 1; // 0.1%\r\n    uint256 private constant _VOTE_PERIOD = 3 days;\r\n    uint256 private constant _TEXT_PROPOSAL_INTERVAL = 1 days;\r\n\r\n    address public  immutable override graContract;\r\n    uint256 private immutable _maxFundsRequest;    // 5000000 GraS\r\n    uint256 private immutable _failedProposalCost; //    1000 GraS\r\n\r\n    uint24  private _proposalID;\r\n    uint8   private _proposalType; // FUNDS            | PARAM        | UPGRADE            | TEXT\r\n    uint32  private _deadline;     // unix timestamp   | same         | same               | same\r\n    address private _addr;         // beneficiary addr | factory addr | factory addr       | not used\r\n    uint256 private _value;        // amount of funds  | feeBPS       | pair logic address | not used\r\n    address private _proposer;\r\n    uint112 private _totalYes;\r\n    uint112 private _totalNo;\r\n    uint112 private _totalDeposit;\r\n    mapping (address => VoterInfo) private _voters;\r\n\r\n    constructor(address _graContract) public {\r\n        graContract = _graContract;\r\n        uint256 GrasDec = IERC20(_graContract).decimals();\r\n        _maxFundsRequest = _MAX_FUNDS_REQUEST * (10 ** GrasDec);\r\n        _failedProposalCost = _FAILED_PROPOSAL_COST * (10 ** GrasDec);\r\n    }\r\n\r\n    function proposalInfo() external view override returns (\r\n            uint24 id, address proposer, uint8 _type, uint32 deadline, address addr, uint256 value,\r\n            uint112 totalYes, uint112 totalNo, uint112 totalDeposit) {\r\n        id           = _proposalID;\r\n        proposer     = _proposer;\r\n        _type        = _proposalType;\r\n        deadline     = _deadline;\r\n        value        = _value;\r\n        addr         = _addr;\r\n        totalYes     = _totalYes;\r\n        totalNo      = _totalNo;\r\n        totalDeposit = _totalDeposit;\r\n    }\r\n    function voterInfo(address voter) external view override returns (\r\n            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) {\r\n        VoterInfo memory info = _voters[voter];\r\n        votedProposalID = info.votedProposal;\r\n        votedOpinion    = info.votedOpinion;\r\n        votedAmt        = info.votedAmt;\r\n        depositedAmt    = info.depositedAmt;\r\n    }\r\n\r\n    // submit new proposals\r\n    function submitFundsProposal(string calldata title, string calldata desc, string calldata url,\r\n            address beneficiary, uint256 fundsAmt, uint112 voteAmt) external override {\r\n        if (fundsAmt > 0) {\r\n            require(fundsAmt <= _maxFundsRequest, \"GraSwapGov: ASK_TOO_MANY_FUNDS\");\r\n            uint256 govGras = IERC20(graContract).balanceOf(address(this));\r\n            uint256 availableGras = govGras - _totalDeposit;\r\n            require(govGras > _totalDeposit && availableGras >= fundsAmt,\r\n                \"GraSwapGov: INSUFFICIENT_FUNDS\");\r\n        }\r\n        _newProposal(_PROPOSAL_TYPE_FUNDS, beneficiary, fundsAmt, voteAmt);\r\n        emit NewFundsProposal(_proposalID, title, desc, url, _deadline, beneficiary, fundsAmt);\r\n        _vote(_YES, voteAmt);\r\n    }\r\n    function submitParamProposal(string calldata title, string calldata desc, string calldata url,\r\n            address factory, uint32 feeBPS, uint112 voteAmt) external override {\r\n        require(feeBPS >= _MIN_FEE_BPS && feeBPS <= _MAX_FEE_BPS, \"GraSwapGov: INVALID_FEE_BPS\");\r\n        _newProposal(_PROPOSAL_TYPE_PARAM, factory, feeBPS, voteAmt);\r\n        emit NewParamProposal(_proposalID, title, desc, url, _deadline, factory, feeBPS);\r\n        _vote(_YES, voteAmt);\r\n    }\r\n    function submitUpgradeProposal(string calldata title, string calldata desc, string calldata url,\r\n            address factory, address pairLogic, uint112 voteAmt) external override {\r\n        require(pairLogic != address(0), \"GraSwapGov: INVALID_PAIR_LOGIC\");\r\n        _newProposal(_PROPOSAL_TYPE_UPGRADE, factory, uint256(pairLogic), voteAmt);\r\n        emit NewUpgradeProposal(_proposalID, title, desc, url, _deadline, factory, pairLogic);\r\n        _vote(_YES, voteAmt);\r\n    }\r\n    function submitTextProposal(string calldata title, string calldata desc, string calldata url,\r\n            uint112 voteAmt) external override {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(uint256(_deadline) + _TEXT_PROPOSAL_INTERVAL < block.timestamp,\r\n            \"GraSwapGov: COOLING_DOWN\");\r\n        _newProposal(_PROPOSAL_TYPE_TEXT, address(0), 0, voteAmt);\r\n        emit NewTextProposal(_proposalID, title, desc, url, _deadline);\r\n        _vote(_YES, voteAmt);\r\n    }\r\n\r\n    function _newProposal(uint8 _type, address addr, uint256 value, uint112 voteAmt) private {\r\n        require(_type >= _PROPOSAL_TYPE_FUNDS && _type <= _PROPOSAL_TYPE_TEXT,\r\n            \"GraSwapGov: INVALID_PROPOSAL_TYPE\");\r\n        require(_type == _PROPOSAL_TYPE_TEXT || msg.sender == IGraSwapToken(graContract).owner(),\r\n            \"GraSwapGov: NOT_GraS_OWNER\");\r\n        require(_proposalType == 0, \"GraSwapGov: LAST_PROPOSAL_NOT_FINISHED\");\r\n\r\n        uint256 totalGras = IERC20(graContract).totalSupply();\r\n        uint256 thresGras = (totalGras/1000) * _SUBMIT_GraS_PERCENT;\r\n        require(voteAmt >= thresGras, \"GraSwapGov: VOTE_AMOUNT_TOO_LESS\");\r\n\r\n        _proposalID++;\r\n        _proposalType = _type;\r\n        _proposer = msg.sender;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _deadline = uint32(block.timestamp + _VOTE_PERIOD);\r\n        _value = value;\r\n        _addr = addr;\r\n        _totalYes = 0;\r\n        _totalNo = 0;\r\n    }\r\n \r\n    function vote(uint8 opinion, uint112 voteAmt) external override {\r\n        require(_proposalType > 0, \"GraSwapGov: NO_PROPOSAL\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(uint256(_deadline) > block.timestamp, \"GraSwapGov: DEADLINE_REACHED\");\r\n        _vote(opinion, voteAmt);\r\n    }\r\n\r\n    function _vote(uint8 opinion, uint112 addedVoteAmt) private {\r\n        require(_YES <= opinion && opinion <= _NO, \"GraSwapGov: INVALID_OPINION\");\r\n        require(addedVoteAmt > 0, \"GraSwapGov: ZERO_VOTE_AMOUNT\");\r\n\r\n        (uint24 currProposalID, uint24 votedProposalID,\r\n            uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) = _getVoterInfo();\r\n\r\n        // cancel previous votes if opinion changed\r\n        bool isRevote = false;\r\n        if ((votedProposalID == currProposalID) && (votedOpinion != opinion)) {\r\n            if (votedOpinion == _YES) {\r\n                assert(_totalYes >= votedAmt);\r\n                _totalYes -= votedAmt;\r\n            } else {\r\n                assert(_totalNo >= votedAmt);\r\n                _totalNo -= votedAmt;\r\n            }\r\n            votedAmt = 0;\r\n            isRevote = true;\r\n        }\r\n\r\n        // need to deposit more GraS?\r\n        assert(depositedAmt >= votedAmt);\r\n        if (addedVoteAmt > depositedAmt - votedAmt) {\r\n            uint112 moreDeposit = addedVoteAmt - (depositedAmt - votedAmt);\r\n            depositedAmt += moreDeposit;\r\n            _totalDeposit += moreDeposit;\r\n            IERC20(graContract).transferFrom(msg.sender, address(this), moreDeposit);\r\n        }\r\n\r\n        if (opinion == _YES) {\r\n            _totalYes += addedVoteAmt;\r\n        } else {\r\n            _totalNo += addedVoteAmt;\r\n        }\r\n        votedAmt += addedVoteAmt;\r\n        _setVoterInfo(currProposalID, opinion, votedAmt, depositedAmt);\r\n \r\n        if (isRevote) {\r\n            emit Revote(currProposalID, msg.sender, opinion, addedVoteAmt);\r\n        } else if (votedAmt > addedVoteAmt) {\r\n            emit AddVote(currProposalID, msg.sender, opinion, addedVoteAmt);\r\n        } else {\r\n            emit NewVote(currProposalID, msg.sender, opinion, addedVoteAmt);\r\n        }\r\n    }\r\n    function _getVoterInfo() private view returns (uint24 currProposalID,\r\n            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) {\r\n        currProposalID = _proposalID;\r\n        VoterInfo memory voter = _voters[msg.sender];\r\n        depositedAmt = voter.depositedAmt;\r\n        if (voter.votedProposal == currProposalID) {\r\n            votedProposalID = currProposalID;\r\n            votedOpinion = voter.votedOpinion;\r\n            votedAmt = voter.votedAmt;\r\n        }\r\n    }\r\n    function _setVoterInfo(uint24 proposalID,\r\n            uint8 opinion, uint112 votedAmt, uint112 depositedAmt) private {\r\n        _voters[msg.sender] = VoterInfo({\r\n            votedProposal: proposalID,\r\n            votedOpinion : opinion,\r\n            votedAmt     : votedAmt,\r\n            depositedAmt : depositedAmt\r\n        });\r\n    }\r\n\r\n    function tally() external override {\r\n        require(_proposalType > 0, \"GraSwapGov: NO_PROPOSAL\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(uint256(_deadline) <= block.timestamp, \"GraSwapGov: STILL_VOTING\");\r\n\r\n        bool ok = _totalYes > _totalNo;\r\n        uint8 _type = _proposalType;\r\n        uint256 val = _value;\r\n        address addr = _addr;\r\n        address proposer = _proposer;\r\n        _resetProposal();\r\n        if (ok) {\r\n            _execProposal(_type, addr, val);\r\n        } else {\r\n            _taxProposer(proposer);\r\n        }\r\n        emit TallyResult(_proposalID, ok);\r\n    }\r\n    function _resetProposal() private {\r\n        _proposalType = 0;\r\n     // _deadline     = 0; // use _deadline to check _TEXT_PROPOSAL_INTERVAL\r\n        _value        = 0;\r\n        _addr         = address(0);\r\n        _proposer     = address(0);\r\n        _totalYes     = 0;\r\n        _totalNo      = 0;\r\n    }\r\n    function _execProposal(uint8 _type, address addr, uint256 val) private {\r\n        if (_type == _PROPOSAL_TYPE_FUNDS) {\r\n            if (val > 0) {\r\n                IERC20(graContract).transfer(addr, val);\r\n            }\r\n        } else if (_type == _PROPOSAL_TYPE_PARAM) {\r\n            IGraSwapFactory(addr).setFeeBPS(uint32(val));\r\n        } else if (_type == _PROPOSAL_TYPE_UPGRADE) {\r\n            IGraSwapFactory(addr).setPairLogic(address(val));\r\n        }\r\n    }\r\n    function _taxProposer(address proposerAddr) private {\r\n        // burn 1000 GraS of proposer\r\n        uint112 cost = uint112(_failedProposalCost);\r\n\r\n        VoterInfo memory proposerInfo = _voters[proposerAddr];\r\n        if (proposerInfo.depositedAmt < cost) { // unreachable!\r\n            cost = proposerInfo.depositedAmt;\r\n        }\r\n\r\n        _totalDeposit -= cost;\r\n        proposerInfo.depositedAmt -= cost;\r\n        _voters[proposerAddr] = proposerInfo;\r\n\r\n        IGraSwapToken(graContract).burn(cost);\r\n    }\r\n\r\n    function withdrawGras(uint112 amt) external override {\r\n        VoterInfo memory voter = _voters[msg.sender];\r\n\r\n        require(_proposalType == 0 || voter.votedProposal < _proposalID, \"GraSwapGov: IN_VOTING\");\r\n        require(amt > 0 && amt <= voter.depositedAmt, \"GraSwapGov: INVALID_WITHDRAW_AMOUNT\");\r\n\r\n        _totalDeposit -= amt;\r\n        voter.depositedAmt -= amt;\r\n        if (voter.depositedAmt == 0) {\r\n            delete _voters[msg.sender];\r\n        } else {\r\n            _voters[msg.sender] = voter;\r\n        }\r\n        IERC20(graContract).transfer(msg.sender, amt);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_graContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opinion\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"AddVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewFundsProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feeBPS\",\"type\":\"uint32\"}],\"name\":\"NewParamProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"NewTextProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairLogic\",\"type\":\"address\"}],\"name\":\"NewUpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opinion\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opinion\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"Revote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"proposalID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"}],\"name\":\"TallyResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"graContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalInfo\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"id\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"totalYes\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"totalNo\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"totalDeposit\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundsAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"submitFundsProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"feeBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"submitParamProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"submitTextProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairLogic\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"submitUpgradeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tally\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"opinion\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"voteAmt\",\"type\":\"uint112\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voterInfo\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"votedProposalID\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"votedOpinion\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"votedAmt\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"depositedAmt\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amt\",\"type\":\"uint112\"}],\"name\":\"withdrawGras\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GraSwapGov","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a23b7e3bb936c7753b5e7a6c304a8fb43979d20","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92fdb27b7325f23cfa23b187f7b8ac750bd5f2b60e71ce79bccd3cbda26690cd"}]}