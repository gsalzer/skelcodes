{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * Copyright (c) 2016-2020 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: VotingSessionManager\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/commit/9993912325afde36151b04d0247ac9ea9ffa2a93\r\n *\r\n **************************************************************************/\r\n\r\n\r\n// File: @c-layer/common/contracts/call/DelegateCall.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title DelegateCall\r\n * @dev Calls delegates for non view functions only\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error Messages:\r\n **/\r\nlibrary DelegateCall {\r\n\r\n  function _delegateCall(address _delegate) internal virtual returns (bool status)\r\n  {\r\n    bytes memory result;\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (status, result) = _delegate.delegatecall(msg.data);\r\n    require(status, string(result));\r\n  }\r\n\r\n  function _delegateCallBool(address _delegate) internal returns (bool status)\r\n  {\r\n    return abi.decode(_delegateCallBytes(_delegate), (bool));\r\n  }\r\n\r\n  function _delegateCallUint256(address _delegate) internal returns (uint256)\r\n  {\r\n    return abi.decode(_delegateCallBytes(_delegate), (uint256));\r\n  }\r\n\r\n  function _delegateCallBytes(address _delegate)\r\n    internal returns (bytes memory result)\r\n  {\r\n    bool status;\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (status, result) = _delegate.delegatecall(msg.data);\r\n    require(status, string(result));\r\n  }\r\n}\r\n\r\n// File: @c-layer/common/contracts/call/DelegateCallView.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title DelegateCallView\r\n * @dev Calls delegates for view and non view functions\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error Messages:\r\n *   DV01: Cannot call forwardCallBytes directly\r\n **/\r\ncontract DelegateCallView {\r\n\r\n  bytes4 internal constant FORWARD_CALL_BYTES = bytes4(keccak256(\"forwardCallBytes(address,bytes)\"));\r\n\r\n  function _delegateCallBool(address _delegate)\r\n    internal view returns (bool)\r\n  {\r\n    return abi.decode(_delegateCallBytes(_delegate), (bool));\r\n  }\r\n\r\n  function _delegateCallUint256(address _delegate)\r\n    internal view returns (uint256)\r\n  {\r\n    return abi.decode(_delegateCallBytes(_delegate), (uint256));\r\n  }\r\n\r\n  function _delegateCallBytes(address _delegate)\r\n    internal view returns (bytes memory result)\r\n  {\r\n    bool status;\r\n    (status, result) = address(this).staticcall(\r\n      abi.encodeWithSelector(FORWARD_CALL_BYTES, _delegate, msg.data));\r\n    require(status, string(result));\r\n    result = abi.decode(result, (bytes));\r\n  }\r\n\r\n  /**\r\n   * @dev enforce static immutability (view)\r\n   * @dev in order to read delegate value through internal delegateCall\r\n   */\r\n  function forwardCallBytes(address _delegate, bytes memory _data)\r\n    public returns (bytes memory result)\r\n  {\r\n    require(msg.sender == address(this), \"DV01\");\r\n    bool status;\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (status, result) = _delegate.delegatecall(_data);\r\n    require(status, string(result));\r\n  }\r\n}\r\n\r\n// File: @c-layer/common/contracts/operable/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * @dev functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n *\r\n * Error messages\r\n *   OW01: Message sender is not the owner\r\n *   OW02: New owner must be valid\r\n*/\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"OW01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"OW02\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n *\r\n */\r\ninterface IERC20 {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint256);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function increaseApproval(address _spender, uint256 _addedValue)\r\n    external returns (bool);\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    external returns (bool);\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IProxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title IProxy\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ninterface IProxy {\r\n\r\n  function core() external view returns (address);\r\n\r\n}\r\n\r\n// File: @c-layer/common/contracts/core/Proxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Proxy\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   PR01: Only accessible by core\r\n *   PR02: Core request should be successful\r\n **/\r\ncontract Proxy is IProxy {\r\n\r\n  address public override core;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than a core\r\n   */\r\n  modifier onlyCore {\r\n    require(core == msg.sender, \"PR01\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _core) public {\r\n    core = _core;\r\n  }\r\n\r\n  /**\r\n   * @dev update the core\r\n   */\r\n  function updateCore(address _core)\r\n    public onlyCore returns (bool)\r\n  {\r\n    core = _core;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev enforce static immutability (view)\r\n   * @dev in order to read core value through internal core delegateCall\r\n   */\r\n  function staticCallUint256() internal view returns (uint256 value) {\r\n    (bool status, bytes memory result) = core.staticcall(msg.data);\r\n    require(status, string(result));\r\n    value = abi.decode(result, (uint256));\r\n  }\r\n}\r\n\r\n// File: @c-layer/token/contracts/interface/ITokenProxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IToken proxy\r\n * @dev Token proxy interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract ITokenProxy is IERC20, Proxy {\r\n\r\n  function canTransfer(address, address, uint256)\r\n    virtual public view returns (uint256);\r\n\r\n  function emitTransfer(address _from, address _to, uint256 _value)\r\n    virtual public returns (bool);\r\n\r\n  function emitApproval(address _owner, address _spender, uint256 _value)\r\n    virtual public returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IVotingDefinitions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IVotingDefinitions\r\n * @dev IVotingDefinitions interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IVotingDefinitions {\r\n\r\n  address internal constant ANY_TARGET = address(bytes20(\"AnyTarget\"));\r\n  bytes4 internal constant ANY_METHOD = bytes4(bytes32(\"AnyMethod\"));\r\n\r\n  enum SessionState {\r\n    UNDEFINED,\r\n    PLANNED,\r\n    CAMPAIGN,\r\n    VOTING,\r\n    EXECUTION,\r\n    GRACE,\r\n    CLOSED,\r\n    ARCHIVED\r\n  }\r\n\r\n  enum ProposalState {\r\n    UNDEFINED,\r\n    DEFINED,\r\n    CANCELLED,\r\n    LOCKED,\r\n    APPROVED,\r\n    REJECTED,\r\n    RESOLVED,\r\n    CLOSED,\r\n    ARCHIVED\r\n  }\r\n\r\n  // 4 digits precisions on percentage values\r\n  uint256 internal constant PERCENT = 1000000;\r\n\r\n  uint64 internal constant MIN_PERIOD_LENGTH = 200;\r\n  // MAX_PERIOD_LENGTH (approx 10000 years) protects against period overflow\r\n  uint64 internal constant MAX_PERIOD_LENGTH = 3652500 days;\r\n  uint64 internal constant CAMPAIGN_PERIOD = 5 days;\r\n  uint64 internal constant VOTING_PERIOD = 2 days;\r\n  uint64 internal constant EXECUTION_PERIOD = 1 days;\r\n  uint64 internal constant GRACE_PERIOD = 6 days;\r\n  uint64 internal constant OFFSET_PERIOD = 2 days;\r\n\r\n  // Proposal requirements in percent\r\n  uint256 internal constant NEW_PROPOSAL_THRESHOLD = 1;\r\n  uint256 internal constant DEFAULT_EXECUTION_THRESHOLD = 1;\r\n  uint128 internal constant DEFAULT_MAJORITY = 500000; // 50%\r\n  uint128 internal constant DEFAULT_QUORUM = 200000; // 20%\r\n\r\n  uint8 internal constant OPEN_PROPOSALS = 5;\r\n  uint8 internal constant MAX_PROPOSALS = 20;\r\n  uint8 internal constant MAX_PROPOSALS_OPERATOR = 25;\r\n\r\n  uint256 internal constant SESSION_RETENTION_PERIOD = 365 days;\r\n  uint256 internal constant SESSION_RETENTION_COUNT = 10;\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IAccessDefinitions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IAccessDefinitions\r\n * @dev IAccessDefinitions\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract IAccessDefinitions {\r\n\r\n  // Hardcoded role granting all - non sysop - privileges\r\n  bytes32 internal constant ALL_PRIVILEGES = bytes32(\"AllPrivileges\");\r\n  address internal constant ALL_PROXIES = address(0x416c6C50726F78696573); // \"AllProxies\"\r\n\r\n  // Roles\r\n  bytes32 internal constant FACTORY_CORE_ROLE = bytes32(\"FactoryCoreRole\");\r\n  bytes32 internal constant FACTORY_PROXY_ROLE = bytes32(\"FactoryProxyRole\");\r\n\r\n  // Sys Privileges\r\n  bytes4 internal constant DEFINE_ROLE_PRIV =\r\n    bytes4(keccak256(\"defineRole(bytes32,bytes4[])\"));\r\n  bytes4 internal constant ASSIGN_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"assignOperators(bytes32,address[])\"));\r\n  bytes4 internal constant REVOKE_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"revokeOperators(address[])\"));\r\n  bytes4 internal constant ASSIGN_PROXY_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"assignProxyOperators(address,bytes32,address[])\"));\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IOperableStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title IOperableStorage\r\n * @dev The Operable storage\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IOperableStorage is IAccessDefinitions {\r\n  function proxyDelegateId(address _proxy) virtual public view returns (uint256);\r\n  function delegate(uint256 _delegateId) virtual public view returns (address);\r\n\r\n  function coreRole(address _address) virtual public view returns (bytes32);\r\n  function proxyRole(address _proxy, address _address) virtual public view returns (bytes32);\r\n  function rolePrivilege(bytes32 _role, bytes4 _privilege) virtual public view returns (bool);\r\n  function roleHasPrivilege(bytes32 _role, bytes4 _privilege) virtual public view returns (bool);\r\n  function hasCorePrivilege(address _address, bytes4 _privilege) virtual public view returns (bool);\r\n  function hasProxyPrivilege(address _address, address _proxy, bytes4 _privilege) virtual public view returns (bool);\r\n\r\n  event RoleDefined(bytes32 role);\r\n  event OperatorAssigned(bytes32 role, address operator);\r\n  event ProxyOperatorAssigned(address proxy, bytes32 role, address operator);\r\n  event OperatorRevoked(address operator);\r\n  event ProxyOperatorRevoked(address proxy, address operator);\r\n\r\n  event ProxyDefined(address proxy, uint256 delegateId);\r\n  event ProxyMigrated(address proxy, address newCore);\r\n  event ProxyRemoved(address proxy);\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IOperableCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title IOperableCore\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IOperableCore is IOperableStorage {\r\n  function defineRole(bytes32 _role, bytes4[] memory _privileges) virtual public returns (bool);\r\n  function assignOperators(bytes32 _role, address[] memory _operators) virtual public returns (bool);\r\n  function assignProxyOperators(\r\n    address _proxy, bytes32 _role, address[] memory _operators) virtual public returns (bool);\r\n  function revokeOperators(address[] memory _operators) virtual public returns (bool);\r\n  function revokeProxyOperators(address _proxy, address[] memory _operators) virtual public returns (bool);\r\n\r\n  function defineProxy(address _proxy, uint256 _delegateId) virtual public returns (bool);\r\n  function migrateProxy(address _proxy, address _newCore) virtual public returns (bool);\r\n  function removeProxy(address _proxy) virtual public returns (bool);\r\n}\r\n\r\n// File: @c-layer/oracle/contracts/interface/IUserRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\nabstract contract IUserRegistry {\r\n\r\n  enum KeyCode {\r\n    KYC_LIMIT_KEY,\r\n    RECEPTION_LIMIT_KEY,\r\n    EMISSION_LIMIT_KEY\r\n  }\r\n\r\n  event UserRegistered(uint256 indexed userId, address address_, uint256 validUntilTime);\r\n  event AddressAttached(uint256 indexed userId, address address_);\r\n  event AddressDetached(uint256 indexed userId, address address_);\r\n  event UserSuspended(uint256 indexed userId);\r\n  event UserRestored(uint256 indexed userId);\r\n  event UserValidity(uint256 indexed userId, uint256 validUntilTime);\r\n  event UserExtendedKey(uint256 indexed userId, uint256 key, uint256 value);\r\n  event UserExtendedKeys(uint256 indexed userId, uint256[] values);\r\n  event ExtendedKeysDefinition(uint256[] keys);\r\n\r\n  function registerManyUsersExternal(address[] calldata _addresses, uint256 _validUntilTime)\r\n    virtual external returns (bool);\r\n  function registerManyUsersFullExternal(\r\n    address[] calldata _addresses,\r\n    uint256 _validUntilTime,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n  function attachManyAddressesExternal(uint256[] calldata _userIds, address[] calldata _addresses)\r\n    virtual external returns (bool);\r\n  function detachManyAddressesExternal(address[] calldata _addresses)\r\n    virtual external returns (bool);\r\n  function suspendManyUsersExternal(uint256[] calldata _userIds) virtual external returns (bool);\r\n  function restoreManyUsersExternal(uint256[] calldata _userIds) virtual external returns (bool);\r\n  function updateManyUsersExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) virtual external returns (bool);\r\n  function updateManyUsersExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _key, uint256 _value) virtual external returns (bool);\r\n  function updateManyUsersAllExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n  function updateManyUsersFullExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n\r\n  function name() virtual public view returns (string memory);\r\n  function currency() virtual public view returns (bytes32);\r\n\r\n  function userCount() virtual public view returns (uint256);\r\n  function userId(address _address) virtual public view returns (uint256);\r\n  function validUserId(address _address) virtual public view returns (uint256);\r\n  function validUser(address _address, uint256[] memory _keys)\r\n    virtual public view returns (uint256, uint256[] memory);\r\n  function validity(uint256 _userId) virtual public view returns (uint256, bool);\r\n\r\n  function extendedKeys() virtual public view returns (uint256[] memory);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    virtual public view returns (uint256);\r\n  function manyExtended(uint256 _userId, uint256[] memory _key)\r\n    virtual public view returns (uint256[] memory);\r\n\r\n  function isAddressValid(address _address) virtual public view returns (bool);\r\n  function isValid(uint256 _userId) virtual public view returns (bool);\r\n\r\n  function defineExtendedKeys(uint256[] memory _extendedKeys) virtual public returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    virtual public returns (bool);\r\n  function registerUserFull(\r\n    address _address,\r\n    uint256 _validUntilTime,\r\n    uint256[] memory _values) virtual public returns (bool);\r\n\r\n  function attachAddress(uint256 _userId, address _address) virtual public returns (bool);\r\n  function detachAddress(address _address) virtual public returns (bool);\r\n  function detachSelf() virtual public returns (bool);\r\n  function detachSelfAddress(address _address) virtual public returns (bool);\r\n  function suspendUser(uint256 _userId) virtual public returns (bool);\r\n  function restoreUser(uint256 _userId) virtual public returns (bool);\r\n  function updateUser(uint256 _userId, uint256 _validUntilTime, bool _suspended)\r\n    virtual public returns (bool);\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    virtual public returns (bool);\r\n  function updateUserAllExtended(uint256 _userId, uint256[] memory _values)\r\n    virtual public returns (bool);\r\n  function updateUserFull(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] memory _values) virtual public returns (bool);\r\n}\r\n\r\n// File: @c-layer/oracle/contracts/interface/IRatesProvider.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract IRatesProvider {\r\n\r\n  function defineRatesExternal(uint256[] calldata _rates) virtual external returns (bool);\r\n\r\n  function name() virtual public view returns (string memory);\r\n\r\n  function rate(bytes32 _currency) virtual public view returns (uint256);\r\n\r\n  function currencies() virtual public view\r\n    returns (bytes32[] memory, uint256[] memory, uint256);\r\n  function rates() virtual public view returns (uint256, uint256[] memory);\r\n\r\n  function convert(uint256 _amount, bytes32 _fromCurrency, bytes32 _toCurrency)\r\n    virtual public view returns (uint256);\r\n\r\n  function defineCurrencies(\r\n    bytes32[] memory _currencies,\r\n    uint256[] memory _decimals,\r\n    uint256 _rateOffset) virtual public returns (bool);\r\n  function defineRates(uint256[] memory _rates) virtual public returns (bool);\r\n\r\n  event RateOffset(uint256 rateOffset);\r\n  event Currencies(bytes32[] currencies, uint256[] decimals);\r\n  event Rate(bytes32 indexed currency, uint256 rate);\r\n}\r\n\r\n// File: @c-layer/token/contracts/interface/IRule.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: @c-layer/token/contracts/interface/ITokenStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenStorage\r\n * @dev Token storage interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract ITokenStorage {\r\n  enum TransferCode {\r\n    UNKNOWN,\r\n    OK,\r\n    INVALID_SENDER,\r\n    NO_RECIPIENT,\r\n    INSUFFICIENT_TOKENS,\r\n    LOCKED,\r\n    FROZEN,\r\n    RULE,\r\n    INVALID_RATE,\r\n    NON_REGISTRED_SENDER,\r\n    NON_REGISTRED_RECEIVER,\r\n    LIMITED_EMISSION,\r\n    LIMITED_RECEPTION\r\n  }\r\n\r\n  enum Scope {\r\n    DEFAULT\r\n  }\r\n\r\n  enum AuditStorageMode {\r\n    ADDRESS,\r\n    USER_ID,\r\n    SHARED\r\n  }\r\n\r\n  enum AuditTriggerMode {\r\n    UNDEFINED,\r\n    NONE,\r\n    SENDER_ONLY,\r\n    RECEIVER_ONLY,\r\n    BOTH\r\n  }\r\n\r\n  address internal constant ANY_ADDRESSES = address(0x416e79416464726573736573); // \"AnyAddresses\"\r\n\r\n  event OracleDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n  event TokenDelegateDefined(uint256 indexed delegateId, address delegate, uint256[] configurations);\r\n  event TokenDelegateRemoved(uint256 indexed delegateId);\r\n  event AuditConfigurationDefined(\r\n    uint256 indexed configurationId,\r\n    uint256 scopeId,\r\n    AuditTriggerMode mode,\r\n    uint256[] senderKeys,\r\n    uint256[] receiverKeys,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n  event AuditTriggersDefined(\r\n    uint256 indexed configurationId,\r\n    address[] senders,\r\n    address[] receivers,\r\n    AuditTriggerMode[] modes);\r\n  event AuditsRemoved(address scope, uint256 scopeId);\r\n  event SelfManaged(address indexed holder, bool active);\r\n\r\n  event Minted(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event Burned(address indexed token, uint256 amount);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed lock,\r\n    address sender,\r\n    address receiver,\r\n    uint256 startAt,\r\n    uint256 endAt\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimDefined(\r\n    address indexed token,\r\n    address indexed claim,\r\n    uint256 claimAt);\r\n  event TokenLocksDefined(\r\n    address indexed token,\r\n    address[] locks);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event LogTransferData(\r\n    address token, address caller, address sender, address receiver,\r\n    uint256 senderId, uint256[] senderKeys, bool senderFetched,\r\n    uint256 receiverId, uint256[] receiverKeys, bool receiverFetched,\r\n    uint256 value, uint256 convertedValue);\r\n  event LogTransferAuditData(\r\n    uint256 auditConfigurationId, uint256 scopeId,\r\n    address currency, IRatesProvider ratesProvider,\r\n    bool senderAuditRequired, bool receiverAuditRequired);\r\n  event LogAuditData(\r\n    uint64 createdAt, uint64 lastTransactionAt,\r\n    uint256 cumulatedEmission, uint256 cumulatedReception\r\n  );\r\n}\r\n\r\n// File: @c-layer/token/contracts/interface/ITokenCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\nabstract contract ITokenCore is ITokenStorage, IOperableCore {\r\n\r\n  function name() virtual public view returns (string memory);\r\n  function oracle() virtual public view returns (\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n\r\n  function auditConfiguration(uint256 _configurationId)\r\n    virtual public view returns (\r\n      uint256 scopeId,\r\n      AuditTriggerMode _mode,\r\n      uint256[] memory senderKeys,\r\n      uint256[] memory receiverKeys,\r\n      IRatesProvider ratesProvider,\r\n      address currency);\r\n  function auditTrigger(uint256 _configurationId, address _sender, address _receiver)\r\n    virtual public view returns (AuditTriggerMode);\r\n  function delegatesConfigurations(uint256 _delegateId)\r\n    virtual public view returns (uint256[] memory);\r\n\r\n  function auditCurrency(\r\n    address _scope,\r\n    uint256 _scopeId\r\n  ) virtual external view returns (address currency);\r\n  function audit(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    AuditStorageMode _storageMode,\r\n    bytes32 _storageId) virtual external view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n\r\n  /**************  ERC20  **************/\r\n  function tokenName() virtual external view returns (string memory);\r\n  function tokenSymbol() virtual external view returns (string memory);\r\n\r\n  function decimals() virtual external returns (uint256);\r\n  function totalSupply() virtual external returns (uint256);\r\n  function balanceOf(address) virtual external returns (uint256);\r\n  function allowance(address, address) virtual external returns (uint256);\r\n  function transfer(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function transferFrom(address, address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function approve(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function increaseApproval(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function decreaseApproval(address, address, uint256)\r\n    virtual external returns (bool status);\r\n\r\n  /***********  TOKEN DATA   ***********/\r\n  function token(address _token) virtual external view returns (\r\n    bool mintingFinished,\r\n    uint256 allTimeMinted,\r\n    uint256 allTimeBurned,\r\n    uint256 allTimeSeized,\r\n    address[] memory locks,\r\n    uint256 freezedUntil,\r\n    IRule[] memory);\r\n  function lock(address _lock, address _sender, address _receiver) virtual external view returns (\r\n    uint64 startAt, uint64 endAt);\r\n  function canTransfer(address, address, uint256)\r\n    virtual external returns (uint256);\r\n\r\n  /***********  TOKEN ADMIN  ***********/\r\n  function mint(address, address[] calldata, uint256[] calldata)\r\n    virtual external returns (bool);\r\n  function finishMinting(address)\r\n    virtual external returns (bool);\r\n  function burn(address, uint256)\r\n    virtual external returns (bool);\r\n  function seize(address _token, address, uint256)\r\n    virtual external returns (bool);\r\n  function defineLock(address, address, address, uint64, uint64)\r\n    virtual external returns (bool);\r\n  function defineTokenLocks(address _token, address[] memory locks)\r\n    virtual external returns (bool);\r\n  function freezeManyAddresses(\r\n    address _token,\r\n    address[] calldata _addresses,\r\n    uint256 _until) virtual external returns (bool);\r\n  function defineRules(address, IRule[] calldata) virtual external returns (bool);\r\n\r\n  /************  CORE ADMIN  ************/\r\n  function defineToken(\r\n    address _token,\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals) virtual external returns (bool);\r\n\r\n  function defineOracle(\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency) virtual external returns (bool);\r\n  function defineTokenDelegate(\r\n    uint256 _delegateId,\r\n    address _delegate,\r\n    uint256[] calldata _configurations) virtual external returns (bool);\r\n  function defineAuditConfiguration(\r\n    uint256 _configurationId,\r\n    uint256 _scopeId,\r\n    AuditTriggerMode _mode,\r\n    uint256[] calldata _senderKeys,\r\n    uint256[] calldata _receiverKeys,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency) virtual external returns (bool);\r\n  function removeAudits(address _scope, uint256 _scopeId)\r\n    virtual external returns (bool);\r\n  function defineAuditTriggers(\r\n    uint256 _configurationId,\r\n    address[] calldata _senders,\r\n    address[] calldata _receivers,\r\n    AuditTriggerMode[] calldata _modes) virtual external returns (bool);\r\n\r\n  function isSelfManaged(address _owner)\r\n    virtual external view returns (bool);\r\n  function manageSelf(bool _active)\r\n    virtual external returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IVotingSessionStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IVotingSessionStorage\r\n * @dev IVotingSessionStorage interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IVotingSessionStorage is IVotingDefinitions {\r\n\r\n  event SessionRuleUpdated(\r\n    uint64 campaignPeriod,\r\n    uint64 votingPeriod,\r\n    uint64 executionPeriod,\r\n    uint64 gracePeriod,\r\n    uint64 periodOffset,\r\n    uint8 openProposals,\r\n    uint8 maxProposals,\r\n    uint8 maxProposalsOperator,\r\n    uint256 newProposalThreshold,\r\n    address[] nonVotingAddresses);\r\n  event ResolutionRequirementUpdated(\r\n    address target,\r\n    bytes4 methodSignature,\r\n    uint128 majority,\r\n    uint128 quorum,\r\n    uint256 executionThreshold\r\n  );\r\n\r\n  event TokenDefined(address token, address core);\r\n  event DelegateDefined(address delegate);\r\n\r\n  event SponsorDefined(address indexed voter, address address_, uint64 until);\r\n\r\n  event SessionScheduled(uint256 indexed sessionId, uint64 voteAt);\r\n  event SessionArchived(uint256 indexed sessionId);\r\n  event ProposalDefined(uint256 indexed sessionId, uint8 proposalId);\r\n  event ProposalUpdated(uint256 indexed sessionId, uint8 proposalId);\r\n  event ProposalCancelled(uint256 indexed sessionId, uint8 proposalId);\r\n  event ResolutionExecuted(uint256 indexed sessionId, uint8 proposalId);\r\n\r\n  event Vote(uint256 indexed sessionId, address voter, uint256 weight);\r\n}\r\n\r\n// File: contracts/interface/IVotingSessionDelegate.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title IVotingSessionDelegate\r\n * @dev IVotingSessionDelegate interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IVotingSessionDelegate is IVotingSessionStorage {\r\n\r\n  function nextSessionAt(uint256 _time) virtual public view returns (uint256 at);\r\n\r\n  function sessionStateAt(uint256 _sessionId, uint256 _time) virtual public view returns (SessionState);\r\n\r\n  function newProposalThresholdAt(uint256 _sessionId, uint256 _proposalsCount)\r\n    virtual public view returns (uint256);\r\n\r\n  function proposalApproval(uint256 _sessionId, uint8 _proposalId)\r\n    virtual public view returns (bool);\r\n\r\n  function proposalStateAt(uint256 _sessionId, uint8 _proposalId, uint256 _time)\r\n    virtual public view returns (ProposalState);\r\n\r\n  function updateSessionRule(\r\n    uint64 _campaignPeriod,\r\n    uint64 _votingPeriod,\r\n    uint64 _executionPeriod,\r\n    uint64 _gracePeriod,\r\n    uint64 _periodOffset,\r\n    uint8 _openProposals,\r\n    uint8 _maxProposals,\r\n    uint8 _maxProposalsQuaestor,\r\n    uint256 _newProposalThreshold,\r\n    address[] memory _nonVotingAddresses\r\n  ) virtual public returns (bool);\r\n\r\n  function updateResolutionRequirements(\r\n    address[] memory _targets,\r\n    bytes4[] memory _methodSignatures,\r\n    uint128[] memory _majority,\r\n    uint128[] memory _quorum,\r\n    uint256[] memory _executionThreshold\r\n  ) virtual public returns (bool);\r\n\r\n  function defineProposal(\r\n    string memory _name,\r\n    string memory _url,\r\n    bytes32 _proposalHash,\r\n    address _resolutionTarget,\r\n    bytes memory _resolutionAction,\r\n    uint8 _dependsOn,\r\n    uint8 _alternativeOf\r\n  ) virtual public returns (bool);\r\n\r\n  function updateProposal(\r\n    uint8 _proposalId,\r\n    string memory _name,\r\n    string memory _url,\r\n    bytes32 _proposalHash,\r\n    address _resolutionTarget,\r\n    bytes memory _resolutionAction,\r\n    uint8 _dependsOn,\r\n    uint8 _alternativeOf\r\n  ) virtual public returns (bool);\r\n  function cancelProposal(uint8 _proposalId) virtual public returns (bool);\r\n\r\n  function submitVote(uint256 _votes) virtual public returns (bool);\r\n  function submitVotesOnBehalf(\r\n    address[] memory _voters,\r\n    uint256 _votes\r\n  ) virtual public returns (bool);\r\n\r\n  function executeResolutions(uint8[] memory _proposalIds) virtual public returns (bool);\r\n\r\n  function archiveSession() virtual public returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/interface/IVotingSessionManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IVotingSessionManager\r\n * @dev IVotingSessionManager interface\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IVotingSessionManager is IVotingSessionStorage {\r\n\r\n  function contracts() public virtual view returns (\r\n    IVotingSessionDelegate delegate, ITokenProxy token, ITokenCore core);\r\n\r\n  function sessionRule() virtual public view returns (\r\n    uint64 campaignPeriod,\r\n    uint64 votingPeriod,\r\n    uint64 executionPeriod,\r\n    uint64 gracePeriod,\r\n    uint64 periodOffset,\r\n    uint8 openProposals,\r\n    uint8 maxProposals,\r\n    uint8 maxProposalsOperator,\r\n    uint256 newProposalThreshold,\r\n    address[] memory nonVotingAddresses);\r\n\r\n  function resolutionRequirement(address _target, bytes4 _method) virtual public view returns (\r\n    uint128 majority,\r\n    uint128 quorum,\r\n    uint256 executionThreshold);\r\n\r\n  function oldestSessionId() virtual public view returns (uint256);\r\n\r\n  function currentSessionId() virtual public view returns (uint256);\r\n\r\n  function session(uint256 _sessionId) virtual public view returns (\r\n    uint64 campaignAt,\r\n    uint64 voteAt,\r\n    uint64 executionAt,\r\n    uint64 graceAt,\r\n    uint64 closedAt,\r\n    uint256 sessionProposalsCount,\r\n    uint256 participation,\r\n    uint256 totalSupply,\r\n    uint256 circulatingSupply);\r\n\r\n  function proposal(uint256 _sessionId, uint8 _proposalId) virtual public view returns (\r\n    string memory name,\r\n    string memory url,\r\n    bytes32 proposalHash,\r\n    address resolutionTarget,\r\n    bytes memory resolutionAction);\r\n  function proposalData(uint256 _sessionId, uint8 _proposalId) virtual public view returns (\r\n    address proposedBy,\r\n    uint128 requirementMajority,\r\n    uint128 requirementQuorum,\r\n    uint256 executionThreshold,\r\n    uint8 dependsOn,\r\n    uint8 alternativeOf,\r\n    uint256 alternativesMask,\r\n    uint256 approvals);\r\n\r\n  function sponsorOf(address _voter) virtual public view returns (address sponsor, uint64 until);\r\n\r\n  function lastVoteOf(address _voter) virtual public view returns (uint64 at);\r\n\r\n  function nextSessionAt(uint256 _time) virtual public view returns (uint256 at);\r\n\r\n  function sessionStateAt(uint256 _sessionId, uint256 _time) virtual public view returns (SessionState);\r\n\r\n  function newProposalThresholdAt(uint256 _sessionId, uint256 _proposalsCount)\r\n    virtual public view returns (uint256);\r\n\r\n  function proposalApproval(uint256 _sessionId, uint8 _proposalId)\r\n    virtual public view returns (bool);\r\n\r\n  function proposalStateAt(uint256 _sessionId, uint8 _proposalId, uint256 _time)\r\n    virtual public view returns (ProposalState);\r\n\r\n  function defineContracts(ITokenProxy _token, IVotingSessionDelegate _delegate)\r\n    virtual public returns (bool);\r\n\r\n  function updateSessionRule(\r\n    uint64 _campaignPeriod,\r\n    uint64 _votingPeriod,\r\n    uint64 _executionPeriod,\r\n    uint64 _gracePeriod,\r\n    uint64 _periodOffset,\r\n    uint8 _openProposals,\r\n    uint8 _maxProposals,\r\n    uint8 _maxProposalsQuaestor,\r\n    uint256 _newProposalThreshold,\r\n    address[] memory _nonVotingAddresses\r\n  ) virtual public returns (bool);\r\n\r\n  function updateResolutionRequirements(\r\n    address[] memory _targets,\r\n    bytes4[] memory _methodSignatures,\r\n    uint128[] memory _majority,\r\n    uint128[] memory _quorum,\r\n    uint256[] memory _executionThreshold\r\n  ) virtual public returns (bool);\r\n\r\n  function defineSponsor(address _sponsor, uint64 _until) virtual public returns (bool);\r\n  function defineSponsorOf(Ownable _contract, address _sponsor, uint64 _until)\r\n    virtual public returns (bool);\r\n\r\n  function defineProposal(\r\n    string memory _name,\r\n    string memory _url,\r\n    bytes32 _proposalHash,\r\n    address _resolutionTarget,\r\n    bytes memory _resolutionAction,\r\n    uint8 _dependsOn,\r\n    uint8 _alternativeOf\r\n  ) virtual public returns (bool);\r\n\r\n  function updateProposal(\r\n    uint8 _proposalId,\r\n    string memory _name,\r\n    string memory _url,\r\n    bytes32 _proposalHash,\r\n    address _resolutionTarget,\r\n    bytes memory _resolutionAction,\r\n    uint8 _dependsOn,\r\n    uint8 _alternativeOf\r\n  ) virtual public returns (bool);\r\n  function cancelProposal(uint8 _proposalId) virtual public returns (bool);\r\n\r\n  function submitVote(uint256 _votes) virtual public returns (bool);\r\n  function submitVotesOnBehalf(\r\n    address[] memory _voters,\r\n    uint256 _votes\r\n  ) virtual public returns (bool);\r\n\r\n  function executeResolutions(uint8[] memory _proposalIds) virtual public returns (bool);\r\n\r\n  function archiveSession() virtual public returns (bool);\r\n}\r\n\r\n// File: @c-layer/common/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/voting/VotingSessionStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title VotingSessionStorage\r\n * @dev VotingSessionStorage contract\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\ncontract VotingSessionStorage is IVotingSessionStorage {\r\n  using SafeMath for uint256;\r\n\r\n  address internal constant ANY_ADDRESSES = address(0x416e79416464726573736573); // \"AnyAddresses\"\r\n\r\n  struct SessionRule {\r\n    uint64 campaignPeriod; // Before it starts, the vote will be locked\r\n    uint64 votingPeriod; // Time period for voters to submit their votes\r\n    uint64 executionPeriod; // Time period for executing resolutions\r\n    uint64 gracePeriod; // delay between two votes\r\n\r\n    uint64 periodOffset; // Offset before the first session period\r\n\r\n    uint8 openProposals;\r\n    uint8 maxProposals;\r\n    uint8 maxProposalsOperator;\r\n    uint256 newProposalThreshold;\r\n\r\n    address[] nonVotingAddresses;\r\n  }\r\n\r\n  struct ResolutionRequirement {\r\n    uint128 majority;\r\n    uint128 quorum;\r\n    uint256 executionThreshold;\r\n  }\r\n\r\n  struct Session {\r\n    uint64 campaignAt;\r\n    uint64 voteAt;\r\n    uint64 executionAt;\r\n    uint64 graceAt;\r\n    uint64 closedAt;\r\n    uint8 proposalsCount;\r\n    uint256 participation;\r\n    uint256 totalSupply;\r\n    uint256 votingSupply;\r\n\r\n    mapping(uint256 => Proposal) proposals;\r\n  }\r\n\r\n  // A proposal may be semanticaly in one of the following state:\r\n  // DEFINED, VOTED, RESOLVED(?), PROCESSED\r\n  struct Proposal {\r\n    string name;\r\n    string url;\r\n    bytes32 proposalHash;\r\n    address proposedBy;\r\n    address resolutionTarget;\r\n    bytes resolutionAction;\r\n\r\n    ResolutionRequirement requirement;\r\n    uint8 dependsOn; // The previous proposal must be either non approved or executed\r\n    bool resolutionExecuted;\r\n    bool cancelled;\r\n\r\n    uint8 alternativeOf;\r\n    uint256 approvals;\r\n    uint256 alternativesMask; // only used for the parent alternative proposal\r\n  }\r\n\r\n  struct Sponsor {\r\n    address address_;\r\n    uint64 until;\r\n  }\r\n\r\n  IVotingSessionDelegate internal delegate_;\r\n  ITokenProxy internal token_;\r\n  ITokenCore internal core_;\r\n\r\n  SessionRule internal sessionRule_ = SessionRule(\r\n    CAMPAIGN_PERIOD,\r\n    VOTING_PERIOD,\r\n    EXECUTION_PERIOD,\r\n    GRACE_PERIOD,\r\n    OFFSET_PERIOD,\r\n    OPEN_PROPOSALS,\r\n    MAX_PROPOSALS,\r\n    MAX_PROPOSALS_OPERATOR,\r\n    NEW_PROPOSAL_THRESHOLD,\r\n    new address[](0)\r\n  );\r\n\r\n  mapping(address => mapping(bytes4 => ResolutionRequirement)) internal resolutionRequirements;\r\n\r\n  uint256 internal oldestSessionId_ = 1; // '1' simplifies checks when no sessions exists\r\n  uint256 internal currentSessionId_ = 0;\r\n  mapping(uint256 => Session) internal sessions;\r\n  mapping(address => uint64) internal lastVotes;\r\n  mapping(address => Sponsor) internal sponsors;\r\n\r\n  /**\r\n   * @dev currentTime\r\n   */\r\n  function currentTime() internal view returns (uint256) {\r\n    // solhint-disable-next-line not-rely-on-time\r\n    return block.timestamp;\r\n  }\r\n}\r\n\r\n// File: contracts/voting/VotingSessionManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title VotingSessionManager\r\n * @dev VotingSessionManager contract\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   VM01: Session doesn't exist\r\n *   VM02: Token is invalid\r\n *   VM03: Delegate is invalid\r\n *   VM04: Token has no valid core\r\n *   VM05: Only contract owner may define its sponsor\r\n */\r\ncontract VotingSessionManager is IVotingSessionManager, DelegateCallView, VotingSessionStorage {\r\n  using DelegateCall for address;\r\n\r\n  modifier onlyOperator() {\r\n    require(core_.hasProxyPrivilege(\r\n      msg.sender, address(this), msg.sig), \"VM01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor(ITokenProxy _token, IVotingSessionDelegate _delegate) public {\r\n    defineContractsInternal(_token, _delegate);\r\n\r\n    resolutionRequirements[ANY_TARGET][ANY_METHOD] =\r\n      ResolutionRequirement(DEFAULT_MAJORITY, DEFAULT_QUORUM, DEFAULT_EXECUTION_THRESHOLD);\r\n  }\r\n\r\n  /**\r\n   * @dev token\r\n   */\r\n  function contracts() public override view returns (\r\n    IVotingSessionDelegate delegate, ITokenProxy token, ITokenCore core)\r\n  {\r\n    return (delegate_, token_, core_);\r\n  }\r\n\r\n  /**\r\n   * @dev sessionRule\r\n   */\r\n  function sessionRule() public override view returns (\r\n    uint64 campaignPeriod,\r\n    uint64 votingPeriod,\r\n    uint64 executionPeriod,\r\n    uint64 gracePeriod,\r\n    uint64 periodOffset,\r\n    uint8 openProposals,\r\n    uint8 maxProposals,\r\n    uint8 maxProposalsOperator,\r\n    uint256 newProposalThreshold,\r\n    address[] memory nonVotingAddresses) {\r\n    return (\r\n      sessionRule_.campaignPeriod,\r\n      sessionRule_.votingPeriod,\r\n      sessionRule_.executionPeriod,\r\n      sessionRule_.gracePeriod,\r\n      sessionRule_.periodOffset,\r\n      sessionRule_.openProposals,\r\n      sessionRule_.maxProposals,\r\n      sessionRule_.maxProposalsOperator,\r\n      sessionRule_.newProposalThreshold,\r\n      sessionRule_.nonVotingAddresses);\r\n  }\r\n\r\n  /**\r\n   * @dev resolutionRequirement\r\n   */\r\n  function resolutionRequirement(address _target, bytes4 _method) public override view returns (\r\n    uint128 majority,\r\n    uint128 quorum,\r\n    uint256 executionThreshold) {\r\n    ResolutionRequirement storage requirement =\r\n      resolutionRequirements[_target][_method];\r\n\r\n    return (\r\n      requirement.majority,\r\n      requirement.quorum,\r\n      requirement.executionThreshold);\r\n  }\r\n\r\n  /**\r\n   * @dev oldestSessionId\r\n   */\r\n  function oldestSessionId() public override view returns (uint256) {\r\n    return oldestSessionId_;\r\n  }\r\n\r\n  /**\r\n   * @dev currentSessionId\r\n   */\r\n  function currentSessionId() public override view returns (uint256) {\r\n    return currentSessionId_;\r\n  }\r\n\r\n  /**\r\n   * @dev session\r\n   */\r\n  function session(uint256 _sessionId) public override view returns (\r\n    uint64 campaignAt,\r\n    uint64 voteAt,\r\n    uint64 executionAt,\r\n    uint64 graceAt,\r\n    uint64 closedAt,\r\n    uint256 proposalsCount,\r\n    uint256 participation,\r\n    uint256 totalSupply,\r\n    uint256 votingSupply)\r\n  {\r\n    Session storage session_ = sessions[_sessionId];\r\n    return (\r\n      session_.campaignAt,\r\n      session_.voteAt,\r\n      session_.executionAt,\r\n      session_.graceAt,\r\n      session_.closedAt,\r\n      session_.proposalsCount,\r\n      session_.participation,\r\n      session_.totalSupply,\r\n      session_.votingSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev sponsorOf\r\n   */\r\n  function sponsorOf(address _voter) public override view returns (address address_, uint64 until) {\r\n    Sponsor storage sponsor_ = sponsors[_voter];\r\n    address_ = sponsor_.address_;\r\n    until = sponsor_.until;\r\n  }\r\n\r\n  /**\r\n   * @dev lastVoteOf\r\n   */\r\n  function lastVoteOf(address _voter) public override view returns (uint64 at) {\r\n    return lastVotes[_voter];\r\n  }\r\n\r\n  /**\r\n   * @dev proposal\r\n   */\r\n  function proposal(uint256 _sessionId, uint8 _proposalId) public override view returns (\r\n    string memory name,\r\n    string memory url,\r\n    bytes32 proposalHash,\r\n    address resolutionTarget,\r\n    bytes memory resolutionAction)\r\n  {\r\n    Proposal storage proposal_ = sessions[_sessionId].proposals[_proposalId];\r\n    return (\r\n      proposal_.name,\r\n      proposal_.url,\r\n      proposal_.proposalHash,\r\n      proposal_.resolutionTarget,\r\n      proposal_.resolutionAction);\r\n  }\r\n\r\n  /**\r\n   * @dev proposalData\r\n   */\r\n  function proposalData(uint256 _sessionId, uint8 _proposalId) public override view returns (\r\n    address proposedBy,\r\n    uint128 requirementMajority,\r\n    uint128 requirementQuorum,\r\n    uint256 executionThreshold,\r\n    uint8 dependsOn,\r\n    uint8 alternativeOf,\r\n    uint256 alternativesMask,\r\n    uint256 approvals)\r\n  {\r\n    Proposal storage proposal_ = sessions[_sessionId].proposals[_proposalId];\r\n    return (\r\n      proposal_.proposedBy,\r\n      proposal_.requirement.majority,\r\n      proposal_.requirement.quorum,\r\n      proposal_.requirement.executionThreshold,\r\n      proposal_.dependsOn,\r\n      proposal_.alternativeOf,\r\n      proposal_.alternativesMask,\r\n      proposal_.approvals);\r\n  }\r\n\r\n  /**\r\n   * @dev nextSessionAt\r\n   */\r\n  function nextSessionAt(uint256) public override view returns (uint256) {\r\n    return _delegateCallUint256(address(delegate_));\r\n  }\r\n\r\n  /**\r\n   * @dev sessionStateAt\r\n   */\r\n  function sessionStateAt(uint256, uint256) public override\r\n    view returns (SessionState)\r\n  {\r\n    return SessionState(_delegateCallUint256(address(delegate_)));\r\n  }\r\n\r\n  /**\r\n   * @dev newProposalThresholdAt\r\n   */\r\n  function newProposalThresholdAt(uint256, uint256)\r\n    public override view returns (uint256)\r\n  {\r\n    return _delegateCallUint256(address(delegate_));\r\n  }\r\n\r\n  /**\r\n   * @dev proposalApproval\r\n   */\r\n  function proposalApproval(uint256, uint8)\r\n    public override view returns (bool)\r\n  {\r\n    return _delegateCallBool(address(delegate_));\r\n  }\r\n\r\n  /**\r\n   * @dev proposalStateAt\r\n   */\r\n  function proposalStateAt(uint256, uint8, uint256)\r\n    public override view returns (ProposalState)\r\n  {\r\n    return ProposalState(_delegateCallUint256(address(delegate_)));\r\n  }\r\n\r\n  /**\r\n   * @dev define contracts\r\n   */\r\n  function defineContracts(ITokenProxy _token, IVotingSessionDelegate _delegate)\r\n    public override onlyOperator() returns (bool)\r\n  {\r\n    return defineContractsInternal(_token, _delegate);\r\n  }\r\n\r\n  /**\r\n   * @dev updateSessionRule\r\n   */\r\n  function updateSessionRule(\r\n    uint64, uint64, uint64, uint64, uint64, uint8, uint8, uint8, uint256, address[] memory)\r\n    public override onlyOperator() returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev updateResolutionRequirements\r\n   */\r\n  function updateResolutionRequirements(\r\n    address[] memory, bytes4[] memory, uint128[] memory, uint128[] memory, uint256[] memory)\r\n    public override onlyOperator() returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev defineSponsor\r\n   */\r\n  function defineSponsor(address _sponsor, uint64 _until) public override returns (bool) {\r\n    sponsors[msg.sender] = Sponsor(_sponsor, _until);\r\n    emit SponsorDefined(msg.sender, _sponsor, _until);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev defineSponsorOf\r\n   */\r\n  function defineSponsorOf(Ownable _contract, address _sponsor, uint64 _until)\r\n    public override returns (bool)\r\n  {\r\n    require(_contract.owner() == msg.sender, \"VM05\");\r\n    sponsors[address(_contract)] = Sponsor(_sponsor, _until);\r\n    emit SponsorDefined(address(_contract), _sponsor, _until);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev defineProposal\r\n   */\r\n  function defineProposal(string memory, string memory,\r\n    bytes32, address, bytes memory, uint8, uint8) public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev updateProposal\r\n   */\r\n  function updateProposal(\r\n    uint8, string memory, string memory, bytes32, address, bytes memory, uint8, uint8)\r\n    public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev cancelProposal\r\n   */\r\n  function cancelProposal(uint8) public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev submitVote\r\n   */\r\n  function submitVote(uint256) public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev submitVotesOnBehalf\r\n   */\r\n  function submitVotesOnBehalf(address[] memory, uint256) public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev execute resolutions\r\n   */\r\n  function executeResolutions(uint8[] memory) public override returns (bool)\r\n  {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev archiveSession\r\n   **/\r\n  function archiveSession() public override returns (bool) {\r\n    return address(delegate_)._delegateCall();\r\n  }\r\n\r\n  /**\r\n   * @dev define contracts internal\r\n   */\r\n  function defineContractsInternal(ITokenProxy _token, IVotingSessionDelegate _delegate)\r\n    internal returns (bool)\r\n  {\r\n    require(address(_token) != address(0), \"VM02\");\r\n    require(address(_delegate) != address(0), \"VM03\");\r\n\r\n    ITokenCore core = ITokenCore(_token.core());\r\n    require(address(core) != address(0), \"VM04\");\r\n\r\n    if (token_ != _token || core_ != core) {\r\n      token_ = _token;\r\n      core_ = core;\r\n      emit TokenDefined(address(token_), address(core_));\r\n    }\r\n\r\n    if (delegate_ != _delegate) {\r\n      delegate_ = _delegate;\r\n      emit DelegateDefined(address(delegate_));\r\n    }\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenProxy\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IVotingSessionDelegate\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalId\",\"type\":\"uint8\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalId\",\"type\":\"uint8\"}],\"name\":\"ProposalDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalId\",\"type\":\"uint8\"}],\"name\":\"ProposalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalId\",\"type\":\"uint8\"}],\"name\":\"ResolutionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"majority\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"quorum\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionThreshold\",\"type\":\"uint256\"}],\"name\":\"ResolutionRequirementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"SessionArchived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"campaignPeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"votingPeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"executionPeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gracePeriod\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"periodOffset\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"openProposals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxProposals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxProposalsOperator\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nonVotingAddresses\",\"type\":\"address[]\"}],\"name\":\"SessionRuleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"voteAt\",\"type\":\"uint64\"}],\"name\":\"SessionScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"until\",\"type\":\"uint64\"}],\"name\":\"SponsorDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"core\",\"type\":\"address\"}],\"name\":\"TokenDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"archiveSession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cancelProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"contract IVotingSessionDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"contract ITokenProxy\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ITokenCore\",\"name\":\"core\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSessionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenProxy\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IVotingSessionDelegate\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"defineContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"defineProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"defineSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Ownable\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"defineSponsorOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"name\":\"executeResolutions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"forwardCallBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"lastVoteOf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"at\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newProposalThresholdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextSessionAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestSessionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_proposalId\",\"type\":\"uint8\"}],\"name\":\"proposal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolutionTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"resolutionAction\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"proposalApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_proposalId\",\"type\":\"uint8\"}],\"name\":\"proposalData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposedBy\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"requirementMajority\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"requirementQuorum\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"executionThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dependsOn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alternativeOf\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"alternativesMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalStateAt\",\"outputs\":[{\"internalType\":\"enum IVotingDefinitions.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"resolutionRequirement\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"majority\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quorum\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"executionThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"session\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"campaignAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"voteAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executionAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"graceAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"closedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"proposalsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sessionRule\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"campaignPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"votingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executionPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gracePeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"periodOffset\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"openProposals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxProposals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxProposalsOperator\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"nonVotingAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionStateAt\",\"outputs\":[{\"internalType\":\"enum IVotingDefinitions.SessionState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"sponsorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"until\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submitVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submitVotesOnBehalf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"updateProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"updateResolutionRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"updateSessionRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VotingSessionManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000081df9efb1e970517ff5b32c2f485f791f3410164000000000000000000000000c0685b5e184276e5aac8a652311627bbfefd0cda","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ff0ae0e66aedfa5785e70b68eca1c867537b8a15653676f41169b4294a398302"}]}