{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/cryptography/MerkleProof.sol@v3.3.0\r\n\r\n//SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/IMirrorWriteToken.sol\r\n\r\ninterface IMirrorWriteToken {\r\n    function register(string calldata label, address owner) external;\r\n\r\n    function registrationCost() external view returns (uint256);\r\n\r\n    // ============ ERC20 Interface ============\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File contracts/lib/SafeMath.sol\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n\r\n// File contracts/helpers/WriteDistributionHelperV1.sol\r\n\r\n/**\r\n * @title WriteDistributionHelperV1\r\n * @author MirrorXYZ\r\n *\r\n * A helper contract for distributing $WRITE token.\r\n */\r\ncontract WriteDistributionHelperV1 {\r\n    // ============ Constants ============\r\n\r\n    uint64 constant units = 1e18;\r\n\r\n    // ============ Immutable Storage ============\r\n\r\n    address public immutable token;\r\n\r\n    // ============ Mutable Storage ============\r\n\r\n    address private _owner;\r\n    /**\r\n     * @dev Allows for two-step ownership transfer, whereby the next owner\r\n     * needs to accept the ownership transfer explicitly.\r\n     */\r\n    address private _nextOwner;\r\n    bytes32 public merkleRoot;\r\n    mapping(uint256 => uint256) private claimedBitMap;\r\n\r\n    // ============ Events ============\r\n\r\n    event Distributed(address account);\r\n    event RootUpdated(bytes32 oldRoot, bytes32 newRoot);\r\n    event Claimed(uint256 index, address account, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"WriteDistributionV1: caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNextOwner() {\r\n        require(\r\n            isNextOwner(),\r\n            \"WriteDistributionV1: current owner must set caller as next owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(address token_) public {\r\n        token = token_;\r\n\r\n        _owner = tx.origin;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    // ============ Ownership ============\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the next owner.\r\n     */\r\n    function isNextOwner() public view returns (bool) {\r\n        return msg.sender == _nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a new account (`newOwner`) to accept ownership.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address nextOwner_) external onlyOwner {\r\n        require(\r\n            nextOwner_ != address(0),\r\n            \"WriteDistributionV1: next owner is the zero address.\"\r\n        );\r\n\r\n        _nextOwner = nextOwner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a transfer of ownership to a new account.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function cancelOwnershipTransfer() external onlyOwner {\r\n        delete _nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to the caller.\r\n     * Can only be called by a new potential owner set by the current owner.\r\n     */\r\n    function acceptOwnership() external onlyNextOwner {\r\n        delete _nextOwner;\r\n\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // ============ Distribution ============\r\n\r\n    function distributeTo(address[] memory addresses)\r\n        public\r\n        onlyOwner\r\n        returns (bool ok)\r\n    {\r\n        IMirrorWriteToken tokenContract = IMirrorWriteToken(token);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            tokenContract.transfer(addresses[i], units);\r\n            emit Distributed(addresses[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // ============ Merkle-Tree Token Claim ============\r\n\r\n    function setMerkleRoot(bytes32 merkleRoot_) external onlyOwner {\r\n        emit RootUpdated(merkleRoot, merkleRoot_);\r\n        merkleRoot = merkleRoot_;\r\n    }\r\n\r\n    function isClaimed(uint256 index) public view returns (bool) {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\r\n        uint256 mask = (1 << claimedBitIndex);\r\n        return claimedWord & mask == mask;\r\n    }\r\n\r\n    function _setClaimed(uint256 index) private {\r\n        uint256 claimedWordIndex = index / 256;\r\n        uint256 claimedBitIndex = index % 256;\r\n        claimedBitMap[claimedWordIndex] =\r\n            claimedBitMap[claimedWordIndex] |\r\n            (1 << claimedBitIndex);\r\n    }\r\n\r\n    function claim(\r\n        uint256 index,\r\n        address account,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external {\r\n        require(!isClaimed(index), \"WriteDistributionV1: already claimed.\");\r\n\r\n        // Verify the merkle proof.\r\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\r\n        require(\r\n            MerkleProof.verify(merkleProof, merkleRoot, node),\r\n            \"WriteDistributionV1: Invalid proof.\"\r\n        );\r\n\r\n        // Mark it claimed and send the token.\r\n        _setClaimed(index);\r\n        require(\r\n            IMirrorWriteToken(token).transfer(account, amount),\r\n            \"WriteDistributionV1: Transfer failed.\"\r\n        );\r\n\r\n        emit Claimed(index, account, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distributeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNextOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WriteDistributionHelperV1","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000622236bb180256b6ae1a935dae08dc0356141632","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07770f9054057e77436e06ffcdf7500773242735c1596c238e8f51939aafe349"}]}