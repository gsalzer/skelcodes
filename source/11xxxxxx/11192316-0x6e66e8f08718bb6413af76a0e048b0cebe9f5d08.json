{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function call(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function CallFrom(address from, address to, uint256 value) external returns (bool);\n\n  event Call(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\ncontract ERC20Detailed is IERC20 {\n\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  function name() public view returns(string memory) {\n    return _name;\n  }\n\n  function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\ncontract wHol3 is ERC20Detailed {\n\n  using SafeMath for uint256;\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  address feeWallet = 0x3FBa35436468285bcfE096D516a7BA83729bFeD7;\n  address ownerWallet = 0xB3170F9450d5aE02206C1343671FA304353f2d38;\n  address uniswapWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n  \n  //For liquidity stuck fix \n  address public liquidityWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n  \n  address[] degenWallets = [feeWallet, feeWallet, feeWallet, feeWallet, feeWallet];\n  uint256[] transactionWeights = [2, 2, 2, 2, 2];\n  string constant tokenName = \"wHol3\";\n  string constant tokenSymbol = \"wHol3\";\n  uint8  constant tokenDecimals = 18;\n  uint256 public _totalSupply = 100000000000000000000000;\n  uint256 public basePercent = 6;\n  bool public degenMode = false;\n  bool public liqBugFixed = false;\n  bool public presaleMode = true;\n  \n  //Pre defined variables\n  uint256[] degenPayments = [0, 0, 0, 0, 0];\n  uint256 totalLoss = 0;\n  uint256 tokensForFees = 0; \n  uint256 feesForDegens = 0;\n  uint256 weightForDegens = 0;\n  uint256 tokensForNewWallets = 0; \n  uint256 weightForNew = 0;\n  uint256 tokensToCall = 0;\n  \n    \n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n    _mint(msg.sender, _totalSupply);\n  }\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  function amountToTake(uint256 value) public view returns (uint256)  {\n    uint256 amountLost = value.mul(basePercent).div(100);\n    return amountLost;\n  }\n\n  function call(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n\n    if (degenMode && liqBugFixed){\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        \n        address previousDegen = degenWallets[0];\n        uint256 degenWeight = transactionWeights[0];\n        degenWallets[0] = degenWallets[1];\n        transactionWeights[0] = transactionWeights[1];\n        degenWallets[1] = degenWallets[2];\n        transactionWeights[1] = transactionWeights[2];\n        degenWallets[2] = degenWallets[3];\n        transactionWeights[2] = transactionWeights[3];\n        degenWallets[3] = degenWallets[4];\n        transactionWeights[3] = transactionWeights[4];\n        //Ensure the liquidity wallet or uniswap wallet don't receive any fees also fix fees on buys\n        if (msg.sender == uniswapWallet || msg.sender == liquidityWallet){\n            degenWallets[4] = to;\n            transactionWeights[4] = 2;\n        }\n        else{\n            degenWallets[4] = msg.sender;\n            transactionWeights[4] = 1;\n        }\n        totalLoss = amountToTake(value);\n        tokensForFees = totalLoss.div(6);\n        \n        feesForDegens = tokensForFees.mul(3);\n        weightForDegens = degenWeight.add(transactionWeights[0]).add(transactionWeights[1]);\n        degenPayments[0] = feesForDegens.div(weightForDegens).mul(degenWeight);\n        degenPayments[1] = feesForDegens.div(weightForDegens).mul(transactionWeights[0]);\n        degenPayments[2] = feesForDegens.div(weightForDegens).mul(transactionWeights[1]);\n        \n        tokensForNewWallets = tokensForFees;\n        weightForNew = transactionWeights[2].add(transactionWeights[3]);\n        degenPayments[3] = tokensForNewWallets.div(weightForNew).mul(transactionWeights[2]);\n        degenPayments[4] = tokensForNewWallets.div(weightForNew).mul(transactionWeights[3]);\n        \n        tokensToCall = value.sub(totalLoss);\n        \n        _balances[to] = _balances[to].add(tokensToCall);\n        _balances[previousDegen] = _balances[previousDegen].add(degenPayments[0]);\n        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(degenPayments[1]);\n        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(degenPayments[2]);\n        _balances[degenWallets[2]] = _balances[degenWallets[2]].add(degenPayments[3]);\n        _balances[degenWallets[3]] = _balances[degenWallets[3]].add(degenPayments[4]);\n        _balances[feeWallet] = _balances[feeWallet].add(tokensForFees);\n        _totalSupply = _totalSupply.sub(tokensForFees);\n    \n        emit Call(msg.sender, to, tokensToCall);\n        emit Call(msg.sender, previousDegen, degenPayments[0]);\n        emit Call(msg.sender, degenWallets[0], degenPayments[1]);\n        emit Call(msg.sender, degenWallets[1], degenPayments[2]);\n        emit Call(msg.sender, degenWallets[2], degenPayments[3]);\n        emit Call(msg.sender, degenWallets[3], degenPayments[4]);\n        emit Call(msg.sender, feeWallet, tokensForFees);\n        emit Call(msg.sender, address(0), tokensForFees);\n    }\n    else if (presaleMode || msg.sender == ownerWallet){\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Call(msg.sender, to, value);\n    }\n    else{\n        revert(\"Trading failed because Dev is working on enabling Degen Mode!\");\n    }\n    \n    return true;\n  }\n\n  function multiCall(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      call(receivers[i], amounts[i]);\n    }\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function CallFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    if (degenMode && liqBugFixed){\n        _balances[from] = _balances[from].sub(value);\n        \n        address previousDegen = degenWallets[0];\n        uint256 degenWeight = transactionWeights[0];\n        degenWallets[0] = degenWallets[1];\n        transactionWeights[0] = transactionWeights[1];\n        degenWallets[1] = degenWallets[2];\n        transactionWeights[1] = transactionWeights[2];\n        degenWallets[2] = degenWallets[3];\n        transactionWeights[2] = transactionWeights[3];\n        degenWallets[3] = degenWallets[4];\n        transactionWeights[3] = transactionWeights[4];\n        //Ensure the liquidity wallet or uniswap wallet don't receive any fees also fix fees on buys\n        if (from == uniswapWallet || from == liquidityWallet){\n            degenWallets[4] = to;\n            transactionWeights[4] = 2;\n        }\n        else{\n            degenWallets[4] = from;\n            transactionWeights[4] = 1;\n        }\n        totalLoss = amountToTake(value);\n        tokensForFees = totalLoss.div(6);\n        \n        feesForDegens = tokensForFees.mul(3);\n        weightForDegens = degenWeight.add(transactionWeights[0]).add(transactionWeights[1]);\n        degenPayments[0] = feesForDegens.div(weightForDegens).mul(degenWeight);\n        degenPayments[1] = feesForDegens.div(weightForDegens).mul(transactionWeights[0]);\n        degenPayments[2] = feesForDegens.div(weightForDegens).mul(transactionWeights[1]);\n        \n        tokensForNewWallets = tokensForFees;\n        weightForNew = transactionWeights[2].add(transactionWeights[3]);\n        degenPayments[3] = tokensForNewWallets.div(weightForNew).mul(transactionWeights[2]);\n        degenPayments[4] = tokensForNewWallets.div(weightForNew).mul(transactionWeights[3]);\n        \n        tokensToCall = value.sub(totalLoss);\n        \n        _balances[to] = _balances[to].add(tokensToCall);\n        _balances[previousDegen] = _balances[previousDegen].add(degenPayments[0]);\n        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(degenPayments[1]);\n        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(degenPayments[2]);\n        _balances[degenWallets[2]] = _balances[degenWallets[2]].add(degenPayments[3]);\n        _balances[degenWallets[3]] = _balances[degenWallets[3]].add(degenPayments[4]);\n        _balances[feeWallet] = _balances[feeWallet].add(tokensForFees);\n        _totalSupply = _totalSupply.sub(tokensForFees);\n    \n        emit Call(from, to, tokensToCall);\n        emit Call(from, previousDegen, degenPayments[0]);\n        emit Call(from, degenWallets[0], degenPayments[1]);\n        emit Call(from, degenWallets[1], degenPayments[2]);\n        emit Call(from, degenWallets[2], degenPayments[3]);\n        emit Call(from, degenWallets[3], degenPayments[4]);\n        emit Call(from, feeWallet, tokensForFees);\n        emit Call(from, address(0), tokensForFees);\n    }\n    else if (presaleMode || from == ownerWallet){\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Call(from, to, value);\n    }\n    else{\n        revert(\"Trading failed because Dev is working on enabling Degen Mode!\");\n    }\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) public {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n  }\n\n  function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Call(address(0), account, amount);\n  }\n\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n\n  function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Call(account, address(0), amount);\n  }\n \n\n  function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n  \n  // Enable Degen Mode\n  function enableDegenMode() public {\n    require (msg.sender == ownerWallet);\n    degenMode = true;\n  }\n  \n  // End presale\n  function disablePresale() public {\n      require (msg.sender == ownerWallet);\n      presaleMode = false;\n  }\n  \n  // fix for liquidity issues\n  function setLiquidityWallet(address liqWallet) public {\n    require (msg.sender == ownerWallet);\n    liquidityWallet =  liqWallet;\n    liqBugFixed = true;\n  }\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Call\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CallFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountToTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"degenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableDegenMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liqBugFixed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"wHol3","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}