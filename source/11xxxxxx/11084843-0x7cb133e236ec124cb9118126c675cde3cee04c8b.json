{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/src/common/lifecycle/Killable.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * A module that allows contracts to self-destruct.\r\n */\r\ncontract Killable {\r\n\taddress payable public _owner;\r\n\r\n\t/**\r\n\t * Initialized with the deployer as the owner.\r\n\t */\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * Self-destruct the contract.\r\n\t * This function can only be executed by the owner.\r\n\t */\r\n\tfunction kill() public {\r\n\t\trequire(msg.sender == _owner, \"only owner method\");\r\n\t\tselfdestruct(_owner);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/interface/IGroup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IGroup {\r\n\tfunction isGroup(address _addr) public view returns (bool);\r\n\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_group\", _addr));\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/validate/AddressValidator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * A module that provides common validations patterns.\r\n */\r\ncontract AddressValidator {\r\n\tstring constant errorMessage = \"this is illegal address\";\r\n\r\n\t/**\r\n\t * Validates passed address is not a zero address.\r\n\t */\r\n\tfunction validateIllegalAddress(address _addr) external pure {\r\n\t\trequire(_addr != address(0), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address is included in an address set.\r\n\t */\r\n\tfunction validateGroup(address _addr, address _groupAddr) external view {\r\n\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address is included in two address sets.\r\n\t */\r\n\tfunction validateGroups(\r\n\t\taddress _addr,\r\n\t\taddress _groupAddr1,\r\n\t\taddress _groupAddr2\r\n\t) external view {\r\n\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates that the address of the first argument is equal to the address of the second argument.\r\n\t */\r\n\tfunction validateAddress(address _addr, address _target) external pure {\r\n\t\trequire(_addr == _target, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address equals to the two addresses.\r\n\t */\r\n\tfunction validateAddresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target2, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates passed address equals to the three addresses.\r\n\t */\r\n\tfunction validate3Addresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2,\r\n\t\taddress _target3\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (_addr == _target2) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target3, errorMessage);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/validate/UsingValidator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// prettier-ignore\r\n\r\n\r\n/**\r\n * Module for contrast handling AddressValidator.\r\n */\r\ncontract UsingValidator {\r\n\tAddressValidator private _validator;\r\n\r\n\t/**\r\n\t * Create a new AddressValidator contract when initialize.\r\n\t */\r\n\tconstructor() public {\r\n\t\t_validator = new AddressValidator();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set AddressValidator address.\r\n\t */\r\n\tfunction addressValidator() internal view returns (AddressValidator) {\r\n\t\treturn _validator;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/config/AddressConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * A registry contract to hold the latest contract addresses.\r\n * Dev Protocol will be upgradeable by this contract.\r\n */\r\ncontract AddressConfig is Ownable, UsingValidator, Killable {\r\n\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\r\n\taddress public allocator;\r\n\taddress public allocatorStorage;\r\n\taddress public withdraw;\r\n\taddress public withdrawStorage;\r\n\taddress public marketFactory;\r\n\taddress public marketGroup;\r\n\taddress public propertyFactory;\r\n\taddress public propertyGroup;\r\n\taddress public metricsGroup;\r\n\taddress public metricsFactory;\r\n\taddress public policy;\r\n\taddress public policyFactory;\r\n\taddress public policySet;\r\n\taddress public policyGroup;\r\n\taddress public lockup;\r\n\taddress public lockupStorage;\r\n\taddress public voteTimes;\r\n\taddress public voteTimesStorage;\r\n\taddress public voteCounter;\r\n\taddress public voteCounterStorage;\r\n\r\n\t/**\r\n\t * Set the latest Allocator contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setAllocator(address _addr) external onlyOwner {\r\n\t\tallocator = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest AllocatorStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the AllocatorStorage contract is not used.\r\n\t */\r\n\tfunction setAllocatorStorage(address _addr) external onlyOwner {\r\n\t\tallocatorStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Withdraw contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setWithdraw(address _addr) external onlyOwner {\r\n\t\twithdraw = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest WithdrawStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setWithdrawStorage(address _addr) external onlyOwner {\r\n\t\twithdrawStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MarketFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMarketFactory(address _addr) external onlyOwner {\r\n\t\tmarketFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MarketGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMarketGroup(address _addr) external onlyOwner {\r\n\t\tmarketGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PropertyFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPropertyFactory(address _addr) external onlyOwner {\r\n\t\tpropertyFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PropertyGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPropertyGroup(address _addr) external onlyOwner {\r\n\t\tpropertyGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MetricsFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMetricsFactory(address _addr) external onlyOwner {\r\n\t\tmetricsFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest MetricsGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setMetricsGroup(address _addr) external onlyOwner {\r\n\t\tmetricsGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicyFactory contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicyFactory(address _addr) external onlyOwner {\r\n\t\tpolicyFactory = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicyGroup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicyGroup(address _addr) external onlyOwner {\r\n\t\tpolicyGroup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest PolicySet contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setPolicySet(address _addr) external onlyOwner {\r\n\t\tpolicySet = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Policy contract address.\r\n\t * Only the latest PolicyFactory contract can execute this function.\r\n\t */\r\n\tfunction setPolicy(address _addr) external {\r\n\t\taddressValidator().validateAddress(msg.sender, policyFactory);\r\n\t\tpolicy = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Dev contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setToken(address _addr) external onlyOwner {\r\n\t\ttoken = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest Lockup contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setLockup(address _addr) external onlyOwner {\r\n\t\tlockup = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest LockupStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the LockupStorage contract is not used as a stand-alone because it is inherited from the Lockup contract.\r\n\t */\r\n\tfunction setLockupStorage(address _addr) external onlyOwner {\r\n\t\tlockupStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteTimes contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteTimes contract is not used.\r\n\t */\r\n\tfunction setVoteTimes(address _addr) external onlyOwner {\r\n\t\tvoteTimes = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteTimesStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteTimesStorage contract is not used.\r\n\t */\r\n\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\r\n\t\tvoteTimesStorage = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteCounter contract address.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setVoteCounter(address _addr) external onlyOwner {\r\n\t\tvoteCounter = _addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the latest VoteCounterStorage contract address.\r\n\t * Only the owner can execute this function.\r\n\t * NOTE: But currently, the VoteCounterStorage contract is not used as a stand-alone because it is inherited from the VoteCounter contract.\r\n\t */\r\n\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\r\n\t\tvoteCounterStorage = _addr;\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\tAddressConfig private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = AddressConfig(_addressConfig);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (AddressConfig) {\r\n\t\treturn _config;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn address(_config);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/policy/IPolicyGroup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract IPolicyGroup is IGroup {\r\n\tfunction getVotingGroupIndex() external view returns (uint256);\r\n\r\n\tfunction incrementVotingGroupIndex() external;\r\n\r\n\tfunction voting(address _policy) external view returns (bool);\r\n\r\n\tfunction addGroupWithoutSetVotingEnd(address _addr) public;\r\n}\r\n\r\n// File: contracts/src/policy/IPolicyFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IPolicyFactory {\r\n\tfunction create(address _newPolicyAddress) external;\r\n\r\n\tfunction convergePolicy(address _currentPolicyAddress) external;\r\n}\r\n\r\n// File: contracts/src/policy/PolicyFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A factory contract that creates a new Policy contract.\r\n */\r\ncontract PolicyFactory is UsingConfig, UsingValidator, IPolicyFactory {\r\n\tevent Create(address indexed _from, address _policy);\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address.\r\n\t */\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t/**\r\n\t * Creates a new Policy contract.\r\n\t */\r\n\tfunction create(address _newPolicyAddress) external {\r\n\t\t/**\r\n\t\t * Validates the passed address is not 0 address.\r\n\t\t */\r\n\t\taddressValidator().validateIllegalAddress(_newPolicyAddress);\r\n\r\n\t\temit Create(msg.sender, _newPolicyAddress);\r\n\r\n\t\t/**\r\n\t\t * In the case of the first Policy, it will be activated immediately.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\tif (config().policy() == address(0)) {\r\n\t\t\tconfig().setPolicy(_newPolicyAddress);\r\n\t\t\tpolicyGroup.addGroupWithoutSetVotingEnd(_newPolicyAddress);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Adds the created Policy contract to the Policy address set.\r\n\t\t */\r\n\t\tpolicyGroup.addGroup(_newPolicyAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the Policy passed by a vote as an current Policy.\r\n\t */\r\n\tfunction convergePolicy(address _currentPolicyAddress) external {\r\n\t\t/**\r\n\t\t * Verify sender is VoteCounter contract\r\n\t\t */\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\t/**\r\n\t\t * Sets the passed Policy to current Policy.\r\n\t\t */\r\n\t\tconfig().setPolicy(_currentPolicyAddress);\r\n\r\n\t\t/**\r\n\t\t * Resets the Policy address set that is accepting votes.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\tpolicyGroup.incrementVotingGroupIndex();\r\n\t\tpolicyGroup.addGroup(_currentPolicyAddress);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentPolicyAddress\",\"type\":\"address\"}],\"name\":\"convergePolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPolicyAddress\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PolicyFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3f56f68666d8539eb2b32e34ee2367d8fa1c02fcfd94cf25d12f11de94b1dfc4"}]}