{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\r\n*\r\n*  /$$$$$$            /$$            /$$$$$$  /$$                 /$$          \r\n* /$$__  $$          |__/           /$$__  $$| $$                |__/          \r\n*| $$  \\__/  /$$$$$$  /$$ /$$$$$$$ | $$  \\__/| $$$$$$$   /$$$$$$  /$$ /$$$$$$$ \r\n*| $$ /$$$$ |____  $$| $$| $$__  $$| $$      | $$__  $$ |____  $$| $$| $$__  $$\r\n*| $$|_  $$  /$$$$$$$| $$| $$  \\ $$| $$      | $$  \\ $$  /$$$$$$$| $$| $$  \\ $$\r\n*| $$  \\ $$ /$$__  $$| $$| $$  | $$| $$    $$| $$  | $$ /$$__  $$| $$| $$  | $$\r\n*|  $$$$$$/|  $$$$$$$| $$| $$  | $$|  $$$$$$/| $$  | $$|  $$$$$$$| $$| $$  | $$\r\n* \\______/  \\_______/|__/|__/  |__/ \\______/ |__/  |__/ \\_______/|__/|__/  |__/\r\n*                                                                              \r\n*\r\n* \r\n* GainChain\r\n* https://GainChain.io\r\n* (only for GainChain.io members)\r\n* \r\n**/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract GainChain {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint referralsCount;\r\n        address[] referrals;\r\n        uint referralEarnings;\r\n        uint cycleEarnings;\r\n        uint currentLevel;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 4;\r\n    uint public lastUserId = 1;\r\n    address public owner;\r\n    address private initialOwner;\r\n    address public feeAddress;\r\n    uint public constant price = 0.06 ether;\r\n    \r\n    uint8 public chainSelect = 1;\r\n    uint public chainCycles = 0;\r\n    \r\n    address[] private level1Chain;\r\n    uint private level1ChainLastDistributedID = 0;\r\n    \r\n    address[] private level2Chain;\r\n    uint private level2ChainLastDistributedID = 0;\r\n    \r\n    address[] private level3Chain;\r\n    uint private level3ChainLastDistributedID = 0;\r\n    \r\n    address[] private level4Chain;\r\n    uint private level4ChainLastDistributedID = 0;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public userIds;\r\n    \r\n    event NewJoinee(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event SentReferralReward(address indexed from, address indexed receiver);\r\n    event UpgradeLevel(address indexed user, uint8 indexed level);\r\n    event SentEthDividends(address indexed from, address indexed receiver, uint indexed receiverIndex, uint8 level);\r\n    \r\n    constructor() public {\r\n        \r\n        owner = msg.sender;\r\n        initialOwner = msg.sender;\r\n        feeAddress = msg.sender;\r\n        address[] memory emptyArray;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            referralsCount: 0,\r\n            referrals: emptyArray,\r\n            referralEarnings: 0 ether,\r\n            cycleEarnings: 0 ether,\r\n            currentLevel: 4\r\n        });\r\n        \r\n        users[owner] = user;\r\n        userIds[1] = owner;\r\n        level1Chain.push(owner);\r\n        level2Chain.push(owner);\r\n        level3Chain.push(owner);\r\n        level4Chain.push(owner);\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return joinChain(msg.sender, owner);\r\n        }\r\n        \r\n        joinChain(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n    \r\n    function joinGainChain(address referrerAddress) external payable {\r\n        joinChain(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function joinChain(address userAddress, address referrerAddress) private {\r\n        require(msg.value == price, \"Joining cost 0.06\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        lastUserId++;\r\n        runRewardCycle(userAddress, referrerAddress);\r\n        \r\n        address[] memory emptyArray;\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            referralsCount: 0,\r\n            referrals: emptyArray,\r\n            referralEarnings: 0 ether,\r\n            cycleEarnings: 0 ether,\r\n            currentLevel: 1\r\n        });\r\n        users[userAddress] = user;\r\n        level1Chain.push(userAddress);\r\n        userIds[lastUserId] = userAddress;\r\n        emit NewJoinee(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n\r\n        updateReferrer(userAddress, referrerAddress);\r\n    }\r\n    \r\n    function updateReferrer(address userAddress, address referrerAddress) private {\r\n        users[referrerAddress].referrals.push(userAddress);\r\n        users[referrerAddress].referralsCount++;\r\n        \r\n        if (referrerAddress == initialOwner){\r\n            return;\r\n        }\r\n        if(users[referrerAddress].referralsCount == 2){\r\n            level2Chain.push(referrerAddress);\r\n            users[referrerAddress].currentLevel = 2;\r\n            emit UpgradeLevel(referrerAddress, 2);\r\n        }else if(users[referrerAddress].referralsCount == 16){\r\n            level3Chain.push(referrerAddress);\r\n            users[referrerAddress].currentLevel = 3;\r\n            emit UpgradeLevel(referrerAddress, 3);\r\n        }else if(users[referrerAddress].referralsCount == 64){\r\n            level4Chain.push(referrerAddress);\r\n            users[referrerAddress].currentLevel = 4;\r\n            emit UpgradeLevel(referrerAddress, 4);\r\n        }\r\n        \r\n    }\r\n    \r\n    function runRewardCycle(address userAddress, address referrerAddress) private{\r\n        users[referrerAddress].referralEarnings = users[referrerAddress].referralEarnings + 0.02 ether;\r\n        address(uint160(referrerAddress)).transfer(0.02 ether);\r\n        emit SentReferralReward(userAddress,referrerAddress);\r\n\r\n        if(chainSelect <= 2){\r\n            uint j = 1;\r\n            uint i = level1ChainLastDistributedID+1;\r\n            for (i ; ((j <= 6)&&( i <= level1Chain.length )); i++) {\r\n                address receiverAddress = level1Chain[i-1];\r\n                address(uint160(receiverAddress)).transfer(0.005 ether);\r\n                users[receiverAddress].cycleEarnings = users[receiverAddress].cycleEarnings + 0.005 ether;\r\n                emit SentEthDividends(userAddress, receiverAddress, i-1, 1);\r\n                j++;\r\n                level1ChainLastDistributedID = i;\r\n            }\r\n            if(level1ChainLastDistributedID == level1Chain.length) level1ChainLastDistributedID = 0;\r\n            chainSelect++;\r\n        } else if(chainSelect == 3){\r\n            uint j = 1;\r\n            uint i = level2ChainLastDistributedID+1;\r\n            for (i ; ((j <= 6)&&( i <= level2Chain.length )); i++) {\r\n                address receiverAddress = level2Chain[i-1];\r\n                address(uint160(receiverAddress)).transfer(0.005 ether);\r\n                users[receiverAddress].cycleEarnings = users[receiverAddress].cycleEarnings + 0.005 ether;\r\n                emit SentEthDividends(userAddress, receiverAddress, i-1, 2);\r\n                j++;\r\n                level2ChainLastDistributedID = i;\r\n            }\r\n            if(level2ChainLastDistributedID == level2Chain.length) level2ChainLastDistributedID = 0;\r\n            chainSelect++;\r\n        } else if(chainSelect == 4){\r\n            uint j = 1;\r\n            uint i = level3ChainLastDistributedID+1;\r\n            for (i ; ((j <= 6)&&( i <= level3Chain.length )); i++) {\r\n                address receiverAddress = level3Chain[i-1];\r\n                address(uint160(receiverAddress)).transfer(0.005 ether);\r\n                users[receiverAddress].cycleEarnings = users[receiverAddress].cycleEarnings + 0.005 ether;\r\n                emit SentEthDividends(userAddress, receiverAddress, i-1, 3);\r\n                j++;\r\n                level3ChainLastDistributedID = i;\r\n            }\r\n            if(level3ChainLastDistributedID == level3Chain.length) level3ChainLastDistributedID = 0;\r\n            chainSelect++;\r\n        } else if(chainSelect == 5){\r\n            uint j = 1;\r\n            uint i = level4ChainLastDistributedID+1;\r\n            for (i ; ((j <= 6)&&( i <= level4Chain.length )); i++) {\r\n                address receiverAddress = level4Chain[i-1];\r\n                address(uint160(receiverAddress)).transfer(0.005 ether);\r\n                users[receiverAddress].cycleEarnings = users[receiverAddress].cycleEarnings + 0.005 ether;\r\n                emit SentEthDividends(userAddress, receiverAddress, i-1, 4);\r\n                j++;\r\n                level4ChainLastDistributedID = i;\r\n            }\r\n            if(level4ChainLastDistributedID == level4Chain.length) level4ChainLastDistributedID = 0;\r\n            chainSelect = 1;\r\n        }\r\n        chainCycles++;\r\n        address(uint160(feeAddress)).transfer(0.01 ether);\r\n        if(address(this).balance > 0) address(uint160(owner)).transfer(address(this).balance);\r\n    }\r\n    \r\n    modifier _onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public _onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function setFeeaddress(address newFeeAddress) public _onlyOwner {\r\n        require(newFeeAddress != address(0), \"New owner is the zero address\");\r\n        feeAddress = newFeeAddress;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    function getUserDetails(address user) public view returns (uint id, address referrer, uint referralsCount, address[] memory referrals, uint referralEarnings, uint cycleEarnings, uint currentLevel) {\r\n        return (users[user].id,\r\n                users[user].referrer,\r\n                users[user].referralsCount,\r\n                users[user].referrals,\r\n                users[user].referralEarnings,\r\n                users[user].cycleEarnings,\r\n                users[user].currentLevel);\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"NewJoinee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiverIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SentReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"UpgradeLevel\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainSelect\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"referralEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"joinGainChain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GainChain","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8d3eb63e74f2444d1b21d6465e51877bd69d49629a47f7ca1d38d3182086b2f6"}]}