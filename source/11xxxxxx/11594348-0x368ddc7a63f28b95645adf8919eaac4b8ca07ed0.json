{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/DFSRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../auth/AdminAuth.sol\\\";\\nimport \\\"../utils/DefisaverLogger.sol\\\";\\n\\n/// @title Stores all the important DFS addresses and can be changed (timelock)\\ncontract DFSRegistry is AdminAuth {\\n    DefisaverLogger public constant logger = DefisaverLogger(\\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\\n    );\\n\\n    string public constant ERR_ENTRY_ALREADY_EXISTS = \\\"Entry id already exists\\\";\\n    string public constant ERR_ENTRY_NON_EXISTENT = \\\"Entry id doesn't exists\\\";\\n    string public constant ERR_ENTRY_NOT_IN_CHANGE = \\\"Entry not in change process\\\";\\n    string public constant ERR_WAIT_PERIOD_SHORTER = \\\"New wait period must be bigger\\\";\\n    string public constant ERR_CHANGE_NOT_READY = \\\"Change not ready yet\\\";\\n    string public constant ERR_EMPTY_PREV_ADDR = \\\"Previous addr is 0\\\";\\n    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = \\\"Already in contract change\\\";\\n    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = \\\"Already in wait period change\\\";\\n\\n    struct Entry {\\n        address contractAddr;\\n        uint256 waitPeriod;\\n        uint256 changeStartTime;\\n        bool inContractChange;\\n        bool inWaitPeriodChange;\\n        bool exists;\\n    }\\n\\n    mapping(bytes32 => Entry) public entries;\\n    mapping(bytes32 => address) public previousAddresses;\\n\\n    mapping(bytes32 => address) public pendingAddresses;\\n    mapping(bytes32 => uint256) public pendingWaitTimes;\\n\\n    /// @notice Given an contract id returns the registred address\\n    /// @dev Id is keccak256 of the contract name\\n    /// @param _id Id of contract\\n    function getAddr(bytes32 _id) public view returns (address) {\\n        return entries[_id].contractAddr;\\n    }\\n\\n    /// @notice Helper function to easily query if id is registred\\n    /// @param _id Id of contract\\n    function isRegistered(bytes32 _id) public view returns (bool) {\\n        return entries[_id].exists;\\n    }\\n\\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\\n\\n    /// @notice Adds a new contract to the registry\\n    /// @param _id Id of contract\\n    /// @param _contractAddr Address of the contract\\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\\n    function addNewContract(\\n        bytes32 _id,\\n        address _contractAddr,\\n        uint256 _waitPeriod\\n    ) public onlyOwner {\\n        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\\n\\n        entries[_id] = Entry({\\n            contractAddr: _contractAddr,\\n            waitPeriod: _waitPeriod,\\n            changeStartTime: 0,\\n            inContractChange: false,\\n            inWaitPeriodChange: false,\\n            exists: true\\n        });\\n\\n        // Remember tha address so we can revert back to old addr if needed\\n        previousAddresses[_id] = _contractAddr;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"AddNewContract\\\",\\n            abi.encode(_id, _contractAddr, _waitPeriod)\\n        );\\n    }\\n\\n    /// @notice Revertes to the previous address immediately\\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\\n    /// @param _id Id of contract\\n    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\\n\\n        address currentAddr = entries[_id].contractAddr;\\n        entries[_id].contractAddr = previousAddresses[_id];\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"RevertToPreviousAddress\\\",\\n            abi.encode(_id, currentAddr, previousAddresses[_id])\\n        );\\n    }\\n\\n    /// @notice Starts an address change for an existing entry\\n    /// @dev Can override a change that is currently in progress\\n    /// @param _id Id of contract\\n    /// @param _newContractAddr Address of the new contract\\n    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\\n\\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\\n        entries[_id].inContractChange = true;\\n\\n        pendingAddresses[_id] = _newContractAddr;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"StartContractChange\\\",\\n            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\\n        );\\n    }\\n\\n    /// @notice Changes new contract address, correct time must have passed\\n    /// @param _id Id of contract\\n    function approveContractChange(bytes32 _id) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\\n        require(\\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\\n            ERR_CHANGE_NOT_READY\\n        );\\n\\n        address oldContractAddr = entries[_id].contractAddr;\\n        entries[_id].contractAddr = pendingAddresses[_id];\\n        entries[_id].inContractChange = false;\\n        entries[_id].changeStartTime = 0;\\n\\n        pendingAddresses[_id] = address(0);\\n        previousAddresses[_id] = oldContractAddr;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"ApproveContractChange\\\",\\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\\n        );\\n    }\\n\\n    /// @notice Cancel pending change\\n    /// @param _id Id of contract\\n    function cancelContractChange(bytes32 _id) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\\n\\n        address oldContractAddr = pendingAddresses[_id];\\n\\n        pendingAddresses[_id] = address(0);\\n        entries[_id].inContractChange = false;\\n        entries[_id].changeStartTime = 0;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"CancelContractChange\\\",\\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\\n        );\\n    }\\n\\n    /// @notice Starts the change for waitPeriod\\n    /// @param _id Id of contract\\n    /// @param _newWaitPeriod New wait time\\n    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\\n\\n        pendingWaitTimes[_id] = _newWaitPeriod;\\n\\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\\n        entries[_id].inWaitPeriodChange = true;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"StartWaitPeriodChange\\\",\\n            abi.encode(_id, _newWaitPeriod)\\n        );\\n    }\\n\\n    /// @notice Changes new wait period, correct time must have passed\\n    /// @param _id Id of contract\\n    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\\n        require(\\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\\n            ERR_CHANGE_NOT_READY\\n        );\\n\\n        uint256 oldWaitTime = entries[_id].waitPeriod;\\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\\n        \\n        entries[_id].inWaitPeriodChange = false;\\n        entries[_id].changeStartTime = 0;\\n\\n        pendingWaitTimes[_id] = 0;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"ApproveWaitPeriodChange\\\",\\n            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\\n        );\\n    }\\n\\n    /// @notice Cancel wait period change\\n    /// @param _id Id of contract\\n    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\\n\\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\\n\\n        pendingWaitTimes[_id] = 0;\\n        entries[_id].inWaitPeriodChange = false;\\n        entries[_id].changeStartTime = 0;\\n\\n        logger.Log(\\n            address(this),\\n            msg.sender,\\n            \\\"CancelWaitPeriodChange\\\",\\n            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auth/AdminAuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IDFSRegistry.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\nimport \\\"./AdminVault.sol\\\";\\n\\n/// @title AdminAuth Handles owner/admin priviligies over smart contracts\\ncontract AdminAuth {\\n    using SafeERC20 for IERC20;\\n\\n    AdminVault public adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\\n\\n    modifier onlyOwner() {\\n        require(adminVault.owner() == msg.sender, \\\"msg.sender not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminVault.admin() == msg.sender, \\\"msg.sender not admin\\\");\\n        _;\\n    }\\n\\n    /// @notice  withdraw stuck funds\\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            payable(_receiver).transfer(_amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @notice Destroy the contract\\n    function kill() public onlyAdmin {\\n        selfdestruct(payable(msg.sender));\\n    }\\n\\n    /// @notice Changes the admin vault that is currently used\\n    /// @param _newAdminVault Address of the new Admin Vault contract\\n    function changeAdminVault(address _newAdminVault) public onlyAdmin {\\n        adminVault = AdminVault(_newAdminVault);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DefisaverLogger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ncontract DefisaverLogger {\\n    event LogEvent(\\n        address indexed contractAddress,\\n        address indexed caller,\\n        string indexed logName,\\n        bytes data\\n    );\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function Log(\\n        address _contract,\\n        address _caller,\\n        string memory _logName,\\n        bytes memory _data\\n    ) public {\\n        emit LogEvent(_contract, _caller, _logName, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDFSRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract IDFSRegistry {\\n \\n    function getAddr(bytes32 _id) public view virtual returns (address);\\n\\n    function addNewContract(\\n        bytes32 _id,\\n        address _contractAddr,\\n        uint256 _waitPeriod\\n    ) public virtual;\\n\\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\\n\\n    function approveContractChange(bytes32 _id) public virtual;\\n\\n    function cancelContractChange(bytes32 _id) public virtual;\\n\\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {ERC20-approve}, and its usage is discouraged.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/auth/AdminVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ncontract AdminVault {\\n    address public owner;\\n    address public admin;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\\n    }\\n\\n    /// @notice Admin is able to change owner\\n    /// @param _owner Address of new owner\\n    function changeOwner(address _owner) public {\\n        require(admin == msg.sender, \\\"msg.sender not admin\\\");\\n        owner = _owner;\\n    }\\n\\n    /// @notice Admin is able to set new admin\\n    /// @param _admin Address of multisig that becomes new admin\\n    function changeAdmin(address _admin) public {\\n        require(admin == msg.sender, \\\"msg.sender not admin\\\");\\n        admin = _admin;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function decimals() external view returns (uint256 digits);\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"ERR_ALREADY_IN_CONTRACT_CHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_ALREADY_IN_WAIT_PERIOD_CHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_CHANGE_NOT_READY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_EMPTY_PREV_ADDR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_ENTRY_ALREADY_EXISTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_ENTRY_NON_EXISTENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_ENTRY_NOT_IN_CHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_WAIT_PERIOD_SHORTER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_waitPeriod\",\"type\":\"uint256\"}],\"name\":\"addNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"approveContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"approveWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancelContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancelWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdminVault\",\"type\":\"address\"}],\"name\":\"changeAdminVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inContractChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inWaitPeriodChange\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingWaitTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"previousAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"revertToPreviousAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newContractAddr\",\"type\":\"address\"}],\"name\":\"startContractChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"startWaitPeriodChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DFSRegistry","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}