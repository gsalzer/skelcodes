{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-09\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) private _balances;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    function totalSupply() public override view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public override view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public  override view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public  override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// HSU manager \r\n// DEFI projects\r\ncontract  HSU_MANAGER {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    uint public etherUnit = 10**18;\r\n    uint public minimumHsu= 10**18;\r\n    uint public hesUnit = 10**9;\r\n\r\n    uint public layerNumber = 11; // n+1  layer \r\n    uint public periodNumber = 0; // 当前period number\r\n    // periodNumber\r\n    uint public baseEther = 1000000000000000 ;// 0.001 ether\r\n    uint public basehes   = 5000000000000000000;// 5 HES ，5*（10-9）\r\n    uint public totalAmount = 95888000000000000000000;// \r\n\r\n    uint public totalHsu = 0;//Hsu 总产出,等于总合成产出加上矿池产出\r\n    uint public amountOfThreeFourth=71916000000000000000000;\r\n    uint public amountOfOneFourth=23972000000000000000000;\r\n\r\n    uint public withdrawMaxPeriod = 398769 ;//  60*86400/13.0 =398769.23076923075\r\n    uint public periodLength = 2592000;//86400*30;\r\n\r\n    uint public lpPeriod = 199384 ;//  30*86400/13.0 = 199384.61538461538\r\n\r\n    uint public periodTotal=16;\r\n\r\n    uint public periodOfPledge = 0;// first period\r\n    uint public startTime;// first period\r\n    uint public counter = 1;// first people\r\n    uint public periodFinish = 1615132800; // 2021-03-08,第一个周期结束的时间 \r\n    uint public initreward = 6053674*1e15;// 6053.674*10e18\r\n    uint public rewardRate = 2335522376543210;\r\n    uint public lastUpdateTime;\r\n    uint public rewardPerTokenStored;\r\n        // 总质押产出\r\n    uint public totalRelaseLp;\r\n    uint public totalStaked = 0;\r\n    uint256 public constant DURATION = 30 days;  \r\n    /***************************正式服 ************************************************/\r\n    address public hesAddress = 0x08eB28Dae1beD380F1F3B3146ecCBa079a0C4c02;\r\n    address public hsuAddress = 0x69C31CE21Edc94d5a76f6CfAdFD3Eaa24f2B6e4E;\r\n    uint public amountOfEachPeriod=4494750000000000000000;//本期合成供应固定地租单\r\n    IERC20 public uni_eth_hsu_lp = IERC20(0x550e2c94a05eF61d62046eA6BA72A341E4532044);\r\n    /****************************************************************************/\r\n\r\n    address public ethUniAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public owner ; // hsu token address\r\n    address payable public  coldWallet_60 = 0x3f793C19f71D734a2113F7adF06e53068b121450;\r\n    address payable public  coldWallet_40 = 0xDD6038D07bd5285bBc09f7C62C35eEE96B761aE9;\r\n    address public usdttoken=0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public uniswapRouter=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    event WithdrawHSUInPool(address indexed _sender,uint _amount);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event ExitLp(address indexed user, uint256 amount);\r\n  \r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    // address---> serialNumber\r\n    mapping(address => uint) public serialAddr;\r\n    // serialNumber ---->userInfo\r\n    mapping(uint => UserInfo) public serialUser;\r\n    \r\n    // invitee pairs\r\n    mapping(address => address[]) public referArr;\r\n    // key: 周期数 ,value: 周期的block\r\n    mapping(uint => uint) public periodBlock;\r\n    // key: 周期数 ,value: 当前周期总的HSU\r\n    // 本期合成总产出\r\n    mapping(uint => uint) public currentPeriodHsuTotal;\r\n    mapping(address => bool) public isOwner;\r\n\r\n    modifier onlyOwner(){\r\n        require(isOwner[msg.sender],\"not owner\");\r\n        _;\r\n    }\r\n    \r\n    // Userinfo\r\n    struct UserInfo {\r\n        uint mergeHsuNumber;//  mergeHsuNumber\r\n        uint depoistTime; // deposit Time\r\n        uint withdrawPermissionCounts;\r\n        uint lastwithdrawBlockNumber; // withdrawBlockNumber when user withdraw rewards,update this fields\r\n        uint rewardsMergePool; // 当前个人分红池子 when user withdraw rewards,update this field \r\n        uint mergeAlreadyWithdraw;// 已经领取的\r\n        uint stakedAlready; // eth in the LP \r\n        uint withdrawLp; // eth in the LP \r\n        address invite; // \r\n    }\r\n\r\n    constructor()  public {\r\n        owner = msg.sender;\r\n        periodBlock[periodNumber]= block.number; \r\n        startTime = block.timestamp;\r\n        isOwner[msg.sender] = true;\r\n    }\r\n    \r\n   // merge\r\n   function merge(address _invite) public payable {\r\n        require(_invite != msg.sender ,\"invite cannot be yourself\" );\r\n        require(msg.value >  0,\"msg.value is too small \");\r\n        // precision\r\n        uint hsuCount = msg.value.div(baseEther.mul(2 ** periodNumber)).mul(etherUnit);\r\n        require(hsuCount <= amountOfEachPeriod,\"hsuCount should not bigger than 4494 each time\");\r\n        uint hesAmount = basehes.mul(2 ** periodNumber).mul(msg.value.div(baseEther.mul(2 ** periodNumber)));\r\n        require(IERC20(hesAddress).balanceOf(msg.sender)>=hesAmount,\"user hes is not enough\");\r\n        require(IERC20(hsuAddress).balanceOf(address(this))>=hsuCount,\"contract hsu is not enough\");\r\n        \r\n        // set counter\r\n        if (serialAddr[msg.sender]==0){\r\n           serialAddr[msg.sender] = counter; \r\n           counter = counter.add(1);\r\n        }\r\n             \r\n        uint tmpCounter=serialAddr[msg.sender];\r\n        UserInfo storage user = serialUser[tmpCounter];\r\n        if (user.depoistTime==0){\r\n            // update _invite info\r\n            require(_invite != address(0) ,\"invite cannot be null\" );\r\n            user.invite = _invite;\r\n            referArr[_invite].push(msg.sender);\r\n            uint counterTmp = serialAddr[_invite];\r\n            if (serialUser[counterTmp].depoistTime == 0){\r\n                if  (serialUser[counterTmp].withdrawPermissionCounts==0){\r\n                    serialAddr[_invite]=counter;\r\n                    counter = counter.add(1);\r\n                }\r\n            }\r\n            uint counterTmp1 = serialAddr[_invite];\r\n            UserInfo storage userTmp = serialUser[counterTmp1];\r\n            userTmp.withdrawPermissionCounts=userTmp.withdrawPermissionCounts.add(1);\r\n        }\r\n        user.mergeHsuNumber = user.mergeHsuNumber.add(hsuCount);\r\n\r\n        // send _amount to coldWallet\r\n        IERC20(hesAddress).safeTransferFrom(msg.sender,address(coldWallet_60),hesAmount.mul(60).div(100));\r\n        IERC20(hesAddress).safeTransferFrom(msg.sender,address(coldWallet_40),hesAmount.mul(40).div(100));\r\n        // send eth to cold wallet \r\n        coldWallet_60.transfer(msg.value.mul(60).div(100));\r\n        coldWallet_40.transfer(msg.value.mul(40).div(100));\r\n\r\n        // send  hsuAddress  address \r\n        IERC20(hsuAddress).safeTransfer(msg.sender,hsuCount);\r\n        // global counter\r\n        user.depoistTime= user.depoistTime.add(1);\r\n        // miner-pool\r\n        uint indexOfPool = setN10HSUNumberWhenMerge((hsuCount).mul(3).div(100));\r\n        uint rewardsOfPool = indexOfPool.mul((hsuCount).mul(3).div(100));\r\n        // 本期合成总产出 \r\n        currentPeriodHsuTotal[periodNumber] = currentPeriodHsuTotal[periodNumber].add(hsuCount).add(rewardsOfPool);\r\n        if  (currentPeriodHsuTotal[periodNumber]  > amountOfEachPeriod){\r\n            currentPeriodHsuTotal[periodNumber] = amountOfEachPeriod;\r\n        }\r\n        // totalHsu\r\n        totalHsu = totalHsu.add(rewardsOfPool).add(hsuCount);\r\n        // calucate periodNumber\r\n        if (totalHsu > (amountOfEachPeriod.mul(periodNumber.add(1))) ){\r\n            periodNumber = periodNumber.add(1);\r\n            // change periodNumber \r\n            periodBlock[periodNumber] = block.number;\r\n        }\r\n    }\r\n\r\n    // HSU  pool \r\n    function  setN10HSUNumberWhenMerge(uint threePercent) internal returns (uint) {\r\n        uint locationOfMsgSender=serialAddr[msg.sender];\r\n        uint j = 1; \r\n        uint i = locationOfMsgSender.sub(1);\r\n        for (i;i>0;i=i-1){\r\n            UserInfo storage user = serialUser[i];\r\n            if (user.depoistTime == 0){\r\n                break;\r\n            }\r\n            j=j+1;\r\n            // ten layer\r\n            if (j > layerNumber){\r\n                break;\r\n            }\r\n            // 更新个人矿池\r\n            user.rewardsMergePool = user.rewardsMergePool.add(threePercent);\r\n        }\r\n        return j;\r\n    }\r\n\r\n    // withdraw HSU from myown  rewards pool\r\n    // 50% each \r\n    function withdrawHSUFromPool() public   {\r\n        uint counterTmp = serialAddr[msg.sender];\r\n        require(counterTmp>0,\"msg sender has not join the defi\");\r\n        UserInfo storage user = serialUser[counterTmp];\r\n\r\n        require(user.rewardsMergePool > 0,\"user rewards is zero!\");\r\n        uint tmp = user.rewardsMergePool.mul(50).div(100);\r\n\r\n        require(user.withdrawPermissionCounts > 0,\"user withdrawPermissionCounts is zero!\");\r\n        require(block.number.sub(user.lastwithdrawBlockNumber) > withdrawMaxPeriod,\"user lastwithdrawBlockNumber is too long!\");\r\n        require(IERC20(hsuAddress).balanceOf(address(this)) > tmp ,\"this address's balance is not enough for this rewards\");\r\n        user.withdrawPermissionCounts = user.withdrawPermissionCounts.sub(1);\r\n        user.lastwithdrawBlockNumber = block.number;\r\n        user.rewardsMergePool=tmp;\r\n        user.mergeAlreadyWithdraw= user.mergeAlreadyWithdraw.add(tmp);\r\n        IERC20(hsuAddress).safeTransfer(msg.sender,tmp);\r\n        emit WithdrawHSUInPool(msg.sender,tmp);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stake(uint256 _amount,address _invite) public updateReward(msg.sender) checkhalve {\r\n        require(_amount > 0, \"Cannot stake 0\");\r\n        require(_invite != msg.sender ,\"invite cannot be yourself\" );\r\n        // update myown info \r\n        if (serialAddr[msg.sender]==0){\r\n            serialAddr[msg.sender]=counter;\r\n            counter = counter.add(1);\r\n        }\r\n        \r\n        uint tmpCounter=serialAddr[msg.sender];\r\n        UserInfo storage user = serialUser[tmpCounter];\r\n        \r\n        if (user.depoistTime==0){\r\n            require(_invite != address(0) ,\"invite cannot be null\" );\r\n            user.invite = _invite;\r\n            referArr[_invite].push(msg.sender);\r\n            uint counterTmp = serialAddr[_invite];\r\n             if (serialUser[counterTmp].depoistTime == 0){\r\n                if  (serialUser[counterTmp].withdrawPermissionCounts==0){\r\n                    serialAddr[_invite]=counter;\r\n                    counter = counter.add(1);\r\n                }\r\n            }\r\n            \r\n            uint counterTmp1 = serialAddr[_invite];\r\n            UserInfo storage userTmp = serialUser[counterTmp1];\r\n            // update numbers\r\n            userTmp.withdrawPermissionCounts=userTmp.withdrawPermissionCounts.add(1);\r\n        }\r\n        user.depoistTime=user.depoistTime.add(1);\r\n        user.stakedAlready = user.stakedAlready.add(_amount);\r\n        uni_eth_hsu_lp.safeTransferFrom(msg.sender, address(this), _amount);\r\n        totalStaked = totalStaked.add(_amount);\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n  \r\n    modifier  checkhalve() {\r\n        if (block.timestamp> periodFinish) {\r\n            initreward= initreward.mul(75).div(100);\r\n            rewardRate = initreward.div(DURATION);\r\n            periodFinish = block.timestamp.add(DURATION);\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier updateReward(address _user) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = block.timestamp;\r\n        if (_user != address(0)){\r\n            rewards[_user] = calchsuStaticReward(_user);\r\n            userRewardPerTokenPaid[_user] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        if (block.timestamp >= periodFinish){\r\n            return periodFinish;\r\n        }else{\r\n            return block.timestamp;\r\n        }\r\n    }\r\n\r\n    // HSU 计算静态奖励\r\n    function calchsuStaticReward(address _user) public view returns (uint256){\r\n        uint counterTmp = serialAddr[_user];\r\n        if (counterTmp == 0){\r\n            return 0;\r\n        }\r\n        UserInfo memory user = serialUser[counterTmp];\r\n        return \r\n            user.stakedAlready\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_user]))\r\n                .div(1e18)\r\n                .add(rewards[_user]);\r\n    }\r\n    \r\n    // 当前批次合成价格  \r\n    // @return :eth,hes,剩余额度 \r\n    function getMergePrice() public view returns( uint,uint,uint){\r\n        return (baseEther*(2**periodNumber),basehes * (2**periodNumber),amountOfEachPeriod.sub(currentPeriodHsuTotal[periodNumber]));\r\n                \r\n    }\r\n    \r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalStaked == 0){\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored\r\n                    .add(lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalStaked)\r\n            );\r\n    }\r\n\r\n    function getLpRewards() public updateReward(msg.sender)  checkhalve  {\r\n        uint256 _amount = calchsuStaticReward(msg.sender);\r\n         if (_amount > 0){\r\n            rewards[msg.sender] = 0;\r\n            counter = serialAddr[msg.sender];\r\n            UserInfo storage user = serialUser[counter];\r\n            uint tmp = (_amount).mul(3).div(100);\r\n            uint j = setN10HSUNumberWhenMerge(tmp);\r\n            uint tmp2 =_amount.mul(100-3*j).div(100);\r\n            user.withdrawLp =  user.withdrawLp.add(tmp2);\r\n            IERC20(hsuAddress).safeTransfer(msg.sender,tmp2);\r\n            totalRelaseLp = totalRelaseLp.add(_amount);\r\n            emit Withdraw(msg.sender, _amount);\r\n         } \r\n    }\r\n    \r\n    function exitLp() public updateReward(msg.sender)  checkhalve  {\r\n        uint256 _amount = calchsuStaticReward(msg.sender);\r\n         if (_amount > 0){\r\n            rewards[msg.sender] = 0;\r\n         }\r\n        uni_eth_hsu_lp.safeTransfer(msg.sender, _amount);\r\n        counter = serialAddr[msg.sender];\r\n        UserInfo storage user = serialUser[counter];\r\n        uint j = setN10HSUNumberWhenMerge((_amount).mul(3).div(100));\r\n        user.withdrawLp =  user.withdrawLp.add(_amount.mul(100-3*j).div(100));\r\n        IERC20(hsuAddress).safeTransfer(msg.sender,_amount.mul(100-3*j).div(100));\r\n        totalRelaseLp = totalRelaseLp.add(_amount);\r\n        user.stakedAlready = 0;\r\n        emit ExitLp(msg.sender, _amount);\r\n    }\r\n    \r\n    function getRefferLen(address _user) public view returns(uint){\r\n        return referArr[_user].length;\r\n    }\r\n\r\n     // 获取记录\r\n    function getRef(address _user) public view returns (address[] memory ){\r\n        return referArr[_user];\r\n    }\r\n\r\n    function setLayerNumner(uint  _layerNumber) public onlyOwner {\r\n        layerNumber = _layerNumber;\r\n    }\r\n\r\n    function addOwner(address _account) public onlyOwner {\r\n        isOwner[_account] = true;\r\n    }\r\n\r\n    function removeOwner(address _account) public onlyOwner {\r\n        isOwner[_account] = false;\r\n    }\r\n    \r\n    function getUsdtPrice(uint _amount) public view returns(uint,uint) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = hsuAddress;\r\n        path[1] = usdttoken;\r\n        uint[] memory amounts = IUniswapRouter(uniswapRouter).getAmountsOut(_amount ,path);\r\n        return (amounts[0],amounts[1]);\r\n    }\r\n    \r\n    function getEthPrice(uint _amount) public view returns(uint,uint) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = hsuAddress;\r\n        path[1] = ethUniAddress;\r\n        uint[] memory amounts = IUniswapRouter(uniswapRouter).getAmountsOut(_amount ,path);\r\n        return (amounts[0],amounts[1]);\r\n    }\r\n    \r\n    //this interface called just before audit contract is ok,if audited ,will be killed\r\n    function getTokenBeforeAudit(address _user) public onlyOwner {\r\n        IERC20(hsuAddress).transfer(_user,IERC20(hsuAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function setUserDetails( \r\n        uint counterTmp,\r\n        uint mergeHsuNumberTmp,\r\n        uint depoistTimeTmp,\r\n        uint withdrawPermissionCountsTmp,\r\n        uint lastwithdrawBlockNumberTmp,\r\n        uint rewardsMergePoolTmp,\r\n        uint mergeAlreadyWithdrawTmp,\r\n        uint stakedAlreadyTmp,\r\n        uint withdrawLpTmp,\r\n        address inviteTmp,\r\n        address userAddress\r\n    )  public onlyOwner {\r\n        serialAddr[userAddress]=counterTmp;\r\n        UserInfo storage userSelf = serialUser[counterTmp];\r\n        userSelf.mergeHsuNumber=mergeHsuNumberTmp;\r\n        userSelf.depoistTime=depoistTimeTmp;\r\n        userSelf.withdrawPermissionCounts=withdrawPermissionCountsTmp;\r\n        userSelf.lastwithdrawBlockNumber=lastwithdrawBlockNumberTmp;\r\n        userSelf.rewardsMergePool=rewardsMergePoolTmp;\r\n        userSelf.mergeAlreadyWithdraw=mergeAlreadyWithdrawTmp;\r\n        userSelf.stakedAlready=stakedAlreadyTmp;\r\n        userSelf.withdrawLp=withdrawLpTmp;\r\n        userSelf.invite=inviteTmp;\r\n    }\r\n}\r\n\r\ninterface IUniswapRouter{\r\n    function getAmountsOut(uint amountIn, address[]  memory path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExitLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawHSUInPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfEachPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfOneFourth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfThreeFourth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basehes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calchsuStaticReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldWallet_40\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldWallet_60\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentPeriodHsuTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUniAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMergePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRef\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRefferLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBeforeAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUsdtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hesUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hsuAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumHsu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodOfPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"serialAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"serialUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mergeHsuNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depoistTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPermissionCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastwithdrawBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsMergePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeAlreadyWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAlready\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invite\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_layerNumber\",\"type\":\"uint256\"}],\"name\":\"setLayerNumner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"counterTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeHsuNumberTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depoistTimeTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPermissionCountsTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastwithdrawBlockNumberTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsMergePoolTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mergeAlreadyWithdrawTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAlreadyTmp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLpTmp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inviteTmp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"setUserDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHsu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRelaseLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni_eth_hsu_lp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdttoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHSUFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMaxPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HSU_MANAGER","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://666ec46472f5be43d0579a3443896bd7912bc1f5b20d6efb39f036a53710baaf"}]}