{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract GoaldProxy is ERC20 {\r\n    /** \r\n     * @dev The minimum amount of tokens necessary to be eligible for a dividend. This is \"one token\", considering decimal places. We\r\n     * are choosing six decimal places because we are targeting WBTC, which has 8. This way we can do a minimum dividend ratio of\r\n     * 1 / 100 of a WBTC, relative to our token. So at $25,000 (2020 value), the minimum dividend would be $250.\r\n     */\r\n    uint256 private constant DIVIDEND_THRESHOLD = 10**6;\r\n\r\n    /** @dev The current owner of the proxy. */\r\n    address public _owner = msg.sender;\r\n\r\n    /** @dev Which Uniswap router we're currently using for trades. */\r\n    address private _uniswapRouterAddress;\r\n\r\n    /** @dev The latest proxy address. This is private since Goald contracts use `getProxyAddress()` to determine the address. */\r\n    address private _proxyAddress;\r\n\r\n    /** @dev Which deployer is the most recent version. Only the latest version can create new Goald. See: `_proxyAddress`. */\r\n    address private _latestDeployer;\r\n\r\n    /** @dev Which ERC20 contract will be used for dividends (e.g., WBTC). */\r\n    address public _dividendContract;\r\n\r\n    /** @dev How many holders are eligible for dividends. This is used to determine how much should be reserved. */\r\n    uint256 private _dividendHolders;\r\n\r\n    /** @dev How much of the current balance is reserved for dividends. */\r\n    uint256 public _reservedBalance;\r\n\r\n    /** @dev How many holders have yet to withdraw a given dividend. */\r\n    uint256[] private _dividendHolderCounts;\r\n\r\n    /** @dev The multipliers for each dividend. */\r\n    uint256[] private _dividendMultipliers;\r\n\r\n    /** @dev The remaining reserves for a given dividend. */\r\n    uint256[] private _dividendReserves;\r\n\r\n    /** @dev The minimum dividend index to check eligibility against for a given address. */\r\n    mapping (address => uint256) private _minimumDividendIndex;\r\n    \r\n    /** @dev The available dividend balance for a given address. */\r\n    mapping (address => uint256) private _dividendBalance;\r\n\r\n    /**\r\n     * @dev The stage of the governance token. Tokens can be issued based on deployments regardless of what stage we are in.\r\n     *      0: Created, with no governance protocol initiated. The initial governance issuance can be claimed.\r\n     *      1: Initial governance issuance has been claimed.\r\n     *      2: The governance protocal has been initiated.\r\n     *      3: All governance tokens have been issued.\r\n     */\r\n    uint256 private constant STAGE_INITIAL               = 0;\r\n    uint256 private constant STAGE_ISSUANCE_CLAIMED      = 1;\r\n    uint256 private constant STAGE_DAO_INITIATED         = 2;\r\n    uint256 private constant STAGE_ALL_GOVERNANCE_ISSUED = 3;\r\n    uint256 private _governanceStage;\r\n    uint256 private _goaldsDeployed;\r\n\r\n    // Reentrancy reversions are the only calls to revert (in this contract) that do not have reasons. We add a third state, 'frozen'\r\n    // to allow for locking non-admin functions. The contract may be permanently frozen if it has been upgraded.\r\n    uint256 private constant RE_NOT_ENTERED = 1;\r\n    uint256 private constant RE_ENTERED     = 2;\r\n    uint256 private constant RE_FROZEN      = 3;\r\n    uint256 private _status;\r\n\r\n    // Override decimal places to 6. See `DIVIDEND_THRESHOLD`.\r\n    constructor() ERC20(\"Goald\", \"GOALD\") public {\r\n        _setupDecimals(6);\r\n        _status = RE_NOT_ENTERED;\r\n        _proxyAddress = address(this);\r\n    }\r\n\r\n    /// Events ///\r\n\r\n    event DividendCreated(uint256 multiplier, string reason);\r\n\r\n    /// Admin Functions ///\r\n\r\n    function changeOwner(address newOwner) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        require(newOwner != address(0), \"Can't be zero address\");\r\n\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * Sets the latest deployer. No other Goald deployers can create a new Goald. We do not restrict the address since we need to be\r\n     * able to freeze deployments in the event of a severe vulnerability.\r\n     */\r\n    function changeLatestDeployer(address newDeployer) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n\r\n        _latestDeployer = newDeployer;\r\n    }\r\n\r\n    /** The proxy address is what the Goald deployers send their fees to. */\r\n    function changeProxyAddress(address newAddress) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        require(newAddress != address(0), \"Can't be zero address\");\r\n\r\n        _proxyAddress = newAddress;\r\n    }\r\n\r\n    /** The uniswap router for converting tokens within this proxys. */\r\n    function changeUniswapRouterAddress(address newAddress) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        require(newAddress != address(0), \"Can't be zero address\");\r\n\r\n        _uniswapRouterAddress = newAddress;\r\n    }\r\n\r\n    /** Freezes the proxy contract. Only admin functions can be called. */\r\n    function freeze() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n\r\n        _status = RE_FROZEN;\r\n    }\r\n\r\n    /** Unfreezes the proxy contract. Non-admin functions can again be called. */\r\n    function unfreeze() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_FROZEN);\r\n        require(msg.sender == _owner, \"Not owner\");\r\n\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /// Goald Deployers ///\r\n\r\n    /** Returns the current address that fees will be sent to. */\r\n    function getProxyAddress() external view returns (address) {\r\n        return _proxyAddress;\r\n    }\r\n\r\n    /** Returns the address of the deployer that is allowed to create new Goald. */\r\n    function getLatestDeployerAddress() external view returns (address) {\r\n        return _latestDeployer;\r\n    }\r\n\r\n    /** Returns the address of the uniswap router. */\r\n    function getUniswapRouterAddress() external view returns (address) {\r\n        return _uniswapRouterAddress;\r\n    }\r\n\r\n    /**\r\n     * Called when a deployer deploys a new Goald. Currently we use this to distribute the governance token according to the\r\n     * following schedule. An additional 11,000 tokens will be given to the deployer of this proxy. This will create a total supply of\r\n     * 21,000 tokens. Once the governance protocal is set up, 10,000 tokens will be burned to initiate that mechanism. That will leave\r\n     * ~9% ownership for the deployer of the contract, with the remaining 91% given to the community. No dividends can be paid out\r\n     * before the governance protocal has been initiated.\r\n     *\r\n     *      # Goalds    # Tokens\r\n     *       0 -  9       100\r\n     *      10 - 19        90\r\n     *      20 - 29        80\r\n     *      30 - 39        70\r\n     *      40 - 49        60\r\n     *      50 - 59        50\r\n     *      60 - 69        40\r\n     *      70 - 79        30\r\n     *      80 - 89        20\r\n     *      90 - 99        10\r\n     *       < 4600         1\r\n     */\r\n    function notifyGoaldCreated(address creator) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        require(msg.sender == _latestDeployer, \"Not latest deployer\");\r\n\r\n        // All governance tokens have been issued.\r\n        if (_governanceStage == STAGE_ALL_GOVERNANCE_ISSUED) {\r\n            _goaldsDeployed++;\r\n            return;\r\n        }\r\n\r\n        // Calculate the amount of tokens issued based on the schedule.\r\n        uint256 goaldsDeployed = _goaldsDeployed;\r\n        uint256 amount;\r\n        if        (goaldsDeployed <   10) {\r\n            amount = 100;\r\n        } else if (goaldsDeployed <   20) {\r\n            amount =  90;\r\n        } else if (goaldsDeployed <   30) {\r\n            amount =  80;\r\n        } else if (goaldsDeployed <   40) {\r\n            amount =  70;\r\n        } else if (goaldsDeployed <   50) {\r\n            amount =  60;\r\n        } else if (goaldsDeployed <   60) {\r\n            amount =  50;\r\n        } else if (goaldsDeployed <   70) {\r\n            amount =  40;\r\n        } else if (goaldsDeployed <   80) {\r\n            amount =  30;\r\n        } else if (goaldsDeployed <   90) {\r\n            amount =  20;\r\n        } else if (goaldsDeployed <  100) {\r\n            amount =  10;\r\n        } else if (goaldsDeployed < 4600) {\r\n            amount =   1;\r\n        }\r\n\r\n        if (amount > 0) {\r\n            // Update their dividend balance.\r\n            _checkDividend(creator);\r\n\r\n            // We are creating a new holder.\r\n            if (balanceOf(creator) < DIVIDEND_THRESHOLD) {\r\n                _dividendHolders ++;\r\n            }\r\n\r\n            // Give them the tokens.\r\n            _mint(creator, amount * DIVIDEND_THRESHOLD);\r\n        }\r\n\r\n        // We are fully done.\r\n        if (goaldsDeployed >= 4600 && _governanceStage == STAGE_DAO_INITIATED) {\r\n            _governanceStage = STAGE_ALL_GOVERNANCE_ISSUED;\r\n        }\r\n\r\n        // Update the count.\r\n        _goaldsDeployed = goaldsDeployed + 1;\r\n    }\r\n\r\n    /// Governance ///\r\n\r\n    /** Changes which token will be the dividend token. This can only happen if there is no balance in reserve held for dividends. */\r\n    function changeDividendContract(address newContract) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner,                    \"Not owner\");\r\n        require(newContract != address(0),               \"Can't be zero address\");\r\n        require(newContract != address(this),            \"Can't be this address\");\r\n        require(_governanceStage >= STAGE_DAO_INITIATED, \"DAO not initiated\");\r\n        require(_reservedBalance == 0,                   \"Have reserved balance\");\r\n\r\n        _dividendContract = newContract;\r\n    }\r\n\r\n    function claimIssuance() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\r\n        require(msg.sender == _owner,              \"Not owner\");\r\n        require(_governanceStage == STAGE_INITIAL, \"Already claimed\");\r\n\r\n        _mint(_owner, 11000 * DIVIDEND_THRESHOLD);\r\n\r\n        _governanceStage = STAGE_ISSUANCE_CLAIMED;\r\n    }\r\n\r\n    /** Uses Uniswap to convert all held amount of a specific token into the dividend token, using the provided path. */\r\n    function convertToken(address[] calldata path, uint256 deadline) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n        require(msg.sender == _owner,                    \"Not owner\");\r\n        require(_governanceStage >= STAGE_DAO_INITIATED, \"DAO not initiated\");\r\n            \r\n        // Make sure this contract actually has a balance.\r\n        IERC20 tokenContract = IERC20(path[0]);\r\n        uint256 amount = tokenContract.balanceOf(address(this));\r\n        require(amount > 0, \"No balance for token\");\r\n\r\n        // Swap the tokens.\r\n        tokenContract.approve(_uniswapRouterAddress, amount);\r\n        IUniswapV2Router02(_uniswapRouterAddress).swapExactTokensForTokens(amount, 1, path, address(this), deadline);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /** Uses Uniswap to convert all held amount of specific tokens into the dividend token. The tokens must have a direct path. */\r\n    function convertTokens(address[] calldata tokenAddresses, uint256 deadline) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        require(_governanceStage >= STAGE_DAO_INITIATED, \"DAO not initiated\");\r\n\r\n        // The path between a given token and the dividend token within Uniswap.\r\n        address[] memory path;\r\n        path[1] = _dividendContract;\r\n        IUniswapV2Router02 uniswap = IUniswapV2Router02(_uniswapRouterAddress);\r\n\r\n        address tokenAddress;\r\n        IERC20 tokenContract;\r\n        \r\n        uint256 amount;\r\n        uint256 count = tokenAddresses.length;\r\n        for (uint256 i; i < count; i ++) {\r\n            // Validate the token.\r\n            tokenAddress = tokenAddresses[i];\r\n            require(tokenAddress != address(0),        \"Can't be zero address\");\r\n            require(tokenAddress != address(this),     \"Can't be this address\");\r\n            require(tokenAddress != _dividendContract, \"Can't be target address\");\r\n            \r\n            // Make sure this contract actually has a balance.\r\n            tokenContract = IERC20(tokenAddress);\r\n            amount = tokenContract.balanceOf(address(this));\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            // Swap the tokens.\r\n            tokenContract.approve(_uniswapRouterAddress, amount);\r\n            path[0] = tokenAddress;\r\n            uniswap.swapExactTokensForTokens(amount, 1, path, address(this), deadline);\r\n        }\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    function initializeDAO() external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        require(msg.sender == _owner,                       \"Not owner\");\r\n        require(_governanceStage == STAGE_ISSUANCE_CLAIMED, \"Issuance unclaimed\");\r\n\r\n        _burn(_owner, 10000 * DIVIDEND_THRESHOLD);\r\n\r\n        _governanceStage = STAGE_DAO_INITIATED;\r\n    }\r\n\r\n    /// Dividends ///\r\n\r\n    /** Check which dividends a given address is eligible for, and update their current dividend balance to reflect that total. */\r\n    function _checkDividend(address holder) internal {\r\n        // There is no need for reentrancy since this only updates the `_dividendBalance` for a given holder according to the amounts\r\n        // they are already owed according to the current state. If this is an unexpected reentrant call, then that holder gets the\r\n        // benefit of this math without having to pay the gas.\r\n\r\n        // The total number of dividends issued.\r\n        uint256 count = _dividendMultipliers.length;\r\n\r\n        // The holder has already claimed all dividends.\r\n        uint256 currentMinimumIndex = _minimumDividendIndex[holder];\r\n        if (currentMinimumIndex == count) {\r\n            return;\r\n        }\r\n\r\n        // The holder is not eligible for a dividend according to their current balance.\r\n        uint256 balance = balanceOf(holder);\r\n        if (balance < DIVIDEND_THRESHOLD) {\r\n            // Mark that they have been checked for all dividends.\r\n            if (currentMinimumIndex < count) {\r\n                _minimumDividendIndex[holder] = count;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate the balance increase according to which dividends the holder has yet to claim. Also calculate the amount of the\r\n        // reserve should be released if a given dividend has been fully collected by all holders.\r\n        uint256 multiplier;\r\n        uint256 reserveDecrease;\r\n        for (; currentMinimumIndex < count; currentMinimumIndex ++) {\r\n            // This can never overflow since a dividend can't be created unless there is enough reserve balance to cover its\r\n            // multiplier, which already checks for overflows, likewise `multiplier * balance` can never overflow.\r\n            multiplier += _dividendMultipliers[currentMinimumIndex];\r\n\r\n            // Reduce the holder count and reserve for this dividend. If this is the last holder, we refund the remainder of the held\r\n            // reserve back to the main pool. We don't need to worry about underflows here because these values never increase. They\r\n            // are set once when the dividend is created, based on the total supply of the governance token at that time.\r\n            if (_dividendHolderCounts[currentMinimumIndex] == 1) {\r\n                reserveDecrease += _dividendReserves[currentMinimumIndex] - (multiplier * balance);\r\n                _dividendHolderCounts[currentMinimumIndex] = 0;\r\n                _dividendReserves[currentMinimumIndex] = 0;\r\n            } else {\r\n                _dividendHolderCounts[currentMinimumIndex]--;\r\n                _dividendReserves[currentMinimumIndex] -= multiplier * balance;\r\n            }\r\n        }\r\n        _minimumDividendIndex[holder] = count;\r\n\r\n        // Update the balance.\r\n        uint256 currentBalance = _dividendBalance[holder];\r\n        require(currentBalance + (multiplier * balance) > currentBalance, \"Balance overflow\");\r\n        _dividendBalance[holder] = currentBalance + (multiplier * balance);   \r\n\r\n        // Update the reserve balance.\r\n        if (reserveDecrease > 0) {\r\n            _reservedBalance -= reserveDecrease;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new dividend. Dividends are only paid out to holders who have at least \"one token\" at time of creation. The dividend\r\n     * is a multiplier, representing how many dividend tokens (e.g., WBTC) should be paid out for one governance token. Dividend\r\n     * eligibility is only updated in state in two cases:\r\n     *      1) When a dividend is being withdrawn (in which it is set to zero).\r\n     *      2) When the governance token is transferred (balances are checked before the transfer, on both sender and recipient).\r\n     */\r\n    function createDividend(uint256 multiplier, string calldata reason) external {\r\n        // Reentrancy guard.\r\n        require(_status == RE_NOT_ENTERED);\r\n        _status = RE_ENTERED;\r\n        require(msg.sender == _owner,                    \"Not owner\");\r\n        require(_governanceStage >= STAGE_DAO_INITIATED, \"DAO not initiated\");\r\n        require(multiplier > 0,                          \"Multiplier must be > 0\");\r\n\r\n        // Make sure we can actually create a dividend with that amount.\r\n        uint256 currentBalance = IERC20(_dividendContract).balanceOf(address(this)) - _reservedBalance;\r\n        uint256 holders = _dividendHolders;\r\n        uint256 reserveIncrease = totalSupply() * multiplier;\r\n        require(reserveIncrease > currentBalance, \"Multiplier too large\");\r\n\r\n        // Increase the reserve.\r\n        require(_reservedBalance + reserveIncrease > _reservedBalance, \"Reserved overflow error\");\r\n        _reservedBalance += reserveIncrease;\r\n\r\n        // Keep track of the holders, reserve, and multiplier for this dividend.\r\n        _dividendHolderCounts.push(holders);\r\n        _dividendMultipliers.push(multiplier);\r\n        _dividendReserves.push(reserveIncrease);\r\n\r\n        // Hello world!\r\n        emit DividendCreated(multiplier, reason);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /** Returns the dividend balance for a holder according to the true state, not the hard state. See: `_checkDividend()`. */\r\n    function getDividendBalance(address holder) external view returns (uint256) {\r\n        uint256 count = _dividendMultipliers.length;\r\n        uint256 balance = balanceOf(holder);\r\n        uint256 dividendBalance = _dividendBalance[holder];\r\n        uint256 currentMinimumIndex = _minimumDividendIndex[holder];\r\n        for (; currentMinimumIndex < count; currentMinimumIndex ++) {\r\n            dividendBalance += _dividendMultipliers[currentMinimumIndex] * balance;\r\n        }\r\n\r\n        return dividendBalance;\r\n    }\r\n\r\n    /**\r\n     * Withdraws the current dividend balance. The sender doesn't need to have any current balance of the governance token to\r\n     * withdraw, so long as they have a preexisting outstanding balance. This has a provided recipient so that we can drain the\r\n     * dividend pool as necessary (e.g., for changing the dividend token).\r\n     */\r\n    function withdrawDividend(address recipient) external {\r\n        // Reentrancy guard. Allow owner to drain the pool even if frozen.\r\n        require(_status == RE_NOT_ENTERED || (_status == RE_FROZEN && msg.sender == _owner));\r\n        _status = RE_ENTERED;\r\n\r\n        // Update their balance.\r\n        _checkDividend(recipient);\r\n\r\n        // Revert so gas estimators will show a failure.\r\n        uint256 balance = _dividendBalance[recipient];\r\n        require(balance > 0, \"No dividend balance\");\r\n\r\n        // Wipe the balance.\r\n        _dividendBalance[recipient] = 0;\r\n        require(_reservedBalance - balance > 0, \"Reserved balance underflow\");\r\n        _reservedBalance -= balance;\r\n\r\n        // Give them their balance.\r\n        IERC20(_dividendContract).transfer(recipient, balance);\r\n\r\n        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\r\n        _status = RE_NOT_ENTERED;\r\n    }\r\n\r\n    /// ERC20 Overrides ///\r\n\r\n    /** This is overridden so we can update the dividend balancees prior to the transfer completing. */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        // Update the dividend balances prior to the transfer for both sender and receiver.\r\n        _checkDividend(msg.sender);\r\n        _checkDividend(recipient);\r\n\r\n        // Preserve the original balances so we know if we need to change `_dividendHolders`.\r\n        uint256 senderBefore = balanceOf(msg.sender);\r\n        uint256 recipientBefore = balanceOf(recipient);\r\n\r\n        super.transfer(recipient, amount);\r\n\r\n        // See if we need to change `_dividendHolders`.\r\n        uint256 senderAfter = balanceOf(msg.sender);\r\n        if (senderAfter >= DIVIDEND_THRESHOLD && senderBefore < DIVIDEND_THRESHOLD) {\r\n            _dividendHolders ++;\r\n        } else if (senderAfter < DIVIDEND_THRESHOLD && senderBefore >= DIVIDEND_THRESHOLD) {\r\n            _dividendHolders --;\r\n        }\r\n        uint256 recipientAfter = balanceOf(recipient);\r\n        if (recipientAfter >= DIVIDEND_THRESHOLD && recipientBefore < DIVIDEND_THRESHOLD) {\r\n            _dividendHolders ++;\r\n        } else if (recipientAfter < DIVIDEND_THRESHOLD && recipientBefore >= DIVIDEND_THRESHOLD) {\r\n            _dividendHolders --;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** This is overridden so we can update the dividend balancees prior to the transfer completing. */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        // Update the dividend balances prior to the transfer for both sender and receiver.\r\n        _checkDividend(sender);\r\n        _checkDividend(recipient);\r\n\r\n        // Preserve the original balances so we know if we need to change `_dividendHolders`.\r\n        uint256 senderBefore = balanceOf(sender);\r\n        uint256 recipientBefore = balanceOf(recipient);\r\n\r\n        super.transferFrom(sender, recipient, amount);\r\n\r\n        // See if we need to change `_dividendHolders`.\r\n        uint256 senderAfter = balanceOf(sender);\r\n        if (senderAfter >= DIVIDEND_THRESHOLD && senderBefore < DIVIDEND_THRESHOLD) {\r\n            _dividendHolders ++;\r\n        } else if (senderAfter < DIVIDEND_THRESHOLD && senderBefore >= DIVIDEND_THRESHOLD) {\r\n            _dividendHolders --;\r\n        }\r\n        uint256 recipientAfter = balanceOf(recipient);\r\n        if (recipientAfter >= DIVIDEND_THRESHOLD && recipientBefore < DIVIDEND_THRESHOLD) {\r\n            _dividendHolders ++;\r\n        } else if (recipientAfter < DIVIDEND_THRESHOLD && recipientBefore >= DIVIDEND_THRESHOLD) {\r\n            _dividendHolders --;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DividendCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_dividendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reservedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"changeDividendContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeployer\",\"type\":\"address\"}],\"name\":\"changeLatestDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeUniswapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convertToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convertTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"createDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getDividendBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDeployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"notifyGoaldCreated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GoaldProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a1525c5aa7217ecc83334004a8098b0e3b2def7ed5f7358f50d3ce871f991a5d"}]}