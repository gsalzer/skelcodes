{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/mnt/d/git/chain/cubedao/contracts/Cube/CubeMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.8.0;\\r\\nimport \\\"@openzeppelin/upgrades-core/contracts/Initializable.sol\\\";\\r\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../utils/SafeMath.sol\\\";\\r\\nimport \\\"../utils/Ownable.sol\\\";\\r\\n\\r\\ncontract CubeMining is Ownable, Initializable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => mapping(uint256 => uint256)) private _users;\\r\\n    /*\\r\\n     internal mapping     \\r\\n        \\\"userId\\\"           :  key->uint256 [0] => value->uint256 [amount]\\r\\n        \\\"userRefId\\\"        :  key->uint256 [1] => value->uint256 [amount]\\r\\n        \\\"pledgeCda\\\"        :  key->uint256 [2] => value->uint256 [amount]\\r\\n        \\\"pledgeUSDT\\\"       :  key->uint256 [3] => value->uint256 [amount]\\r\\n        \\\"burnUSDT\\\"         :  key->uint256 [4] => value->uint256 [amount]\\r\\n        \\\"reward\\\"           :  key->uint256 [5] => value->uint256 [amount]\\r\\n        \\\"unclaimReward\\\"    :  key->uint256 [6] => value->uint256 [amount]\\r\\n        \\\"lastCalcAt\\\"       :  key->uint256 [7] => value->uint256 [amount]\\r\\n        \\\"addition\\\"         :  key->uint256 [8] => value->uint256 [amount]\\r\\n        \\\"burnCDA\\\"          :  key->uint256 [9] => value->uint256 [amount]\\r\\n        \\\"userPower\\\"        :  key->uint256 [10] => value->uint256 [amount]\\r\\n    */\\r\\n    mapping(uint256 => address) private _userIdMap;\\r\\n    mapping(uint256 => uint256) private _localUintVariables;\\r\\n    /* _localUintVariables\\r\\n    //0 uint256 private _userId; //current max userId\\r\\n    //1 uint256 private _totalPledgeCda; //total pledge cda amount\\r\\n    //2 uint256 private _totalPledgeUSDT; //total pledge usdt amount\\r\\n    //3 uint256 private _miningHardCap; // mining max count of cda\\r\\n    //4 uint256 private _initMiningPeriod; // the first mining period (30 days)\\r\\n    //5 uint256 private _initMiningReward; // the first peroid mining reward\\r\\n    //6 uint256 private _startAt; // the main contract start at\\r\\n    //7 uint256 private _totalBurnCda; // total burn cda amount\\r\\n    //8 uint256 private _cdaPrice; // the cda currency price\\r\\n    //9 uint256 private _totalPledgeUSDTPower; //total pledge usdt computing power\\r\\n    */\\r\\n\\r\\n    mapping(uint256 => address) private _localAddressVariables;\\r\\n\\r\\n    //_localAddressVariables\\r\\n    //address private _cdaToken; // cda token contract address\\r\\n    //address private _usdtToken; // usdt token contract address\\r\\n\\r\\n    function initialize(\\r\\n        address cdaToken,\\r\\n        address usdtToken,\\r\\n        uint256 miningHardCap,\\r\\n        uint256 initMiningPeriod,\\r\\n        uint256 initMiningReward\\r\\n    ) public initializer {\\r\\n        Ownable.initialize();\\r\\n        _localUintVariables[0] = 100;\\r\\n        _localAddressVariables[0] = cdaToken;\\r\\n        _localAddressVariables[1] = usdtToken;\\r\\n        _localUintVariables[3] = miningHardCap.mul(10**18);\\r\\n        _localUintVariables[4] = initMiningPeriod * (1 days);\\r\\n        _localUintVariables[5] = initMiningReward.mul(10**18);\\r\\n        _localUintVariables[6] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    event Addtion(\\r\\n        string indexed ms,\\r\\n        uint256 burnLevel,\\r\\n        uint256 treeLevel,\\r\\n        uint256 add,\\r\\n        uint256 origin\\r\\n    );\\r\\n\\r\\n    //should approve before call this method\\r\\n    function pledgeMining(\\r\\n        uint256 cdaAmount,\\r\\n        uint256 usdtAmount,\\r\\n        uint256 refId\\r\\n    ) external {\\r\\n        //uint256 userId = _users[msg.sender][0];\\r\\n        //address miningContract = address(this);\\r\\n        //transfer cda and usdt to mining contract\\r\\n        //cdaPrice = _localUintVariables[8]\\r\\n        require(_localUintVariables[8] > 0, \\\"cda price not update\\\");\\r\\n        uint256 cdaVal = cdaAmount.mul(_localUintVariables[8]).div(10000);\\r\\n        require(usdtAmount.div(cdaVal) >= 5, \\\"usdt should>=5*cdaVal\\\");\\r\\n        require(\\r\\n            usdtAmount.div(cdaVal).mul(10) <= 51,\\r\\n            \\\"usdt should<=5.1*cdaVal\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC20(_localAddressVariables[0]).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                cdaAmount\\r\\n            ) &&\\r\\n                IERC20(_localAddressVariables[1]).transferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    usdtAmount\\r\\n                ),\\r\\n            \\\"transfer cda or usdt failed\\\"\\r\\n        );\\r\\n\\r\\n        if (_users[msg.sender][0] == 0) {\\r\\n            //起始Id是100\\r\\n            require(\\r\\n                (refId >= 100 && refId <= _localUintVariables[0]) ||\\r\\n                    refId == 100000000,\\r\\n                \\\"invalid refId\\\"\\r\\n            );\\r\\n            _localUintVariables[0] = _localUintVariables[0] + 1;\\r\\n            _users[msg.sender][0] = _localUintVariables[0];\\r\\n            _users[msg.sender][1] = refId;\\r\\n            _userIdMap[_localUintVariables[0]] = msg.sender;\\r\\n            //增加用户时，才需要增加算力\\r\\n            //一级用户\\r\\n            address level1Address = _userIdMap[refId];\\r\\n            uint256 level1BurnLevel =\\r\\n                getUserBurnLevel(_users[level1Address][4]);\\r\\n            if (level1Address != address(0)) {\\r\\n                //uint256 addition = getAddition(level1BurnLevel,1);\\r\\n\\r\\n                emit Addtion(\\r\\n                    \\\"addtion\\\",\\r\\n                    level1BurnLevel,\\r\\n                    1,\\r\\n                    getAddition(level1BurnLevel, 1),\\r\\n                    _users[level1Address][8]\\r\\n                );\\r\\n                _users[level1Address][8] = _users[level1Address][8].add(\\r\\n                    getAddition(level1BurnLevel, 1)\\r\\n                );\\r\\n                updateUserPowerAndTotalPower(level1Address);\\r\\n                //二级用户\\r\\n                uint256 level2RefUserId = _users[level1Address][1];\\r\\n                address level2Address = _userIdMap[level2RefUserId];\\r\\n                uint256 level2BurnLevel =\\r\\n                    getUserBurnLevel(_users[level2Address][4]);\\r\\n\\r\\n                if (level2Address != address(0)) {\\r\\n                    emit Addtion(\\r\\n                        \\\"addtion\\\",\\r\\n                        level2BurnLevel,\\r\\n                        2,\\r\\n                        getAddition(level2BurnLevel, 2),\\r\\n                        _users[level2Address][8]\\r\\n                    );\\r\\n                    _users[level2Address][8] = _users[level2Address][8].add(\\r\\n                        getAddition(level2BurnLevel, 2)\\r\\n                    );\\r\\n                    updateUserPowerAndTotalPower(level2Address);\\r\\n                    //三级用户\\r\\n                    uint256 level3RefUserId = _users[level2Address][1];\\r\\n                    address level3Address = _userIdMap[level3RefUserId];\\r\\n                    uint256 level3BurnLevel =\\r\\n                        getUserBurnLevel(_users[level3Address][4]);\\r\\n                    if (level3Address != address(0)) {\\r\\n                        emit Addtion(\\r\\n                            \\\"addtion\\\",\\r\\n                            level3BurnLevel,\\r\\n                            3,\\r\\n                            getAddition(level3BurnLevel, 3),\\r\\n                            _users[level3Address][8]\\r\\n                        );\\r\\n                        _users[level3Address][8] = _users[level3Address][8].add(\\r\\n                            getAddition(level3BurnLevel, 3)\\r\\n                        );\\r\\n                        updateUserPowerAndTotalPower(level3Address);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _localUintVariables[1] = _localUintVariables[1].add(cdaAmount);\\r\\n        _localUintVariables[2] = _localUintVariables[2].add(usdtAmount);\\r\\n        _users[msg.sender][2] = _users[msg.sender][2].add(cdaAmount);\\r\\n        _users[msg.sender][3] = _users[msg.sender][3].add(usdtAmount);\\r\\n        updateUserPowerAndTotalPower(msg.sender);\\r\\n    }\\r\\n\\r\\n    function calcUserPower(address userAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            _users[userAddress][3] //pledgeUSDT\\r\\n                .mul(100 + _users[userAddress][8])\\r\\n                .div(100)\\r\\n                .add(_users[userAddress][4].div(2)); // burnUsdt\\r\\n    }\\r\\n\\r\\n    event UpdateUserPowerAndTotalPower(\\r\\n        address indexed userAddr,\\r\\n        uint256 power,\\r\\n        uint256 addition\\r\\n    );\\r\\n\\r\\n    //更新用户算力和总算力值\\r\\n    function updateUserPowerAndTotalPower(address userAddress) internal {\\r\\n        uint256 newPower = calcUserPower(userAddress);\\r\\n        uint256 crtAddition = newPower.sub(_users[userAddress][10]);\\r\\n        _users[userAddress][10] = newPower;\\r\\n        if (crtAddition > 0) {\\r\\n            _localUintVariables[9] = _localUintVariables[9].add(crtAddition);\\r\\n        }\\r\\n        emit UpdateUserPowerAndTotalPower(userAddress, newPower, crtAddition);\\r\\n    }\\r\\n\\r\\n    //提取质押的代币（取回所有质押）\\r\\n    function releasePledge() external {\\r\\n        // uint256 cdaAmount = _users[msg.sender][2];\\r\\n        // uint256 usdtAmount = _users[msg.sender][3];\\r\\n        require(\\r\\n            _users[msg.sender][2] > 0 && _users[msg.sender][3] > 0,\\r\\n            \\\"no pledge exist\\\"\\r\\n        );\\r\\n        require(\\r\\n            //transfer cda\\r\\n            IERC20(_localAddressVariables[0]).transfer(\\r\\n                msg.sender,\\r\\n                _users[msg.sender][2]\\r\\n            ),\\r\\n            \\\"transfer cda failed\\\"\\r\\n        );\\r\\n        require(\\r\\n            //transfer usdt\\r\\n            IERC20(_localAddressVariables[1]).transfer(\\r\\n                msg.sender,\\r\\n                _users[msg.sender][3]\\r\\n            ),\\r\\n            \\\"transfer usdt failed\\\"\\r\\n        );\\r\\n        _localUintVariables[1] = _localUintVariables[1].sub(\\r\\n            _users[msg.sender][2]\\r\\n        );\\r\\n        _localUintVariables[2] = _localUintVariables[2].sub(\\r\\n            _users[msg.sender][3]\\r\\n        );\\r\\n        _localUintVariables[9] = _localUintVariables[9].sub(\\r\\n            _users[msg.sender][10]\\r\\n        );\\r\\n        _users[msg.sender][2] = 0;\\r\\n        _users[msg.sender][3] = 0;\\r\\n        _users[msg.sender][10] = 0;\\r\\n    }\\r\\n\\r\\n    //提取奖励,继续质押\\r\\n    function claimReward() external {\\r\\n        uint256 cdaReward = _users[msg.sender][6];\\r\\n        require(\\r\\n            IERC20(_localAddressVariables[0]).balanceOf(address(this)) >=\\r\\n                cdaReward,\\r\\n            \\\"exceed amount\\\"\\r\\n        );\\r\\n        require(cdaReward > 1, \\\"at least 1 cda can claim\\\");\\r\\n        require(\\r\\n            IERC20(_localAddressVariables[0]).transfer(msg.sender, cdaReward),\\r\\n            \\\"transfer cda failed\\\"\\r\\n        );\\r\\n\\r\\n        _users[msg.sender][6] = 0;\\r\\n        _users[msg.sender][5] = _users[msg.sender][5].add(cdaReward);\\r\\n    }\\r\\n\\r\\n    //获取用户的燃烧信息\\r\\n    function getBurnInfo(address userAddr) external view returns (uint256) {\\r\\n        return _users[userAddr][4];\\r\\n    }\\r\\n\\r\\n    //获取用户燃烧等级\\r\\n    function getUserBurnLevel(uint256 burnedUsdt)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 level;\\r\\n        if (burnedUsdt < 200 * (10**18)) level = 0;\\r\\n        if (burnedUsdt >= 200 * (10**18) && burnedUsdt < 500 * (10**18))\\r\\n            level = 1;\\r\\n        else if (burnedUsdt >= 500 * (10**18) && burnedUsdt < 800 * (10**18))\\r\\n            level = 2;\\r\\n        else if (burnedUsdt >= 800 * (10**18)) level = 3;\\r\\n        return level;\\r\\n    }\\r\\n\\r\\n    //获得燃烧等级，层级对应的算力提升百分比\\r\\n\\r\\n    function getAddition(uint256 burnLevel, uint256 treeLevel)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(treeLevel > 0, \\\"tree level gte 1\\\");\\r\\n        require(burnLevel <= 3, \\\"max level 3\\\");\\r\\n        uint256 basePercent;\\r\\n        uint256 step;\\r\\n        if (treeLevel == 1) {\\r\\n            basePercent = 10;\\r\\n            step = 5;\\r\\n        } else if (treeLevel == 2) {\\r\\n            basePercent = 5;\\r\\n            step = 5;\\r\\n        } else if (treeLevel == 3) {\\r\\n            basePercent = 3;\\r\\n            step = 2;\\r\\n        }\\r\\n\\r\\n        return basePercent.add(step.mul(burnLevel));\\r\\n    }\\r\\n\\r\\n    //燃烧提升算力，燃烧金额的一半直接附加在算力上（有质押的情况下）\\r\\n    function burn(uint256 amount) external returns (bool) {\\r\\n        //uint256 userId = _users[msg.sender][0];\\r\\n        //uint256 cdaPrice = _localUintVariables[8];\\r\\n        require(_localUintVariables[8] > 0, \\\"price should gt 0\\\");\\r\\n        require(amount > 0, \\\"amount should gt 0\\\");\\r\\n        require(_users[msg.sender][0] > 0, \\\"invalid user cann't burn\\\");\\r\\n        //the price should div 10000(价格除以一万，意味着价格执行4位小数)\\r\\n        uint256 usdtAmount = amount.mul(_localUintVariables[8]).div(10000);\\r\\n        uint256 totalBurnUsdtAmount = usdtAmount.add(_users[msg.sender][4]);\\r\\n        uint256 totalBurnCdaAmount = amount.add(_users[msg.sender][9]);\\r\\n        require(totalBurnUsdtAmount <= 810 * 10**18, \\\"exceed max burn amount\\\");\\r\\n        _users[msg.sender][4] = totalBurnUsdtAmount;\\r\\n        _users[msg.sender][9] = totalBurnCdaAmount;\\r\\n        if (_users[msg.sender][3] > 0) {\\r\\n            //在有质押挖矿时，增加自身的算力\\r\\n            updateUserPowerAndTotalPower(msg.sender);\\r\\n        }\\r\\n        _localUintVariables[7] = _localUintVariables[7].add(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    event TestDebugLog(string mesg, uint256 val, uint256 addtime);\\r\\n  \\r\\n    // function calcMinerReward(\\r\\n    //     address[] calldata userAddrs,\\r\\n    //     uint256 addTimeHours \\r\\n    // )\\r\\n    //     external\\r\\n    //     onlyOwner\\r\\n    //     returns (bool)\\r\\n      function calcMinerReward(address[] calldata userAddrs)\\r\\n    onlyOwner external\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(userAddrs.length <= 50, \\\"too much address to calc\\\");\\r\\n        require(_localUintVariables[2] > 0, \\\"no pledge\\\");\\r\\n\\r\\n        for (uint256 index = 0; index < userAddrs.length; index++) {\\r\\n            //address userAddr = userAddrs[index];\\r\\n            //uint256 userId = _users[userAddrs[index]][0];\\r\\n            //uint256 addition = _users[userAddrs[index]][8];\\r\\n            if (_users[userAddrs[index]][0] <= 0) continue;\\r\\n            uint256 _now = block.timestamp;\\r\\n\\r\\n            _now = block.timestamp; \\r\\n            //_now = block.timestamp.add(addTimeHours.mul(1 hours));\\r\\n            if (_now.sub(_users[userAddrs[index]][7]) < 3 hours) continue;\\r\\n            //第几个挖矿周期\\r\\n            // uint256 periodCount = _now\\r\\n            //     .sub(_localUintVariables[6]) // startAt\\r\\n            //     .div(_localUintVariables[4]); // first mining period\\r\\n\\r\\n            // periodCount = _now\\r\\n            //     .sub(_localUintVariables[6]) // startAt\\r\\n            //     .div(_localUintVariables[4]).add(1);\\r\\n\\r\\n            uint256 periodCursor =\\r\\n                _now\\r\\n                    .sub(_localUintVariables[6]) // startAt\\r\\n                    .div(_localUintVariables[4])\\r\\n                    .add(1)\\r\\n                    .srqt(2);\\r\\n            emit TestDebugLog(\\r\\n                \\\"periodCursor\\\",\\r\\n                _now\\r\\n                    .sub(_localUintVariables[6]) // startAt\\r\\n                    .div(_localUintVariables[4])\\r\\n                    .add(1),\\r\\n                periodCursor\\r\\n            );\\r\\n            // calc reward, user should claim it manualy\\r\\n            // uint unclaimReward = _users[userAddrs[index]][6];\\r\\n            // uint reward = _users[userAddrs[index]][5];\\r\\n            // uint256  totalPledgeUSDTPower = _localUintVariables[0];\\r\\n            // uint256 pledgeUSDT = _users[userAddrs[index]][3];\\r\\n            // uint256 initMiningReward =_localUintVariables[5];\\r\\n            // 8 = 1 days * 24 / 3\\r\\n            uint256 rewardAmount =\\r\\n                _users[userAddrs[index]][10]\\r\\n                    .mul(_localUintVariables[5].div(2**periodCursor))\\r\\n                    .div(_localUintVariables[9]) //  total  pledge power\\r\\n                    .div(8);\\r\\n\\r\\n            _users[userAddrs[index]][6] = _users[userAddrs[index]][6].add(\\r\\n                rewardAmount\\r\\n            );\\r\\n\\r\\n            //lastCalcAt\\r\\n            _users[userAddrs[index]][7] = block.timestamp;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //获取用户信息\\r\\n    function getUserInfo(address userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[11] memory)\\r\\n    //[0]  uint256, //userId\\r\\n    //[1]  uint256, // userRefId\\r\\n    //[2]  uint256, // pledgeCda\\r\\n    //[3]  uint256, // pledgeUSDT\\r\\n    //[4]  uint256, // burnUSDT\\r\\n    //[5]  uint256, // reward\\r\\n    //[6]  uint256, // unclaimReward\\r\\n    //[7]  uint256, // lastCalcAt\\r\\n    //[8]  uint256, // addition\\r\\n    //[9]  uint256, // burnCDA\\r\\n    //[10] uint256  // usdt power\\r\\n    {\\r\\n        return [\\r\\n            _users[userAddr][0],\\r\\n            _users[userAddr][1],\\r\\n            _users[userAddr][2],\\r\\n            _users[userAddr][3],\\r\\n            _users[userAddr][4],\\r\\n            _users[userAddr][5],\\r\\n            _users[userAddr][6],\\r\\n            _users[userAddr][7],\\r\\n            _users[userAddr][8],\\r\\n            _users[userAddr][9],\\r\\n            _users[userAddr][10]\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    //获取用户信息\\r\\n    function getUserAddress(uint256 userId) external view returns (address) {\\r\\n        return _userIdMap[userId];\\r\\n    }\\r\\n\\r\\n    //获取挖矿统计信息\\r\\n    function getStatisticsInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _localUintVariables[2], //_totalPledgeUSDT\\r\\n            _localUintVariables[7], //_totalBurnCda\\r\\n            _localUintVariables[9], //_totalPledgeUSDT Power\\r\\n            _localUintVariables[1] //_totalPledgeCda\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //更新cda价格，用户质押时USDT配比计算参照\\r\\n    function updateCdaPrice(uint256 price) external onlyOwner {\\r\\n        // real price mul 10000\\r\\n        _localUintVariables[8] = price;\\r\\n    }\\r\\n\\r\\n    function getLocalUintVariable(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(index <= 9, \\\"out of range\\\");\\r\\n        return _localUintVariables[index];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/mnt/d/git/chain/cubedao/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.22 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"/mnt/d/git/chain/cubedao/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.22 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/mnt/d/git/chain/cubedao/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.22 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize() virtual public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/mnt/d/git/chain/cubedao/contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.22 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function srqt(uint256 srqtfrom, uint256 n) internal pure returns (uint256) {\\n        return srqt(srqtfrom, n, \\\"SafeMath srqt error\\\");\\n    }\\n\\n    function srqt(\\n        uint256 srqtfrom,\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(srqtfrom > 0, \\\"srqtfrom should > 0\\\");\\n        require(n > 0, errorMessage);\\n\\n        uint256 froms = srqtfrom + 1;\\n        uint256 comparePartner = mul(srqtfrom + 1, 10);\\n        uint256 result;\\n        while (true) {\\n            if (comparePartner > mul(n, 10)) {\\n                froms = div(froms, n, errorMessage);\\n                comparePartner = div(comparePartner, n, errorMessage);\\n                //emit Nlog(comparePartner);\\n                result += 1;\\n            } else return result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades-core/contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ms\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treeLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"add\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"Addtion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mesg\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addtime\",\"type\":\"uint256\"}],\"name\":\"TestDebugLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addition\",\"type\":\"uint256\"}],\"name\":\"UpdateUserPowerAndTotalPower\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrs\",\"type\":\"address[]\"}],\"name\":\"calcMinerReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getBurnInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLocalUintVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatisticsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"\",\"type\":\"uint256[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cdaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"miningHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMiningPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMiningReward\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"}],\"name\":\"pledgeMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasePledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateCdaPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CubeMining","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}