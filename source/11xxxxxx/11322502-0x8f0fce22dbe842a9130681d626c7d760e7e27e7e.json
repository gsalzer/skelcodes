{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\ncontract SAV4_Sale {\r\n    using SafeMath for uint256;\r\n    address public constant tokenAddress = 0x9F47D90BAFF34769b7824400C4A72a97EEd9c047 ;\r\n    uint256 tokenRatePerEth = 18720; // 1 eth = 18,720 SAV4\r\n    address payable constant fundsReceiver = 0x04Ef9bfE400cC8D2B32bEb8B009E91fe0B09Fb10;\r\n    \r\n    uint256 public preSaleStart = 1606392000; // 26-nov-2020 12pm gmt\r\n    uint256 public preSaleEnd;\r\n    \r\n    modifier saleOpen{\r\n        require(block.timestamp >= preSaleStart && block.timestamp <= preSaleEnd, \"sale is close\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        preSaleEnd = preSaleStart.add(27 hours);\r\n    }\r\n    \r\n    function buyTokens() public payable saleOpen {\r\n        uint256 tokens = getTokenAmount(msg.value);\r\n        \r\n        require(IToken(tokenAddress).transferFrom(fundsReceiver, msg.sender, tokens), \"Insufficient balance of sale contract\");\r\n        \r\n        // send received funds to the owner\r\n        fundsReceiver.transfer(msg.value);\r\n    }\r\n    \r\n    receive() external payable {\r\n        buyTokens();\r\n    }\r\n    \r\n    function getTokenAmount(uint256 amount) private view returns(uint256){\r\n        return (amount.mul(tokenRatePerEth));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SAV4_Sale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://72f2d29cad8fef32e4344b7c15e4c3e2022f171b5de8f080ea984276654f4bd2"}]}