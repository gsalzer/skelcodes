{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/AttoDecimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nstruct AttoDecimal {\\n    uint256 mantissa;\\n}\\n\\nlibrary AttoDecimalLib {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant BASE = 10;\\n    uint256 internal constant EXPONENTIATION = 18;\\n    uint256 internal constant ONE_MANTISSA = BASE**EXPONENTIATION;\\n    uint256 internal constant SQUARED_ONE_MANTISSA = ONE_MANTISSA * ONE_MANTISSA;\\n\\n    function convert(uint256 integer) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: integer.mul(ONE_MANTISSA)});\\n    }\\n\\n    function add(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mantissa.add(b.mantissa)});\\n    }\\n\\n    function sub(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mantissa.sub(b.mul(ONE_MANTISSA))});\\n    }\\n\\n    function sub(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mantissa.sub(b.mantissa)});\\n    }\\n\\n    function mul(AttoDecimal memory a, uint256 b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mantissa.mul(b)});\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mul(ONE_MANTISSA).div(b)});\\n    }\\n\\n    function div(uint256 a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mul(SQUARED_ONE_MANTISSA).div(b.mantissa)});\\n    }\\n\\n    function div(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (AttoDecimal memory) {\\n        return AttoDecimal({mantissa: a.mantissa.mul(ONE_MANTISSA).div(b.mantissa)});\\n    }\\n\\n    function ceil(AttoDecimal memory a) internal pure returns (uint256) {\\n        return a.mantissa.div(ONE_MANTISSA).add(a.mantissa % ONE_MANTISSA > 0 ? 1 : 0);\\n    }\\n\\n    function floor(AttoDecimal memory a) internal pure returns (uint256) {\\n        return a.mantissa.div(ONE_MANTISSA);\\n    }\\n\\n    function lte(AttoDecimal memory a, AttoDecimal memory b) internal pure returns (bool) {\\n        return a.mantissa <= b.mantissa;\\n    }\\n\\n    function toTuple(AttoDecimal memory a)\\n        internal\\n        pure\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        return (a.mantissa, BASE, EXPONENTIATION);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/IOMV1ToV2Migrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOMV1ToV2Migrator {\\n    function pool() external view returns (uint256);\\n    function v1Token() external view returns (IERC20);\\n    function v2Token() external view returns (IERC20);\\n\\n    function increasePool(uint256 amount) external returns (bool success);\\n    function migrate(uint256 amount) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/IStakingPoolMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IStakingPoolMigrator {\\n    function stakingPoolV1Balance() external view returns (uint256);\\n\\n    function calculatePriceParams()\\n        external\\n        view\\n        returns (uint256 stakingPoolV1Balance_, uint256 burnedSyntheticAmount);\\n\\n    function update() external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./AttoDecimal.sol\\\";\\nimport \\\"./IStakingPoolMigrator.sol\\\";\\nimport \\\"./TwoStageOwnable.sol\\\";\\n\\ncontract StakingPool is ERC20, ReentrancyGuard, TwoStageOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using AttoDecimalLib for AttoDecimal;\\n\\n    struct Strategy {\\n        uint256 endBlockNumber;\\n        uint256 perBlockReward;\\n        uint256 startBlockNumber;\\n    }\\n\\n    struct Unstake {\\n        uint256 amount;\\n        uint256 applicableAt;\\n    }\\n\\n    uint256 public constant MIN_STAKE_BALANCE = 10**18;\\n    bool public migratorInitialized;\\n\\n    uint256 public claimingFeePercent;\\n    uint256 public lastUpdateBlockNumber;\\n\\n    IStakingPoolMigrator public migrator;\\n\\n    uint256 private _feePool;\\n    uint256 private _lockedRewards;\\n    uint256 private _totalStaked;\\n    uint256 private _totalUnstaked;\\n    uint256 private _unstakingTime;\\n    IERC20 private _stakingToken;\\n\\n    AttoDecimal private _DEFAULT_PRICE;\\n    AttoDecimal private _price;\\n    Strategy private _currentStrategy;\\n    Strategy private _nextStrategy;\\n\\n    mapping(address => Unstake) private _unstakes;\\n\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    function getTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function feePool() public view returns (uint256) {\\n        return _feePool;\\n    }\\n\\n    function lockedRewards() public view returns (uint256) {\\n        return _lockedRewards;\\n    }\\n\\n    function totalStaked() public view returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    function totalUnstaked() public view returns (uint256) {\\n        return _totalUnstaked;\\n    }\\n\\n    function stakingToken() public view returns (IERC20) {\\n        return _stakingToken;\\n    }\\n\\n    function unstakingTime() public view returns (uint256) {\\n        return _unstakingTime;\\n    }\\n\\n    function currentStrategy() public view returns (Strategy memory) {\\n        return _currentStrategy;\\n    }\\n\\n    function nextStrategy() public view returns (Strategy memory) {\\n        return _nextStrategy;\\n    }\\n\\n    function getUnstake(address account) public view returns (Unstake memory result) {\\n        result = _unstakes[account];\\n    }\\n\\n    function DEFAULT_PRICE()\\n        external\\n        view\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        return _DEFAULT_PRICE.toTuple();\\n    }\\n\\n    function getCurrentStrategyUnlockedRewards() public view returns (uint256 unlocked) {\\n        unlocked = _getStrategyUnlockedRewards(_currentStrategy);\\n    }\\n\\n    function getUnlockedRewards() public view returns (uint256 unlocked, bool currentStrategyEnded) {\\n        unlocked = _getStrategyUnlockedRewards(_currentStrategy);\\n        if (_currentStrategy.endBlockNumber != 0 && getBlockNumber() >= _currentStrategy.endBlockNumber) {\\n            currentStrategyEnded = true;\\n            unlocked = unlocked.add(_getStrategyUnlockedRewards(_nextStrategy));\\n        }\\n    }\\n\\n    /// @notice Calculates price of synthetic token for current block\\n    function price()\\n        public\\n        view\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        (uint256 unlocked, ) = getUnlockedRewards();\\n        uint256 totalStaked_ = _totalStaked;\\n        uint256 totalSupply_ = totalSupply();\\n        if (migratorInitialized) {\\n            (uint256 stakingPoolV1Balance, uint256 burnedSyntheticAmount) = migrator.calculatePriceParams();\\n            totalStaked_ = totalStaked_.add(stakingPoolV1Balance);\\n            totalSupply_ = totalSupply_.sub(burnedSyntheticAmount);\\n        }\\n        AttoDecimal memory result;\\n        if (totalSupply_ == 0) result = _DEFAULT_PRICE;\\n        else result = AttoDecimalLib.div(totalStaked_.add(unlocked), totalSupply_);\\n        return (result.mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\\n    }\\n\\n    /// @notice Returns last updated price of synthetic token\\n    function priceStored()\\n        public\\n        view\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        return (_price.mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\\n    }\\n\\n    /// @notice Calculates expected result of swapping synthetic tokens for OM tokens\\n    /// @param account Account that wants to swap\\n    /// @param amount Minimum amount of OM tokens that should be received at swapping process\\n    /// @return unstakedAmount Amount of OM tokens that should be received at swapping process\\n    /// @return burnedAmount Amount of synthetic tokens that should be burned at swapping process\\n    function calculateUnstake(address account, uint256 amount)\\n        public\\n        view\\n        returns (uint256 unstakedAmount, uint256 burnedAmount)\\n    {\\n        (uint256 mantissa_, , ) = price();\\n        return _calculateUnstake(account, amount, AttoDecimal(mantissa_));\\n    }\\n\\n    event Claimed(\\n        address indexed account,\\n        uint256 requestedAmount,\\n        uint256 claimedAmount,\\n        uint256 feeAmount,\\n        uint256 burnedAmount\\n    );\\n\\n    event CurrentStrategyUpdated(uint256 perBlockReward, uint256 startBlockNumber, uint256 endBlockNumber);\\n    event FeeClaimed(address indexed receiver, uint256 amount);\\n\\n    event Migrated(\\n        address indexed account,\\n        uint256 omTokenV1StakeAmount,\\n        uint256 stakingPoolV1Reward,\\n        uint256 stakingPoolV2Reward\\n    );\\n\\n    event MigratorInitialized();\\n    event MigratorUpdated(address indexed migrator);\\n    event NextStrategyUpdated(uint256 perBlockReward, uint256 startBlockNumber, uint256 endBlockNumber);\\n    event UnstakingTimeUpdated(uint256 unstakingTime);\\n    event NextStrategyRemoved();\\n    event PoolIncreased(address indexed payer, uint256 amount);\\n    event PriceUpdated(uint256 mantissa, uint256 base, uint256 exponentiation);\\n    event RewardsUnlocked(uint256 amount);\\n    event Staked(address indexed account, address indexed payer, uint256 stakedAmount, uint256 mintedAmount);\\n    event Unstaked(address indexed account, uint256 requestedAmount, uint256 unstakedAmount, uint256 burnedAmount);\\n    event UnstakingCanceled(address indexed account, uint256 amount);\\n    event Withdrawed(address indexed account, uint256 amount);\\n\\n    constructor(\\n        string memory syntheticTokenName,\\n        string memory syntheticTokenSymbol,\\n        IERC20 stakingToken_,\\n        address owner_,\\n        uint256 claimingFeePercent_,\\n        uint256 perBlockReward_,\\n        uint256 startBlockNumber_,\\n        uint256 duration_,\\n        uint256 unstakingTime_,\\n        uint256 defaultPriceMantissa\\n    ) public TwoStageOwnable(owner_) ERC20(syntheticTokenName, syntheticTokenSymbol) {\\n        _DEFAULT_PRICE = AttoDecimal(defaultPriceMantissa);\\n        _stakingToken = stakingToken_;\\n        _setClaimingFeePercent(claimingFeePercent_);\\n        _validateStrategyParameters(perBlockReward_, startBlockNumber_, duration_);\\n        _setUnstakingTime(unstakingTime_);\\n        _setCurrentStrategy(perBlockReward_, startBlockNumber_, startBlockNumber_.add(duration_));\\n        lastUpdateBlockNumber = getBlockNumber();\\n        _price = _DEFAULT_PRICE;\\n    }\\n\\n    /// @notice Burns synthetic tokens. May be called only by migrator contract\\n    /// @param amount Synthetic tokens amount to be burned\\n    function burn(uint256 amount) external onlyMigrator returns (bool success) {\\n        _burn(msg.sender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Cancels unstaking by staking locked for withdrawals tokens\\n    /// @param amount Amount of locked for withdrawals tokens\\n    function cancelUnstaking(uint256 amount) external onlyPositiveAmount(amount) returns (bool success) {\\n        _update();\\n        address caller = msg.sender;\\n        Unstake storage unstake_ = _unstakes[caller];\\n        uint256 unstakingAmount = unstake_.amount;\\n        require(unstakingAmount >= amount, \\\"Not enough unstaked balance\\\");\\n        uint256 stakedAmount = _price.mul(balanceOf(caller)).floor();\\n        require(\\n            stakedAmount.add(amount) >= MIN_STAKE_BALANCE,\\n            \\\"Resulting stake balance less than minimal stake balance\\\"\\n        );\\n        uint256 synthAmount = AttoDecimalLib.div(amount, _price).floor();\\n        _mint(caller, synthAmount);\\n        _totalStaked = _totalStaked.add(amount);\\n        _totalUnstaked = _totalUnstaked.sub(amount);\\n        unstake_.amount = unstakingAmount.sub(amount);\\n        emit Staked(caller, address(0), amount, synthAmount);\\n        emit UnstakingCanceled(caller, amount);\\n        return true;\\n    }\\n\\n    /// @notice Swaps synthetic tokens for OM tokens and immediately sends them to the caller but takes some fee\\n    /// @param amount OM tokens amount to swap for. Fee will be taked from this amount\\n    /// @return claimedAmount Amount of OM tokens that was been sended to caller\\n    /// @return burnedAmount Amount of synthetic tokens that was burned while swapping\\n    function claim(uint256 amount)\\n        external\\n        onlyPositiveAmount(amount)\\n        returns (uint256 claimedAmount, uint256 burnedAmount)\\n    {\\n        _update();\\n        address caller = msg.sender;\\n        (claimedAmount, burnedAmount) = _calculateUnstake(caller, amount, _price);\\n        uint256 fee = claimedAmount.mul(claimingFeePercent).div(100);\\n        _burn(caller, burnedAmount);\\n        _totalStaked = _totalStaked.sub(claimedAmount);\\n        claimedAmount = claimedAmount.sub(fee);\\n        _feePool = _feePool.add(fee);\\n        emit Claimed(caller, amount, claimedAmount, fee, burnedAmount);\\n        _stakingToken.safeTransfer(caller, claimedAmount);\\n    }\\n\\n    /// @notice Withdraws all OM tokens, that have been accumulated in imidiatly claiming process.\\n    ///     Allowed to be called only by the owner\\n    /// @return amount Amount of accumulated and withdrawed tokens\\n    function claimFees() external onlyOwner returns (uint256 amount) {\\n        require(_feePool > 0, \\\"No fees\\\");\\n        amount = _feePool;\\n        _feePool = 0;\\n        emit FeeClaimed(owner, amount);\\n        _stakingToken.safeTransfer(owner, amount);\\n    }\\n\\n    /// @notice Creates new strategy. Allowed to be called only by the owner\\n    /// @param perBlockReward_ Reward that should be added to common OM tokens pool every block\\n    /// @param startBlockNumber_ Number of block from which strategy should starts\\n    /// @param duration_ Blocks count for which new strategy should be applied\\n    function createNewStrategy(\\n        uint256 perBlockReward_,\\n        uint256 startBlockNumber_,\\n        uint256 duration_\\n    ) public onlyOwner returns (bool success) {\\n        _update();\\n        _validateStrategyParameters(perBlockReward_, startBlockNumber_, duration_);\\n        uint256 endBlockNumber = startBlockNumber_.add(duration_);\\n        Strategy memory strategy =\\n            Strategy({\\n                perBlockReward: perBlockReward_,\\n                startBlockNumber: startBlockNumber_,\\n                endBlockNumber: endBlockNumber\\n            });\\n        if (_currentStrategy.startBlockNumber > getBlockNumber()) {\\n            delete _nextStrategy;\\n            emit NextStrategyRemoved();\\n            _currentStrategy = strategy;\\n            emit CurrentStrategyUpdated(perBlockReward_, startBlockNumber_, endBlockNumber);\\n        } else {\\n            emit NextStrategyUpdated(perBlockReward_, startBlockNumber_, endBlockNumber);\\n            _nextStrategy = strategy;\\n            if (_currentStrategy.endBlockNumber > startBlockNumber_) {\\n                _currentStrategy.endBlockNumber = startBlockNumber_;\\n                emit CurrentStrategyUpdated(\\n                    _currentStrategy.perBlockReward,\\n                    _currentStrategy.startBlockNumber,\\n                    startBlockNumber_\\n                );\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Increases pool of rewards\\n    /// @param amount Amount of OM tokens (in wei) that should be added to rewards pool\\n    function increasePool(uint256 amount) external onlyPositiveAmount(amount) returns (bool success) {\\n        _update();\\n        address payer = msg.sender;\\n        _lockedRewards = _lockedRewards.add(amount);\\n        emit PoolIncreased(payer, amount);\\n        _stakingToken.safeTransferFrom(payer, address(this), amount);\\n        return true;\\n    }\\n\\n    /// @notice Method may be called only by nominated migrator contract. Sets caller as a migrator\\n    function initializeMigrator() external returns (bool success) {\\n        _update();\\n        assertCallerIsMigrator();\\n        migratorInitialized = true;\\n        emit MigratorInitialized();\\n        return true;\\n    }\\n\\n    /// @notice Mints requested amount of synthetic tokens to specific account.\\n    ///     This method can be called only by migrator\\n    /// @param account Address for which synthetic tokens should be minted\\n    /// @param amount Amount of synthetic tokens to be minted\\n    function mint(address account, uint256 amount) external onlyMigrator returns (bool success) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    /// @notice Nominates some contract to the migrator role. Method allowed to be called only by the owner\\n    /// @param migrator_ Address of migration contract to be nominated\\n    function setMigrator(IStakingPoolMigrator migrator_) external onlyOwner returns (bool success) {\\n        require(!migratorInitialized, \\\"Migrator already initialized\\\");\\n        migrator = migrator_;\\n        emit MigratorUpdated(address(migrator_));\\n        return true;\\n    }\\n\\n    /// @notice Converts OM tokens to synthetic tokens\\n    /// @param amount Amount of OM tokens to be swapped\\n    /// @return mintedAmount Amount of synthetic tokens that was received at swapping process\\n    function stake(uint256 amount) external onlyPositiveAmount(amount) returns (uint256 mintedAmount) {\\n        address staker = msg.sender;\\n        return _stake(staker, staker, amount);\\n    }\\n\\n    /// @notice Converts OM tokens to synthetic tokens and sends them to specific account\\n    /// @param account Receiver of synthetic tokens\\n    /// @param amount Amount of OM tokens to be swapped\\n    /// @return mintedAmount Amount of synthetic tokens that was received by specified account at swapping process\\n    function stakeForUser(address account, uint256 amount)\\n        external\\n        onlyPositiveAmount(amount)\\n        returns (uint256 mintedAmount)\\n    {\\n        return _stake(account, msg.sender, amount);\\n    }\\n\\n    /// @notice Moves locked for rewards OM tokens to OM tokens pool. Allowed to be called only by migrator contract\\n    /// @param amount Amount of OM tokens to be unlocked\\n    /// @dev Will cause price increasing from next block\\n    function unlockRewards(uint256 amount) external onlyMigrator returns (bool success) {\\n        _lockedRewards = _lockedRewards.sub(amount, \\\"Reward pool is extinguished\\\");\\n        _totalStaked = _totalStaked.add(amount);\\n        emit RewardsUnlocked(amount);\\n        return true;\\n    }\\n\\n    /// @notice Swapes synthetic tokens for OM tokens and locks them for some period\\n    /// @param amount Minimum amount of OM tokens that should be locked after swapping process\\n    /// @return unstakedAmount Amount of OM tokens that was locked\\n    /// @return burnedAmount Amount of synthetic tokens that was burned\\n    function unstake(uint256 amount)\\n        external\\n        onlyPositiveAmount(amount)\\n        returns (uint256 unstakedAmount, uint256 burnedAmount)\\n    {\\n        _update();\\n        address caller = msg.sender;\\n        (unstakedAmount, burnedAmount) = _calculateUnstake(caller, amount, _price);\\n        _burn(caller, burnedAmount);\\n        _totalStaked = _totalStaked.sub(unstakedAmount);\\n        _totalUnstaked = _totalUnstaked.add(unstakedAmount);\\n        Unstake storage unstake_ = _unstakes[caller];\\n        unstake_.amount = unstake_.amount.add(unstakedAmount);\\n        unstake_.applicableAt = getTimestamp().add(_unstakingTime);\\n        emit Unstaked(caller, amount, unstakedAmount, burnedAmount);\\n    }\\n\\n    /// @notice Swapes migrator's synthetic tokens for OM tokens and imidiatly sends them.\\n    ///     Allowed to be called only by migrator contract\\n    /// @param amount Amount of OM tokens that should be received from swapping process\\n    /// @return synthToBurn Amount of burned synthetic tokens\\n    function unstakeLocked(uint256 amount) external onlyMigrator returns (uint256 synthToBurn) {\\n        _update();\\n        synthToBurn = AttoDecimalLib.div(amount, _price).floor();\\n        _burn(address(migrator), synthToBurn);\\n        _totalStaked = _totalStaked.sub(amount, \\\"Not enough staked OM amount\\\");\\n        _stakingToken.safeTransfer(address(migrator), amount);\\n    }\\n\\n    /// @notice Updates price of synthetic token\\n    /// @dev Automatically has been called on every contract action, that uses or can affect price\\n    function update() external returns (bool success) {\\n        _update();\\n        return true;\\n    }\\n\\n    /// @notice Withdraws unstaked OM tokens\\n    function withdraw() external returns (bool success) {\\n        address caller = msg.sender;\\n        Unstake storage unstake_ = _unstakes[caller];\\n        uint256 amount = unstake_.amount;\\n        require(amount > 0, \\\"Not unstaked\\\");\\n        require(unstake_.applicableAt <= getTimestamp(), \\\"Not released at\\\");\\n        delete _unstakes[caller];\\n        _totalUnstaked = _totalUnstaked.sub(amount);\\n        emit Withdrawed(caller, amount);\\n        _stakingToken.safeTransfer(caller, amount);\\n        return true;\\n    }\\n\\n    /// @notice Change unstaking time. Can be called only by the owner\\n    /// @param unstakingTime_ New unstaking process duration in seconds\\n    function setUnstakingTime(uint256 unstakingTime_) external onlyOwner returns (bool success) {\\n        _setUnstakingTime(unstakingTime_);\\n        return true;\\n    }\\n\\n    function _getStrategyUnlockedRewards(Strategy memory strategy_) internal view returns (uint256 unlocked) {\\n        uint256 currentBlockNumber = getBlockNumber();\\n        if (currentBlockNumber < strategy_.startBlockNumber || currentBlockNumber == lastUpdateBlockNumber) {\\n            return unlocked;\\n        }\\n        uint256 lastRewardedBlockNumber = Math.max(lastUpdateBlockNumber, strategy_.startBlockNumber);\\n        uint256 lastRewardableBlockNumber = Math.min(currentBlockNumber, strategy_.endBlockNumber);\\n        if (lastRewardedBlockNumber < lastRewardableBlockNumber) {\\n            uint256 blocksDiff = lastRewardableBlockNumber.sub(lastRewardedBlockNumber);\\n            unlocked = unlocked.add(blocksDiff.mul(strategy_.perBlockReward));\\n        }\\n    }\\n\\n    function _calculateUnstake(\\n        address account,\\n        uint256 amount,\\n        AttoDecimal memory price_\\n    ) internal view returns (uint256 unstakedAmount, uint256 burnedAmount) {\\n        unstakedAmount = amount;\\n        burnedAmount = AttoDecimalLib.div(amount, price_).ceil();\\n        uint256 balance = balanceOf(account);\\n        require(burnedAmount > 0, \\\"Too small unstaking amount\\\");\\n        require(balance >= burnedAmount, \\\"Not enough synthetic tokens\\\");\\n        uint256 remainingSyntheticBalance = balance.sub(burnedAmount);\\n        uint256 remainingStake = _price.mul(remainingSyntheticBalance).floor();\\n        if (remainingStake < 10**18) {\\n            burnedAmount = balance;\\n            unstakedAmount = unstakedAmount.add(remainingStake);\\n        }\\n    }\\n\\n    function _unlockRewardsAndStake() internal {\\n        (uint256 unlocked, bool currentStrategyEnded) = getUnlockedRewards();\\n        if (currentStrategyEnded) {\\n            _currentStrategy = _nextStrategy;\\n            emit NextStrategyRemoved();\\n            if (_currentStrategy.endBlockNumber != 0) {\\n                emit CurrentStrategyUpdated(\\n                    _currentStrategy.perBlockReward,\\n                    _currentStrategy.startBlockNumber,\\n                    _currentStrategy.endBlockNumber\\n                );\\n            }\\n            delete _nextStrategy;\\n        }\\n        unlocked = Math.min(unlocked, _lockedRewards);\\n        if (unlocked > 0) {\\n            emit RewardsUnlocked(unlocked);\\n            _lockedRewards = _lockedRewards.sub(unlocked);\\n            _totalStaked = _totalStaked.add(unlocked);\\n        }\\n        lastUpdateBlockNumber = getBlockNumber();\\n    }\\n\\n    function _update() internal {\\n        if (getBlockNumber() <= lastUpdateBlockNumber) return;\\n        if (migratorInitialized) migrator.update();\\n        _unlockRewardsAndStake();\\n        _updatePrice();\\n    }\\n\\n    function _updatePrice() internal {\\n        uint256 totalStaked_ = _totalStaked;\\n        uint256 totalSupply_ = totalSupply();\\n        if (migratorInitialized) totalStaked_ = totalStaked_.add(migrator.stakingPoolV1Balance());\\n        if (totalSupply_ == 0) _price = _DEFAULT_PRICE;\\n        else _price = AttoDecimalLib.div(totalStaked_, totalSupply_);\\n        emit PriceUpdated(_price.mantissa, AttoDecimalLib.BASE, AttoDecimalLib.EXPONENTIATION);\\n    }\\n\\n    function _validateStrategyParameters(\\n        uint256 perBlockReward,\\n        uint256 startBlockNumber,\\n        uint256 duration\\n    ) internal view {\\n        require(duration > 0, \\\"Duration is zero\\\");\\n        require(startBlockNumber >= getBlockNumber(), \\\"Start block number less then current\\\");\\n        require(perBlockReward <= 188 * 10**18, \\\"Per block reward overflow\\\");\\n    }\\n\\n    function _setClaimingFeePercent(uint256 feePercent) internal {\\n        require(feePercent >= 0 && feePercent <= 100, \\\"Percent fee should be in range [0; 100]\\\");\\n        claimingFeePercent = feePercent;\\n    }\\n\\n    function _setUnstakingTime(uint256 unstakingTime_) internal {\\n        _unstakingTime = unstakingTime_;\\n        emit UnstakingTimeUpdated(unstakingTime_);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        if (msg.sender == address(migrator)) return;\\n        _update();\\n        string memory errorText = \\\"Minimal stake balance should be more or equal to 1 token\\\";\\n        if (from != address(0)) {\\n            uint256 fromNewBalance = _price.mul(balanceOf(from).sub(amount)).floor();\\n            require(fromNewBalance >= MIN_STAKE_BALANCE || fromNewBalance == 0, errorText);\\n        }\\n        if (to != address(0)) {\\n            require(_price.mul(balanceOf(to).add(amount)).floor() >= MIN_STAKE_BALANCE, errorText);\\n        }\\n    }\\n\\n    function _setCurrentStrategy(\\n        uint256 perBlockReward_,\\n        uint256 startBlockNumber_,\\n        uint256 endBlockNumber_\\n    ) private {\\n        _currentStrategy = Strategy({\\n            perBlockReward: perBlockReward_,\\n            startBlockNumber: startBlockNumber_,\\n            endBlockNumber: endBlockNumber_\\n        });\\n        emit CurrentStrategyUpdated(perBlockReward_, startBlockNumber_, endBlockNumber_);\\n    }\\n\\n    function _stake(\\n        address staker,\\n        address payer,\\n        uint256 amount\\n    ) private returns (uint256 mintedAmount) {\\n        _update();\\n        mintedAmount = AttoDecimalLib.div(amount, _price).floor();\\n        require(mintedAmount > 0, \\\"Too small staking amount\\\");\\n        _mint(staker, mintedAmount);\\n        _totalStaked = _totalStaked.add(amount);\\n        emit Staked(staker, payer, amount, mintedAmount);\\n        _stakingToken.safeTransferFrom(payer, address(this), amount);\\n    }\\n\\n    function assertCallerIsMigrator() internal view {\\n        require(msg.sender == address(migrator), \\\"Allowed only by migrator\\\");\\n    }\\n\\n    modifier onlyMigrator() {\\n        assertCallerIsMigrator();\\n        require(migratorInitialized, \\\"Migrator not initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyPositiveAmount(uint256 amount) {\\n        require(amount > 0, \\\"Amount is not positive\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/StakingPoolsMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./AttoDecimal.sol\\\";\\nimport \\\"./IOMV1ToV2Migrator.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./IStakingPoolMigrator.sol\\\";\\nimport \\\"./stakingPoolV1/StakingPoolV1.sol\\\";\\n\\ncontract StakingPoolsMigrator is IStakingPoolMigrator, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using AttoDecimalLib for AttoDecimal;\\n\\n    enum StakingPoolRewardAction {NONE, STAKE, WITHDRAW}\\n\\n    struct StakingPoolReward {\\n        uint256 amount;\\n        bool paid;\\n    }\\n\\n    struct Account {\\n        bool lockedAmountPaid;\\n        uint256 lockedAmount;\\n        uint256 requiredAmount;\\n        AttoDecimal lockedPrice;\\n    }\\n\\n    /// @notice True when contract has been initialized\\n    bool public initialized;\\n\\n    /// @notice Timestamp when contract was initialized\\n    uint256 public initializingTimestamp;\\n    /// @notice Sum locked in contract synthetic tokens amount\\n    uint256 public lockedSyntheticAmount;\\n    /// @notice Staked in pool v1 balance (excluding compensated ones)\\n    uint256 public override(IStakingPoolMigrator) stakingPoolV1Balance;\\n    /// @notice Compensated staked amount for pool v1\\n    uint256 public stakingPoolV1IssueCompensationAmount;\\n    /// @notice Rewarding interval in seconds in pool v1\\n    uint256 public stakingPoolV1RewardInterval;\\n\\n    /// @notice Address of deployer. Needs for validation account, that calls contract initializing\\n    address public deployer;\\n\\n    /// @notice Address of tokens migration contract\\n    IOMV1ToV2Migrator public tokenMigrator;\\n    /// @notice Address of staking pool v1\\n    StakingPoolV1 public stakingPoolV1;\\n    /// @notice Address of staking pool v2\\n    StakingPool public stakingPoolV2;\\n\\n    AttoDecimal private _startPrice;\\n    mapping(address => Account) public accounts;\\n\\n    /// @dev To write blocks-dependent tests all block.number receiving was moved into this virtual method that has been overridden in mocked contract\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @dev To write time-dependent tests all block.timestamps receiving was moved into this virtual method that has been overridden in mocked contract\\n    function getTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Price of synthetic token that was when migrator was initialized\\n    function startPrice()\\n        public\\n        view\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        return _startPrice.toTuple();\\n    }\\n\\n    /// @notice Staked in pool v1 amount\\n    /// @dev Since the issue in staking pool v1\\n    ///     compensated amount should not been taken into accounts in price calculations\\n    function stakingPoolV1SignificantBalance() public view onlyInitialized returns (uint256 stakingPoolV1Balance_) {\\n        IERC20 omV1 = stakingPoolV1.stakingToken();\\n        return omV1.balanceOf(address(stakingPoolV1)).sub(stakingPoolV1IssueCompensationAmount);\\n    }\\n\\n    /// @notice Calculate all data, that should be used for synthetic token price calculations\\n    /// @return stakingPoolV1Balance_ Staked balance in pool v1\\n    /// @return burnedSyntheticAmount Synthetic tokens amount, that should be burned before next price calculations\\n    function calculatePriceParams()\\n        public\\n        view\\n        override(IStakingPoolMigrator)\\n        onlyInitialized\\n        returns (uint256 stakingPoolV1Balance_, uint256 burnedSyntheticAmount)\\n    {\\n        uint256 prevStakingPoolV1Balance = stakingPoolV1Balance;\\n        stakingPoolV1Balance_ = stakingPoolV1SignificantBalance();\\n        uint256 omDiff = prevStakingPoolV1Balance.sub(stakingPoolV1Balance_);\\n        (uint256 storedPriceMantissa, , ) = stakingPoolV2.priceStored();\\n        AttoDecimal memory price = AttoDecimal(storedPriceMantissa);\\n        burnedSyntheticAmount = AttoDecimalLib.div(omDiff, price).floor();\\n    }\\n\\n    event Initialized();\\n\\n    event StakingPoolV1RewardLocked(\\n        address indexed account,\\n        uint256 stakingPoolV1Reward,\\n        uint256 transferedSyntheticAmount\\n    );\\n\\n    event StakingPoolV2RewardLocked(address indexed account, uint256 amount);\\n    event Updated(uint256 stakingPoolV1Balance, uint256 lockedSyntheticAmount);\\n\\n    /// @param tokenMigrator_ Address of tokens migration contract\\n    /// @param stakingPoolV1_ Address of staking pool v1 contract\\n    /// @param stakingPoolV2_ Address of staking pool v2 contract\\n    /// @param stakingPoolV1RewardInterval_ Rewarding interval in staking pool v1 contract\\n    /// @dev `stakingPoolV1RewardInterval_` argument needed cause in staking pool v1 this variable is private\\n    ///     and contract has no view method for it\\n    constructor(\\n        IOMV1ToV2Migrator tokenMigrator_,\\n        StakingPoolV1 stakingPoolV1_,\\n        StakingPool stakingPoolV2_,\\n        uint256 stakingPoolV1RewardInterval_\\n    ) public {\\n        tokenMigrator = tokenMigrator_;\\n        stakingPoolV1 = stakingPoolV1_;\\n        stakingPoolV2 = stakingPoolV2_;\\n        require(stakingPoolV1RewardInterval_ > 0, \\\"Reward interval not positive\\\");\\n        stakingPoolV1RewardInterval = stakingPoolV1RewardInterval_;\\n        deployer = msg.sender;\\n        (uint256 defaultPriceMantissa, , ) = stakingPoolV2.DEFAULT_PRICE();\\n        _startPrice = AttoDecimal(defaultPriceMantissa);\\n    }\\n\\n    /// @notice Initialize contract\\n    /// @param stakingPoolV1IssueCompensationAmount_ Amount of OM v1 tokens that this contract should stake in pool v1\\n    ///     to prevent locking of users' tokens in pool v1.\\n    function initialize(address stakingPoolV1IssueCompensator, uint256 stakingPoolV1IssueCompensationAmount_)\\n        external\\n        nonReentrant\\n        returns (bool success)\\n    {\\n        require(msg.sender == deployer, \\\"Only deployer allowed to initialize contract\\\");\\n        require(!initialized, \\\"Already initialized\\\");\\n        address stakingPoolV1Owner = stakingPoolV1.owner();\\n        IERC20 omTokenV1 = stakingPoolV1.stakingToken();\\n        stakingPoolV1IssueCompensationAmount = stakingPoolV1IssueCompensationAmount_;\\n        if (stakingPoolV1IssueCompensationAmount_ > 0) {\\n            omTokenV1.safeTransferFrom(\\n                stakingPoolV1IssueCompensator,\\n                address(this),\\n                stakingPoolV1IssueCompensationAmount_\\n            );\\n            omTokenV1.approve(address(stakingPoolV1), stakingPoolV1IssueCompensationAmount_);\\n            stakingPoolV1.stake(stakingPoolV1IssueCompensationAmount_);\\n        }\\n        stakingPoolV1.acceptOwnership();\\n        stakingPoolV1.setMinStakeBalance(uint256(-1));\\n        uint256 lockedStakingPoolV1Reward = stakingPoolV1.rewardDistributorBalanceOf();\\n        if (lockedStakingPoolV1Reward > 0) {\\n            stakingPoolV1.removeRewardSupply(lockedStakingPoolV1Reward);\\n            omTokenV1.safeTransfer(stakingPoolV1Owner, lockedStakingPoolV1Reward);\\n        }\\n        stakingPoolV1.nominateNewOwner(stakingPoolV1Owner);\\n        stakingPoolV2.initializeMigrator();\\n        stakingPoolV2.update();\\n        (uint256 startPriceMantissa, , ) = stakingPoolV2.priceStored();\\n        _startPrice = AttoDecimal(startPriceMantissa);\\n        initializingTimestamp = getTimestamp();\\n        (stakingPoolV1Balance, lockedSyntheticAmount) = calculateStakingPoolV1BalanceAndExpectedLockedSyntheticAmount();\\n        initialized = true;\\n        emit Initialized();\\n        stakingPoolV2.mint(address(this), lockedSyntheticAmount);\\n        return true;\\n    }\\n\\n    /// @notice Locks all not received rewards from both staking pools and immediately stakes them\\n    function lockStakingPoolV1Rewards() external nonReentrant onlyInitialized returns (bool success) {\\n        address caller = msg.sender;\\n        Account storage account = accounts[caller];\\n        require(account.lockedPrice.mantissa == 0, \\\"Staking pool V1 rewards already locked\\\");\\n        uint256 stakingPoolV1StakedBalance = stakingPoolV1.balanceOf(caller);\\n        require(stakingPoolV1StakedBalance > 0, \\\"No staked balance in staking pool v1\\\");\\n        uint256 stakingPoolV1Reward;\\n        {\\n            uint256 rewardsLastLockingTime = stakingPoolV1.stakeTime(caller);\\n            uint256 stakingTime = initializingTimestamp.sub(rewardsLastLockingTime);\\n            uint256 passedIntervalsCount = stakingTime.div(stakingPoolV1RewardInterval);\\n            uint256 rewardPerIntervalDivider = stakingPoolV1.rewardPerIntervalDivider();\\n            uint256 perIntervalReward = stakingPoolV1StakedBalance.div(rewardPerIntervalDivider);\\n            stakingPoolV1Reward = passedIntervalsCount.mul(perIntervalReward);\\n        }\\n\\n        stakingPoolV2.update();\\n        (uint256 currentPriceMantissa, , ) = stakingPoolV2.priceStored();\\n        AttoDecimal memory currentPrice = AttoDecimal(currentPriceMantissa);\\n        account.lockedPrice = currentPrice;\\n\\n        uint256 stakingPoolV1UnstakedBalance = stakingPoolV1.unstakingBalanceOf(caller);\\n        uint256 totalUserBalanceInStakingPoolV1 = stakingPoolV1StakedBalance.add(stakingPoolV1UnstakedBalance);\\n        AttoDecimal memory multiplier = AttoDecimalLib.div(1, _startPrice).sub(AttoDecimalLib.div(1, currentPrice));\\n        uint256 syntheticAmount = multiplier.mul(totalUserBalanceInStakingPoolV1).floor();\\n        lockedSyntheticAmount = lockedSyntheticAmount.sub(syntheticAmount);\\n        stakingPoolV2.transfer(caller, syntheticAmount);\\n\\n        uint256 amountToMint = AttoDecimalLib.div(stakingPoolV1Reward, currentPrice).floor();\\n        stakingPoolV2.mint(caller, amountToMint);\\n        stakingPoolV2.unlockRewards(stakingPoolV1Reward);\\n        emit StakingPoolV1RewardLocked(caller, stakingPoolV1Reward, syntheticAmount);\\n        return true;\\n    }\\n\\n    /// @notice Locks all not received rewards from pool v2 for period from calling `lockStakingPoolV1Rewards`\\n    function lockStakingPoolV2Rewards() external nonReentrant onlyInitialized returns (bool success) {\\n        stakingPoolV2.update();\\n        address caller = msg.sender;\\n        Account storage account = accounts[caller];\\n        require(account.lockedAmount == 0 && account.requiredAmount == 0, \\\"Already locked\\\");\\n        require(account.lockedPrice.mantissa > 0, \\\"Staking pool v1 rewards not locked\\\");\\n        uint256 stakingPoolV1StakedBalance = stakingPoolV1.balanceOf(caller);\\n        require(stakingPoolV1StakedBalance == 0, \\\"Not exited from staking pool v1\\\");\\n        uint256 stakingPoolV1UnstakedBalance = stakingPoolV1.unstakingBalanceOf(caller);\\n        require(stakingPoolV1UnstakedBalance > 0, \\\"Nothing to lock\\\");\\n        (uint256 currentPriceMantissa, , ) = stakingPoolV2.priceStored();\\n        AttoDecimal memory currentPrice = AttoDecimal(currentPriceMantissa);\\n        uint256 sumStakedAmount = stakingPoolV1StakedBalance.add(stakingPoolV1UnstakedBalance);\\n        uint256 lockedAmount_ = currentPrice.div(account.lockedPrice).sub(1).mul(sumStakedAmount).floor();\\n        uint256 synthBurned = stakingPoolV2.unstakeLocked(lockedAmount_);\\n        lockedSyntheticAmount = lockedSyntheticAmount.sub(synthBurned);\\n        account.lockedAmount = lockedAmount_;\\n        account.requiredAmount = sumStakedAmount;\\n        emit StakingPoolV2RewardLocked(caller, lockedAmount_);\\n        return true;\\n    }\\n\\n    /// @notice Stakes all locked rewards from `lockStakingPoolV2Rewards` method\\n    ///     and approved OM v1 tokens from staking pool v1\\n    function migrate() external nonReentrant onlyInitialized returns (bool success) {\\n        address caller = msg.sender;\\n        Account storage account = accounts[caller];\\n        require(!account.lockedAmountPaid, \\\"Staking pool v2 locked rewards already paid\\\");\\n        IERC20 omTokenV1 = stakingPoolV1.stakingToken();\\n        uint256 lockedAmount = account.lockedAmount;\\n        uint256 requiredAmount = account.requiredAmount;\\n        require(lockedAmount > 0 || requiredAmount > 0, \\\"Staking pool v2 rewards not locked\\\");\\n        omTokenV1.safeTransferFrom(caller, address(this), requiredAmount);\\n        omTokenV1.approve(address(tokenMigrator), requiredAmount);\\n        tokenMigrator.migrate(requiredAmount);\\n        IERC20 omTokenV2 = stakingPoolV2.stakingToken();\\n        uint256 stakingAmount = lockedAmount.add(requiredAmount);\\n        omTokenV2.approve(address(stakingPoolV2), stakingAmount);\\n        stakingPoolV2.stakeForUser(caller, stakingAmount);\\n        account.lockedAmountPaid = true;\\n        return true;\\n    }\\n\\n    /// @notice Updates staked in pool v1 balance\\n    ///     and burns the amount of synthetic tokens corresponding to the missing amount\\n    function update() external override(IStakingPoolMigrator) onlyInitialized returns (bool success) {\\n        uint256 burnedSyntheticAmount;\\n        (stakingPoolV1Balance, burnedSyntheticAmount) = calculatePriceParams();\\n        lockedSyntheticAmount = lockedSyntheticAmount.sub(burnedSyntheticAmount);\\n        emit Updated(stakingPoolV1Balance, lockedSyntheticAmount);\\n        stakingPoolV2.burn(burnedSyntheticAmount);\\n        return true;\\n    }\\n\\n    /// @notice Calculates pool v1 staked balance\\n    ///     and expected synthetic tokens amount, that should be locked in this contract\\n    /// @return stakingPoolV1Balance_ Staked in pool v1 balance\\n    /// @return expectedLockedSyntheticAmount Expected sythetic tokens amount, that should be locked in this contract\\n    function calculateStakingPoolV1BalanceAndExpectedLockedSyntheticAmount()\\n        public\\n        view\\n        returns (uint256 stakingPoolV1Balance_, uint256 expectedLockedSyntheticAmount)\\n    {\\n        IERC20 omV1 = stakingPoolV1.stakingToken();\\n        stakingPoolV1Balance_ = omV1.balanceOf(address(stakingPoolV1)).sub(stakingPoolV1IssueCompensationAmount);\\n        expectedLockedSyntheticAmount = AttoDecimalLib.div(stakingPoolV1Balance_, _startPrice).floor();\\n    }\\n\\n    /// @notice Allows to call methods only when contract has been initialized\\n    modifier onlyInitialized() {\\n        require(initialized, \\\"Not initialized\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/TwoStageOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract TwoStageOwnable {\\n    address public nominatedOwner;\\n    address public owner;\\n\\n    event OwnerChanged(address indexed newOwner);\\n    event OwnerNominated(address indexed nominatedOwner);\\n\\n    constructor(address owner_) internal {\\n        require(owner_ != address(0), \\\"Owner cannot be zero address\\\");\\n        _setOwner(owner_);\\n    }\\n\\n    function acceptOwnership() external returns (bool success) {\\n        require(msg.sender == nominatedOwner, \\\"Not nominated to ownership\\\");\\n        _setOwner(nominatedOwner);\\n        nominatedOwner = address(0);\\n        return true;\\n    }\\n\\n    function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {\\n        _nominateNewOwner(owner_);\\n        return true;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _nominateNewOwner(address owner_) internal {\\n        nominatedOwner = owner_;\\n        emit OwnerNominated(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        owner = newOwner;\\n        emit OwnerChanged(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/stakingPoolV1/StakingPoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./StakingPoolV1Owned.sol\\\";\\nimport \\\"./StakingPoolV1Pausable.sol\\\";\\n\\ncontract StakingPoolV1 is ReentrancyGuard, StakingPoolV1Owned, StakingPoolV1Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function getTime() internal virtual view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    uint256 public minStakeBalance = 1 * _convertDecimalTokenBalance;\\n    uint256 public rewardPerIntervalDivider = 411;\\n    IERC20 public stakingToken;\\n    address[] public allAddress;\\n\\n    uint256 internal rewardInterval = 86400 * 1; // 1 day\\n    uint256 internal unstakingInterval = 86400 * 8; // 8 day\\n    // uint256 internal rewardInterval = 1 minutes;\\n    // uint256 internal unstakingInterval = 8 minutes;\\n\\n    uint256 private _convertDecimalTokenBalance = 10**18;\\n    uint256 private rewardDistributorBalance = 0;\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _addressToIndex;\\n    mapping(address => uint256) private _rewardBalance;\\n    mapping(address => uint256) private _stakedBalance;\\n    mapping(address => uint256) private _stakedTime;\\n    mapping(address => uint256) private _unstakingBalance;\\n    mapping(address => uint256) private _unstakingTime;\\n\\n    /// @dev How much OM is available to distribute from reward disributor address\\n    function rewardDistributorBalanceOf() external view returns (uint256) {\\n        return rewardDistributorBalance;\\n    }\\n\\n    /// @dev How much OM is in the contract total\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @dev How much have the address earned\\n    function rewardBalanceOf(address account) external view returns (uint256) {\\n        return _rewardBalance[account];\\n    }\\n\\n    /// @dev How much OM has address staked\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _stakedBalance[account];\\n    }\\n\\n    /// @dev When did user stake\\n    function stakeTime(address account) external view returns (uint256) {\\n        return _stakedTime[account];\\n    }\\n\\n    /// @dev How much OM is unstaking in the address's current unstaking procedure\\n    function unstakingBalanceOf(address account) external view returns (uint256) {\\n        return _unstakingBalance[account];\\n    }\\n\\n    /// @dev How much time is left in the address's current unstaking procedure\\n    function unstakingTimeOf(address account) external view returns (uint256) {\\n        return _unstakingTime[account];\\n    }\\n\\n    /// @dev When is the address's next reward going to become unstakable\\n    function nextRewardApplicableTime(address account) external view returns (uint256) {\\n        require(_stakedTime[account] != 0, \\\"You dont have a stake in progress\\\");\\n        require(_stakedTime[account] <= getTime(), \\\"Your stake takes 24 hours to become available to interact with\\\");\\n        uint256 secondsRemaining = (getTime() - _stakedTime[account]).mod(rewardInterval);\\n        return secondsRemaining;\\n    }\\n\\n    function perIntervalRewardOf(address account) public view returns (uint256) {\\n        return _stakedBalance[account].div(rewardPerIntervalDivider);\\n    }\\n\\n    function stakedIntervalsCountOf(address account) public view returns (uint256) {\\n        if (_stakedTime[account] == 0) return 0;\\n        uint256 diffTime = getTime().sub(_stakedTime[account]);\\n        return diffTime.div(rewardInterval);\\n    }\\n\\n    /// @dev How much has account earned. Account's potential rewards ready to begin unstaking\\n    function earned(address account) public view returns (uint256) {\\n        uint256 perIntervalReward = perIntervalRewardOf(account);\\n        uint256 intervalsStaked = stakedIntervalsCountOf(account);\\n        return perIntervalReward.mul(intervalsStaked);\\n    }\\n\\n    function getAddresses(uint256 i) public view returns (address) {\\n        return allAddress[i];\\n    }\\n\\n    event Recovered(address token, uint256 amount);\\n    event RewardAdded(uint256 reward);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardWithdrawn(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    constructor(address _owner, IERC20 _stakingToken) public StakingPoolV1Owned(_owner) {\\n        stakingToken = _stakingToken;\\n    }\\n\\n    function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        uint256 newStakedBalance = _stakedBalance[msg.sender].add(amount);\\n        require(newStakedBalance >= minStakeBalance, \\\"Staked balance is less than minimum stake balance\\\");\\n        uint256 currentTimestamp = getTime();\\n        _stakedBalance[msg.sender] = newStakedBalance;\\n        _stakedTime[msg.sender] = currentTimestamp;\\n        _totalSupply = _totalSupply.add(amount);\\n        if (_addressToIndex[msg.sender] == 0) {\\n            allAddress.push(msg.sender);\\n            uint256 index = allAddress.length;\\n            _addressToIndex[msg.sender] = index;\\n        }\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) public updateReward(msg.sender) {\\n        _unstake(msg.sender, amount);\\n    }\\n\\n    /// @dev Allows user to unstake tokens without (or with partial) rewards in case of empty reward distribution pool\\n    function exit() public {\\n        uint256 reward = Math.min(earned(msg.sender), rewardDistributorBalance);\\n        require(reward > 0 || _rewardBalance[msg.sender] > 0 || _stakedBalance[msg.sender] > 0, \\\"No tokens to exit\\\");\\n        _addReward(msg.sender, reward);\\n        _stakedTime[msg.sender] = 0;\\n        if (_rewardBalance[msg.sender] > 0) withdrawReward();\\n        if (_stakedBalance[msg.sender] > 0) _unstake(msg.sender, _stakedBalance[msg.sender]);\\n    }\\n\\n    function withdrawUnstakedBalance(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Account does not have an unstaking balance\\\");\\n        require(_unstakingBalance[msg.sender] >= amount, \\\"Account does not have that much balance unstaked\\\");\\n        require(_unstakingTime[msg.sender] <= getTime(), \\\"Unstaking period has not finished yet\\\");\\n        _unstakingBalance[msg.sender] = _unstakingBalance[msg.sender].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function lockInReward() public updateReward(msg.sender) {}\\n\\n    function lockInRewardOnBehalf(address _address) private updateReward(_address) {}\\n\\n    function withdrawReward() public updateReward(msg.sender) {\\n        uint256 reward = _rewardBalance[msg.sender];\\n        require(reward > 0, \\\"You have not earned any rewards yet\\\");\\n        _rewardBalance[msg.sender] = 0;\\n        _unstakingBalance[msg.sender] = _unstakingBalance[msg.sender].add(reward);\\n        _unstakingTime[msg.sender] = getTime() + unstakingInterval;\\n        emit RewardWithdrawn(msg.sender, reward);\\n    }\\n\\n    function stakeReward() public updateReward(msg.sender) {\\n        require(_rewardBalance[msg.sender] > 0, \\\"You have not earned any rewards yet\\\");\\n        _stakedBalance[msg.sender] = _stakedBalance[msg.sender].add(_rewardBalance[msg.sender]);\\n        _rewardBalance[msg.sender] = 0;\\n    }\\n\\n    function addRewardSupply(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"Cannot add 0 tokens\\\");\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        rewardDistributorBalance = rewardDistributorBalance.add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n    }\\n\\n    function removeRewardSupply(uint256 amount) external onlyOwner nonReentrant {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(amount <= rewardDistributorBalance, \\\"rewardDistributorBalance has less tokens than requested\\\");\\n        require(amount <= _totalSupply, \\\"Amount is greater that total supply\\\");\\n        stakingToken.safeTransfer(owner, amount);\\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function setRewardsInterval(uint256 _rewardInterval) external onlyOwner {\\n        require(\\n            _rewardInterval >= 1 && _rewardInterval <= 365,\\n            \\\"Staking reward interval must be between 1 and 365 inclusive\\\"\\n        );\\n        uint256 length = allAddress.length;\\n        for (uint256 i = 0; i < length; i++) lockInRewardOnBehalf(allAddress[i]);\\n        rewardInterval = _rewardInterval * 1 days;\\n        emit RewardsDurationUpdated(rewardInterval);\\n    }\\n\\n    function setRewardsDivider(uint256 _rewardPerIntervalDivider) external onlyOwner {\\n        require(_rewardPerIntervalDivider >= 411, \\\"Reward can only be lowered, divider must be greater than 410\\\");\\n        uint256 length = allAddress.length;\\n        for (uint256 i = 0; i < length; i++) lockInRewardOnBehalf(allAddress[i]);\\n        rewardPerIntervalDivider = _rewardPerIntervalDivider;\\n    }\\n\\n    /// @param _minStakeBalance count of min tokens values\\n    /// @dev to set min staking balance to 2 need to pass 2000000000000000000 as argument (if ERC20's decimals is 18).\\n    function setMinStakeBalance(uint256 _minStakeBalance) external onlyOwner {\\n        minStakeBalance = _minStakeBalance;\\n    }\\n\\n    function _addReward(address account, uint256 amount) private {\\n        if (amount == 0) return;\\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        _rewardBalance[account] = _rewardBalance[account].add(amount);\\n        emit RewardPaid(account, amount);\\n    }\\n\\n    function _unstake(address account, uint256 amount) private {\\n        require(_stakedBalance[account] > 0, \\\"Account does not have a balance staked\\\");\\n        require(amount > 0, \\\"Cannot unstake Zero OM\\\");\\n        require(amount <= _stakedBalance[account], \\\"Attempted to withdraw more than balance staked\\\");\\n        _stakedBalance[account] = _stakedBalance[account].sub(amount);\\n        if (_stakedBalance[account] == 0) _stakedTime[account] = 0;\\n        else {\\n            require(\\n                _stakedBalance[account] >= minStakeBalance,\\n                \\\"Your remaining staked balance would be under the minimum stake. Either leave at least 10 OM in the staking pool or withdraw all your OM\\\"\\n            );\\n        }\\n        _unstakingBalance[account] = _unstakingBalance[account].add(amount);\\n        _unstakingTime[account] = getTime() + unstakingInterval;\\n        emit Unstaked(account, amount);\\n    }\\n\\n    /// @dev If their _stakeTime is 0, this means they arent active in the system\\n    modifier updateReward(address account) {\\n        if (_stakedTime[account] > 0) {\\n            uint256 stakedIntervals = stakedIntervalsCountOf(account);\\n            uint256 perIntervalReward = perIntervalRewardOf(account);\\n            uint256 reward = stakedIntervals.mul(perIntervalReward);\\n            require(reward <= rewardDistributorBalance, \\\"Rewards pool is extinguished\\\");\\n            _addReward(account, reward);\\n            _stakedTime[account] = _stakedTime[account].add(rewardInterval.mul(stakedIntervals));\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/stakingPoolV1/StakingPoolV1Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract StakingPoolV1Owned {\\n    address public nominatedOwner;\\n    address public owner;\\n\\n    event OwnerChanged(address oldOwner, address newOwner);\\n    event OwnerNominated(address newOwner);\\n\\n    constructor(address _owner) internal {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n        emit OwnerChanged(owner, nominatedOwner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-staking-pool-v2/contracts/stakingPoolV1/StakingPoolV1Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./StakingPoolV1Owned.sol\\\";\\n\\nabstract contract StakingPoolV1Pausable is StakingPoolV1Owned {\\n    bool public paused;\\n    uint256 public lastPauseTime;\\n\\n    event PauseChanged(bool isPaused);\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused == paused) return;\\n        paused = _paused;\\n        if (paused) lastPauseTime = now;\\n        emit PauseChanged(paused);\\n    }\\n\\n    modifier notPaused {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOMV1ToV2Migrator\",\"name\":\"tokenMigrator_\",\"type\":\"address\"},{\"internalType\":\"contract StakingPoolV1\",\"name\":\"stakingPoolV1_\",\"type\":\"address\"},{\"internalType\":\"contract StakingPool\",\"name\":\"stakingPoolV2_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingPoolV1RewardInterval_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPoolV1Reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferedSyntheticAmount\",\"type\":\"uint256\"}],\"name\":\"StakingPoolV1RewardLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingPoolV2RewardLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPoolV1Balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedSyntheticAmount\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lockedAmountPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal\",\"name\":\"lockedPrice\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePriceParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPoolV1Balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedSyntheticAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateStakingPoolV1BalanceAndExpectedLockedSyntheticAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPoolV1Balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedLockedSyntheticAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingPoolV1IssueCompensator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingPoolV1IssueCompensationAmount_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStakingPoolV1Rewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStakingPoolV2Rewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSyntheticAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV1\",\"outputs\":[{\"internalType\":\"contract StakingPoolV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV1Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV1IssueCompensationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV1RewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV1SignificantBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPoolV1Balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolV2\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponentiation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMigrator\",\"outputs\":[{\"internalType\":\"contract IOMV1ToV2Migrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPoolsMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4ff95557f9aba07507ac0851a54c1244be4b7230000000000000000000000002bcd929283ad0ee603e743412ddb214b91fbab880000000000000000000000009e15ad979919bb4db331bfe864475ae3bffeba930000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"constantinople","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}