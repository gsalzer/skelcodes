{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/keso/projects/crypto/uptown-panda-token/contracts/UptownPandaPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUptownPanda.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Helper.sol\\\";\\nimport \\\"./interfaces/IUptownPandaFarm.sol\\\";\\n\\ncontract UptownPandaPresale is Ownable {\\n    using SafeMath for uint256;\\n\\n    event InvestmentSucceeded(address sender, uint256 weiAmount, uint256 upAmount);\\n\\n    mapping(address => bool) public whitelistAddresses; // all addresses eligible for presale\\n    mapping(address => uint256) public investments; // total WEI invested per address (1ETH = 1e18WEI)\\n    uint256 public whitelistAddressesCount; // total count of whitelisted addresses\\n\\n    address public immutable uptownPandaAddress; // address of $UP token\\n    address public immutable uniswapRouterAddress; // address of uniswap router\\n    address public immutable liquidityLockAddress; // address where liquidity pool tokens will be locked for 2 years\\n    address payable public immutable teamAddress; // address where invested ETH will be transfered to\\n\\n    uint256 public constant UP_FARM_INITIAL_SUPPLY = 27500 * 1 ether;\\n    uint256 public constant UP_ETH_FARM_INITIAL_SUPPLY = 55000 * 1 ether;\\n    uint256 public constant WETH_FARM_INITIAL_SUPPLY = 7500 * 1 ether;\\n    uint256 public constant WBTC_FARM_INITIAL_SUPPLY = 7500 * 1 ether;\\n\\n    address public immutable upFarmAddress; // address for farming with $UPs\\n    address public immutable upEthFarmAddress; // address for farming with $UP-ETH uniswap token\\n    address public immutable wethFarmAddress; // address for farming with WETH\\n    address public immutable wbtcFarmAddress; // address for farming with WBTC\\n    address private immutable wbtcAddress; // address to use for WBTC farm intialization\\n\\n    uint256 public immutable PRESALE_WEI_HARD_CAP; // max amount of ETH collected in presale (in WEI)\\n    uint256 public constant PRESALE_PRICE_MULTIPLIER = 3; // how many times more $UP presale investor receives vs listing price\\n    uint256 public constant INVESTMENT_LIMIT = 2.5 * 1 ether; // 2.5 ETH is maximum investment limit\\n    uint256 public presaleWeiSupplyLeft; // how many WEI are still available in presale\\n\\n    bool public isPresaleActive = false; // investing is only allowed if presale is active\\n    bool public allowWhitelistAddressesOnly = true; // if true only addresses found on whitelist can participate\\n    bool public wasPresaleEnded = false; // indicates that presale is ended and liqudity is provided\\n\\n    IUptownPanda private immutable uptownPanda;\\n    IUniswapV2Router02 private immutable uniswapRouter;\\n\\n    constructor(\\n        address _uptownPandaAddress,\\n        address _uniswapV2HelperAddress,\\n        address _liquidityLockAddress,\\n        address _teamAddress,\\n        address _upFarmAddress,\\n        address _upEthFarmAddress,\\n        address _wethFarmAddress,\\n        address _wbtcFarmAddress,\\n        address _wbtcAddress,\\n        uint256 _presaleEthSupply\\n    ) public {\\n        uptownPandaAddress = _uptownPandaAddress;\\n        uptownPanda = IUptownPanda(_uptownPandaAddress);\\n\\n        address resolvedUniswapRouterAddress = IUniswapV2Helper(_uniswapV2HelperAddress).getRouterAddress();\\n        uniswapRouterAddress = resolvedUniswapRouterAddress;\\n        uniswapRouter = IUniswapV2Router02(resolvedUniswapRouterAddress);\\n\\n        liquidityLockAddress = _liquidityLockAddress;\\n        teamAddress = payable(_teamAddress);\\n\\n        upFarmAddress = _upFarmAddress;\\n        upEthFarmAddress = _upEthFarmAddress;\\n        wethFarmAddress = _wethFarmAddress;\\n        wbtcFarmAddress = _wbtcFarmAddress;\\n        wbtcAddress = _wbtcAddress;\\n\\n        presaleWeiSupplyLeft = _presaleEthSupply * 1 ether;\\n        PRESALE_WEI_HARD_CAP = presaleWeiSupplyLeft;\\n    }\\n\\n    function addWhitelistAddresses(address[] calldata _whitelistAddresses) external onlyOwner {\\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\\n            whitelistAddresses[_whitelistAddresses[i]] = true;\\n            whitelistAddressesCount = whitelistAddressesCount.add(1); \\n        }\\n    }\\n\\n    function setIsPresaleActive(bool _isPresaleActive) external onlyOwner {\\n        if (_isPresaleActive && !uptownPanda.isInitialized()) {\\n            uptownPanda.initialize(\\n                address(this),\\n                uniswapRouter.WETH(),\\n                upFarmAddress,\\n                upEthFarmAddress,\\n                wethFarmAddress,\\n                wbtcFarmAddress\\n            );\\n        }\\n        isPresaleActive = _isPresaleActive;\\n    }\\n\\n    function setAllowWhitelistAddressesOnly(bool _allowWhitelistAddressesOnly) external onlyOwner {\\n        allowWhitelistAddressesOnly = _allowWhitelistAddressesOnly;\\n    }\\n\\n    modifier presaleActive() {\\n        require(isPresaleActive, \\\"Presale is currently not active.\\\");\\n        _;\\n    }\\n\\n    modifier presaleNotEnded {\\n        require(!wasPresaleEnded, \\\"Presale was ended.\\\");\\n        _;\\n    }\\n\\n    modifier presaleContractIsMinter {\\n        require(uptownPanda.getMinter() == address(this), \\\"Presale contract can't mint $UP tokens.\\\");\\n        _;\\n    }\\n\\n    modifier eligibleForPresale() {\\n        require(!allowWhitelistAddressesOnly || whitelistAddresses[_msgSender()], \\\"Your address is not whitelisted.\\\");\\n        _;\\n    }\\n\\n    modifier presaleSupplyAvailable() {\\n        require(presaleWeiSupplyLeft > 0, \\\"Presale cap has been reached.\\\");\\n        _;\\n    }\\n\\n    modifier presaleSupplyNotExceeded() {\\n        require(msg.value <= presaleWeiSupplyLeft, \\\"The amount of ETH sent exceeds the ETH supply left in presale.\\\");\\n        _;\\n    }\\n\\n    receive()\\n        external\\n        payable\\n        presaleActive\\n        presaleNotEnded\\n        presaleContractIsMinter\\n        eligibleForPresale\\n        presaleSupplyAvailable\\n        presaleSupplyNotExceeded\\n    {\\n        uint256 addressTotalInvestment = investments[_msgSender()].add(msg.value);\\n        require(addressTotalInvestment <= INVESTMENT_LIMIT, \\\"Max investment per address is 2.5 ETH.\\\");\\n\\n        uint256 listingPriceMultiplier = uptownPanda.getListingPriceMultiplier();\\n        uint256 upsToMint = msg.value.mul(listingPriceMultiplier).mul(PRESALE_PRICE_MULTIPLIER);\\n        uptownPanda.mint(_msgSender(), upsToMint);\\n\\n        investments[_msgSender()] = addressTotalInvestment;\\n        presaleWeiSupplyLeft = presaleWeiSupplyLeft.sub(msg.value);\\n\\n        emit InvestmentSucceeded(_msgSender(), msg.value, upsToMint);\\n    }\\n\\n    function endPresale() external onlyOwner presaleNotEnded {\\n        uint256 listingPriceMultiplier = uptownPanda.getListingPriceMultiplier();\\n        uint256 liquidityPoolEths = address(this).balance.mul(60).div(100); // 60% goes to liquidity pool FOREVER\\n        uint256 liquidityPoolUps = liquidityPoolEths.mul(listingPriceMultiplier);\\n\\n        uptownPanda.mint(address(this), liquidityPoolUps); // mint $UPs for liquidity pool and assign them to presale address\\n        uptownPanda.approve(address(uniswapRouter), liquidityPoolUps); // approve uniswap router to use $UPs from this address\\n\\n        address upAddress = address(uptownPanda);\\n        uint256 transactionDeadline = block.timestamp.add(5 minutes); // transaction should be confirmed in that timeframe\\n        uniswapRouter.addLiquidityETH{ value: liquidityPoolEths }(\\n            upAddress,\\n            liquidityPoolUps,\\n            liquidityPoolUps,\\n            liquidityPoolEths,\\n            liquidityLockAddress,\\n            transactionDeadline\\n        );\\n\\n        // start up farm\\n        uptownPanda.mint(upFarmAddress, UP_FARM_INITIAL_SUPPLY);\\n        IUptownPandaFarm(upFarmAddress).startFarming(uptownPandaAddress, uptownPandaAddress, UP_FARM_INITIAL_SUPPLY);\\n\\n        // start up/eth farm\\n        uptownPanda.mint(upEthFarmAddress, UP_ETH_FARM_INITIAL_SUPPLY);\\n        IUptownPandaFarm(upEthFarmAddress).startFarming(\\n            uptownPandaAddress,\\n            uptownPanda.uniswapPair(),\\n            UP_ETH_FARM_INITIAL_SUPPLY\\n        );\\n\\n        // start weth farm\\n        uptownPanda.mint(wethFarmAddress, WETH_FARM_INITIAL_SUPPLY);\\n        IUptownPandaFarm(wethFarmAddress).startFarming(\\n            uptownPandaAddress,\\n            uniswapRouter.WETH(),\\n            WETH_FARM_INITIAL_SUPPLY\\n        );\\n\\n        // start wbtc farm\\n        uptownPanda.mint(wbtcFarmAddress, WBTC_FARM_INITIAL_SUPPLY);\\n        IUptownPandaFarm(wbtcFarmAddress).startFarming(uptownPandaAddress, wbtcAddress, WBTC_FARM_INITIAL_SUPPLY);\\n\\n        teamAddress.transfer(address(this).balance); // remaining ETHs (40%) go to the team address\\n        uptownPanda.unlock(); // after liquidity is provided, tokens are unlocked\\n        wasPresaleEnded = true; // presale is ended so endPresale can't be called again\\n        isPresaleActive = false; // presale should not be active anymore\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/uptown-panda-token/contracts/interfaces/IUniswapV2Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Helper {\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function getFactoryAddress() external view returns (address factory);\\n\\n    function getRouterAddress() external view returns (address router);\\n\\n    function getUniswapV2OracleAddress() external view returns (address oracle);\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/uptown-panda-token/contracts/interfaces/IUptownPanda.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUptownPanda is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function initialize(\\n        address _minter,\\n        address _weth,\\n        address _upFarm,\\n        address _upEthFarm,\\n        address _wethFarm,\\n        address _wbtcFarm\\n    ) external;\\n\\n    function getMinter() external view returns (address);\\n\\n    function unlock() external;\\n\\n    function getListingPriceMultiplier() external view returns (uint256);\\n\\n    function uniswapPair() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/uptown-panda-token/contracts/interfaces/IUptownPandaFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUptownPandaFarm {\\n    function startFarming(\\n        address _upToken,\\n        address _farmToken,\\n        uint256 _initialFarmUpSupply\\n    ) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function claim() external;\\n\\n    function harvestableReward() external view returns (uint256);\\n\\n    function claimableHarvestedReward() external view returns (uint256);\\n\\n    function totalHarvestedReward() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uptownPandaAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2HelperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityLockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upEthFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_presaleEthSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upAmount\",\"type\":\"uint256\"}],\"name\":\"InvestmentSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVESTMENT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_PRICE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_WEI_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UP_ETH_FARM_INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UP_FARM_INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC_FARM_INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_FARM_INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowWhitelistAddressesOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWeiSupplyLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowWhitelistAddressesOnly\",\"type\":\"bool\"}],\"name\":\"setAllowWhitelistAddressesOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPresaleActive\",\"type\":\"bool\"}],\"name\":\"setIsPresaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upEthFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uptownPandaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAddressesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UptownPandaPresale","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e492fe6bb7ce8e22f215dca68773f38b2a82b7110000000000000000000000005cdf8d8cbcff0ad458efed22a7451b69baa0e8b60000000000000000000000001d610b3611ef51d4a418f1f1c547a6c8abd54a8d000000000000000000000000c449142d810da8fa276a8ff7b0b608cbdd5c2a3c000000000000000000000000e3a215ec299320be97ab22501619c6aeb849801600000000000000000000000094cc9c2e8abfc8dceb1ab8d48b913752dffb298e0000000000000000000000002a71dc9c89620ce86ff80880572f3b27957542a00000000000000000000000002234332c7c817972ced04a9bd0ccfde40312a68f0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000190","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}