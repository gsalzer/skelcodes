{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n ▒█████   █    ██  ██▀███   ▒█████   ▄▄▄▄    ▒█████   ██▀███   ▒█████    ██████ \r\n▒██▒  ██▒ ██  ▓██▒▓██ ▒ ██▒▒██▒  ██▒▓█████▄ ▒██▒  ██▒▓██ ▒ ██▒▒██▒  ██▒▒██    ▒ \r\n▒██░  ██▒▓██  ▒██░▓██ ░▄█ ▒▒██░  ██▒▒██▒ ▄██▒██░  ██▒▓██ ░▄█ ▒▒██░  ██▒░ ▓██▄   \r\n▒██   ██░▓▓█  ░██░▒██▀▀█▄  ▒██   ██░▒██░█▀  ▒██   ██░▒██▀▀█▄  ▒██   ██░  ▒   ██▒\r\n░ ████▓▒░▒▒█████▓ ░██▓ ▒██▒░ ████▓▒░░▓█  ▀█▓░ ████▓▒░░██▓ ▒██▒░ ████▓▒░▒██████▒▒\r\n░ ▒░▒░▒░ ░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░ ▒░▒░▒░ ░▒▓███▀▒░ ▒░▒░▒░ ░ ▒▓ ░▒▓░░ ▒░▒░▒░ ▒ ▒▓▒ ▒ ░\r\n  ░ ▒ ▒░ ░░▒░ ░ ░   ░▒ ░ ▒░  ░ ▒ ▒░ ▒░▒   ░   ░ ▒ ▒░   ░▒ ░ ▒░  ░ ▒ ▒░ ░ ░▒  ░ ░\r\n░ ░ ░ ▒   ░░░ ░ ░   ░░   ░ ░ ░ ░ ▒   ░    ░ ░ ░ ░ ▒    ░░   ░ ░ ░ ░ ▒  ░  ░  ░  \r\n    ░ ░     ░        ░         ░ ░   ░          ░ ░     ░         ░ ░        ░  \r\n                                          ░                                     \r\n\r\nThe first marketable dynamic supply token.\r\n \r\nhttps://t.me/OuroborosToken\r\n\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract Ouroboros is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  address devWallet = 0x6cC1a5954e752b238d46b4603ef1DBC20328B953;\r\n  address[] degenWallets = [devWallet, devWallet, devWallet];\r\n  string constant tokenName = \"Ouroboros\";\r\n  string constant tokenSymbol = \"ORBS\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 public _totalSupply = 100000000000000000000000;\r\n  uint256 public basePercent = 5;\r\n  bool public degenMode = false;\r\n    \r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n  }\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function amountToTake(uint256 value) public view returns (uint256)  {\r\n    uint256 amountLost = value.mul(basePercent).div(100);\r\n    return amountLost;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\r\n    if (degenMode){\r\n        address previousDegen = degenWallets[0];\r\n        degenWallets[0] = degenWallets[1];\r\n        degenWallets[1] = degenWallets[2];\r\n        degenWallets[2] = msg.sender;\r\n        uint256 totalLoss = amountToTake(value);\r\n        uint256 tokensToBurn = totalLoss.div(5);\r\n        uint256 tokensToDev = totalLoss.sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn);\r\n        uint256 tokensToTransfer = value.sub(totalLoss);\r\n        \r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousDegen] = _balances[previousDegen].add(tokensToBurn);\r\n        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(tokensToBurn);\r\n        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(tokensToBurn);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n        _totalSupply = _totalSupply.sub(tokensToBurn);\r\n    \r\n        emit Transfer(msg.sender, to, tokensToTransfer);\r\n        emit Transfer(msg.sender, previousDegen, tokensToBurn);\r\n        emit Transfer(msg.sender, degenWallets[0], tokensToBurn);\r\n        emit Transfer(msg.sender, degenWallets[1], tokensToBurn);\r\n        emit Transfer(msg.sender, devWallet, tokensToDev);\r\n        emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    }\r\n    else{\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    if (degenMode){\r\n        address previousDegen = degenWallets[0];\r\n        degenWallets[0] = degenWallets[1];\r\n        degenWallets[1] = degenWallets[2];\r\n        degenWallets[2] = from;\r\n        uint256 totalLoss = amountToTake(value);\r\n        uint256 tokensToBurn = totalLoss.div(5);\r\n        uint256 tokensToDev = totalLoss.sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn);\r\n        uint256 tokensToTransfer = value.sub(totalLoss);\r\n    \r\n        _balances[to] = _balances[to].add(tokensToTransfer);\r\n        _balances[previousDegen] = _balances[previousDegen].add(tokensToBurn);\r\n        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(tokensToBurn);\r\n        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(tokensToBurn);\r\n        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\r\n        _totalSupply = _totalSupply.sub(tokensToBurn);\r\n        \r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    \r\n        emit Transfer(from, to, tokensToTransfer);\r\n        emit Transfer(from, previousDegen, tokensToBurn);\r\n        emit Transfer(from, degenWallets[0], tokensToBurn);\r\n        emit Transfer(from, degenWallets[1], tokensToBurn);\r\n        emit Transfer(from, devWallet, tokensToDev);\r\n        emit Transfer(from, address(0), tokensToBurn);\r\n    }\r\n    else{\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n \r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n  \r\n  function enableDegenMode() public {\r\n    require (msg.sender == devWallet);\r\n    degenMode = true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amountToTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableDegenMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"degenMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Ouroboros","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1961cdd088ddc8fe99958bbe92d418a4d8d9a9744586cc89a9255992153bc4cb"}]}