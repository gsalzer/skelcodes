{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/teleport/ethereum/TeleportAdmin.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there are multiple accounts (admins) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `consumeAuthorization`, which can be applied to your functions to restrict\r\n * their use to the admins.\r\n */\r\ncontract TeleportAdmin is Ownable {\r\n  // Marks that the contract is frozen or unfrozen (safety kill-switch)\r\n  bool private _isFrozen;\r\n\r\n  mapping(address => uint256) private _allowedAmount;\r\n\r\n  event AdminUpdated(address indexed account, uint256 allowedAmount);\r\n\r\n  // Modifiers\r\n\r\n  /**\r\n    * @dev Throw if contract is currently frozen.\r\n    */\r\n  modifier notFrozen() {\r\n    require(\r\n      !_isFrozen,\r\n      \"TeleportAdmin: contract is frozen by owner\"\r\n    );\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Throw if caller does not have sufficient authorized amount.\r\n    */\r\n  modifier consumeAuthorization(uint256 amount) {\r\n    address sender = _msgSender();\r\n    require(\r\n      allowedAmount(sender) >= amount,\r\n      \"TeleportAdmin: caller does not have sufficient authorization\"\r\n    );\r\n\r\n    _;\r\n\r\n    // reduce authorization amount. Underflow cannot occur because we have\r\n    // already checked that admin has sufficient allowed amount.\r\n    _allowedAmount[sender] -= amount;\r\n    emit AdminUpdated(sender, _allowedAmount[sender]);\r\n  }\r\n\r\n  /**\r\n    * @dev Checks the authorized amount of an admin account.\r\n    */\r\n  function allowedAmount(address account)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowedAmount[account];\r\n  }\r\n\r\n  /**\r\n    * @dev Returns if the contract is currently frozen.\r\n    */\r\n  function isFrozen()\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _isFrozen;\r\n  }\r\n\r\n  /**\r\n    * @dev Owner freezes the contract.\r\n    */\r\n  function freeze()\r\n    public\r\n    onlyOwner\r\n  {\r\n    _isFrozen = true;\r\n  }\r\n\r\n  /**\r\n    * @dev Owner unfreezes the contract.\r\n    */\r\n  function unfreeze()\r\n    public\r\n    onlyOwner\r\n  {\r\n    _isFrozen = false;\r\n  }\r\n\r\n  /**\r\n    * @dev Updates the admin status of an account.\r\n    * Can only be called by the current owner.\r\n    */\r\n  function updateAdmin(address account, uint256 newAllowedAmount)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n  {\r\n    emit AdminUpdated(account, newAllowedAmount);\r\n    _allowedAmount[account] = newAllowedAmount;\r\n  }\r\n\r\n  /**\r\n    * @dev Overrides the inherited method from Ownable.\r\n    * Disable ownership resounce.\r\n    */\r\n  function renounceOwnership()\r\n    public\r\n    override\r\n    onlyOwner\r\n  {\r\n    revert(\"TeleportAdmin: ownership cannot be renounced\");\r\n  }\r\n}\r\n\r\n// File: contracts/teleport/ethereum/TetherToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Method signature contract for Tether (USDT) because it's not a standard\r\n * ERC-20 contract and have different method signatures.\r\n */\r\ninterface TetherToken {\r\n  function transfer(address _to, uint _value) external;\r\n  function transferFrom(address _from, address _to, uint _value) external;\r\n}\r\n\r\n// File: contracts/teleport/ethereum/TeleportCustody.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @dev Implementation of the TeleportCustody contract.\r\n *\r\n * There are two priviledged roles for the contract: \"owner\" and \"admin\".\r\n *\r\n * Owner: Has the ultimate control of the contract and the funds stored inside the\r\n *        contract. Including:\r\n *     1) \"freeze\" and \"unfreeze\" the contract: when the TeleportCustody is frozen,\r\n *        all deposits and withdrawals with the TeleportCustody is disabled. This \r\n *        should only happen when a major security risk is spotted or if admin access\r\n *        is comprimised.\r\n *     2) assign \"admins\": owner has the authority to grant \"unlock\" permission to\r\n *        \"admins\" and set proper \"unlock limit\" for each \"admin\".\r\n *\r\n * Admin: Has the authority to \"unlock\" specific amount to tokens to receivers.\r\n */\r\ncontract TeleportCustody is TeleportAdmin {\r\n  // USDC\r\n  // ERC20 internal _tokenContract = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n  \r\n  // USDT\r\n  TetherToken internal _tokenContract = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n  // Records that an unlock transaction has been executed\r\n  mapping(bytes32 => bool) internal _unlocked;\r\n  \r\n  // Emmitted when user locks token and initiates teleport\r\n  event Locked(uint256 amount, bytes8 indexed flowAddress, address indexed ethereumAddress);\r\n\r\n  // Emmitted when teleport completes and token gets unlocked\r\n  event Unlocked(uint256 amount, address indexed ethereumAddress, bytes32 indexed flowHash);\r\n\r\n  /**\r\n    * @dev User locks token and initiates teleport request.\r\n    */\r\n  function lock(uint256 amount, bytes8 flowAddress)\r\n    public\r\n    notFrozen\r\n  {\r\n    address sender = _msgSender();\r\n\r\n    // NOTE: Return value should be checked. However, Tether does not have return value.\r\n    _tokenContract.transferFrom(sender, address(this), amount);\r\n\r\n    emit Locked(amount, flowAddress, sender);\r\n  }\r\n\r\n  // Admin methods\r\n\r\n  /**\r\n    * @dev TeleportAdmin unlocks token upon receiving teleport request from Flow.\r\n    */\r\n  function unlock(uint256 amount, address ethereumAddress, bytes32 flowHash)\r\n    public\r\n    notFrozen\r\n    consumeAuthorization(amount)\r\n  {\r\n    _unlock(amount, ethereumAddress, flowHash);\r\n  }\r\n\r\n  // Owner methods\r\n\r\n  /**\r\n    * @dev Owner unlocks token upon receiving teleport request from Flow.\r\n    * There is no unlock limit for owner.\r\n    */\r\n  function unlockByOwner(uint256 amount, address ethereumAddress, bytes32 flowHash)\r\n    public\r\n    notFrozen\r\n    onlyOwner\r\n  {\r\n    _unlock(amount, ethereumAddress, flowHash);\r\n  }\r\n\r\n  // Internal methods\r\n\r\n  /**\r\n    * @dev Internal function for processing unlock requests.\r\n    * \r\n    * There is no way TeleportCustody can check the validity of the target address\r\n    * beforehand so user and admin should always make sure the provided information\r\n    * is correct.\r\n    */\r\n  function _unlock(uint256 amount, address ethereumAddress, bytes32 flowHash)\r\n    internal\r\n  {\r\n    require(ethereumAddress != address(0), \"TeleportCustody: ethereumAddress is the zero address\");\r\n    require(!_unlocked[flowHash], \"TeleportCustody: same unlock hash has been executed\");\r\n\r\n    _unlocked[flowHash] = true;\r\n\r\n    // NOTE: Return value should be checked. However, Tether does not have return value.\r\n    _tokenContract.transfer(ethereumAddress, amount);\r\n\r\n    emit Unlocked(amount, ethereumAddress, flowHash);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAmount\",\"type\":\"uint256\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes8\",\"name\":\"flowAddress\",\"type\":\"bytes8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethereumAddress\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"flowHash\",\"type\":\"bytes32\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes8\",\"name\":\"flowAddress\",\"type\":\"bytes8\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowHash\",\"type\":\"bytes32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethereumAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowHash\",\"type\":\"bytes32\"}],\"name\":\"unlockByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TeleportCustody","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ef33d6bb9dbc79acfa5d35ebacc1546a55e224267e8b14bbc25a9195361526b4"}]}