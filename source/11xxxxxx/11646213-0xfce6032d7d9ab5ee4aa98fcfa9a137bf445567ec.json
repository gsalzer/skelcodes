{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IReserveInterestRateStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* IReserveInterestRateStrategyInterface interface\r\n* -\r\n* Interface for the calculation of the interest rates.\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\ninterface IReserveInterestRateStrategy {\r\n\r\n    /**\r\n    * @dev returns the base variable borrow rate, in rays\r\n    */\r\n\r\n    function getBaseVariableBorrowRate() external view returns (uint256);\r\n    /**\r\n    * @dev calculates the liquidity, stable, and variable rates depending on the current utilization rate\r\n    *      and the base parameters\r\n    *\r\n    */\r\n    function calculateInterestRates(\r\n        address _reserve,\r\n        uint256 _utilizationRate,\r\n        uint256 _totalBorrowsStable,\r\n        uint256 _totalBorrowsVariable,\r\n        uint256 _averageStableBorrowRate)\r\n    external\r\n    view\r\n    returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/WadRayMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * WadRayMath library\r\n * -\r\n *  Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n * -\r\n * This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n **/\r\n\r\nlibrary WadRayMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant halfWAD = WAD / 2;\r\n\r\n    uint256 internal constant RAY = 1e27;\r\n    uint256 internal constant halfRAY = RAY / 2;\r\n\r\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n    function ray() internal pure returns (uint256) {\r\n        return RAY;\r\n    }\r\n\r\n    function wad() internal pure returns (uint256) {\r\n        return WAD;\r\n    }\r\n\r\n    function halfRay() internal pure returns (uint256) {\r\n        return halfRAY;\r\n    }\r\n\r\n    function halfWad() internal pure returns (uint256) {\r\n        return halfWAD;\r\n    }\r\n\r\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return halfWAD.add(a.mul(b)).div(WAD);\r\n    }\r\n\r\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 halfB = b / 2;\r\n\r\n        return halfB.add(a.mul(WAD)).div(b);\r\n    }\r\n\r\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return halfRAY.add(a.mul(b)).div(RAY);\r\n    }\r\n\r\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 halfB = b / 2;\r\n\r\n        return halfB.add(a.mul(RAY)).div(b);\r\n    }\r\n\r\n    function rayToWad(uint256 a) internal pure returns (uint256) {\r\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\r\n\r\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\r\n    }\r\n\r\n    function wadToRay(uint256 a) internal pure returns (uint256) {\r\n        return a.mul(WAD_RAY_RATIO);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates base^exp. The code uses the ModExp precompile\r\n     * @return base^exp, in ray\r\n     */\r\n    //solium-disable-next-line\r\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rayMul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rayMul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n    /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n    function() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n   * @return The Address of the implementation.\r\n   */\r\n    function _implementation() internal view returns (address);\r\n\r\n    /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n    function _delegate(address implementation) internal {\r\n        //solium-disable-next-line\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize)\r\n                }\r\n                default {\r\n                    return(0, returndatasize)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n    function _willFallback() internal {}\r\n\r\n    /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/BaseUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n    /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n    function _implementation() internal view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function _setImplementation(address newImplementation) internal {\r\n        require(\r\n            Address.isContract(newImplementation),\r\n            \"Cannot set a proxy implementation to a non-contract address\"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        //solium-disable-next-line\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/UpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    constructor(address _logic, bytes memory _data) public payable {\r\n        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _setImplementation(_logic);\r\n        if (_data.length > 0) {\r\n            (bool success, ) = _logic.delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/BaseAdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n    function admin() external ifAdmin returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    /**\r\n   * @return The address of the implementation.\r\n   */\r\n    function implementation() external ifAdmin returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n    function changeAdmin(address newAdmin) external ifAdmin {\r\n        require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n        emit AdminChanged(_admin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n        (bool success, ) = newImplementation.delegatecall(data);\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n   * @return The admin slot.\r\n   */\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n    function _setAdmin(address newAdmin) internal {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n    function _willFallback() internal {\r\n        require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n        super._willFallback();\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/InitializableUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    function initialize(address _logic, bytes memory _data) public payable {\r\n        require(_implementation() == address(0));\r\n        assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _setImplementation(_logic);\r\n        if (_data.length > 0) {\r\n            (bool success, ) = _logic.delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/InitializableAdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n    /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n    function initialize(address _logic, address _admin, bytes memory _data) public payable {\r\n        require(_implementation() == address(0));\r\n        InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n        assert(ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n        _setAdmin(_admin);\r\n    }\r\n}\r\n\r\n// File: contracts/configuration/AddressStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract AddressStorage {\r\n    mapping(bytes32 => address) private addresses;\r\n\r\n    function getAddress(bytes32 _key) public view returns (address) {\r\n        return addresses[_key];\r\n    }\r\n\r\n    function _setAddress(bytes32 _key, address _value) internal {\r\n        addresses[_key] = _value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ILendingPoolAddressesProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* ILendingPoolAddressesProvider interface\r\n* -\r\n* Provides the interface to fetch the LendingPoolCore address\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\ncontract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public view returns (address);\r\n    function setLendingPoolImpl(address _pool) public;\r\n\r\n    function getLendingPoolCore() public view returns (address payable);\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public;\r\n\r\n    function getLendingPoolConfigurator() public view returns (address);\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public;\r\n\r\n    function getLendingPoolDataProvider() public view returns (address);\r\n    function setLendingPoolDataProviderImpl(address _provider) public;\r\n\r\n    function getLendingPoolParametersProvider() public view returns (address);\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public;\r\n\r\n    function getTokenDistributor() public view returns (address);\r\n    function setTokenDistributor(address _tokenDistributor) public;\r\n\r\n\r\n    function getFeeProvider() public view returns (address);\r\n    function setFeeProviderImpl(address _feeProvider) public;\r\n\r\n    function getLendingPoolLiquidationManager() public view returns (address);\r\n    function setLendingPoolLiquidationManager(address _manager) public;\r\n\r\n    function getLendingPoolManager() public view returns (address);\r\n    function setLendingPoolManager(address _lendingPoolManager) public;\r\n\r\n    function getPriceOracle() public view returns (address);\r\n    function setPriceOracle(address _priceOracle) public;\r\n\r\n    function getLendingRateOracle() public view returns (address);\r\n    function setLendingRateOracle(address _lendingRateOracle) public;\r\n\r\n}\r\n\r\n// File: contracts/configuration/LendingPoolAddressesProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* LendingPoolAddressesProvider contract\r\n* -\r\n* Is the main registry of the protocol. All the different components of the protocol are accessible\r\n* through the addresses provider.\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\n/**\r\n\r\n\r\n */\r\n\r\ncontract LendingPoolAddressesProvider is Ownable, ILendingPoolAddressesProvider, AddressStorage {\r\n    //events\r\n    event LendingPoolUpdated(address indexed newAddress);\r\n    event LendingPoolCoreUpdated(address indexed newAddress);\r\n    event LendingPoolParametersProviderUpdated(address indexed newAddress);\r\n    event LendingPoolManagerUpdated(address indexed newAddress);\r\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n    event LendingPoolLiquidationManagerUpdated(address indexed newAddress);\r\n    event LendingPoolDataProviderUpdated(address indexed newAddress);\r\n    event EthereumAddressUpdated(address indexed newAddress);\r\n    event PriceOracleUpdated(address indexed newAddress);\r\n    event LendingRateOracleUpdated(address indexed newAddress);\r\n    event FeeProviderUpdated(address indexed newAddress);\r\n    event TokenDistributorUpdated(address indexed newAddress);\r\n\r\n    event ProxyCreated(bytes32 id, address indexed newAddress);\r\n\r\n    bytes32 private constant LENDING_POOL = \"LENDING_POOL\";\r\n    bytes32 private constant LENDING_POOL_CORE = \"LENDING_POOL_CORE\";\r\n    bytes32 private constant LENDING_POOL_CONFIGURATOR = \"LENDING_POOL_CONFIGURATOR\";\r\n    bytes32 private constant LENDING_POOL_PARAMETERS_PROVIDER = \"PARAMETERS_PROVIDER\";\r\n    bytes32 private constant LENDING_POOL_MANAGER = \"LENDING_POOL_MANAGER\";\r\n    bytes32 private constant LENDING_POOL_LIQUIDATION_MANAGER = \"LIQUIDATION_MANAGER\";\r\n    bytes32 private constant LENDING_POOL_FLASHLOAN_PROVIDER = \"FLASHLOAN_PROVIDER\";\r\n    bytes32 private constant DATA_PROVIDER = \"DATA_PROVIDER\";\r\n    bytes32 private constant ETHEREUM_ADDRESS = \"ETHEREUM_ADDRESS\";\r\n    bytes32 private constant PRICE_ORACLE = \"PRICE_ORACLE\";\r\n    bytes32 private constant LENDING_RATE_ORACLE = \"LENDING_RATE_ORACLE\";\r\n    bytes32 private constant FEE_PROVIDER = \"FEE_PROVIDER\";\r\n    bytes32 private constant WALLET_BALANCE_PROVIDER = \"WALLET_BALANCE_PROVIDER\";\r\n    bytes32 private constant TOKEN_DISTRIBUTOR = \"TOKEN_DISTRIBUTOR\";\r\n\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPool proxy\r\n    * @return the lending pool proxy address\r\n    **/\r\n    function getLendingPool() public view returns (address) {\r\n        return getAddress(LENDING_POOL);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool\r\n    * @param _pool the new lending pool implementation\r\n    **/\r\n    function setLendingPoolImpl(address _pool) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL, _pool);\r\n        emit LendingPoolUpdated(_pool);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolCore proxy\r\n    * @return the lending pool core proxy address\r\n     */\r\n    function getLendingPoolCore() public view returns (address payable) {\r\n        address payable core = address(uint160(getAddress(LENDING_POOL_CORE)));\r\n        return core;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool core\r\n    * @param _lendingPoolCore the new lending pool core implementation\r\n    **/\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_CORE, _lendingPoolCore);\r\n        emit LendingPoolCoreUpdated(_lendingPoolCore);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolConfigurator proxy\r\n    * @return the lending pool configurator proxy address\r\n    **/\r\n    function getLendingPoolConfigurator() public view returns (address) {\r\n        return getAddress(LENDING_POOL_CONFIGURATOR);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool configurator\r\n    * @param _configurator the new lending pool configurator implementation\r\n    **/\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_CONFIGURATOR, _configurator);\r\n        emit LendingPoolConfiguratorUpdated(_configurator);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolDataProvider proxy\r\n    * @return the lending pool data provider proxy address\r\n     */\r\n    function getLendingPoolDataProvider() public view returns (address) {\r\n        return getAddress(DATA_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool data provider\r\n    * @param _provider the new lending pool data provider implementation\r\n    **/\r\n    function setLendingPoolDataProviderImpl(address _provider) public onlyOwner {\r\n        updateImplInternal(DATA_PROVIDER, _provider);\r\n        emit LendingPoolDataProviderUpdated(_provider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolParametersProvider proxy\r\n    * @return the address of the Lending pool parameters provider proxy\r\n    **/\r\n    function getLendingPoolParametersProvider() public view returns (address) {\r\n        return getAddress(LENDING_POOL_PARAMETERS_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the lending pool parameters provider\r\n    * @param _parametersProvider the new lending pool parameters provider implementation\r\n    **/\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public onlyOwner {\r\n        updateImplInternal(LENDING_POOL_PARAMETERS_PROVIDER, _parametersProvider);\r\n        emit LendingPoolParametersProviderUpdated(_parametersProvider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the FeeProvider proxy\r\n    * @return the address of the Fee provider proxy\r\n    **/\r\n    function getFeeProvider() public view returns (address) {\r\n        return getAddress(FEE_PROVIDER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the implementation of the FeeProvider proxy\r\n    * @param _feeProvider the new lending pool fee provider implementation\r\n    **/\r\n    function setFeeProviderImpl(address _feeProvider) public onlyOwner {\r\n        updateImplInternal(FEE_PROVIDER, _feeProvider);\r\n        emit FeeProviderUpdated(_feeProvider);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the address of the LendingPoolLiquidationManager. Since the manager is used\r\n    * through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence\r\n    * the addresses are changed directly.\r\n    * @return the address of the Lending pool liquidation manager\r\n    **/\r\n\r\n    function getLendingPoolLiquidationManager() public view returns (address) {\r\n        return getAddress(LENDING_POOL_LIQUIDATION_MANAGER);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the address of the Lending pool liquidation manager\r\n    * @param _manager the new lending pool liquidation manager address\r\n    **/\r\n    function setLendingPoolLiquidationManager(address _manager) public onlyOwner {\r\n        _setAddress(LENDING_POOL_LIQUIDATION_MANAGER, _manager);\r\n        emit LendingPoolLiquidationManagerUpdated(_manager);\r\n    }\r\n\r\n    /**\r\n    * @dev the functions below are storing specific addresses that are outside the context of the protocol\r\n    * hence the upgradable proxy pattern is not used\r\n    **/\r\n\r\n\r\n    function getLendingPoolManager() public view returns (address) {\r\n        return getAddress(LENDING_POOL_MANAGER);\r\n    }\r\n\r\n    function setLendingPoolManager(address _lendingPoolManager) public onlyOwner {\r\n        _setAddress(LENDING_POOL_MANAGER, _lendingPoolManager);\r\n        emit LendingPoolManagerUpdated(_lendingPoolManager);\r\n    }\r\n\r\n    function getPriceOracle() public view returns (address) {\r\n        return getAddress(PRICE_ORACLE);\r\n    }\r\n\r\n    function setPriceOracle(address _priceOracle) public onlyOwner {\r\n        _setAddress(PRICE_ORACLE, _priceOracle);\r\n        emit PriceOracleUpdated(_priceOracle);\r\n    }\r\n\r\n    function getLendingRateOracle() public view returns (address) {\r\n        return getAddress(LENDING_RATE_ORACLE);\r\n    }\r\n\r\n    function setLendingRateOracle(address _lendingRateOracle) public onlyOwner {\r\n        _setAddress(LENDING_RATE_ORACLE, _lendingRateOracle);\r\n        emit LendingRateOracleUpdated(_lendingRateOracle);\r\n    }\r\n\r\n\r\n    function getTokenDistributor() public view returns (address) {\r\n        return getAddress(TOKEN_DISTRIBUTOR);\r\n    }\r\n\r\n    function setTokenDistributor(address _tokenDistributor) public onlyOwner {\r\n        _setAddress(TOKEN_DISTRIBUTOR, _tokenDistributor);\r\n        emit TokenDistributorUpdated(_tokenDistributor);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev internal function to update the implementation of a specific component of the protocol\r\n    * @param _id the id of the contract to be updated\r\n    * @param _newAddress the address of the new implementation\r\n    **/\r\n    function updateImplInternal(bytes32 _id, address _newAddress) internal {\r\n        address payable proxyAddress = address(uint160(getAddress(_id)));\r\n\r\n        InitializableAdminUpgradeabilityProxy proxy = InitializableAdminUpgradeabilityProxy(proxyAddress);\r\n        bytes memory params = abi.encodeWithSignature(\"initialize(address)\", address(this));\r\n\r\n        if (proxyAddress == address(0)) {\r\n            proxy = new InitializableAdminUpgradeabilityProxy();\r\n            proxy.initialize(_newAddress, address(this), params);\r\n            _setAddress(_id, address(proxy));\r\n            emit ProxyCreated(_id, address(proxy));\r\n        } else {\r\n            proxy.upgradeToAndCall(_newAddress, params);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/openzeppelin-upgradeability/VersionedInitializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n/**\r\n * VersionedInitializable\r\n * -\r\n * Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n * -\r\n * This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n **/\r\ncontract VersionedInitializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    uint256 private lastInitializedRevision = 0;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(\r\n            initializing ||\r\n                isConstructor() ||\r\n                revision > lastInitializedRevision,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            lastInitializedRevision = revision;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal pure returns (uint256);\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/libraries/CoreLibrary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * CoreLibrary library\r\n * -\r\n * Defines the data structures of the reserves and the user data\r\n * -\r\n * This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n **/\r\n\r\nlibrary CoreLibrary {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n\r\n\r\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n\r\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\r\n\r\n    struct UserReserveData {\r\n        //principal amount borrowed by the user.\r\n        uint256 principalBorrowBalance;\r\n        //cumulated variable borrow index for the user. Expressed in ray\r\n        uint256 lastVariableBorrowCumulativeIndex;\r\n        //origination fee cumulated by the user\r\n        uint256 originationFee;\r\n        // stable borrow rate at which the user has borrowed. Expressed in ray\r\n        uint256 stableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        //defines if a specific deposit should or not be used as a collateral in borrows\r\n        bool useAsCollateral;\r\n    }\r\n\r\n    struct ReserveData {\r\n        /**\r\n         * @dev refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n         **/\r\n        //the liquidity index. Expressed in ray\r\n        uint256 lastLiquidityCumulativeIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint256 currentLiquidityRate;\r\n        //the total borrows of the reserve at a stable rate. Expressed in the currency decimals\r\n        uint256 totalBorrowsStable;\r\n        //the total borrows of the reserve at a variable rate. Expressed in the currency decimals\r\n        uint256 totalBorrowsVariable;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint256 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint256 currentStableBorrowRate;\r\n        //the current average stable borrow rate (weighted average of all the different stable rate loans). Expressed in ray\r\n        uint256 currentAverageStableBorrowRate;\r\n        //variable borrow index. Expressed in ray\r\n        uint256 lastVariableBorrowCumulativeIndex;\r\n        //the ltv of the reserve. Expressed in percentage (0-100)\r\n        uint256 baseLTVasCollateral;\r\n        //the liquidation threshold of the reserve. Expressed in percentage (0-100)\r\n        uint256 liquidationThreshold;\r\n        //the liquidation bonus of the reserve. Expressed in percentage\r\n        uint256 liquidationBonus;\r\n        //the decimals of the reserve asset\r\n        uint256 decimals;\r\n        /**\r\n         * @dev address of the PToken representing the asset\r\n         **/\r\n        address PTokenAddress;\r\n        /**\r\n         * @dev address of the interest rate strategy contract\r\n         **/\r\n        address interestRateStrategyAddress;\r\n        uint40 lastUpdateTimestamp;\r\n        // borrowingEnabled = true means users can borrow from this reserve\r\n        bool borrowingEnabled;\r\n        // usageAsCollateralEnabled = true means users can use this reserve as collateral\r\n        bool usageAsCollateralEnabled;\r\n        // isStableBorrowRateEnabled = true means users can borrow at a stable rate\r\n        bool isStableBorrowRateEnabled;\r\n        // isActive = true means the reserve has been activated and properly configured\r\n        bool isActive;\r\n        // isFreezed = true means the reserve only allows repays and redeems, but not deposits, new borrowings or rate swap\r\n        bool isFreezed;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the ongoing normalized income for the reserve.\r\n     * a value of 1e27 means there is no income. As time passes, the income is accrued.\r\n     * A value of 2*1e27 means that the income of the reserve is double the initial amount.\r\n     * @param _reserve the reserve object\r\n     * @return the normalized income. expressed in ray\r\n     **/\r\n    function getNormalizedIncome(CoreLibrary.ReserveData storage _reserve)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 cumulated = calculateLinearInterest(\r\n            _reserve\r\n                .currentLiquidityRate,\r\n            _reserve\r\n                .lastUpdateTimestamp\r\n        )\r\n            .rayMul(_reserve.lastLiquidityCumulativeIndex);\r\n\r\n        return cumulated;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the liquidity cumulative index Ci and variable borrow cumulative index Bvc. Refer to the whitepaper for\r\n     * a formal specification.\r\n     * @param _self the reserve object\r\n     **/\r\n    function updateCumulativeIndexes(ReserveData storage _self) internal {\r\n        uint256 totalBorrows = getTotalBorrows(_self);\r\n\r\n        if (totalBorrows > 0) {\r\n            //only cumulating if there is any income being produced\r\n            uint256 cumulatedLiquidityInterest = calculateLinearInterest(\r\n                _self.currentLiquidityRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n\r\n            _self.lastLiquidityCumulativeIndex = cumulatedLiquidityInterest\r\n                .rayMul(_self.lastLiquidityCumulativeIndex);\r\n\r\n\r\n                uint256 cumulatedVariableBorrowInterest\r\n             = calculateCompoundedInterest(\r\n                _self.currentVariableBorrowRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n            _self\r\n                .lastVariableBorrowCumulativeIndex = cumulatedVariableBorrowInterest\r\n                .rayMul(_self.lastVariableBorrowCumulativeIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev accumulates a predefined amount of asset to the reserve as a fixed, one time income. Used for example to accumulate\r\n     * the flashloan fee to the reserve, and spread it through the depositors.\r\n     * @param _self the reserve object\r\n     * @param _totalLiquidity the total liquidity available in the reserve\r\n     * @param _amount the amount to accomulate\r\n     **/\r\n    function cumulateToLiquidityIndex(\r\n        ReserveData storage _self,\r\n        uint256 _totalLiquidity,\r\n        uint256 _amount\r\n    ) internal {\r\n        uint256 amountToLiquidityRatio = _amount.wadToRay().rayDiv(\r\n            _totalLiquidity.wadToRay()\r\n        );\r\n\r\n        uint256 cumulatedLiquidity = amountToLiquidityRatio.add(\r\n            WadRayMath.ray()\r\n        );\r\n\r\n        _self.lastLiquidityCumulativeIndex = cumulatedLiquidity.rayMul(\r\n            _self.lastLiquidityCumulativeIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev initializes a reserve\r\n     * @param _self the reserve object\r\n     * @param _PTokenAddress the address of the overlying PToken contract\r\n     * @param _decimals the number of decimals of the underlying asset\r\n     * @param _interestRateStrategyAddress the address of the interest rate strategy contract\r\n     **/\r\n    function init(\r\n        ReserveData storage _self,\r\n        address _PTokenAddress,\r\n        uint256 _decimals,\r\n        address _interestRateStrategyAddress\r\n    ) external {\r\n        require(\r\n            _self.PTokenAddress == address(0),\r\n            \"Reserve has already been initialized\"\r\n        );\r\n\r\n        if (_self.lastLiquidityCumulativeIndex == 0) {\r\n            //if the reserve has not been initialized yet\r\n            _self.lastLiquidityCumulativeIndex = WadRayMath.ray();\r\n        }\r\n\r\n        if (_self.lastVariableBorrowCumulativeIndex == 0) {\r\n            _self.lastVariableBorrowCumulativeIndex = WadRayMath.ray();\r\n        }\r\n\r\n        _self.PTokenAddress = _PTokenAddress;\r\n        _self.decimals = _decimals;\r\n\r\n        _self.interestRateStrategyAddress = _interestRateStrategyAddress;\r\n        _self.isActive = true;\r\n        _self.isFreezed = false;\r\n    }\r\n\r\n    /**\r\n     * @dev enables borrowing on a reserve\r\n     * @param _self the reserve object\r\n     * @param _stableBorrowRateEnabled true if the stable borrow rate must be enabled by default, false otherwise\r\n     **/\r\n    function enableBorrowing(\r\n        ReserveData storage _self,\r\n        bool _stableBorrowRateEnabled\r\n    ) external {\r\n        require(_self.borrowingEnabled == false, \"Reserve is already enabled\");\r\n\r\n        _self.borrowingEnabled = true;\r\n        _self.isStableBorrowRateEnabled = _stableBorrowRateEnabled;\r\n    }\r\n\r\n    /**\r\n     * @dev disables borrowing on a reserve\r\n     * @param _self the reserve object\r\n     **/\r\n    function disableBorrowing(ReserveData storage _self) external {\r\n        _self.borrowingEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * @dev enables a reserve to be used as collateral\r\n     * @param _self the reserve object\r\n     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral\r\n     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized\r\n     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset\r\n     **/\r\n    function enableAsCollateral(\r\n        ReserveData storage _self,\r\n        uint256 _baseLTVasCollateral,\r\n        uint256 _liquidationThreshold,\r\n        uint256 _liquidationBonus\r\n    ) external {\r\n        require(\r\n            _self.usageAsCollateralEnabled == false,\r\n            \"Reserve is already enabled as collateral\"\r\n        );\r\n\r\n        _self.usageAsCollateralEnabled = true;\r\n        _self.baseLTVasCollateral = _baseLTVasCollateral;\r\n        _self.liquidationThreshold = _liquidationThreshold;\r\n        _self.liquidationBonus = _liquidationBonus;\r\n\r\n        if (_self.lastLiquidityCumulativeIndex == 0)\r\n            _self.lastLiquidityCumulativeIndex = WadRayMath.ray();\r\n    }\r\n\r\n    /**\r\n     * @dev disables a reserve as collateral\r\n     * @param _self the reserve object\r\n     **/\r\n    function disableAsCollateral(ReserveData storage _self) external {\r\n        _self.usageAsCollateralEnabled = false;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * @dev calculates the compounded borrow balance of a user\r\n     * @param _self the userReserve object\r\n     * @param _reserve the reserve object\r\n     * @return the user compounded borrow balance\r\n     **/\r\n    function getCompoundedBorrowBalance(\r\n        CoreLibrary.UserReserveData storage _self,\r\n        CoreLibrary.ReserveData storage _reserve\r\n    ) internal view returns (uint256) {\r\n        if (_self.principalBorrowBalance == 0) return 0;\r\n\r\n        uint256 principalBorrowBalanceRay = _self\r\n            .principalBorrowBalance\r\n            .wadToRay();\r\n        uint256 compoundedBalance = 0;\r\n        uint256 cumulatedInterest = 0;\r\n\r\n        if (_self.stableBorrowRate > 0) {\r\n            cumulatedInterest = calculateCompoundedInterest(\r\n                _self.stableBorrowRate,\r\n                _self.lastUpdateTimestamp\r\n            );\r\n        } else {\r\n            //variable interest\r\n            cumulatedInterest = calculateCompoundedInterest(\r\n                _reserve\r\n                    .currentVariableBorrowRate,\r\n                _reserve\r\n                    .lastUpdateTimestamp\r\n            )\r\n                .rayMul(_reserve.lastVariableBorrowCumulativeIndex)\r\n                .rayDiv(_self.lastVariableBorrowCumulativeIndex);\r\n        }\r\n\r\n        compoundedBalance = principalBorrowBalanceRay\r\n            .rayMul(cumulatedInterest)\r\n            .rayToWad();\r\n\r\n        if (compoundedBalance == _self.principalBorrowBalance) {\r\n            //solium-disable-next-line\r\n            if (_self.lastUpdateTimestamp != block.timestamp) {\r\n                //no interest cumulation because of the rounding - we add 1 wei\r\n                //as symbolic cumulated interest to avoid interest free loans.\r\n\r\n                return _self.principalBorrowBalance.add(1 wei);\r\n            }\r\n        }\r\n\r\n        return compoundedBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev increases the total borrows at a stable rate on a specific reserve and updates the\r\n     * average stable rate consequently\r\n     * @param _reserve the reserve object\r\n     * @param _amount the amount to add to the total borrows stable\r\n     * @param _rate the rate at which the amount has been borrowed\r\n     **/\r\n    function increaseTotalBorrowsStableAndUpdateAverageRate(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount,\r\n        uint256 _rate\r\n    ) internal {\r\n        uint256 previousTotalBorrowStable = _reserve.totalBorrowsStable;\r\n        //updating reserve borrows stable\r\n        _reserve.totalBorrowsStable = _reserve.totalBorrowsStable.add(_amount);\r\n\r\n        //update the average stable rate\r\n        //weighted average of all the borrows\r\n        uint256 weightedLastBorrow = _amount.wadToRay().rayMul(_rate);\r\n        uint256 weightedPreviousTotalBorrows = previousTotalBorrowStable\r\n            .wadToRay()\r\n            .rayMul(_reserve.currentAverageStableBorrowRate);\r\n\r\n        _reserve.currentAverageStableBorrowRate = weightedLastBorrow\r\n            .add(weightedPreviousTotalBorrows)\r\n            .rayDiv(_reserve.totalBorrowsStable.wadToRay());\r\n    }\r\n\r\n    /**\r\n     * @dev decreases the total borrows at a stable rate on a specific reserve and updates the\r\n     * average stable rate consequently\r\n     * @param _reserve the reserve object\r\n     * @param _amount the amount to substract to the total borrows stable\r\n     * @param _rate the rate at which the amount has been repaid\r\n     **/\r\n    function decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount,\r\n        uint256 _rate\r\n    ) internal {\r\n        require(\r\n            _reserve.totalBorrowsStable >= _amount,\r\n            \"Invalid amount to decrease\"\r\n        );\r\n\r\n        uint256 previousTotalBorrowStable = _reserve.totalBorrowsStable;\r\n\r\n        //updating reserve borrows stable\r\n        _reserve.totalBorrowsStable = _reserve.totalBorrowsStable.sub(_amount);\r\n\r\n        if (_reserve.totalBorrowsStable == 0) {\r\n            _reserve.currentAverageStableBorrowRate = 0; //no income if there are no stable rate borrows\r\n            return;\r\n        }\r\n\r\n        //update the average stable rate\r\n        //weighted average of all the borrows\r\n        uint256 weightedLastBorrow = _amount.wadToRay().rayMul(_rate);\r\n        uint256 weightedPreviousTotalBorrows = previousTotalBorrowStable\r\n            .wadToRay()\r\n            .rayMul(_reserve.currentAverageStableBorrowRate);\r\n\r\n        require(\r\n            weightedPreviousTotalBorrows >= weightedLastBorrow,\r\n            \"The amounts to subtract don't match\"\r\n        );\r\n\r\n        _reserve.currentAverageStableBorrowRate = weightedPreviousTotalBorrows\r\n            .sub(weightedLastBorrow)\r\n            .rayDiv(_reserve.totalBorrowsStable.wadToRay());\r\n    }\r\n\r\n    /**\r\n     * @dev increases the total borrows at a variable rate\r\n     * @param _reserve the reserve object\r\n     * @param _amount the amount to add to the total borrows variable\r\n     **/\r\n    function increaseTotalBorrowsVariable(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount\r\n    ) internal {\r\n        _reserve.totalBorrowsVariable = _reserve.totalBorrowsVariable.add(\r\n            _amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev decreases the total borrows at a variable rate\r\n     * @param _reserve the reserve object\r\n     * @param _amount the amount to substract to the total borrows variable\r\n     **/\r\n    function decreaseTotalBorrowsVariable(\r\n        ReserveData storage _reserve,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(\r\n            _reserve.totalBorrowsVariable >= _amount,\r\n            \"The amount that is being subtracted from the variable total borrows is incorrect\"\r\n        );\r\n        _reserve.totalBorrowsVariable = _reserve.totalBorrowsVariable.sub(\r\n            _amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev function to calculate the interest using a linear interest rate formula\r\n     * @param _rate the interest rate, in ray\r\n     * @param _lastUpdateTimestamp the timestamp of the last update of the interest\r\n     * @return the interest rate linearly accumulated during the timeDelta, in ray\r\n     **/\r\n\r\n    function calculateLinearInterest(uint256 _rate, uint40 _lastUpdateTimestamp)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //solium-disable-next-line\r\n        uint256 timeDifference = block.timestamp.sub(\r\n            uint256(_lastUpdateTimestamp)\r\n        );\r\n\r\n        uint256 timeDelta = timeDifference.wadToRay().rayDiv(\r\n            SECONDS_PER_YEAR.wadToRay()\r\n        );\r\n\r\n        return _rate.rayMul(timeDelta).add(WadRayMath.ray());\r\n    }\r\n\r\n    /**\r\n     * @dev function to calculate the interest using a compounded interest rate formula\r\n     * @param _rate the interest rate, in ray\r\n     * @param _lastUpdateTimestamp the timestamp of the last update of the interest\r\n     * @return the interest rate compounded during the timeDelta, in ray\r\n     **/\r\n    function calculateCompoundedInterest(\r\n        uint256 _rate,\r\n        uint40 _lastUpdateTimestamp\r\n    ) internal view returns (uint256) {\r\n        //solium-disable-next-line\r\n        uint256 timeDifference = block.timestamp.sub(\r\n            uint256(_lastUpdateTimestamp)\r\n        );\r\n\r\n        uint256 ratePerSecond = _rate.div(SECONDS_PER_YEAR);\r\n\r\n        return ratePerSecond.add(WadRayMath.ray()).rayPow(timeDifference);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the total borrows on the reserve\r\n     * @param _reserve the reserve object\r\n     * @return the total borrows (stable + variable)\r\n     **/\r\n    function getTotalBorrows(CoreLibrary.ReserveData storage _reserve)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _reserve.totalBorrowsStable.add(_reserve.totalBorrowsVariable);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ILendingRateOracle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* ILendingRateOracle interface\r\n* -\r\n* Interface for the Populous borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\ninterface ILendingRateOracle {\r\n    /**\r\n    @dev returns the market borrow rate in ray\r\n    **/\r\n    function getMarketBorrowRate(address _asset) external view returns (uint256);\r\n\r\n    /**\r\n    @dev sets the market borrow rate. Rate value must be in ray\r\n    **/\r\n    function setMarketBorrowRate(address _asset, uint256 _rate) external;\r\n}\r\n\r\n// File: contracts/libraries/EthAddressLib.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n//note create a proper PToken interface\r\n\r\ninterface IPToken {\r\n    event Redeem(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n    event MintOnDeposit(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n    event BurnOnLiquidation(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n    event BalanceTransfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _toBalanceIncrease,\r\n        uint256 _fromIndex,\r\n        uint256 _toIndex\r\n    );\r\n    event InterestStreamRedirected(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _redirectedBalance,\r\n        uint256 _fromBalanceIncrease,\r\n        uint256 _fromIndex\r\n    );\r\n    event RedirectedBalanceUpdated(\r\n        address indexed _targetAddress,\r\n        uint256 _targetBalanceIncrease,\r\n        uint256 _targetIndex,\r\n        uint256 _redirectedBalanceAdded,\r\n        uint256 _redirectedBalanceRemoved\r\n    );\r\n    event InterestRedirectionAllowanceChanged(\r\n        address indexed _from,\r\n        address indexed _to\r\n    );\r\n\r\n    function balanceOf(address _user) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/lendingpool/LendingPoolCore.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"../tokenization/PToken.sol\";\r\n\r\n\r\n\r\n/**\r\n *LendingPoolCore contract\r\n * -\r\n * Holds the state of the lending pool and all the funds deposited\r\n* NOTE: The core does not enforce security checks on the update of the state\r\n* (eg, updateStateOnBorrow() does not enforce that borrowed is enabled on the reserve).\r\n* The check that an action can be performed is a duty of the overlying LendingPool contract.\r\n * -\r\n * This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n **/\r\n\r\ncontract LendingPoolCore is VersionedInitializable {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using CoreLibrary for CoreLibrary.ReserveData;\r\n    using CoreLibrary for CoreLibrary.UserReserveData;\r\n    using SafeERC20 for ERC20;\r\n    using Address for address payable;\r\n\r\n    /**\r\n    * @dev Emitted when the state of a reserve is updated\r\n    * @param reserve the address of the reserve\r\n    * @param liquidityRate the new liquidity rate\r\n    * @param stableBorrowRate the new stable borrow rate\r\n    * @param variableBorrowRate the new variable borrow rate\r\n    * @param liquidityIndex the new liquidity index\r\n    * @param variableBorrowIndex the new variable borrow index\r\n    **/\r\n    event ReserveUpdated(\r\n        address indexed reserve,\r\n        uint256 liquidityRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex\r\n    );\r\n\r\n    address public lendingPoolAddress;\r\n\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n\r\n    /**\r\n    * @dev only lending pools can use functions affected by this modifier\r\n    **/\r\n    modifier onlyLendingPool {\r\n        require(lendingPoolAddress == msg.sender, \"The caller must be a lending pool contract\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev only lending pools configurator can use functions affected by this modifier\r\n    **/\r\n    modifier onlyLendingPoolConfigurator {\r\n        require(\r\n            addressesProvider.getLendingPoolConfigurator() == msg.sender,\r\n            \"The caller must be a lending pool configurator contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    mapping(address => CoreLibrary.ReserveData) internal reserves;\r\n    mapping(address => mapping(address => CoreLibrary.UserReserveData)) internal usersReserveData;\r\n\r\n    address[] public reservesList;\r\n\r\n    uint256 public constant CORE_REVISION = 0x4;\r\n\r\n    /**\r\n    * @dev returns the revision number of the contract\r\n    **/\r\n    function getRevision() internal pure returns (uint256) {\r\n        return CORE_REVISION;\r\n    }\r\n\r\n    /**\r\n    * @dev initializes the Core contract, invoked upon registration on the AddressesProvider\r\n    * @param _addressesProvider the addressesProvider contract\r\n    **/\r\n\r\n    function initialize(LendingPoolAddressesProvider _addressesProvider) public initializer {\r\n        addressesProvider = _addressesProvider;\r\n        refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a deposit action\r\n    * @param _reserve the address of the reserve in which the deposit is happening\r\n    * @param _user the address of the the user depositing\r\n    * @param _amount the amount being deposited\r\n    * @param _isFirstDeposit true if the user is depositing for the first time\r\n    **/\r\n\r\n    function updateStateOnDeposit(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amount,\r\n        bool _isFirstDeposit\r\n    ) external onlyLendingPool {\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _amount, 0);\r\n\r\n        if (_isFirstDeposit) {\r\n            //if this is the first deposit of the user, we configure the deposit as enabled to be used as collateral\r\n            setUserUseReserveAsCollateral(_reserve, _user, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a redeem action\r\n    * @param _reserve the address of the reserve in which the redeem is happening\r\n    * @param _user the address of the user redeeming\r\n    * @param _amountRedeemed the amount being redeemed\r\n    * @param _userRedeemedEverything true if the user is redeeming everything\r\n    **/\r\n    function updateStateOnRedeem(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountRedeemed,\r\n        bool _userRedeemedEverything\r\n    ) external onlyLendingPool {\r\n        //compound liquidity and variable borrow interests\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, _amountRedeemed);\r\n\r\n        //if user redeemed everything the useReserveAsCollateral flag is reset\r\n        if (_userRedeemedEverything) {\r\n            setUserUseReserveAsCollateral(_reserve, _user, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a result of a flashloan action\r\n    * @param _reserve the address of the reserve in which the flashloan is happening\r\n    * @param _income the income of the protocol as a result of the action\r\n    **/\r\n    function updateStateOnFlashLoan(\r\n        address _reserve,\r\n        uint256 _availableLiquidityBefore,\r\n        uint256 _income,\r\n        uint256 _protocolFee\r\n    ) external onlyLendingPool {\r\n        transferFlashLoanProtocolFeeInternal(_reserve, _protocolFee);\r\n\r\n        //compounding the cumulated interest\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        uint256 totalLiquidityBefore = _availableLiquidityBefore.add(\r\n            getReserveTotalBorrows(_reserve)\r\n        );\r\n\r\n        //compounding the received fee into the reserve\r\n        reserves[_reserve].cumulateToLiquidityIndex(totalLiquidityBefore, _income);\r\n\r\n        //refresh interest rates\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _income, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _amountBorrowed the new amount borrowed\r\n    * @param _borrowFee the fee on the amount borrowed\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    * @return the new borrow rate for the user\r\n    **/\r\n    function updateStateOnBorrow(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountBorrowed,\r\n        uint256 _borrowFee,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) external onlyLendingPool returns (uint256, uint256) {\r\n        // getting the previous borrow data of the user\r\n        (uint256 principalBorrowBalance, , uint256 balanceIncrease) = getUserBorrowBalances(\r\n            _reserve,\r\n            _user\r\n        );\r\n\r\n        updateReserveStateOnBorrowInternal(\r\n            _reserve,\r\n            _user,\r\n            principalBorrowBalance,\r\n            balanceIncrease,\r\n            _amountBorrowed,\r\n            _rateMode\r\n        );\r\n\r\n        updateUserStateOnBorrowInternal(\r\n            _reserve,\r\n            _user,\r\n            _amountBorrowed,\r\n            balanceIncrease,\r\n            _borrowFee,\r\n            _rateMode\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, _amountBorrowed);\r\n\r\n        return (getUserCurrentBorrowRate(_reserve, _user), balanceIncrease);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _originationFeeRepaid the fee on the amount that is being repaid\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _repaidWholeLoan true if the user is repaying the whole loan\r\n    **/\r\n\r\n    function updateStateOnRepay(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _originationFeeRepaid,\r\n        uint256 _balanceIncrease,\r\n        bool _repaidWholeLoan\r\n    ) external onlyLendingPool {\r\n        updateReserveStateOnRepayInternal(\r\n            _reserve,\r\n            _user,\r\n            _paybackAmountMinusFees,\r\n            _balanceIncrease\r\n        );\r\n        updateUserStateOnRepayInternal(\r\n            _reserve,\r\n            _user,\r\n            _paybackAmountMinusFees,\r\n            _originationFeeRepaid,\r\n            _balanceIncrease,\r\n            _repaidWholeLoan\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, _paybackAmountMinusFees, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the amount borrowed by the user\r\n    * @param _compoundedBorrowBalance the amount borrowed plus accrued interest\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _currentRateMode the current interest rate mode for the user\r\n    **/\r\n    function updateStateOnSwapRate(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _compoundedBorrowBalance,\r\n        uint256 _balanceIncrease,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) external onlyLendingPool returns (CoreLibrary.InterestRateMode, uint256) {\r\n        updateReserveStateOnSwapRateInternal(\r\n            _reserve,\r\n            _user,\r\n            _principalBorrowBalance,\r\n            _compoundedBorrowBalance,\r\n            _currentRateMode\r\n        );\r\n\r\n        CoreLibrary.InterestRateMode newRateMode = updateUserStateOnSwapRateInternal(\r\n            _reserve,\r\n            _user,\r\n            _balanceIncrease,\r\n            _currentRateMode\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, 0);\r\n\r\n        return (newRateMode, getUserCurrentBorrowRate(_reserve, _user));\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a liquidation action.\r\n    * @param _principalReserve the address of the principal reserve that is being repaid\r\n    * @param _collateralReserve the address of the collateral reserve that is being liquidated\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _collateralToLiquidate the amount of collateral being liquidated\r\n    * @param _feeLiquidated the amount of origination fee being liquidated\r\n    * @param _liquidatedCollateralForFee the amount of collateral equivalent to the origination fee + bonus\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _liquidatorReceivesPToken true if the liquidator will receive PTokens, false otherwise\r\n    **/\r\n    function updateStateOnLiquidation(\r\n        address _principalReserve,\r\n        address _collateralReserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _collateralToLiquidate,\r\n        uint256 _feeLiquidated,\r\n        uint256 _liquidatedCollateralForFee,\r\n        uint256 _balanceIncrease,\r\n        bool _liquidatorReceivesPToken\r\n    ) external onlyLendingPool {\r\n        updatePrincipalReserveStateOnLiquidationInternal(\r\n            _principalReserve,\r\n            _user,\r\n            _amountToLiquidate,\r\n            _balanceIncrease\r\n        );\r\n\r\n        updateCollateralReserveStateOnLiquidationInternal(\r\n            _collateralReserve\r\n        );\r\n\r\n        updateUserStateOnLiquidationInternal(\r\n            _principalReserve,\r\n            _user,\r\n            _amountToLiquidate,\r\n            _feeLiquidated,\r\n            _balanceIncrease\r\n        );\r\n\r\n        updateReserveInterestRatesAndTimestampInternal(_principalReserve, _amountToLiquidate, 0);\r\n\r\n        if (!_liquidatorReceivesPToken) {\r\n            updateReserveInterestRatesAndTimestampInternal(\r\n                _collateralReserve,\r\n                0,\r\n                _collateralToLiquidate.add(_liquidatedCollateralForFee)\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the core as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @return the new stable rate for the user\r\n    **/\r\n    function updateStateOnRebalance(address _reserve, address _user, uint256 _balanceIncrease)\r\n        external\r\n        onlyLendingPool\r\n        returns (uint256)\r\n    {\r\n        updateReserveStateOnRebalanceInternal(_reserve, _user, _balanceIncrease);\r\n\r\n        //update user data and rebalance the rate\r\n        updateUserStateOnRebalanceInternal(_reserve, _user, _balanceIncrease);\r\n        updateReserveInterestRatesAndTimestampInternal(_reserve, 0, 0);\r\n        return usersReserveData[_user][_reserve].stableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev enables or disables a reserve as collateral\r\n    * @param _reserve the address of the principal reserve where the user deposited\r\n    * @param _user the address of the depositor\r\n    * @param _useAsCollateral true if the depositor wants to use the reserve as collateral\r\n    **/\r\n    function setUserUseReserveAsCollateral(address _reserve, address _user, bool _useAsCollateral)\r\n        public\r\n        onlyLendingPool\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        user.useAsCollateral = _useAsCollateral;\r\n    }\r\n\r\n    /**\r\n    * @notice ETH/token transfer functions\r\n    **/\r\n\r\n    /**\r\n    * @dev fallback function enforces that the caller is a contract, to support flashloan transfers\r\n    **/\r\n    function() external payable {\r\n        //only contracts can send ETH to the core\r\n        require(msg.sender.isContract(), \"Only contracts can send ether to the Lending pool core\");\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev transfers to the user a specific amount from the reserve.\r\n    * @param _reserve the address of the reserve where the transfer is happening\r\n    * @param _user the address of the user receiving the transfer\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferToUser(address _reserve, address payable _user, uint256 _amount)\r\n        external\r\n        onlyLendingPool\r\n    {\r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            ERC20(_reserve).safeTransfer(_user, _amount);\r\n        } else {\r\n            //solium-disable-next-line\r\n            (bool result, ) = _user.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers the protocol fees to the fees collection address\r\n    * @param _token the address of the token being transferred\r\n    * @param _user the address of the user from where the transfer is happening\r\n    * @param _amount the amount being transferred\r\n    * @param _destination the fee receiver address\r\n    **/\r\n\r\n    function transferToFeeCollectionAddress(\r\n        address _token,\r\n        address _user,\r\n        uint256 _amount,\r\n        address _destination\r\n    ) external payable onlyLendingPool {\r\n        address payable feeAddress = address(uint160(_destination)); //cast the address to payable\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            require(\r\n                msg.value == 0,\r\n                \"User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction\"\r\n            );\r\n            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);\r\n        } else {\r\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\r\n            //solium-disable-next-line\r\n            (bool result, ) = feeAddress.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers the fees to the fees collection address in the case of liquidation\r\n    * @param _token the address of the token being transferred\r\n    * @param _amount the amount being transferred\r\n    * @param _destination the fee receiver address\r\n    **/\r\n    function liquidateFee(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _destination\r\n    ) external payable onlyLendingPool {\r\n        address payable feeAddress = address(uint160(_destination)); //cast the address to payable\r\n        require(\r\n            msg.value == 0,\r\n            \"Fee liquidation does not require any transfer of value\"\r\n        );\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            ERC20(_token).safeTransfer(feeAddress, _amount);\r\n        } else {\r\n            //solium-disable-next-line\r\n            (bool result, ) = feeAddress.call.value(_amount).gas(50000)(\"\");\r\n            require(result, \"Transfer of ETH failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfers an amount from a user to the destination reserve\r\n    * @param _reserve the address of the reserve where the amount is being transferred\r\n    * @param _user the address of the user from where the transfer is happening\r\n    * @param _amount the amount being transferred\r\n    **/\r\n    function transferToReserve(address _reserve, address payable _user, uint256 _amount)\r\n        external\r\n        payable\r\n        onlyLendingPool\r\n    {\r\n        if (_reserve != EthAddressLib.ethAddress()) {\r\n            require(msg.value == 0, \"User is sending ETH along with the ERC20 transfer.\");\r\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\r\n\r\n        } else {\r\n            require(msg.value >= _amount, \"The amount and the value sent to deposit do not match\");\r\n\r\n            if (msg.value > _amount) {\r\n                //send back excess ETH\r\n                uint256 excessAmount = msg.value.sub(_amount);\r\n                //solium-disable-next-line\r\n                (bool result, ) = _user.call.value(excessAmount).gas(50000)(\"\");\r\n                require(result, \"Transfer of ETH failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice data access functions\r\n    **/\r\n\r\n    /**\r\n    * @dev returns the basic data (balances, fee accrued, reserve enabled/disabled as collateral)\r\n    * needed to calculate the global account data in the LendingPoolDataProvider\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @return the user deposited balance, the principal borrow balance, the fee, and if the reserve is enabled as collateral or not\r\n    **/\r\n    function getUserBasicReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, bool)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        uint256 underlyingBalance = getUserUnderlyingAssetBalance(_reserve, _user);\r\n\r\n        if (user.principalBorrowBalance == 0) {\r\n            return (underlyingBalance, 0, 0, user.useAsCollateral);\r\n        }\r\n\r\n        return (\r\n            underlyingBalance,\r\n            user.getCompoundedBorrowBalance(reserve),\r\n            user.originationFee,\r\n            user.useAsCollateral\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev checks if a user is allowed to borrow at a stable rate\r\n    * @param _reserve the reserve address\r\n    * @param _user the user\r\n    * @param _amount the amount the the user wants to borrow\r\n    * @return true if the user is allowed to borrow at a stable rate, false otherwise\r\n    **/\r\n\r\n    function isUserAllowedToBorrowAtStable(address _reserve, address _user, uint256 _amount)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (!reserve.isStableBorrowRateEnabled) return false;\r\n\r\n        return\r\n            !user.useAsCollateral ||\r\n            !reserve.usageAsCollateralEnabled ||\r\n            _amount > getUserUnderlyingAssetBalance(_reserve, _user);\r\n    }\r\n\r\n    /**\r\n    * @dev gets the underlying asset balance of a user based on the corresponding PToken balance.\r\n    * @param _reserve the reserve address\r\n    * @param _user the user address\r\n    * @return the underlying deposit balance of the user\r\n    **/\r\n\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IPToken PToken = IPToken(reserves[_reserve].PTokenAddress);\r\n        return PToken.balanceOf(_user);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev gets the interest rate strategy contract address for the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the address of the interest rate strategy contract\r\n    **/\r\n    function getReserveInterestRateStrategyAddress(address _reserve) public view returns (address) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.interestRateStrategyAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the PToken contract address for the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the address of the PToken contract\r\n    **/\r\n\r\n    function getReservePTokenAddress(address _reserve) public view returns (address) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.PTokenAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the available liquidity in the reserve. The available liquidity is the balance of the core contract\r\n    * @param _reserve the reserve address\r\n    * @return the available liquidity\r\n    **/\r\n    function getReserveAvailableLiquidity(address _reserve) public view returns (uint256) {\r\n        uint256 balance = 0;\r\n\r\n        if (_reserve == EthAddressLib.ethAddress()) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(_reserve).balanceOf(address(this));\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the total liquidity in the reserve. The total liquidity is the balance of the core contract + total borrows\r\n    * @param _reserve the reserve address\r\n    * @return the total liquidity\r\n    **/\r\n    function getReserveTotalLiquidity(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return getReserveAvailableLiquidity(_reserve).add(reserve.getTotalBorrows());\r\n    }\r\n\r\n    /**\r\n    * @dev gets the normalized income of the reserve. a value of 1e27 means there is no income. A value of 2e27 means there\r\n    * there has been 100% income.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve normalized income\r\n    **/\r\n    function getReserveNormalizedIncome(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.getNormalizedIncome();\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows (stable + variable)\r\n    **/\r\n    function getReserveTotalBorrows(address _reserve) public view returns (uint256) {\r\n        return reserves[_reserve].getTotalBorrows();\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows stable\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows stable\r\n    **/\r\n    function getReserveTotalBorrowsStable(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.totalBorrowsStable;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve total borrows variable\r\n    * @param _reserve the reserve address\r\n    * @return the total borrows variable\r\n    **/\r\n\r\n    function getReserveTotalBorrowsVariable(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.totalBorrowsVariable;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidation threshold\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidation threshold\r\n    **/\r\n\r\n    function getReserveLiquidationThreshold(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.liquidationThreshold;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidation bonus\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidation bonus\r\n    **/\r\n\r\n    function getReserveLiquidationBonus(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.liquidationBonus;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve current variable borrow rate. Is the base variable borrow rate if the reserve is empty\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current variable borrow rate\r\n    **/\r\n\r\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        if (reserve.currentVariableBorrowRate == 0) {\r\n            return\r\n                IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\r\n                .getBaseVariableBorrowRate();\r\n        }\r\n        return reserve.currentVariableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve current stable borrow rate. Is the market rate if the reserve is empty\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current stable borrow rate\r\n    **/\r\n\r\n    function getReserveCurrentStableBorrowRate(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        ILendingRateOracle oracle = ILendingRateOracle(addressesProvider.getLendingRateOracle());\r\n\r\n        if (reserve.currentStableBorrowRate == 0) {\r\n            //no stable rate borrows yet\r\n            return oracle.getMarketBorrowRate(_reserve);\r\n        }\r\n\r\n        return reserve.currentStableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve average stable borrow rate. The average stable rate is the weighted average\r\n    * of all the loans taken at stable rate.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve current average borrow rate\r\n    **/\r\n    function getReserveCurrentAverageStableBorrowRate(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.currentAverageStableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidity rate\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidity rate\r\n    **/\r\n    function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.currentLiquidityRate;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve liquidity cumulative index\r\n    * @param _reserve the reserve address\r\n    * @return the reserve liquidity cumulative index\r\n    **/\r\n    function getReserveLiquidityCumulativeIndex(address _reserve) external view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.lastLiquidityCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the reserve variable borrow index\r\n    * @param _reserve the reserve address\r\n    * @return the reserve variable borrow index\r\n    **/\r\n    function getReserveVariableBorrowsCumulativeIndex(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.lastVariableBorrowCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev this function aggregates the configuration parameters of the reserve.\r\n    * It's used in the LendingPoolDataProvider specifically to save gas, and avoid\r\n    * multiple external contract calls to fetch the same data.\r\n    * @param _reserve the reserve address\r\n    * @return the reserve decimals\r\n    * @return the base ltv as collateral\r\n    * @return the liquidation threshold\r\n    * @return if the reserve is used as collateral or not\r\n    **/\r\n    function getReserveConfiguration(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, bool)\r\n    {\r\n        uint256 decimals;\r\n        uint256 baseLTVasCollateral;\r\n        uint256 liquidationThreshold;\r\n        bool usageAsCollateralEnabled;\r\n\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        decimals = reserve.decimals;\r\n        baseLTVasCollateral = reserve.baseLTVasCollateral;\r\n        liquidationThreshold = reserve.liquidationThreshold;\r\n        usageAsCollateralEnabled = reserve.usageAsCollateralEnabled;\r\n\r\n        return (decimals, baseLTVasCollateral, liquidationThreshold, usageAsCollateralEnabled);\r\n    }\r\n\r\n    /**\r\n    * @dev returns the decimals of the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the reserve decimals\r\n    **/\r\n    function getReserveDecimals(address _reserve) external view returns (uint256) {\r\n        return reserves[_reserve].decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is enabled for borrowing\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is enabled for borrowing, false otherwise\r\n    **/\r\n\r\n    function isReserveBorrowingEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.borrowingEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is enabled as collateral\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is enabled as collateral, false otherwise\r\n    **/\r\n\r\n    function isReserveUsageAsCollateralEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.usageAsCollateralEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the stable rate is enabled on reserve\r\n    * @param _reserve the reserve address\r\n    * @return true if the stable rate is enabled on reserve, false otherwise\r\n    **/\r\n    function getReserveIsStableBorrowRateEnabled(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isStableBorrowRateEnabled;\r\n    }\r\n\r\n    /**\r\n    * @dev returns true if the reserve is active\r\n    * @param _reserve the reserve address\r\n    * @return true if the reserve is active, false otherwise\r\n    **/\r\n    function getReserveIsActive(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isActive;\r\n    }\r\n\r\n    /**\r\n    * @notice returns if a reserve is freezed\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return true if the reserve is freezed, false otherwise\r\n    **/\r\n\r\n    function getReserveIsFreezed(address _reserve) external view returns (bool) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        return reserve.isFreezed;\r\n    }\r\n\r\n    /**\r\n    * @notice returns the timestamp of the last action on the reserve\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return the last updated timestamp of the reserve\r\n    **/\r\n\r\n    function getReserveLastUpdate(address _reserve) external view returns (uint40 timestamp) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        timestamp = reserve.lastUpdateTimestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the utilization rate U of a specific reserve\r\n    * @param _reserve the reserve for which the information is needed\r\n    * @return the utilization rate in ray\r\n    **/\r\n\r\n    function getReserveUtilizationRate(address _reserve) public view returns (uint256) {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        uint256 totalBorrows = reserve.getTotalBorrows();\r\n\r\n        if (totalBorrows == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 availableLiquidity = getReserveAvailableLiquidity(_reserve);\r\n\r\n        return totalBorrows.rayDiv(availableLiquidity.add(totalBorrows));\r\n    }\r\n\r\n    /**\r\n    * @return the array of reserves configured on the core\r\n    **/\r\n    function getReserves() external view returns (address[] memory) {\r\n        return reservesList;\r\n    }\r\n\r\n    /**\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return true if the user has chosen to use the reserve as collateral, false otherwise\r\n    **/\r\n    function isUserUseReserveAsCollateralEnabled(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.useAsCollateral;\r\n    }\r\n\r\n    /**\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the origination fee for the user\r\n    **/\r\n    function getUserOriginationFee(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.originationFee;\r\n    }\r\n\r\n    /**\r\n    * @dev users with no loans in progress have NONE as borrow rate mode\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the borrow rate mode for the user,\r\n    **/\r\n\r\n    function getUserCurrentBorrowRateMode(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (CoreLibrary.InterestRateMode)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (user.principalBorrowBalance == 0) {\r\n            return CoreLibrary.InterestRateMode.NONE;\r\n        }\r\n\r\n        return\r\n            user.stableBorrowRate > 0\r\n            ? CoreLibrary.InterestRateMode.STABLE\r\n            : CoreLibrary.InterestRateMode.VARIABLE;\r\n    }\r\n\r\n    /**\r\n    * @dev gets the current borrow rate of the user\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the borrow rate for the user,\r\n    **/\r\n    function getUserCurrentBorrowRate(address _reserve, address _user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.InterestRateMode rateMode = getUserCurrentBorrowRateMode(_reserve, _user);\r\n\r\n        if (rateMode == CoreLibrary.InterestRateMode.NONE) {\r\n            return 0;\r\n        }\r\n\r\n        return\r\n            rateMode == CoreLibrary.InterestRateMode.STABLE\r\n            ? usersReserveData[_user][_reserve].stableBorrowRate\r\n            : reserves[_reserve].currentVariableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev the stable rate returned is 0 if the user is borrowing at variable or not borrowing at all\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the user stable rate\r\n    **/\r\n    function getUserCurrentStableBorrowRate(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.stableBorrowRate;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates and returns the borrow balances of the user\r\n    * @param _reserve the address of the reserve\r\n    * @param _user the address of the user\r\n    * @return the principal borrow balance, the compounded balance and the balance increase since the last borrow/repay/swap/rebalance\r\n    **/\r\n\r\n    function getUserBorrowBalances(address _reserve, address _user)\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        if (user.principalBorrowBalance == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 principal = user.principalBorrowBalance;\r\n        uint256 compoundedBalance = CoreLibrary.getCompoundedBorrowBalance(\r\n            user,\r\n            reserves[_reserve]\r\n        );\r\n        return (principal, compoundedBalance, compoundedBalance.sub(principal));\r\n    }\r\n\r\n    /**\r\n    * @dev the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the variable borrow index for the user\r\n    **/\r\n\r\n    function getUserVariableBorrowCumulativeIndex(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        return user.lastVariableBorrowCumulativeIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable\r\n    * @param _reserve the address of the reserve for which the information is needed\r\n    * @param _user the address of the user for which the information is needed\r\n    * @return the variable borrow index for the user\r\n    **/\r\n\r\n    function getUserLastUpdate(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (uint256 timestamp)\r\n    {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        timestamp = user.lastUpdateTimestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the lending pool core configuration\r\n    **/\r\n    function refreshConfiguration() external onlyLendingPoolConfigurator {\r\n        refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n    * @dev initializes a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _PTokenAddress the address of the overlying PToken contract\r\n    * @param _decimals the decimals of the reserve currency\r\n    * @param _interestRateStrategyAddress the address of the interest rate strategy contract\r\n    **/\r\n    function initReserve(\r\n        address _reserve,\r\n        address _PTokenAddress,\r\n        uint256 _decimals,\r\n        address _interestRateStrategyAddress\r\n    ) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].init(_PTokenAddress, _decimals, _interestRateStrategyAddress);\r\n        addReserveToListInternal(_reserve);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev removes the last added reserve in the reservesList array\r\n    * @param _reserveToRemove the address of the reserve\r\n    **/\r\n    function removeLastAddedReserve(address _reserveToRemove)\r\n     external onlyLendingPoolConfigurator {\r\n\r\n        address lastReserve = reservesList[reservesList.length-1];\r\n\r\n        require(lastReserve == _reserveToRemove, \"Reserve being removed is different than the reserve requested\");\r\n\r\n        //as we can't check if totalLiquidity is 0 (since the reserve added might not be an ERC20) we at least check that there is nothing borrowed\r\n        require(getReserveTotalBorrows(lastReserve) == 0, \"Cannot remove a reserve with liquidity deposited\");\r\n\r\n        reserves[lastReserve].isActive = false;\r\n        reserves[lastReserve].PTokenAddress = address(0);\r\n        reserves[lastReserve].decimals = 0;\r\n        reserves[lastReserve].lastLiquidityCumulativeIndex = 0;\r\n        reserves[lastReserve].lastVariableBorrowCumulativeIndex = 0;\r\n        reserves[lastReserve].borrowingEnabled = false;\r\n        reserves[lastReserve].usageAsCollateralEnabled = false;\r\n        reserves[lastReserve].baseLTVasCollateral = 0;\r\n        reserves[lastReserve].liquidationThreshold = 0;\r\n        reserves[lastReserve].liquidationBonus = 0;\r\n        reserves[lastReserve].interestRateStrategyAddress = address(0);\r\n\r\n        reservesList.pop();\r\n    }\r\n\r\n    /**\r\n    * @dev updates the address of the interest rate strategy contract\r\n    * @param _reserve the address of the reserve\r\n    * @param _rateStrategyAddress the address of the interest rate strategy contract\r\n    **/\r\n\r\n    function setReserveInterestRateStrategyAddress(address _reserve, address _rateStrategyAddress)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        reserves[_reserve].interestRateStrategyAddress = _rateStrategyAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev enables borrowing on a reserve. Also sets the stable rate borrowing\r\n    * @param _reserve the address of the reserve\r\n    * @param _stableBorrowRateEnabled true if the stable rate needs to be enabled, false otherwise\r\n    **/\r\n\r\n    function enableBorrowingOnReserve(address _reserve, bool _stableBorrowRateEnabled)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        reserves[_reserve].enableBorrowing(_stableBorrowRateEnabled);\r\n    }\r\n\r\n    /**\r\n    * @dev disables borrowing on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n\r\n    function disableBorrowingOnReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].disableBorrowing();\r\n    }\r\n\r\n    /**\r\n    * @dev enables a reserve to be used as collateral\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function enableReserveAsCollateral(\r\n        address _reserve,\r\n        uint256 _baseLTVasCollateral,\r\n        uint256 _liquidationThreshold,\r\n        uint256 _liquidationBonus\r\n    ) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].enableAsCollateral(\r\n            _baseLTVasCollateral,\r\n            _liquidationThreshold,\r\n            _liquidationBonus\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev disables a reserve to be used as collateral\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function disableReserveAsCollateral(address _reserve) external onlyLendingPoolConfigurator {\r\n        reserves[_reserve].disableAsCollateral();\r\n    }\r\n\r\n    /**\r\n    * @dev enable the stable borrow rate mode on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function enableReserveStableBorrowRate(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isStableBorrowRateEnabled = true;\r\n    }\r\n\r\n    /**\r\n    * @dev disable the stable borrow rate mode on a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function disableReserveStableBorrowRate(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isStableBorrowRateEnabled = false;\r\n    }\r\n\r\n    /**\r\n    * @dev activates a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function activateReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        require(\r\n            reserve.lastLiquidityCumulativeIndex > 0 &&\r\n                reserve.lastVariableBorrowCumulativeIndex > 0,\r\n            \"Reserve has not been initialized yet\"\r\n        );\r\n        reserve.isActive = true;\r\n    }\r\n\r\n    /**\r\n    * @dev deactivates a reserve\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function deactivateReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isActive = false;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to freeze the reserve.\r\n    * A freezed reserve does not allow any action apart from repay, redeem, liquidationCall, rebalance.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function freezeReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isFreezed = true;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to unfreeze the reserve. A unfreezed reserve allows any action to be executed.\r\n    * @param _reserve the address of the reserve\r\n    **/\r\n    function unfreezeReserve(address _reserve) external onlyLendingPoolConfigurator {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.isFreezed = false;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the loan to value of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _ltv the new loan to value\r\n    **/\r\n    function setReserveBaseLTVasCollateral(address _reserve, uint256 _ltv)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.baseLTVasCollateral = _ltv;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the liquidation threshold of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _threshold the new liquidation threshold\r\n    **/\r\n    function setReserveLiquidationThreshold(address _reserve, uint256 _threshold)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.liquidationThreshold = _threshold;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the liquidation bonus of a reserve\r\n    * @param _reserve the address of the reserve\r\n    * @param _bonus the new liquidation bonus\r\n    **/\r\n    function setReserveLiquidationBonus(address _reserve, uint256 _bonus)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.liquidationBonus = _bonus;\r\n    }\r\n\r\n    /**\r\n    * @notice allows the configurator to update the reserve decimals\r\n    * @param _reserve the address of the reserve\r\n    * @param _decimals the decimals of the reserve\r\n    **/\r\n    function setReserveDecimals(address _reserve, uint256 _decimals)\r\n        external\r\n        onlyLendingPoolConfigurator\r\n    {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        reserve.decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n    * @notice internal functions\r\n    **/\r\n\r\n    /**\r\n    * @dev updates the state of a reserve as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the previous borrow balance of the borrower before the action\r\n    * @param _balanceIncrease the accrued interest of the user on the previous borrowed amount\r\n    * @param _amountBorrowed the new amount borrowed\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    **/\r\n\r\n    function updateReserveStateOnBorrowInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _balanceIncrease,\r\n        uint256 _amountBorrowed,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) internal {\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        //increasing reserve total borrows to account for the new borrow balance of the user\r\n        //NOTE: Depending on the previous borrow mode, the borrows might need to be switched from variable to stable or vice versa\r\n\r\n        updateReserveTotalBorrowsByRateModeInternal(\r\n            _reserve,\r\n            _user,\r\n            _principalBorrowBalance,\r\n            _balanceIncrease,\r\n            _amountBorrowed,\r\n            _rateMode\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of a user as a consequence of a borrow action.\r\n    * @param _reserve the address of the reserve on which the user is borrowing\r\n    * @param _user the address of the borrower\r\n    * @param _amountBorrowed the amount borrowed\r\n    * @param _balanceIncrease the accrued interest of the user on the previous borrowed amount\r\n    * @param _rateMode the borrow rate mode (stable, variable)\r\n    * @return the final borrow rate for the user. Emitted by the borrow() event\r\n    **/\r\n\r\n    function updateUserStateOnBorrowInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountBorrowed,\r\n        uint256 _balanceIncrease,\r\n        uint256 _fee,\r\n        CoreLibrary.InterestRateMode _rateMode\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        if (_rateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            //stable\r\n            //reset the user variable index, and update the stable rate\r\n            user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        } else if (_rateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //variable\r\n            //reset the user stable rate, and store the new borrow index\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        } else {\r\n            revert(\"Invalid borrow rate mode\");\r\n        }\r\n        //increase the principal borrows and the origination fee\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_amountBorrowed).add(\r\n            _balanceIncrease\r\n        );\r\n        user.originationFee = user.originationFee.add(_fee);\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the reserve as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateReserveStateOnRepayInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_reserve][_user];\r\n\r\n        CoreLibrary.InterestRateMode borrowRateMode = getUserCurrentBorrowRateMode(_reserve, _user);\r\n\r\n        //update the indexes\r\n        reserves[_reserve].updateCumulativeIndexes();\r\n\r\n        //compound the cumulated interest to the borrow balance and then subtracting the payback amount\r\n        if (borrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _balanceIncrease,\r\n                user.stableBorrowRate\r\n            );\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _paybackAmountMinusFees,\r\n                user.stableBorrowRate\r\n            );\r\n        } else {\r\n            reserve.increaseTotalBorrowsVariable(_balanceIncrease);\r\n            reserve.decreaseTotalBorrowsVariable(_paybackAmountMinusFees);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a repay action.\r\n    * @param _reserve the address of the reserve on which the user is repaying\r\n    * @param _user the address of the borrower\r\n    * @param _paybackAmountMinusFees the amount being paid back minus fees\r\n    * @param _originationFeeRepaid the fee on the amount that is being repaid\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _repaidWholeLoan true if the user is repaying the whole loan\r\n    **/\r\n    function updateUserStateOnRepayInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _paybackAmountMinusFees,\r\n        uint256 _originationFeeRepaid,\r\n        uint256 _balanceIncrease,\r\n        bool _repaidWholeLoan\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        //update the user principal borrow balance, adding the cumulated interest and then subtracting the payback amount\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease).sub(\r\n            _paybackAmountMinusFees\r\n        );\r\n        user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n\r\n        //if the balance decrease is equal to the previous principal (user is repaying the whole loan)\r\n        //and the rate mode is stable, we reset the interest rate mode of the user\r\n        if (_repaidWholeLoan) {\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        }\r\n        user.originationFee = user.originationFee.sub(_originationFeeRepaid);\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is performing the rate swap\r\n    * @param _user the address of the borrower\r\n    * @param _principalBorrowBalance the the principal amount borrowed by the user\r\n    * @param _compoundedBorrowBalance the principal amount plus the accrued interest\r\n    * @param _currentRateMode the rate mode at which the user borrowed\r\n    **/\r\n    function updateReserveStateOnSwapRateInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBorrowBalance,\r\n        uint256 _compoundedBorrowBalance,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        //compounding reserve indexes\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        if (_currentRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            uint256 userCurrentStableRate = user.stableBorrowRate;\r\n\r\n            //swap to variable\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _principalBorrowBalance,\r\n                userCurrentStableRate\r\n            ); //decreasing stable from old principal balance\r\n            reserve.increaseTotalBorrowsVariable(_compoundedBorrowBalance); //increase variable borrows\r\n        } else if (_currentRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //swap to stable\r\n            uint256 currentStableRate = reserve.currentStableBorrowRate;\r\n            reserve.decreaseTotalBorrowsVariable(_principalBorrowBalance);\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _compoundedBorrowBalance,\r\n                currentStableRate\r\n            );\r\n\r\n        } else {\r\n            revert(\"Invalid rate mode received\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a swap rate action.\r\n    * @param _reserve the address of the reserve on which the user is performing the swap\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _currentRateMode the current rate mode of the user\r\n    **/\r\n\r\n    function updateUserStateOnSwapRateInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease,\r\n        CoreLibrary.InterestRateMode _currentRateMode\r\n    ) internal returns (CoreLibrary.InterestRateMode) {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        CoreLibrary.InterestRateMode newMode = CoreLibrary.InterestRateMode.NONE;\r\n\r\n        if (_currentRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            //switch to stable\r\n            newMode = CoreLibrary.InterestRateMode.STABLE;\r\n            user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n            user.lastVariableBorrowCumulativeIndex = 0;\r\n        } else if (_currentRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            newMode = CoreLibrary.InterestRateMode.VARIABLE;\r\n            user.stableBorrowRate = 0;\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        } else {\r\n            revert(\"Invalid interest rate mode received\");\r\n        }\r\n        //compounding cumulated interest\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease);\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n        return newMode;\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the principal reserve as a consequence of a liquidation action.\r\n    * @param _principalReserve the address of the principal reserve that is being repaid\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updatePrincipalReserveStateOnLiquidationInternal(\r\n        address _principalReserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_principalReserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_principalReserve];\r\n\r\n        //update principal reserve data\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        CoreLibrary.InterestRateMode borrowRateMode = getUserCurrentBorrowRateMode(\r\n            _principalReserve,\r\n            _user\r\n        );\r\n\r\n        if (borrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            //increase the total borrows by the compounded interest\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _balanceIncrease,\r\n                user.stableBorrowRate\r\n            );\r\n\r\n            //decrease by the actual amount to liquidate\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _amountToLiquidate,\r\n                user.stableBorrowRate\r\n            );\r\n\r\n        } else {\r\n            //increase the total borrows by the compounded interest\r\n            reserve.increaseTotalBorrowsVariable(_balanceIncrease);\r\n\r\n            //decrease by the actual amount to liquidate\r\n            reserve.decreaseTotalBorrowsVariable(_amountToLiquidate);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the collateral reserve as a consequence of a liquidation action.\r\n    * @param _collateralReserve the address of the collateral reserve that is being liquidated\r\n    **/\r\n    function updateCollateralReserveStateOnLiquidationInternal(\r\n        address _collateralReserve\r\n    ) internal {\r\n        //update collateral reserve\r\n        reserves[_collateralReserve].updateCumulativeIndexes();\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user being liquidated as a consequence of a liquidation action.\r\n    * @param _reserve the address of the principal reserve that is being repaid\r\n    * @param _user the address of the borrower\r\n    * @param _amountToLiquidate the amount being repaid by the liquidator\r\n    * @param _feeLiquidated the amount of origination fee being liquidated\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n    function updateUserStateOnLiquidationInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amountToLiquidate,\r\n        uint256 _feeLiquidated,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        //first increase by the compounded interest, then decrease by the liquidated amount\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease).sub(\r\n            _amountToLiquidate\r\n        );\r\n\r\n        if (\r\n            getUserCurrentBorrowRateMode(_reserve, _user) == CoreLibrary.InterestRateMode.VARIABLE\r\n        ) {\r\n            user.lastVariableBorrowCumulativeIndex = reserve.lastVariableBorrowCumulativeIndex;\r\n        }\r\n\r\n        if(_feeLiquidated > 0){\r\n            user.originationFee = user.originationFee.sub(_feeLiquidated);\r\n        }\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the reserve as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateReserveStateOnRebalanceInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n\r\n        reserve.updateCumulativeIndexes();\r\n\r\n        reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n            _balanceIncrease,\r\n            user.stableBorrowRate\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    **/\r\n\r\n    function updateUserStateOnRebalanceInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _balanceIncrease\r\n    ) internal {\r\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        user.principalBorrowBalance = user.principalBorrowBalance.add(_balanceIncrease);\r\n        user.stableBorrowRate = reserve.currentStableBorrowRate;\r\n\r\n        //solium-disable-next-line\r\n        user.lastUpdateTimestamp = uint40(block.timestamp);\r\n    }\r\n\r\n    /**\r\n    * @dev updates the state of the user as a consequence of a stable rate rebalance\r\n    * @param _reserve the address of the principal reserve where the user borrowed\r\n    * @param _user the address of the borrower\r\n    * @param _balanceIncrease the accrued interest on the borrowed amount\r\n    * @param _amountBorrowed the accrued interest on the borrowed amount\r\n    **/\r\n    function updateReserveTotalBorrowsByRateModeInternal(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _principalBalance,\r\n        uint256 _balanceIncrease,\r\n        uint256 _amountBorrowed,\r\n        CoreLibrary.InterestRateMode _newBorrowRateMode\r\n    ) internal {\r\n        CoreLibrary.InterestRateMode previousRateMode = getUserCurrentBorrowRateMode(\r\n            _reserve,\r\n            _user\r\n        );\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n\r\n        if (previousRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\r\n            reserve.decreaseTotalBorrowsStableAndUpdateAverageRate(\r\n                _principalBalance,\r\n                user.stableBorrowRate\r\n            );\r\n        } else if (previousRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            reserve.decreaseTotalBorrowsVariable(_principalBalance);\r\n        }\r\n\r\n        uint256 newPrincipalAmount = _principalBalance.add(_balanceIncrease).add(_amountBorrowed);\r\n        if (_newBorrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n            reserve.increaseTotalBorrowsStableAndUpdateAverageRate(\r\n                newPrincipalAmount,\r\n                reserve.currentStableBorrowRate\r\n            );\r\n        } else if (_newBorrowRateMode == CoreLibrary.InterestRateMode.VARIABLE) {\r\n            reserve.increaseTotalBorrowsVariable(newPrincipalAmount);\r\n        } else {\r\n            revert(\"Invalid new borrow rate mode\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the reserve current stable borrow rate Rf, the current variable borrow rate Rv and the current liquidity rate Rl.\r\n    * Also updates the lastUpdateTimestamp value. Please refer to the whitepaper for further information.\r\n    * @param _reserve the address of the reserve to be updated\r\n    * @param _liquidityAdded the amount of liquidity added to the protocol (deposit or repay) in the previous action\r\n    * @param _liquidityTaken the amount of liquidity taken from the protocol (redeem or borrow)\r\n    **/\r\n\r\n    function updateReserveInterestRatesAndTimestampInternal(\r\n        address _reserve,\r\n        uint256 _liquidityAdded,\r\n        uint256 _liquidityTaken\r\n    ) internal {\r\n        CoreLibrary.ReserveData storage reserve = reserves[_reserve];\r\n        (uint256 newLiquidityRate, uint256 newStableRate, uint256 newVariableRate) = IReserveInterestRateStrategy(\r\n            reserve\r\n                .interestRateStrategyAddress\r\n        )\r\n            .calculateInterestRates(\r\n            _reserve,\r\n            getReserveAvailableLiquidity(_reserve).add(_liquidityAdded).sub(_liquidityTaken),\r\n            reserve.totalBorrowsStable,\r\n            reserve.totalBorrowsVariable,\r\n            reserve.currentAverageStableBorrowRate\r\n        );\r\n\r\n        reserve.currentLiquidityRate = newLiquidityRate;\r\n        reserve.currentStableBorrowRate = newStableRate;\r\n        reserve.currentVariableBorrowRate = newVariableRate;\r\n\r\n        //solium-disable-next-line\r\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\r\n\r\n        emit ReserveUpdated(\r\n            _reserve,\r\n            newLiquidityRate,\r\n            newStableRate,\r\n            newVariableRate,\r\n            reserve.lastLiquidityCumulativeIndex,\r\n            reserve.lastVariableBorrowCumulativeIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev transfers to the protocol fees of a flashloan to the fees collection address\r\n    * @param _token the address of the token being transferred\r\n    * @param _amount the amount being transferred\r\n    **/\r\n\r\n    function transferFlashLoanProtocolFeeInternal(address _token, uint256 _amount) internal {\r\n        address payable receiver = address(uint160(addressesProvider.getTokenDistributor()));\r\n\r\n        if (_token != EthAddressLib.ethAddress()) {\r\n            ERC20(_token).safeTransfer(receiver, _amount);\r\n        } else {\r\n            receiver.transfer(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev updates the internal configuration of the core\r\n    **/\r\n    function refreshConfigInternal() internal {\r\n        lendingPoolAddress = addressesProvider.getLendingPool();\r\n    }\r\n\r\n    /**\r\n    * @dev adds a reserve to the array of the reserves address\r\n    **/\r\n    function addReserveToListInternal(address _reserve) internal {\r\n        bool reserveAlreadyAdded = false;\r\n        for (uint256 i = 0; i < reservesList.length; i++)\r\n            if (reservesList[i] == _reserve) {\r\n                reserveAlreadyAdded = true;\r\n            }\r\n        if (!reserveAlreadyAdded) reservesList.push(_reserve);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/lendingpool/DefaultReserveInterestRateStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* DefaultReserveInterestRateStrategy contract\r\n* -\r\n* implements the calculation of the interest rates depending on the reserve parameters.\r\n* if there is need to update the calculation of the interest rates for a specific reserve,\r\n* a new version of this contract will be deployed.\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\r\n    using WadRayMath for uint256;\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n   /**\r\n    * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\r\n    * expressed in ray\r\n    **/\r\n    uint256 public constant OPTIMAL_UTILIZATION_RATE = 0.8 * 1e27;\r\n\r\n   /**\r\n    * @dev this constant represents the excess utilization rate above the optimal. It's always equal to\r\n    * 1-optimal utilization rate. Added as a constant here for gas optimizations\r\n    * expressed in ray\r\n    **/\r\n\r\n    uint256 public constant EXCESS_UTILIZATION_RATE = 0.2 * 1e27;\r\n\r\n    LendingPoolAddressesProvider public addressesProvider;\r\n\r\n\r\n    //base variable borrow rate when Utilization rate = 0. Expressed in ray\r\n    uint256 public baseVariableBorrowRate;\r\n\r\n    //slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n    uint256 public variableRateSlope1;\r\n\r\n    //slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n    uint256 public variableRateSlope2;\r\n\r\n    //slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n    uint256 public stableRateSlope1;\r\n\r\n    //slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n    uint256 public stableRateSlope2;\r\n    \r\n    address public reserve;\r\n\r\n    constructor(\r\n        address _reserve,\r\n        LendingPoolAddressesProvider _provider,\r\n        uint256 _baseVariableBorrowRate,\r\n        uint256 _variableRateSlope1,\r\n        uint256 _variableRateSlope2,\r\n        uint256 _stableRateSlope1,\r\n        uint256 _stableRateSlope2\r\n    ) public {\r\n        addressesProvider = _provider;\r\n        baseVariableBorrowRate = _baseVariableBorrowRate;\r\n        variableRateSlope1 = _variableRateSlope1;\r\n        variableRateSlope2 = _variableRateSlope2;\r\n        stableRateSlope1 = _stableRateSlope1;\r\n        stableRateSlope2 = _stableRateSlope2;\r\n        reserve = _reserve;\r\n    }\r\n\r\n    /**\r\n    @dev accessors\r\n     */\r\n\r\n    function getBaseVariableBorrowRate() external view returns (uint256) {\r\n        return baseVariableBorrowRate;\r\n    }\r\n\r\n    function getVariableRateSlope1() external view returns (uint256) {\r\n        return variableRateSlope1;\r\n    }\r\n\r\n    function getVariableRateSlope2() external view returns (uint256) {\r\n        return variableRateSlope2;\r\n    }\r\n\r\n    function getStableRateSlope1() external view returns (uint256) {\r\n        return stableRateSlope1;\r\n    }\r\n\r\n    function getStableRateSlope2() external view returns (uint256) {\r\n        return stableRateSlope2;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the interest rates depending on the available liquidity and the total borrowed.\r\n    * @param _reserve the address of the reserve\r\n    * @param _availableLiquidity the liquidity available in the reserve\r\n    * @param _totalBorrowsStable the total borrowed from the reserve a stable rate\r\n    * @param _totalBorrowsVariable the total borrowed from the reserve at a variable rate\r\n    * @param _averageStableBorrowRate the weighted average of all the stable rate borrows\r\n    * @return the liquidity rate, stable borrow rate and variable borrow rate calculated from the input parameters\r\n    **/\r\n    function calculateInterestRates(\r\n        address _reserve,\r\n        uint256 _availableLiquidity,\r\n        uint256 _totalBorrowsStable,\r\n        uint256 _totalBorrowsVariable,\r\n        uint256 _averageStableBorrowRate\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentLiquidityRate,\r\n            uint256 currentStableBorrowRate,\r\n            uint256 currentVariableBorrowRate\r\n        )\r\n    {\r\n        uint256 totalBorrows = _totalBorrowsStable.add(_totalBorrowsVariable);\r\n\r\n        uint256 utilizationRate = (totalBorrows == 0 && _availableLiquidity == 0)\r\n            ? 0\r\n            : totalBorrows.rayDiv(_availableLiquidity.add(totalBorrows));\r\n\r\n        currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle())\r\n            .getMarketBorrowRate(_reserve);\r\n\r\n        if (utilizationRate > OPTIMAL_UTILIZATION_RATE) {\r\n            uint256 excessUtilizationRateRatio = utilizationRate\r\n                .sub(OPTIMAL_UTILIZATION_RATE)\r\n                .rayDiv(EXCESS_UTILIZATION_RATE);\r\n\r\n            currentStableBorrowRate = currentStableBorrowRate.add(stableRateSlope1).add(\r\n                stableRateSlope2.rayMul(excessUtilizationRateRatio)\r\n            );\r\n\r\n            currentVariableBorrowRate = baseVariableBorrowRate.add(variableRateSlope1).add(\r\n                variableRateSlope2.rayMul(excessUtilizationRateRatio)\r\n            );\r\n        } else {\r\n            currentStableBorrowRate = currentStableBorrowRate.add(\r\n                stableRateSlope1.rayMul(\r\n                    utilizationRate.rayDiv(\r\n                        OPTIMAL_UTILIZATION_RATE\r\n                    )\r\n                )\r\n            );\r\n            currentVariableBorrowRate = baseVariableBorrowRate.add(\r\n                utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE).rayMul(variableRateSlope1)\r\n            );\r\n        }\r\n\r\n        currentLiquidityRate = getOverallBorrowRateInternal(\r\n            _totalBorrowsStable,\r\n            _totalBorrowsVariable,\r\n            currentVariableBorrowRate,\r\n            _averageStableBorrowRate\r\n        )\r\n            .rayMul(utilizationRate);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the overall borrow rate as the weighted average between the total variable borrows and total stable borrows.\r\n    * @param _totalBorrowsStable the total borrowed from the reserve a stable rate\r\n    * @param _totalBorrowsVariable the total borrowed from the reserve at a variable rate\r\n    * @param _currentVariableBorrowRate the current variable borrow rate\r\n    * @param _currentAverageStableBorrowRate the weighted average of all the stable rate borrows\r\n    * @return the weighted averaged borrow rate\r\n    **/\r\n    function getOverallBorrowRateInternal(\r\n        uint256 _totalBorrowsStable,\r\n        uint256 _totalBorrowsVariable,\r\n        uint256 _currentVariableBorrowRate,\r\n        uint256 _currentAverageStableBorrowRate\r\n    ) internal pure returns (uint256) {\r\n        uint256 totalBorrows = _totalBorrowsStable.add(_totalBorrowsVariable);\r\n\r\n        if (totalBorrows == 0) return 0;\r\n\r\n        uint256 weightedVariableRate = _totalBorrowsVariable.wadToRay().rayMul(\r\n            _currentVariableBorrowRate\r\n        );\r\n\r\n        uint256 weightedStableRate = _totalBorrowsStable.wadToRay().rayMul(\r\n            _currentAverageStableBorrowRate\r\n        );\r\n\r\n        uint256 overallBorrowRate = weightedVariableRate.add(weightedStableRate).rayDiv(\r\n            totalBorrows.wadToRay()\r\n        );\r\n\r\n        return overallBorrowRate;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"contract LendingPoolAddressesProvider\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCESS_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract LendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBorrowsStable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBorrowsVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averageStableBorrowRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"variableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"variableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DefaultReserveInterestRateStrategy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000004ad055e076be86d8f947333f15fb4e313bafc49b000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000006342fd08f00f63780000000000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000001f04ef12cb04cf158000000","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7cb7e4c138218f0dee70300d819b90b245256d1372a9315dd8759ef7a6396a2c"}]}