{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\IVaultProtocol.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n//solhint-disable func-order\r\ncontract IVaultProtocol {\r\n    event DepositToVault(address indexed _user, address indexed _token, uint256 _amount);\r\n    event WithdrawFromVault(address indexed _user, address indexed _token, uint256 _amount);\r\n    event WithdrawRequestCreated(address indexed _user, address indexed _token, uint256 _amount);\r\n    event DepositByOperator(uint256 _amount);\r\n    event WithdrawByOperator(uint256 _amount);\r\n    event WithdrawRequestsResolved(uint256 _totalDeposit, uint256 _totalWithdraw);\r\n    event StrategyRegistered(address indexed _vault, address indexed _strategy, string _id);\r\n\r\n    event Claimed(address indexed _vault, address indexed _user, address _token, uint256 _amount);\r\n    event DepositsCleared(address indexed _vault);\r\n    event RequestsCleared(address indexed _vault);\r\n\r\n\r\n    function registerStrategy(address _strategy) external;\r\n\r\n    function depositToVault(address _user, address _token, uint256 _amount) external;\r\n    function depositToVault(address _user, address[] calldata  _tokens, uint256[] calldata _amounts) external;\r\n\r\n    function withdrawFromVault(address _user, address _token, uint256 _amount) external;\r\n    function withdrawFromVault(address _user, address[] calldata  _tokens, uint256[] calldata _amounts) external;\r\n\r\n    function operatorAction(address _strategy) external returns(uint256, uint256);\r\n    function operatorActionOneCoin(address _strategy, address _token) external returns(uint256, uint256);\r\n    function clearOnHoldDeposits() external;\r\n    function clearWithdrawRequests() external;\r\n    function setRemainder(uint256 _amount, uint256 _index) external;\r\n\r\n    function quickWithdraw(address _user, address[] calldata _tokens, uint256[] calldata _amounts) external;\r\n    function quickWithdrawStrategy() external view returns(address);\r\n\r\n    function claimRequested(address _user) external;\r\n\r\n    function normalizedBalance() external returns(uint256);\r\n    function normalizedBalance(address _strategy) external returns(uint256);\r\n    function normalizedVaultBalance() external view returns(uint256);\r\n\r\n    function supportedTokens() external view returns(address[] memory);\r\n    function supportedTokensCount() external view returns(uint256);\r\n\r\n    function isStrategyRegistered(address _strategy) external view returns(bool);\r\n    function registeredStrategies() external view returns(address[] memory);\r\n\r\n    function isTokenRegistered(address _token) external view returns (bool);\r\n    function tokenRegisteredInd(address _token) external view returns(uint256);\r\n\r\n    function totalClaimableAmount(address _token) external view returns (uint256);\r\n    function claimableAmount(address _user, address _token) external view returns (uint256);\r\n\r\n    function amountOnHold(address _user, address _token) external view returns (uint256);\r\n\r\n    function amountRequested(address _user, address _token) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract MinterRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isMinter(sender)) {\r\n            _addMinter(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\r\n    function initialize(address sender) public initializer {\r\n        MinterRole.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Initializable, Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\interfaces\\token\\IPoolTokenBalanceChangeRecipient.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IPoolTokenBalanceChangeRecipient {\r\n    function poolTokenBalanceChanged(address user) external; \r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\common\\Base.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\core\\ModuleNames.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_SAVINGS           = \"savings\";\r\n    string internal constant MODULE_INVESTING         = \"investing\";\r\n    string internal constant MODULE_STAKING_AKRO      = \"staking\";\r\n    string internal constant MODULE_STAKING_ADEL      = \"stakingAdel\";\r\n    string internal constant MODULE_DCA               = \"dca\";\r\n    string internal constant MODULE_REWARD            = \"reward\";\r\n    string internal constant MODULE_REWARD_DISTR      = \"rewardDistributions\";\r\n    string internal constant MODULE_VAULT             = \"vault\";\r\n\r\n    // Pool tokens\r\n    string internal constant TOKEN_AKRO               = \"akro\";    \r\n    string internal constant TOKEN_ADEL               = \"adel\";    \r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant CONTRACT_RAY             = \"ray\";\r\n}\r\n\r\n// File: contracts\\common\\Module.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        // string memory error = string(abi.encodePacked(\"Module: requested module not found - \", module));\r\n        // require(moduleAddress != ZERO_ADDRESS, error);\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\token\\DistributionToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n//solhint-disable func-order\r\ncontract DistributionToken is ERC20, ERC20Mintable {\r\n    using SafeMath for uint256;\r\n    uint256 public constant DISTRIBUTION_AGGREGATION_PERIOD = 24*60*60;\r\n\r\n    event DistributionCreated(uint256 amount, uint256 totalSupply);\r\n    event DistributionsClaimed(address account, uint256 amount, uint256 fromDistribution, uint256 toDistribution);\r\n    event DistributionAccumulatorIncreased(uint256 amount);\r\n\r\n    struct Distribution {\r\n        uint256 amount;         // Amount of tokens being distributed during the event\r\n        uint256 totalSupply;    // Total supply before distribution\r\n    }\r\n\r\n    Distribution[] public distributions;                   // Array of all distributions\r\n    mapping(address => uint256) public nextDistributions;  // Map account to first distribution not yet processed\r\n\r\n    uint256 public nextDistributionTimestamp;      //Timestamp when next distribuition should be fired regardles of accumulated tokens\r\n    uint256 public distributionAccumulator;        //Tokens accumulated for next distribution\r\n\r\n    function distribute(uint256 amount) external onlyMinter {\r\n        distributionAccumulator = distributionAccumulator.add(amount);        \r\n        emit DistributionAccumulatorIncreased(amount);\r\n        _createDistributionIfReady();\r\n    }\r\n\r\n    function createDistribution() external onlyMinter {\r\n        require(distributionAccumulator > 0, \"DistributionToken: nothing to distribute\");\r\n        _createDistribution();\r\n    }\r\n\r\n    function claimDistributions(address account) external returns(uint256) {\r\n        _createDistributionIfReady();\r\n        uint256 amount = _updateUserBalance(account, distributions.length);\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n    \r\n    /**\r\n     * @notice Claims distributions and allows to specify how many distributions to process.\r\n     * This allows limit gas usage.\r\n     * One can do this for others\r\n     */\r\n    function claimDistributions(address account, uint256 toDistribution) external returns(uint256) {\r\n        require(toDistribution <= distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        require(nextDistributions[account] < toDistribution, \"DistributionToken: no distributions to claim\");\r\n        uint256 amount = _updateUserBalance(account, toDistribution);\r\n        if (amount > 0) userBalanceChanged(account);\r\n        return amount;\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts) external {\r\n        _createDistributionIfReady();\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], distributions.length);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external {\r\n        require(toDistribution <= distributions.length, \"DistributionToken: lastDistribution too hight\");\r\n        for (uint256 i=0; i < accounts.length; i++){\r\n            uint256 amount = _updateUserBalance(accounts[i], toDistribution);\r\n            if (amount > 0) userBalanceChanged(accounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Full balance of account includes:\r\n     * - balance of tokens account holds himself (0 for addresses of locking contracts)\r\n     * - balance of tokens locked in contracts\r\n     * - tokens not yet claimed from distributions\r\n     */\r\n    function fullBalanceOf(address account) public view returns(uint256){\r\n        if (account == address(this)) return 0;  //Token itself only holds tokens for others\r\n        uint256 distributionBalance = distributionBalanceOf(account);\r\n        uint256 unclaimed = calculateClaimAmount(account);\r\n        return distributionBalance.add(unclaimed);\r\n    }\r\n\r\n    /**\r\n     * @notice How many tokens are not yet claimed from distributions\r\n     * @param account Account to check\r\n     * @return Amount of tokens available to claim\r\n     */\r\n    function calculateUnclaimedDistributions(address account) public view returns(uint256) {\r\n        return calculateClaimAmount(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of tokens distributed to inital amount between startDistribution and nextDistribution\r\n     * @param fromDistribution index of first Distribution to start calculations\r\n     * @param toDistribution index of distribuition next to the last processed\r\n     * @param initialBalance amount of tokens before startDistribution\r\n     * @return amount of tokens distributed\r\n     */\r\n    function calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) public view returns(uint256) {\r\n        require(fromDistribution < toDistribution, \"DistributionToken: startDistribution is too high\");\r\n        require(toDistribution <= distributions.length, \"DistributionToken: nextDistribution is too high\");\r\n        return _calculateDistributedAmount(fromDistribution, toDistribution, initialBalance);\r\n    }\r\n\r\n    function nextDistribution() public view returns(uint256){\r\n        return distributions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Balance of account, which is counted for distributions\r\n     * It only represents already distributed balance.\r\n     * @dev This function should be overloaded to include balance of tokens stored in proposals\r\n     */\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        return balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Total supply which is counted for distributions\r\n     * It only represents already distributed tokens\r\n     * @dev This function should be overloaded to exclude tokens locked in loans\r\n     */\r\n    function distributionTotalSupply() public view returns(uint256){\r\n        return totalSupply();\r\n    }\r\n\r\n    // Override functions that change user balance\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(sender);\r\n        _updateUserBalance(recipient);\r\n        super._transfer(sender, recipient, amount);\r\n        userBalanceChanged(sender);\r\n        userBalanceChanged(recipient);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._mint(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        _updateUserBalance(account);\r\n        super._burn(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n\r\n    function _updateUserBalance(address account) internal returns(uint256) {\r\n        return _updateUserBalance(account, distributions.length);\r\n    }\r\n\r\n    function _updateUserBalance(address account, uint256 toDistribution) internal returns(uint256) {\r\n        uint256 fromDistribution = nextDistributions[account];\r\n        if (fromDistribution >= toDistribution) return 0;\r\n        uint256 distributionAmount = calculateClaimAmount(account, toDistribution);\r\n        if (distributionAmount == 0) return 0;\r\n        nextDistributions[account] = toDistribution;\r\n        super._transfer(address(this), account, distributionAmount);\r\n        emit DistributionsClaimed(account, distributionAmount, fromDistribution, toDistribution);\r\n        return distributionAmount;\r\n    }\r\n\r\n    function _createDistributionIfReady() internal {\r\n        if (!isReadyForDistribution()) return;\r\n        _createDistribution();\r\n    }\r\n    \r\n    function _createDistribution() internal {\r\n        uint256 currentTotalSupply = distributionTotalSupply();\r\n        distributions.push(Distribution({\r\n            amount:distributionAccumulator,\r\n            totalSupply: currentTotalSupply\r\n        }));\r\n        super._mint(address(this), distributionAccumulator); //Use super because we overloaded _mint in this contract and need old behaviour\r\n        emit DistributionCreated(distributionAccumulator, currentTotalSupply);\r\n\r\n        // Clear data for next distribution\r\n        distributionAccumulator = 0;\r\n        nextDistributionTimestamp = now.sub(now % DISTRIBUTION_AGGREGATION_PERIOD).add(DISTRIBUTION_AGGREGATION_PERIOD);\r\n    }\r\n\r\n    /**\r\n     * @dev This is a placeholder, which may be overrided to notify other contracts of PTK balance change\r\n     */\r\n    function userBalanceChanged(address /*account*/) internal {\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of account's tokens to be claimed from distributions\r\n     */\r\n    function calculateClaimAmount(address account) internal view returns(uint256) {\r\n        if (nextDistributions[account] >= distributions.length) return 0;\r\n        return calculateClaimAmount(account, distributions.length);\r\n    }\r\n\r\n    function calculateClaimAmount(address account, uint256 toDistribution) internal view returns(uint256) {\r\n        assert(toDistribution <= distributions.length);\r\n        return _calculateDistributedAmount(nextDistributions[account], toDistribution, distributionBalanceOf(account));\r\n    }\r\n\r\n    function _calculateDistributedAmount(uint256 fromDistribution, uint256 toDistribution, uint256 initialBalance) internal view returns(uint256) {\r\n        uint256 next = fromDistribution;\r\n        uint256 balance = initialBalance;\r\n        if (initialBalance == 0) return 0;\r\n        while (next < toDistribution) {\r\n            uint256 da = balance.mul(distributions[next].amount).div(distributions[next].totalSupply);\r\n            balance = balance.add(da);\r\n            next++;\r\n        }\r\n        return balance.sub(initialBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates if conditions for creating new distribution are met\r\n     */\r\n    function isReadyForDistribution() internal view returns(bool) {\r\n        return (distributionAccumulator > 0) && (now >= nextDistributionTimestamp);\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\token\\PoolToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolToken is Module, ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable, DistributionToken {\r\n\r\n    bool allowTransfers;\r\n\r\n    function initialize(address _pool, string memory poolName, string memory poolSymbol) public initializer {\r\n        Module.initialize(_pool);\r\n        ERC20Detailed.initialize(poolName, poolSymbol, 18);\r\n        ERC20Mintable.initialize(_msgSender());\r\n    }\r\n\r\n    function setAllowTransfers(bool _allowTransfers) public onlyOwner {\r\n        allowTransfers = _allowTransfers;\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20Burnable burnFrom to allow unlimited transfers by SavingsModule\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        if (isMinter(_msgSender())) {\r\n            //Skip decrease allowance\r\n            _burn(from, value);\r\n        }else{\r\n            super.burnFrom(from, value);\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        if( !allowTransfers && \r\n            (sender != address(this)) //transfers from *this* used for distributions\r\n        ){\r\n            revert(\"PoolToken: transfers between users disabled\");\r\n        }\r\n        super._transfer(sender, recipient, amount);\r\n    } \r\n\r\n    function userBalanceChanged(address account) internal {\r\n        IPoolTokenBalanceChangeRecipient rewardDistrModule = IPoolTokenBalanceChangeRecipient(getModuleAddress(MODULE_REWARD_DISTR));\r\n        rewardDistrModule.poolTokenBalanceChanged(account);\r\n    }\r\n\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        return (account == address(this))?0:super.distributionBalanceOf(account);\r\n    }\r\n\r\n    function distributionTotalSupply() public view returns(uint256) {\r\n        return super.distributionTotalSupply().sub(balanceOf(address(this))); \r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\token\\IOperableToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IOperableToken {\r\n    function increaseOnHoldValue(address _user, uint256 _amount) external;\r\n    function decreaseOnHoldValue(address _user, uint256 _amount) external;\r\n    function onHoldBalanceOf(address _user) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\modules\\token\\VaultPoolToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\ncontract VaultPoolToken is PoolToken, IOperableToken {\r\n\r\n    uint256 internal toBeMinted;\r\n\r\n    mapping(address => uint256) internal onHoldAmount;\r\n    uint256 totalOnHold;\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _createDistributionIfReady();\r\n        toBeMinted = amount;\r\n        _updateUserBalance(account);\r\n        toBeMinted = 0;\r\n        ERC20._mint(account, amount);\r\n        userBalanceChanged(account);\r\n    }\r\n\r\n    function increaseOnHoldValue(address _user, uint256 _amount) public onlyMinter {\r\n        onHoldAmount[_user] = onHoldAmount[_user].add(_amount);\r\n        totalOnHold = totalOnHold.add(_amount);\r\n    }\r\n\r\n    function decreaseOnHoldValue(address _user, uint256 _amount) public onlyMinter {\r\n        if (onHoldAmount[_user] >= _amount) {\r\n            _updateUserBalance(_user);\r\n\r\n            onHoldAmount[_user] = onHoldAmount[_user].sub(_amount);\r\n            if (distributions.length > 0 && nextDistributions[_user] < distributions.length) {\r\n                nextDistributions[_user] = distributions.length;\r\n            }\r\n            totalOnHold = totalOnHold.sub(_amount);\r\n\r\n            userBalanceChanged(_user);\r\n        }\r\n    }\r\n\r\n    function onHoldBalanceOf(address _user) public view returns (uint256) {\r\n        return onHoldAmount[_user];\r\n    }\r\n\r\n\r\n    function fullBalanceOf(address account) public view returns(uint256){\r\n        if (account == address(this)) return 0;  //Token itself only holds tokens for others\r\n        uint256 unclaimed = calculateClaimAmount(account);\r\n        return balanceOf(account).add(unclaimed);\r\n    }\r\n\r\n    function distributionBalanceOf(address account) public view returns(uint256) {\r\n        if (balanceOf(account).add(toBeMinted) <= onHoldAmount[account])\r\n            return 0;\r\n        return balanceOf(account).add(toBeMinted).sub(onHoldAmount[account]);\r\n    }\r\n\r\n    function distributionTotalSupply() public view returns(uint256){\r\n        return totalSupply().sub(totalOnHold);\r\n    }\r\n\r\n    function userBalanceChanged(address account) internal {\r\n        //Disable rewards for the vaults\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\savings\\IVaultSavings.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n//solhint-disable func-order\r\ncontract IVaultSavings {\r\n    event VaultRegistered(address protocol, address poolToken);\r\n    event YieldDistribution(address indexed poolToken, uint256 amount);\r\n    event DepositToken(address indexed protocol, address indexed token, uint256 dnAmount);\r\n    event Deposit(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\r\n    event WithdrawToken(address indexed protocol, address indexed token, uint256 dnAmount);\r\n    event Withdraw(address indexed protocol, address indexed user, uint256 nAmount, uint256 nFee);\r\n\r\n    function deposit(address[] calldata _protocols, address[] calldata _tokens, uint256[] calldata _dnAmounts) external returns(uint256[] memory);\r\n    function deposit(address _protocol, address[] calldata _tokens, uint256[] calldata _dnAmounts) external returns(uint256);\r\n    function withdraw(address _vaultProtocol, address[] calldata _tokens, uint256[] calldata _amounts, bool isQuick) external returns(uint256);\r\n\r\n    function poolTokenByProtocol(address _protocol) external view returns(address);\r\n    function supportedVaults() public view returns(address[] memory);\r\n    function isVaultRegistered(address _protocol) public view returns(bool);\r\n\r\n    function registerVault(IVaultProtocol protocol, VaultPoolToken poolToken) external;\r\n\r\n    //function quickWithdraw(address _vaultProtocol, address[] calldata _tokens, uint256[] calldata _amounts) external returns(uint256);\r\n    function handleOperatorActions(address _vaultProtocol, address _strategy, address _token) external;\r\n\r\n    function claimAllRequested(address _vaultProtocol) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\IDefiStrategy.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract IDefiStrategy { \r\n    /**\r\n     * @notice Transfer tokens from sender to DeFi protocol\r\n     * @param token Address of token\r\n     * @param amount Value of token to deposit\r\n     * @return new balances of each token\r\n     */\r\n    function handleDeposit(address token, uint256 amount) external;\r\n\r\n    function handleDeposit(address[] calldata tokens, uint256[] calldata amounts) external;\r\n\r\n    function withdraw(address beneficiary, address token, uint256 amount) external;\r\n\r\n    function withdraw(address beneficiary, uint256[] calldata amounts) external;\r\n\r\n    function setVault(address _vault) external;\r\n\r\n    function normalizedBalance() external returns(uint256);\r\n    function balanceOf(address token) external returns(uint256);\r\n    function balanceOfAll() external returns(uint256[] memory balances);\r\n\r\n    function getStrategyId() external view returns(string memory);\r\n}\r\n\r\n// File: contracts\\modules\\defi\\DefiOperatorRole.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract DefiOperatorRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event DefiOperatorAdded(address indexed account);\r\n    event DefiOperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isDefiOperator(sender)) {\r\n            _addDefiOperator(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyDefiOperator() {\r\n        require(isDefiOperator(_msgSender()), \"DefiOperatorRole: caller does not have the DefiOperator role\");\r\n        _;\r\n    }\r\n\r\n    function addDefiOperator(address account) public onlyDefiOperator {\r\n        _addDefiOperator(account);\r\n    }\r\n\r\n    function renounceDefiOperator() public {\r\n        _removeDefiOperator(_msgSender());\r\n    }\r\n\r\n    function isDefiOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    function _addDefiOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit DefiOperatorAdded(account);\r\n    }\r\n\r\n    function _removeDefiOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit DefiOperatorRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\utils\\CalcUtils.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\nlibrary CalcUtils {\r\n     using SafeMath for uint256;\r\n\r\n    function normalizeAmount(address coin, uint256 amount) internal view returns(uint256) {\r\n        uint8 decimals = ERC20Detailed(coin).decimals();\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.div(uint256(10)**(decimals-18));\r\n        } else if (decimals < 18) {\r\n            return amount.mul(uint256(10)**(18 - decimals));\r\n        }\r\n    }\r\n\r\n    function denormalizeAmount(address coin, uint256 amount) internal view returns(uint256) {\r\n        uint256 decimals = ERC20Detailed(coin).decimals();\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.mul(uint256(10)**(decimals-18));\r\n        } else if (decimals < 18) {\r\n            return amount.div(uint256(10)**(18 - decimals));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\defi\\VaultProtocol.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultProtocol is Module, IVaultProtocol, DefiOperatorRole {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address[] internal strategies;\r\n    address[] internal registeredVaultTokens;\r\n\r\n    //deposits waiting for the defi operator's actions\r\n    mapping(address => uint256[]) internal balancesOnHold;\r\n    address[] internal usersDeposited; //for operator's conveniency\r\n    uint256[] lastProcessedDeposits;\r\n\r\n    //Withdraw requests waiting for the defi operator's actions\r\n    mapping(address => uint256[]) internal balancesRequested;\r\n    address[] internal usersRequested; //for operator's conveniency\r\n    uint256[] lastProcessedRequests;\r\n\r\n    mapping(address => uint256[]) internal balancesToClaim;\r\n    uint256[] internal claimableTokens;\r\n\r\n    address public quickStrategy;\r\n\r\n    //Quick disable of direct withdraw\r\n    bool internal availableEnabled;\r\n    uint256[] internal remainders;\r\n\r\n// ------\r\n// Settings methods\r\n// ------\r\n    function initialize(address _pool, address[] memory tokens) public initializer {\r\n        Module.initialize(_pool);\r\n        DefiOperatorRole.initialize(_msgSender());\r\n\r\n        registeredVaultTokens = new address[](tokens.length);\r\n        claimableTokens = new uint256[](tokens.length);\r\n        lastProcessedRequests = new uint256[](tokens.length);\r\n        lastProcessedDeposits = new uint256[](tokens.length);\r\n\r\n        remainders = new uint256[](tokens.length);\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            registeredVaultTokens[i] = tokens[i];\r\n        }\r\n\r\n        availableEnabled = false;\r\n    }\r\n\r\n    function registerStrategy(address _strategy) public onlyDefiOperator {\r\n        strategies.push(_strategy);\r\n        IDefiStrategy(_strategy).setVault(address(this));\r\n\r\n        emit StrategyRegistered(address(this), _strategy, IDefiStrategy(_strategy).getStrategyId());\r\n    }\r\n\r\n    function setQuickWithdrawStrategy(address _strategy) public onlyDefiOperator {\r\n        require(isStrategyRegistered(_strategy), \"Strategy is not registered\");\r\n        quickStrategy = _strategy;\r\n    }\r\n\r\n    function setRemainder(uint256 _amount, uint256 _index) public onlyDefiOperator {\r\n        require(_index < supportedTokensCount());\r\n        remainders[_index] = _amount;\r\n    }\r\n\r\n    function setAvailableEnabled(bool value) public onlyDefiOperator {\r\n        availableEnabled = value;\r\n    }\r\n\r\n// ------\r\n// Funds flow interface (for defiOperator)\r\n// ------\r\n    function depositToVault(address _user, address _token, uint256 _amount) public onlyDefiOperator {\r\n        require(_user != address(0), \"Incorrect user address\");\r\n        require(_token != address(0), \"Incorrect token address\");\r\n        require(_amount > 0, \"No tokens to be deposited\");\r\n\r\n        uint256 ind;\r\n        bool hasToken;\r\n\r\n        (hasToken, ind) = tokenInfo(_token, registeredVaultTokens);\r\n        require(hasToken, \"Token is not registered in the vault\");\r\n\r\n        //At this point token is transfered from VaultSavings\r\n\r\n        if (balancesOnHold[_user].length == 0) {\r\n            balancesOnHold[_user] = new uint256[](supportedTokensCount());\r\n        }\r\n        usersDeposited.push(_user);\r\n        balancesOnHold[_user][ind] = balancesOnHold[_user][ind].add(_amount);\r\n\r\n        IVaultSavings vaultSavings = IVaultSavings(getModuleAddress(MODULE_VAULT));\r\n        address vaultPoolToken = vaultSavings.poolTokenByProtocol(address(this));\r\n        IOperableToken(vaultPoolToken).increaseOnHoldValue(_user, CalcUtils.normalizeAmount(_token, _amount));\r\n\r\n        emit DepositToVault(_user, _token, _amount);\r\n    }\r\n\r\n    function depositToVault(address _user, address[] memory  _tokens, uint256[] memory _amounts) public onlyDefiOperator {\r\n        require(_tokens.length > 0, \"No tokens to be deposited\");\r\n        require(_tokens.length == _amounts.length, \"Incorrect amounts\");\r\n\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            depositToVault(_user, _tokens[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawFromVault(address _user, address _token, uint256 _amount) public onlyDefiOperator {\r\n        require(_user != address(0), \"Incorrect user address\");\r\n        require(_token != address(0), \"Incorrect token address\");\r\n\r\n        if (_amount == 0) return;\r\n\r\n        uint256 indReg;\r\n        bool hasToken;\r\n\r\n        (hasToken, indReg) = tokenInfo(_token, registeredVaultTokens);\r\n        require(hasToken, \"Token is not registered in the vault\");\r\n\r\n\r\n        if (availableEnabled && (IERC20(_token).balanceOf(address(this)).sub(claimableTokens[indReg]) >= _amount.add(remainders[indReg]))) {\r\n            IERC20(_token).transfer(_user, _amount);\r\n\r\n            emit WithdrawFromVault(_user, _token, _amount);\r\n\r\n            decreaseOnHoldDeposit(_user, _token, _amount);\r\n        }\r\n        else {\r\n            if (balancesRequested[_user].length == 0) {\r\n                balancesRequested[_user] = new uint256[](supportedTokensCount());\r\n            }\r\n            usersRequested.push(_user);\r\n            balancesRequested[_user][indReg] = balancesRequested[_user][indReg].add(_amount);\r\n\r\n            emit WithdrawRequestCreated(_user, _token, _amount);\r\n        }\r\n    }\r\n\r\n    function withdrawFromVault(address _user, address[] memory  _tokens, uint256[] memory _amounts) public onlyDefiOperator {\r\n        require(_tokens.length > 0, \"No tokens to be withdrawn\");\r\n        require(_tokens.length == _amounts.length, \"Incorrect amounts\");\r\n\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            withdrawFromVault(_user, _tokens[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n        function quickWithdraw(address _user, address[] memory _tokens, uint256[] memory _amounts) public onlyDefiOperator {\r\n        require(quickStrategy != address(0), \"No strategy for quick withdraw\");\r\n        require(_tokens.length == 1 || _amounts.length == supportedTokensCount(), \"Incorrect number of tokens\");\r\n\r\n        if (_tokens.length == 1) {\r\n            IDefiStrategy(quickStrategy).withdraw(_user, _tokens[0], _amounts[0]);\r\n        }\r\n        else {\r\n            //require correct order\r\n            IDefiStrategy(quickStrategy).withdraw(_user, _amounts);\r\n        }\r\n    }\r\n\r\n    function claimRequested(address _user) public {\r\n        if (balancesToClaim[_user].length == 0) return;\r\n        for (uint256 i = 0; i < balancesToClaim[_user].length; i++) {\r\n            address token = registeredVaultTokens[i];\r\n            uint256 amount = balancesToClaim[_user][i];\r\n\r\n            if (amount > 0) {\r\n                IERC20(token).transfer(_user, amount);\r\n                claimableTokens[i] = claimableTokens[i].sub(amount);\r\n                emit Claimed(address(this), _user, token, amount);\r\n            }\r\n        }\r\n        delete balancesToClaim[_user];\r\n    }\r\n\r\n// ------\r\n// Operator interface\r\n// ------\r\n    function operatorAction(address _strategy) public onlyDefiOperator returns(uint256, uint256) {\r\n        require(isStrategyRegistered(_strategy), \"Strategy is not registered\");\r\n        //Yield distribution step based on actual deposits (excluding on-hold ones)\r\n        // should be performed from the SavingsModule before other operator's actions\r\n\r\n        processOnHoldDeposit();\r\n        //On-hold records can be cleared now\r\n\r\n        address _user;\r\n        uint256[] memory withdrawAmounts = new uint256[](registeredVaultTokens.length);\r\n        uint256 lastProcessedRequest = minProcessed(lastProcessedRequests);\r\n        uint256 amountToWithdraw;\r\n\r\n        for (uint256 i = lastProcessedRequest; i < usersRequested.length; i++) {\r\n            _user = usersRequested[i];\r\n            for (uint256 j = 0; j < balancesRequested[_user].length; j++) {\r\n                amountToWithdraw = requestToClaim(_user, j);\r\n                if (amountToWithdraw > 0) {\r\n                    withdrawAmounts[j] = withdrawAmounts[j].add(amountToWithdraw);\r\n                }\r\n            }\r\n        }\r\n        if (usersRequested.length > lastProcessedRequest) {\r\n            setProcessed(lastProcessedRequests, usersRequested.length);\r\n        }\r\n        //Withdraw requests records can be cleared now\r\n\r\n        uint256[] memory depositAmounts = new uint256[](registeredVaultTokens.length);\r\n        uint256 totalDeposit = 0;\r\n        uint256 totalWithdraw = 0;\r\n        for (uint256 i = 0; i < registeredVaultTokens.length; i++) {\r\n            depositAmounts[i] = IERC20(registeredVaultTokens[i]).balanceOf(address(this)).sub(claimableTokens[i]);\r\n            depositAmounts[i] = handleRemainders(depositAmounts[i], i);\r\n\r\n            IERC20(registeredVaultTokens[i]).approve(address(_strategy), depositAmounts[i]);\r\n\r\n            totalDeposit = totalDeposit.add(CalcUtils.normalizeAmount(registeredVaultTokens[i], depositAmounts[i]));\r\n\r\n            totalWithdraw = totalWithdraw.add(CalcUtils.normalizeAmount(registeredVaultTokens[i], withdrawAmounts[i]));\r\n        }\r\n        //one of two things should happen for the same token: deposit or withdraw\r\n        //simultaneous deposit and withdraw are applied to different tokens\r\n        if (totalDeposit > 0) {\r\n            IDefiStrategy(_strategy).handleDeposit(registeredVaultTokens, depositAmounts);\r\n            emit DepositByOperator(totalDeposit);\r\n        }\r\n\r\n        if (totalWithdraw > 0) {\r\n            IDefiStrategy(_strategy).withdraw(address(this), withdrawAmounts);\r\n            emit WithdrawByOperator(totalWithdraw);\r\n            //All just withdraw funds mark as claimable\r\n            for (uint256 i = 0; i < claimableTokens.length; i++) {\r\n                claimableTokens[i] = claimableTokens[i].add(withdrawAmounts[i]);\r\n            }\r\n        }\r\n        emit WithdrawRequestsResolved(totalDeposit, totalWithdraw);\r\n        return (totalDeposit, totalWithdraw);\r\n    }\r\n\r\n    function operatorActionOneCoin(address _strategy, address _token) public onlyDefiOperator returns(uint256, uint256) {\r\n        require(isStrategyRegistered(_strategy), \"Strategy is not registered\");\r\n\r\n        bool isReg;\r\n        uint256 ind;\r\n\r\n        (isReg, ind) = tokenInfo(_token, registeredVaultTokens);\r\n        require(isReg, \"Token is not supported\");\r\n\r\n        processOnHoldDeposit(ind);\r\n        //On-hold records can be cleared now\r\n\r\n        address _user;\r\n        uint256 totalWithdraw = 0;\r\n        uint256 amountToWithdraw;\r\n        for (uint256 i = lastProcessedRequests[ind]; i < usersRequested.length; i++) {\r\n            _user = usersRequested[i];\r\n\r\n            amountToWithdraw = requestToClaim(_user, ind);\r\n            \r\n            if (amountToWithdraw > 0) {\r\n                totalWithdraw = totalWithdraw.add(amountToWithdraw);\r\n            }\r\n        }\r\n        lastProcessedRequests[ind] = usersRequested.length;\r\n        //Withdraw requests records can be cleared now\r\n\r\n        uint256 totalDeposit = IERC20(_token).balanceOf(address(this)).sub(claimableTokens[ind]);\r\n        totalDeposit = handleRemainders(totalDeposit, ind);\r\n\r\n        IERC20(_token).approve(address(_strategy), totalDeposit);\r\n\r\n        //one of two things should happen for the same token: deposit or withdraw\r\n        //simultaneous deposit and withdraw are applied to different tokens\r\n        if (totalDeposit > 0) {\r\n            IDefiStrategy(_strategy).handleDeposit(_token, totalDeposit);\r\n            emit DepositByOperator(totalDeposit);\r\n        }\r\n\r\n        if (totalWithdraw > 0) {\r\n            IDefiStrategy(_strategy).withdraw(address(this), _token, totalWithdraw);\r\n            emit WithdrawByOperator(totalWithdraw);\r\n            //All just withdraw funds mark as claimable\r\n            claimableTokens[ind] = claimableTokens[ind].add(totalWithdraw);\r\n        }\r\n        emit WithdrawRequestsResolved(totalDeposit, totalWithdraw);\r\n        return (CalcUtils.normalizeAmount(registeredVaultTokens[ind], totalDeposit),\r\n                CalcUtils.normalizeAmount(registeredVaultTokens[ind], totalWithdraw));\r\n    }\r\n\r\n    function clearOnHoldDeposits() public onlyDefiOperator {\r\n        require(minProcessed(lastProcessedDeposits) == usersDeposited.length, \"There are unprocessed deposits\");\r\n\r\n        address _user;\r\n        for (uint256 i = 0; i < usersDeposited.length; i++) {\r\n            //We can delete the on-hold records now - the real balances will be deposited to protocol\r\n            _user = usersDeposited[i];\r\n            balancesOnHold[_user].length = 0;\r\n        }\r\n        delete usersDeposited;\r\n        setProcessed(lastProcessedDeposits, 0);\r\n        emit DepositsCleared(address(this));\r\n    }\r\n\r\n    function clearWithdrawRequests() public onlyDefiOperator {\r\n        require(minProcessed(lastProcessedRequests) == usersRequested.length, \"There are unprocessed requests\");\r\n\r\n        address _user;\r\n        for (uint256 i = 0; i < usersRequested.length; i++) {\r\n            _user = usersRequested[i];\r\n            balancesRequested[_user].length = 0;\r\n        }\r\n        delete usersRequested;\r\n        setProcessed(lastProcessedRequests, 0);\r\n        emit RequestsCleared(address(this));\r\n    }\r\n\r\n\r\n// ------\r\n// Balances\r\n// ------\r\n    function normalizedBalance(address _strategy) public returns(uint256) {\r\n        require(isStrategyRegistered(_strategy), \"Strategy is not registered\");\r\n        return IDefiStrategy(_strategy).normalizedBalance();\r\n    }\r\n\r\n    function normalizedBalance() public returns(uint256) {\r\n        uint256 total;\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            total = total.add(IDefiStrategy(strategies[i]).normalizedBalance());\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function normalizedVaultBalance() public view returns(uint256) {\r\n        uint256 summ;\r\n        for (uint256 i=0; i < registeredVaultTokens.length; i++) {\r\n            uint256 balance = IERC20(registeredVaultTokens[i]).balanceOf(address(this));\r\n            summ = summ.add(CalcUtils.normalizeAmount(registeredVaultTokens[i], balance));\r\n        }\r\n        return summ;\r\n    }\r\n\r\n    function totalClaimableAmount(address _token) public view returns (uint256) {\r\n        uint256 indReg = tokenRegisteredInd(_token);\r\n\r\n        return claimableTokens[indReg];\r\n    }\r\n\r\n    function claimableAmount(address _user, address _token) public view returns (uint256) {\r\n        return tokenAmount(balancesToClaim, _user, _token);\r\n    }\r\n\r\n    function amountOnHold(address _user, address _token) public view returns (uint256) {\r\n        return tokenAmount(balancesOnHold, _user, _token);\r\n    }\r\n\r\n    function amountRequested(address _user, address _token) public view returns (uint256) {\r\n        return tokenAmount(balancesRequested, _user, _token);\r\n    }\r\n\r\n// ------\r\n// Getters and checkers\r\n// ------\r\n    function quickWithdrawStrategy() public view returns(address) {\r\n        return quickStrategy;\r\n    }\r\n\r\n    function getRemainder(uint256 _index) public  view returns(uint256) {\r\n        require(_index < supportedTokensCount());\r\n        return remainders[_index];\r\n    }\r\n\r\n    function supportedTokens() public view returns(address[] memory) {\r\n        return registeredVaultTokens;\r\n    }\r\n\r\n    function supportedTokensCount() public view returns(uint256) {\r\n        return registeredVaultTokens.length;\r\n    }\r\n\r\n    function isStrategyRegistered(address _strategy) public view returns(bool) {\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            if (strategies[i] == _strategy) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function registeredStrategies() public view returns(address[] memory) {\r\n        return strategies;\r\n    }\r\n\r\n    function isTokenRegistered(address _token) public view returns (bool) {\r\n        bool isReg = false;\r\n        for (uint i = 0; i < registeredVaultTokens.length; i++) {\r\n            if (registeredVaultTokens[i] == _token) {\r\n                isReg = true;\r\n                break;\r\n            }\r\n        }\r\n        return isReg;\r\n    }\r\n\r\n    function tokenRegisteredInd(address _token) public view returns (uint256) {\r\n        uint256 ind = 0;\r\n        for (uint i = 0; i < registeredVaultTokens.length; i++) {\r\n            if (registeredVaultTokens[i] == _token) {\r\n                ind = i;\r\n                break;\r\n            }\r\n        }\r\n        return ind;\r\n    }\r\n\r\n// ------\r\n// Internal helpers\r\n// ------\r\n    function tokenAmount(mapping(address => uint256[]) storage _amounts, address _user, address _token) internal view returns(uint256) {\r\n        uint256 ind = tokenRegisteredInd(_token);\r\n        if (_amounts[_user].length == 0)\r\n            return 0;\r\n        else\r\n            return _amounts[_user][ind];\r\n    }\r\n\r\n    function tokenInfo(address _token, address[] storage tokensArr) internal view returns (bool, uint256) {\r\n        uint256 ind = 0;\r\n        bool isToken = false;\r\n        for (uint i = 0; i < tokensArr.length; i++) {\r\n            if (tokensArr[i] == _token) {\r\n                ind = i;\r\n                isToken = true;\r\n                break;\r\n            }\r\n        }\r\n        return (isToken, ind);\r\n    }\r\n\r\n    function processOnHoldDeposit() internal {\r\n        IVaultSavings vaultSavings = IVaultSavings(getModuleAddress(MODULE_VAULT));\r\n        IOperableToken vaultPoolToken = IOperableToken(vaultSavings.poolTokenByProtocol(address(this)));\r\n\r\n        address _user;\r\n        uint256 lastProcessedDeposit = minProcessed(lastProcessedDeposits);\r\n        for (uint256 i = lastProcessedDeposit; i < usersDeposited.length; i++) {\r\n            //We can delete the on-hold records now - the real balances will be deposited to protocol\r\n            _user = usersDeposited[i];\r\n            for (uint256 j = 0; j < balancesOnHold[_user].length; j++) {\r\n                if (balancesOnHold[_user][j] > 0) {\r\n                    vaultPoolToken.decreaseOnHoldValue(_user, CalcUtils.normalizeAmount(registeredVaultTokens[j], balancesOnHold[_user][j]));\r\n                    balancesOnHold[_user][j] = 0;\r\n                }\r\n            }\r\n        }\r\n        if (usersDeposited.length > lastProcessedDeposit) {\r\n            setProcessed(lastProcessedDeposits, usersDeposited.length);\r\n        }\r\n    }\r\n\r\n    function processOnHoldDeposit(uint256 coinNum) internal {\r\n        require(coinNum < supportedTokensCount(), \"Incorrect coin index\");\r\n        IVaultSavings vaultSavings = IVaultSavings(getModuleAddress(MODULE_VAULT));\r\n        IOperableToken vaultPoolToken = IOperableToken(vaultSavings.poolTokenByProtocol(address(this)));\r\n\r\n        address _user;\r\n        for (uint256 i = lastProcessedDeposits[coinNum]; i < usersDeposited.length; i++) {\r\n            //We can delete the on-hold records now - the real balances will be deposited to protocol\r\n            _user = usersDeposited[i];\r\n            if (balancesOnHold[_user][coinNum] > 0) {\r\n                vaultPoolToken.decreaseOnHoldValue(_user, CalcUtils.normalizeAmount(registeredVaultTokens[coinNum], balancesOnHold[_user][coinNum]));\r\n                balancesOnHold[_user][coinNum] = 0;\r\n            }\r\n        }\r\n        if (usersDeposited.length > lastProcessedDeposits[coinNum])\r\n            lastProcessedDeposits[coinNum] = usersDeposited.length;\r\n    }\r\n\r\n    function decreaseOnHoldDeposit(address _user, address _token, uint256 _amount) internal {\r\n        uint256 ind = tokenRegisteredInd(_token);\r\n\r\n        if (balancesOnHold[_user].length != 0) {\r\n            if (balancesOnHold[_user][ind] > _amount) {\r\n                balancesOnHold[_user][ind] = balancesOnHold[_user][ind].sub(_amount);\r\n            }\r\n            else {\r\n                balancesOnHold[_user][ind] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addClaim(address _user, address _token, uint256 _amount) internal {\r\n        uint256 ind = tokenRegisteredInd(_token);\r\n\r\n        if (balancesToClaim[_user].length == 0) {\r\n            balancesToClaim[_user] = new uint256[](supportedTokensCount());\r\n        }\r\n        balancesToClaim[_user][ind] = balancesToClaim[_user][ind].add(_amount);\r\n    }\r\n\r\n    function requestToClaim(address _user, uint256 _ind) internal returns(uint256) {\r\n        uint256 amount = balancesRequested[_user][_ind];\r\n        address token = registeredVaultTokens[_ind];\r\n        uint256 amountToWithdraw;\r\n        uint256 tokenBalance;\r\n        if (amount > 0) {\r\n            addClaim(_user, token, amount);\r\n                    \r\n            //move tokens to claim if there is a liquidity\r\n            tokenBalance = IERC20(token).balanceOf(address(this)).sub(claimableTokens[_ind]);\r\n            tokenBalance = handleRemainders(tokenBalance, _ind);\r\n\r\n            if (tokenBalance >= amount) {\r\n                claimableTokens[_ind] = claimableTokens[_ind].add(amount);\r\n            }\r\n            else {\r\n                if (tokenBalance > 0) {\r\n                    claimableTokens[_ind] = claimableTokens[_ind].add(tokenBalance);\r\n                    amountToWithdraw = amount.sub(tokenBalance);\r\n                }\r\n                else {\r\n                    amountToWithdraw = amount;\r\n                }\r\n            }\r\n\r\n            balancesRequested[_user][_ind] = 0;\r\n        }\r\n        return amountToWithdraw;\r\n    }\r\n\r\n    function setProcessed(uint256[] storage processedValues, uint256 value) internal {\r\n        for (uint256 i = 0; i < processedValues.length; i++) {\r\n            processedValues[i] = value;\r\n        }\r\n    }\r\n\r\n    function minProcessed(uint256[] storage processedValues) internal view returns(uint256) {\r\n        uint256 min = processedValues[0];\r\n        for (uint256 i = 1; i < processedValues.length; i++) {\r\n            if (processedValues[i] < min) {\r\n                min = processedValues[i];\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    function handleRemainders(uint256 _amount, uint256 _ind) internal view returns(uint256) {\r\n        if (_amount >= remainders[_ind]) {\r\n            return _amount.sub(remainders[_ind]);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DefiOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DefiOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositByOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"DepositsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"RequestsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"StrategyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawByOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequestsResolved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDefiOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"amountOnHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"amountRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimRequested\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearOnHoldDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearWithdrawRequests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRemainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDefiOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"isStrategyRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"normalizedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"normalizedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"normalizedVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"operatorAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"operatorActionOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quickStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"quickWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quickWithdrawStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"registerStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registeredStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceDefiOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAvailableEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setQuickWithdrawStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setRemainder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenRegisteredInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultProtocol","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7e4ec3841bc4e671a5f8e2e5332d02c0425352ef3817d65ad479d3a7b49b460d"}]}