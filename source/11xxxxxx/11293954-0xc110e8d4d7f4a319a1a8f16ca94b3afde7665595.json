{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n// -----------------------------------------------------//\r\n// Symbol : MYL                                         //\r\n// Name : My Lotto Coin                                 //\r\n// Total supply: 100000000                              //\r\n// Decimals :18                                         //\r\n// Token Price : 10000000000000000                      //\r\n// Purchase Token Amount : 10000000000000000000         //\r\n//------------------------------------------------------//\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event EtherTransfer(address toAddress, uint256 amount);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MyLotto is IERC20 {\r\n    using SafeMath for uint256;\r\n    address private _owner;                                 // Variable for Owner of the Contract.\r\n    string private _name;                                   // Variable for Name of the token.\r\n    string private _symbol;                                 // Variable for symbol of the token.\r\n    uint8 private _decimals;                                // variable to maintain decimal precision of the token.\r\n    uint256 private _totalSupply;                           // Variable for total supply of token.\r\n    uint256 private _ticketPrice;                           // Variable for price of each ticket (set as 0.01 eth)\r\n    uint256 private _purchaseTokenAmount;                   // variable for Amount of tokens per ticket purchase (set as 10 lotto)\r\n    address private _buyerPoolAddress;                      // Variable for pool address for tokens for ticket purchase\r\n    \r\n    uint256 public airdropTokenCount = 0;                   // Variable for token airdrop count\r\n    uint256 public airdropETHCount = 0;                     // Variable for ETH airdrop count\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    constructor (string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, uint256 ticketPrice, uint256 purchaseTokenAmount, address buyerPoolAddress, address owner) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply*(10**uint256(decimals));\r\n        _balances[owner] = _totalSupply;\r\n        _ticketPrice =ticketPrice;\r\n        _purchaseTokenAmount = purchaseTokenAmount;\r\n        _buyerPoolAddress = buyerPoolAddress;\r\n        _owner = owner;\r\n    }\r\n\r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n    \r\n    // modifier onlyairdropAddress(){\r\n    //     require(_airdropETHAddress,\"\");\r\n    //     _;\r\n    // }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * View only functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * Transfer, allow, mint, airdrop and burn functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n            _transfer(msg.sender, to, value);\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n             _transfer(from, to, value);\r\n             _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n             return true;\r\n    }\r\n\r\n\r\n     /**\r\n      * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n      * @param _addresses array of address in serial order\r\n      * @param _amount amount in serial order with respect to address array\r\n      */\r\n    function airdropToken(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\r\n          require(_addresses.length == _amount.length,\"Invalid Array\");\r\n          uint256 count = _addresses.length;\r\n          for (uint256 i = 0; i < count; i++){\r\n               _transfer(msg.sender, _addresses[i], _amount[i]);\r\n               airdropTokenCount = airdropTokenCount + 1;\r\n          }\r\n          return true;\r\n    }\r\n    \r\n    /**\r\n      * @dev Airdrop function to airdrop ETH. \r\n      * @param _toAddresses array of address in serial order\r\n      * @param _amount amount in serial order with respect to address array\r\n      */\r\n    function airdropEther(address payable[] memory _toAddresses, uint256[] memory _amount) public payable returns (bool) {\r\n        require(_toAddresses.length == _amount.length,\"Invalid Array length, Please Try Again!!!\");\r\n        uint256 total = 0;\r\n        for(uint256 j = 0; j < _amount.length; j++) {\r\n            total = total.add(_amount[j]);\r\n        }\r\n        require(total <= msg.value,\"Invalid Amount, Please try again!!!\");\r\n        for (uint256 i = 0; i < _toAddresses.length; i++) {\r\n            require(_toAddresses[i] != address(0),\"Invalid Address, Please try again\");\r\n            _toAddresses[i].transfer(_amount[i]);\r\n            emit EtherTransfer(_toAddresses[i], _amount[i]);\r\n            airdropETHCount = airdropETHCount + 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0),\"Invalid to address\");\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0),\"Invalid address\");\r\n        require(owner != address(0),\"Invalid address\");\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0.\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0),\"Invalid account\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public onlyOwner{\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    //Contract for managing business logic for this application \r\n    \r\n    mapping (uint256 => address[]) private allAddressList;                                      //list of all address participating in a saleId\r\n    mapping (uint256 => address[]) private winner;                                              //winner address for a saleId\r\n    mapping (uint256 => uint256) private winningPowerBallNumber;                                //winning powerball number by saleId\r\n    mapping (uint256 => mapping (address => uint256[])) private ticketNumberByAddress;          //user ticket number for a saleId\r\n    mapping (uint256 => mapping (uint256 => address[])) private addressesByTicketNumber;        //list of addresses for ticketId\r\n    mapping (uint256 => mapping (address => uint256)) private totalSaleAmountByAddAndSaleID;    //list of addresses for ticketId\r\n    mapping (uint256 => uint256) private totalSaleAmount;                                       //total collection for a saleId\r\n    mapping (uint256 => uint256[]) private winningAmount;                                       //winning price for a saleId\r\n    mapping (uint256 => uint256) private saleStartTimeStamp;                                    //start timestamp for a saleId\r\n    mapping (uint256 => uint256) private saleEndTimeStamp;                                      //end timestamp for a  saleId\r\n    mapping (uint256 => uint256) private saleRunningStatus;                                     //sale running status for a saleId\r\n    mapping (uint256 => uint256[]) private winningNumber;                                       //winning lottery number for a saleId\r\n    mapping (uint256 => uint256) private saleParticipants;                                      //total number sales per sale session\r\n    \r\n    uint256 private elapsedTime;                                                                //variable to set time for powerball winning \r\n    uint256 private saleIdNow = 1;                                                              //saleIdNow for sale now \r\n    address[] private AllParticipantAddresses;                                                  //list of all participants participated in the sale\r\n    uint256 private totalSaleAmountForAllSales;                                                 //total amount including all sales\r\n    uint256 private totalDonation;                                                              //total donated amount\r\n    uint256[] public checkerEmpty;\r\n    \r\n\r\n    //Internal function for checking values for purchaseTicket\r\n    function getNumber(uint256 _number) internal returns(uint256){\r\n       return  _number.div(6);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev InitiateSmartContractValue \r\n    */\r\n    function initiateSmartContractValue(uint256 _elapseTime) public onlyOwner returns(bool){\r\n        saleStartTimeStamp[saleIdNow] = now;                                                        //Initiate time\r\n        saleParticipants[saleIdNow] = 0;                                                            //Initiate sale participants\r\n        elapsedTime = _elapseTime;                                                                  //Time for next sale                                                        \r\n        return true;  \r\n    }\r\n    \r\n    /**\r\n     * @dev perform purchase\r\n     * @param _ticketNumbers ticket number from the list in application\r\n    */\r\n    function purchaseTicket(uint256[] memory _ticketNumbers) public payable returns(bool){\r\n        require(( _ticketNumbers.length == 1 || _ticketNumbers.length == 6 || _ticketNumbers.length == 12 || _ticketNumbers.length == 18 || _ticketNumbers.length == 24 || _ticketNumbers.length == 30 || \r\n            _ticketNumbers.length == 36 || _ticketNumbers.length == 42 || _ticketNumbers.length == 48 || _ticketNumbers.length == 54 || _ticketNumbers.length == 60) , \"Invalid Value\");\r\n            require(msg.value >= getNumber(_ticketNumbers.length).mul(_ticketPrice), \"Insufficient eth value\");\r\n        if(_ticketNumbers.length > 1){\r\n            if((saleStartTimeStamp[saleIdNow] + elapsedTime) > now){\r\n              AllParticipantAddresses.push(msg.sender);\r\n              totalSaleAmount[saleIdNow] = totalSaleAmount[saleIdNow] + msg.value;\r\n              totalSaleAmountForAllSales = totalSaleAmountForAllSales + msg.value;\r\n              totalSaleAmountByAddAndSaleID[saleIdNow][msg.sender] = totalSaleAmountByAddAndSaleID[saleIdNow][msg.sender] + msg.value;\r\n              for (uint256 i = 0; i < _ticketNumbers.length; i++){\r\n                ticketNumberByAddress[saleIdNow][msg.sender].push(_ticketNumbers[i]);\r\n              }\r\n               if(_ticketNumbers.length == 60){\r\n                _transfer(_buyerPoolAddress,msg.sender,_purchaseTokenAmount);\r\n               }\r\n              allAddressList[saleIdNow].push(msg.sender);\r\n              saleParticipants[saleIdNow]  = saleParticipants[saleIdNow] + 1;\r\n              return true;\r\n            }\r\n            else {\r\n              AllParticipantAddresses.push(msg.sender);\r\n              totalSaleAmount[saleIdNow + 1] = totalSaleAmount[saleIdNow + 1] + msg.value;\r\n              totalSaleAmountForAllSales = totalSaleAmountForAllSales + msg.value;\r\n              for (uint256 i = 0; i < _ticketNumbers.length; i++){\r\n                  ticketNumberByAddress[saleIdNow + 1][msg.sender].push(_ticketNumbers[i]);\r\n              }\r\n               if(_ticketNumbers.length == 60){\r\n                 _transfer(_buyerPoolAddress,msg.sender,_purchaseTokenAmount);\r\n               }\r\n              allAddressList[saleIdNow + 1].push(msg.sender);\r\n              saleParticipants[saleIdNow + 1]  = saleParticipants[saleIdNow + 1] + 1;\r\n              return true;\r\n            }\r\n        }\r\n        else{\r\n            totalDonation = totalDonation + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev declare winner for a sale session\r\n    */\r\n    function declareWinner(uint256[] calldata _winningSequence, uint256 _powerballNumber, address payable[] calldata _winnerAddressArray, uint256[] calldata _winnerPositions, uint256[]  calldata _winnerAmountInWei) external payable onlyOwner returns(bool){\r\n        require(_winnerAddressArray.length == _winnerAmountInWei.length || _winnerAmountInWei.length == _winnerPositions.length, \"Invalid winner declaration data\");\r\n        for(uint256 i=0;i<_winnerAddressArray.length;i++){\r\n             winner[saleIdNow].push(_winnerAddressArray[i]);\r\n             winningAmount[saleIdNow].push(_winnerAmountInWei[i]);\r\n            _winnerAddressArray[i].transfer(_winnerAmountInWei[i]);\r\n        }\r\n        for(uint256 j=0;j<_winningSequence.length;j++){\r\n            winningNumber[saleIdNow].push(_winningSequence[j]);\r\n        }\r\n        winningPowerBallNumber[saleIdNow] =  _powerballNumber;\r\n        saleEndTimeStamp[saleIdNow] = now;\r\n        saleStartTimeStamp[saleIdNow+1] = now;\r\n        saleIdNow = saleIdNow +1;\r\n    }\r\n    \r\n    /**\r\n     * @dev set elapsed time for powerball\r\n    */\r\n    function setElapsedTime(uint256 time) public onlyOwner returns(bool){\r\n        require(time > 0,\"Invalid time provided, Please try Again!!\");\r\n        elapsedTime = time;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev get elapsed time for powerball\r\n    */\r\n    function getElapsedTime() external view returns(uint256){\r\n        return elapsedTime;\r\n    }\r\n    \r\n    /**\r\n     * @dev get winning powerball number\r\n    */\r\n    function getWinningPowerballNumberBySaleId(uint256 _saleId) external view returns(uint256){\r\n        return winningPowerBallNumber[_saleId];\r\n    }\r\n    \r\n    /**\r\n     * @dev get current saleId for this session\r\n    */\r\n    function getSaleIdNow() external view returns(uint256){\r\n        return saleIdNow;\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw all eth from the smart contract\r\n    */\r\n    function withdrawETHFromContract(uint256 _savingsValue,address payable _savingsReceiver, uint256 _opexValue, address payable _opexReceiver) external onlyOwner returns(bool){\r\n        _savingsReceiver.transfer(_savingsValue);\r\n        _opexReceiver.transfer(_opexValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get end timeStamp by sale session \r\n    */\r\n    function getEndTime(uint256 _saleId) external view returns(uint256){\r\n        return saleEndTimeStamp[_saleId] ;\r\n    }\r\n\r\n    /**\r\n     * @dev get start timeStamp by sale session \r\n    */\r\n    function getStartTime(uint256 _saleId) external view returns(uint256){\r\n        return saleStartTimeStamp[_saleId+1];\r\n    }\r\n    \r\n    /**\r\n     * @dev get winning number by sale ID\r\n    */\r\n    function getWinningNumber(uint256 _saleId) external view returns(uint256[] memory){\r\n        return winningNumber[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get winning amount by sale ID\r\n    */\r\n    function getWinningAmount(uint256 _saleId) external view returns(uint256[] memory){\r\n        return winningAmount[_saleId];\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev get winning address by sale ID\r\n    */\r\n    function getWinningAddress(uint256 _saleId) external view returns(address[] memory){\r\n        return winner[_saleId];\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev get list of all addresses in the Sale\r\n    */\r\n    function getAllSaleAddressesBySaleID(uint256 _saleId) external view returns(address[] memory){\r\n        return allAddressList[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get list of all addresses in the contract\r\n    */\r\n    function getAllParticipantAddresses() external view returns(address[] memory){\r\n        return AllParticipantAddresses;\r\n    }\r\n\r\n    /**\r\n     * @dev get total sale amount for a sale session\r\n    */\r\n    function getTotalSaleAmountBySaleID(uint256 _saleId) external view returns(uint256){\r\n        return totalSaleAmount[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get total sale amount for all sale session\r\n    */\r\n    function getTotalSaleAmountForAllSale() external view returns(uint256){\r\n        return totalSaleAmountForAllSales;\r\n    }\r\n\r\n    /**\r\n     * @dev get total number of participants by saleId\r\n    */\r\n    function getParticipantCountBySaleId(uint256 _saleId) external view returns(uint256){\r\n        return saleParticipants[_saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev get price of one ticket\r\n    */\r\n    function getPriceOfOneTicket() external view returns(uint256){\r\n        return _ticketPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev set price of one ticket by owner only\r\n     * @param _newPrice New price of each token\r\n    */\r\n    function setPriceOfOneTicket(uint256 _newPrice) external onlyOwner returns(bool){\r\n        _ticketPrice = _newPrice;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get ticket number for the given address\r\n     * @param _saleId Sale id for the sale session\r\n     * @param _add New price of each token\r\n    */\r\n    function getticketNumberByAddress(uint256 _saleId, address _add) external view returns(uint256[] memory){\r\n        return ticketNumberByAddress[_saleId][_add];\r\n    }\r\n\r\n    /**\r\n     * @dev get amount of token sent per ticket purchase\r\n    */\r\n    function getpurchaseTokenAmount() external view returns(uint256){\r\n        return _purchaseTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev set amount of token sent per ticket purchase\r\n    */\r\n    function setpurchaseTokenAmount(uint256 purchaseTokenAmount) external onlyOwner returns(bool){\r\n        _purchaseTokenAmount = purchaseTokenAmount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get address of pool for puchase ticket and get tokens \r\n    */\r\n    function getbuyerPoolAddress() external view returns(address){\r\n        return _buyerPoolAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev set address of pool for puchase ticket and get tokens \r\n    */\r\n    function setbuyerPoolAddress(address buyerPoolAddress) external onlyOwner returns(bool){\r\n        _buyerPoolAddress = buyerPoolAddress;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get total eth by user address and saleId \r\n    */\r\n    function getTotalSaleAmountByAddAndSaleID(uint256 _saleId, address _userAddress) external view returns(uint256){\r\n        return totalSaleAmountByAddAndSaleID[_saleId][_userAddress];\r\n    }\r\n \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceOfOneTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setpurchaseTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getTotalSaleAmountBySaleID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getParticipantCountBySaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_elapseTime\",\"type\":\"uint256\"}],\"name\":\"initiateSmartContractValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceOfOneTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winningSequence\",\"type\":\"uint256[]\"},{\"name\":\"_powerballNumber\",\"type\":\"uint256\"},{\"name\":\"_winnerAddressArray\",\"type\":\"address[]\"},{\"name\":\"_winnerPositions\",\"type\":\"uint256[]\"},{\"name\":\"_winnerAmountInWei\",\"type\":\"uint256[]\"}],\"name\":\"declareWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_savingsValue\",\"type\":\"uint256\"},{\"name\":\"_savingsReceiver\",\"type\":\"address\"},{\"name\":\"_opexValue\",\"type\":\"uint256\"},{\"name\":\"_opexReceiver\",\"type\":\"address\"}],\"name\":\"withdrawETHFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setElapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTotalSaleAmountByAddAndSaleID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropETHCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSaleAmountForAllSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllParticipantAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkerEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleIdNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerPoolAddress\",\"type\":\"address\"}],\"name\":\"setbuyerPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketNumbers\",\"type\":\"uint256[]\"}],\"name\":\"purchaseTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getWinningPowerballNumberBySaleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getAllSaleAddressesBySaleID\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpurchaseTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getbuyerPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleId\",\"type\":\"uint256\"},{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getticketNumberByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"name\":\"buyerPoolAddress\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherTransfer\",\"type\":\"event\"}]","ContractName":"MyLotto","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000a4053aac1fd259f7439f5dca573aebc514441e9d000000000000000000000000a4053aac1fd259f7439f5dca573aebc514441e9d000000000000000000000000000000000000000000000000000000000000000d4d79204c6f74746f20436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d594c0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://85edf1b8f7adfaae1235e2fc9b775f591130f7f242131f3b41118938daa5720c"}]}