{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: LGPL-3.0-or-later\r\npragma solidity 0.5.17; \r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender != address(0));\r\n        require(msg.sender == newOwner);\r\n        _;\r\n    }\r\n    \r\n    function isOwner(address account) public view returns (bool) {\r\n        if(account == owner) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Address\r\n * @dev Check if the address is a contract using eip-1052\r\n */\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Vester\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract Vester is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private _tokenReward;\r\n    address private _beneficiary;\r\n\r\n    uint256 private _cliff;\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    mapping (address => uint256) private _released;\r\n\r\n    constructor() public Ownable() {\r\n    }\r\n\r\n    /// In case of airdrops\r\n    function gulp(address _token) onlyOwner external {\r\n        require(_token != address(_tokenReward), \"gulp: can not capture staking tokens\");\r\n        require(_beneficiary != address(this), \"gulp: can not send to self\");\r\n        require(_beneficiary != address(0), \"gulp: can not burn tokens\");\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(_beneficiary, balance);\r\n    }  \r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of FLC token to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred     \r\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     * @param addressOfTokenUsedAsReward where is the token contract\r\n     */\r\n    function createVestingPeriod(\r\n        address beneficiary, \r\n        uint256 start, \r\n        uint256 cliffDuration, \r\n        uint256 duration, \r\n        address addressOfTokenUsedAsReward\r\n    ) \r\n        onlyOwner \r\n        external \r\n    {\r\n        require(cliffDuration <= duration, \"createVestingPeriod: INVALID_CLIFF\");\r\n        require(duration > 0, \"createVestingPeriod: INVALID_DURATION\");\r\n        require(start.add(duration) > block.timestamp, \"createVestingPeriod: NOT_RELEASABLE\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _duration = duration;\r\n        _cliff = start.add(cliffDuration);\r\n        _start = start;\r\n        _tokenReward = IERC20(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() external view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the cliff time of the token vesting.\r\n     */\r\n    function cliff() external view returns (uint256) {\r\n        return _cliff;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() external view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() external view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function released(address token) external view returns (uint256) {\r\n        return _released[token];\r\n    }\r\n\r\n    /**\r\n     * @notice Claim tokens to beneficiary.\r\n     */\r\n    function claim() external {\r\n        address token = address(_tokenReward);\r\n        uint256 unreleased = _releasableAmount(token);\r\n        require(unreleased > 0, \"release: NOT_RELEASABLE\");\r\n        _released[token] = _released[token].add(unreleased);\r\n        _tokenReward.transfer(_beneficiary, unreleased);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _releasableAmount(address token) private view returns (uint256) {\r\n        return _vestedAmount(token).sub(_released[token]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _vestedAmount(address token) private view returns (uint256) {\r\n        uint256 currentBalance = _tokenReward.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(_released[token]);\r\n\r\n        if (block.timestamp < _cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= _start.add(_duration)) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"name\":\"createVestingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"gulp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vester","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d63de9b01133c7119207835cbc38b1fe94c910f3c1e175906c35ddc01b53b101"}]}