{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBPool is IERC20 {\r\n    function version() external view returns (uint256);\r\n\r\n    function swapExactAmountIn(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external returns (uint256, uint256);\r\n\r\n    function swapExactAmountOut(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external returns (uint256, uint256);\r\n\r\n    function calcInGivenOut(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external pure returns (uint256);\r\n\r\n    function calcOutGivenIn(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    ) external pure returns (uint256);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint256);\r\n\r\n    function swapFee() external view returns (uint256);\r\n\r\n    function setSwapFee(uint256 _swapFee) external;\r\n\r\n    function bind(\r\n        address token,\r\n        uint256 balance,\r\n        uint256 denorm\r\n    ) external;\r\n\r\n    function rebind(\r\n        address token,\r\n        uint256 balance,\r\n        uint256 denorm\r\n    ) external;\r\n\r\n    function finalize(\r\n        uint256 _swapFee,\r\n        uint256 _initPoolSupply,\r\n        address[] calldata _bindTokens,\r\n        uint256[] calldata _bindDenorms\r\n    ) external;\r\n\r\n    function setPublicSwap(bool _publicSwap) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setExchangeProxy(address _exchangeProxy) external;\r\n\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n\r\n    function joinPoolFor(\r\n        address account,\r\n        uint256 rewardAmountOut,\r\n        uint256[] calldata maxAmountsIn\r\n    ) external;\r\n\r\n    function joinswapPoolAmountOut(\r\n        address tokenIn,\r\n        uint256 poolAmountOut,\r\n        uint256 maxAmountIn\r\n    ) external returns (uint256 tokenAmountIn);\r\n\r\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint256 poolAmountIn,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 tokenAmountOut);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPoolAmountIn\r\n    ) external returns (uint256 poolAmountIn);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external returns (uint256 poolAmountOut);\r\n\r\n    function finalizeRewardFundInfo(address _rewardFund, uint256 _unstakingFrozenTime) external;\r\n\r\n    function addRewardPool(\r\n        IERC20 _rewardToken,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ninterface IBFactory {\r\n    function newBPool() external returns (IBPool);\r\n\r\n    function collect(address _token) external;\r\n}\r\n\r\n/**\r\n * @dev This contract will collect profit of ValueLiquid (sent to BFactory), convert to VALUE (if needed) and forward to GovVault for auto-compounding.\r\n * This new version converts tokens with lack of liquidity (pair with VALUE) (ie. DAI, BSD) to USDC or WETH on Uniswap - then swap to VALUE.\r\n * Some tokens will need a multi-path route to swap to VALUE.\r\n */\r\ncontract ValueLiquidProfitCollectorV2 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 flag) {\r\n        if ((flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint256 gasStart = gasleft();\r\n            _;\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    IUniswapV2Router public unirouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public valueToken = address(0x49E833337ECe7aFE375e44F4E3e8481029218E5c);\r\n\r\n    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n\r\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    IBFactory public bFactory = IBFactory(0xEbC44681c125d63210a33D30C55FD3d37762675B);\r\n    address public govVault = address(0xceC03a960Ea678A2B6EA350fe0DbD1807B22D875);\r\n\r\n    // VIP-10 (to compensate who lost during the exploit on Nov 14 2020)\r\n    address public insuranceFund = address(0x2b52472950cDa46Fb3369eFf2719e144699f3A07);\r\n    uint256 public insuranceFee = 3000; // percentage (over 10000) - 30% (6% over 14%)\r\n\r\n    address public governance;\r\n\r\n    mapping(address => address[]) public uniswapPaths; // [input -> VALUE] => uniswap_path\r\n    mapping(address => address) public vliquidPools; // [input -> VALUE] => value_liquid_pool\r\n\r\n    mapping(address => address[]) public uniswapPathsToUsdc; // [input -> USDC] => uniswap_path\r\n    mapping(address => address) public vliquidPoolsToUsdc; // [input -> USDC] => value_liquid_pool\r\n\r\n    mapping(address => address[]) public uniswapPathsToWeth; // [input -> WETH] => uniswap_path\r\n    mapping(address => address) public vliquidPoolsToWeth; // [input -> WETH] => value_liquid_pool\r\n\r\n    address[255] public supportedTokens;\r\n    uint256 public supportedTokenLength;\r\n\r\n    event CollectProfit(address token, uint256 tokenAmount, uint256 valueAmount);\r\n    event CollectInsurance(uint256 valueAmount);\r\n\r\n    constructor(address _valueToken) public {\r\n        if (_valueToken != address(0)) valueToken = _valueToken;\r\n        governance = msg.sender;\r\n\r\n        supportedTokenLength = 13;\r\n\r\n        supportedTokens[0] = valueToken;\r\n        supportedTokens[1] = weth;\r\n        supportedTokens[2] = wbtc;\r\n        supportedTokens[3] = usdc;\r\n        supportedTokens[4] = dai;\r\n        supportedTokens[5] = address(0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde); // BSD\r\n        supportedTokens[6] = address(0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700); // BSDS\r\n        supportedTokens[7] = address(0x1B8E12F839BD4e73A47adDF76cF7F0097d74c14C); // VUSD\r\n        supportedTokens[8] = address(0xB0BFB1E2F72511cF8b4D004852E2054d7b9a76e1); // MIXS\r\n        supportedTokens[9] = address(0x7865af71cf0b288b4E7F654f4F7851EB46a2B7F8); // SNTVT\r\n        supportedTokens[10] = address(0x4981553e8CcF6Df916B36a2d6B6f8fC567628a51); // BNI\r\n        supportedTokens[11] = address(0xc813EA5e3b48BEbeedb796ab42A30C5599b01740); // NIOX\r\n        supportedTokens[12] = address(0x07150e919B4De5fD6a63DE1F9384828396f25fDC); // BASE\r\n\r\n        uniswapPathsToUsdc[wbtc] = [wbtc, usdc];\r\n        uniswapPathsToUsdc[dai] = [dai, usdc];\r\n\r\n        vliquidPoolsToUsdc[address(0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde)] = address(0xCDD2bD61D07b8d42843175dd097A4858A8f764e7); // BSD -> USDC\r\n        vliquidPoolsToUsdc[address(0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700)] = address(0x8438d64Da58772E9F7FCeAa1506bA300F935ABBd); // BSDS -> USDC\r\n\r\n        vliquidPools[weth] = address(0xbd63d492bbb13d081D680CE1f2957a287FD8c57c);\r\n        vliquidPools[usdc] = address(0x67755124D8E4965c5c303fFd15641Db4Ff366e47);\r\n        vliquidPools[address(0x1B8E12F839BD4e73A47adDF76cF7F0097d74c14C)] = address(0x50007A6BF4a45374Aa5206C1aBbA88A1ffde1bAF); // VUSD\r\n        vliquidPools[address(0xB0BFB1E2F72511cF8b4D004852E2054d7b9a76e1)] = address(0xb9bcCC26fE0536E6476Aacc1dc97462B261b43d7); // MIXS\r\n        vliquidPools[address(0x7865af71cf0b288b4E7F654f4F7851EB46a2B7F8)] = address(0x7df0B0DBD00d06203a0D2232282E33a5d2E5D5B0); // SNTVT\r\n        vliquidPools[address(0x4981553e8CcF6Df916B36a2d6B6f8fC567628a51)] = address(0x809d6cbb321C29B1962d6f508a4FD4f564Ec7488); // BNI\r\n\r\n        vliquidPoolsToWeth[address(0xc813EA5e3b48BEbeedb796ab42A30C5599b01740)] = address(0x0464994e800b4A1104e116fF248Cf6eA7494Ca47); // NIOX -> WETH\r\n        vliquidPoolsToUsdc[address(0x07150e919B4De5fD6a63DE1F9384828396f25fDC)] = address(0x19B770c8F9d5439C419864d8458255791f7e736C); // BASE -> USDC\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setBFactory(IBFactory _bFactory) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        bFactory = _bFactory;\r\n    }\r\n\r\n    function setGovVault(address _govVault) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govVault = _govVault;\r\n    }\r\n\r\n    function setInsuranceFund(address _insuranceFund) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        insuranceFund = _insuranceFund;\r\n    }\r\n\r\n    function setInsuranceFee(uint256 _insuranceFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_insuranceFee <= 5000, \"_insuranceFee over 50%\");\r\n        insuranceFee = _insuranceFee;\r\n    }\r\n\r\n    function addSupportedToken(address _token) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(supportedTokenLength < 255, \"exceed token length\");\r\n        supportedTokens[supportedTokenLength] = _token;\r\n        ++supportedTokenLength;\r\n    }\r\n\r\n    function removeSupportedToken(uint256 _index) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_index < supportedTokenLength, \"out of range\");\r\n        supportedTokens[_index] = supportedTokens[supportedTokenLength - 1];\r\n        supportedTokens[supportedTokenLength - 1] = address(0);\r\n        --supportedTokenLength;\r\n    }\r\n\r\n    function setSupportedToken(uint256 _index, address _token) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        supportedTokens[_index] = _token;\r\n    }\r\n\r\n    function setSupportedTokenLength(uint256 _length) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_length <= 255, \"exceed max length\");\r\n        supportedTokenLength = _length;\r\n    }\r\n\r\n    function setUnirouter(IUniswapV2Router _unirouter) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        unirouter = _unirouter;\r\n    }\r\n\r\n    function setUnirouterPath(address _input, address[] memory _path) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        uniswapPaths[_input] = _path;\r\n    }\r\n\r\n    function setBalancerPools(address _input, address _pool) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vliquidPools[_input] = _pool;\r\n    }\r\n\r\n    function setUniswapPathsToUsdc(address _input, address[] memory _path) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        uniswapPathsToUsdc[_input] = _path;\r\n    }\r\n\r\n    function setBalancerPoolsToUsdc(address _input, address _pool) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vliquidPoolsToUsdc[_input] = _pool;\r\n    }\r\n\r\n    function setUniswapPathsToWeth(address _input, address[] memory _path) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        uniswapPathsToWeth[_input] = _path;\r\n    }\r\n\r\n    function setBalancerPoolsToWeth(address _input, address _pool) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vliquidPoolsToWeth[_input] = _pool;\r\n    }\r\n\r\n    function getOutputTokenToConvert(address _inputToken) external view returns (address _outputToken) {\r\n        require(msg.sender == governance, \"!governance\");\r\n        if (vliquidPools[_inputToken] != address(0) || uniswapPaths[_inputToken].length >= 2) {\r\n            return valueToken;\r\n        } else if (vliquidPoolsToUsdc[_inputToken] != address(0)) {\r\n            return usdc;\r\n        } else if (vliquidPoolsToWeth[_inputToken] != address(0)) {\r\n            return weth;\r\n        } else if (uniswapPathsToUsdc[_inputToken].length >= 2) {\r\n            return usdc;\r\n        } else if (uniswapPathsToWeth[_inputToken].length >= 2) {\r\n            return weth;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function _bpoolExchangeRate(\r\n        address _pool,\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) public view returns (uint256 _outputAmount) {\r\n        if (_inputAmount == 0) return 0;\r\n        if (_pool != address(0)) {\r\n            IBPool exPool = IBPool(_pool);\r\n            _outputAmount = exPool.calcOutGivenIn(\r\n                exPool.getBalance(_input),\r\n                exPool.getDenormalizedWeight(_input),\r\n                exPool.getBalance(_output),\r\n                exPool.getDenormalizedWeight(_output),\r\n                _inputAmount,\r\n                exPool.swapFee()\r\n            );\r\n        }\r\n    }\r\n\r\n    function _uniswapExchangeRate(uint256 _tokenAmount, address[] memory _path) public view returns (uint256) {\r\n        uint256[] memory amounts = unirouter.getAmountsOut(_tokenAmount, _path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function getExchangeRateToValue(address _inputToken, uint256 _tokenAmount) public view returns (uint256 _valueAmount) {\r\n        if (_tokenAmount == 0) return 0;\r\n        address _pool = vliquidPools[_inputToken];\r\n        if (_pool != address(0)) {\r\n            // _inputToken -> VALUE\r\n            return _bpoolExchangeRate(_pool, _inputToken, valueToken, _tokenAmount);\r\n        } else if (vliquidPoolsToUsdc[_inputToken] != address(0)) {\r\n            // _inputToken -> USDC -> VALUE\r\n            uint256 _usdcAmount = _bpoolExchangeRate(vliquidPoolsToUsdc[_inputToken], _inputToken, usdc, _tokenAmount);\r\n            return _bpoolExchangeRate(vliquidPools[usdc], usdc, valueToken, _usdcAmount);\r\n        } else if (vliquidPoolsToWeth[_inputToken] != address(0)) {\r\n            // _inputToken -> WETH -> VALUE\r\n            uint256 _wethAmount = _bpoolExchangeRate(vliquidPoolsToWeth[_inputToken], _inputToken, weth, _tokenAmount);\r\n            return _bpoolExchangeRate(vliquidPools[weth], weth, valueToken, _wethAmount);\r\n        } else if (uniswapPathsToUsdc[_inputToken].length >= 2) {\r\n            // _inputToken -> USDC (via Uniswap) -> VALUE\r\n            uint256 _usdcAmount = _uniswapExchangeRate(_tokenAmount, uniswapPathsToUsdc[_inputToken]);\r\n            return _bpoolExchangeRate(vliquidPools[usdc], usdc, valueToken, _usdcAmount);\r\n        } else if (uniswapPathsToWeth[_inputToken].length >= 2) {\r\n            // _inputToken -> WETH (via Uniswap) -> VALUE\r\n            uint256 _wethAmount = _uniswapExchangeRate(_tokenAmount, uniswapPathsToWeth[_inputToken]);\r\n            return _bpoolExchangeRate(vliquidPools[weth], weth, valueToken, _wethAmount);\r\n        } else {\r\n            // _inputToken -> VALUE (via Uniswap)\r\n            address[] memory _path = uniswapPaths[_inputToken];\r\n            if (_path.length == 0) {\r\n                // path: _inputToken -> valueToken\r\n                _path = new address[](2);\r\n                _path[0] = _inputToken;\r\n                _path[1] = valueToken;\r\n            }\r\n            return _uniswapExchangeRate(_tokenAmount, _path);\r\n        }\r\n    }\r\n\r\n    function getAvailableTokens()\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory _tokens,\r\n            uint256[] memory _amounts,\r\n            uint256[] memory _values\r\n        )\r\n    {\r\n        _tokens = new address[](supportedTokenLength);\r\n        _amounts = new uint256[](supportedTokenLength);\r\n        _values = new uint256[](supportedTokenLength);\r\n        for (uint256 i = 0; i < supportedTokenLength; i++) {\r\n            address _stok = supportedTokens[i];\r\n            _tokens[i] = _stok;\r\n            uint256 _tokenAmt = IERC20(_stok).balanceOf(address(bFactory)).add(IERC20(_stok).balanceOf(address(this)));\r\n            _amounts[i] = _tokenAmt;\r\n            if (_stok == valueToken) {\r\n                _values[i] = _tokenAmt;\r\n            } else {\r\n                _values[i] = getExchangeRateToValue(_stok, _tokenAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function collectProfit(address _token, uint8 flag) public discountCHI(flag) returns (uint256 _profit) {\r\n        bFactory.collect(_token);\r\n        uint256 _tokenBal = IERC20(_token).balanceOf(address(this));\r\n        if (_tokenBal > 0) {\r\n            if (_token == valueToken) {\r\n                // if token is VALUE, just forward to Gov Vault\r\n                _profit = _tokenBal;\r\n            } else {\r\n                // otherwise, convert to VALUE and forward to Gov Vault\r\n                _swapToValue(_token, _tokenBal);\r\n                _profit = IERC20(valueToken).balanceOf(address(this));\r\n            }\r\n        }\r\n        if (_profit > 0) {\r\n            if (insuranceFee > 0 && insuranceFund != address(0)) {\r\n                uint256 _insurance = _profit.mul(insuranceFee).div(10000);\r\n                _profit = _profit.sub(_insurance);\r\n                IERC20(valueToken).safeTransfer(insuranceFund, _insurance);\r\n                emit CollectInsurance(_insurance);\r\n            }\r\n            IERC20(valueToken).safeTransfer(govVault, _profit);\r\n            emit CollectProfit(_token, _tokenBal, _profit);\r\n        }\r\n    }\r\n\r\n    function _bpoolSwap(\r\n        address _pool,\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputAmount\r\n    ) internal {\r\n        IERC20(_input).safeApprove(_pool, 0);\r\n        IERC20(_input).safeApprove(_pool, _inputAmount);\r\n        IBPool(_pool).swapExactAmountIn(_input, _inputAmount, _output, 1, type(uint256).max);\r\n    }\r\n\r\n    function _uniSwap(uint256 _inputAmount, address[] memory _path) internal {\r\n        IERC20 _inputToken = IERC20(_path[0]);\r\n        _inputToken.safeApprove(address(unirouter), 0);\r\n        _inputToken.safeApprove(address(unirouter), _inputAmount);\r\n        unirouter.swapExactTokensForTokens(_inputAmount, 1, _path, address(this), now.add(1800));\r\n    }\r\n\r\n    function _swapToValue(address _inputToken, uint256 _amount) internal {\r\n        if (_amount == 0) return;\r\n        address _pool = vliquidPools[_inputToken];\r\n        if (_pool != address(0)) {\r\n            // _inputToken -> VALUE\r\n            _bpoolSwap(_pool, _inputToken, valueToken, _amount);\r\n        } else if (vliquidPoolsToUsdc[_inputToken] != address(0)) {\r\n            // _inputToken -> USDC -> VALUE\r\n            _bpoolSwap(vliquidPoolsToUsdc[_inputToken], _inputToken, usdc, _amount);\r\n            uint256 _usdcAmount = IERC20(usdc).balanceOf(address(this));\r\n            _bpoolSwap(vliquidPools[usdc], usdc, valueToken, _usdcAmount);\r\n        } else if (vliquidPoolsToWeth[_inputToken] != address(0)) {\r\n            // _inputToken -> WETH -> VALUE\r\n            _bpoolSwap(vliquidPoolsToWeth[_inputToken], _inputToken, weth, _amount);\r\n            uint256 _wethAmount = IERC20(weth).balanceOf(address(this));\r\n            _bpoolSwap(vliquidPools[weth], weth, valueToken, _wethAmount);\r\n        } else if (uniswapPathsToUsdc[_inputToken].length >= 2) {\r\n            // _inputToken -> USDC (via Uniswap) -> VALUE\r\n            _uniSwap(_amount, uniswapPathsToUsdc[_inputToken]);\r\n            uint256 _usdcAmount = IERC20(usdc).balanceOf(address(this));\r\n            _bpoolSwap(vliquidPools[usdc], usdc, valueToken, _usdcAmount);\r\n        } else if (uniswapPathsToWeth[_inputToken].length >= 2) {\r\n            // _inputToken -> WETH (via Uniswap) -> VALUE\r\n            _uniSwap(_amount, uniswapPathsToWeth[_inputToken]);\r\n            uint256 _wethAmount = IERC20(weth).balanceOf(address(this));\r\n            _bpoolSwap(vliquidPools[weth], weth, valueToken, _wethAmount);\r\n        } else {\r\n            // _inputToken -> VALUE (via Uniswap)\r\n            address[] memory _path = uniswapPaths[_inputToken];\r\n            if (_path.length == 0) {\r\n                // _path: _inputToken -> valueToken\r\n                _path = new address[](2);\r\n                _path[0] = _inputToken;\r\n                _path[1] = valueToken;\r\n            }\r\n            _uniSwap(_amount, _path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 amount,\r\n        address to\r\n    ) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.transfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valueToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAmount\",\"type\":\"uint256\"}],\"name\":\"CollectInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAmount\",\"type\":\"uint256\"}],\"name\":\"CollectProfit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"_bpoolExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"_uniswapExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"collectProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getExchangeRateToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"}],\"name\":\"getOutputTokenToConvert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"_bFactory\",\"type\":\"address\"}],\"name\":\"setBFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBalancerPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBalancerPoolsToUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setBalancerPoolsToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govVault\",\"type\":\"address\"}],\"name\":\"setGovVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insuranceFee\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"setInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setSupportedTokenLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUnirouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUniswapPathsToUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUniswapPathsToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPathsToUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPathsToWeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vliquidPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vliquidPoolsToUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vliquidPoolsToWeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValueLiquidProfitCollectorV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5557e4ad95f764d221baab1e8b20e5205ec4fb654d8ec896dc0dfc442134ad02"}]}