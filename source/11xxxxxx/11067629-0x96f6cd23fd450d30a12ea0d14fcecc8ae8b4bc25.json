{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.5.12 >0.4.13 >=0.4.23 >=0.5.12;\r\n\r\n////// lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/CatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function box() external view returns (uint256);\r\n    function litter() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function claw(uint256) external;\r\n    function cage() external;\r\n}\r\n////// lib/dss-interfaces/src/dss/ChainlogAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/FlipAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/GemJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/ilk-registry\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint256, address, address, address, address, uint256, string memory, string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function update(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function flip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/JugAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/MedianAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/median\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/OsmMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n\r\n// https://github.com/makerdao/osm-mom\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/SpotAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/CatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/FlipAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/GemJoinAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/JugAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/MedianAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/OsmMomAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/SpotAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/VatAbstract.sol\"; */\r\n/* import \"lib/dss-interfaces/src/dss/ChainlogAbstract.sol\"; */\r\n\r\ncontract SpellAction {\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.1.2/contracts.json\r\n\r\n    address constant MCD_VAT         = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant MCD_CAT         = 0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea;\r\n    address constant MCD_JUG         = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant MCD_SPOT        = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address constant MCD_POT         = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant MCD_END         = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\r\n    address constant FLIPPER_MOM     = 0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472;\r\n    address constant OSM_MOM         = 0x76416A4d5190d071bfed309861527431304aA14f;\r\n    address constant ILK_REGISTRY    = 0x8b4ce5DCbb01e0e1f0521cd8dCfb31B308E52c24;\r\n    address constant CHAINLOG        = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    // ETH-B specific addresses\r\n    address constant ETH            = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address constant MCD_JOIN_ETH_B = 0x08638eF1A205bE6762A8b935F5da9b700Cf7322c;\r\n    address constant MCD_FLIP_ETH_B = 0xD499d71bE9e9E5D236A07ac562F7B6CeacCa624c;\r\n    address constant PIP_ETH        = 0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763; // OSM\r\n\r\n    // Decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    uint256 constant         SIX_PCT_RATE = 1000000001847694957439350562;\r\n\r\n    function execute() external {\r\n\r\n        /*** ETH-B Collateral Onboarding ***/\r\n\r\n        //   $ seth --to-bytes32 $(seth --from-ascii \"ETH-B\")\r\n        //   0x4554482d42000000000000000000000000000000000000000000000000000000\r\n        bytes32 ilk = \"ETH-B\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_ETH_B).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ETH_B).ilk() == ilk, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ETH_B).gem() == ETH, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ETH_B).dec() == 18, \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_ETH_B).vat() == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_ETH_B).cat() == MCD_CAT, \"flip-cat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_ETH_B).ilk() == ilk, \"flip-ilk-not-match\");\r\n\r\n        // Add the new flip and join to the Chainlog\r\n        ChainlogAbstract(CHAINLOG).setAddress(\"MCD_JOIN_ETH_B\", MCD_JOIN_ETH_B);\r\n        ChainlogAbstract(CHAINLOG).setAddress(\"MCD_FLIP_ETH_B\", MCD_FLIP_ETH_B);\r\n        ChainlogAbstract(CHAINLOG).setVersion(\"1.1.3\");\r\n\r\n        // Set the TOKEN PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"pip\", PIP_ETH);\r\n\r\n        // Set the TOKEN-LETTER Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ilk, \"flip\", MCD_FLIP_ETH_B);\r\n\r\n        // Init TOKEN-LETTER ilk in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(ilk);\r\n        JugAbstract(MCD_JUG).init(ilk);\r\n\r\n        // Allow TOKEN-LETTER Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_ETH_B);\r\n        // Allow the TOKEN-LETTER Flipper to reduce the Cat litterbox on deal()\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_ETH_B);\r\n        // Allow Cat to kick auctions in TOKEN-LETTER Flipper\r\n        FlipAbstract(MCD_FLIP_ETH_B).rely(MCD_CAT);\r\n        // Allow End to yank auctions in TOKEN-LETTER Flipper\r\n        FlipAbstract(MCD_FLIP_ETH_B).rely(MCD_END);\r\n        // Allow FlipperMom to access to the TOKEN-LETTER Flipper\r\n        FlipAbstract(MCD_FLIP_ETH_B).rely(FLIPPER_MOM);\r\n        // Disallow Cat to kick auctions in TOKEN-LETTER Flipper\r\n        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\r\n        //FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_ETH_B);\r\n\r\n        // Allow OsmMom to access to the TOKEN Osm\r\n        // !!!!!!!! Only if PIP_TOKEN = Osm and hasn't been already relied due a previous deployed ilk\r\n        //OsmAbstract(PIP_TOKEN).rely(OSM_MOM);\r\n        // Whitelist Osm to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_TOKEN = Osm, its src is a Median and hasn't been already whitelisted due a previous deployed ilk\r\n        //MedianAbstract(OsmAbstract(PIP_TOKEN).src()).kiss(PIP_TOKEN);\r\n        // Whitelist Spotter to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_TOKEN = Osm or PIP_TOKEN = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        //OsmAbstract(PIP_TOKEN).kiss(MCD_SPOT);\r\n        // Whitelist End to read the Osm data (only necessary if it is the first time the token is being added to an ilk)\r\n        // !!!!!!!! Only if PIP_TOKEN = Osm or PIP_TOKEN = Median and hasn't been already whitelisted due a previous deployed ilk\r\n        //OsmAbstract(PIP_TOKEN).kiss(MCD_END);\r\n        // Set TOKEN Osm in the OsmMom for new ilk\r\n        // !!!!!!!! Only if PIP_TOKEN = Osm\r\n        OsmMomAbstract(OSM_MOM).setOsm(ilk, PIP_ETH);\r\n\r\n        // Set the global debt ceiling\r\n        VatAbstract(MCD_VAT).file(\"Line\", 1476 * MILLION * RAD);\r\n        // Set the TOKEN-LETTER debt ceiling\r\n        VatAbstract(MCD_VAT).file(ilk, \"line\", 20 * MILLION * RAD);\r\n        // Set the TOKEN-LETTER dust\r\n        VatAbstract(MCD_VAT).file(ilk, \"dust\", 100 * RAD);\r\n        // Set the Lot size\r\n        CatAbstract(MCD_CAT).file(ilk, \"dunk\", 50 * THOUSAND * RAD);\r\n        // Set the TOKEN-LETTER liquidation penalty (e.g. 13% => X = 113)\r\n        CatAbstract(MCD_CAT).file(ilk, \"chop\", 113 * WAD / 100);\r\n        // Set the TOKEN-LETTER stability fee (e.g. 1% = 1000000000315522921573372069)\r\n        JugAbstract(MCD_JUG).file(ilk, \"duty\", SIX_PCT_RATE);\r\n        // Set the TOKEN-LETTER percentage between bids (e.g. 3% => X = 103)\r\n        FlipAbstract(MCD_FLIP_ETH_B).file(\"beg\", 103 * WAD / 100);\r\n        // Set the TOKEN-LETTER time max time between bids\r\n        FlipAbstract(MCD_FLIP_ETH_B).file(\"ttl\", 6 hours);\r\n        // Set the TOKEN-LETTER max auction duration to\r\n        FlipAbstract(MCD_FLIP_ETH_B).file(\"tau\", 6 hours);\r\n        // Set the TOKEN-LETTER min collateralization ratio (e.g. 150% => X = 150)\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"mat\", 130 * RAY / 100);\r\n\r\n        // Update TOKEN-LETTER spot value in Vat\r\n        SpotAbstract(MCD_SPOT).poke(ilk);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_ETH_B);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    DSPauseAbstract public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address         public action;\r\n    bytes32         public tag;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    uint256         public expiration;\r\n    bool            public done;\r\n\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/6a97b8f1f145d86b2ea898826cd3232a5abc7c1d/governance/votes/Executive%20vote%20-%20October%2016%2C%202020.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-10-16 MakerDAO Executive Spell | Hash: 0xbaf455a1f3360f0d9f9941f79626e38344c5c58e96c4d2cf03461995fa1fe913\";\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    modifier officeHours {\r\n        uint day = (now / 1 days + 3) % 7;\r\n        require(day < 5, \"Can only be cast on a weekday\");\r\n        uint hour = now / 1 hours % 24;\r\n        require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public officeHours {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3047cb302b33023ccc83ad4bff9502d07426027b55e0cec174e92febd3f06308"}]}