{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n//True POZ Token will have this, \r\ninterface IPOZBenefit {\r\n    function IsPOZHolder(address _Subject) external view returns(bool);\r\n}// stakeOf(address account) public view returns (uint256)\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\ninterface IStaking {\r\n    function stakeOf(address account) public view returns (uint256) ;\r\n}/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Benefit is IPOZBenefit, Ownable {\r\n    constructor() public {\r\n        MinHold = 1;\r\n        ChecksCount = 0;\r\n    }\r\n\r\n    struct BalanceCheckData {\r\n        bool IsToken; //token or staking contract address\r\n        address ContractAddress; // the address of the token or the staking\r\n        address LpContract; // check the current Token Holdin in Lp\r\n    }\r\n\r\n    uint256 public MinHold; //minimum total holding to be POOLZ Holder\r\n    mapping(uint256 => BalanceCheckData) CheckList; //All the contracts to get the sum\r\n    uint256 public ChecksCount; //Total Checks to make\r\n\r\n    function SetMinHold(uint256 _MinHold) public onlyOwner {\r\n        require(_MinHold > 0, \"Must be more then 0\");\r\n        MinHold = _MinHold;\r\n    }\r\n\r\n    function AddNewLpCheck(address _Token, address _LpContract)\r\n        public\r\n        onlyOwner\r\n    {\r\n        CheckList[ChecksCount] = BalanceCheckData(false, _Token, _LpContract);\r\n        ChecksCount++;\r\n    }\r\n\r\n    function AddNewToken(address _ContractAddress) public onlyOwner {\r\n        CheckList[ChecksCount] = BalanceCheckData(\r\n            true,\r\n            _ContractAddress,\r\n            address(0x0)\r\n        );\r\n        ChecksCount++;\r\n    }\r\n\r\n    function AddNewStaking(address _ContractAddress) public onlyOwner {\r\n        CheckList[ChecksCount] = BalanceCheckData(\r\n            false,\r\n            _ContractAddress,\r\n            address(0x0)\r\n        );\r\n        ChecksCount++;\r\n    }\r\n\r\n    function RemoveLastBalanceCheckData() public onlyOwner {\r\n        require(ChecksCount > 0, \"Can't remove from none\");\r\n        ChecksCount--;\r\n    }\r\n\r\n    function RemoveAll() public onlyOwner {\r\n        ChecksCount = 0;\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function CheckStaking(address _Contract, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IStaking(_Contract).stakeOf(_Subject);\r\n    }\r\n\r\n    function IsPOZHolder(address _Subject) external view returns (bool) {\r\n        return CalcTotal(_Subject) >= MinHold;\r\n    }\r\n\r\n    function CalcTotal(address _Subject) public view returns (uint256) {\r\n        uint256 Total = 0;\r\n        for (uint256 index = 0; index < ChecksCount; index++) {\r\n            if (CheckList[index].LpContract == address(0x0)) {\r\n                Total =\r\n                    Total +\r\n                    (\r\n                        CheckList[index].IsToken\r\n                            ? CheckBalance(\r\n                                CheckList[index].ContractAddress,\r\n                                _Subject\r\n                            )\r\n                            : CheckStaking(\r\n                                CheckList[index].ContractAddress,\r\n                                _Subject\r\n                            )\r\n                    );\r\n            } else {\r\n                Total =\r\n                    Total +\r\n                    _CalcLP(\r\n                        CheckList[index].LpContract,\r\n                        CheckList[index].ContractAddress,\r\n                        _Subject\r\n                    );\r\n            }\r\n        }\r\n        return Total;\r\n    }\r\n\r\n    function _CalcLP(\r\n        address _Contract,\r\n        address _Token,\r\n        address _Subject\r\n    ) internal view returns (uint256) {\r\n        uint256 TotalLp = ERC20(_Contract).totalSupply();\r\n        uint256 SubjectLp = ERC20(_Contract).balanceOf(_Subject);\r\n        uint256 TotalTokensOnLp = ERC20(_Token).balanceOf(_Contract);\r\n        //SubjectLp * TotalTokensOnLp / TotalLp\r\n        return SafeMath.div(SafeMath.mul(SubjectLp, TotalTokensOnLp), TotalLp);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ChecksCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Subject\",\"type\":\"address\"}],\"name\":\"CalcTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ContractAddress\",\"type\":\"address\"}],\"name\":\"AddNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Token\",\"type\":\"address\"},{\"name\":\"_LpContract\",\"type\":\"address\"}],\"name\":\"AddNewLpCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RemoveLastBalanceCheckData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Subject\",\"type\":\"address\"}],\"name\":\"IsPOZHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MinHold\",\"type\":\"uint256\"}],\"name\":\"SetMinHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RemoveAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ContractAddress\",\"type\":\"address\"}],\"name\":\"AddNewStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Benefit","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://820ddeb7c86168e0bb74a149c26f7bed279453c1995c9a02e388e8e019dec591"}]}