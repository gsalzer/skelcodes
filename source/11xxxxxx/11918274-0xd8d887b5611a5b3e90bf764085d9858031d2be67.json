{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n /**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n    uint _numerator  = numerator * 10 ** (precision+1);\r\n    uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n    return (value*_quotient/1000000000000000000);\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract UCOSTOKEN is ERC20 { \r\n    \r\n    using SafeMath for uint256;\r\n    string public constant name     \t\t= \"UCOSTOKEN\";                  // Name of the token\r\n    string public constant symbol   \t\t= \"UCOS\";                       // Symbol of token\r\n    uint8 public constant decimals  \t\t= 18;                           // Decimal of token\r\n    uint public premined           \t\t\t= 45000000 * 10 ** 18;          // 45 million in premined\r\n    uint public smartmine           \t\t= 60000000 * 10 ** 18;      \t// 60 million in Smart Mining\r\n    uint public posmine    \t\t\t\t\t= 45000000 * 10 ** 18;         \t// 45 million in POS Mining\r\n    address public owner;                                           \t\t// Owner of this contract\r\n\taddress public founder;\r\n\taddress public developer;\r\n\tuint256 internal stakePer_              = 1500000000000000000;\t\t\t//POS stake percent\r\n\tmapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal stakeBalanceLedger_;\r\n    mapping(address => uint256) internal stakingTime_;\r\n\t\r\n\t\r\n    mapping(address => uint256) internal mintingDate;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\t\r\n\t//Genesis Mining start\r\n\tuint256 public totalGenesisAddresses;\r\n    uint256 public currentGenesisAddresses;\r\n    uint256 public initialSupplyPerAddress;\r\n    uint256 public initialBlockCount;\r\n    uint256 private minedBlocks;\r\n    uint256 public rewardPerBlockPerAddress;\r\n    uint256 private availableAmount;\r\n    uint256 private availableBalance;\r\n    uint256 private totalMaxAvailableAmount;\r\n     mapping (address => bool) public genesisAddress;\r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function UCOSTOKEN() {\r\n\t\r\n\t\tuint developerbal \t= 2250000 * 10 ** 18;  //5% from premined for developer\r\n\t\tdeveloper = 0x120f8717d16d4167DA4e8c6217Ba718cA2C299fB;\r\n\t\tfounder = 0xe860E8A7d8AC08AfBB0b03BCB5c0B822A776159C;\r\n        balances[msg.sender] = developerbal;\r\n        Transfer(0, msg.sender, developerbal);\r\n\t\tbalances[founder] = premined - developerbal;\r\n        Transfer(0, founder, premined - developerbal);\r\n        \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\trewardPerBlockPerAddress = 38051750000000000;\r\n\t\tinitialSupplyPerAddress = 400000 * 10 ** 18;\r\n\t\ttotalGenesisAddresses = 150;\r\n\t\tcurrentGenesisAddresses = 0;\r\n\t\tinitialBlockCount = block.number;\r\n    }\r\n    \r\n      \r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    // Token minting function\r\n\t\r\n\tfunction mint(uint256 _amountOfTokens) public{\r\n        address _customerAddress            = msg.sender;\r\n        require(_amountOfTokens >= 1000 * 10 ** 18);\r\n        require (balances[_customerAddress] >= _amountOfTokens);\r\n       \r\n        stakingTime_[_customerAddress]      = now;\r\n        stakeBalanceLedger_[_customerAddress] = SafeMath.add(stakeBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        balances[_customerAddress] = SafeMath.sub(balances[_customerAddress], _amountOfTokens);\r\n\t\t\r\n\t\t\r\n    }\r\n\t\r\n\t function stakeTokensTime(address _customerAddress) public view returns(uint256){\r\n        return stakingTime_[_customerAddress];\r\n    }\r\n\t\r\n\tfunction unmint() public {\r\n       \r\n        address _customerAddress            = msg.sender;\r\n    \r\n       \r\n        uint256 _amountOfTokens             = stakeBalanceLedger_[_customerAddress];\r\n        uint256 timediff                    = SafeMath.sub(now, stakingTime_[_customerAddress]);\r\n        uint256 dayscount                   = SafeMath.div(timediff, 604800); //Weekly POS rewards\r\n        uint256 roiPercent                  = SafeMath.mul(dayscount, stakePer_);\r\n        uint256 roiTokens                   = SafeMath.percent(_amountOfTokens,roiPercent,100,18);\r\n        uint256 finalBalance                = SafeMath.add(_amountOfTokens,roiTokens/1e18);\r\n        \r\n    \r\n        balances[_customerAddress] = SafeMath.add(balances[_customerAddress], finalBalance);\r\n        stakeBalanceLedger_[_customerAddress] = 0;\r\n        stakingTime_[_customerAddress]      = 0;\r\n        \r\n    }\r\n\t\r\n\t\r\n    \r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success) {\r\n        require( _to != 0x0);\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require( _spender != 0x0);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        require( _owner != 0x0 && _spender !=0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n\t\r\n\t function transfer(address _to, uint256 _value)\r\n    {\r\n      if (genesisAddress[_to]) throw;\r\n\r\n      if (balances[msg.sender] < _value) throw;\r\n\r\n      if (balances[_to] + _value < balances[_to]) throw;\r\n\r\n      if (genesisAddress[msg.sender])\r\n      {\r\n    \t   minedBlocks = block.number - initialBlockCount;\r\n         if(minedBlocks % 2 != 0){\r\n           minedBlocks = minedBlocks - 1;\r\n         }\r\n    \t    if (minedBlocks < 10512000)\r\n    \t     {\r\n    \t\t       availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t       totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n    \t\t       availableBalance = balances[msg.sender] - totalMaxAvailableAmount;\r\n    \t\t       if (_value > availableBalance) throw;\r\n    \t     }\r\n      }\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns (bool success) {\r\n        require( _to != 0x0);       \r\n        require(balances[address(this)] >= _amount && _amount > 0);\r\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(address(this), _to, _amount);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction currentEthBlock() constant returns (uint256 blockNumber)\r\n    {\r\n    \treturn block.number;\r\n    }\r\n\r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n      if(initialBlockCount == 0){\r\n        return 0;\r\n      }\r\n      else{\r\n      return block.number - initialBlockCount;\r\n    }\r\n    }\r\n\t\r\n\t//set Genesis\r\n\t\r\n    function setGenesisAddressArray(address[] _address) public returns (bool success)\r\n    {\r\n      if(initialBlockCount == 0) throw;\r\n      uint256 tempGenesisAddresses = currentGenesisAddresses + _address.length;\r\n      if (tempGenesisAddresses <= totalGenesisAddresses )\r\n    \t{\r\n    \t\tif (msg.sender == developer)\r\n    \t\t{\r\n          currentGenesisAddresses = currentGenesisAddresses + _address.length;\r\n    \t\t\tfor (uint i = 0; i < _address.length; i++)\r\n    \t\t\t{\r\n    \t\t\t\tbalances[_address[i]] = initialSupplyPerAddress;\r\n    \t\t\t\tgenesisAddress[_address[i]] = true;\r\n    \t\t\t}\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\t  function availableBalanceOf(address _address) constant returns (uint256 Balance)\r\n    {\r\n    \tif (genesisAddress[_address])\r\n    \t{\r\n    \t\tminedBlocks = block.number - initialBlockCount;\r\n        if(minedBlocks % 2 != 0){\r\n          minedBlocks = minedBlocks - 1;\r\n        }\r\n\r\n    \t\tif (minedBlocks >= 10512000) return balances[_address];\r\n    \t\t  availableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    \t\t  totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\r\n          availableBalance = balances[_address] - totalMaxAvailableAmount;\r\n          return availableBalance;\r\n    \t}\r\n    \telse {\r\n    \t\treturn balances[_address];\r\n      }\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply)\r\n    {\r\n      if (initialBlockCount != 0)\r\n      {\r\n      minedBlocks = block.number - initialBlockCount;\r\n      if(minedBlocks % 2 != 0){\r\n        minedBlocks = minedBlocks - 1;\r\n      }\r\n    \tavailableAmount = rewardPerBlockPerAddress*minedBlocks;\r\n    }\r\n    else{\r\n      availableAmount = 0;\r\n    }\r\n    \treturn availableAmount*totalGenesisAddresses+premined+posmine;\r\n    }\r\n\r\n    function maxTotalSupply() constant returns (uint256 maxSupply)\r\n    {\r\n    \treturn initialSupplyPerAddress*totalGenesisAddresses+premined+posmine;\r\n    }\r\n\t\r\n\r\n    function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEthBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupplyPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartmine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unmint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"stakeTokensTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"setGenesisAddressArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"posmine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGenesisAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"genesisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerBlockPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UCOSTOKEN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7907b822fe76efb3ea8a75afbb319ef0e346fb9ba1b25e76cb9bba3e41d5b663"}]}