{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/OwnableProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableProxy {\r\n    address private _proxyOwner;\r\n    address private _pendingProxyOwner;\r\n\r\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event NewPendingOwner(address indexed currentOwner, address indexed pendingOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _proxyOwner = msg.sender;\r\n        emit ProxyOwnershipTransferred(address(0), _proxyOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function proxyOwner() public view returns (address) {\r\n        return _proxyOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function pendingProxyOwner() public view returns (address) {\r\n        return _pendingProxyOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyProxyOwner() {\r\n        require(isProxyOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isProxyOwner() public view returns (bool) {\r\n        return msg.sender == _proxyOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n        _transferProxyOwnership(newOwner);\r\n        emit NewPendingOwner(_proxyOwner, newOwner);\r\n    }\r\n\r\n    function claimProxyOwnership() public {\r\n        _claimProxyOwnership(msg.sender);\r\n    }\r\n\r\n    function initProxyOwnership(address newOwner) public {\r\n        require(_proxyOwner == address(0), \"Ownable: already owned\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferProxyOwnership(newOwner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferProxyOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _pendingProxyOwner = newOwner;\r\n    }\r\n\r\n    function _claimProxyOwnership(address newOwner) internal {\r\n        require(newOwner == _pendingProxyOwner, \"Claimed by wrong address\");\r\n        emit ProxyOwnershipTransferred(_proxyOwner, newOwner);\r\n        _proxyOwner = newOwner;\r\n        _pendingProxyOwner = address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/TokenProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract TokenProxy is OwnableProxy {\r\n    event Upgraded(address indexed implementation);\r\n    address public implementation;\r\n\r\n    function upgradeTo(address _address) public onlyProxyOwner{\r\n        require(_address != implementation, \"New implementation cannot be the same as old\");\r\n        implementation = _address;\r\n        emit Upgraded(_address);\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    \r\n    function () external payable {\r\n        address _impl = implementation;\r\n        require(_impl != address(0));\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, returndatasize, calldatasize)\r\n            let result := delegatecall(gas, _impl, ptr, calldatasize, returndatasize, returndatasize)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    function() external payable {\r\n        address position = implementation;\r\n        \r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, returndatasize, calldatasize)\r\n            let result := delegatecall(gas, sload(position), ptr, calldatasize, returndatasize, returndatasize)\r\n            returndatacopy(ptr, 0, returndatasize)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, returndatasize) }\r\n            default { return(ptr, returndatasize) }\r\n        }\r\n    }\r\n    */\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingProxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"}]","ContractName":"TokenProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://df4a30b87a8fd9d28ec03f3a4aa94d4082701e2711caf8d14f6f7eee63bc7aa9"}]}