{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\n\r\nabstract contract ESMThresholdSetter {\r\n    function recomputeThreshold() virtual public;\r\n}\r\n\r\nabstract contract TokenLike {\r\n    function totalSupply() virtual public view returns (uint256);\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function transfer(address, uint256) virtual public returns (bool);\r\n    function transferFrom(address, address, uint256) virtual public returns (bool);\r\n}\r\n\r\nabstract contract GlobalSettlementLike {\r\n    function shutdownSystem() virtual public;\r\n}\r\n\r\ncontract ESM {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) public isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) public isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"esm/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    TokenLike public protocolToken;                 // collateral\r\n    GlobalSettlementLike public globalSettlement;   // shutdown module\r\n    ESMThresholdSetter public thresholdSetter;      // threshold setter\r\n    address public tokenBurner;                     // burner\r\n    uint256 public triggerThreshold;                // threshold\r\n    uint256 public settled;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint256 wad);\r\n    event ModifyParameters(bytes32 parameter, address account);\r\n    event Shutdown();\r\n    event FailRecomputeThreshold(bytes revertReason);\r\n\r\n    constructor(\r\n      address protocolToken_,\r\n      address globalSettlement_,\r\n      address tokenBurner_,\r\n      address thresholdSetter_,\r\n      uint256 triggerThreshold_\r\n    ) public {\r\n        require(both(triggerThreshold_ > 0, triggerThreshold_ < TokenLike(protocolToken_).totalSupply()), \"esm/threshold-not-within-bounds\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n        protocolToken = TokenLike(protocolToken_);\r\n        globalSettlement = GlobalSettlementLike(globalSettlement_);\r\n        thresholdSetter = ESMThresholdSetter(thresholdSetter_);\r\n        tokenBurner = tokenBurner_;\r\n        triggerThreshold = triggerThreshold_;\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(bytes32(\"triggerThreshold\"), triggerThreshold_);\r\n        emit ModifyParameters(bytes32(\"thresholdSetter\"), thresholdSetter_);\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x + y;\r\n        require(z >= x);\r\n    }\r\n\r\n    // --- Utils ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    function modifyParameters(bytes32 parameter, uint256 wad) external {\r\n        require(settled == 0, \"esm/already-settled\");\r\n        require(either(address(thresholdSetter) == msg.sender, authorizedAccounts[msg.sender] == 1), \"esm/account-not-authorized\");\r\n        if (parameter == \"triggerThreshold\") {\r\n          require(both(wad > 0, wad < protocolToken.totalSupply()), \"esm/threshold-not-within-bounds\");\r\n          triggerThreshold = wad;\r\n        }\r\n        else revert(\"esm/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, wad);\r\n    }\r\n    function modifyParameters(bytes32 parameter, address account) external isAuthorized {\r\n        require(settled == 0, \"esm/already-settled\");\r\n        if (parameter == \"thresholdSetter\") {\r\n          thresholdSetter = ESMThresholdSetter(account);\r\n          // Make sure the update works\r\n          thresholdSetter.recomputeThreshold();\r\n        }\r\n        else revert(\"esm/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, account);\r\n    }\r\n\r\n    function recomputeThreshold() internal {\r\n        if (address(thresholdSetter) != address(0)) {\r\n          try thresholdSetter.recomputeThreshold() {}\r\n          catch(bytes memory revertReason) {\r\n            emit FailRecomputeThreshold(revertReason);\r\n          }\r\n        }\r\n    }\r\n    function shutdown() external {\r\n        require(settled == 0, \"esm/already-settled\");\r\n        recomputeThreshold();\r\n        settled = 1;\r\n        require(protocolToken.transferFrom(msg.sender, tokenBurner, triggerThreshold), \"esm/transfer-failed\");\r\n        emit Shutdown();\r\n        globalSettlement.shutdownSystem();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalSettlement_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenBurner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thresholdSetter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"triggerThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"FailRecomputeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalSettlement\",\"outputs\":[{\"internalType\":\"contract GlobalSettlementLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdSetter\",\"outputs\":[{\"internalType\":\"contract ESMThresholdSetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ESM","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f40000000000000000000000006368a4ba80fc780a9a0fea547239c4635b97fd70000000000000000000000000b10409fc293f987841964c4fcfef887d9ece799b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ed2b525841adfc00000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a8caa240374aa7978a158c88650d176be010b34928b0e23e3bee64fbb1c0d60f"}]}