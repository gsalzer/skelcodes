{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract ERC1820Registry {\r\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\r\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address);\r\n    function setManager(address _addr, address _newManager) external;\r\n    function getManager(address _addr) public view returns (address);\r\n}\r\n\r\n\r\n/// Base client to interact with the registry.\r\ncontract ERC1820Client {\r\n    ERC1820Registry constant ERC1820REGISTRY = ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    function setInterfaceImplementation(string memory _interfaceLabel, address _implementation) internal {\r\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\r\n        ERC1820REGISTRY.setInterfaceImplementer(address(this), interfaceHash, _implementation);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string memory _interfaceLabel) internal view returns(address) {\r\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\r\n        return ERC1820REGISTRY.getInterfaceImplementer(addr, interfaceHash);\r\n    }\r\n\r\n    function delegateManagement(address _newManager) internal {\r\n        ERC1820REGISTRY.setManager(address(this), _newManager);\r\n    }\r\n}\r\n\r\n/*\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n\r\n\r\n\r\ncontract ERC1820Implementer {\r\n  bytes32 constant ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\r\n\r\n  mapping(bytes32 => bool) internal _interfaceHashes;\r\n\r\n  function canImplementInterfaceForAddress(bytes32 interfaceHash, address /*addr*/) // Comments to avoid compilation warnings for unused variables.\r\n    external\r\n    view\r\n    returns(bytes32)\r\n  {\r\n    if(_interfaceHashes[interfaceHash]) {\r\n      return ERC1820_ACCEPT_MAGIC;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  function _setInterface(string memory interfaceLabel) internal {\r\n    _interfaceHashes[keccak256(abi.encodePacked(interfaceLabel))] = true;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n\r\n\r\n/**\r\n * @title Holdable ERC20 Token Interface.\r\n * @dev like approve except the tokens can't be spent by the sender while they are on hold.\r\n */\r\ninterface IERC20HoldableToken {\r\n    enum HoldStatusCode {Nonexistent, Held, Executed, Released}\r\n\r\n    event NewHold(\r\n        bytes32 indexed holdId,\r\n        address indexed recipient,\r\n        address indexed notary,\r\n        uint256 amount,\r\n        uint256 expirationDateTime,\r\n        bytes32 lockHash\r\n    );\r\n    event ExecutedHold(\r\n        bytes32 indexed holdId,\r\n        bytes32 lockPreimage,\r\n        address recipient\r\n    );\r\n    event ReleaseHold(bytes32 indexed holdId, address sender);\r\n\r\n    /**\r\n     @notice Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.\r\n     @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.\r\n     @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.\r\n     @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.\r\n     @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.\r\n     @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.\r\n     @return a unique identifier for the hold.\r\n     */\r\n    function hold(\r\n        address recipient,\r\n        address notary,\r\n        uint256 amount,\r\n        uint256 expirationDateTime,\r\n        bytes32 lockHash\r\n    ) external returns (bytes32 holdId);\r\n\r\n    /**\r\n     @notice Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.\r\n     @param holdId a unique identifier for the hold.\r\n     */\r\n    function executeHold(bytes32 holdId) external;\r\n\r\n    /**\r\n     @notice Called by the notary to transfer the held tokens to the recipient that was set at the hold.\r\n     @param holdId a unique identifier for the hold.\r\n     @param lockPreimage the image used to generate the lock hash with a keccak256 hash\r\n     */\r\n    function executeHold(bytes32 holdId, bytes32 lockPreimage) external;\r\n\r\n    /**\r\n     @notice Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.\r\n     @param holdId a unique identifier for the hold.\r\n     @param lockPreimage the image used to generate the lock hash with a keccak256 hash\r\n     @param recipient the account the tokens will be transferred to on execution.\r\n     */\r\n    function executeHold(\r\n        bytes32 holdId,\r\n        bytes32 lockPreimage,\r\n        address recipient\r\n    ) external;\r\n\r\n    /**\r\n     @notice Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.\r\n     @param holdId a unique identifier for the hold.\r\n     */\r\n    function releaseHold(bytes32 holdId) external;\r\n\r\n    /**\r\n     @notice Amount of tokens owned by an account that are available for transfer. That is, the gross balance less any held tokens.\r\n     @param account owner of the tokens√ü\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     @notice Amount of tokens owned by an account that are held pending execution or release.\r\n     @param account owner of the tokens\r\n     */\r\n    function holdBalanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     @notice Total amount of tokens owned by an account including all the held tokens pending execution or release.\r\n     @param account owner of the tokens\r\n     */\r\n    function grossBalanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupplyOnHold() external view returns (uint256);\r\n\r\n    /**\r\n     @param holdId a unique identifier for the hold.\r\n     @return hold status code.\r\n     */\r\n    function holdStatus(bytes32 holdId) external view returns (HoldStatusCode);\r\n}\r\n\r\n/*\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface HoldableERC1400TokenExtension {\r\n    enum HoldStatusCode {\r\n        Nonexistent,\r\n        Ordered,\r\n        Executed,\r\n        ExecutedAndKeptOpen,\r\n        ReleasedByNotary,\r\n        ReleasedByPayee,\r\n        ReleasedOnExpiration\r\n    }\r\n\r\n    function executeHold(\r\n        address token,\r\n        bytes32 holdId,\r\n        uint256 value,\r\n        bytes32 lockPreimage\r\n    ) external;\r\n\r\n    function retrieveHoldData(address token, bytes32 holdId) external view returns (\r\n        bytes32 partition,\r\n        address sender,\r\n        address recipient,\r\n        address notary,\r\n        uint256 value,\r\n        uint256 expiration,\r\n        bytes32 secretHash,\r\n        bytes32 secret,\r\n        HoldStatusCode status\r\n    );\r\n}\r\n\r\n/**\r\n * @title DVPHoldableLockable\r\n * @notice Facilitates the atomic settlement of ERC20 and ERC1400 Holdable Tokens.\r\n */\r\ncontract DVPHoldableLockable is ERC1820Client, ERC1820Implementer {\r\n    string internal constant DVP_HOLDABLE_LOCKABLE = \"DVPHoldableLockable\";\r\n    \r\n    string internal constant ERC1400_TOKENS_VALIDATOR = \"ERC1400TokensValidator\";\r\n\r\n    enum Standard {Undefined, HoldableERC20, HoldableERC1400}\r\n\r\n    event ExecuteHolds(\r\n        address indexed token1,\r\n        bytes32 token1HoldId,\r\n        address indexed token2,\r\n        bytes32 token2HoldId,\r\n        bytes32 preimage,\r\n        address token1Recipient,\r\n        address token2Recipient\r\n    );\r\n\r\n    /**\r\n    @dev Include token events so they can be parsed by Ethereum clients from the settlement transactions.\r\n     */\r\n    // Holdable\r\n    event ExecutedHold(bytes32 indexed holdId, bytes32 lockPreimage);\r\n    event ExecutedHold(\r\n        bytes32 indexed holdId,\r\n        bytes32 lockPreimage,\r\n        address recipient\r\n    );\r\n    // ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    // ERC1400\r\n    event TransferByPartition(\r\n        bytes32 indexed fromPartition,\r\n        address operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n    event CreateNote(\r\n        address indexed owner,\r\n        bytes32 indexed noteHash,\r\n        bytes metadata\r\n    );\r\n    event DestroyNote(address indexed owner, bytes32 indexed noteHash);\r\n\r\n    /**\r\n     * [DVP CONSTRUCTOR]\r\n     */\r\n    constructor() public {\r\n        ERC1820Implementer._setInterface(DVP_HOLDABLE_LOCKABLE);\r\n    }\r\n\r\n    /**\r\n     @notice Execute holds where the hold recipients are already known\r\n     @param token1 contract address of the first token\r\n     @param token1HoldId 32 byte hold identified from the first token\r\n     @param tokenStandard1 Standard enum indicating if the first token is HoldableERC20 or HoldableERC1400\r\n     @param token2 contract address of the second token\r\n     @param token2HoldId 32 byte hold identified from the second token\r\n     @param tokenStandard2 Standard enum indicating if the second token is HoldableERC20 or HoldableERC1400\r\n     @param preimage optional preimage of the SHA256 hash used to lock both the token holds. This can be a zero address if no lock hash was used.\r\n     */\r\n    function executeHolds(\r\n        address token1,\r\n        bytes32 token1HoldId,\r\n        Standard tokenStandard1,\r\n        address token2,\r\n        bytes32 token2HoldId,\r\n        Standard tokenStandard2,\r\n        bytes32 preimage\r\n    ) public {\r\n        _executeHolds(\r\n            token1,\r\n            token1HoldId,\r\n            tokenStandard1,\r\n            token2,\r\n            token2HoldId,\r\n            tokenStandard2,\r\n            preimage,\r\n            address(0),\r\n            address(0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     @notice Execute holds where the hold recipients are only known at execution.\r\n     @param token1 contract address of the first token\r\n     @param token1HoldId 32 byte hold identified from the first token\r\n     @param tokenStandard1 Standard enum indicating if the first token is HoldableERC20 or HoldableERC1400\r\n     @param token2 contract address of the second token\r\n     @param token2HoldId 32 byte hold identified from the second token\r\n     @param tokenStandard2 Standard enum indicating if the second token is HoldableERC20 or HoldableERC1400\r\n     @param preimage optional preimage of the SHA256 hash used to lock both the token holds. This can be a zero address if no lock hash was used.\r\n     @param token1Recipient address of the recipient of the first tokens.\r\n     @param token2Recipient address of the recipient of the second tokens.\r\n     */\r\n    function executeHolds(\r\n        address token1,\r\n        bytes32 token1HoldId,\r\n        Standard tokenStandard1,\r\n        address token2,\r\n        bytes32 token2HoldId,\r\n        Standard tokenStandard2,\r\n        bytes32 preimage,\r\n        address token1Recipient,\r\n        address token2Recipient\r\n    ) public {\r\n        _executeHolds(\r\n            token1,\r\n            token1HoldId,\r\n            tokenStandard1,\r\n            token2,\r\n            token2HoldId,\r\n            tokenStandard2,\r\n            preimage,\r\n            token1Recipient,\r\n            token2Recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     @dev this is in a separate function to work around stack too deep problems\r\n     */\r\n    function _executeHolds(\r\n        address token1,\r\n        bytes32 token1HoldId,\r\n        Standard tokenStandard1,\r\n        address token2,\r\n        bytes32 token2HoldId,\r\n        Standard tokenStandard2,\r\n        bytes32 preimage,\r\n        address token1Recipient,\r\n        address token2Recipient\r\n    ) internal {\r\n        // Token 1\r\n        if (tokenStandard1 == Standard.HoldableERC20) {\r\n            _executeERC20Hold(token1, token1HoldId, preimage, token1Recipient);\r\n        } else if (tokenStandard1 == Standard.HoldableERC1400) {\r\n            _executeERC1400Hold(\r\n                token1,\r\n                token1HoldId,\r\n                preimage\r\n            );\r\n        } else {\r\n            revert(\"invalid token standard\");\r\n        }\r\n\r\n        // Token 2\r\n        if (tokenStandard2 == Standard.HoldableERC20) {\r\n            _executeERC20Hold(token2, token2HoldId, preimage, token2Recipient);\r\n        } else if (tokenStandard2 == Standard.HoldableERC1400) {\r\n            _executeERC1400Hold(\r\n                token2,\r\n                token2HoldId,\r\n                preimage\r\n            );\r\n        } else {\r\n            revert(\"invalid token standard\");\r\n        }\r\n\r\n        emit ExecuteHolds(\r\n            token1,\r\n            token1HoldId,\r\n            token2,\r\n            token2HoldId,\r\n            preimage,\r\n            token1Recipient,\r\n            token2Recipient\r\n        );\r\n    }\r\n\r\n    function _executeERC20Hold(\r\n        address token,\r\n        bytes32 tokenHoldId,\r\n        bytes32 preimage,\r\n        address tokenRecipient\r\n    ) internal {\r\n        require(token != address(0), \"token can not be a zero address\");\r\n\r\n        if (tokenRecipient == address(0)) {\r\n            IERC20HoldableToken(token).executeHold(tokenHoldId, preimage);\r\n        } else {\r\n            IERC20HoldableToken(token).executeHold(\r\n                tokenHoldId,\r\n                preimage,\r\n                tokenRecipient\r\n            );\r\n        }\r\n    }\r\n\r\n    function _executeERC1400Hold(\r\n        address token,\r\n        bytes32 tokenHoldId,\r\n        bytes32 preimage\r\n    ) internal {\r\n        require(token != address(0), \"token can not be a zero address\");\r\n\r\n        address tokenExtension = interfaceAddr(token, ERC1400_TOKENS_VALIDATOR);\r\n        require(\r\n            tokenExtension != address(0),\r\n            \"token has no holdable token extension\"\r\n        );\r\n\r\n        uint256 holdValue;\r\n        (,,,,holdValue,,,,) = HoldableERC1400TokenExtension(tokenExtension).retrieveHoldData(token, tokenHoldId);\r\n\r\n        HoldableERC1400TokenExtension(tokenExtension).executeHold(\r\n            token,\r\n            tokenHoldId,\r\n            holdValue,\r\n            preimage\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token1HoldId\",\"type\":\"bytes32\"},{\"name\":\"tokenStandard1\",\"type\":\"uint8\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"token2HoldId\",\"type\":\"bytes32\"},{\"name\":\"tokenStandard2\",\"type\":\"uint8\"},{\"name\":\"preimage\",\"type\":\"bytes32\"}],\"name\":\"executeHolds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token1HoldId\",\"type\":\"bytes32\"},{\"name\":\"tokenStandard1\",\"type\":\"uint8\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"token2HoldId\",\"type\":\"bytes32\"},{\"name\":\"tokenStandard2\",\"type\":\"uint8\"},{\"name\":\"preimage\",\"type\":\"bytes32\"},{\"name\":\"token1Recipient\",\"type\":\"address\"},{\"name\":\"token2Recipient\",\"type\":\"address\"}],\"name\":\"executeHolds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token1HoldId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token2HoldId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"preimage\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token1Recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token2Recipient\",\"type\":\"address\"}],\"name\":\"ExecuteHolds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holdId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lockPreimage\",\"type\":\"bytes32\"}],\"name\":\"ExecutedHold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holdId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lockPreimage\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ExecutedHold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromPartition\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"TransferByPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"noteHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"CreateNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"noteHash\",\"type\":\"bytes32\"}],\"name\":\"DestroyNote\",\"type\":\"event\"}]","ContractName":"DVPHoldableLockable","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fff57b9f7261c3d8a6cf4c2ec7478b4695d21b2e992e86bcf6b79cc5db0befde"}]}