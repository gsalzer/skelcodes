{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.3;\r\n\r\n//SPDX-LICENSE-IDENTIFIER: UNLICENSED\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ninterface ERC20Interface {\r\n    function owner() external view returns (address);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n}\r\n\r\ninterface DateTimeInterface {\r\n  function DOW_FRI (  ) external view returns ( uint256 );\r\n  function DOW_MON (  ) external view returns ( uint256 );\r\n  function DOW_SAT (  ) external view returns ( uint256 );\r\n  function DOW_SUN (  ) external view returns ( uint256 );\r\n  function DOW_THU (  ) external view returns ( uint256 );\r\n  function DOW_TUE (  ) external view returns ( uint256 );\r\n  function DOW_WED (  ) external view returns ( uint256 );\r\n  function OFFSET19700101 (  ) external view returns ( int256 );\r\n  function SECONDS_PER_DAY (  ) external view returns ( uint256 );\r\n  function SECONDS_PER_HOUR (  ) external view returns ( uint256 );\r\n  function SECONDS_PER_MINUTE (  ) external view returns ( uint256 );\r\n  function _daysFromDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( uint256 _days );\r\n  function _daysToDate ( uint256 _days ) external pure returns ( uint256 year, uint256 month, uint256 day );\r\n  function _getDaysInMonth ( uint256 year, uint256 month ) external pure returns ( uint256 daysInMonth );\r\n  function _isLeapYear ( uint256 year ) external pure returns ( bool leapYear );\r\n  function _now (  ) external view returns ( uint256 timestamp );\r\n  function _nowDateTime (  ) external view returns ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second );\r\n  function addDays ( uint256 timestamp, uint256 _days ) external pure returns ( uint256 newTimestamp );\r\n  function addHours ( uint256 timestamp, uint256 _hours ) external pure returns ( uint256 newTimestamp );\r\n  function addMinutes ( uint256 timestamp, uint256 _minutes ) external pure returns ( uint256 newTimestamp );\r\n  function addMonths ( uint256 timestamp, uint256 _months ) external pure returns ( uint256 newTimestamp );\r\n  function addSeconds ( uint256 timestamp, uint256 _seconds ) external pure returns ( uint256 newTimestamp );\r\n  function addYears ( uint256 timestamp, uint256 _years ) external pure returns ( uint256 newTimestamp );\r\n  function diffDays ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _days );\r\n  function diffHours ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _hours );\r\n  function diffMinutes ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _minutes );\r\n  function diffMonths ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _months );\r\n  function diffSeconds ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _seconds );\r\n  function diffYears ( uint256 fromTimestamp, uint256 toTimestamp ) external pure returns ( uint256 _years );\r\n  function getDay ( uint256 timestamp ) external pure returns ( uint256 day );\r\n  function getDayOfWeek ( uint256 timestamp ) external pure returns ( uint256 dayOfWeek );\r\n  function getDaysInMonth ( uint256 timestamp ) external pure returns ( uint256 daysInMonth );\r\n  function getHour ( uint256 timestamp ) external pure returns ( uint256 hour );\r\n  function getMinute ( uint256 timestamp ) external pure returns ( uint256 minute );\r\n  function getMonth ( uint256 timestamp ) external pure returns ( uint256 month );\r\n  function getSecond ( uint256 timestamp ) external pure returns ( uint256 second );\r\n  function getYear ( uint256 timestamp ) external pure returns ( uint256 year );\r\n  function isLeapYear ( uint256 timestamp ) external pure returns ( bool leapYear );\r\n  function isValidDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( bool valid );\r\n  function isValidDateTime ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second ) external pure returns ( bool valid );\r\n  function isWeekDay ( uint256 timestamp ) external pure returns ( bool weekDay );\r\n  function isWeekEnd ( uint256 timestamp ) external pure returns ( bool weekEnd );\r\n  function subDays ( uint256 timestamp, uint256 _days ) external pure returns ( uint256 newTimestamp );\r\n  function subHours ( uint256 timestamp, uint256 _hours ) external pure returns ( uint256 newTimestamp );\r\n  function subMinutes ( uint256 timestamp, uint256 _minutes ) external pure returns ( uint256 newTimestamp );\r\n  function subMonths ( uint256 timestamp, uint256 _months ) external pure returns ( uint256 newTimestamp );\r\n  function subSeconds ( uint256 timestamp, uint256 _seconds ) external pure returns ( uint256 newTimestamp );\r\n  function subYears ( uint256 timestamp, uint256 _years ) external pure returns ( uint256 newTimestamp );\r\n  function timestampFromDate ( uint256 year, uint256 month, uint256 day ) external pure returns ( uint256 timestamp );\r\n  function timestampFromDateTime ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second ) external pure returns ( uint256 timestamp );\r\n  function timestampToDate ( uint256 timestamp ) external pure returns ( uint256 year, uint256 month, uint256 day );\r\n  function timestampToDateTime ( uint256 timestamp ) external pure returns ( uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second );\r\n}\r\n\r\n/**\r\n  * @notice Vesting contract designed to release funds on a monthly basis over a 12 month period\r\n  * @notice all funds deposited into the vesting contract are evenly distributed across the 12 months\r\n  * @notice The contract was designed to accomodate the needs of Leverage Token and as such may not be applicable in other circumstances\r\n  * @notice for example there is no usage of safe math, as the values being vested by Leverage Token can't overflow so no need for extra gas cost\r\n*/\r\ncontract Vesting {\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public currentCycle;\r\n    uint256 public releaseAmount;\r\n    address public receiver;\r\n    address public owner;\r\n\r\n    ERC20Interface private levI; \r\n    DateTimeInterface private dateI;\r\n\r\n    struct Release {\r\n        uint256 timestamp;\r\n        uint256 released;\r\n    }\r\n\r\n    mapping (uint256 => Release) public releases;\r\n\r\n    event TokensReleased();\r\n\r\n    /**\r\n      * @param _levTokenAddress the address of the deployed LEV token contract\r\n      * @param _dateTimeContract the address of the deployed date time contract\r\n    */\r\n    constructor(address _levTokenAddress, address _dateTimeContract, address _owner) {\r\n        levI = ERC20Interface(_levTokenAddress);\r\n        dateI = DateTimeInterface(_dateTimeContract);\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n      * @notice prepares the contract for vesting, depositing tokens and \r\n      * @notice marking the address that will be allowed to receive vested funds\r\n      * @param _amountToVest is the amount of tokens to be vested\r\n      * @param _receiver is the address that will be allowed to receive the withdrawn funds\r\n    */\r\n    function prepare(uint256 _amountToVest, address _receiver) public {\r\n        // make sure only contract owner can call this\r\n        require(msg.sender == owner);\r\n        // make sure prepared is false\r\n        require(isPrepared() == false);\r\n        require(levI.transferFrom(msg.sender, address(this), _amountToVest));\r\n        // the current time when vesting starts\r\n        uint256 _startTime = dateI._now();\r\n        // the time when vesting ends, and the final token release is allowed\r\n        uint256 _endTime = dateI.addMonths(_startTime, 12);\r\n        // set the last token release\r\n        releases[12].timestamp = _endTime;\r\n        // now set the other 11 token release times\r\n        for (uint i = 1; i <= 11; i++) {\r\n            releases[i].timestamp = dateI.addMonths(_startTime, i);\r\n        }\r\n        // each month release 1/12 of _amountToVest\r\n        releaseAmount = _amountToVest / 12;\r\n        // copy memory variables to storage\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        receiver = _receiver;\r\n        // set current release cycle\r\n        currentCycle = 1;\r\n    }\r\n\r\n    /**\r\n        * @notice release funds for the current vesting cycle\r\n        * @notice while it is callable by anyone, funds are sent to a fixed address\r\n        * @notice regardless of who calls this function, so owner check is avoided to save gas\r\n    */\r\n    function release() public {\r\n        // make sure prepare function has been called and successfully executed\r\n        require(isPrepared() == true);\r\n        // ensure the current cycle hasn't been released\r\n        require(releases[currentCycle].released == 0, \"already released\");\r\n        // mark current cycle as released\r\n        releases[currentCycle].released = 1;\r\n        // get current timestamp\r\n        uint256 timestamp = dateI._now();\r\n        // ensure the current timestamp (date) is on or after the release date\r\n        require(timestamp >= releases[currentCycle].timestamp, \"release timestamp not yet passed\");\r\n        // transfer tokens to designated receiver wallet\r\n        require(levI.transfer(receiver, releaseAmount));\r\n        // move onto the next cycle (if we arent cycle 12 which is last)\r\n        if (currentCycle < 12) {\r\n            currentCycle += 1;\r\n        }\r\n        // emit event indicating tokens are released\r\n        emit TokensReleased();\r\n        \r\n    }\r\n\r\n    /**\r\n      * @notice returns whether or not the given cycle has released the tokens\r\n    */\r\n    function isReleased(uint256 _cycle) public view returns (bool) {\r\n        bool released = false;\r\n        if (releases[_cycle].released == 1) {\r\n            released = true;\r\n        }\r\n        return released;\r\n    }\r\n\r\n    /**\r\n      * @notice returns whether or note the vesting contract has been prepared\r\n    */\r\n    function isPrepared() public view returns (bool) {\r\n        bool prepared = false;\r\n        if (receiver != address(0) && releaseAmount > 0 && currentCycle > 0) {\r\n            prepared = true;\r\n        }\r\n        return prepared;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_levTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dateTimeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrepared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"isReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToVest\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"prepare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4b6ade38760599902a113e025ab6c783fe0b6ff000000000000000000000000aac7b0822dd10edbd553a6dcc4048ff6008b60a90000000000000000000000005a937a7ed60e1a6db7a4c171fbb8acabdb851e30","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://946e76f75e2c4c5cfb1ebe8b20f7a2ef6b4c801e0b1fb1aae0ffa48edb940768"}]}