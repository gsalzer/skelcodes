{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/projects/beam/eth_swap_contracts/contracts/SwapContractAggregateSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\n\\ncontract SwapContractAggregateSignature {\\n\\n    struct Swap {\\n        uint refundTimeInBlocks;\\n        address initiator;\\n        address participant;\\n        uint256 value;\\n    }\\n\\n    mapping(address => Swap) swaps;\\n\\n    function initiate(uint refundTimeInBlocks, address addressFromSecret, address participant) public\\n        payable\\n    {\\n        require(swaps[addressFromSecret].refundTimeInBlocks == 0, \\\"swap for this hash is already initiated\\\");\\n        require(participant != address(0), \\\"invalid participant address\\\");\\n        require(block.number < refundTimeInBlocks, \\\"refundTimeInBlocks has already come\\\");\\n\\n        swaps[addressFromSecret].refundTimeInBlocks = refundTimeInBlocks;\\n        swaps[addressFromSecret].participant = participant;\\n        swaps[addressFromSecret].initiator = msg.sender;\\n        swaps[addressFromSecret].value = msg.value;\\n    }\\n\\n    function redeem(address addressFromSecret, bytes32 r, bytes32 s, uint8 v) public\\n    {\\n        require(msg.sender == swaps[addressFromSecret].participant, \\\"invalid msg.sender\\\");\\n\\n        bytes32 hash = keccak256(abi.encodePacked(addressFromSecret, swaps[addressFromSecret].participant, swaps[addressFromSecret].initiator, swaps[addressFromSecret].refundTimeInBlocks));\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(hash);\\n        address signer = ECDSA.recover(ethSignedMessageHash,  abi.encodePacked(r, s, v));\\n\\n        require(signer == addressFromSecret, \\\"invalid address\\\");\\n\\n        Swap memory tmp = swaps[addressFromSecret];\\n        delete swaps[addressFromSecret];\\n\\n        (bool success, ) = payable(tmp.participant).call{value: tmp.value}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function refund(address addressFromSecret) public\\n    {\\n        require(block.number >= swaps[addressFromSecret].refundTimeInBlocks, \\\"refundTimeInBlocks has not come\\\");\\n        require(msg.sender == swaps[addressFromSecret].initiator, \\\"invalid msg.sender\\\");\\n\\n        Swap memory tmp = swaps[addressFromSecret];\\n        delete swaps[addressFromSecret];\\n\\n        (bool success, ) = payable(tmp.initiator).call{value: tmp.value}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    function getSwapDetails(address addressFromSecret)\\n    public view returns (uint refundTimeInBlocks, address initiator, address participant, uint256 value)\\n    {\\n        refundTimeInBlocks = swaps[addressFromSecret].refundTimeInBlocks;\\n        initiator = swaps[addressFromSecret].initiator;\\n        participant = swaps[addressFromSecret].participant;\\n        value = swaps[addressFromSecret].value;\\n    }\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressFromSecret\",\"type\":\"address\"}],\"name\":\"getSwapDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundTimeInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refundTimeInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressFromSecret\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressFromSecret\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressFromSecret\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwapContractAggregateSignature","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}