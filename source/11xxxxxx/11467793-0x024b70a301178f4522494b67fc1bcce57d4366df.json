{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAddressConfig.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAddressConfig {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction allocator() external view returns (address);\r\n\r\n\tfunction allocatorStorage() external view returns (address);\r\n\r\n\tfunction withdraw() external view returns (address);\r\n\r\n\tfunction withdrawStorage() external view returns (address);\r\n\r\n\tfunction marketFactory() external view returns (address);\r\n\r\n\tfunction marketGroup() external view returns (address);\r\n\r\n\tfunction propertyFactory() external view returns (address);\r\n\r\n\tfunction propertyGroup() external view returns (address);\r\n\r\n\tfunction metricsGroup() external view returns (address);\r\n\r\n\tfunction metricsFactory() external view returns (address);\r\n\r\n\tfunction policy() external view returns (address);\r\n\r\n\tfunction policyFactory() external view returns (address);\r\n\r\n\tfunction policySet() external view returns (address);\r\n\r\n\tfunction policyGroup() external view returns (address);\r\n\r\n\tfunction lockup() external view returns (address);\r\n\r\n\tfunction lockupStorage() external view returns (address);\r\n\r\n\tfunction voteTimes() external view returns (address);\r\n\r\n\tfunction voteTimesStorage() external view returns (address);\r\n\r\n\tfunction voteCounter() external view returns (address);\r\n\r\n\tfunction voteCounterStorage() external view returns (address);\r\n\r\n\tfunction setAllocator(address _addr) external;\r\n\r\n\tfunction setAllocatorStorage(address _addr) external;\r\n\r\n\tfunction setWithdraw(address _addr) external;\r\n\r\n\tfunction setWithdrawStorage(address _addr) external;\r\n\r\n\tfunction setMarketFactory(address _addr) external;\r\n\r\n\tfunction setMarketGroup(address _addr) external;\r\n\r\n\tfunction setPropertyFactory(address _addr) external;\r\n\r\n\tfunction setPropertyGroup(address _addr) external;\r\n\r\n\tfunction setMetricsFactory(address _addr) external;\r\n\r\n\tfunction setMetricsGroup(address _addr) external;\r\n\r\n\tfunction setPolicyFactory(address _addr) external;\r\n\r\n\tfunction setPolicyGroup(address _addr) external;\r\n\r\n\tfunction setPolicySet(address _addr) external;\r\n\r\n\tfunction setPolicy(address _addr) external;\r\n\r\n\tfunction setToken(address _addr) external;\r\n\r\n\tfunction setLockup(address _addr) external;\r\n\r\n\tfunction setLockupStorage(address _addr) external;\r\n\r\n\tfunction setVoteTimes(address _addr) external;\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external;\r\n\r\n\tfunction setVoteCounter(address _addr) external;\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external;\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\taddress private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = _addressConfig;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (IAddressConfig) {\r\n\t\treturn IAddressConfig(_config);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn _config;\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IPolicyGroup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPolicyGroup {\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction addGroupWithoutSetVotingEnd(address _addr) external;\r\n\r\n\tfunction incrementVotingGroupIndex() external;\r\n\r\n\tfunction getVotingGroupIndex() external view returns (uint256);\r\n\r\n\tfunction voting(address _policy) external view returns (bool);\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IPolicyFactory.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPolicyFactory {\r\n\tfunction create(address _newPolicyAddress) external;\r\n\r\n\tfunction convergePolicy(address _currentPolicyAddress) external;\r\n\r\n\tfunction forceAttach(address _policy) external;\r\n}\r\n\r\n// File: contracts/src/policy/PolicyFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A factory contract that creates a new Policy contract.\r\n */\r\ncontract PolicyFactory is UsingConfig, IPolicyFactory, Ownable {\r\n\tevent Create(address indexed _from, address _policy);\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address.\r\n\t */\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t/**\r\n\t * Creates a new Policy contract.\r\n\t */\r\n\tfunction create(address _newPolicyAddress) external {\r\n\t\t/**\r\n\t\t * Validates the passed address is not 0 address.\r\n\t\t */\r\n\t\trequire(_newPolicyAddress != address(0), \"this is illegal address\");\r\n\r\n\t\temit Create(msg.sender, _newPolicyAddress);\r\n\r\n\t\t/**\r\n\t\t * In the case of the first Policy, it will be activated immediately.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\tif (config().policy() == address(0)) {\r\n\t\t\tconfig().setPolicy(_newPolicyAddress);\r\n\t\t\tpolicyGroup.addGroupWithoutSetVotingEnd(_newPolicyAddress);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Adds the created Policy contract to the Policy address set.\r\n\t\t */\r\n\t\tpolicyGroup.addGroup(_newPolicyAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the Policy passed by a vote as an current Policy.\r\n\t */\r\n\tfunction convergePolicy(address _currentPolicyAddress) external {\r\n\t\t/**\r\n\t\t * Verify sender is VoteCounter contract\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().voteCounter(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\tsetPolicy(_currentPolicyAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the policy to force a policy without a vote.\r\n\t */\r\n\tfunction forceAttach(address _policy) external onlyOwner {\r\n\t\t/**\r\n\t\t * Validates the passed Policy address is included the Policy address set\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tIPolicyGroup(config().policyGroup()).isGroup(_policy),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\tsetPolicy(_policy);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the Policy\r\n\t */\r\n\tfunction setPolicy(address _policy) private {\r\n\t\t/**\r\n\t\t * Sets the passed Policy to current Policy.\r\n\t\t */\r\n\t\tconfig().setPolicy(_policy);\r\n\r\n\t\t/**\r\n\t\t * Resets the Policy address set that is accepting votes.\r\n\t\t */\r\n\t\tIPolicyGroup policyGroup = IPolicyGroup(config().policyGroup());\r\n\t\tpolicyGroup.incrementVotingGroupIndex();\r\n\t\tpolicyGroup.addGroup(_policy);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currentPolicyAddress\",\"type\":\"address\"}],\"name\":\"convergePolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPolicyAddress\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"forceAttach\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PolicyFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d8b3b61f3b55d9d5f1e24e3b21532056ba78a6580e8e01850d7ce8ebaddb5e3"}]}