{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\ncontract Owned {\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    address payable owner;\r\n    address payable newOwner;\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner!=address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        if (msg.sender==newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\ncontract Token {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\ncontract StandardToken is Token, Owned {\r\n    bytes4 private constant SelectorFreeze = bytes4(keccak256(bytes('freezeTarget(address,uint256,uint256)')));\r\n    address contractToken;\r\n    uint256 amountClaim;\r\n    uint256 freezeDay;\r\n    mapping (address=>uint256) isClaim;\r\n    \r\n    function setClaim(address token, uint256 value, uint256 day) public onlyOwner{\r\n        contractToken=token;\r\n        amountClaim=value;\r\n        freezeDay=day;\r\n    }\r\n \r\n    function safeTransfer(address token, address to, uint value) internal{\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n    function safeFreeze(address token, address _target, uint256 _day, uint256 _value) internal{\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SelectorFreeze, _target, _day, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n    \r\n    function claim() public{\r\n        require(isClaim[msg.sender]==0,\"Claimed\");\r\n        isClaim[msg.sender]=1;\r\n        safeFreeze(contractToken, msg.sender, freezeDay, amountClaim);\r\n        safeTransfer(contractToken, msg.sender, amountClaim);\r\n    }\r\n    function withdraw(address c, uint256 v) public onlyOwner{\r\n        safeTransfer(c, msg.sender, v);\r\n    }\r\n    function checkClaim(address _target) public view returns (uint256){\r\n        return isClaim[_target];\r\n    }\r\n    constructor() public{\r\n        owner=msg.sender;\r\n    }\r\n    receive () payable external {\r\n        require(msg.value>0);\r\n        owner.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"checkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"setClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StandardToken","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d28bbc36c3cf898e42ba6d09663ac555c765205d4e43d35186f56c3ad4c4d52b"}]}