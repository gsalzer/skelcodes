{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./utils/AccessControl.sol\\\";\\nimport \\\"./utils/Pausable.sol\\\";\\nimport \\\"./utils/SafeMath.sol\\\";\\nimport \\\"./interfaces/IDepositExecute.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./interfaces/IERCHandler.sol\\\";\\nimport \\\"./interfaces/IGenericHandler.sol\\\";\\n\\n/**\\n    @title Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.\\n    @author ChainSafe Systems.\\n */\\ncontract Bridge is Pausable, AccessControl, SafeMath {\\n\\n    uint8   public _chainID;\\n    uint256 public _relayerThreshold;\\n    uint256 public _totalRelayers;\\n    uint256 public _totalProposals;\\n    uint256 public _fee;\\n    uint256 public _expiry;\\n\\n    enum Vote {No, Yes}\\n\\n    enum ProposalStatus {Inactive, Active, Passed, Executed, Cancelled}\\n\\n    struct Proposal {\\n        bytes32 _resourceID;\\n        bytes32 _dataHash;\\n        address[] _yesVotes;\\n        address[] _noVotes;\\n        ProposalStatus _status;\\n        uint256 _proposedBlock;\\n    }\\n\\n    // destinationChainID => number of deposits\\n    mapping(uint8 => uint64) public _depositCounts;\\n    // resourceID => handler address\\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\\n    // depositNonce => destinationChainID => bytes\\n    mapping(uint64 => mapping(uint8 => bytes)) public _depositRecords;\\n    // destinationChainID + depositNonce => dataHash => Proposal\\n    mapping(uint72 => mapping(bytes32 => Proposal)) public _proposals;\\n    // destinationChainID + depositNonce => dataHash => relayerAddress => bool\\n    mapping(uint72 => mapping(bytes32 => mapping(address => bool))) public _hasVotedOnProposal;\\n\\n    event RelayerThresholdChanged(uint indexed newThreshold);\\n    event RelayerAdded(address indexed relayer);\\n    event RelayerRemoved(address indexed relayer);\\n    event Deposit(\\n        uint8   indexed destinationChainID,\\n        bytes32 indexed resourceID,\\n        uint64  indexed depositNonce\\n    );\\n    event ProposalEvent(\\n        uint8           indexed originChainID,\\n        uint64          indexed depositNonce,\\n        ProposalStatus  indexed status,\\n        bytes32 resourceID,\\n        bytes32 dataHash\\n    );\\n\\n    event ProposalVote(\\n        uint8   indexed originChainID,\\n        uint64  indexed depositNonce,\\n        ProposalStatus indexed status,\\n        bytes32 resourceID\\n    );\\n\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    modifier onlyAdmin() {\\n        _onlyAdmin();\\n        _;\\n    }\\n\\n    modifier onlyAdminOrRelayer() {\\n        _onlyAdminOrRelayer();\\n        _;\\n    }\\n\\n    modifier onlyRelayers() {\\n        _onlyRelayers();\\n        _;\\n    }\\n\\n    function _onlyAdminOrRelayer() private {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(RELAYER_ROLE, msg.sender),\\n            \\\"sender is not relayer or admin\\\");\\n    }\\n\\n    function _onlyAdmin() private {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"sender doesn't have admin role\\\");\\n    }\\n\\n    function _onlyRelayers() private {\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"sender doesn't have relayer role\\\");\\n    }\\n\\n    /**\\n        @notice Initializes Bridge, creates and grants {msg.sender} the admin role,\\n        creates and grants {initialRelayers} the relayer role.\\n        @param chainID ID of chain the Bridge contract exists on.\\n        @param initialRelayers Addresses that should be initially granted the relayer role.\\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\\n     */\\n    constructor (uint8 chainID, address[] memory initialRelayers, uint initialRelayerThreshold, uint256 fee, uint256 expiry) {\\n        _chainID = chainID;\\n        _relayerThreshold = initialRelayerThreshold;\\n        _fee = fee;\\n        _expiry = expiry;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(RELAYER_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        for (uint i; i < initialRelayers.length; i++) {\\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\\n            _totalRelayers++;\\n        }\\n\\n    }\\n\\n    /**\\n        @notice Returns true if {relayer} has the relayer role.\\n        @param relayer Address to check.\\n     */\\n    function isRelayer(address relayer) external view returns (bool) {\\n        return hasRole(RELAYER_ROLE, relayer);\\n    }\\n\\n    /**\\n        @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param newAdmin Address that admin role will be granted to.\\n     */\\n    function renounceAdmin(address newAdmin) external onlyAdmin {\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\\n        @notice Only callable by an address that currently has the admin role.\\n     */\\n    function adminPauseTransfers() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\\n        @notice Only callable by an address that currently has the admin role.\\n     */\\n    function adminUnpauseTransfers() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /**\\n        @notice Modifies the number of votes required for a proposal to be considered passed.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param newThreshold Value {_relayerThreshold} will be changed to.\\n        @notice Emits {RelayerThresholdChanged} event.\\n     */\\n    function adminChangeRelayerThreshold(uint newThreshold) external onlyAdmin {\\n        _relayerThreshold = newThreshold;\\n        emit RelayerThresholdChanged(newThreshold);\\n    }\\n\\n    /**\\n        @notice Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param relayerAddress Address of relayer to be added.\\n        @notice Emits {RelayerAdded} event.\\n     */\\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \\\"addr already has relayer role!\\\");\\n        grantRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerAdded(relayerAddress);\\n        _totalRelayers++;\\n    }\\n\\n    /**\\n        @notice Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param relayerAddress Address of relayer to be removed.\\n        @notice Emits {RelayerRemoved} event.\\n     */\\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\\n        require(hasRole(RELAYER_ROLE, relayerAddress), \\\"addr doesn't have relayer role!\\\");\\n        revokeRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerRemoved(relayerAddress);\\n        _totalRelayers--;\\n    }\\n\\n    /**\\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) external onlyAdmin {\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.setResource(resourceID, tokenAddress);\\n    }\\n\\n    /**\\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetGenericResource(\\n        address handlerAddress,\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external onlyAdmin {\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\n        IGenericHandler handler = IGenericHandler(handlerAddress);\\n        handler.setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\n    }\\n\\n    /**\\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin {\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.setBurnable(tokenAddress);\\n    }\\n\\n    /**\\n        @notice Returns a proposal.\\n        @param originChainID Chain ID deposit originated from.\\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\\n        @return Proposal which consists of:\\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\\n        - _yesVotes Number of votes in favor of proposal.\\n        - _noVotes Number of votes against proposal.\\n        - _status Current status of proposal.\\n     */\\n    function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) external view returns (Proposal memory) {\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(originChainID);\\n        return _proposals[nonceAndID][dataHash];\\n    }\\n\\n    /**\\n        @notice Changes deposit fee.\\n        @notice Only callable by admin.\\n        @param newFee Value {_fee} will be updated to.\\n     */\\n    function adminChangeFee(uint newFee) external onlyAdmin {\\n        require(_fee != newFee, \\\"Current fee is equal to new fee\\\");\\n        _fee = newFee;\\n    }\\n\\n    /**\\n        @notice Used to manually withdraw funds from ERC safes.\\n        @param handlerAddress Address of handler to withdraw from.\\n        @param tokenAddress Address of token to withdraw.\\n        @param recipient Address to withdraw tokens to.\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\\n     */\\n    function adminWithdraw(\\n        address handlerAddress,\\n        address tokenAddress,\\n        address recipient,\\n        uint256 amountOrTokenID\\n    ) external onlyAdmin {\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.withdraw(tokenAddress, recipient, amountOrTokenID);\\n    }\\n\\n    /**\\n        @notice Initiates a transfer using a specified handler contract.\\n        @notice Only callable when Bridge is not paused.\\n        @param destinationChainID ID of chain deposit will be bridged to.\\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\\n        @param data Additional data to be passed to specified handler.\\n        @notice Emits {Deposit} event.\\n     */\\n    function deposit(uint8 destinationChainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused {\\n        require(msg.value == _fee, \\\"Incorrect fee supplied\\\");\\n\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\n        require(handler != address(0), \\\"resourceID not mapped to handler\\\");\\n\\n        uint64 depositNonce = ++_depositCounts[destinationChainID];\\n        _depositRecords[depositNonce][destinationChainID] = data;\\n\\n        IDepositExecute depositHandler = IDepositExecute(handler);\\n        depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data);\\n\\n        emit Deposit(destinationChainID, resourceID, depositNonce);\\n    }\\n\\n    /**\\n        @notice When called, {msg.sender} will be marked as voting in favor of proposal.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param dataHash Hash of data provided when deposit was made.\\n        @notice Proposal must not have already been passed or executed.\\n        @notice {msg.sender} must not have already voted on proposal.\\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\\n        @notice Emits {ProposalVote} event.\\n     */\\n    function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) external onlyRelayers whenNotPaused {\\n\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(_resourceIDToHandlerAddress[resourceID] != address(0), \\\"no handler for resourceID\\\");\\n        require(uint(proposal._status) <= 1, \\\"proposal already passed/executed/cancelled\\\");\\n        require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \\\"relayer already voted\\\");\\n\\n        if (uint(proposal._status) == 0) {\\n            ++_totalProposals;\\n            _proposals[nonceAndID][dataHash] = Proposal({\\n                _resourceID : resourceID,\\n                _dataHash : dataHash,\\n                _yesVotes : new address[](1),\\n                _noVotes : new address[](0),\\n                _status : ProposalStatus.Active,\\n                _proposedBlock : block.number\\n                });\\n\\n            proposal._yesVotes[0] = msg.sender;\\n            emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);\\n        } else {\\n            if (sub(block.number, proposal._proposedBlock) > _expiry) {\\n                // if the number of blocks that has passed since this proposal was\\n                // submitted exceeds the expiry threshold set, cancel the proposal\\n                proposal._status = ProposalStatus.Cancelled;\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, resourceID, dataHash);\\n            } else {\\n                require(dataHash == proposal._dataHash, \\\"datahash mismatch\\\");\\n                proposal._yesVotes.push(msg.sender);\\n\\n\\n            }\\n\\n        }\\n        if (proposal._status != ProposalStatus.Cancelled) {\\n            _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true;\\n            emit ProposalVote(chainID, depositNonce, proposal._status, resourceID);\\n\\n            // If _depositThreshold is set to 1, then auto finalize\\n            // or if _relayerThreshold has been exceeded\\n            if (_relayerThreshold <= 1 || proposal._yesVotes.length >= _relayerThreshold) {\\n                proposal._status = ProposalStatus.Passed;\\n\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Passed, resourceID, dataHash);\\n            }\\n        }\\n\\n    }\\n\\n    /**\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param dataHash Hash of data originally provided when deposit was made.\\n        @notice Proposal must be past expiry threshold.\\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\\n     */\\n    function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) public onlyAdminOrRelayer {\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(proposal._status != ProposalStatus.Cancelled, \\\"Proposal already cancelled\\\");\\n        require(sub(block.number, proposal._proposedBlock) > _expiry, \\\"Proposal not at expiry threshold\\\");\\n\\n        proposal._status = ProposalStatus.Cancelled;\\n        emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, proposal._resourceID, proposal._dataHash);\\n\\n    }\\n\\n    /**\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param data Data originally provided when deposit was made.\\n        @notice Proposal must have Passed status.\\n        @notice Hash of {data} must equal proposal's {dataHash}.\\n        @notice Emits {ProposalEvent} event with status {Executed}.\\n     */\\n    function executeProposal(uint8 chainID, uint64 depositNonce, bytes calldata data, bytes32 resourceID) external onlyRelayers whenNotPaused {\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(proposal._status != ProposalStatus.Inactive, \\\"proposal is not active\\\");\\n        require(proposal._status == ProposalStatus.Passed, \\\"proposal already transferred\\\");\\n        require(dataHash == proposal._dataHash, \\\"data doesn't match datahash\\\");\\n\\n        proposal._status = ProposalStatus.Executed;\\n\\n        IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]);\\n        depositHandler.executeProposal(proposal._resourceID, data);\\n\\n        emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);\\n    }\\n\\n    /**\\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\\n        @param addrs Array of addresses to transfer {amounts} to.\\n        @param amounts Array of amonuts to transfer to {addrs}.\\n     */\\n    function transferFunds(address payable[] calldata addrs, uint[] calldata amounts) external onlyAdmin {\\n        for (uint i = 0; i < addrs.length; i++) {\\n            addrs[i].transfer(amounts[i]);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\n\\n/**\\n    @title Interface for Bridge contract.\\n    @author ChainSafe Systems.\\n */\\ninterface IBridge {\\n    /**\\n        @notice Exposing getter for {_chainID} instead of forcing the use of call.\\n        @return uint8 The {_chainID} that is currently set for the Bridge contract.\\n     */\\n    function _chainID() external returns (uint8);\\n}\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/interfaces/IDepositExecute.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\n/**\\n    @title Interface for handler contracts that support deposits and deposit executions.\\n    @author ChainSafe Systems.\\n */\\ninterface IDepositExecute {\\n    /**\\n        @notice It is intended that deposit are made using the Bridge contract.\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\n        @param depositer Address of account making the deposit in the Bridge contract.\\n        @param data Consists of additional data needed for a specific deposit.\\n     */\\n    function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;\\n\\n    /**\\n        @notice It is intended that proposals are executed by the Bridge contract.\\n        @param data Consists of additional data needed for a specific deposit execution.\\n     */\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/interfaces/IERCHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\n\\n/**\\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\\n    @author ChainSafe Systems.\\n */\\ninterface IERCHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function setResource(bytes32 resourceID, address contractAddress) external;\\n    /**\\n        @notice Marks {contractAddress} as mintable/burnable.\\n        @param contractAddress Address of contract to be used when making or executing deposits.\\n     */\\n    function setBurnable(address contractAddress) external;\\n    /**\\n        @notice Used to manually release funds from ERC safes.\\n        @param tokenAddress Address of token contract to release.\\n        @param recipient Address to release tokens to.\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\\n     */\\n    function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;\\n}\\n\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/interfaces/IGenericHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\n/**\\n    @title Interface for handler that handles generic deposits and deposit executions.\\n    @author ChainSafe Systems.\\n */\\ninterface IGenericHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) external;\\n}\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/utils/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This is a stripped down version of Open zeppelin's Pausable contract.\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\\n *\\n */\\ncontract Pausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _whenNotPaused();\\n        _;\\n    }\\n\\n    function _whenNotPaused() private view {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenPaused() {\\n        _whenPaused();\\n        _;\\n    }\\n\\n    function _whenPaused() private view {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\"\r\n    },\r\n    \"/home/metapriest/code/my_code/dotvote/contracts/contracts/bridge/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.7.4;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * note that this is a stripped down version of open zeppelin's safemath\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n */\\n\\ncontract SafeMath {\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000010000000000000000000000002e70f28c39c8d1f1b737cd37e1ec76b72bd87cf6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}