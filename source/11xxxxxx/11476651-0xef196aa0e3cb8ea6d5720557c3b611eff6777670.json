{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/Oracle.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport {OpynPricerInterface} from \\\"./interfaces/OpynPricerInterface.sol\\\";\\nimport {Ownable} from \\\"./packages/oz/Ownable.sol\\\";\\nimport {SafeMath} from \\\"./packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @author Opyn Team\\n * @title Oracle Module\\n * @notice The Oracle module sets, retrieves, and stores USD prices (USD per asset) for underlying, collateral, and strike assets\\n * manages pricers that are used for different assets\\n */\\ncontract Oracle is Ownable {\\n    using SafeMath for uint256;\\n\\n    /// @dev structure that stores price of asset and timestamp when the price was stored\\n    struct Price {\\n        uint256 price;\\n        uint256 timestamp; // timestamp at which the price is pushed to this oracle\\n    }\\n\\n    /// @dev mapping of asset pricer to its locking period\\n    /// locking period is the period of time after the expiry timestamp where a price can not be pushed\\n    mapping(address => uint256) internal pricerLockingPeriod;\\n    /// @dev mapping of asset pricer to its dispute period\\n    /// dispute period is the period of time after an expiry price has been pushed where a price can be disputed\\n    mapping(address => uint256) internal pricerDisputePeriod;\\n    /// @dev mapping between an asset and its pricer\\n    mapping(address => address) internal assetPricer;\\n    /// @dev mapping between asset, expiry timestamp, and the Price structure at the expiry timestamp\\n    mapping(address => mapping(uint256 => Price)) internal storedPrice;\\n    /// @dev mapping between stable asset and price\\n    mapping(address => uint256) internal stablePrice;\\n    //// @dev disputer is a role defined by the owner that has the ability to dispute a price during the dispute period\\n    address internal disputer;\\n\\n    /// @notice emits an event when the disputer is updated\\n    event DisputerUpdated(address indexed newDisputer);\\n    /// @notice emits an event when the pricer is updated for an asset\\n    event PricerUpdated(address indexed asset, address indexed pricer);\\n    /// @notice emits an event when the locking period is updated for a pricer\\n    event PricerLockingPeriodUpdated(address indexed pricer, uint256 lockingPeriod);\\n    /// @notice emits an event when the dispute period is updated for a pricer\\n    event PricerDisputePeriodUpdated(address indexed pricer, uint256 disputePeriod);\\n    /// @notice emits an event when an expiry price is updated for a specific asset\\n    event ExpiryPriceUpdated(\\n        address indexed asset,\\n        uint256 indexed expiryTimestamp,\\n        uint256 price,\\n        uint256 onchainTimestamp\\n    );\\n    /// @notice emits an event when the disputer disputes a price during the dispute period\\n    event ExpiryPriceDisputed(\\n        address indexed asset,\\n        uint256 indexed expiryTimestamp,\\n        uint256 disputedPrice,\\n        uint256 newPrice,\\n        uint256 disputeTimestamp\\n    );\\n    /// @notice emits an event when a stable asset price changes\\n    event StablePriceUpdated(address indexed asset, uint256 price);\\n\\n    /**\\n     * @notice get a live asset price from the asset's pricer contract\\n     * @param _asset asset address\\n     * @return price scaled by 1e8, denominated in USD\\n     * e.g. 17568900000 => 175.689 USD\\n     */\\n    function getPrice(address _asset) external view returns (uint256) {\\n        uint256 price = stablePrice[_asset];\\n\\n        if (price == 0) {\\n            require(assetPricer[_asset] != address(0), \\\"Oracle: Pricer for this asset not set\\\");\\n\\n            price = OpynPricerInterface(assetPricer[_asset]).getPrice();\\n        }\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice get the asset price at specific expiry timestamp\\n     * @param _asset asset address\\n     * @param _expiryTimestamp expiry timestamp\\n     * @return price scaled by 1e8, denominated in USD\\n     * @return isFinalized True, if the price is finalized, False if not\\n     */\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool) {\\n        uint256 price = stablePrice[_asset];\\n        bool isFinalized = true;\\n\\n        if (price == 0) {\\n            price = storedPrice[_asset][_expiryTimestamp].price;\\n            isFinalized = isDisputePeriodOver(_asset, _expiryTimestamp);\\n        }\\n\\n        return (price, isFinalized);\\n    }\\n\\n    /**\\n     * @notice get the pricer for an asset\\n     * @param _asset asset address\\n     * @return pricer address\\n     */\\n    function getPricer(address _asset) external view returns (address) {\\n        return assetPricer[_asset];\\n    }\\n\\n    /**\\n     * @notice get the disputer address\\n     * @return disputer address\\n     */\\n    function getDisputer() external view returns (address) {\\n        return disputer;\\n    }\\n\\n    /**\\n     * @notice get a pricer's locking period\\n     * locking period is the period of time after the expiry timestamp where a price can not be pushed\\n     * @dev during the locking period an expiry price can not be submitted to this contract\\n     * @param _pricer pricer address\\n     * @return locking period\\n     */\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256) {\\n        return pricerLockingPeriod[_pricer];\\n    }\\n\\n    /**\\n     * @notice get a pricer's dispute period\\n     * dispute period is the period of time after an expiry price has been pushed where a price can be disputed\\n     * @dev during the dispute period, the disputer can dispute the submitted price and modify it\\n     * @param _pricer pricer address\\n     * @return dispute period\\n     */\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256) {\\n        return pricerDisputePeriod[_pricer];\\n    }\\n\\n    /**\\n     * @notice check if the locking period is over for setting the asset price at a particular expiry timestamp\\n     * @param _asset asset address\\n     * @param _expiryTimestamp expiry timestamp\\n     * @return True if locking period is over, False if not\\n     */\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) public view returns (bool) {\\n        uint256 price = stablePrice[_asset];\\n\\n        if (price == 0) {\\n            address pricer = assetPricer[_asset];\\n            uint256 lockingPeriod = pricerLockingPeriod[pricer];\\n\\n            return now > _expiryTimestamp.add(lockingPeriod);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice check if the dispute period is over\\n     * @param _asset asset address\\n     * @param _expiryTimestamp expiry timestamp\\n     * @return True if dispute period is over, False if not\\n     */\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) public view returns (bool) {\\n        uint256 price = stablePrice[_asset];\\n\\n        if (price == 0) {\\n            // check if the pricer has a price for this expiry timestamp\\n            Price memory price = storedPrice[_asset][_expiryTimestamp];\\n            if (price.timestamp == 0) {\\n                return false;\\n            }\\n\\n            address pricer = assetPricer[_asset];\\n            uint256 disputePeriod = pricerDisputePeriod[pricer];\\n\\n            return now > price.timestamp.add(disputePeriod);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice sets the pricer for an asset\\n     * @dev can only be called by the owner\\n     * @param _asset asset address\\n     * @param _pricer pricer address\\n     */\\n    function setAssetPricer(address _asset, address _pricer) external onlyOwner {\\n        require(_pricer != address(0), \\\"Oracle: cannot set pricer to address(0)\\\");\\n        require(stablePrice[_asset] == 0, \\\"Oracle: could not set a pricer for stable asset\\\");\\n\\n        assetPricer[_asset] = _pricer;\\n\\n        emit PricerUpdated(_asset, _pricer);\\n    }\\n\\n    /**\\n     * @notice sets the locking period for a pricer\\n     * @dev can only be called by the owner\\n     * @param _pricer pricer address\\n     * @param _lockingPeriod locking period\\n     */\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external onlyOwner {\\n        pricerLockingPeriod[_pricer] = _lockingPeriod;\\n\\n        emit PricerLockingPeriodUpdated(_pricer, _lockingPeriod);\\n    }\\n\\n    /**\\n     * @notice sets the dispute period for a pricer\\n     * @dev can only be called by the owner\\n     * for a composite pricer (ie CompoundPricer) that depends on or calls other pricers, ensure\\n     * that the dispute period for the composite pricer is longer than the dispute period for the\\n     * asset pricer that it calls to ensure safe usage as a dispute in the other pricer will cause\\n     * the need for a dispute with the composite pricer's price\\n     * @param _pricer pricer address\\n     * @param _disputePeriod dispute period\\n     */\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external onlyOwner {\\n        pricerDisputePeriod[_pricer] = _disputePeriod;\\n\\n        emit PricerDisputePeriodUpdated(_pricer, _disputePeriod);\\n    }\\n\\n    /**\\n     * @notice set the disputer address\\n     * @dev can only be called by the owner\\n     * @param _disputer disputer address\\n     */\\n    function setDisputer(address _disputer) external onlyOwner {\\n        disputer = _disputer;\\n\\n        emit DisputerUpdated(_disputer);\\n    }\\n\\n    /**\\n     * @notice set stable asset price\\n     * @dev price should be scaled by 1e8\\n     * @param _asset asset address\\n     * @param _price price\\n     */\\n    function setStablePrice(address _asset, uint256 _price) external onlyOwner {\\n        require(assetPricer[_asset] == address(0), \\\"Oracle: could not set stable price for an asset with pricer\\\");\\n\\n        stablePrice[_asset] = _price;\\n\\n        emit StablePriceUpdated(_asset, _price);\\n    }\\n\\n    /**\\n     * @notice dispute an asset price during the dispute period\\n     * @dev only the disputer can dispute a price during the dispute period, by setting a new one\\n     * @param _asset asset address\\n     * @param _expiryTimestamp expiry timestamp\\n     * @param _price the correct price\\n     */\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external {\\n        require(msg.sender == disputer, \\\"Oracle: caller is not the disputer\\\");\\n        require(!isDisputePeriodOver(_asset, _expiryTimestamp), \\\"Oracle: dispute period over\\\");\\n\\n        Price storage priceToUpdate = storedPrice[_asset][_expiryTimestamp];\\n\\n        require(priceToUpdate.timestamp != 0, \\\"Oracle: price to dispute does not exist\\\");\\n\\n        uint256 oldPrice = priceToUpdate.price;\\n        priceToUpdate.price = _price;\\n\\n        emit ExpiryPriceDisputed(_asset, _expiryTimestamp, oldPrice, _price, now);\\n    }\\n\\n    /**\\n     * @notice submits the expiry price to the oracle, can only be set from the pricer\\n     * @dev asset price can only be set after the locking period is over and before the dispute period has started\\n     * @param _asset asset address\\n     * @param _expiryTimestamp expiry timestamp\\n     * @param _price asset price at expiry\\n     */\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external {\\n        require(msg.sender == assetPricer[_asset], \\\"Oracle: caller is not authorized to set expiry price\\\");\\n        require(isLockingPeriodOver(_asset, _expiryTimestamp), \\\"Oracle: locking period is not over yet\\\");\\n        require(storedPrice[_asset][_expiryTimestamp].timestamp == 0, \\\"Oracle: dispute period started\\\");\\n\\n        storedPrice[_asset][_expiryTimestamp] = Price(_price, now);\\n        emit ExpiryPriceUpdated(_asset, _expiryTimestamp, _price, now);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/interfaces/OpynPricerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OpynPricerInterface {\\n    function getPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/packages/oz/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal virtual view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal virtual view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/packages/oz/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDisputer\",\"type\":\"address\"}],\"name\":\"DisputerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onchainTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputePeriod\",\"type\":\"uint256\"}],\"name\":\"PricerDisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"PricerLockingPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"}],\"name\":\"PricerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StablePriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"disputeExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"getExpiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"getPricerDisputePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"getPricerLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"isDisputePeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"isLockingPeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"setAssetPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_disputePeriod\",\"type\":\"uint256\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"setDisputer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStablePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}