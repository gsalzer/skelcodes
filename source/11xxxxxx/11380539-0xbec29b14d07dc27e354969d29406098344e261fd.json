{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-12-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IUniswapV2Pair token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IUniswapV2Pair token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IUniswapV2Pair token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IUniswapV2Pair token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IUniswapV2Pair token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IUniswapV2Pair token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IERC20Custom {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function farmMint(address user, uint256 amount) external;\r\n}\r\n\r\n\r\n\r\ncontract MoonFarm {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IUniswapV2Pair;\r\n\r\n  IUniswapV2Pair public lpToken = IUniswapV2Pair(address(0)); //Moonday-Mooncrops LP Token\r\n  IUniswapV2Pair public cropsETHToken = IUniswapV2Pair(address(0)); //CROPS-WETH LP Token\r\n\r\n  address weth;\r\n  address crops;\r\n  address moonday;\r\n\r\n  address owner;\r\n  address dev1;\r\n  address dev2;\r\n  address dev3;\r\n\r\n  mapping(address => uint256) public refCode;\r\n  mapping(uint256 => address) public refCodeIndex;\r\n  uint256 public refCount = 50000000;\r\n\r\n  mapping(address => mapping(uint256 => StakeData)) public stakeList;\r\n  mapping(address => uint256) public stakeCount;\r\n\r\n  struct StakeData{\r\n    uint256 stakeTime;\r\n    uint256 amount;\r\n  }\r\n\r\n  event Staked(address indexed user, uint256 amount, uint256 stakeIndex);\r\n  event RewardPaid(address indexed user, uint256 reward);\r\n\r\n  constructor(address _lpToken, address _cropsETHToken, address _weth, address _crops, address _moonday, address _owner, address _dev1, address _dev2, address _dev3) public {\r\n    require(_lpToken != address(0) && _cropsETHToken != address(0) && _weth != address(0) && _crops != address(0) && _moonday != address(0), \"Invalid Contract Address\");\r\n    require(_owner != address(0) && _dev1 != address(0) && _dev2 != address(0) && _dev3 != address(0), \"Invalid User Address\");\r\n    lpToken = IUniswapV2Pair(_lpToken);\r\n    cropsETHToken = IUniswapV2Pair(_cropsETHToken);\r\n    weth = _weth;\r\n    crops = _crops;\r\n    moonday = _moonday;\r\n    owner = _owner;\r\n    dev1 = _dev1;\r\n    dev2 = _dev2;\r\n    dev3 = _dev3;\r\n  }\r\n\r\n  /// Create a refcode for the user\r\n  /// @dev assigns a refCode value to users incrementally\r\n  /// @return refCode number\r\n  function createRefCode() public returns (uint256){\r\n    require(refCode[msg.sender] == 0, \"You Already Have A RefCode\");\r\n    refCode[msg.sender] = refCount;\r\n    refCodeIndex[refCount] = msg.sender;\r\n    refCount++;\r\n    return refCode[msg.sender];\r\n  }\r\n\r\n  /// Get current reward for stake\r\n  /// @dev calculates returnable stake amount\r\n  /// @param _user the user to query\r\n  /// @param _index the stake index to query\r\n  /// @return total stake reward\r\n  function currentReward(address _user, uint256 _index) public view returns (uint256) {\r\n    if(stakeList[msg.sender][_index].amount == 0){\r\n      return 0;\r\n    }\r\n    uint256 amount = stakeList[_user][_index].amount;\r\n    uint256 daysPercent = (block.timestamp - stakeList[msg.sender][_index].stakeTime).div(86400).mul(7);\r\n\r\n    uint moondayReserves;\r\n    uint cropReserves;\r\n    uint wethMReserves;\r\n    uint wethCReserves;\r\n\r\n    if(moonday < weth){\r\n      (wethMReserves, moondayReserves,) = lpToken.getReserves();\r\n    }\r\n    else{\r\n      (moondayReserves, wethMReserves,) = lpToken.getReserves();\r\n    }\r\n\r\n    if(crops < weth){\r\n      (wethCReserves, cropReserves,) = cropsETHToken.getReserves();\r\n    }\r\n    else{\r\n      (cropReserves, wethCReserves,) = cropsETHToken.getReserves();\r\n    }\r\n\r\n    uint256 cropsPrice = wethCReserves.mul(100000000).div(cropReserves).mul(10000000000).div(wethMReserves.mul(100000000).div(moondayReserves)).mul(100000000);\r\n    if(daysPercent > 185){\r\n      return cropsPrice.mul(amount).div(1 ether).mul(185).div(50);\r\n    }\r\n    else{\r\n      return cropsPrice.mul(amount).div(1 ether).mul(daysPercent).div(50);\r\n    }\r\n  }\r\n\r\n  /// Stake LP token\r\n  /// @dev stakes users LP tokens\r\n  /// @param _amount the amount to stake\r\n  /// @param _refCode optional referral code\r\n  function stake(uint256 _amount, uint _refCode) public {\r\n      require(_amount > 0, \"Cannot stake 0\");\r\n\r\n      uint256 deposit = _amount.mul(7).div(10);\r\n      stakeList[msg.sender][stakeCount[msg.sender]].amount = deposit;//can make all of this more efficient\r\n      stakeList[msg.sender][stakeCount[msg.sender]].stakeTime = block.timestamp;\r\n      lpToken.safeTransferFrom(msg.sender, address(this), deposit);\r\n      stakeCount[msg.sender]++;\r\n\r\n      if(refCodeIndex[_refCode] != address(0)){\r\n        lpToken.safeTransferFrom(msg.sender, owner, _amount.mul(22).div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev1, _amount.div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev2, _amount.div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev3, _amount.div(100));\r\n        lpToken.safeTransferFrom(msg.sender, refCodeIndex[_refCode], _amount.div(20));\r\n      }\r\n      else{\r\n        lpToken.safeTransferFrom(msg.sender, owner, _amount.mul(27).div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev1, _amount.div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev2, _amount.div(100));\r\n        lpToken.safeTransferFrom(msg.sender, dev3, _amount.div(100));\r\n      }\r\n\r\n      emit Staked(msg.sender, deposit, stakeCount[msg.sender] - 1);\r\n  }\r\n\r\n  /// Give staker their mooncrop reward\r\n  /// @dev calculates claim and pays user\r\n  /// @param _index the stake to query\r\n  /// @return dividend claimed by user\r\n  function claim(uint256 _index) public returns(uint256){\r\n      require(stakeList[msg.sender][_index].amount > 0, \"Stake Doesnt Exist\");\r\n\r\n      uint256 reward = currentReward(msg.sender, _index);\r\n      IERC20Custom(crops).farmMint(msg.sender, reward);\r\n      stakeList[msg.sender][_index].amount = 0;\r\n      emit RewardPaid(msg.sender, reward);\r\n      return reward;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cropsETHToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_moonday\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createRefCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cropsETHToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refCodeIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MoonFarm","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004242916eadd950b4e1b73f9868d27cda70385dd70000000000000000000000004242916eadd950b4e1b73f9868d27cda70385dd7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000004242916eadd950b4e1b73f9868d27cda70385dd70000000000000000000000001ad606adde97c0c28bd6ac85554176bc55783c010000000000000000000000002ffb230b7ce4758e25f10f03dbce1278ce4441b50000000000000000000000004efd33509c894a4d628a940cdce10abb4e2e1b9400000000000000000000000093a4ed59486409c9a41114b0621fe5e7525247eb00000000000000000000000020f9b4cf601dc667c62a73c3ff8bafeaee4c54d0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d473eab93cf607b697715a191127b2653a709fddbd7c550ba58200c9f2e54cc3"}]}