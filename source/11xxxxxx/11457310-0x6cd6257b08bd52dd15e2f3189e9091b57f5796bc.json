{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\ncontract UOP_Vesting is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    address UOP_token_address = 0xE4AE84448DB5CFE1DaF1e6fb172b469c161CB85F; \r\n    uint256 constant START_VESTING_DATE = 1608076800; //2020-12-16T00:00:00+00:00\r\n    uint256 constant ONE_DAY_IN_SECONDS = 60 * 60 * 24;\r\n    uint256 constant AMOUNT_MULTIPLIER = 10 ** 21;\r\n\r\n    mapping (address => uint256) earnedAmount;\r\n\r\n    uint256 constant STAGE_1_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 0; // IEO date\r\n    uint256 constant STAGE_2_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 60; // 60 days from start\r\n    uint256 constant STAGE_3_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 120; // 120 days from start\r\n    uint256 constant STAGE_4_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 180; // 180 days from start\r\n    uint256 constant STAGE_5_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 240; // 240 days from start\r\n    uint256 constant STAGE_6_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 360; // 360 days from start\r\n    uint256 constant STAGE_7_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 720; // 720 days from start\r\n    uint256 constant STAGE_8_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 1080; // 1080 days from start\r\n    uint256 constant STAGE_9_DATE = START_VESTING_DATE + ONE_DAY_IN_SECONDS * 1800; // 1800 days from start\r\n    \r\n    address constant PUBLIC_SALE = 0xe33Ba03933ab0fcC064c03C9a2e4Da9d8e19B3d7; \r\n    address constant FOUND_ECOSYSTEM = 0xAb6EB3FF8BEc07A018c98E2A7Dc687F60bADaBDe; \r\n    address constant FOUND_TREASURY = 0xb2dE9aB64676CE1A5A0E821244a2b9edF401043c; \r\n    address constant AG_SHAREHOLDERS = 0x9e1605321664d13426F67D07f3bFc4fB28777f78; \r\n    address constant AG_TEAM = 0xE459e5bF1E872Ca5b02cfA24e622874A2AC1BB34; \r\n    \r\n    uint8 constant allowedAddressesAmount = 5;\r\n    uint8 constant stagesAmount = 9;\r\n    address[allowedAddressesAmount] allowedAddresses = [PUBLIC_SALE, FOUND_ECOSYSTEM, FOUND_TREASURY, AG_SHAREHOLDERS, AG_TEAM];\r\n    uint256[stagesAmount] private _stageDates;\r\n    uint256[stagesAmount][allowedAddressesAmount] private _caps;\r\n\r\n    constructor() public {\r\n        _initStages();\r\n        _initCaps();\r\n        transferOwnership(0x08Ca29489282DF3daE9e6654A567daAfe2EF93a1);\r\n    }\r\n    \r\n    \r\n    function _initStages() private {\r\n        _stageDates[0] = STAGE_1_DATE;\r\n        _stageDates[1] = STAGE_2_DATE;\r\n        _stageDates[2] = STAGE_3_DATE;\r\n        _stageDates[3] = STAGE_4_DATE;\r\n        _stageDates[4] = STAGE_5_DATE;\r\n        _stageDates[5] = STAGE_6_DATE;\r\n        _stageDates[6] = STAGE_7_DATE;\r\n        _stageDates[7] = STAGE_8_DATE;\r\n        _stageDates[8] = STAGE_9_DATE;\r\n    }\r\n    \r\n    function _initCaps() private {\r\n        // init PUBLIC_SALE caps\r\n        uint8 addressIndex = getAddressIndex(PUBLIC_SALE);\r\n\r\n        _caps[addressIndex][0] = 6250 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][1] = 12500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][2] = 18750 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][3] = 25000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][4] = 25000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][5] = 25000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][6] = 25000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][7] = 25000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][8] = 25000 * AMOUNT_MULTIPLIER;\r\n\r\n        // init FOUND_ECOSYSTEM caps\r\n        addressIndex = getAddressIndex(FOUND_ECOSYSTEM);\r\n\r\n        _caps[addressIndex][0] = 625 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][1] = 1250 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][2] = 1875 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][3] = 2500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][4] = 5000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][5] = 10000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][6] = 15000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][7] = 22500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][8] = 30000 * AMOUNT_MULTIPLIER;\r\n\r\n        // init FOUND_TREASURY caps\r\n        addressIndex = getAddressIndex(FOUND_TREASURY);\r\n\r\n        _caps[addressIndex][5] = 2500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][6] = 5000 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][7] = 7500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][8] = 10000 * AMOUNT_MULTIPLIER;\r\n\r\n        // init AG_SHAREHOLDERS caps\r\n        addressIndex = getAddressIndex(AG_SHAREHOLDERS);\r\n\r\n        _caps[addressIndex][3] = 625 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][4] = 3880 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][5] = 5500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][6] = 10380 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][7] = 15250 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][8] = 25000 * AMOUNT_MULTIPLIER;\r\n\r\n        // init AG_TEAM caps\r\n        addressIndex = getAddressIndex(AG_TEAM);\r\n\r\n        _caps[addressIndex][5] = 1250 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][6] = 2500 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][7] = 3750 * AMOUNT_MULTIPLIER;\r\n        _caps[addressIndex][8] = 5000 * AMOUNT_MULTIPLIER;\r\n    }\r\n\r\n    function getAddressIndex(address element) public view returns (uint8) {\r\n        for (uint8 i = 0; i < allowedAddresses.length; i++) {\r\n            if (element == allowedAddresses[i])\r\n                return i;\r\n        }\r\n        return allowedAddressesAmount;\r\n    }\r\n    \r\n    function getStageIndexAt(uint256 timestamp) public view returns (uint8) {\r\n        for (uint8 i = 0; i < _stageDates.length; i++) {\r\n            if (_stageDates[i] > timestamp)\r\n            {\r\n                return --i;\r\n            }\r\n        }\r\n        return stagesAmount - 1;\r\n    }\r\n\r\n    function getCurrentStageIndex() public view returns (uint8) {\r\n        return getStageIndexAt(block.timestamp);\r\n    }\r\n\r\n    function retrieveTokens(uint256 amount) external returns (bool) {\r\n        uint8 stageIndex = getCurrentStageIndex();\r\n        uint8 addressIndex = getAddressIndex(msg.sender);\r\n        require(addressIndex >= 0 && addressIndex < allowedAddressesAmount, \"Address not allowed\");\r\n        require(earnedAmount[msg.sender].add(amount) <= _caps[addressIndex][stageIndex], \"transfer amount exceeds balance\");\r\n        earnedAmount[msg.sender] = earnedAmount[msg.sender].add(amount);\r\n        IERC20 uop_token = IERC20(UOP_token_address);\r\n        return uop_token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getUopBalance() external view returns (uint256) {\r\n        IERC20 uop_token = IERC20(UOP_token_address);\r\n        return uop_token.balanceOf(address(this));\r\n    }\r\n\r\n    function getCapSumAt(uint8 stageIndex) external view returns (uint256) {\r\n        require(stageIndex >= 0 && stageIndex < stagesAmount, \"Index out od bound\");\r\n        uint256 sum;\r\n        for (uint8 i = 0; i < allowedAddressesAmount; i++) {\r\n            sum += _caps[i][stageIndex];\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function getEarnedAmount(address recipient) external view returns (uint256) {\r\n        return earnedAmount[recipient];\r\n    }\r\n\r\n    function getCap(address recipient, uint8 stageIndex) external view returns (uint256) {\r\n        uint8 addrIndex = getAddressIndex(recipient);\r\n        require(addrIndex >= 0 && addrIndex < allowedAddressesAmount);\r\n        require(stageIndex >= 0 && stageIndex < stagesAmount, \"Index out of bound\");\r\n        return _caps[addrIndex][stageIndex];\r\n    }\r\n\r\n    function setCap(address recipient, uint8 stageIndex, uint256 amount) external onlyOwner returns (bool) {\r\n        uint8 addrIndex = getAddressIndex(recipient);\r\n        require(addrIndex >= 0 && addrIndex < allowedAddressesAmount, \"Address not allowed\");\r\n        require(stageIndex >= 0 && stageIndex < stagesAmount, \"Index out of bound\");\r\n        _caps[addrIndex][stageIndex] = amount;\r\n        return true;\r\n    }\r\n\r\n    function revoke(uint256 amount) external onlyOwner returns(bool) {\r\n        IERC20 uop_token = IERC20(UOP_token_address);\r\n        return uop_token.transfer(owner(), amount);\r\n    }\r\n    \r\n    function getStageUnlockTime(uint8 stageIndex) external view returns (uint256) {\r\n        require(stageIndex >= 0 && stageIndex < stagesAmount, \"Index out of bound\");\r\n        return _stageDates[stageIndex];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"element\",\"type\":\"address\"}],\"name\":\"getAddressIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stageIndex\",\"type\":\"uint8\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stageIndex\",\"type\":\"uint8\"}],\"name\":\"getCapSumAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStageIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getEarnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getStageIndexAt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stageIndex\",\"type\":\"uint8\"}],\"name\":\"getStageUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUopBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UOP_Vesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5ea08571245c9d4460c889a82398802dc31cfddce791cbf2e3acbb431f81ac8c"}]}