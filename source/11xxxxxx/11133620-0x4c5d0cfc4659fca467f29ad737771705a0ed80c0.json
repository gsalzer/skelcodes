{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Seller.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract SellersAuthorization {\r\n  mapping(address => bool) internal sellers;\r\n\r\n  /**\r\n   * @dev Returns true if @param _seller is true.\r\n   */\r\n  function isSeller(address _seller) public view returns (bool) {\r\n    return sellers[_seller];\r\n  }\r\n\r\n  /**\r\n   * @dev Enables a seller.\r\n   * @param _newSeller The new seller address.\r\n   */\r\n  function _addSeller(address _newSeller) internal returns (bool) {\r\n    require(_newSeller != address(0), 'Address 0x0 not valid');\r\n    sellers[_newSeller] = true;\r\n    return sellers[_newSeller];\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a seller.\r\n   * @param _seller The address of the seller to remove.\r\n   */\r\n\r\n  function _removeSeller(address _seller) internal returns (bool) {\r\n    sellers[_seller] = false;\r\n    return sellers[_seller];\r\n  }\r\n\r\n  /**\r\n   * @dev Push the amount earned to the seller as soon as the tx is completed.\r\n   */\r\n  function _pushPayment(address payable _seller, uint256 _amount) internal {\r\n    require(_seller != address(0));\r\n    _seller.transfer(_amount);\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n   */\r\n  event TransferSingle(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 id,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n   * transfers.\r\n   */\r\n  event TransferBatch(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256[] ids,\r\n    uint256[] values\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n   * `approved`.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed account,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n   *\r\n   * If an {URI} event was emitted for `id`, the standard\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n   * returned by {IERC1155MetadataURI-uri}.\r\n   */\r\n  event URI(string value, uint256 indexed id);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function balanceOf(address account, uint256 id)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n  /**\r\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `operator` cannot be the caller.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) external;\r\n\r\n  /**\r\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n   *\r\n   * See {setApprovalForAll}.\r\n   */\r\n  function isApprovedForAll(address account, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata amounts,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal virtual view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal virtual view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Marketplace.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\ncontract Marketplace is Ownable, SellersAuthorization {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public offerIdCounter = 0;\r\n  bool public paused = false;\r\n\r\n  event OfferCreated(\r\n    address indexed _tokenAddress,\r\n    address indexed _seller,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    uint256 _price,\r\n    uint256 _offerIdCounter\r\n  );\r\n  event OfferCancelled(\r\n    address indexed _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _offerId\r\n  );\r\n  event OfferSuccess(\r\n    address indexed _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _price,\r\n    uint256 _offerIdCounter,\r\n    address _newOwner\r\n  );\r\n\r\n  modifier isNotPaused() {\r\n    require(!paused, 'Contract paused');\r\n    _;\r\n  }\r\n\r\n  /*\r\n   * @dev hasTokens Makes sure the seller has enough tokens.\r\n   */\r\n  modifier hasTokens(\r\n    address _token,\r\n    address _seller,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount\r\n  ) {\r\n    require(\r\n      IERC1155(_token).balanceOf(_seller, _tokenId) >= _tokenAmount,\r\n      'Seller does not own enough tokens'\r\n    );\r\n    _;\r\n  }\r\n\r\n  struct Offer {\r\n    address tokenAddress;\r\n    address payable seller;\r\n    uint256 tokenId;\r\n    uint256 tokenAmount;\r\n    uint256 price; // The price for 1 (one) token.\r\n  }\r\n\r\n  mapping(uint256 => Offer) private offers;\r\n\r\n  /**\r\n   * @dev Creates an offer for the give tokenId.\r\n   * @dev Needs to approve this contract first\r\n   * @param _tokenAddress The token contract address\r\n   * @param _tokenId The token Id on sale.\r\n   * @param _tokenAmount Amount of tokens to sell\r\n   * @param _price The price of the token Id on sale.\r\n   */\r\n  function createOffer(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    uint256 _price\r\n  )\r\n    public\r\n    hasTokens(_tokenAddress, msg.sender, _tokenId, _tokenAmount)\r\n    isNotPaused\r\n  {\r\n    require(isSeller(msg.sender));\r\n    require(\r\n      IERC1155(_tokenAddress).isApprovedForAll(msg.sender, address(this)),\r\n      'Missing approval'\r\n    );\r\n    require(_price > 0);\r\n\r\n    offers[offerIdCounter].tokenAddress = _tokenAddress;\r\n    offers[offerIdCounter].tokenId = _tokenId;\r\n    offers[offerIdCounter].seller = msg.sender;\r\n    offers[offerIdCounter].tokenAmount = _tokenAmount;\r\n    offers[offerIdCounter].price = _price;\r\n\r\n    emit OfferCreated(\r\n      _tokenAddress,\r\n      msg.sender,\r\n      _tokenId,\r\n      _tokenAmount,\r\n      _price,\r\n      offerIdCounter\r\n    );\r\n\r\n    offerIdCounter = offerIdCounter.add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Removed an offer.\r\n   * @param _offerId The offer Id that has to be removed.\r\n   * @notice Require msg.sender equals to the offer seller.\r\n   */\r\n  function deleteOffer(uint256 _offerId) public isNotPaused {\r\n    require(\r\n      offers[_offerId].seller == msg.sender,\r\n      'Msg.sender is not the seller'\r\n    );\r\n    emit OfferCancelled(\r\n      offers[_offerId].tokenAddress,\r\n      offers[_offerId].tokenId,\r\n      _offerId\r\n    );\r\n    delete (offers[_offerId]);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows user to buy token.\r\n   * @param _offerId The offer Id the user wants to buy.\r\n   * @param _tokenAmount The amount of tokens the user wants to buy.\r\n   * @notice Pushes the payment to seller.\r\n   */\r\n  function buyToken(uint256 _offerId, uint256 _tokenAmount)\r\n    public\r\n    payable\r\n    isNotPaused\r\n    hasTokens(\r\n      offers[_offerId].tokenAddress,\r\n      offers[_offerId].seller,\r\n      offers[_offerId].tokenId,\r\n      _tokenAmount\r\n    )\r\n  {\r\n    require(_tokenAmount > 0, 'Token amount cannot be 0');\r\n    require(\r\n      msg.value == offers[_offerId].price.mul(_tokenAmount),\r\n      'Invalid amount'\r\n    );\r\n    require(\r\n      IERC1155(offers[_offerId].tokenAddress).isApprovedForAll(\r\n        offers[_offerId].seller,\r\n        address(this)\r\n      ),\r\n      'Missing approval'\r\n    );\r\n\r\n    offers[_offerId].tokenAmount = offers[_offerId].tokenAmount.sub(\r\n      _tokenAmount\r\n    );\r\n\r\n    IERC1155(offers[_offerId].tokenAddress).safeTransferFrom(\r\n      offers[_offerId].seller,\r\n      msg.sender,\r\n      offers[_offerId].tokenId,\r\n      _tokenAmount,\r\n      '0x0'\r\n    );\r\n\r\n    _pushPayment(offers[_offerId].seller, msg.value);\r\n\r\n    emit OfferSuccess(\r\n      offers[_offerId].tokenAddress,\r\n      offers[_offerId].tokenId,\r\n      msg.value,\r\n      _offerId,\r\n      msg.sender\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev A wrapper for _addSeller ().\r\n   * @param _newSeller The address of the new seller enabled.\r\n   * @notice Function restricted to the contract owner.\r\n   */\r\n  function addSeller(address _newSeller) public onlyOwner {\r\n    require(_addSeller(_newSeller));\r\n  }\r\n\r\n  /**\r\n   * @dev A wrapper for _removeSeller ().\r\n   * @param _seller The address of the seller to remove.\r\n   * @notice Function restricted to the contract owner.\r\n   */\r\n  function removeSeller(address _seller) public onlyOwner {\r\n    require(!_removeSeller(_seller));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns offer details for given offer id.\r\n   * @param _offerId The offer id.\r\n   * @notice If seller balanceOf is lower than the amount of tokens on sale\r\n   * returns the balanceOf (_seller).\r\n   */\r\n  function getOffer(uint256 _offerId) public view returns (Offer memory) {\r\n    Offer memory _offer = offers[_offerId];\r\n    uint256 balanceOf = IERC1155(_offer.tokenAddress).balanceOf(\r\n      _offer.seller,\r\n      _offer.tokenId\r\n    );\r\n    if (_offer.tokenAmount > balanceOf) {\r\n      _offer.tokenAmount = balanceOf;\r\n    }\r\n    return _offer;\r\n  }\r\n\r\n  /**\r\n   * @dev Pause the contract.\r\n   * @param _paused True if should pause.\r\n   */\r\n  function pauseContract(bool _paused) public onlyOwner {\r\n    paused = _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Safe.\r\n   */\r\n  function withdrawAll() public onlyOwner {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerIdCounter\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerIdCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OfferSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSeller\",\"type\":\"address\"}],\"name\":\"addSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"deleteOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Offer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"isSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"removeSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Marketplace","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d889fd67db50ea603e27b3eccfcca56a556ab540045ad36e1891d248b4824a5"}]}