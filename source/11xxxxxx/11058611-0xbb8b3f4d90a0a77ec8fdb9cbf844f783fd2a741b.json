{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract SuperStar {\r\n    struct UserDetail {\r\n        uint256 id;\r\n        uint256 userIncome;\r\n        uint256 walletIncome;\r\n        address payable referrer;\r\n        mapping (uint8 => LevelDetail) levels;\r\n        mapping (uint8 => bool) systemActiveStatus;\r\n        mapping (uint8 => bool) slotActiveStatus;\r\n        mapping (uint8 => CycleDetail) slotCycle;\r\n    }\r\n    \r\n    struct LevelDetail {\r\n        mapping (uint8 => uint256) slotLevelReferrals;\r\n    }\r\n    \r\n    struct CycleDetail {\r\n        uint256 cycleCount;\r\n        uint256 cycleIncome;\r\n        uint256 cycleWalletTransfer;\r\n    }\r\n    \r\n    uint256 public currentUserId = 1;\r\n    uint256 public totalIncome;\r\n    address payable public owner;\r\n    address payable referrerLevelOne;\r\n    address payable referrerLevelTwo;\r\n    address payable referrerLevelThree;\r\n    address payable referrerLevelFour;\r\n    address payable referrerLevelFive;\r\n    address payable freeReferrer;\r\n    address payable private partnerOne = 0xCAFb395f6A9b42349a1F18936FbaaC0Bbe9d43d2;\r\n    address payable private partnerTwo = 0x474ccddf9540DDEFbA42C8C75e56427C95c04BE4;\r\n    address payable private partnerThree = 0xd7e8Bf9329911DeA6f03E07614357A038A0bAf27;\r\n    address payable private partnerFour = 0x0D3942A0e50C1bE07DE715e5F4aB222677f35814;\r\n    address payable private partnerFive = 0x73414C32d05Efede19843aa283E26D28b2872E9D;\r\n    address payable private partnerSix = 0x45D55c8f040CA8A2de6ca2b4455a02A6C057322F;\r\n    address payable private partnerSeven = 0xe1544787B104F749dF01d3bE4Ec2Dc667A07ED7A;\r\n    address payable private partnerEight = 0x42a42Cd7bDC05Ca414a32572B5e7BFac9B29FEb1;\r\n    mapping (address => UserDetail) users;\r\n    mapping (uint256 => address payable) public userIds;\r\n    mapping (address => uint256) public addressToId;\r\n    mapping (uint8 => uint256) slotInvestment;\r\n    mapping (uint8 => uint256) slotMembershipFees;\r\n    \r\n    event Registration(address indexed userAddress, address referrerAddress, uint256 indexed userId, uint256 indexed referrerId);\r\n    event SlotPurchased(address indexed userAddress, uint8 slot);\r\n    event LevelIncome(address from, address indexed receiver, uint256 income, uint8 level, uint8 slot, uint256 levelReferralCount);\r\n    event SystemSwitched(address indexed userAddress, uint256 id);\r\n    event Reinvest(address indexed userAddress, uint256 userId, uint8 slot, uint256 cycleCount);\r\n    \r\n    \r\n    constructor(address payable ownerAddress) public {\r\n        owner = ownerAddress;\r\n        slotInvestment[1] = 0.05 ether;\r\n        slotInvestment[2] = 0.13 ether;\r\n        slotInvestment[3] = 0.39 ether;\r\n        slotInvestment[4] = 0.78 ether;\r\n        slotInvestment[5] = 1.29 ether;\r\n        slotInvestment[6] = 3.86 ether;\r\n        slotInvestment[7] = 7.69 ether;\r\n        slotInvestment[8] = 12.81 ether;\r\n        slotInvestment[9] = 17.99 ether;\r\n        slotInvestment[10] = 25.70 ether;\r\n       \r\n        slotMembershipFees[1] = 0.02 ether;\r\n        slotMembershipFees[2] = 0.03 ether;\r\n        slotMembershipFees[3] = 0.04 ether;\r\n        slotMembershipFees[4] = 0.04 ether;\r\n        slotMembershipFees[5] = 0.05 ether;\r\n        slotMembershipFees[6] = 0.06 ether;\r\n        slotMembershipFees[7] = 0.12 ether;\r\n        slotMembershipFees[8] = 0.30 ether;\r\n        slotMembershipFees[9] = 0.50 ether;\r\n        slotMembershipFees[10] = 0.80 ether;\r\n        \r\n        \r\n        \r\n        UserDetail memory user = UserDetail({\r\n            id: currentUserId,\r\n            userIncome: uint256(0),\r\n            walletIncome: uint256(0),\r\n            referrer: address(0)\r\n        });\r\n        \r\n        users[owner] = user;\r\n        userIds[currentUserId] = owner;\r\n        addressToId[owner] = currentUserId;\r\n        currentUserId++;\r\n        users[owner].systemActiveStatus[1] = true;\r\n        \r\n        emit Registration(owner, users[owner].referrer, users[owner].id, uint256(0));\r\n        \r\n        for (uint8 i=0; i<=10; i++) {\r\n            users[owner].slotActiveStatus[i] = true;\r\n            emit SlotPurchased(owner, i);\r\n        }\r\n    }\r\n    \r\n    function registration(address payable referrerAddress) external payable {\r\n        require(msg.value == 0.05 ether, \"registration amount is 0.05 ether\");\r\n        require(!isUserExists(msg.sender), \"user already exists\");\r\n        require(isUserExists(referrerAddress), \"referrer doesn't exists\");\r\n        \r\n        UserDetail memory user = UserDetail({\r\n            id: currentUserId,\r\n            userIncome: uint256(0),\r\n            walletIncome: uint256(0),\r\n            referrer: referrerAddress\r\n        });\r\n        \r\n        users[msg.sender] = user;\r\n        userIds[currentUserId] = msg.sender;\r\n        addressToId[msg.sender] = currentUserId;\r\n        currentUserId++;\r\n        users[msg.sender].systemActiveStatus[1] = true;\r\n        levelIncome(msg.sender, referrerAddress, 0);\r\n        membershipFeesDistribution(0);\r\n        \r\n        emit Registration(msg.sender, referrerAddress, users[msg.sender].id, users[referrerAddress].id);\r\n        emit SlotPurchased(msg.sender, 0);\r\n        \r\n        totalIncome += msg.value;\r\n        \r\n    }\r\n    \r\n    function purchaseSlot(uint8 slot) external payable {\r\n        UserDetail storage user = users[msg.sender];\r\n        require(slot > 1 && slot <=10, \"Invalid slot number\");\r\n        require(!user.slotActiveStatus[slot], \"Slot already activated\");\r\n        require(user.systemActiveStatus[2], \"system 2 is not active yet\");\r\n        require(msg.value == (slotInvestment[slot] + slotMembershipFees[slot]));\r\n        user.slotActiveStatus[slot] = true;\r\n        \r\n        levelIncome(msg.sender, user.referrer, slot);\r\n        membershipFeesDistribution(slot);\r\n        \r\n        emit SlotPurchased(msg.sender, slot);\r\n        \r\n        totalIncome += msg.value;\r\n        \r\n    }\r\n    \r\n    function levelIncome(address userAddress, address payable referrerAddress, uint8 slot) private {\r\n        uint256 investment;\r\n        \r\n        if (slot == 0) {\r\n            investment = 0.03 ether;\r\n        } else {\r\n            investment = slotInvestment[slot];\r\n        }\r\n        \r\n        uint256 investmentLevelOne = investment * 50/100;\r\n        uint256 investmentLevelTwo = investment * 20/100;\r\n        uint256 investmentLevelThree = investment * 15/100;\r\n        uint256 investmentLevelFour = investment * 10/100;\r\n        uint256 investmentLevelFive = investment * 5/100;\r\n        \r\n        referrerLevelOne = referrerAddress;\r\n        referrerLevelTwo = users[referrerLevelOne].referrer;\r\n        referrerLevelThree = users[referrerLevelTwo].referrer;\r\n        referrerLevelFour = users[referrerLevelThree].referrer;\r\n        referrerLevelFive = users[referrerLevelFour].referrer;\r\n        \r\n        if (referrerLevelOne != address(0)) {\r\n            UserDetail storage user = users[referrerLevelOne];\r\n            if (user.systemActiveStatus[1]) {\r\n                user.userIncome += investmentLevelOne;\r\n                user.levels[slot].slotLevelReferrals[1]++;\r\n                emit LevelIncome(userAddress, referrerLevelOne, investmentLevelOne, 1, slot, user.levels[slot].slotLevelReferrals[1]);\r\n                canSwitchSystem(userAddress, referrerLevelOne);\r\n            } else {\r\n                if (slot == 0) {\r\n                    slot =1;\r\n                }\r\n                user.userIncome += investmentLevelOne;\r\n                user.slotCycle[slot].cycleIncome += investmentLevelOne;\r\n                user.levels[slot].slotLevelReferrals[1]++;\r\n                emit LevelIncome(userAddress, referrerLevelOne, investmentLevelOne, 1, slot, user.levels[slot].slotLevelReferrals[1]);\r\n                slotCycleUpdate(userAddress, referrerLevelOne, slot);\r\n            }\r\n        }\r\n        \r\n        if (referrerLevelTwo != address(0)) {\r\n            UserDetail storage user = users[referrerLevelTwo];\r\n            if (user.systemActiveStatus[1]) {\r\n                user.userIncome += investmentLevelTwo;\r\n                user.levels[slot].slotLevelReferrals[2]++;\r\n                emit LevelIncome(userAddress, referrerLevelTwo, investmentLevelTwo, 2, slot, user.levels[slot].slotLevelReferrals[2]);\r\n                canSwitchSystem(userAddress, referrerLevelTwo);\r\n            } else {\r\n                if (slot == 0) {\r\n                    slot =1;\r\n                }\r\n                user.userIncome += investmentLevelTwo;\r\n                user.slotCycle[slot].cycleIncome += investmentLevelTwo;\r\n                user.levels[slot].slotLevelReferrals[2]++;\r\n                emit LevelIncome(userAddress, referrerLevelTwo, investmentLevelTwo, 2, slot, user.levels[slot].slotLevelReferrals[2]);\r\n                slotCycleUpdate(userAddress, referrerLevelTwo, slot);\r\n            }\r\n        }\r\n        \r\n        if (referrerLevelThree != address(0)) {\r\n            UserDetail storage user = users[referrerLevelThree];\r\n            if (user.systemActiveStatus[1]) {\r\n                user.userIncome += investmentLevelThree;\r\n                user.levels[slot].slotLevelReferrals[3]++;\r\n                emit LevelIncome(userAddress, referrerLevelThree, investmentLevelThree, 3, slot, user.levels[slot].slotLevelReferrals[3]);\r\n                canSwitchSystem(userAddress, referrerLevelThree);   \r\n            } else {\r\n                if (slot == 0) {\r\n                    slot =1;\r\n                }\r\n                user.userIncome += investmentLevelThree;\r\n                user.slotCycle[slot].cycleIncome += investmentLevelThree;\r\n                user.levels[slot].slotLevelReferrals[3]++;\r\n                emit LevelIncome(userAddress, referrerLevelThree, investmentLevelThree, 3, slot, user.levels[slot].slotLevelReferrals[3]);\r\n                slotCycleUpdate(userAddress, referrerLevelThree, slot);\r\n            }\r\n        }\r\n        \r\n        if (referrerLevelFour != address(0)) {\r\n            UserDetail storage user = users[referrerLevelFour];\r\n            if (user.systemActiveStatus[1]) {\r\n                user.userIncome += investmentLevelFour;\r\n                user.levels[slot].slotLevelReferrals[4]++;\r\n                emit LevelIncome(userAddress, referrerLevelFour, investmentLevelFour, 4, slot, user.levels[slot].slotLevelReferrals[4]);\r\n                canSwitchSystem(userAddress, referrerLevelFour);\r\n            } else {\r\n                if (slot == 0) {\r\n                    slot =1;\r\n                }\r\n                user.userIncome += investmentLevelFour;\r\n                user.slotCycle[slot].cycleIncome += investmentLevelFour;\r\n                user.levels[slot].slotLevelReferrals[4]++;\r\n                emit LevelIncome(userAddress, referrerLevelFour, investmentLevelFour, 4, slot, user.levels[slot].slotLevelReferrals[4]);\r\n                slotCycleUpdate(userAddress, referrerLevelFour, slot);\r\n            }\r\n        }\r\n        \r\n        if (referrerLevelFive != address(0)) {\r\n            UserDetail storage user = users[referrerLevelFive];\r\n            if (user.systemActiveStatus[1]) {\r\n                user.userIncome += investmentLevelFive;\r\n                user.levels[slot].slotLevelReferrals[5]++;\r\n                emit LevelIncome(userAddress, referrerLevelFive, investmentLevelFive, 5, slot, user.levels[slot].slotLevelReferrals[5]);\r\n                canSwitchSystem(userAddress, referrerLevelFive);\r\n            } else {\r\n                if (slot == 0) {\r\n                    slot =1;\r\n                }\r\n                user.userIncome += investmentLevelFive;\r\n                user.slotCycle[slot].cycleIncome += investmentLevelFive;\r\n                user.levels[slot].slotLevelReferrals[5]++;\r\n                emit LevelIncome(userAddress, referrerLevelFive, investmentLevelFive, 5, slot, user.levels[slot].slotLevelReferrals[5]);\r\n                slotCycleUpdate(userAddress, referrerLevelFive, slot);\r\n            }\r\n        }\r\n    }   \r\n    \r\n    function membershipFeesDistribution(uint8 slot) private {\r\n         uint256 fees;\r\n         \r\n        if (slot == 0) {\r\n            fees = 0.02 ether;\r\n        } else {\r\n            fees = slotMembershipFees[slot];\r\n        }\r\n        partnerOne.transfer(fees * 20/100);\r\n        partnerTwo.transfer(fees * 125/1000);\r\n        partnerThree.transfer(fees * 125/1000);\r\n        partnerFour.transfer(fees * 10/100);\r\n        partnerFive.transfer(fees * 10/100);\r\n        partnerSix.transfer(fees * 10/100);\r\n        partnerSeven.transfer(fees * 10/100);\r\n        partnerEight.transfer(fees * 15/100);\r\n        \r\n    }\r\n    \r\n    function canSwitchSystem(address userAddress, address payable referrerAddress) private {\r\n        \r\n        uint256 systemThreshold = slotInvestment[1] + slotMembershipFees[1];\r\n        UserDetail storage user = users[referrerAddress];\r\n        require(user.systemActiveStatus[1], \"system already switched to S2\");// check this condition.\r\n        if (user.userIncome >= systemThreshold) {\r\n            referrerAddress.transfer(user.userIncome - systemThreshold);\r\n            user.walletIncome += (user.userIncome - systemThreshold);\r\n            levelIncome(userAddress, user.referrer, 1);\r\n            membershipFeesDistribution(1);\r\n            user.systemActiveStatus[1] = false;\r\n            user.systemActiveStatus[2] = true;\r\n            \r\n            emit SystemSwitched(referrerAddress, users[referrerAddress].id);\r\n            emit SlotPurchased(referrerAddress, 1);\r\n        }\r\n    }\r\n    \r\n    function slotCycleUpdate(address userPlaced, address payable userAddress, uint8 slot) private {\r\n        UserDetail storage user = users[userAddress];\r\n        \r\n        if (slot == 0) {\r\n            slot = 1;\r\n        }\r\n        \r\n        uint256 cycleThreshold = (slotInvestment[slot] * 3);\r\n        uint256 cycleCompletionRewards = cycleThreshold * 20/100;\r\n        uint256 slotRepurchaseCost = slotInvestment[slot] + slotMembershipFees[slot];\r\n        uint256 walletTransfer = (user.slotCycle[slot].cycleIncome - (cycleCompletionRewards + slotRepurchaseCost + user.slotCycle[slot].cycleWalletTransfer));\r\n        \r\n        if (user.slotCycle[slot].cycleIncome >= (cycleCompletionRewards + slotRepurchaseCost)) {\r\n            userAddress.transfer(walletTransfer);\r\n            user.walletIncome += walletTransfer;\r\n            user.slotCycle[slot].cycleWalletTransfer += walletTransfer;\r\n            \r\n        }\r\n        \r\n        if (user.slotCycle[slot].cycleIncome >= cycleThreshold) {\r\n            \r\n            freeReferrer = nextFreeReferrer(userAddress, slot);\r\n            if (freeReferrer != address(0)) {\r\n                users[freeReferrer].userIncome += cycleCompletionRewards;\r\n                users[freeReferrer].walletIncome += cycleCompletionRewards;\r\n                freeReferrer.transfer(cycleCompletionRewards);\r\n            }\r\n            \r\n            user.slotCycle[slot].cycleIncome = 0;\r\n            user.slotCycle[slot].cycleWalletTransfer = 0;\r\n            user.slotCycle[slot].cycleCount++;\r\n            membershipFeesDistribution(slot);\r\n            \r\n            emit Reinvest(userAddress, user.id, slot, user.slotCycle[slot].cycleCount);\r\n            \r\n        }\r\n    }\r\n    \r\n    function nextFreeReferrer(address payable userAddress, uint8 slot) public view returns(address payable) {\r\n        while (userAddress != owner) {\r\n            if (users[users[userAddress].referrer].slotActiveStatus[slot]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n            return address(0);\r\n    }\r\n    \r\n    function isUserExists(address userAddress) public view returns (bool) {\r\n        return (users[userAddress].id != 0);\r\n    }\r\n    \r\n    function getUserDetails(uint id, uint8 slot) public view returns (uint256 userIncome, uint256 cycleIncome, uint256 walletIncome, bool systemOneStatus, bool systemTwoStatus) {\r\n        return (\r\n            users[userIds[id]].userIncome,\r\n            users[userIds[id]].slotCycle[slot].cycleIncome,\r\n            users[userIds[id]].walletIncome,\r\n            users[userIds[id]].systemActiveStatus[1],\r\n            users[userIds[id]].systemActiveStatus[2]\r\n            );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"levelReferralCount\",\"type\":\"uint256\"}],\"name\":\"LevelIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycleCount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"SlotPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SystemSwitched\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletIncome\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"systemOneStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"systemTwoStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"nextFreeReferrer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"purchaseSlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SuperStar","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000458384bc4850f61b9cdecccb0a0167ce721212d1","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9418eced85d9366430477d1b2bfbfb7fd2147125de70ea75b24bbffe6488d93"}]}