{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// File: ERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * @notice Copied from OpenZeppelin.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: Vesting.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for vesting schedules with cliff period.\r\n */\r\ncontract Vesting {\r\n    // ERC20 basic token contract being held\r\n    IERC20 private _token;\r\n\r\n    // Vesting struct to store address info\r\n    struct VestingStruct {\r\n        uint256 vestedTokens;\r\n        uint256 cliffPeriod;\r\n        uint256 vestingPeriod;\r\n        uint256 vestingStartTime;\r\n        uint256 withdrawalPerDay;\r\n    }\r\n\r\n    // Mapping to store Balance and Release Time of Beneficiary\r\n    mapping(address => VestingStruct) public addressInfo;\r\n\r\n    mapping(address => uint256) public tokensAlreadyWithdrawn;\r\n\r\n    /**\r\n     * @dev Triggers on new deposit call\r\n     */\r\n    event TokenVested(\r\n        address beneficary,\r\n        uint256 amount,\r\n        uint256 cliffPeriod,\r\n        uint256 vestingPeriod,\r\n        uint256 vestingStartTime,\r\n        uint256 withdrawalPerDay\r\n    );\r\n\r\n    /**\r\n     * @dev Triggers on every release\r\n     */\r\n    event TokenReleased(address beneficary, uint256 amount);\r\n\r\n    /**\r\n     * @dev Sets the token address to be vested.\r\n     *\r\n     * token_ value is immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(IERC20 token_) public {\r\n        _token = token_;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function token() external view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the total token stored in the contract\r\n     */\r\n    function totalTokensVested() external view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit tokens for vesting.\r\n     * @param beneficiary The address, who can release token after vesting duration.\r\n     * @param amount The amount of token to be locked.\r\n     * @param vestingPeriod Must be in days.\r\n     */\r\n    function deposit(\r\n        address beneficiary,\r\n        uint256 amount,\r\n        uint256 cliffPeriod,\r\n        uint256 vestingPeriod\r\n    ) external returns (bool success) {\r\n        VestingStruct memory result = addressInfo[msg.sender];\r\n\r\n        require(\r\n            result.vestedTokens == 0,\r\n            \"Vesting: Beneficiary already have vested token. Use another address\"\r\n        );\r\n\r\n        require(\r\n            _token.transferFrom(msg.sender, address(this), amount),\r\n            \"Vesting: Please approve token first\"\r\n        );\r\n\r\n        addressInfo[beneficiary] = VestingStruct(\r\n            amount,\r\n            cliffPeriod,\r\n            vestingPeriod,\r\n            block.timestamp,\r\n            amount / vestingPeriod\r\n        );\r\n\r\n        emit TokenVested(\r\n            beneficiary,\r\n            amount,\r\n            cliffPeriod,\r\n            vestingPeriod,\r\n            block.timestamp,\r\n            amount / vestingPeriod\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function withdraw() external virtual {\r\n        VestingStruct memory result = addressInfo[msg.sender];\r\n\r\n        require(\r\n            result.vestedTokens > 0,\r\n            \"Vesting: You don't have any vested token\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp >=\r\n                (result.vestingStartTime + (result.cliffPeriod * 1 days)),\r\n            \"Vesting: Cliff period is not over yet\"\r\n        );\r\n\r\n        uint256 tokensAvailable = getAvailableTokens(msg.sender);\r\n        uint256 alreadyWithdrawn = tokensAlreadyWithdrawn[msg.sender];\r\n\r\n        require(\r\n            tokensAvailable + alreadyWithdrawn <= result.vestedTokens,\r\n            \"Vesting: Can't withdraw more than vested token amount\"\r\n        );\r\n\r\n        if (tokensAvailable + alreadyWithdrawn == result.vestedTokens) {\r\n            tokensAlreadyWithdrawn[msg.sender] = 0;\r\n            addressInfo[msg.sender] = VestingStruct(0, 0, 0, 0, 0);\r\n        } else {\r\n            tokensAlreadyWithdrawn[msg.sender] += tokensAvailable;\r\n        }\r\n\r\n        emit TokenReleased(msg.sender, tokensAvailable);\r\n\r\n        _token.transfer(msg.sender, tokensAvailable);\r\n    }\r\n\r\n    function getAvailableTokens(address beneficiary)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        VestingStruct memory result = addressInfo[beneficiary];\r\n\r\n        if (result.vestedTokens > 0) {\r\n            uint256 vestingEndTime =\r\n                (result.vestingStartTime + (result.vestingPeriod * 1 days));\r\n\r\n            if (block.timestamp >= vestingEndTime) {\r\n                return\r\n                    result.vestedTokens - tokensAlreadyWithdrawn[beneficiary];\r\n            } else {\r\n                uint256 totalDays =\r\n                    ((\r\n                        block.timestamp > vestingEndTime\r\n                            ? vestingEndTime\r\n                            : block.timestamp\r\n                    ) - result.vestingStartTime) / 1 days;\r\n\r\n                return\r\n                    (totalDays * result.withdrawalPerDay) -\r\n                    tokensAlreadyWithdrawn[beneficiary];\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalPerDay\",\"type\":\"uint256\"}],\"name\":\"TokenVested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalPerDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAlreadyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d8e3fb3b08eba982f2754988d70d57edc0055ae6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://29ebefda570316b0b5d507a6fd77dae2883ef4f7e87991f14a3c0a194864cf39"}]}