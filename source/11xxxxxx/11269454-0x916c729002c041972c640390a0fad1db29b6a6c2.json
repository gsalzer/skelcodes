{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IWhitelist.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * Source: https://raw.githubusercontent.com/simple-restricted-token/reference-implementation/master/contracts/token/ERC1404/ERC1404.sol\r\n * With ERC-20 APIs removed (will be implemented as a separate contract).\r\n * And adding authorizeTransfer.\r\n */\r\ninterface IWhitelist {\r\n  /**\r\n   * @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n   * @param from Sending address\r\n   * @param to Receiving address\r\n   * @param value Amount of tokens being transferred\r\n   * @return Code by which to reference message for rejection reasoning\r\n   * @dev Overwrite with your custom transfer restriction logic\r\n   */\r\n  function detectTransferRestriction(\r\n    address from,\r\n    address to,\r\n    uint value\r\n  ) external view returns (uint8);\r\n\r\n  /**\r\n   * @notice Returns a human-readable message for a given restriction code\r\n   * @param restrictionCode Identifier for looking up a message\r\n   * @return Text showing the restriction's reasoning\r\n   * @dev Overwrite with your custom message and restrictionCode handling\r\n   */\r\n  function messageForTransferRestriction(uint8 restrictionCode)\r\n    external\r\n    pure\r\n    returns (string memory);\r\n\r\n  /**\r\n   * @notice Called by the DAT contract before a transfer occurs.\r\n   * @dev This call will revert when the transfer is not authorized.\r\n   * This is a mutable call to allow additional data to be recorded,\r\n   * such as when the user aquired their tokens.\r\n   */\r\n  function authorizeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bool _isSell\r\n  ) external;\r\n\r\n  function walletActivated(\r\n    address _wallet\r\n  ) external returns(bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/mixins/OperatorRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Original source: openzeppelin's SignerRole\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice allows a single owner to manage a group of operators which may\r\n * have some special permissions in the contract.\r\n */\r\ncontract OperatorRole is Initializable, Context, Ownable {\r\n  using Roles for Roles.Role;\r\n\r\n  event OperatorAdded(address indexed account);\r\n  event OperatorRemoved(address indexed account);\r\n\r\n  Roles.Role private _operators;\r\n\r\n  function _initializeOperatorRole() internal {\r\n    _addOperator(msg.sender);\r\n  }\r\n\r\n  modifier onlyOperator() {\r\n    require(\r\n      isOperator(msg.sender),\r\n      \"OperatorRole: caller does not have the Operator role\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function isOperator(address account) public view returns (bool) {\r\n    return _operators.has(account);\r\n  }\r\n\r\n  function addOperator(address account) public onlyOwner {\r\n    _addOperator(account);\r\n  }\r\n\r\n  function removeOperator(address account) public onlyOwner {\r\n    _removeOperator(account);\r\n  }\r\n\r\n  function renounceOperator() public {\r\n    _removeOperator(msg.sender);\r\n  }\r\n\r\n  function _addOperator(address account) internal {\r\n    _operators.add(account);\r\n    emit OperatorAdded(account);\r\n  }\r\n\r\n  function _removeOperator(address account) internal {\r\n    _operators.remove(account);\r\n    emit OperatorRemoved(account);\r\n  }\r\n\r\n  uint[50] private ______gap;\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice whitelist which manages KYC approvals, token lockup, and transfer\r\n * restrictions for a DAT token.\r\n */\r\ncontract Whitelist is IWhitelist, Ownable, OperatorRole {\r\n  using SafeMath for uint;\r\n\r\n  // uint8 status codes as suggested by the ERC-1404 spec\r\n  uint8 private constant STATUS_SUCCESS = 0;\r\n  uint8 private constant STATUS_ERROR_JURISDICTION_FLOW = 1;\r\n  uint8 private constant STATUS_ERROR_LOCKUP = 2;\r\n  uint8 private constant STATUS_ERROR_USER_UNKNOWN = 3;\r\n  uint8 private constant STATUS_ERROR_JURISDICTION_HALT = 4;\r\n  uint8 private constant STATUS_ERROR_NON_LISTED_USER = 5;\r\n\r\n  event ConfigWhitelist(\r\n    uint _startDate,\r\n    uint _lockupGranularity,\r\n    address indexed _operator\r\n  );\r\n  event UpdateJurisdictionFlow(\r\n    uint indexed _fromJurisdictionId,\r\n    uint indexed _toJurisdictionId,\r\n    uint _lockupLength,\r\n    address indexed _operator\r\n  );\r\n  event ApproveNewUser(\r\n    address indexed _trader,\r\n    uint indexed _jurisdictionId,\r\n    address indexed _operator\r\n  );\r\n  event AddApprovedUserWallet(\r\n    address indexed _userId,\r\n    address indexed _newWallet,\r\n    address indexed _operator\r\n  );\r\n  event RevokeUserWallet(address indexed _wallet, address indexed _operator);\r\n  event UpdateJurisdictionForUserId(\r\n    address indexed _userId,\r\n    uint indexed _jurisdictionId,\r\n    address indexed _operator\r\n  );\r\n  event AddLockup(\r\n    address indexed _userId,\r\n    uint _lockupExpirationDate,\r\n    uint _numberOfTokensLocked,\r\n    address indexed _operator\r\n  );\r\n  event UnlockTokens(\r\n    address indexed _userId,\r\n    uint _tokensUnlocked,\r\n    address indexed _operator\r\n  );\r\n  event Halt(uint indexed _jurisdictionId, uint _until);\r\n  event Resume(uint indexed _jurisdictionId);\r\n  event MaxInvestorsChanged(uint _limit);\r\n  event MaxInvestorsByJurisdictionChanged(uint indexed _jurisdictionId, uint _limit);\r\n  event InvestorEnlisted(address indexed _userId, uint indexed _jurisdictionId);\r\n  event InvestorDelisted(address indexed _userId, uint indexed _jurisdictionId);\r\n  event WalletActivated(address indexed _userId, address indexed _wallet);\r\n  event WalletDeactivated(address indexed _userId, address indexed _wallet);\r\n\r\n  /**\r\n   * @notice the address of the contract this whitelist manages.\r\n   * @dev this cannot change after initialization\r\n   */\r\n  IERC20 public callingContract;\r\n\r\n  /**\r\n   * @notice blocks all new purchases until now >= startDate.\r\n   * @dev this can be changed by the owner at any time\r\n   */\r\n  uint public startDate;\r\n\r\n  /**\r\n   * @notice Merges lockup entries when the time delta between\r\n   * them is less than this value.\r\n   * @dev this can be changed by the owner at any time\r\n   */\r\n  uint public lockupGranularity;\r\n\r\n  /**\r\n   * @notice Maps the `from` jurisdiction to the `to` jurisdiction to determine if\r\n   * transfers between these entities are allowed and if a token lockup should apply:\r\n   * - 0 means transfers between these jurisdictions is blocked (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - >1 is supported and this value defines the lockup length in seconds\r\n   * @dev You can read data externally with `getJurisdictionFlow`.\r\n   * This configuration can be modified by the owner at any time\r\n   */\r\n  mapping(uint => mapping(uint => uint)) internal jurisdictionFlows;\r\n\r\n  /**\r\n   * @notice Maps a KYC'd user addresses to their userId.\r\n   * @dev The first entry for each user should set userId = user address.\r\n   * Future entries can use the same userId for shared accounts\r\n   * (e.g. a single user with multiple wallets).\r\n   *\r\n   * All wallets with the same userId share the same token lockup.\r\n   */\r\n  mapping(address => address) public authorizedWalletToUserId;\r\n\r\n  /**\r\n   * @notice info stored for each userId.\r\n   */\r\n  struct UserInfo {\r\n    // The user's current jurisdictionId or 0 for unknown (the default)\r\n    uint jurisdictionId;\r\n    // The number of tokens locked, with details tracked in userIdLockups\r\n    uint totalTokensLocked;\r\n    // The first applicable entry in userIdLockups\r\n    uint startIndex;\r\n    // The last applicable entry in userIdLockups + 1\r\n    uint endIndex;\r\n  }\r\n\r\n  /**\r\n   * @notice Maps the userId to UserInfo.\r\n   * @dev You can read data externally with `getAuthorizedUserIdInfo`.\r\n   */\r\n  mapping(address => UserInfo) internal authorizedUserIdInfo;\r\n\r\n  /**\r\n   * @notice info stored for each token lockup.\r\n   */\r\n  struct Lockup {\r\n    // The date/time that this lockup entry has expired and the tokens may be transferred\r\n    uint lockupExpirationDate;\r\n    // How many tokens locked until the given expiration date.\r\n    uint numberOfTokensLocked;\r\n  }\r\n\r\n  /**\r\n   * @notice Maps the userId -> lockup entry index -> a Lockup entry\r\n   * @dev Indexes are tracked by the UserInfo entries.\r\n   * You can read data externally with `getUserIdLockup`.\r\n   * We assume lockups are always added in order of expiration date -\r\n   * if that assumption does not hold, some tokens may remain locked\r\n   * until older lockup entries from that user have expired.\r\n   */\r\n  mapping(address => mapping(uint => Lockup)) internal userIdLockups;\r\n\r\n  /**\r\n   * @notice Maps Jurisdiction Id to it's halt due\r\n   */\r\n  mapping(uint => uint) public jurisdictionHaltsUntil;\r\n\r\n  /**\r\n   * @notice maximum investors that this contract can hold\r\n   */\r\n  uint public maxInvestors;\r\n\r\n  /**\r\n   * @notice number of users enlisted in the contract. Should be less or equal to `maxInvestors`\r\n   */\r\n  uint public currentInvestors;\r\n\r\n  /**\r\n   * @notice maximum investors for jurisdictions\r\n   */\r\n  mapping(uint => uint) public maxInvestorsByJurisdiction;\r\n\r\n  /**\r\n   * @notice current investors for jurisdictions\r\n   */\r\n  mapping(uint => uint) public currentInvestorsByJurisdiction;\r\n\r\n  /**\r\n   * @notice mapping to check if user is in `currenctInvestors` for both contract and jurisdiction\r\n   * should be true to interact with the contract\r\n   */\r\n  mapping(address => bool) public investorEnlisted;\r\n\r\n  /**\r\n   * @notice count of user wallet to check investor should be enlisted\r\n   */\r\n  mapping(address => uint) public userActiveWalletCount;\r\n\r\n  /**\r\n   * @notice mapping to check if wallet is in `userActiveWalletCount`\r\n   */\r\n  mapping(address => bool) public walletActivated;\r\n\r\n\r\n  /**\r\n   * @notice mapping to check wallet's previous owner userId\r\n   */\r\n  mapping(address => address) public revokedFrom;\r\n\r\n  /**\r\n   * @notice checks for transfer restrictions between jurisdictions.\r\n   * @return if transfers between these jurisdictions are allowed and if a\r\n   * token lockup should apply:\r\n   * - 0 means transfers between these jurisdictions is blocked (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - >1 is supported and this value defines the lockup length in seconds\r\n   */\r\n  function getJurisdictionFlow(\r\n    uint _fromJurisdictionId,\r\n    uint _toJurisdictionId\r\n  ) external view returns (uint lockupLength) {\r\n    return jurisdictionFlows[_fromJurisdictionId][_toJurisdictionId];\r\n  }\r\n\r\n  /**\r\n   * @notice checks details for a given userId.\r\n   */\r\n  function getAuthorizedUserIdInfo(address _userId)\r\n    external\r\n    view\r\n    returns (\r\n      uint jurisdictionId,\r\n      uint totalTokensLocked,\r\n      uint startIndex,\r\n      uint endIndex\r\n    )\r\n  {\r\n    UserInfo memory info = authorizedUserIdInfo[_userId];\r\n    return (\r\n      info.jurisdictionId,\r\n      info.totalTokensLocked,\r\n      info.startIndex,\r\n      info.endIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice gets a specific lockup entry for a userId.\r\n   * @dev use `getAuthorizedUserIdInfo` to determine the range of applicable lockupIndex.\r\n   */\r\n  function getUserIdLockup(address _userId, uint _lockupIndex)\r\n    external\r\n    view\r\n    returns (uint lockupExpirationDate, uint numberOfTokensLocked)\r\n  {\r\n    Lockup memory lockup = userIdLockups[_userId][_lockupIndex];\r\n    return (lockup.lockupExpirationDate, lockup.numberOfTokensLocked);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the number of unlocked tokens a given userId has available.\r\n   * @dev this is a `view`-only way to determine how many tokens are still locked\r\n   * (info.totalTokensLocked is only accurate after processing lockups which changes state)\r\n   */\r\n  function getLockedTokenCount(address _userId)\r\n    external\r\n    view\r\n    returns (uint lockedTokens)\r\n  {\r\n    UserInfo memory info = authorizedUserIdInfo[_userId];\r\n    lockedTokens = info.totalTokensLocked;\r\n    uint endIndex = info.endIndex;\r\n    for (uint i = info.startIndex; i < endIndex; i++) {\r\n      Lockup memory lockup = userIdLockups[_userId][i];\r\n      if (lockup.lockupExpirationDate > block.timestamp) {\r\n        // no more eligible entries\r\n        break;\r\n      }\r\n      // this lockup entry has expired and would be processed on the next tx\r\n      lockedTokens -= lockup.numberOfTokensLocked;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if there is a transfer restriction for the given addresses.\r\n   * Does not consider tokenLockup. Use `getLockedTokenCount` for that.\r\n   * @dev this function is from the erc-1404 standard and currently in use by the DAT\r\n   * for the `pay` feature.\r\n   */\r\n  function detectTransferRestriction(\r\n    address _from,\r\n    address _to,\r\n    uint /* _value */\r\n  ) external view returns (uint8 status) {\r\n    address fromUserId = authorizedWalletToUserId[_from];\r\n    address toUserId = authorizedWalletToUserId[_to];\r\n    if (\r\n      (fromUserId == address(0) && _from != address(0)) ||\r\n      (toUserId == address(0) && _to != address(0))\r\n    ) {\r\n      return STATUS_ERROR_USER_UNKNOWN;\r\n    }\r\n    if (fromUserId != toUserId) {\r\n      uint fromJurisdictionId = authorizedUserIdInfo[fromUserId]\r\n        .jurisdictionId;\r\n      uint toJurisdictionId = authorizedUserIdInfo[toUserId].jurisdictionId;\r\n      if (_isJurisdictionHalted(fromJurisdictionId) || _isJurisdictionHalted(toJurisdictionId)){\r\n        return STATUS_ERROR_JURISDICTION_HALT;\r\n      }\r\n      if (jurisdictionFlows[fromJurisdictionId][toJurisdictionId] == 0) {\r\n        return STATUS_ERROR_JURISDICTION_FLOW;\r\n      }\r\n    }\r\n\r\n    return STATUS_SUCCESS;\r\n  }\r\n\r\n  function messageForTransferRestriction(uint8 _restrictionCode)\r\n    external\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    if (_restrictionCode == STATUS_SUCCESS) {\r\n      return \"SUCCESS\";\r\n    }\r\n    if (_restrictionCode == STATUS_ERROR_JURISDICTION_FLOW) {\r\n      return \"DENIED: JURISDICTION_FLOW\";\r\n    }\r\n    if (_restrictionCode == STATUS_ERROR_LOCKUP) {\r\n      return \"DENIED: LOCKUP\";\r\n    }\r\n    if (_restrictionCode == STATUS_ERROR_USER_UNKNOWN) {\r\n      return \"DENIED: USER_UNKNOWN\";\r\n    }\r\n    if (_restrictionCode == STATUS_ERROR_JURISDICTION_HALT){\r\n      return \"DENIED: JURISDICTION_HALT\";\r\n    }\r\n    return \"DENIED: UNKNOWN_ERROR\";\r\n  }\r\n\r\n  /**\r\n   * @notice Called once to complete configuration for this contract.\r\n   * @dev Done with `initialize` instead of a constructor in order to support\r\n   * using this contract via an Upgradable Proxy.\r\n   */\r\n  function initialize(address _callingContract) public {\r\n    Ownable.initialize(msg.sender);\r\n    _initializeOperatorRole();\r\n    callingContract = IERC20(_callingContract);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the owner to update the startDate or lockupGranularity.\r\n   */\r\n  function configWhitelist(uint _startDate, uint _lockupGranularity)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    startDate = _startDate;\r\n    lockupGranularity = _lockupGranularity;\r\n    emit ConfigWhitelist(_startDate, _lockupGranularity, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the owner to define or update jurisdiction flows.\r\n   * @param _lockupLengths defines transfer restrictions where:\r\n   * - 0 is not supported (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - >1 is supported and this value defines the lockup length in seconds.\r\n   * @dev note that this can be called with a partial list, only including entries\r\n   * to be added or which have changed.\r\n   */\r\n  function updateJurisdictionFlows(\r\n    uint[] calldata _fromJurisdictionIds,\r\n    uint[] calldata _toJurisdictionIds,\r\n    uint[] calldata _lockupLengths\r\n  ) external onlyOwner() {\r\n    uint count = _fromJurisdictionIds.length;\r\n    for (uint i = 0; i < count; i++) {\r\n      uint fromJurisdictionId = _fromJurisdictionIds[i];\r\n      uint toJurisdictionId = _toJurisdictionIds[i];\r\n      require(\r\n        fromJurisdictionId > 0 && toJurisdictionId > 0,\r\n        \"INVALID_JURISDICTION_ID\"\r\n      );\r\n      jurisdictionFlows[fromJurisdictionId][toJurisdictionId] = _lockupLengths[i];\r\n      emit UpdateJurisdictionFlow(\r\n        fromJurisdictionId,\r\n        toJurisdictionId,\r\n        _lockupLengths[i],\r\n        msg.sender\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to add new traders.\r\n   * @dev The trader will be assigned a userId equal to their wallet address.\r\n   */\r\n  function approveNewUsers(\r\n    address[] calldata _traders,\r\n    uint[] calldata _jurisdictionIds\r\n  ) external onlyOperator() {\r\n    uint length = _traders.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      address trader = _traders[i];\r\n      require(\r\n        authorizedWalletToUserId[trader] == address(0),\r\n        \"USER_WALLET_ALREADY_ADDED\"\r\n      );\r\n      require(\r\n        revokedFrom[trader] == address(0) ||\r\n        revokedFrom[trader] == trader,\r\n        \"ATTEMPT_TO_ADD_PREVIOUS_WALLET_AS_NEW_USER\"\r\n      );\r\n      uint jurisdictionId = _jurisdictionIds[i];\r\n      require(jurisdictionId != 0, \"INVALID_JURISDICTION_ID\");\r\n\r\n      authorizedWalletToUserId[trader] = trader;\r\n      authorizedUserIdInfo[trader].jurisdictionId = jurisdictionId;\r\n      emit ApproveNewUser(trader, jurisdictionId, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to add wallets to known userIds.\r\n   */\r\n  function addApprovedUserWallets(\r\n    address[] calldata _userIds,\r\n    address[] calldata _newWallets\r\n  ) external onlyOperator() {\r\n    uint length = _userIds.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      address userId = _userIds[i];\r\n      require(\r\n        authorizedUserIdInfo[userId].jurisdictionId != 0,\r\n        \"USER_ID_UNKNOWN\"\r\n      );\r\n      address newWallet = _newWallets[i];\r\n      require(\r\n        authorizedWalletToUserId[newWallet] == address(0),\r\n        \"WALLET_ALREADY_ADDED\"\r\n      );\r\n      require(\r\n        revokedFrom[newWallet] == address(0) ||\r\n        revokedFrom[newWallet] == userId,\r\n        \"ATTEMPT_TO_EXCHANGE_WALLET\"\r\n      );\r\n\r\n      authorizedWalletToUserId[newWallet] = userId;\r\n      emit AddApprovedUserWallet(userId, newWallet, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to revoke approval for the given wallets.\r\n   * @dev If this is called in error, you can restore access with `addApprovedUserWallets`.\r\n   */\r\n  function revokeUserWallets(address[] calldata _wallets)\r\n    external\r\n    onlyOperator()\r\n  {\r\n    uint length = _wallets.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      address wallet = _wallets[i];\r\n      require(\r\n        authorizedWalletToUserId[wallet] != address(0),\r\n        \"WALLET_NOT_FOUND\"\r\n      );\r\n\r\n      // deactivate wallet\r\n      if(walletActivated[wallet]){\r\n        _deactivateWallet(wallet);\r\n      }\r\n\r\n      // save previous userId to prevent offchain wallet trade\r\n      revokedFrom[wallet] = authorizedWalletToUserId[wallet];\r\n\r\n      authorizedWalletToUserId[wallet] = address(0);\r\n      emit RevokeUserWallet(wallet, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to change the jurisdiction\r\n   * for the given userIds.\r\n   */\r\n  function updateJurisdictionsForUserIds(\r\n    address[] calldata _userIds,\r\n    uint[] calldata _jurisdictionIds\r\n  ) external onlyOperator() {\r\n    uint length = _userIds.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      address userId = _userIds[i];\r\n      require(\r\n        authorizedUserIdInfo[userId].jurisdictionId != 0,\r\n        \"USER_ID_UNKNOWN\"\r\n      );\r\n      uint jurisdictionId = _jurisdictionIds[i];\r\n      require(jurisdictionId != 0, \"INVALID_JURISDICTION_ID\");\r\n      if(investorEnlisted[userId]){\r\n        //decrease current user count from old jurisdiction\r\n        currentInvestorsByJurisdiction[authorizedUserIdInfo[userId].jurisdictionId]--;\r\n        //increase current user count for new jurisdiction\r\n        currentInvestorsByJurisdiction[jurisdictionId]++;\r\n      }\r\n      authorizedUserIdInfo[userId].jurisdictionId = jurisdictionId;\r\n      emit UpdateJurisdictionForUserId(userId, jurisdictionId, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a tokenLockup for the userId.\r\n   * @dev A no-op if lockup is not required for this transfer.\r\n   * The lockup entry is merged with the most recent lockup for that user\r\n   * if the expiration date is <= `lockupGranularity` from the previous entry.\r\n   */\r\n  function _addLockup(\r\n    address _userId,\r\n    uint _lockupExpirationDate,\r\n    uint _numberOfTokensLocked\r\n  ) internal {\r\n    if (\r\n      _numberOfTokensLocked == 0 || _lockupExpirationDate <= block.timestamp\r\n    ) {\r\n      // This is a no-op\r\n      return;\r\n    }\r\n    emit AddLockup(\r\n      _userId,\r\n      _lockupExpirationDate,\r\n      _numberOfTokensLocked,\r\n      msg.sender\r\n    );\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId != 0, \"USER_ID_UNKNOWN\");\r\n    info.totalTokensLocked = info.totalTokensLocked.add(_numberOfTokensLocked);\r\n    if (info.endIndex > 0) {\r\n      Lockup storage lockup = userIdLockups[_userId][info.endIndex - 1];\r\n      if (\r\n        lockup.lockupExpirationDate + lockupGranularity >= _lockupExpirationDate\r\n      ) {\r\n        // Merge with the previous entry\r\n        // if totalTokensLocked can't overflow then this value will not either\r\n        lockup.numberOfTokensLocked += _numberOfTokensLocked;\r\n        return;\r\n      }\r\n    }\r\n    // Add a new lockup entry\r\n    userIdLockups[_userId][info.endIndex] = Lockup(\r\n      _lockupExpirationDate,\r\n      _numberOfTokensLocked\r\n    );\r\n    info.endIndex++;\r\n  }\r\n\r\n  /**\r\n   * @notice Operators can manually add lockups for userIds.\r\n   * This may be used by the organization before transfering tokens\r\n   * from the initial supply.\r\n   */\r\n  function addLockups(\r\n    address[] calldata _userIds,\r\n    uint[] calldata _lockupExpirationDates,\r\n    uint[] calldata _numberOfTokensLocked\r\n  ) external onlyOperator() {\r\n    uint length = _userIds.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      _addLockup(\r\n        _userIds[i],\r\n        _lockupExpirationDates[i],\r\n        _numberOfTokensLocked[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks the next lockup entry for a given user and unlocks\r\n   * those tokens if applicable.\r\n   * @param _ignoreExpiration bypasses the recorded expiration date and\r\n   * removes the lockup entry if there are any remaining for this user.\r\n   */\r\n  function _processLockup(\r\n    UserInfo storage info,\r\n    address _userId,\r\n    bool _ignoreExpiration\r\n  ) internal returns (bool isDone) {\r\n    if (info.startIndex >= info.endIndex) {\r\n      // no lockups for this user\r\n      return true;\r\n    }\r\n    Lockup storage lockup = userIdLockups[_userId][info.startIndex];\r\n    if (lockup.lockupExpirationDate > block.timestamp && !_ignoreExpiration) {\r\n      // no more eligable entries\r\n      return true;\r\n    }\r\n    emit UnlockTokens(_userId, lockup.numberOfTokensLocked, msg.sender);\r\n    info.totalTokensLocked -= lockup.numberOfTokensLocked;\r\n    info.startIndex++;\r\n    // Free up space we don't need anymore\r\n    lockup.numberOfTokensLocked = 0;\r\n    lockup.lockupExpirationDate = 0;\r\n    // There may be another entry\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @notice Anyone can process lockups for a userId.\r\n   * This is generally unused but may be required if a given userId\r\n   * has a lot of individual lockup entries which are expired.\r\n   */\r\n  function processLockups(address _userId, uint _maxCount) external {\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId > 0, \"USER_ID_UNKNOWN\");\r\n    for (uint i = 0; i < _maxCount; i++) {\r\n      if (_processLockup(info, _userId, false)) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allows operators to remove lockup entries, bypassing the\r\n   * recorded expiration date.\r\n   * @dev This should generally remain unused. It could be used in combination with\r\n   * `addLockups` to fix an incorrect lockup expiration date or quantity.\r\n   */\r\n  function forceUnlockUpTo(address _userId, uint _maxLockupIndex)\r\n    external\r\n    onlyOperator()\r\n  {\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId > 0, \"USER_ID_UNKNOWN\");\r\n    require(_maxLockupIndex > info.startIndex, \"ALREADY_UNLOCKED\");\r\n    uint maxCount = _maxLockupIndex - info.startIndex;\r\n    for (uint i = 0; i < maxCount; i++) {\r\n      if (_processLockup(info, _userId, true)) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _isJurisdictionHalted(uint _jurisdictionId) internal view returns(bool){\r\n    uint until = jurisdictionHaltsUntil[_jurisdictionId];\r\n    return until != 0 && until > now;\r\n  }\r\n\r\n  /**\r\n   * @notice halts jurisdictions of id `_jurisdictionIds` for `_duration` seconds\r\n   * @dev only owner can call this function\r\n   * @param _jurisdictionIds ids of the jurisdictions to halt\r\n   * @param _expirationTimestamps due when halt ends\r\n   **/\r\n  function halt(uint[] calldata _jurisdictionIds, uint[] calldata _expirationTimestamps) external onlyOwner {\r\n    uint length = _jurisdictionIds.length;\r\n    for(uint i = 0; i<length; i++){\r\n      _halt(_jurisdictionIds[i], _expirationTimestamps[i]);\r\n    }\r\n  }\r\n\r\n  function _halt(uint _jurisdictionId, uint _until) internal {\r\n    require(_until > now, \"HALT_DUE_SHOULD_BE_FUTURE\");\r\n    jurisdictionHaltsUntil[_jurisdictionId] = _until;\r\n    emit Halt(_jurisdictionId, _until);\r\n  }\r\n\r\n  /**\r\n   * @notice resume halted jurisdiction\r\n   * @dev only owner can call this function\r\n   * @param _jurisdictionIds list of jurisdiction ids to resume\r\n   **/\r\n  function resume(uint[] calldata _jurisdictionIds) external onlyOwner{\r\n    uint length = _jurisdictionIds.length;\r\n    for(uint i = 0; i < length; i++){\r\n      _resume(_jurisdictionIds[i]);\r\n    }\r\n  }\r\n\r\n  function _resume(uint _jurisdictionId) internal {\r\n    require(jurisdictionHaltsUntil[_jurisdictionId] != 0, \"ATTEMPT_TO_RESUME_NONE_HALTED_JURISDICATION\");\r\n    jurisdictionHaltsUntil[_jurisdictionId] = 0;\r\n    emit Resume(_jurisdictionId);\r\n  }\r\n\r\n  /**\r\n   * @notice changes max investors limit of the contract to `_limit`\r\n   * @dev only owner can call this function\r\n   * @param _limit new investor limit for contract\r\n   */\r\n  function setInvestorLimit(uint _limit) external onlyOwner {\r\n    require(_limit >= currentInvestors, \"LIMIT_SHOULD_BE_LARGER_THAN_CURRENT_INVESTORS\");\r\n    maxInvestors = _limit;\r\n    emit MaxInvestorsChanged(_limit);\r\n  }\r\n\r\n  /**\r\n   * @notice changes max investors limit of the `_jurisdcitionId` to `_limit`\r\n   * @dev only owner can call this function\r\n   * @param _jurisdictionIds jurisdiction id to update\r\n   * @param _limits new investor limit for jurisdiction\r\n   */\r\n  function setInvestorLimitForJurisdiction(uint[] calldata _jurisdictionIds, uint[] calldata _limits) external onlyOwner {\r\n    for(uint i = 0; i<_jurisdictionIds.length; i++){\r\n      uint jurisdictionId = _jurisdictionIds[i];\r\n      uint limit = _limits[i];\r\n      require(limit >= currentInvestorsByJurisdiction[jurisdictionId], \"LIMIT_SHOULD_BE_LARGER_THAN_CURRENT_INVESTORS\");\r\n      maxInvestorsByJurisdiction[jurisdictionId] = limit;\r\n      emit MaxInvestorsByJurisdictionChanged(jurisdictionId, limit);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice activate wallet enlist user when user is not enlisted\r\n   * @dev This function can be called even user does not have balance\r\n   * only owner can call this function\r\n   */\r\n  function activateWallets(\r\n    address[] calldata _wallets\r\n  ) external onlyOperator {\r\n    for(uint i = 0; i<_wallets.length; i++){\r\n      _activateWallet(_wallets[i]);\r\n    }\r\n  }\r\n\r\n  function _activateWallet(\r\n    address _wallet\r\n  ) internal {\r\n    address userId = authorizedWalletToUserId[_wallet];\r\n    require(userId != address(0), \"USER_UNKNOWN\");\r\n    require(!walletActivated[_wallet],\"ALREADY_ACTIVATED_WALLET\");\r\n    if(!investorEnlisted[userId]){\r\n      _enlistUser(userId);\r\n    }\r\n    userActiveWalletCount[userId]++;\r\n    walletActivated[_wallet] = true;\r\n    emit WalletActivated(userId, _wallet);\r\n  }\r\n\r\n  /**\r\n   * @notice deactivate wallet delist user if user does not have any wallet left\r\n   * @dev This function can only be called when _wallet has zero balance\r\n   */\r\n  function deactivateWallet(\r\n    address _wallet\r\n  ) external {\r\n    require(callingContract.balanceOf(_wallet) == 0, \"ATTEMPT_TO_DEACTIVATE_WALLET_WITH_BALANCE\");\r\n    _deactivateWallet(_wallet);\r\n  }\r\n\r\n  function deactivateWallets(\r\n    address[] calldata _wallets\r\n  ) external onlyOperator {\r\n    for(uint i = 0; i<_wallets.length; i++){\r\n      require(callingContract.balanceOf(_wallets[i]) == 0, \"ATTEMPT_TO_DEACTIVATE_WALLET_WITH_BALANCE\");\r\n      _deactivateWallet(_wallets[i]);\r\n    }\r\n  }\r\n\r\n  function _deactivateWallet(\r\n    address _wallet\r\n  ) internal {\r\n    address userId = authorizedWalletToUserId[_wallet];\r\n    require(userId != address(0), \"USER_UNKNOWN\");\r\n    require(walletActivated[_wallet],\"ALREADY_DEACTIVATED_WALLET\");\r\n    userActiveWalletCount[userId]--;\r\n    walletActivated[_wallet] = false;\r\n    emit WalletDeactivated(userId, _wallet);\r\n    if(userActiveWalletCount[userId]==0){\r\n      _delistUser(userId);\r\n    }\r\n  }\r\n\r\n  function enlistUsers(\r\n    address[] calldata _userIds\r\n  ) external onlyOperator {\r\n    for(uint i = 0; i<_userIds.length; i++){\r\n      _enlistUser(_userIds[i]);\r\n    }\r\n  }\r\n\r\n  function _enlistUser(\r\n    address _userId\r\n  ) internal {\r\n    require(\r\n      authorizedUserIdInfo[_userId].jurisdictionId != 0,\r\n      \"USER_ID_UNKNOWN\"\r\n    );\r\n    require(!investorEnlisted[_userId],\"ALREADY_ENLISTED_USER\");\r\n    investorEnlisted[_userId] = true;\r\n    uint jurisdictionId = authorizedUserIdInfo[_userId]\r\n      .jurisdictionId;\r\n    uint totalCount = ++currentInvestors;\r\n    require(maxInvestors == 0 || totalCount <= maxInvestors, \"EXCEEDING_MAX_INVESTORS\");\r\n    uint jurisdictionCount = ++currentInvestorsByJurisdiction[jurisdictionId];\r\n    uint maxJurisdictionLimit = maxInvestorsByJurisdiction[jurisdictionId];\r\n    require(maxJurisdictionLimit == 0 || jurisdictionCount <= maxJurisdictionLimit,\"EXCEEDING_JURISDICTION_MAX_INVESTORS\");\r\n    emit InvestorEnlisted(_userId, jurisdictionId);\r\n  }\r\n\r\n  function delistUsers(\r\n    address[] calldata _userIds\r\n  ) external onlyOperator {\r\n    for(uint i = 0; i<_userIds.length; i++){\r\n      _delistUser(_userIds[i]);\r\n    }\r\n  }\r\n\r\n  function _delistUser(\r\n    address _userId\r\n  ) internal {\r\n    require(investorEnlisted[_userId],\"ALREADY_DELISTED_USER\");\r\n    require(userActiveWalletCount[_userId]==0,\"ATTEMPT_TO_DELIST_USER_WITH_ACTIVE_WALLET\");\r\n    investorEnlisted[_userId] = false;\r\n    uint jurisdictionId = authorizedUserIdInfo[_userId]\r\n      .jurisdictionId;\r\n    --currentInvestors;\r\n    --currentInvestorsByJurisdiction[jurisdictionId];\r\n    emit InvestorDelisted(_userId, jurisdictionId);\r\n  }\r\n  /**\r\n   * @notice Called by the callingContract before a transfer occurs.\r\n   * @dev This call will revert when the transfer is not authorized.\r\n   * This is a mutable call to allow additional data to be recorded,\r\n   * such as when the user aquired their tokens.\r\n   **/\r\n  function authorizeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bool _isSell\r\n  ) external {\r\n    require(address(callingContract) == msg.sender, \"CALL_VIA_CONTRACT_ONLY\");\r\n\r\n    if (_to == address(0) && !_isSell) {\r\n      // This is a burn, no authorization required\r\n      // You can burn locked tokens. Burning will effectively burn unlocked tokens,\r\n      // and then burn locked tokens starting with those that will be unlocked first.\r\n      return;\r\n    }\r\n    address fromUserId = authorizedWalletToUserId[_from];\r\n    require(\r\n      fromUserId != address(0) || _from == address(0),\r\n      \"FROM_USER_UNKNOWN\"\r\n    );\r\n    address toUserId = authorizedWalletToUserId[_to];\r\n    require(toUserId != address(0) || _to == address(0), \"TO_USER_UNKNOWN\");\r\n    if(!walletActivated[_from] && _from != address(0)){\r\n      _activateWallet(_from);\r\n    }\r\n    if(!walletActivated[_to] && _to != address(0)){\r\n      _activateWallet(_to);\r\n    }\r\n    if(callingContract.balanceOf(_from) == _value && _from != address(0)){\r\n      //deactivate wallets without balance\r\n      _deactivateWallet(_from);\r\n    }\r\n\r\n    // A single user can move funds between wallets they control without restriction\r\n    if (fromUserId != toUserId) {\r\n      uint fromJurisdictionId = authorizedUserIdInfo[fromUserId]\r\n      .jurisdictionId;\r\n      uint toJurisdictionId = authorizedUserIdInfo[toUserId].jurisdictionId;\r\n\r\n      require(!_isJurisdictionHalted(fromJurisdictionId), \"FROM_JURISDICTION_HALTED\");\r\n      require(!_isJurisdictionHalted(toJurisdictionId), \"TO_JURISDICTION_HALTED\");\r\n\r\n      uint lockupLength = jurisdictionFlows[fromJurisdictionId][toJurisdictionId];\r\n      require(lockupLength > 0, \"DENIED: JURISDICTION_FLOW\");\r\n\r\n      // If the lockupLength is 1 then we interpret this as approved without any lockup\r\n      // This means any token lockup period must be at least 2 seconds long in order to apply.\r\n      if (lockupLength > 1 && _to != address(0)) {\r\n        // Lockup may apply for any action other than burn/sell (e.g. buy/pay/transfer)\r\n        uint lockupExpirationDate = block.timestamp + lockupLength;\r\n        _addLockup(toUserId, lockupExpirationDate, _value);\r\n      }\r\n\r\n      if (_from == address(0)) {\r\n        // This is minting (buy or pay)\r\n        require(block.timestamp >= startDate, \"WAIT_FOR_START_DATE\");\r\n      } else {\r\n        // This is a transfer (or sell)\r\n        UserInfo storage info = authorizedUserIdInfo[fromUserId];\r\n        while (true) {\r\n          if (_processLockup(info, fromUserId, false)) {\r\n            break;\r\n          }\r\n        }\r\n        uint balance = callingContract.balanceOf(_from);\r\n        // This first require is redundant, but allows us to provide\r\n        // a more clear error message.\r\n        require(balance >= _value, \"INSUFFICIENT_BALANCE\");\r\n        require(\r\n          balance >= info.totalTokensLocked.add(_value),\r\n          \"INSUFFICIENT_TRANSFERABLE_BALANCE\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"AddApprovedUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupExpirationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfTokensLocked\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"AddLockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ApproveNewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupGranularity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ConfigWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_until\",\"type\":\"uint256\"}],\"name\":\"Halt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"}],\"name\":\"InvestorDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"}],\"name\":\"InvestorEnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MaxInvestorsByJurisdictionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MaxInvestorsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"}],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"RevokeUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensUnlocked\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UnlockTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromJurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toJurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupLength\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateJurisdictionFlow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateJurisdictionForUserId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletDeactivated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"activateWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newWallets\",\"type\":\"address[]\"}],\"name\":\"addApprovedUserWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupExpirationDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numberOfTokensLocked\",\"type\":\"uint256[]\"}],\"name\":\"addLockups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_traders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"approveNewUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSell\",\"type\":\"bool\"}],\"name\":\"authorizeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedWalletToUserId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callingContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupGranularity\",\"type\":\"uint256\"}],\"name\":\"configWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentInvestorsByJurisdiction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"deactivateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"deactivateWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"}],\"name\":\"delistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"}],\"name\":\"enlistUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockupIndex\",\"type\":\"uint256\"}],\"name\":\"forceUnlockUpTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"}],\"name\":\"getAuthorizedUserIdInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdictionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromJurisdictionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toJurisdictionId\",\"type\":\"uint256\"}],\"name\":\"getJurisdictionFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"}],\"name\":\"getLockedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupIndex\",\"type\":\"uint256\"}],\"name\":\"getUserIdLockup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupExpirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirationTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorEnlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jurisdictionHaltsUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupGranularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxInvestorsByJurisdiction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"processLockups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"revokeUserWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokedFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setInvestorLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"setInvestorLimitForJurisdiction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_fromJurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toJurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupLengths\",\"type\":\"uint256[]\"}],\"name\":\"updateJurisdictionFlows\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"updateJurisdictionsForUserIds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userActiveWalletCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://87e1044c90b01e955bf5592597e8e3926abb9b6fc1c1b431d0447bd322e22abb"}]}