{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ICO is Context, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    // The  GAUF contract\r\n    ERC20 private _gauf;\r\n\r\n    // The link contract\r\n    ERC20 private _link;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // How many GAUF units a buyer gets per Link.\r\n    // The rate is the conversion between Link and GAUF unit.\r\n    uint256 private _linkRate;\r\n\r\n    // How many GAUF units a buyer gets per Ether.\r\n    // The rate is the conversion between Ether and GAUF unit.\r\n    uint256 private _ethRate;\r\n\r\n    // Amount of GAUF Delivered\r\n    uint256 private _gaufDelivered;\r\n\r\n    event GaufPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    constructor (uint256 linkRate, uint256 ethRate, address payable wallet, ERC20 link, ERC20 gauf) public {\r\n        require(linkRate > 0, \"ICO: linkRate shouldn't be Zero\");\r\n        require(ethRate > 0, \"ICO: ethRate shouldn't be Zero\");\r\n        require(wallet != address(0), \"ICO: wallet is the Zero address\");\r\n        require(address(gauf) != address(0), \"ICO: token is the Zero address\");\r\n\r\n        _linkRate = linkRate;\r\n        _ethRate = ethRate;\r\n        _wallet = wallet;\r\n        _link = link;\r\n        _gauf = gauf;\r\n    }\r\n\r\n    function gaufAddress() public view returns (ERC20) {\r\n        return _gauf;\r\n    }\r\n\r\n    function linkAddress() public view returns (ERC20) {\r\n        return _link;\r\n    }\r\n\r\n    function teamWallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    function linkRate() public view returns (uint256) {\r\n        return _linkRate;\r\n    }\r\n\r\n    function ethRate() public view returns (uint256) {\r\n        return _ethRate;\r\n    }\r\n\r\n    function gaufDelivered() public view returns (uint256) {\r\n        return _gaufDelivered;\r\n    }\r\n\r\n    function buyGaufWithLink(uint256 linkAmount) public nonReentrant {\r\n        address beneficiary = _msgSender();\r\n        uint256 ContractBalance = _gauf.balanceOf(address(this));\r\n        uint256 allowance = _link.allowance(beneficiary, address(this));\r\n\r\n        require(linkAmount > 0, \"You need to send at least one link\");\r\n        require(allowance >= linkAmount, \"Check the Link allowance\");\r\n\r\n        // calculate GAUF amount\r\n        uint256 _gaufAmount = _getLinkRate(linkAmount);\r\n\r\n        _preValidatePurchase(beneficiary, _gaufAmount);\r\n\r\n        require(_gaufAmount <= ContractBalance, \"Not enough GAUF in the reserve\");\r\n\r\n        // update state\r\n        _gaufDelivered = _gaufDelivered.add(_gaufAmount);\r\n\r\n        _link.safeTransferFrom(beneficiary, address(this), linkAmount);\r\n\r\n        _processPurchase(beneficiary, _gaufAmount);\r\n\r\n        emit GaufPurchased(_msgSender(), beneficiary, linkAmount, _gaufAmount);\r\n\r\n        _updatePurchasingState(beneficiary, _gaufAmount);\r\n\r\n        _forwardLinkFunds(linkAmount);\r\n        _postValidatePurchase(beneficiary, _gaufAmount);\r\n    }\r\n\r\n    function () external payable {\r\n        buyGaufWithEther();\r\n    }\r\n\r\n    function buyGaufWithEther() public nonReentrant payable {\r\n        address beneficiary = _msgSender();\r\n        uint256 ethAmount = msg.value;\r\n        uint256 ContractBalance = _gauf.balanceOf(address(this));\r\n\r\n        require(ethAmount > 0, \"You need to sendo at least some Ether\");\r\n\r\n        // calculate GAUF amount\r\n        uint256 _gaufAmount = _getEthRate(ethAmount);\r\n\r\n        _preValidatePurchase(beneficiary, _gaufAmount);\r\n\r\n        require(_gaufAmount <= ContractBalance, \"Not enough GauF in the reserve\");\r\n\r\n        // update state\r\n        _gaufDelivered = _gaufDelivered.add(_gaufAmount);\r\n\r\n        _processPurchase(beneficiary, _gaufAmount);\r\n\r\n        emit GaufPurchased(_msgSender(), beneficiary, ethAmount, _gaufAmount);\r\n\r\n        _updatePurchasingState(beneficiary, _gaufAmount);\r\n\r\n        _forwardEtherFunds();\r\n\r\n        _postValidatePurchase(beneficiary, _gaufAmount);\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 Amount) internal view {\r\n        require(beneficiary != address(0), \"ICO: beneficiary is the zero address\");\r\n        require(Amount != 0, \"ICO: Amount is 0\");\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    }\r\n\r\n    function _postValidatePurchase(address beneficiary, uint256 Amount) internal view {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function _deliverGauf(address beneficiary, uint256 gaufAmount) internal {\r\n        _gauf.safeTransfer(beneficiary, gaufAmount);\r\n    }\r\n\r\n    function _processPurchase(address beneficiary, uint256 gaufAmount) internal {\r\n        _deliverGauf(beneficiary, gaufAmount);\r\n    }\r\n    \r\n    function _updatePurchasingState(address beneficiary, uint256 Amount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function _getLinkRate(uint256 linkAmount) internal view returns (uint256) {\r\n        return linkAmount.mul(_linkRate);\r\n    }\r\n\r\n    function _getEthRate(uint256 ethAmount) internal view returns (uint256) {\r\n        return ethAmount.mul(_ethRate);\r\n    }\r\n\r\n    function _forwardLinkFunds(uint256 linkAmount) internal {\r\n        _link.safeTransfer(_wallet, linkAmount);\r\n    }\r\n\r\n    function _forwardEtherFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\ncontract LimitedUnitsIco is ICO {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _maxGaufUnits;\r\n\r\n    constructor (uint256 maxGaufUnits) public {\r\n        require(maxGaufUnits > 0, \"Max Capitalization shouldn't be Zero\");\r\n        _maxGaufUnits = maxGaufUnits;\r\n    }\r\n\r\n    function maxGaufUnits() public view returns (uint256) {\r\n        return _maxGaufUnits;\r\n    }\r\n\r\n    function icoReached() public view returns (bool) {\r\n        return gaufDelivered() >= _maxGaufUnits;\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 Amount) internal view {\r\n        super._preValidatePurchase(beneficiary, Amount);\r\n        require(gaufDelivered().add(Amount) <= _maxGaufUnits, \"Max GAUF Units exceeded\");\r\n    }\r\n}\r\n\r\ncontract GaufIco is LimitedUnitsIco {\r\n\r\n    uint256 internal constant _hundredMillion = 10 ** 8;\r\n    uint256 internal constant _oneGauf = 10**18;\r\n    uint256 internal constant _maxGaufUnits = _hundredMillion * _oneGauf;\r\n    uint256 internal constant _oneLinkToGauF = 400;\r\n     uint256 internal constant _oneEthToGauF = 18000;\r\n    \r\n    address payable _wallet = 0xB4F53f448DeD6E3394A4EC7a8Dfce44e1a1CE404;\r\n    ERC20 internal _link = ERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA);\r\n    ERC20 internal _gauf = ERC20(0x8Ce7386fe7688417885ADEBCBfc01A5445226b2C);\r\n\r\n    constructor () public\r\n        ICO(_oneLinkToGauF, _oneEthToGauF, _wallet, _link, _gauf) \r\n        LimitedUnitsIco(_maxGaufUnits)\r\n    {\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GaufPurchased\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyGaufWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"linkAmount\",\"type\":\"uint256\"}],\"name\":\"buyGaufWithLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gaufAddress\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gaufDelivered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"linkAddress\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"linkRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGaufUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GaufIco","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://396e22e70bf8869fb8830f2372a826699441bc8d87cd309f7e3f93865758fd81"}]}