{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ApostleBaseAuthorityV2.sol\r\n\r\n\r\n// File: contracts/LandResourceAuthorityV3.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract IAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\n/**\r\n * @title DSAuth\r\n * @dev The DSAuth contract is reference implement of https://github.com/dapphub/ds-auth\r\n * But in the isAuthorized method, the src from address(this) is remove for safty concern.\r\n */\r\ncontract DSAuth is DSAuthEvents {\r\n    IAuthority   public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(IAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == owner) {\r\n            return true;\r\n        } else if (authority == IAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ApostleBaseAuthorityV2 is DSAuth{\r\n    mapping (address => bool) public whiteList;\r\n\r\n    constructor(address[] _whitelists) public {\r\n        for (uint i = 0; i < _whitelists.length; i ++) {\r\n            whiteList[_whitelists[i]] = true;\r\n        }\r\n    }\r\n\r\n    function canCall(\r\n        address _src, address _dst, bytes4 _sig\r\n    ) public view returns (bool) {\r\n        return ( whiteList[_src] && _sig == bytes4(keccak256(\"createApostle(uint256,uint256,uint256,uint256,uint256,address)\")) ) ||\r\n               ( whiteList[_src] && _sig == bytes4(keccak256(\"breedWithInAuction(uint256,uint256)\")) ) ||\r\n               ( whiteList[_src] && _sig == bytes4(keccak256(\"activityAdded(uint256,address,address)\"))) ||\r\n                ( whiteList[_src] && _sig == bytes4(keccak256(\"activityRemoved(uint256,address,address)\"))) ||\r\n                ( whiteList[_src] && _sig == bytes4(keccak256(\"updateGenesAndTalents(uint256,uint256,uint256)\"))) ||\r\n                ( whiteList[_src] && _sig == bytes4(keccak256(\"batchUpdate(uint256[],uint256[],uint256[])\"))) ||\r\n                ( whiteList[_src] && _sig == bytes4(keccak256(\"activityStopped(uint256)\")));\r\n    }\r\n    \r\n        \r\n    function addWhiteList(address whiteAddress) public auth{\r\n        whiteList[whiteAddress] = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_dst\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whiteAddress\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_whitelists\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"ApostleBaseAuthorityV2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000e0a0489d93aeb831a04e8b631ebd9827a4db4a58000000000000000000000000b0c85c099094e73ffc1df23c8309a8b14c64420a000000000000000000000000f44c58e703070d4ce7b2440533f29f62713ee071000000000000000000000000a70abeaca1d6bba0f511758a0d66b7f59fd3f166","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://baf32055d5f4bbf4248416fe22da2ad1bef88c1c759bca1f80f90d0f27481fee"}]}