{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract RewardWallet {\r\n    constructor() public {\r\n    }\r\n}\r\n\r\ncontract Balancer {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    FRACTAL private _tokenContract;\r\n\r\n    constructor(FRACTAL tokenContract, IUniswapV2Router02 uniswapV2Router) public {\r\n        _tokenContract = tokenContract;\r\n        _uniswapV2Router = uniswapV2Router;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function rebalance() external returns (uint256) {\r\n        swapEthForTokens(address(this).balance);\r\n    }\r\n\r\n    function swapEthForTokens(uint256 EthAmount) private {\r\n        address[] memory uniswapPairPath = new address[](2);\r\n        uniswapPairPath[0] = _uniswapV2Router.WETH();\r\n        uniswapPairPath[1] = address(_tokenContract);\r\n\r\n        _uniswapV2Router\r\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{value: EthAmount}(\r\n                0,\r\n                uniswapPairPath,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n    }\r\n}\r\n\r\ncontract Swapper {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    FRACTAL private _tokenContract;\r\n\r\n    constructor(FRACTAL tokenContract, IUniswapV2Router02 uniswapV2Router) public {\r\n        _tokenContract = tokenContract;\r\n        _uniswapV2Router = uniswapV2Router;\r\n    }\r\n\r\n    function swapTokens(address pairTokenAddress, uint256 tokenAmount) external {\r\n        uint256 initialPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this));\r\n        swapTokensForTokens(pairTokenAddress, tokenAmount);\r\n        uint256 newPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this)).sub(initialPairTokenBalance);\r\n        IERC20(pairTokenAddress).transfer(address(_tokenContract), newPairTokenBalance);\r\n    }\r\n\r\n    function swapTokensForTokens(address pairTokenAddress, uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_tokenContract);\r\n        path[1] = pairTokenAddress;\r\n\r\n        _tokenContract.approve(address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of pair token\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ncontract FRACTAL is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    address public _rewardWallet;\r\n    uint256 public _initialRewardLockAmount;\r\n    address public _uniswapETHPool;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10000000e9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _tFeeTotal;\r\n    uint256 public _tBurnTotal;\r\n\r\n    string private _name = 'FractalDefi.com';\r\n    string private _symbol = 'FRCTL';\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 public _feeDecimals = 1;\r\n    uint256 public _maxTxAmount = 2000000e9;\r\n    uint256 public _minTokensBeforeSwap = 10000e9;\r\n    uint256 public _minInterestForReward = 15e9;  // 1.5% interest\r\n    uint256 private _autoSwapCallerFee = 200e9;\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    bool public tradingEnabled;\r\n    bool private _isCycling;\r\n\r\n    address private currentPairTokenAddress;\r\n    address private currentPoolAddress;\r\n\r\n    uint256 private _liquidityRemoveFee = 2;\r\n    uint256 private _fractalizeCallerFee = 5;\r\n    uint256 private _minTokenForFractalize = 1000e9;\r\n    uint256 private _lastFractalize;\r\n    uint256 private _fractalizeInterval = 1 hours;\r\n\r\n    uint256 private _taxFeeDefault; // 1%\r\n    uint256 private _lockFeeDefault; // 1%\r\n    uint256 private _burnFeeDefault;\r\n    uint256 private _devFeeDefault;\r\n    uint256 private _cycleLimit;\r\n    uint256 private _MAX_TAX_LIMIT; // 20%;\r\n    uint256 private _feeInterval; // we reset the interval at 4 turns\r\n    uint256 private _timeSinceLastFeeUpdate;\r\n    uint256 private _timeCheckInterval;\r\n    uint256 private _taxFee;\r\n    uint256 private _lockFee;\r\n    uint256 private _burnFee;\r\n    uint256 private _devFee;\r\n    // pre-set to true, so when iscycled is toggled we don't have to flip 4 switches\r\n    bool public taxFeeIsCycling = true;\r\n    bool public burnFeeIsCycling = true;\r\n    bool public devFeeIsCycling = true;\r\n    bool public lockFeeIsCycling = true;\r\n\r\n    bool public _isBotThrottling;\r\n    uint256 public _txCounter;\r\n    uint256 public _txLimit;\r\n    uint256 public buyLimit;\r\n\r\n    address public devAddr;\r\n\r\n    event DefaultFeesUpdated(uint256 cycleLimit, uint256 taxFDefault, uint256 burnFDefault, uint256 devFDefault, uint256 lockFDefault );\r\n    event FeeDecimalsUpdated(uint256 taxFeeDecimals);\r\n    event MaxTxAmountUpdated(uint256 maxTxAmount);\r\n    event WhitelistUpdated(address indexed pairTokenAddress);\r\n    event TradingEnabled();\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        address indexed pairTokenAddress,\r\n        uint256 tokensSwapped,\r\n        uint256 pairTokenReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event Rebalance(uint256 tokenBurnt);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\r\n    event MinInterestForRewardUpdated(uint256 minInterestForReward);\r\n    event LiquidityRemoveFeeUpdated(uint256 liquidityRemoveFee);\r\n    event FractalizeCallerFeeUpdated(uint256 rebalanceCallerFee);\r\n    event MinTokenForFractalizeUpdated(uint256 minRebalanceAmount);\r\n    event FractalizeIntervalUpdated(uint256 rebalanceInterval);\r\n    event Redistributed(address from, uint256 t, uint256 rAmount, uint256 tAmount);\r\n    event BotThrottlerUpdated(bool to);\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    Balancer public balancer;\r\n    Swapper public swapper;\r\n\r\n    //0xf164fC0Ec4E93095b804a4795bBe1e041497b92a  1000000000000000 -> 10% to rewards\r\n    constructor (IUniswapV2Router02 uniswapV2Router, uint256 initialRewardLockAmount, address dev) public {\r\n        _lastFractalize = block.timestamp;\r\n        devAddr = dev;\r\n\r\n        _uniswapV2Router = uniswapV2Router;\r\n        _rewardWallet = address(new RewardWallet());\r\n        _initialRewardLockAmount = initialRewardLockAmount;\r\n\r\n        balancer = new Balancer(this, uniswapV2Router);\r\n        swapper = new Swapper(this, uniswapV2Router);\r\n\r\n        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n        currentPairTokenAddress = uniswapV2Router.WETH();\r\n        _uniswapETHPool = currentPoolAddress;\r\n\r\n        updateSwapAndLiquifyEnabled(false);\r\n\r\n        _rOwned[_msgSender()] = reflectionFromToken(_tTotal.sub(_initialRewardLockAmount), false);\r\n        _rOwned[_rewardWallet] = reflectionFromToken(_initialRewardLockAmount, false);\r\n\r\n        _isCycling = false;\r\n        _taxFeeDefault = 10;\r\n        _burnFeeDefault = 5;\r\n        _devFeeDefault = 5;\r\n        _lockFeeDefault = 20;\r\n        _cycleLimit = 4;\r\n        _MAX_TAX_LIMIT = 200; // 20%;\r\n        _feeInterval = 0; // we reset the interval at 4 turns\r\n        _timeSinceLastFeeUpdate = block.timestamp;\r\n        _timeCheckInterval = 3600;\r\n        _lockFee = _lockFeeDefault;\r\n        _taxFee = _taxFeeDefault;\r\n        _burnFee = _burnFeeDefault;\r\n        _devFee = _devFeeDefault;\r\n        _severePunishment = true;\r\n        _frontRunGuard = true;\r\n        _isBotThrottling = false;\r\n        _goEasyOnThem = false;\r\n        _txLimit = 200;\r\n        buyLimit = 10000; // 10000 $FRCTL\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal.sub(_initialRewardLockAmount));\r\n        emit Transfer(address(0), _rewardWallet, _initialRewardLockAmount);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n\r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) public onlyOwner() {\r\n        require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(account != address(this), 'We can not exclude contract self.');\r\n        require(account != _rewardWallet, 'We can not exclude reweard wallet.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // ANTI BOT MEASURES //\r\n    mapping(address => uint256) private _lastTransferred;\r\n    mapping(address => uint256) private _possibleFrontRunners;\r\n    event PunishedBot(address bot);\r\n    event FrontRunnerStrike(address possibleBot, uint256 count);\r\n    bool public _severePunishment;\r\n    bool public _frontRunGuard;\r\n    bool public _lastlastTransferWasABuy;\r\n    address private _lastTransfer;\r\n    address private _lastlastTransfer;\r\n    uint256 private _lastBlockNumber;\r\n    bool private _goEasyOnThem;\r\n\r\n    function _toggleGoEasyOnThem() external onlyOwner{\r\n        _goEasyOnThem = !_goEasyOnThem;\r\n    }\r\n\r\n    function _toggleFrontRunGuard() external onlyOwner{\r\n        _frontRunGuard = !_frontRunGuard;\r\n    }\r\n\r\n    function _toggleSeverePunishment() external onlyOwner{\r\n        _severePunishment = !_severePunishment;\r\n    }\r\n\r\n    function setBuySizeLimit(uint256 limit) external onlyOwner {\r\n        buyLimit = limit;\r\n    }\r\n\r\n    function toggleBotThrottling() external onlyOwner {\r\n        if(_isBotThrottling) {\r\n            _txCounter = 0; // reset tx counter back to 0 if bots are being a pain\r\n        }\r\n        _isBotThrottling = !_isBotThrottling;\r\n        emit BotThrottlerUpdated(_isBotThrottling);\r\n\r\n    }\r\n\r\n    // how long we keep the buy limit going\r\n    function setNthTxLimit(uint256 txLimit) external onlyOwner {\r\n        _txLimit = txLimit;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero\");\r\n\r\n        // short-circuit if we are not cycling\r\n        if(_isCycling && block.timestamp > (_timeSinceLastFeeUpdate.add(_timeCheckInterval))) {\r\n            _cycleFees();\r\n        }\r\n\r\n        if(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled)\r\n                require(false, \"Trading is disabled.\");\r\n        }\r\n        \r\n        \r\n        if(!inSwapAndLiquify) {\r\n            uint256 lockedBalanceForPool = balanceOf(address(this));\r\n            bool overMinTokenBalance = lockedBalanceForPool >= _minTokensBeforeSwap;\r\n            if (\r\n                overMinTokenBalance &&\r\n                msg.sender != currentPoolAddress &&\r\n                swapAndLiquifyEnabled\r\n            ) {\r\n                if(currentPairTokenAddress == _uniswapV2Router.WETH())\r\n                    swapAndLiquifyForEth(lockedBalanceForPool);\r\n                else\r\n                    swapAndLiquifyForTokens(currentPairTokenAddress, lockedBalanceForPool);\r\n            }\r\n        }\r\n         // not a good use of gas but we need to keep these in scope\r\n        bool isBeingPunished = false;\r\n        uint256  tf = _taxFee;\r\n        uint256  df = _devFee;\r\n        uint256  lf = _lockFee;\r\n        // since we are bootstrapping liquidity, we want to protect holders from bots and someone snatching up all the tokens\r\n        // also, fuck bots.\r\n        if(_isBotThrottling) {\r\n            // if there is a tx limit then we assume the bot will turn off afterwards.\r\n                if(_txCounter < _txLimit){\r\n                    // we can also set the buys to 0\r\n                    // if txCounter is less than y make sure buy limits are enforced, else time to turn off bot throttling\r\n                    // if this contract is not being sold to\r\n                    if(recipient != address(this)){\r\n                        require(_lastTransfer != tx.origin && _lastBlockNumber != block.number, \"THROTTLEBOT: Are you a spam bot?\");\r\n                    }\r\n                    require(amount <= (buyLimit * 10 ** _decimals), \"THROTTLEBOT: Exceeded buy limit before txLimit\");\r\n                    _txCounter++;\r\n                } else {\r\n                    _isBotThrottling = !_isBotThrottling;\r\n                    emit BotThrottlerUpdated(_isBotThrottling);\r\n                }\r\n                  _lastBlockNumber = block.number;\r\n        }\r\n\r\n        if(_frontRunGuard && _lastlastTransfer == tx.origin){\r\n            bool wasFrontRunAttempt = _lastlastTransferWasABuy == (recipient == address(this));\r\n            if(wasFrontRunAttempt){\r\n                if(_goEasyOnThem){\r\n                    require(!wasFrontRunAttempt, \"GUARDBOT says: no\");\r\n                }\r\n                _possibleFrontRunners[tx.origin] += 1;\r\n                emit FrontRunnerStrike(tx.origin, _possibleFrontRunners[tx.origin]);\r\n            }\r\n            // timesPossiblyFrontRunning, 3 strikes rule\r\n            if(_possibleFrontRunners[tx.origin] > 3) {\r\n                isBeingPunished = true;\r\n                if(_severePunishment){\r\n                    _taxFee = _taxFeeDefault.mul(_feeInterval).add(30);\r\n                    _devFee = _devFeeDefault.mul(_feeInterval).add(30);\r\n                    _lockFee = _lockFeeDefault.mul(_feeInterval).add(30);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        // save gas on assignments\r\n        if(_frontRunGuard){\r\n            _lastTransferred[tx.origin] = block.timestamp;\r\n            _lastlastTransfer = _lastTransfer; // used to prevent front-running bots\r\n            _lastlastTransferWasABuy = recipient != address(this);\r\n            _lastTransfer = tx.origin;\r\n            if(isBeingPunished){\r\n                if(_severePunishment){\r\n                    _taxFee = tf;\r\n                    _devFee = df;\r\n                    _lockFee = lf;\r\n                }\r\n                emit PunishedBot(tx.origin); // we can always use this to exclude later \r\n            }\r\n        }\r\n        // cleanup\r\n        delete isBeingPunished;\r\n        delete df;\r\n        delete tf;\r\n        delete lf;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function swapAndLiquifyForEth(uint256 lockedBalanceForPool) private lockTheSwap {\r\n        // split the contract balance except swapCallerFee into halves\r\n        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\r\n        uint256 half = lockedForSwap.div(2);\r\n        uint256 otherHalf = lockedForSwap.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half);\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityForEth(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(_uniswapV2Router.WETH(), half, newBalance, otherHalf);\r\n\r\n        _transfer(address(this), msg.sender, _autoSwapCallerFee);\r\n\r\n        _sendRewardInterestToPool();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndLiquifyForTokens(address pairTokenAddress, uint256 lockedBalanceForPool) private lockTheSwap {\r\n        // split the contract balance except swapCallerFee into halves\r\n        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\r\n        uint256 half = lockedForSwap.div(2);\r\n        uint256 otherHalf = lockedForSwap.sub(half);\r\n\r\n        _transfer(address(this), address(swapper), half);\r\n\r\n        uint256 initialPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this));\r\n\r\n        // swap tokens for pairToken\r\n        swapper.swapTokens(pairTokenAddress, half);\r\n\r\n        uint256 newPairTokenBalance = IERC20(pairTokenAddress).balanceOf(address(this)).sub(initialPairTokenBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityForTokens(pairTokenAddress, otherHalf, newPairTokenBalance);\r\n\r\n        emit SwapAndLiquify(pairTokenAddress, half, newPairTokenBalance, otherHalf);\r\n\r\n        _transfer(address(this), msg.sender, _autoSwapCallerFee);\r\n\r\n        _sendRewardInterestToPool();\r\n    }\r\n\r\n    function addLiquidityForTokens(address pairTokenAddress, uint256 tokenAmount, uint256 pairTokenAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        IERC20(pairTokenAddress).approve(address(_uniswapV2Router), pairTokenAmount);\r\n\r\n        // add the liquidity\r\n        _uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            pairTokenAddress,\r\n            tokenAmount,\r\n            pairTokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function fractalize() public lockTheSwap {\r\n        require(balanceOf(_msgSender()) >= _minTokenForFractalize, \"Need MOAR FRACTALs\");\r\n        require(block.timestamp > _lastFractalize + _fractalizeInterval, 'Chill please. Fractalization. soon.');\r\n        _lastFractalize = block.timestamp;\r\n\r\n        uint256 amountToRemove = IERC20(_uniswapETHPool).balanceOf(address(this)).mul(_liquidityRemoveFee).div(100);\r\n\r\n        removeLiquidityETH(amountToRemove);\r\n        balancer.rebalance();\r\n\r\n        uint256 tNewTokenBalance = balanceOf(address(balancer));\r\n        uint256 tRewardForCaller = tNewTokenBalance.mul(_fractalizeCallerFee).div(100);\r\n        uint256 tBurn = tNewTokenBalance.sub(tRewardForCaller);\r\n\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurn =  tBurn.mul(currentRate);\r\n\r\n        _rOwned[_msgSender()] = _rOwned[_msgSender()].add(tRewardForCaller.mul(currentRate));\r\n        _rOwned[address(balancer)] = 0;\r\n\r\n        _tBurnTotal = _tBurnTotal.add(tBurn);\r\n        _tTotal = _tTotal.sub(tBurn);\r\n        _rTotal = _rTotal.sub(rBurn);\r\n\r\n        emit Transfer(address(balancer), _msgSender(), tRewardForCaller);\r\n        emit Transfer(address(balancer), address(0), tBurn);\r\n        emit Rebalance(tBurn);\r\n    }\r\n\r\n    function removeLiquidityETH(uint256 lpAmount) private returns(uint ETHAmount) {\r\n        IERC20(_uniswapETHPool).approve(address(_uniswapV2Router), lpAmount);\r\n        (ETHAmount) = _uniswapV2Router\r\n            .removeLiquidityETHSupportingFeeOnTransferTokens(\r\n                address(this),\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                address(balancer),\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function _sendRewardInterestToPool() private {\r\n        uint256 tRewardInterest = balanceOf(_rewardWallet).sub(_initialRewardLockAmount);\r\n        if(tRewardInterest > _minInterestForReward) {\r\n            uint256 rRewardInterest = reflectionFromToken(tRewardInterest, false);\r\n            _rOwned[currentPoolAddress] = _rOwned[currentPoolAddress].add(rRewardInterest);\r\n            _rOwned[_rewardWallet] = _rOwned[_rewardWallet].sub(rRewardInterest);\r\n            emit Transfer(_rewardWallet, currentPoolAddress, tRewardInterest);\r\n            IUniswapV2Pair(currentPoolAddress).sync();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock, uint256 tBurn) = _getValues(tAmount);\r\n        uint256 rLock =  tLock.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            _reflectFee(rFee, rBurn, tFee, tBurn);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        emit Redistributed(sender, 1, rAmount, tAmount);\r\n\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock, uint256 tBurn) = _getValues(tAmount);\r\n        uint256 rLock =  tLock.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if(inSwapAndLiquify) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            _reflectFee(rFee, rBurn, tFee, tBurn);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        emit Redistributed(sender, 2, rAmount, tAmount);\r\n\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock, uint256 tBurn) = _getValues(tAmount);\r\n        uint256 rLock =  tLock.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            _reflectFee(rFee, rBurn, tFee, tBurn);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        emit Redistributed(sender, 3, rAmount, tAmount);\r\n\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLock, uint256 tBurn) = _getValues(tAmount);\r\n        uint256 rLock =  tLock.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if(inSwapAndLiquify) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        }\r\n        else {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            _reflectFee(rFee, rBurn, tFee, tBurn);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        emit Redistributed(sender, 4, rAmount, tAmount);\r\n\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {\r\n        uint256 rDev = rFee.mul(_devFee).div(_taxFee);\r\n        uint256 tDev = tFee.mul(_devFee).div(_taxFee);\r\n        _rOwned[devAddr] = _rOwned[devAddr].add(rDev);\r\n        _rTotal = _rTotal.sub(rFee).sub(rBurn).add(rDev);\r\n        _tFeeTotal = _tFeeTotal.add(tFee).sub(tDev);\r\n        _tBurnTotal = _tBurnTotal.add(tBurn);\r\n        _tTotal = _tTotal.sub(tBurn);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLock, uint256 tBurn) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLock, tBurn);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns(uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(_taxFee).div(10**(_feeDecimals + 2));\r\n        uint256 tLockFee = tAmount.mul(_lockFee).div(10**(_feeDecimals + 2));\r\n        uint256 tBurn = tAmount.mul(_burnFee).div(10**(_feeDecimals + 2));\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLockFee).sub(tBurn);\r\n        return (tTransferAmount, tFee, tLockFee, tBurn);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        (, uint256 tFee, uint256 tLock, uint256 tBurn) = _getTValues(tAmount);\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(tLock.mul(currentRate)).sub(tBurn.mul(currentRate));\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() public view returns(uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return _rTotal.div(_tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return _rTotal.div(_tTotal);\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    // CYCLER\r\n\r\n    function _setDefaults() internal {\r\n        _feeInterval = 1; // by the time it gets to 6, itll restart and go back to 1\r\n        _taxFee = _taxFeeDefault;\r\n        _burnFee = _burnFeeDefault;\r\n        _devFee = _devFeeDefault;\r\n        _lockFee = _lockFeeDefault;\r\n    }\r\n\r\n    function _toggleIsCycling() external onlyOwner() {\r\n        // whether we turn cycling on or off we make sure we start over\r\n        _isCycling = !_isCycling;\r\n        _setDefaults();\r\n    }\r\n\r\n    function _toggleTaxFeeCycling() external onlyOwner(){\r\n        // we only switch this when we are turning it from on to off\r\n        if(taxFeeIsCycling){\r\n            _taxFee = _taxFeeDefault;\r\n        }\r\n         taxFeeIsCycling = !taxFeeIsCycling;\r\n    }\r\n    function _toggleBurnFeeCycling() external onlyOwner(){\r\n        if(burnFeeIsCycling){\r\n            _burnFee = _burnFeeDefault;\r\n        }\r\n         burnFeeIsCycling = !burnFeeIsCycling;\r\n    }\r\n    function _toggleDevFeeCycling() external onlyOwner(){\r\n        if(devFeeIsCycling){\r\n            _devFee = _devFeeDefault;\r\n        }\r\n         devFeeIsCycling = !devFeeIsCycling;\r\n    }\r\n    function _toggleLockFeeCycling() external onlyOwner(){\r\n        if(lockFeeIsCycling){\r\n            _lockFee = _lockFeeDefault;\r\n        }\r\n         lockFeeIsCycling = !lockFeeIsCycling;\r\n    }\r\n\r\n    function _cycleFees() internal {\r\n        // we assume that ts is new since this was called\r\n        _timeSinceLastFeeUpdate = block.timestamp;\r\n        // we start over after the interval\r\n        if(_feeInterval > _cycleLimit){\r\n            _setDefaults();\r\n        } else {\r\n            // sanity check\r\n            require(_feeInterval > 0, \"feeInterval should not be 0\");\r\n            _feeInterval = _feeInterval.add(1);\r\n            if (taxFeeIsCycling){\r\n                _taxFee = _taxFeeDefault.mul(_feeInterval);\r\n            }\r\n            if (burnFeeIsCycling){\r\n                _burnFee = _burnFeeDefault.mul(_feeInterval);\r\n            }\r\n            if (devFeeIsCycling){\r\n                _devFee = _devFeeDefault.mul(_feeInterval);\r\n            }\r\n            if (lockFeeIsCycling){\r\n                _lockFee = _lockFeeDefault.mul(_feeInterval);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getMaxTotalTax(uint256 cl, uint256 td, uint256 bd, uint256 dd, uint256 ld) public pure returns (uint256){\r\n        return cl.mul(td).add(cl.mul(bd)).add(cl.mul(dd)).add(cl.mul(ld));\r\n    }\r\n\r\n    function getCurrentCycle() public view returns (uint256){\r\n        return _feeInterval;\r\n    }\r\n    function getCurrentTotalTax() public view returns(uint256){\r\n        return (_taxFee).add(_devFee).add(_lockFee).add(_burnFee);\r\n    }\r\n     function getTaxFee() public view returns(uint256) {\r\n        return _taxFee;\r\n    }\r\n    function getLockFee() public view returns(uint256) {\r\n        return _lockFee;\r\n    }\r\n    function getDevFee() public view returns(uint256) {\r\n        return _devFee;\r\n    }\r\n    function getBurnFee() public view returns(uint256) {\r\n        return _burnFee;\r\n    }\r\n    function getCycleLimit() public view returns(uint256) {\r\n        return _cycleLimit;\r\n    }\r\n    function getIsCycling() public view returns(bool) {\r\n        return _isCycling;\r\n    }\r\n    function getDefaults() public view returns(uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        return (_cycleLimit,_taxFeeDefault, _burnFeeDefault, _devFeeDefault, _lockFeeDefault, _MAX_TAX_LIMIT);\r\n    }\r\n\r\n    // to save on gas + contract size we will set all defaults at once\r\n    function setNewDefaults(uint256 cycleLimit, uint256 txfd, uint256 bufd, uint256 defd, uint256 lofd)\r\n    external\r\n    onlyOwner(){\r\n        require(_getMaxTotalTax(cycleLimit, txfd, bufd, defd, lofd) <= _MAX_TAX_LIMIT, \"cycledFees > _MAX_TAX_LIMIT\");\r\n        require(defd <= _taxFeeDefault, 'devFee > taxFee');\r\n        require(bufd <= _taxFeeDefault, 'burnFee > taxFee');\r\n        require(cycleLimit > 0, \"!=0\");\r\n        require(txfd > 0 && txfd.mul(cycleLimit) <= _MAX_TAX_LIMIT, 'tax < 0');\r\n        _cycleLimit = cycleLimit;\r\n        _taxFeeDefault = txfd;\r\n        _burnFeeDefault = bufd;\r\n        _devFeeDefault = defd;\r\n        _lockFeeDefault = lofd;\r\n        _setDefaults();\r\n        emit DefaultFeesUpdated(cycleLimit, txfd, bufd, defd, lofd);\r\n    }\r\n\r\n    // this sets how often intervals will occur within the specified cycle limit\r\n    // ie. if this is set to 3600, then we will go through the cycle every hour until limit\r\n    function _setTimeCheckInterval(uint256 timeCheckInterval) external onlyOwner() {\r\n        require(timeCheckInterval >= 1, \"timeCheckInterval must be greater or equal to 1\");\r\n        _timeCheckInterval = timeCheckInterval;\r\n    }\r\n\r\n    function setDevAddr(address _devAddr) external {\r\n        require(_msgSender() == devAddr , '!dev');\r\n        devAddr = _devAddr;\r\n    }\r\n\r\n    // FRACTALIZER\r\n\r\n    function getCurrentPoolAddress() public view returns(address) {\r\n        return currentPoolAddress;\r\n    }\r\n    function getCurrentPairTokenAddress() public view returns(address) {\r\n        return currentPairTokenAddress;\r\n    }\r\n    function getLiquidityRemoveFee() public view returns(uint256) {\r\n        return _liquidityRemoveFee;\r\n    }\r\n    function getFractalizeCallerFee() public view returns(uint256) {\r\n        return _fractalizeCallerFee;\r\n    }\r\n    function getMinTokenForFractalize() public view returns(uint256) {\r\n        return _minTokenForFractalize;\r\n    }\r\n    function getLastFractalize() public view returns(uint256) {\r\n        return _lastFractalize;\r\n    }\r\n    function getFractalizeInterval() public view returns(uint256) {\r\n        return _fractalizeInterval;\r\n    }\r\n    function _setFeeDecimals(uint256 feeDecimals) external onlyOwner() {\r\n        require(feeDecimals >= 0 && feeDecimals <= 2, 'fee decimals should be in 0 - 2');\r\n        _feeDecimals = feeDecimals;\r\n        emit FeeDecimalsUpdated(feeDecimals);\r\n    }\r\n    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount >= 500000e9 , 'maxTxAmount < 500000e9');\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(maxTxAmount);\r\n    }\r\n    function _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {\r\n        require(minTokensBeforeSwap >= 50e9 && minTokensBeforeSwap <= 25000e9 , 'minTokenBeforeSwap should be in 50e9 - 25000e9');\r\n        require(minTokensBeforeSwap > _autoSwapCallerFee , 'minTokenBeforeSwap < autoSwapCallerFee');\r\n        _minTokensBeforeSwap = minTokensBeforeSwap;\r\n        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\r\n    }\r\n\r\n    function _setAutoSwapCallerFee(uint256 autoSwapCallerFee) external onlyOwner() {\r\n        require(autoSwapCallerFee >= 1e9, 'autoSwapCallerFee < 1e9');\r\n        _autoSwapCallerFee = autoSwapCallerFee;\r\n        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\r\n    }\r\n\r\n    function _setMinInterestForReward(uint256 minInterestForReward) external onlyOwner() {\r\n        _minInterestForReward = minInterestForReward;\r\n        emit MinInterestForRewardUpdated(minInterestForReward);\r\n    }\r\n\r\n    function _setLiquidityRemoveFee(uint256 liquidityRemoveFee) external onlyOwner() {\r\n        require(liquidityRemoveFee >= 1 && liquidityRemoveFee <= 10 , 'lf < 1, lf > 15');\r\n        _liquidityRemoveFee = liquidityRemoveFee;\r\n        emit LiquidityRemoveFeeUpdated(liquidityRemoveFee);\r\n    }\r\n\r\n    function _setFractalizeCallerFee(uint256 fractalizeCallerFee) external onlyOwner() {\r\n        require(fractalizeCallerFee >= 1 && fractalizeCallerFee <= 15 , 'fc < 1, > 15');\r\n        _fractalizeCallerFee = fractalizeCallerFee;\r\n        emit FractalizeCallerFeeUpdated(fractalizeCallerFee);\r\n    }\r\n\r\n    function _setMinTokenForFractalize(uint256 minTokenForFractalize) external onlyOwner() {\r\n        _minTokenForFractalize = minTokenForFractalize;\r\n        emit MinTokenForFractalizeUpdated(minTokenForFractalize);\r\n    }\r\n\r\n    function _setFractalizeInterval(uint256 fractalizeInterval) external onlyOwner() {\r\n        _fractalizeInterval = fractalizeInterval;\r\n        emit FractalizeIntervalUpdated(fractalizeInterval);\r\n    }\r\n\r\n    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function _updateWhitelist(address poolAddress, address pairTokenAddress) public onlyOwner() {\r\n        require(poolAddress != address(0), \"Pool address is zero.\");\r\n        require(pairTokenAddress != address(0), \"Pair token address is zero.\");\r\n        require(pairTokenAddress != address(this), \"Pair token address self address.\");\r\n        require(pairTokenAddress != currentPairTokenAddress, \"Pair token address is same as current one.\");\r\n\r\n        currentPoolAddress = poolAddress;\r\n        currentPairTokenAddress = pairTokenAddress;\r\n\r\n        emit WhitelistUpdated(pairTokenAddress);\r\n    }\r\n\r\n    function _enableTrading() external onlyOwner() {\r\n        tradingEnabled = true;\r\n        TradingEnabled();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRewardLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"AutoSwapCallerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"to\",\"type\":\"bool\"}],\"name\":\"BotThrottlerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxFDefault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFDefault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFDefault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockFDefault\",\"type\":\"uint256\"}],\"name\":\"DefaultFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxFeeDecimals\",\"type\":\"uint256\"}],\"name\":\"FeeDecimalsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalanceCallerFee\",\"type\":\"uint256\"}],\"name\":\"FractalizeCallerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalanceInterval\",\"type\":\"uint256\"}],\"name\":\"FractalizeIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"possibleBot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"FrontRunnerStrike\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRemoveFee\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoveFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minInterestForReward\",\"type\":\"uint256\"}],\"name\":\"MinInterestForRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRebalanceAmount\",\"type\":\"uint256\"}],\"name\":\"MinTokenForFractalizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"PunishedBot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBurnt\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"Redistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairTokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_frontRunGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"td\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ld\",\"type\":\"uint256\"}],\"name\":\"_getMaxTotalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initialRewardLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isBotThrottling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastlastTransferWasABuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minInterestForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"_setAutoSwapCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeDecimals\",\"type\":\"uint256\"}],\"name\":\"_setFeeDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fractalizeCallerFee\",\"type\":\"uint256\"}],\"name\":\"_setFractalizeCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fractalizeInterval\",\"type\":\"uint256\"}],\"name\":\"_setFractalizeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityRemoveFee\",\"type\":\"uint256\"}],\"name\":\"_setLiquidityRemoveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minInterestForReward\",\"type\":\"uint256\"}],\"name\":\"_setMinInterestForReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokenForFractalize\",\"type\":\"uint256\"}],\"name\":\"_setMinTokenForFractalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"_setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeCheckInterval\",\"type\":\"uint256\"}],\"name\":\"_setTimeCheckInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_severePunishment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tBurnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleBurnFeeCycling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleDevFeeCycling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleFrontRunGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleGoEasyOnThem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleIsCycling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleLockFeeCycling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleSeverePunishment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_toggleTaxFeeCycling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapETHPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"}],\"name\":\"_updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"contract Balancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeIsCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeIsCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fractalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPairTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCycleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFractalizeCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFractalizeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastFractalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityRemoveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTokenForFractalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFeeIsCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setBuySizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"setDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txfd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lofd\",\"type\":\"uint256\"}],\"name\":\"setNewDefaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"setNthTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract Swapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeIsCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBotThrottling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FRACTAL","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"40","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000eba50ff5e902d77f22bef1e53e50c7f6715402be","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d9b042a97281a920d2fd1a769e8c72f15aae3dc93590d9f6fd400ee6291e9ec"}]}