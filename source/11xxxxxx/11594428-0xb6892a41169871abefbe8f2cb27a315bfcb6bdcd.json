{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// import ierc20 & safemath & non-standard\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract FiatInvestors is Ownable {\r\n    using SafeMath for uint256;\r\n    // the time set for the installments \r\n    uint256 public oneMonthTime = 2629743;\r\n    \r\n    IERC20 public vntwToken;\r\n    address multiSigAddress;\r\n    \r\n    IERC20 public dai;\r\n    struct User{\r\n        uint256 time;\r\n        uint256 amountpaid;\r\n        uint256 months;\r\n        uint256 tokenamount;\r\n        uint256 daiamount;\r\n        uint256 rate;\r\n    }\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(address => bool) public registeredusers;\r\n\r\n    // inputing value network token and dai token  \r\n    constructor( address vntwTokenAddr,address _dai,address _multiSigAddress) public {\r\n        _preValidateAddress(vntwTokenAddr);\r\n        _preValidateAddress(_dai);\r\n        _preValidateAddress(_multiSigAddress);\r\n        vntwToken = IERC20(vntwTokenAddr);\r\n        dai = IERC20(_dai);\r\n        multiSigAddress = _multiSigAddress;  // this is for the devpool addresses\r\n        addUser(0xef66f9c4E3205FF3711de7Aa02e13724c6c1F48A,11,14000000000000000000000000,14850000000000000000000);  // Artem\r\n        addUser(0xEF112cD57Bd2cDEed8bd25C736f3a386e131E9B2,11,11000000000000000000000000,14850000000000000000000);  // Alexander\r\n        addUser(0x6C620945Ce0F04bd419c38F525d516584A1E304c,8,3500000000000000000000000,16000000000000000000000);    // Den\r\n        addUser(0xD2489211B2e90936320A979a28c1414e811b2BE6,5,2000000000000000000000000,6750000000000000000000);     // Igor\r\n    }\r\n    \r\n    function _preValidateAddress(address _addr)\r\n        internal pure\r\n      {\r\n        require(_addr != address(0),'Cant be Zero address');\r\n      }\r\n      \r\n    // only admin can add address to the presale by inputting how many months a user have to pay installment \r\n    // the total token amt and total dai to be distributed in _noofmonths of months\r\n    function addUser(address _userAddress , uint256 _months ,uint256 _tokenAmount, uint256 _totalDAI) public onlyOwner {\r\n        _preValidateAddress(_userAddress);\r\n        require(!registeredusers[_userAddress],'User already registered'); \r\n        \r\n        users[_userAddress] = User(block.timestamp + oneMonthTime.mul(_months),0,_months,_tokenAmount,_totalDAI,_tokenAmount.mul(1e18).div(_totalDAI));\r\n        registeredusers[_userAddress] = true;                            \r\n    }\r\n    \r\n    // this function will only return the no of dai can pay till now\r\n    function getCurrentInstallment(address _addr) public view returns(uint256) {\r\n        require(registeredusers[_addr],'you are not registered');\r\n        \r\n       \r\n        if(block.timestamp > users[_addr].time){\r\n            return users[_addr].daiamount;\r\n        }    \r\n        uint256 timeleft = users[_addr].time.sub(block.timestamp);\r\n    \r\n        uint256 amt = users[_addr].daiamount.mul(1e18).div(users[_addr].months);\r\n        uint256 j;\r\n        for(uint256 i = users[_addr].months;i>0;i--){\r\n            if(timeleft <= oneMonthTime || timeleft == 0){\r\n                return users[_addr].daiamount;\r\n            }\r\n            j= j.add(1);\r\n            if(timeleft > i.sub(1).mul(oneMonthTime)){\r\n                return amt.mul(j).div(1e18);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // this function tells how much amount is pending by user that he has to pay\r\n    function userTotalInstallmentPending(address _user) public view returns(uint256){\r\n        uint256 paidamt = users[_user].amountpaid;\r\n        uint256 payamt = getCurrentInstallment(_user).sub(paidamt);\r\n        return payamt;      \r\n    }\r\n    \r\n\r\n    function payInstallment(uint256 _amount) external {\r\n        uint256 paidamt = users[msg.sender].amountpaid;\r\n        \r\n        require(getCurrentInstallment(msg.sender) > 0);\r\n        require(paidamt < getCurrentInstallment(msg.sender));\r\n        require(_amount <= userTotalInstallmentPending(msg.sender));\r\n        \r\n        dai.transferFrom(msg.sender,address(this),_amount);\r\n        uint256 transferrableVNTWtoken = _amount.mul(users[msg.sender].rate).div(1e18);\r\n        vntwToken.transfer(msg.sender,transferrableVNTWtoken);\r\n        \r\n        users[msg.sender].amountpaid  =  users[msg.sender].amountpaid.add(_amount);\r\n    }\r\n    \r\n    function getContractTokenBalance(IERC20 _token) public view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n    \r\n    function changeMultisigAddress(address _multiSigAddress) public onlyOwner {\r\n        _preValidateAddress(_multiSigAddress);\r\n        multiSigAddress = _multiSigAddress;\r\n    }\r\n    \r\n    function fundsWithdrawal(IERC20 _token,uint256 value) external onlyOwner{\r\n        require(getContractTokenBalance(_token) >= value,'the contract doesnt have tokens'); \r\n        _token.transfer(multiSigAddress,value);  \r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vntwTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_months\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDAI\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSigAddress\",\"type\":\"address\"}],\"name\":\"changeMultisigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"fundsWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCurrentInstallment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneMonthTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredusers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userTotalInstallmentPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vntwToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FiatInvestors","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d0f05d3d4e4d1243ac826d8c6171180c58eaa9bc0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000abd4bfce39ed4719318d72d211703c48f83b63","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d2827922a6ed18903832e5b08573f9493bde4160c2211510424b470f254747e0"}]}