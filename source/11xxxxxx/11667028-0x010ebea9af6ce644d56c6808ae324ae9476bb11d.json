{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Oracle {\r\n    function getPriceUSD(address reserve) external view returns (uint);\r\n}\r\n\r\ninterface ISushiswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISushiswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\nlibrary SushiswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'SushiswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'SushiswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\r\n            )))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'SushiswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'SushiswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA * reserveB / reserveA;\r\n    }\r\n}\r\n\r\ncontract SushiswapV2SingleSidedILProtectionV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \"SushiswapV2 IL Protection V2\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public constant symbol = \"silv2\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 8;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => mapping (address => uint)) internal allowances;\r\n    mapping(address => uint) internal balances;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint chainId,address verifyingContract)\");\r\n    bytes32 public immutable DOMAINSEPARATOR;\r\n\r\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    \r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    // Oracle used for price debt data (external to the AMM balance to avoid internal manipulation)\r\n    Oracle public constant LINK = Oracle(0x271bf4568fb737cc2e6277e9B1EE0034098cDA2a);\r\n    ISushiswapV2Factory public constant FACTORY = ISushiswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    address public constant WYFI = address(0x017E71e96f2Ae777C679740d2D8Dc15Ed4231981);\r\n    address public immutable PAIR;\r\n    \r\n    uint public constant FEE = 500;\r\n    \r\n    \r\n    // user => token => borrowed\r\n    mapping (address => mapping(address => uint)) public borrowed;\r\n    // user => token => lp\r\n    mapping (address => mapping(address => uint)) public lp;\r\n    \r\n    address[] private _markets;\r\n    mapping (address => bool) pairs;\r\n    \r\n    event Deposit(address indexed owner, address indexed lp, uint amountIn, uint minted);\r\n    event Withdraw(address indexed owner, address indexed lp, uint burned, uint amountOut);\r\n    \r\n    constructor () {\r\n        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\r\n        PAIR = FACTORY.createPair(address(this), WYFI);\r\n    }\r\n    \r\n    function markets() external view returns (address[] memory) {\r\n        return _markets;\r\n    }\r\n    \r\n    function _mint(address dst, uint amount) internal {\r\n        // mint the amount\r\n        totalSupply += amount;\r\n        // transfer the amount to the recipient\r\n        balances[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n    \r\n    function _burn(address dst, uint amount) internal {\r\n        // burn the amount\r\n        totalSupply -= amount;\r\n        // transfer the amount from the recipient\r\n        balances[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n    \r\n    function depositAll(IERC20 token, uint minLiquidity) external {\r\n        _deposit(token, token.balanceOf(msg.sender), minLiquidity);\r\n    }\r\n    \r\n    function deposit(IERC20 token, uint amount, uint minLiquidity) external {\r\n        _deposit(token, amount, minLiquidity);\r\n    }\r\n    \r\n    function _addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired) internal returns (address pair, uint amountA, uint amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        pair = FACTORY.getPair(tokenA, tokenB);\r\n        if (pair == address(0)) {\r\n            pair = FACTORY.createPair(tokenA, tokenB);\r\n            pairs[pair] = true;\r\n            _markets.push(tokenA);\r\n        } else if (!pairs[pair]) {\r\n            pairs[pair] = true;\r\n            _markets.push(tokenA);\r\n        }\r\n        \r\n        (uint reserveA, uint reserveB) = SushiswapV2Library.getReserves(address(FACTORY), tokenA, tokenB);\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint amountBOptimal = SushiswapV2Library.quote(amountADesired, reserveA, reserveB);\r\n            if (amountBOptimal <= amountBDesired) {\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = SushiswapV2Library.quote(amountBDesired, reserveB, reserveA);\r\n                assert(amountAOptimal <= amountADesired);\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function pairFor(address token) public view returns (address) {\r\n        return FACTORY.getPair(token, address(this));\r\n    }\r\n    \r\n    function underlyingBalanceOf(address owner, address token) external view returns (uint) {\r\n        address _pair = pairFor(token);\r\n        uint _balance = IERC20(token).balanceOf(_pair);\r\n        return _balance * lp[owner][token] / IERC20(_pair).totalSupply();\r\n    }\r\n    \r\n    function getPriceOracle(address token) public view returns (uint) {\r\n        return LINK.getPriceUSD(address(token));\r\n    }\r\n    \r\n    function _deposit(IERC20 token, uint amount, uint minLiquidity) internal {\r\n        uint _price = LINK.getPriceUSD(address(token));\r\n        uint _value = _price * amount / uint(10)**token.decimals();\r\n        require(_value > 0, \"!value\");\r\n        \r\n        (address _pair, uint amountA, uint amountB) = _addLiquidity(address(token), address(this), amount, _value);\r\n        \r\n        token.safeTransferFrom(msg.sender, _pair, amountA);\r\n        \r\n        _value = _price * amountA / uint(10)**token.decimals();\r\n        require(amountB <= _value, \"invalid oracle feed\");\r\n        \r\n        _mint(_pair, amountB);\r\n        borrowed[msg.sender][address(token)] += amountB;\r\n        \r\n        uint _liquidity = ISushiswapV2Pair(_pair).mint(address(this));\r\n        require(_liquidity >= minLiquidity, \"insufficient output liquidity\");\r\n        lp[msg.sender][address(token)] += _liquidity;\r\n        \r\n        emit Deposit(msg.sender, address(token), amountA, amountB);\r\n    }\r\n    \r\n    function withdrawAll(IERC20 token, uint maxSettle) external {\r\n        _withdraw(token, lp[msg.sender][address(token)], maxSettle);\r\n    }\r\n    \r\n    function withdraw(IERC20 token, uint amount, uint maxSettle) external {\r\n        _withdraw(token, amount, maxSettle);\r\n    }\r\n    \r\n    function shortFall(IERC20 token, address owner, uint amount) public view returns (uint) {\r\n        uint _lp = lp[owner][address(token)];\r\n        uint _borrowed = borrowed[owner][address(token)];\r\n        \r\n        if (_lp < amount) {\r\n            amount = _lp;\r\n        }\r\n        \r\n        _borrowed = _borrowed * amount / _lp;\r\n        address _pair = FACTORY.getPair(address(token), address(this));\r\n        \r\n        uint _returned = balances[_pair] * amount / IERC20(_pair).totalSupply();\r\n        if (_returned < _borrowed) {\r\n            return _borrowed - _returned;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function shortFallInToken(IERC20 token, address owner, uint amount) external view returns (uint) {\r\n        uint _shortfall = shortFall(token, owner, amount);\r\n        if (_shortfall > 0) {\r\n            address _pair = FACTORY.getPair(address(token), address(this));\r\n            (uint reserveA, uint reserveB,) = ISushiswapV2Pair(_pair).getReserves();\r\n            (address token0,) = SushiswapV2Library.sortTokens(address(token), address(this));\r\n            (reserveA, reserveB) = address(token) == token0 ? (reserveA, reserveB) : (reserveB, reserveA);\r\n            return _getAmountIn(reserveA, reserveB, _shortfall);\r\n        } else {\r\n            return 0;\r\n        }\r\n        \r\n    }\r\n    \r\n    function profit(IERC20 token, address owner, uint amount) external view returns (uint) {\r\n        uint _lp = lp[owner][address(token)];\r\n        uint _borrowed = borrowed[owner][address(token)];\r\n        \r\n        if (_lp < amount) {\r\n            amount = _lp;\r\n        }\r\n        \r\n        _borrowed = _borrowed * amount / _lp;\r\n        address _pair = FACTORY.getPair(address(token), address(this));\r\n        \r\n        uint _returned = balances[_pair] * amount / IERC20(_pair).totalSupply();\r\n        if (_returned > _borrowed) {\r\n            return _returned - _borrowed;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function _getAmountIn(uint reserveA, uint reserveB, uint amountOut) internal pure returns (uint) {\r\n        uint numerator = reserveA * amountOut * 1000;\r\n        uint denominator = (reserveB - amountOut) * 997;\r\n        return (numerator / denominator) + 1;\r\n    }\r\n    \r\n    function _settle(IERC20 token, address token0, address pair, uint amountA, uint amountB, uint debt, uint maxSettle) internal returns (uint, uint) {\r\n        if (balances[msg.sender]+amountB < debt) {\r\n            uint _shortfall = debt - (balances[msg.sender]+amountB);\r\n            \r\n            (uint reserveA, uint reserveB,) = ISushiswapV2Pair(pair).getReserves();\r\n            (reserveA, reserveB) = address(token) == token0 ? (reserveA, reserveB) : (reserveB, reserveA);\r\n            \r\n            uint amountIn = _getAmountIn(reserveA, reserveB, _shortfall);\r\n            \r\n            require(amountIn <= amountA && amountIn <= maxSettle, 'ADDITIONAL_SETTLEMENT_REQUIRED');\r\n            token.safeTransfer(pair, amountIn);\r\n            (uint amount0Out, uint amount1Out) = address(token) == token0 ? (uint(0), _shortfall) : (_shortfall, uint(0));\r\n            ISushiswapV2Pair(pair).swap(amount0Out, amount1Out, address(this), new bytes(0));\r\n            amountA -= amountIn;\r\n            amountB += _shortfall;\r\n        }\r\n        return (amountA, amountB);\r\n    }\r\n    \r\n    function _unwrap(address pair, IERC20 token, uint burned, uint debt, uint maxSettle) internal returns (uint, uint) {\r\n        IERC20(pair).safeTransfer(pair, burned); // send liquidity to pair\r\n        (uint amountA, uint amountB) = ISushiswapV2Pair(pair).burn(address(this));\r\n        (address token0,) = SushiswapV2Library.sortTokens(address(token), address(this));\r\n        (amountA, amountB) = address(token) == token0 ? (amountA, amountB) : (amountB, amountA);\r\n        return _settle(token, token0, pair, amountA, amountB, debt, maxSettle);\r\n    }\r\n    \r\n    function _withdraw(IERC20 token, uint amount, uint maxSettle) internal {\r\n        uint _lp = lp[msg.sender][address(token)];\r\n        uint _borrowed = borrowed[msg.sender][address(token)];\r\n        \r\n        if (_lp < amount) {\r\n            amount = _lp;\r\n        }\r\n        \r\n        // Calculate % of collateral to release\r\n        _borrowed = _borrowed * amount / _lp;\r\n        address _pair = FACTORY.getPair(address(token), address(this));\r\n        \r\n        (uint amountA, uint amountB) = _unwrap(_pair, token, amount, _borrowed, maxSettle);\r\n        \r\n        lp[msg.sender][address(token)] -= amount;\r\n        borrowed[msg.sender][address(token)] -= _borrowed;\r\n        \r\n        token.safeTransfer(msg.sender, amountA);\r\n        _transferTokens(address(this), msg.sender, amountB);\r\n        _burn(msg.sender, _borrowed);\r\n        \r\n        emit Withdraw(msg.sender, address(token), amount, amountB);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Triggers an approval from owner to spends\r\n     * @param owner The address to approve from\r\n     * @param spender The address to be approved\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @param deadline The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAINSEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"permit: signature\");\r\n        require(signatory == owner, \"permit: unauthorized\");\r\n        require(block.timestamp <= deadline, \"permit: expired\");\r\n\r\n        allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        require(pairs[dst]||src==address(this)||dst==address(this), \"non-transferable\");\r\n\r\n        balances[src] -= amount;\r\n        balances[dst] += amount;\r\n        \r\n        emit Transfer(src, dst, amount);\r\n    }\r\n\r\n    function _getChainId() internal view returns (uint) {\r\n        uint chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAINSEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract ISushiswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WYFI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shortFall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"shortFallInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"underlyingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSettle\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSettle\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SushiswapV2SingleSidedILProtectionV2","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cbeb9e44e543b49dce43495875ded19d2adbc74e0027d9224033d2ba0f1ccc83"}]}