{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\ninterface CurveDeposit{\r\n    function deposit(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function claimable_tokens(address) external view returns (uint256);\r\n}\r\n\r\ninterface CurveMinter{\r\n    function mint(address) external;\r\n}\r\n\r\ninterface ICurveFi {\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[2] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[2] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[2] calldata amounts\r\n  ) external;\r\n  function remove_liquidity_one_coin(\r\n    uint256 _amount,\r\n    int128 i,\r\n    uint256 min\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n}\r\n\r\ninterface UniswapRouter {\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\ncontract StrategyCRV  {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public constant want = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D); // renbtc\r\n    address public constant curveminter = address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // Token minter\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    address constant public curve = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B); // Curve.fi:REN Swap\r\n    address public constant curvedeposit = address(0xB1F2cdeC61db658F091671F5f199635aEF202CAC); // Curve.fi: renCrv Gauge\r\n    address public constant rencrv = address(0x49849C98ae39Fff122806C06791Fa73784FB3675); // Curve.fi: renCrv Token\r\n    address constant public output = address(0xD533a949740bb3306d119CC777fa900bA034cd52); // crv\r\n\r\n    uint constant public DENOMINATION = 10 ** 10;\r\n\r\n    uint public fee = 600;\r\n    uint public callfee = 100;\r\n    uint constant public max = 1000;\r\n\r\n    uint public withdrawalFee = 0;\r\n    uint constant public withdrawalMax = 10000;\r\n    \r\n    address public governance;\r\n    address public controller;\r\n    \r\n    string public getName;\r\n\r\n    address[] public swap2TokenRouting;\r\n    \r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x67D320cf7148D69058477B2b86991D2C1dE60E86;\r\n        getName = string(\r\n            abi.encodePacked(\"farmland:Strategy:\", \r\n                abi.encodePacked(IERC20(want).name(),\r\n                    abi.encodePacked(\":\",IERC20(output).name())\r\n                )\r\n            ));\r\n        doApprove();\r\n        swap2TokenRouting = [output,weth,want]; \r\n    }\r\n    \r\n    function deposit() public {\r\n        // renbtc -> ren\r\n        uint _renbtc = IERC20(want).balanceOf(address(this));\r\n        if (_renbtc > 0) {\r\n            IERC20(want).safeApprove(curve, 0);\r\n            IERC20(want).safeApprove(curve, _renbtc);\r\n            ICurveFi(curve).add_liquidity([_renbtc, 0], 0);\r\n        }\r\n        uint _rencrv = IERC20(rencrv).balanceOf(address(this));\r\n        if (_rencrv > 0) {\r\n            IERC20(rencrv).safeApprove(curvedeposit, 0);\r\n            IERC20(rencrv).safeApprove(curvedeposit, _rencrv);\r\n            CurveDeposit(curvedeposit).deposit(_rencrv);\r\n        }\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(rencrv != address(_asset), \"rencrv\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            uint _diff = _amount.sub(_balance);\r\n            // calculate amount of rencrv lp to withdraw for amount of _want_\r\n            uint _rencrv = _diff.mul(1e18).div(ICurveFi(curve).get_virtual_price());\r\n            _amount = _withdrawSome(_rencrv.mul(DENOMINATION));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n        uint _fee = 0;\r\n        if (withdrawalFee > 0) {\r\n            _fee = _amount.mul(withdrawalFee).div(withdrawalMax);        \r\n            IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\r\n        }\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) { \r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);    \r\n    }\r\n    \r\n    function _withdrawAll() internal { \r\n        uint256 b = CurveDeposit(curvedeposit).balanceOf(address(this));\r\n        if (b > 0) {\r\n            _withdrawSome(b);\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _rencrv) internal returns(uint256) {\r\n        uint _before = IERC20(rencrv).balanceOf(address(this));\r\n        CurveDeposit(curvedeposit).withdraw(_rencrv); // get rencrv\r\n        uint _after = IERC20(rencrv).balanceOf(address(this));\r\n\r\n        return withdrawUnderlying(_after.sub(_before));\r\n    }\r\n    \r\n    function withdrawUnderlying(uint256 _amount) internal returns (uint) {\r\n        IERC20(rencrv).safeApprove(curve, 0);\r\n        IERC20(rencrv).safeApprove(curve, _amount);\r\n\r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        ICurveFi(curve).remove_liquidity_one_coin(_amount, 0, 0);\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n        \r\n        return _after.sub(_before);\r\n    }\r\n\r\n    function doApprove () public {\r\n        IERC20(output).safeApprove(unirouter, 0);\r\n        IERC20(output).safeApprove(unirouter, uint(-1));\r\n    }\r\n    \r\n    function harvest() public {\r\n        require(!Address.isContract(msg.sender),\"!contract\");\r\n        CurveMinter(curveminter).mint(curvedeposit);//get crv\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        doswap();\r\n\r\n        deposit(); //循环生息\r\n        \r\n        // fee of want\r\n        uint b = IERC20(want).balanceOf(address(this));\r\n        uint _fee = b.mul(fee).div(max);\r\n        uint _callfee = b.mul(callfee).div(max);\r\n        IERC20(want).safeTransfer(Controller(controller).rewards(), _fee); //6% team\r\n        IERC20(want).safeTransfer(msg.sender, _callfee); //call fee 1%\r\n\r\n    }\r\n    function doswap() internal {\r\n            uint256 _2token = IERC20(output).balanceOf(address(this)); //100%\r\n            UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\r\n\r\n            // want -> ren\r\n            uint _renbtc = IERC20(want).balanceOf(address(this)).mul(90).div(100);\r\n            if (_renbtc > 0) {\r\n                IERC20(want).safeApprove(curve, 0);\r\n                IERC20(want).safeApprove(curve, _renbtc);\r\n                ICurveFi(curve).add_liquidity([_renbtc, 0], 0);\r\n            }    \r\n    }\r\n\r\n    function balanceOf() public view returns (uint) {\r\n        uint _rencrv = CurveDeposit(curvedeposit).balanceOf(address(this)); // amount of rencrv\r\n        uint _amount = _rencrv.mul(ICurveFi(curve).get_virtual_price()).div(1e18);\r\n        return _amount.div(DENOMINATION);\r\n    }\r\n\r\n    function balanceOfPendingReward() public view returns(uint){ //还没有领取的收益有多少...\r\n        return CurveDeposit(curvedeposit).claimable_tokens(address(this));   \r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        fee = _fee;\r\n    }\r\n    function setCallFee(uint256 _fee) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        callfee = _fee;\r\n    }\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_withdrawalFee <=100,\"fee >= 1%\"); //max:1%\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curvedeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveminter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rencrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyCRV","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6a15dab6eb84a209fe613289e0440850ab386a4889ce3dd89d73d4d999f3dfc0"}]}