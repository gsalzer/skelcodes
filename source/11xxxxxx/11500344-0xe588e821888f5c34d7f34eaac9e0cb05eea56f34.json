{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Y Financial YFIN Token (Core 4)\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'YFIN: you are not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        address old = owner;\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(old, _newOwner);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused, 'YFIN: it is paused');\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused, 'YFIN: it is not paused');\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n  \r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) override external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) override external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) override external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) override public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"YFIN: ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"YFIN: ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal whenNotPaused {\r\n        require(sender != address(0), \"YFIN: ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"YFIN: ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"YFIN: ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal whenNotPaused {\r\n        require(account != address(0), \"YFIN: ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal whenNotPaused {\r\n        require(account != address(0), \"YFIN: ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"YFIN: ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"YFIN: ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"YFIN: ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"YFIN: ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"YFIN: SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"YFIN: SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"YFIN: SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"YFIN: SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"YFIN: SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"YFIN: Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount}(\"\");\r\n        require(success, \"YFIN: Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"YFIN: SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"YFIN: SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"YFIN: SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"YFIN: SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"YFIN: SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IYieldFarm {\r\n    function totalStaked () external view returns (uint256);\r\n    function stake ( uint256 _amount ) external;\r\n    function unstake ( uint256 _shares ) external returns (uint256);\r\n}\r\n\r\n\r\ncontract Yfin is ERC20, ERC20Detailed, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n  \r\n    uint256 public feeRateDivision;\r\n    address public feeAccount;\r\n    \r\n    struct UnderlyingToken {\r\n        string tokenName;\r\n        address tokenAddress;\r\n        uint256 ratioMultiplier; \r\n        uint256 feeBalance;\r\n    }  \r\n    \r\n    // index of tokens has to match with index of yieldfarmaddresses\r\n    // they are parallel array\r\n    uint8 public numTokens = 4;\r\n    UnderlyingToken[4] public tokens;\r\n    IYieldFarm[4] public farms;\r\n    \r\n    event DepositUnderlyingToken(address token, address indexed from, uint256 amount);\r\n    event WithdrawUnderlyingToken(address token, address indexed to, uint256 amount);\r\n    event FeeAccountTransfered(address feeAccount);\r\n    event FeeRateChanged(uint256 rate);\r\n    event YieldFarmAddressChange(address oldFarm, address newFarm);\r\n    \r\n    \r\n    constructor () public  ERC20Detailed(\"Y Financial\", \"YFIN\", 18) {\r\n        /**\r\n         * Fee is in terms of division, for example 100 means 1%\r\n         * All token has to be 18 digits\r\n         * Right now only breakdown token has fee\r\n         */ \r\n    \r\n        _totalSupply = 0;\r\n        \r\n        feeRateDivision = 100;\r\n        feeAccount = _msgSender();\r\n        \r\n        tokens[0] = UnderlyingToken(\"pickle\", address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5), 3, 0);\r\n        tokens[1] = UnderlyingToken(\"sushi\", address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2), 30, 0);\r\n        tokens[2] = UnderlyingToken(\"dai\", address(0x6B175474E89094C44Da98b954EedeAC495271d0F), 10, 0);\r\n        tokens[3] = UnderlyingToken(\"lua\", address(0xB1f66997A5760428D3a87D68b90BfE0aE64121cC), 300, 0);\r\n        \r\n        // yield farm address\r\n        farms[0] = IYieldFarm(address(0x0000000000000000000000000000000000000000));\r\n        farms[1] = IYieldFarm(address(0x0000000000000000000000000000000000000000));\r\n        farms[2] = IYieldFarm(address(0x0000000000000000000000000000000000000000));\r\n        farms[3] = IYieldFarm(address(0x0000000000000000000000000000000000000000));\r\n    }\r\n\r\n    function depositAndMint(uint256 amount) external nonReentrant returns (bool success) {\r\n        // convenient method to get YFIN right away\r\n        // remember to get approve for all underlying tokens before calling this function\r\n        for (uint i = 0; i < numTokens; i++) {\r\n            IERC20(tokens[i].tokenAddress).safeTransferFrom(_msgSender(), address(this), amount.mul(tokens[i].ratioMultiplier));\r\n        }\r\n         _mint(_msgSender(), amount);\r\n        return success;\r\n    }\r\n    \r\n    function _withdrawUnderlyingToken(uint index, uint256 amount) internal {\r\n        UnderlyingToken storage token = tokens[index];\r\n    \r\n        // need to withdraw from pool if token not enough\r\n        uint tokenBalance = getInternalUnderlying(index);\r\n        if (tokenBalance < amount) {\r\n            _yieldFarmUnstake(index, amount.sub(tokenBalance));\r\n            // worse case got whatever unstaked from the pool\r\n            tokenBalance = getInternalUnderlying(index); \r\n        }\r\n        \r\n        uint256 withdrawAmount;\r\n        if (_msgSender() == feeAccount) {\r\n            if (tokenBalance < amount) {\r\n                withdrawAmount = tokenBalance;\r\n            } else {\r\n                withdrawAmount = amount;\r\n            }\r\n        } else {\r\n            uint256 fee = amount.div(feeRateDivision);\r\n            withdrawAmount = amount.sub(fee);\r\n            // this happen when pool withdraw fee greater than yfin burn fee\r\n            if (tokenBalance <= withdrawAmount) {\r\n                withdrawAmount = tokenBalance;\r\n            } else {\r\n                if (tokenBalance.sub(withdrawAmount) >= fee) {\r\n                    token.feeBalance = token.feeBalance.add(fee);\r\n                } else {\r\n                    token.feeBalance = token.feeBalance.add(tokenBalance.sub(withdrawAmount));\r\n                }\r\n            }\r\n        }\r\n        \r\n        IERC20(token.tokenAddress).safeTransfer(_msgSender(), withdrawAmount);\r\n        emit WithdrawUnderlyingToken(token.tokenAddress, _msgSender(), withdrawAmount);\r\n    }\r\n    \r\n    function pushFeeForToken(uint index, uint amount) public nonReentrant {\r\n        require (amount <= tokens[index].feeBalance, \"YFIN: requested more than available fees\");\r\n        tokens[index].feeBalance = tokens[index].feeBalance.sub(amount);\r\n        IERC20(tokens[index].tokenAddress).safeTransfer(feeAccount, amount);\r\n    }\r\n    \r\n    function pushAllFeeForToken(uint index) public {\r\n        pushFeeForToken(index, tokens[index].feeBalance);\r\n    }\r\n    \r\n    function pushAllFeeForAllTokens() external {\r\n        for (uint i = 0; i < numTokens; i++) {\r\n            pushAllFeeForToken(i);\r\n        }\r\n    }\r\n    \r\n    function breakdownAndWithdrawUnderlying(uint256 amount) public nonReentrant returns (bool success) {\r\n        require (balanceOf(_msgSender()) >= amount, \"YFIN: Breakdown amount excess balance\");\r\n        _burn(_msgSender(), amount);\r\n        \r\n        for (uint i = 0; i < numTokens; i++) {\r\n            _withdrawUnderlyingToken(i, amount.mul(tokens[i].ratioMultiplier));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getExternalUnderlying(uint index ) public view returns (uint256 balance) {\r\n        return farms[index].totalStaked();\r\n    }\r\n    \r\n    function getInternalUnderlying (uint index ) public view returns (uint256 balance) {\r\n        return IERC20(tokens[index].tokenAddress).balanceOf(address(this)).sub(tokens[index].feeBalance);\r\n    }\r\n    \r\n    function balanceOfUnderlying(uint index) public view returns (uint256 balance) {\r\n         return getInternalUnderlying(index).add(getExternalUnderlying(index));\r\n    }\r\n    \r\n    function changeFeeRate(uint rate) external onlyOwner returns (bool success) {\r\n        feeRateDivision = rate;\r\n        emit FeeRateChanged(rate);\r\n        return true;\r\n    }\r\n    \r\n    function changeYieldFarmAddress(uint index, address newModuleAddress) external onlyOwner returns (bool success) {\r\n        address old = address(farms[index]);\r\n        farms[index] = IYieldFarm(newModuleAddress);\r\n        emit YieldFarmAddressChange(old, newModuleAddress);\r\n        \r\n        // approve the token with the same index\r\n        _approveModule(tokens[index].tokenAddress, newModuleAddress);\r\n        return true;\r\n    }\r\n\r\n    function _approveModule(address tokenAddress, address approveAddress) internal returns (bool success) {\r\n        // note that this is approve for unlimited amount\r\n        IERC20(tokenAddress).safeApprove(approveAddress, uint256(-1)); //also add to constructor\r\n        return true;\r\n     }\r\n  \r\n    function disapproveModule(address tokenAddress, address approveAddress) external onlyOwner returns (bool success) {\r\n        // note that this is approve for unlimited amount\r\n        IERC20(tokenAddress).safeApprove(approveAddress, 0); //also add to constructor\r\n        return true;\r\n     }\r\n     \r\n    function approveModule(address tokenAddress, address approveAddress) external onlyOwner returns (bool success) {\r\n        _approveModule(tokenAddress, approveAddress);\r\n        return true;\r\n     }\r\n     \r\n    function yieldFarmStake(uint index, uint256 amount) public onlyOwner nonReentrant returns (bool success) {\r\n        require(getInternalUnderlying(index) >= amount, \"YFIN: Balance not enough\");\r\n        farms[index].stake(amount);\r\n        return true;\r\n    }\r\n    \r\n    function yieldFarmStakeAll(uint index) external onlyOwner returns (bool success) {\r\n        require(getInternalUnderlying(index) > 0, 'YFIN: you have nothing to stake');\r\n        yieldFarmStake(index, getInternalUnderlying(index));\r\n        return true;\r\n    }\r\n    \r\n    function _yieldFarmUnstake(uint index, uint256 amount) internal returns (uint256) {\r\n        require(getExternalUnderlying(index) >= amount, \"YFIN: Balance not enough\");\r\n        return farms[index].unstake(amount); \r\n    }\r\n    \r\n    // if the yield farm address only has one token\r\n    function yieldFarmUnstake(uint index, uint256 amount) external onlyOwner nonReentrant returns (uint256) {\r\n        require(amount > 0, \"YFIN: You can not unstake non-positive number\");\r\n        return _yieldFarmUnstake(index, amount);\r\n    }\r\n\r\n    function yieldFarmUnstakeAll(uint index) public onlyOwner returns (bool success) {\r\n        require(getExternalUnderlying(index) > 0, 'YFIN: you have nothing to unstake');\r\n        _yieldFarmUnstake(index, getExternalUnderlying(index));\r\n        return true; \r\n    }\r\n    \r\n    function changeFeeAccount(address newFeeAccount) external onlyOwner returns (bool success) {\r\n        feeAccount = newFeeAccount;\r\n        emit FeeAccountTransfered(newFeeAccount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositUnderlyingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"FeeAccountTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnderlyingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFarm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFarm\",\"type\":\"address\"}],\"name\":\"YieldFarmAddressChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveAddress\",\"type\":\"address\"}],\"name\":\"approveModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"breakdownAndWithdrawUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeAccount\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeFeeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newModuleAddress\",\"type\":\"address\"}],\"name\":\"changeYieldFarmAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveAddress\",\"type\":\"address\"}],\"name\":\"disapproveModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"contract IYieldFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRateDivision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExternalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInternalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushAllFeeForAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pushAllFeeForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pushFeeForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratioMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"yieldFarmStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"yieldFarmStakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"yieldFarmUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"yieldFarmUnstakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Yfin","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://37bb71fcb5392c58584b7e37064e812ea1319859e3f864c04ce7aae7962be9d8"}]}