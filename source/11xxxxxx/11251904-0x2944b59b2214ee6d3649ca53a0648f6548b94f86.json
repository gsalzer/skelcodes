{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-13\r\n*/\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ISetValuer.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n// import { ISetToken } from \"../interfaces/ISetToken.sol\";\r\n\r\ninterface ISetValuer {\r\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\r\n}\r\n// Dependency file: contracts/interfaces/IPriceOracle.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title IPriceOracle\r\n * @author Set Protocol\r\n *\r\n * Interface for interacting with PriceOracle\r\n */\r\ninterface IPriceOracle {\r\n\r\n    /* ============ Functions ============ */\r\n\r\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\r\n    function masterQuoteAsset() external view returns (address);\r\n}\r\n// Dependency file: contracts/interfaces/IIntegrationRegistry.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IIntegrationRegistry {\r\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\r\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\r\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\r\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\r\n}\r\n// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n        /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"./IERC20.sol\";\r\n// import \"../../math/SafeMath.sol\";\r\n// import \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/ResourceIdentifier.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IController } from \"../../interfaces/IController.sol\";\r\n// import { IIntegrationRegistry } from \"../../interfaces/IIntegrationRegistry.sol\";\r\n// import { IPriceOracle } from \"../../interfaces/IPriceOracle.sol\";\r\n// import { ISetValuer } from \"../../interfaces/ISetValuer.sol\";\r\n\r\n/**\r\n * @title ResourceIdentifier\r\n * @author Set Protocol\r\n *\r\n * A collection of utility functions to fetch information related to Resource contracts in the system\r\n */\r\nlibrary ResourceIdentifier {\r\n\r\n    // IntegrationRegistry will always be resource ID 0 in the system\r\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\r\n    // PriceOracle will always be resource ID 1 in the system\r\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\r\n    // SetValuer resource will always be resource ID 2 in the system\r\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\r\n     * the Controller\r\n     */\r\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\r\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\r\n     */\r\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\r\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\r\n    }\r\n\r\n    /**\r\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\r\n     */\r\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\r\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\r\n    }\r\n}\r\n// Dependency file: contracts/lib/PreciseUnitMath.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title PreciseUnitMath\r\n * @author Set Protocol\r\n *\r\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\r\n * dYdX's BaseMath library.\r\n *\r\n * CHANGELOG:\r\n * - 9/21/20: Added safePower function\r\n */\r\nlibrary PreciseUnitMath {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    // The number One in precise units.\r\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\r\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\r\n\r\n    // Max unsigned integer value\r\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\r\n    // Max and min signed integer value\r\n    int256 constant internal MAX_INT_256 = type(int256).max;\r\n    int256 constant internal MIN_INT_256 = type(int256).min;\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnit() internal pure returns (uint256) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnitInt() internal pure returns (int256) {\r\n        return PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxUint256() internal pure returns (uint256) {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxInt256() internal pure returns (int256) {\r\n        return MAX_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function minInt256() internal pure returns (int256) {\r\n        return MIN_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(b).div(PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\r\n     * significand of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(b).div(PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down).\r\n     */\r\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(PRECISE_UNIT).div(b);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded towards 0).\r\n     */\r\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(PRECISE_UNIT_INT).div(b);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0).\r\n     */\r\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n\r\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\r\n     */\r\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\r\n\r\n        int256 result = a.div(b);\r\n        if (a ^ b < 0 && a % b != 0) {\r\n            result -= 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \r\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \r\n     */\r\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b where rounding is towards the lesser number. \r\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \r\n     */\r\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the power on a specified value, reverts on overflow.\r\n    */\r\n    function safePower(\r\n        uint256 a,\r\n        uint256 pow\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(a > 0, \"Value must be positive\");\r\n\r\n        uint256 result = 1;\r\n        for (uint256 i = 0; i < pow; i++){\r\n            uint256 previousResult = result;\r\n\r\n            // Using safemath multiplication prevents overflows\r\n            result = previousResult.mul(a);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n// Dependency file: contracts/interfaces/IModule.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IModule\r\n * @author Set Protocol\r\n *\r\n * Interface for interacting with Modules.\r\n */\r\ninterface IModule {\r\n    /**\r\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\r\n     * in case checks need to be made or state needs to be cleared.\r\n     */\r\n    function removeModule() external;\r\n}\r\n// Dependency file: contracts/lib/ExplicitERC20.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title ExplicitERC20\r\n * @author Set Protocol\r\n *\r\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\r\n */\r\nlibrary ExplicitERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * When given allowance, transfers a token from the \"_from\" to the \"_to\" of quantity \"_quantity\".\r\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\r\n     *\r\n     * @param _token           ERC20 token to approve\r\n     * @param _from            The account to transfer tokens from\r\n     * @param _to              The account to transfer tokens to\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function transferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        // Call specified ERC20 contract to transfer tokens (via proxy).\r\n        if (_quantity > 0) {\r\n            uint256 existingBalance = _token.balanceOf(_to);\r\n\r\n            SafeERC20.safeTransferFrom(\r\n                _token,\r\n                _from,\r\n                _to,\r\n                _quantity\r\n            );\r\n\r\n            uint256 newBalance = _token.balanceOf(_to);\r\n\r\n            // Verify transfer quantity is reflected in balance\r\n            require(\r\n                newBalance == existingBalance.add(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Dependency file: contracts/protocol/lib/ModuleBase.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import { ExplicitERC20 } from \"../../lib/ExplicitERC20.sol\";\r\n// import { IController } from \"../../interfaces/IController.sol\";\r\n// import { IModule } from \"../../interfaces/IModule.sol\";\r\n// import { ISetToken } from \"../../interfaces/ISetToken.sol\";\r\n// import { Invoke } from \"./Invoke.sol\";\r\n// import { PreciseUnitMath } from \"../../lib/PreciseUnitMath.sol\";\r\n// import { ResourceIdentifier } from \"./ResourceIdentifier.sol\";\r\n\r\n/**\r\n * @title ModuleBase\r\n * @author Set Protocol\r\n *\r\n * Abstract class that houses common Module-related state and functions.\r\n */\r\nabstract contract ModuleBase is IModule {\r\n    using PreciseUnitMath for uint256;\r\n    using Invoke for ISetToken;\r\n    using ResourceIdentifier for IController;\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Address of the controller\r\n    IController public controller;\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier onlyManagerAndValidSet(ISetToken _setToken) { \r\n        require(isSetManager(_setToken, msg.sender), \"Must be the SetToken manager\");\r\n        require(isSetValidAndInitialized(_setToken), \"Must be a valid and initialized SetToken\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\r\n        require(isSetManager(_setToken, _caller), \"Must be the SetToken manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\r\n        require(isSetValidAndInitialized(_setToken), \"Must be a valid and initialized SetToken\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if the sender is not a SetToken's module or module not enabled\r\n     */\r\n    modifier onlyModule(ISetToken _setToken) {\r\n        require(\r\n            _setToken.moduleStates(msg.sender) == ISetToken.ModuleState.INITIALIZED,\r\n            \"Only the module can call\"\r\n        );\r\n\r\n        require(\r\n            controller.isModule(msg.sender),\r\n            \"Module must be enabled on controller\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Utilized during module initializations to check that the module is in pending state\r\n     * and that the SetToken is valid\r\n     */\r\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\r\n        require(controller.isSet(address(_setToken)), \"Must be controller-enabled SetToken\");\r\n        require(isSetPendingInitialization(_setToken), \"Must be pending initialization\");        \r\n        _;\r\n    }\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Set state variables and map asset pairs to their oracles\r\n     *\r\n     * @param _controller             Address of controller contract\r\n     */\r\n    constructor(IController _controller) public {\r\n        controller = _controller;\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the module).\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The number of tokens to transfer\r\n     */\r\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\r\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \r\n        bytes32 integrationHash = getNameHash(_integrationName);\r\n        return getAndValidateAdapterWithHash(integrationHash);\r\n    }\r\n\r\n    /**\r\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\r\n     */\r\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \r\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\r\n            address(this),\r\n            _integrationHash\r\n        );\r\n\r\n        require(adapter != address(0), \"Must be valid adapter\"); \r\n        return adapter;\r\n    }\r\n\r\n    /**\r\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\r\n     */\r\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\r\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\r\n        return _quantity.preciseMul(feePercentage);\r\n    }\r\n\r\n    /**\r\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\r\n     */\r\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\r\n        if (_feeQuantity > 0) {\r\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the module is in process of initialization on the SetToken\r\n     */\r\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\r\n        return _setToken.isPendingModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the address is the SetToken's manager\r\n     */\r\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\r\n        return _setToken.manager() == _toCheck;\r\n    }\r\n\r\n    /**\r\n     * Returns true if SetToken must be enabled on the controller \r\n     * and module is registered on the SetToken\r\n     */\r\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\r\n        return controller.isSet(address(_setToken)) &&\r\n            _setToken.isInitializedModule(address(this));\r\n    }\r\n\r\n    /**\r\n     * Hashes the string and returns a bytes32 value\r\n     */\r\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\r\n        return keccak256(bytes(_name));\r\n    }\r\n}\r\n// Dependency file: contracts/interfaces/ISetToken.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n// pragma experimental \"ABIEncoderV2\";\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title ISetToken\r\n * @author Set Protocol\r\n *\r\n * Interface for operating with SetTokens.\r\n */\r\ninterface ISetToken is IERC20 {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a SetToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getPositions() external view returns (Position[] memory);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n// Dependency file: contracts/protocol/lib/Invoke.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import { ISetToken } from \"../../interfaces/ISetToken.sol\";\r\n\r\n\r\n/**\r\n * @title Invoke\r\n * @author Set Protocol\r\n *\r\n * A collection of common utility functions for interacting with the SetToken's invoke function\r\n */\r\nlibrary Invoke {\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /**\r\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\r\n     *\r\n     * @param _setToken        SetToken instance to invoke\r\n     * @param _token           ERC20 token to approve\r\n     * @param _spender         The account allowed to spend the SetToken's balance\r\n     * @param _quantity        The quantity of allowance to allow\r\n     */\r\n    function invokeApprove(\r\n        ISetToken _setToken,\r\n        address _token,\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        bytes memory callData = abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _quantity);\r\n        _setToken.invoke(_token, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\r\n     *\r\n     * @param _setToken        SetToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function invokeTransfer(\r\n        ISetToken _setToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            bytes memory callData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _quantity);\r\n            _setToken.invoke(_token, 0, callData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\r\n     * The new SetToken balance must equal the existing balance less the quantity transferred\r\n     *\r\n     * @param _setToken        SetToken instance to invoke\r\n     * @param _token           ERC20 token to transfer\r\n     * @param _to              The recipient account\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function strictInvokeTransfer(\r\n        ISetToken _setToken,\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        if (_quantity > 0) {\r\n            // Retrieve current balance of token for the SetToken\r\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\r\n\r\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\r\n\r\n            // Get new balance of transferred token for SetToken\r\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\r\n\r\n            // Verify only the transfer quantity is subtracted\r\n            require(\r\n                newBalance == existingBalance.sub(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instructs the SetToken to unwrap the passed quantity of WETH\r\n     *\r\n     * @param _setToken        SetToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"withdraw(uint256)\", _quantity);\r\n        _setToken.invoke(_weth, 0, callData);\r\n    }\r\n\r\n    /**\r\n     * Instructs the SetToken to wrap the passed quantity of ETH\r\n     *\r\n     * @param _setToken        SetToken instance to invoke\r\n     * @param _weth            WETH address\r\n     * @param _quantity        The quantity to unwrap\r\n     */\r\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"deposit()\");\r\n        _setToken.invoke(_weth, _quantity, callData);\r\n    }\r\n}\r\n// Dependency file: contracts/interfaces/IGovernanceAdapter.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IGovernanceAdapter\r\n * @author Set Protocol\r\n */\r\ninterface IGovernanceAdapter {\r\n\r\n    function getVoteCalldata(\r\n        uint256 _proposalId,\r\n        bool _support,\r\n        bytes memory _data\r\n    )\r\n        external\r\n        view\r\n        returns (address _target, uint256 _value, bytes memory _calldata);\r\n\r\n    function getDelegateCalldata(address _delegatee) external view returns (address _target, uint256 _value, bytes memory _calldata);\r\n\r\n    function getRegisterCalldata(address _setToken) external view returns (address _target, uint256 _value, bytes memory _calldata);\r\n\r\n    function getRevokeCalldata() external view returns (address _target, uint256 _value, bytes memory _calldata);\r\n\r\n    function getProposeCalldata(bytes memory _proposalData) external view returns (address _target, uint256 _value, bytes memory _calldata);\r\n}\r\n// Dependency file: contracts/interfaces/IController.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IController {\r\n    function addSet(address _setToken) external;\r\n    function feeRecipient() external view returns(address);\r\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\r\n    function isModule(address _module) external view returns(bool);\r\n    function isSet(address _setToken) external view returns(bool);\r\n    function isSystemContract(address _contractAddress) external view returns (bool);\r\n    function resourceId(uint256 _id) external view returns(address);\r\n}\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.6.10;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n// import { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n// import { IController } from \"../../interfaces/IController.sol\";\r\n// import { IGovernanceAdapter } from \"../../interfaces/IGovernanceAdapter.sol\";\r\n// import { Invoke } from \"../lib/Invoke.sol\";\r\n// import { ISetToken } from \"../../interfaces/ISetToken.sol\";\r\n// import { ModuleBase } from \"../lib/ModuleBase.sol\";\r\n\r\n\r\n/**\r\n * @title GovernanceModule\r\n * @author Set Protocol\r\n *\r\n * A smart contract module that enables participating in governance of component tokens held in the SetToken.\r\n * Examples of intended protocols include Compound, Uniswap, and Maker governance. \r\n */\r\ncontract GovernanceModule is ModuleBase, ReentrancyGuard {\r\n    using Invoke for ISetToken;\r\n\r\n    /* ============ Events ============ */\r\n    event ProposalVoted(\r\n        ISetToken indexed _setToken,\r\n        IGovernanceAdapter indexed _governanceAdapter,\r\n        uint256 indexed _proposalId,\r\n        bool _support\r\n    );\r\n\r\n    event VoteDelegated(\r\n        ISetToken indexed _setToken,\r\n        IGovernanceAdapter indexed _governanceAdapter,\r\n        address _delegatee\r\n    );\r\n\r\n    event ProposalCreated(\r\n        ISetToken indexed _setToken,\r\n        IGovernanceAdapter indexed _governanceAdapter,\r\n        bytes _proposalData\r\n    );\r\n\r\n    event RegistrationSubmitted(\r\n        ISetToken indexed _setToken,\r\n        IGovernanceAdapter indexed _governanceAdapter\r\n    );\r\n\r\n    event RegistrationRevoked(\r\n        ISetToken indexed _setToken,\r\n        IGovernanceAdapter indexed _governanceAdapter\r\n    );\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    constructor(IController _controller) public ModuleBase(_controller) {}\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * SET MANAGER ONLY. Delegate voting power to an Ethereum address. Note: for some governance adapters, delegating to self is\r\n     * equivalent to registering and delegating to zero address is revoking right to vote.\r\n     *\r\n     * @param _setToken                 Address of SetToken\r\n     * @param _governanceName           Human readable name of integration (e.g. COMPOUND) stored in the IntegrationRegistry\r\n     * @param _delegatee                Address of delegatee\r\n     */\r\n    function delegate(\r\n        ISetToken _setToken,\r\n        string memory _governanceName,\r\n        address _delegatee\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyManagerAndValidSet(_setToken)\r\n    {\r\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = governanceAdapter.getDelegateCalldata(_delegatee);\r\n\r\n        _setToken.invoke(targetExchange, callValue, methodData);\r\n\r\n        emit VoteDelegated(_setToken, governanceAdapter, _delegatee);\r\n    }\r\n\r\n    /**\r\n     * SET MANAGER ONLY. Create a new proposal for a specified governance protocol.\r\n     *\r\n     * @param _setToken                 Address of SetToken\r\n     * @param _governanceName           Human readable name of integration (e.g. COMPOUND) stored in the IntegrationRegistry\r\n     * @param _proposalData             Byte data of proposal to pass into governance adapter\r\n     */\r\n    function propose(\r\n        ISetToken _setToken,\r\n        string memory _governanceName,\r\n        bytes memory _proposalData\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyManagerAndValidSet(_setToken)\r\n    {\r\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = governanceAdapter.getProposeCalldata(_proposalData);\r\n\r\n        _setToken.invoke(targetExchange, callValue, methodData);\r\n\r\n        emit ProposalCreated(_setToken, governanceAdapter, _proposalData);\r\n    }\r\n\r\n    /**\r\n     * SET MANAGER ONLY. Register for voting for the SetToken\r\n     *\r\n     * @param _setToken                 Address of SetToken\r\n     * @param _governanceName           Human readable name of integration (e.g. COMPOUND) stored in the IntegrationRegistry\r\n     */\r\n    function register(\r\n        ISetToken _setToken,\r\n        string memory _governanceName\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyManagerAndValidSet(_setToken)\r\n    {\r\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = governanceAdapter.getRegisterCalldata(address(_setToken));\r\n\r\n        _setToken.invoke(targetExchange, callValue, methodData);\r\n\r\n        emit RegistrationSubmitted(_setToken, governanceAdapter);\r\n    }\r\n\r\n    /**\r\n     * SET MANAGER ONLY. Revoke voting for the SetToken\r\n     *\r\n     * @param _setToken                 Address of SetToken\r\n     * @param _governanceName           Human readable name of integration (e.g. COMPOUND) stored in the IntegrationRegistry\r\n     */\r\n    function revoke(\r\n        ISetToken _setToken,\r\n        string memory _governanceName\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyManagerAndValidSet(_setToken)\r\n    {\r\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = governanceAdapter.getRevokeCalldata();\r\n\r\n        _setToken.invoke(targetExchange, callValue, methodData);\r\n\r\n        emit RegistrationRevoked(_setToken, governanceAdapter);\r\n    }\r\n\r\n    /**\r\n     * SET MANAGER ONLY. Cast vote for a specific governance token held in the SetToken. Manager specifies whether to vote for or against\r\n     * a given proposal\r\n     *\r\n     * @param _setToken                 Address of SetToken\r\n     * @param _governanceName           Human readable name of integration (e.g. COMPOUND) stored in the IntegrationRegistry\r\n     * @param _proposalId               ID of the proposal to vote on\r\n     * @param _support                  Boolean indicating whether to support proposal\r\n     * @param _data                     Arbitrary bytes to be used to construct vote call data\r\n     */\r\n    function vote(\r\n        ISetToken _setToken,\r\n        string memory _governanceName,\r\n        uint256 _proposalId,\r\n        bool _support,\r\n        bytes memory _data\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyManagerAndValidSet(_setToken)\r\n    {\r\n        IGovernanceAdapter governanceAdapter = IGovernanceAdapter(getAndValidateAdapter(_governanceName));\r\n\r\n        (\r\n            address targetExchange,\r\n            uint256 callValue,\r\n            bytes memory methodData\r\n        ) = governanceAdapter.getVoteCalldata(\r\n            _proposalId,\r\n            _support,\r\n            _data\r\n        );\r\n\r\n        _setToken.invoke(targetExchange, callValue, methodData);\r\n\r\n        emit ProposalVoted(_setToken, governanceAdapter, _proposalId, _support);\r\n    }\r\n\r\n    /**\r\n     * Initializes this module to the SetToken. Only callable by the SetToken's manager.\r\n     *\r\n     * @param _setToken             Instance of the SetToken to issue\r\n     */\r\n    function initialize(ISetToken _setToken) external onlySetManager(_setToken, msg.sender) onlyValidAndPendingSet(_setToken) {\r\n        _setToken.initializeModule();\r\n    }\r\n\r\n    /**\r\n     * Removes this module from the SetToken, via call by the SetToken.\r\n     */\r\n    function removeModule() external override {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IGovernanceAdapter\",\"name\":\"_governanceAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_proposalData\",\"type\":\"bytes\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IGovernanceAdapter\",\"name\":\"_governanceAdapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IGovernanceAdapter\",\"name\":\"_governanceAdapter\",\"type\":\"address\"}],\"name\":\"RegistrationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IGovernanceAdapter\",\"name\":\"_governanceAdapter\",\"type\":\"address\"}],\"name\":\"RegistrationSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IGovernanceAdapter\",\"name\":\"_governanceAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"VoteDelegated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_governanceName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_governanceName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proposalData\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_governanceName\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_governanceName\",\"type\":\"string\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_governanceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GovernanceModule","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f1b12a7b1f0af744ed21eec7d3e891c48fd3c329","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bae650404747503565dcef680704e29e95557b5e7069bbf4798c199ba766c8c2"}]}