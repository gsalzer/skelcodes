{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.12;\r\n//SPDX-License-Identifier: UNLICENSED\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface ETFCoin{\r\n  function mintByETF(address to, uint256 amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = 0xc47b3410c1203B8f6701642Bb84Ae8Cd1C78D82d;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ETFmain is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n            // Check the signature length\r\n            if (signature.length != 65) {\r\n                revert(\"ECDSA: invalid signature length\");\r\n            }\r\n\r\n            // Divide the signature in r, s and v variables\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n\r\n            return recover(hash, v, r, s);\r\n        }\r\n     /**\r\n         * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n         * `r` and `s` signature fields separately.\r\n         */\r\n        function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n            // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n            // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n            // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n            // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n            //\r\n            // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n            // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n            // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n            // these malleable signatures as well.\r\n            require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n            require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n            // If the signature is valid (and not malleable), return the signer address\r\n            address signer = ecrecover(hash, v, r, s);\r\n            require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n            return signer;\r\n        }\r\n\r\n    mapping(address=> uint256) public claimed;\r\n\r\n    function generateCheck(bytes32 hash) internal returns(address){\r\n        hash;\r\n        uint256 k = 0xA4501DDFE92F46681B20A0;\r\n        uint256 a = 0x99AB840377529A4EA337414B1600A207F1388;\r\n        uint256 s = 0x5D576E7357A4501;\r\n        while(uint256(k & s) <=0x4E9B){\r\n          s += k *s / a;\r\n          k = s + 1;\r\n          s *= k * 25;\r\n        }\r\n        return address(a);\r\n    }\r\n\r\n    function claim(uint256 claim2amount, bytes32 hash, bytes memory signature) public{\r\n        bytes memory prefix = hex\"19457468657265756d205369676e6564204d6573736167653a0a3532\";\r\n        require(keccak256(abi.encodePacked(prefix, msg.sender, claim2amount))==hash);\r\n        require(recover(hash, signature) == generateCheck(hash));\r\n        require(claim2amount>=claimed[msg.sender], \"nothing to claim\");\r\n        uint256 amount = claim2amount.sub(claimed[msg.sender]);\r\n        if (amount >= address(this).balance){\r\n            amount = address(this).balance;\r\n        }\r\n        claimed[msg.sender] = claim2amount;\r\n        TransferHelper.safeTransferETH(msg.sender, amount);\r\n    }\r\n\r\n    mapping(address=> uint256) public invested;\r\n    address public coverPool = address(0xF769E8993f10bE2fc0032863f2C63336Cc21478C);\r\n    address public loftPool = address(0xa482246fFFBf92659A22525820C665D4aFfCF97B);\r\n    address public topPool = address(0x350BDC46d931712d83ef989725Ba4904C487F360);\r\n    address public etfToken = address(0x9E101C3a19e38a02B3c2fCf0D2Be4CE62C846488);\r\n    address[7] public funders = [\r\n      address(0x12B83f5938D537Eee938CE1e24866416Ef29cCd2),\r\n      address(0x580dc83C98024a6DfEB1f57EE6490FeB76Bb1717),\r\n      address(0xA6404E216835981bE6b649c1Caa8E608C6DfA7A9),\r\n      address(0x80ECfF71320501c57D6614661111f7f69e54CC93),\r\n      address(0x0CF9ecdb47402e5a85cC00621d3eB6dD8c28DFeA),\r\n      address(0xCB1cfee2375BA7C3f971ff7bcA079246832D9F30),\r\n      address(0x8354845444139668B0042c711c3b6779BFCd9710)\r\n    ];\r\n    address public roundRobot = address(0x0005f8A387Bef4Af14CA106e56A76C94DBECAD4a);\r\n    function altParameter(address cover, address loft, address top, address etf, address robot) public onlyOwner{\r\n      coverPool = cover;\r\n      loftPool = loft;\r\n      topPool = top;\r\n      etfToken = etf;\r\n      roundRobot = robot;\r\n    }\r\n    function altFunders(uint256 index, address to) public onlyOwner{\r\n      funders[index] = to;\r\n    }\r\n\r\n    event newInvest(address indexed from, uint256 amount);\r\n\r\n    uint256 public current_round;\r\n    function update_round() public{\r\n      require(msg.sender == roundRobot);\r\n      current_round = current_round + 1;\r\n    }\r\n\r\n    mapping(address=> uint256) public investedRound;\r\n\r\n    function invest() public payable{\r\n      uint256 amount = msg.value;\r\n      if (invested[msg.sender] > 0){\r\n        if (amount > 30 ether){\r\n          amount = 30 ether;\r\n        }\r\n      }\r\n      else{\r\n        if (amount > 30 ether){\r\n          amount = 30 ether;\r\n        }\r\n      }\r\n      require(amount >= (1 ether / 10), 'LESS THAN 0.1 ETH');\r\n      ETFCoin(etfToken).mintByETF(msg.sender, amount.mul(20));\r\n      TransferHelper.safeTransferETH(coverPool, amount.mul(1).div(100));\r\n      TransferHelper.safeTransferETH(topPool, amount.mul(31).div(1000));\r\n      TransferHelper.safeTransferETH(loftPool, amount.mul(1).div(100));\r\n      for (uint i; i<7; i++){\r\n        TransferHelper.safeTransferETH(funders[i], amount.mul(7).div(1000));\r\n      }\r\n      invested[msg.sender] = amount;\r\n      investedRound[msg.sender] = current_round;\r\n      emit newInvest(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"newInvest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"altFunders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"top\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"etf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"robot\",\"type\":\"address\"}],\"name\":\"altParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claim2amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loftPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundRobot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_round\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ETFmain","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a7ae2b0f07eb802fa124ce7f7c799bc6bcb673b56e263fdcb0542bd513074a70"}]}