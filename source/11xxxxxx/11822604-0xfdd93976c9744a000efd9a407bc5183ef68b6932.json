{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\npragma abicoder v2;\r\npragma solidity >=0.7.6;\r\n\r\ninterface IStakePoolCreator {\r\n    function version() external returns (uint256);\r\n\r\n    function create() external returns (address);\r\n\r\n    function initialize(\r\n        address poolAddress,\r\n        address pair,\r\n        address rewardToken,\r\n        address timelock,\r\n        address stakePoolRewardFund,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IStakePoolController {\r\n    event MasterCreated(address indexed farm, address indexed pair, uint256 version, address timelock, address stakePoolRewardFund, uint256 totalStakePool);\r\n    event SetWhitelistStakingFor(address indexed contractAddress, bool value);\r\n    event SetWhitelistStakePool(address indexed contractAddress, int8 value);\r\n    event SetStakePoolCreator(address indexed contractAddress, uint256 verion);\r\n    event SetWhitelistRewardRebaser(address indexed contractAddress, bool value);\r\n    event SetWhitelistRewardMultiplier(address indexed contractAddress, bool value);\r\n    event SetStakePoolVerifier(address indexed contractAddress, bool value);\r\n    event ChangeGovernance(address indexed governance);\r\n    event SetFeeCollector(address indexed feeCollector);\r\n    event SetFeeToken(address indexed token);\r\n    event SetFeeAmount(uint256 indexed amount);\r\n\r\n    function allStakePools(uint256) external view returns (address stakePool);\r\n\r\n    function isStakePool(address contractAddress) external view returns (bool);\r\n\r\n    function isStakePoolVerifier(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakingFor(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakePool(address contractAddress) external view returns (int8);\r\n\r\n    function setStakePoolVerifier(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakingFor(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakePool(address contractAddress, int8 state) external;\r\n\r\n    function addStakePoolCreator(address contractAddress) external;\r\n\r\n    function isWhitelistRewardRebaser(address contractAddress) external view returns (bool);\r\n\r\n    function isAllowEmergencyWithdrawStakePool(address _address) external view returns (bool);\r\n\r\n    function setWhitelistRewardRebaser(address contractAddress, bool state) external;\r\n\r\n    function isWhitelistRewardMultiplier(address contractAddress) external view returns (bool);\r\n\r\n    function setAllowEmergencyWithdrawStakePool(address _address, bool state) external;\r\n\r\n    function setWhitelistRewardMultiplier(address contractAddress, bool state) external;\r\n\r\n    function setEnableWhitelistRewardRebaser(bool value) external;\r\n\r\n    function setEnableWhitelistRewardMultiplier(bool value) external;\r\n\r\n    function allStakePoolsLength() external view returns (uint256);\r\n\r\n    function create(\r\n        uint256 version,\r\n        address pair,\r\n        address rewardToken,\r\n        uint256 rewardFundAmount,\r\n        uint256 delayTimeLock,\r\n        bytes calldata data,\r\n        uint8 flag\r\n    ) external returns (address);\r\n\r\n    function createPair(\r\n        uint256 version,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        address rewardToken,\r\n        uint256 rewardFundAmount,\r\n        uint256 delayTimeLock,\r\n        bytes calldata poolRewardInfo,\r\n        uint8 flag\r\n    ) external returns (address);\r\n\r\n    function setGovernance(address) external;\r\n\r\n    function setFeeCollector(address _address) external;\r\n\r\n    function setFeeToken(address _token) external;\r\n\r\n    function setFeeAmount(uint256 _token) external;\r\n}\r\n\r\ninterface IValueLiquidRouter {\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint256 maxPrice;\r\n        bool isBPool;\r\n    }\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        address tokenIn,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external;\r\n\r\n    function addStakeLiquidity(\r\n        address stakePool,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addStakeLiquidityETH(\r\n        address stakePool,\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 totalAmountIn,\r\n        uint256 minTotalAmountOut,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external payable returns (uint256 totalAmountOut);\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 maxTotalAmountIn,\r\n        uint256 deadline,\r\n        uint8 flag\r\n    ) external payable returns (uint256 totalAmountIn);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        address to,\r\n        uint8 flag\r\n    ) external returns (uint256 liquidity);\r\n\r\n    function createPairETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint32 tokenWeight,\r\n        uint32 swapFee,\r\n        address to,\r\n        uint8 flag\r\n    ) external payable returns (uint256 liquidity);\r\n}\r\n\r\ninterface IValueLiquidFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function isPair(address) external view returns (bool);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair);\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint256) external;\r\n}\r\n\r\ninterface IStakePool {\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event AddRewardPool(uint256 indexed poolId);\r\n    event UpdateRewardPool(uint256 indexed poolId, uint256 endRewardBlock, uint256 rewardPerBlock);\r\n    event PayRewardPool(\r\n        uint256 indexed poolId,\r\n        address indexed rewardToken,\r\n        address indexed account,\r\n        uint256 pendingReward,\r\n        uint256 rebaseAmount,\r\n        uint256 paidReward\r\n    );\r\n    event UpdateRewardRebaser(uint256 indexed poolId, address rewardRebaser);\r\n    event UpdateRewardMultiplier(uint256 indexed poolId, address rewardMultiplier);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n\r\n    function version() external returns (uint256);\r\n\r\n    function pair() external returns (address);\r\n\r\n    function initialize(\r\n        address _pair,\r\n        uint256 _unstakingFrozenTime,\r\n        address _rewardFund,\r\n        address _timelock\r\n    ) external;\r\n\r\n    function stake(uint256) external;\r\n\r\n    function stakeFor(address _account) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function getReward(uint8 _pid, address _account) external;\r\n\r\n    function getAllRewards(address _account) external;\r\n\r\n    function claimReward() external;\r\n\r\n    function pendingReward(uint8 _pid, address _account) external view returns (uint256);\r\n\r\n    function allowRecoverRewardToken(address _token) external returns (bool);\r\n\r\n    function getRewardPerBlock(uint8 pid) external view returns (uint256);\r\n\r\n    function rewardPoolInfoLength() external view returns (uint256);\r\n\r\n    function unfrozenStakeTime(address _account) external view returns (uint256);\r\n\r\n    function emergencyWithdraw() external;\r\n\r\n    function updateReward() external;\r\n\r\n    function updateReward(uint8 _pid) external;\r\n\r\n    function updateRewardPool(\r\n        uint8 _pid,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock\r\n    ) external;\r\n\r\n    function getRewardMultiplier(\r\n        uint8 _pid,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) external view returns (uint256);\r\n\r\n    function getRewardRebase(\r\n        uint8 _pid,\r\n        address _rewardToken,\r\n        uint256 _pendingReward\r\n    ) external view returns (uint256);\r\n\r\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external;\r\n\r\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external;\r\n\r\n    function getUserInfo(uint8 _pid, address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 rewardDebt,\r\n            uint256 accumulatedEarned,\r\n            uint256 lockReward,\r\n            uint256 lockRewardReleased\r\n        );\r\n\r\n    function addRewardPool(\r\n        address _rewardToken,\r\n        address _rewardRebaser,\r\n        address _rewardMultiplier,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external;\r\n\r\n    function removeLiquidity(\r\n        address provider,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address provider,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address provider,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\ninterface IValueLiquidPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n    function getSwapFee() external view returns (uint32);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        uint32,\r\n        uint32\r\n    ) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"ds-math-division-by-zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract TimeLock {\r\n    using SafeMath for uint256;\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n\r\n    uint256 public constant GRACE_PERIOD = 14 days;\r\n    uint256 public constant MINIMUM_DELAY = 1 days;\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n    bool private _initialized;\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint256 public delay;\r\n    bool public admin_initialized;\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    constructor() {\r\n        admin_initialized = false;\r\n        _initialized = false;\r\n    }\r\n\r\n    function initialize(address _admin, uint256 _delay) public {\r\n        require(_initialized == false, \"Timelock::constructor: Initialized must be false.\");\r\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(_delay <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = _delay;\r\n        admin = _admin;\r\n        _initialized = true;\r\n        emit NewAdmin(admin);\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint256 _delay) public {\r\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(_delay <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = _delay;\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address _pendingAdmin) public {\r\n        // allows one time setting of admin for deployment purposes\r\n        if (admin_initialized) {\r\n            require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n        } else {\r\n            require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\r\n            admin_initialized = true;\r\n        }\r\n        pendingAdmin = _pendingAdmin;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public returns (bytes32) {\r\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public {\r\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public payable returns (bytes memory) {\r\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IStakePoolRewardFund {\r\n    function initialize(address _stakePool, address _timelock) external;\r\n\r\n    function safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\ninterface IStakePoolRewardRebaser {\r\n    function getRebaseAmount(address rewardToken, uint256 baseAmount) external view returns (uint256);\r\n}\r\n\r\ninterface IStakePoolRewardMultiplier {\r\n    function getRewardMultiplier(\r\n        uint256 _start,\r\n        uint256 _end,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract StakePoolRewardFund is IStakePoolRewardFund {\r\n    uint256 public constant BLOCKS_PER_DAY = 6528;\r\n    address public stakePool;\r\n    address public timelock;\r\n    bool private _initialized;\r\n\r\n    function initialize(address _stakePool, address _timelock) external override {\r\n        require(_initialized == false, \"StakePoolRewardFund: already initialized\");\r\n        stakePool = _stakePool;\r\n        timelock = _timelock;\r\n        _initialized = true;\r\n    }\r\n\r\n    function safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) external override {\r\n        require(msg.sender == stakePool, \"StakePoolRewardFund: !stakePool\");\r\n        TransferHelper.safeTransfer(_token, _to, _value);\r\n    }\r\n\r\n    function recoverRewardToken(\r\n        address _token,\r\n        uint256,\r\n        address\r\n    ) external {\r\n        require(msg.sender == timelock, \"StakePoolRewardFund: !timelock\");\r\n        require(IStakePool(stakePool).allowRecoverRewardToken(_token), \"StakePoolRewardFund: not allow recover reward token\");\r\n    }\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\ncontract StakePoolController is IStakePoolController {\r\n    IValueLiquidFactory public swapFactory;\r\n    address public governance;\r\n\r\n    address public feeCollector;\r\n    address public feeToken;\r\n    uint256 public feeAmount;\r\n\r\n    mapping(address => bool) private _stakePools;\r\n    mapping(address => bool) private _whitelistStakingFor;\r\n    mapping(address => bool) private _whitelistRewardRebaser;\r\n    mapping(address => bool) private _whitelistRewardMultiplier;\r\n    mapping(address => int8) private _whitelistStakePools;\r\n    mapping(address => bool) public _stakePoolVerifiers;\r\n    mapping(uint256 => address) public stakePoolCreators;\r\n    address[] public override allStakePools;\r\n    bool public enableWhitelistRewardRebaser = true;\r\n    bool public enableWhitelistRewardMultiplier = true;\r\n    bool private _initialized = false;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    mapping(address => bool) public allowEmergencyWithdrawStakePools;\r\n\r\n    modifier discountCHI(uint8 flag) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        if ((flag & 0x1) == 1) {\r\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    function initialize(address _swapFactory) public {\r\n        require(_initialized == false, \"StakePoolController: initialized\");\r\n        governance = msg.sender;\r\n        swapFactory = IValueLiquidFactory(_swapFactory);\r\n        _initialized = true;\r\n    }\r\n\r\n    function isStakePool(address b) external view override returns (bool) {\r\n        return _stakePools[b];\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"StakePoolController: !governance\");\r\n        _;\r\n    }\r\n\r\n    function setFeeCollector(address _address) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        feeCollector = _address;\r\n        emit SetFeeCollector(_address);\r\n    }\r\n\r\n    function setEnableWhitelistRewardRebaser(bool value) external override onlyGovernance {\r\n        enableWhitelistRewardRebaser = value;\r\n    }\r\n\r\n    function setEnableWhitelistRewardMultiplier(bool value) external override onlyGovernance {\r\n        enableWhitelistRewardMultiplier = value;\r\n    }\r\n\r\n    function setFeeToken(address _token) external override onlyGovernance {\r\n        require(_token != address(0), \"StakePoolController: invalid _token\");\r\n        feeToken = _token;\r\n        emit SetFeeToken(_token);\r\n    }\r\n\r\n    function setFeeAmount(uint256 _feeAmount) external override onlyGovernance {\r\n        feeAmount = _feeAmount;\r\n        emit SetFeeAmount(_feeAmount);\r\n    }\r\n\r\n    function isWhitelistStakingFor(address _address) external view override returns (bool) {\r\n        return _whitelistStakingFor[_address];\r\n    }\r\n\r\n    function isWhitelistStakePool(address _address) external view override returns (int8) {\r\n        return _whitelistStakePools[_address];\r\n    }\r\n\r\n    function isStakePoolVerifier(address _address) external view override returns (bool) {\r\n        return _stakePoolVerifiers[_address];\r\n    }\r\n\r\n    function isAllowEmergencyWithdrawStakePool(address _address) external view override returns (bool) {\r\n        return allowEmergencyWithdrawStakePools[_address];\r\n    }\r\n\r\n    function setWhitelistStakingFor(address _address, bool state) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        _whitelistStakingFor[_address] = state;\r\n        emit SetWhitelistStakingFor(_address, state);\r\n    }\r\n\r\n    function setAllowEmergencyWithdrawStakePool(address _address, bool state) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        allowEmergencyWithdrawStakePools[_address] = state;\r\n    }\r\n\r\n    function setStakePoolVerifier(address _address, bool state) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        _stakePoolVerifiers[_address] = state;\r\n        emit SetStakePoolVerifier(_address, state);\r\n    }\r\n\r\n    function setWhitelistStakePool(address _address, int8 state) external override {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        require(_stakePoolVerifiers[msg.sender] == true, \"StakePoolController: invalid stake pool verifier\");\r\n        _whitelistStakePools[_address] = state;\r\n        emit SetWhitelistStakePool(_address, state);\r\n    }\r\n\r\n    function addStakePoolCreator(address _address) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        uint256 version = IStakePoolCreator(_address).version();\r\n        require(version >= 1000, \"Invalid stake pool creator version\");\r\n        stakePoolCreators[version] = _address;\r\n        emit SetStakePoolCreator(_address, version);\r\n    }\r\n\r\n    function isWhitelistRewardRebaser(address _address) external view override returns (bool) {\r\n        if (!enableWhitelistRewardRebaser) return true;\r\n        return _address == address(0) ? true : _whitelistRewardRebaser[_address];\r\n    }\r\n\r\n    function setWhitelistRewardRebaser(address _address, bool state) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        _whitelistRewardRebaser[_address] = state;\r\n        emit SetWhitelistRewardRebaser(_address, state);\r\n    }\r\n\r\n    function isWhitelistRewardMultiplier(address _address) external view override returns (bool) {\r\n        if (!enableWhitelistRewardMultiplier) return true;\r\n        return _address == address(0) ? true : _whitelistRewardMultiplier[_address];\r\n    }\r\n\r\n    function setWhitelistRewardMultiplier(address _address, bool state) external override onlyGovernance {\r\n        require(_address != address(0), \"StakePoolController: invalid address\");\r\n        _whitelistRewardMultiplier[_address] = state;\r\n        emit SetWhitelistRewardMultiplier(_address, state);\r\n    }\r\n\r\n    function setGovernance(address _governance) external override onlyGovernance {\r\n        require(_governance != address(0), \"StakePoolController: invalid governance\");\r\n        governance = _governance;\r\n        emit ChangeGovernance(_governance);\r\n    }\r\n\r\n    function allStakePoolsLength() external view override returns (uint256) {\r\n        return allStakePools.length;\r\n    }\r\n\r\n    function createPair(\r\n        uint256 version,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        address rewardToken,\r\n        uint256 rewardFundAmount,\r\n        uint256 delayTimeLock,\r\n        bytes calldata poolRewardInfo,\r\n        uint8 flag\r\n    ) public override discountCHI(flag) returns (address) {\r\n        address pair = swapFactory.getPair(tokenA, tokenB, tokenWeightA, swapFee);\r\n        if (pair == address(0)) {\r\n            pair = swapFactory.createPair(tokenA, tokenB, tokenWeightA, swapFee);\r\n        }\r\n        return create(version, pair, rewardToken, rewardFundAmount, delayTimeLock, poolRewardInfo, 0);\r\n    }\r\n\r\n    function createInternal(\r\n        address stakePoolCreator,\r\n        address pair,\r\n        address stakePoolRewardFund,\r\n        address rewardToken,\r\n        uint256 delayTimeLock,\r\n        bytes calldata data\r\n    ) internal returns (address) {\r\n        TimeLock timelock = new TimeLock();\r\n        IStakePool pool = IStakePool(IStakePoolCreator(stakePoolCreator).create());\r\n        allStakePools.push(address(pool));\r\n        _stakePools[address(pool)] = true;\r\n        emit MasterCreated(address(pool), pair, pool.version(), address(timelock), stakePoolRewardFund, allStakePools.length);\r\n        IStakePoolCreator(stakePoolCreator).initialize(address(pool), pair, rewardToken, address(timelock), address(stakePoolRewardFund), data);\r\n        StakePoolRewardFund(stakePoolRewardFund).initialize(address(pool), address(timelock));\r\n        timelock.initialize(msg.sender, delayTimeLock);\r\n        return address(pool);\r\n    }\r\n\r\n    function create(\r\n        uint256 version,\r\n        address pair,\r\n        address rewardToken,\r\n        uint256 rewardFundAmount,\r\n        uint256 delayTimeLock,\r\n        bytes calldata data,\r\n        uint8 flag\r\n    ) public override discountCHI(flag) returns (address) {\r\n        require(swapFactory.isPair(pair), \"StakePoolController: invalid pair\");\r\n        address stakePoolCreator = stakePoolCreators[version];\r\n        require(stakePoolCreator != address(0), \"StakePoolController: Invalid stake pool creator version\");\r\n\r\n        if (feeCollector != address(0) && feeToken != address(0) && feeAmount > 0) {\r\n            TransferHelper.safeTransferFrom(feeToken, msg.sender, feeCollector, feeAmount);\r\n        }\r\n\r\n        StakePoolRewardFund stakePoolRewardFund = new StakePoolRewardFund();\r\n        if (rewardFundAmount > 0) {\r\n            require(IERC20(rewardToken).balanceOf(msg.sender) >= rewardFundAmount, \"StakePoolController: Not enough rewardFundAmount\");\r\n            TransferHelper.safeTransferFrom(rewardToken, msg.sender, address(stakePoolRewardFund), rewardFundAmount);\r\n        }\r\n        return createInternal(stakePoolCreator, pair, address(stakePoolRewardFund), rewardToken, delayTimeLock, data);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recoverRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakePoolRewardFund","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://47e058b4105187bafc9b7ce1b901f6fbade94cfd28399b5ae5e845452cf26e9e"}]}