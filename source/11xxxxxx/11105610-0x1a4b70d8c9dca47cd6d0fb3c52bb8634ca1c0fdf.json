{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/interfaces/IERC20Template.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20Template {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address minter,\\n        uint256 cap,\\n        string calldata blob,\\n        address collector\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n    function minter() external view returns(address);    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function cap() external view returns (uint256);\\n    function isMinter(address account) external view returns (bool);\\n    function isInitialized() external view returns (bool);\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function proposeMinter(address newMinter) external;\\n    function approveMinter() external;\\n}\\n\"\r\n    },\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/metadata/Metadata.sol\": {\r\n      \"content\": \"pragma solidity 0.5.7;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\nimport '../interfaces/IERC20Template.sol';\\n\\n\\n/**\\n* @title Metadata\\n*  \\n* @dev Metadata stands for Decentralized Document. It allows publishers\\n*      to publish their dataset metadata in decentralized way.\\n*      It follows the Ocean DID Document standard: \\n*      https://github.com/oceanprotocol/OEPs/blob/master/7/v0.2/README.md\\n*/\\ncontract Metadata {\\n\\n    event MetadataCreated(\\n        address indexed dataToken,\\n        address indexed createdBy,\\n        bytes flags,\\n        bytes data\\n    );\\n    event MetadataUpdated(\\n        address indexed dataToken,\\n        address indexed updatedBy,\\n        bytes flags,\\n        bytes data\\n    );\\n\\n    modifier onlyDataTokenMinter(address dataToken)\\n    {\\n        IERC20Template token = IERC20Template(dataToken);\\n        require(\\n            token.minter() == msg.sender,\\n            'Metadata: Invalid DataToken Minter'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev create\\n     *      creates/publishes new metadata/DDO document on-chain. \\n     * @param dataToken refers to data token address\\n     * @param flags special flags associated with metadata\\n     * @param data referes to the actual metadata\\n     */\\n    function create(\\n        address dataToken,\\n        bytes calldata flags,\\n        bytes calldata data\\n    ) \\n        external\\n        onlyDataTokenMinter(dataToken)\\n    {\\n        emit MetadataCreated(\\n            dataToken,\\n            msg.sender,\\n            flags,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev update\\n     *      allows only datatoken minter(s) to update the DDO/metadata content\\n     * @param dataToken refers to data token address\\n     * @param flags special flags associated with metadata\\n     * @param data referes to the actual metadata\\n     */\\n    function update(\\n        address dataToken,\\n        bytes calldata flags,\\n        bytes calldata data\\n    ) \\n        external\\n        onlyDataTokenMinter(dataToken)\\n    {\\n        emit MetadataUpdated(\\n            dataToken,\\n            msg.sender,\\n            flags,\\n            data\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"dataToken\",\"type\":\"address\"},{\"name\":\"flags\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataToken\",\"type\":\"address\"},{\"name\":\"flags\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"createdBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flags\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MetadataCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dataToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flags\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"}]","ContractName":"Metadata","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}