{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ITabularium.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface ITabularium {\r\n\r\n  function defineSmcAddress(address _smc) external;\r\n\r\n  function addMeasurement(\r\n    uint256 id,\r\n    int256 status,\r\n    int256 receivable,\r\n    int256 creditDebit,\r\n    int256 specificValueRatio,\r\n    int256 producedSteel\r\n  ) external;\r\n\r\n  function defineAverageSpecificValueRatio() \r\n    external view returns (int256);\r\n\r\n  function defineBaseAdjustment(\r\n    int256 averageSpecificValueRatio,\r\n    int256 contractedValueRatio,\r\n    int256 stopLimit\r\n  ) external view returns (int256 _baseAdjustment);\r\n\r\n  function calculationPipeline(\r\n    int256 totalInvoicedMaterial,\r\n    int256 producedSteel,\r\n    int256 coefficient,\r\n    int256 contractedValueRatio\r\n  ) external returns (\r\n      int256 _specificPayment,\r\n      int256 _creditDebit,\r\n      int256 _specificValueRatio,\r\n      int256 _status\r\n  );\r\n\r\n}\r\n\r\n// File: contracts/SMCRHIMagnesita.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ncontract SMCRHIMagnesita {\r\n    enum MeasurementStatus {\r\n        EMPTY,\r\n        WAITING_HIRED_TECHNICIAN,\r\n        WAITING_CONTRACTOR_TECHNICIAN,\r\n        WAITING_HIRED_COMMERCIAL,\r\n        WAITING_CONTRACTOR_COMMERCIAL,\r\n        WAITING_ARBITER,\r\n        TECHNICALLY_APPROVED,\r\n        TECHNICALLY_DISAPPROVED,\r\n        COMMERCIALLY_DISAPPROVED,\r\n        COMMERCIALLY_APPROVED\r\n    }\r\n\r\n    enum Action {\r\n        EMPTY,\r\n        OPEN,\r\n        MEASURE,\r\n        DISSAPROVAL,\r\n        APPROVAL,\r\n        ARBITER_CALL,\r\n        ARBITER_MEASURE,\r\n        CLOSE\r\n    }\r\n\r\n    enum MeasurementType {EMPTY, TECHNICAL, COMMERCIAL}\r\n\r\n    enum Variables {\r\n        IS_OPEN,\r\n        START_DATE,\r\n        END_DATE,\r\n        LABEL,\r\n        // ADMIN\r\n        STOP_LIMIT,\r\n        CONTRACTED_VALUE_RATIO,\r\n        COEFFICIENT,\r\n        // FINANCIAL\r\n        CREDIT_DEBIT,\r\n        RECEIVABLE,\r\n        SPECIFIC_VALUE_RATIO,\r\n        STATUS,\r\n        // TECHNICAL\r\n        RUN_NUMBER,\r\n        TIMESTAMP,\r\n        VACUUM_TIME,\r\n        BLOWN_OXIGEN_ON_RUN,\r\n        TECHNICAL_NOTES,\r\n        TECHNICAL_JUSTIFICATIVE,\r\n        TECHNICAL_FILES,\r\n        // COMMERCIAL\r\n        PRODUCED_STEEL,\r\n        TOTAL_INVOICED_MATERIAL,\r\n        COMMERCIAL_NOTES,\r\n        COMMERCIAL_JUSTIFICATIVE,\r\n        COMMERCIAL_FILES\r\n    }\r\n\r\n    int256 public ONE = 100000000000000;\r\n    bytes32 public TRUE = bytes32(\"TRUE\");\r\n    bytes32 public FALSE = bytes32(\"FALSE\");\r\n    \r\n    int256 public stopLimit = 1228800000000000;\r\n    int256 public contractedValueRatio = 1019900000000000;\r\n    int256 public coefficient = 70000000000000;\r\n\r\n    mapping(uint256 => mapping(uint256 => int256)) public financialVariables;\r\n    mapping(uint256 => mapping(uint256 => bytes32)) public measurementVariables;\r\n    mapping(uint256 => MeasurementStatus) public measurementStatus;\r\n    mapping(uint256 => string) public measurementLabels;\r\n\r\n    mapping(uint256 => mapping(uint256 => bytes32)) public eventVariables;\r\n\r\n    mapping(uint256 => Action) public eventAction;\r\n    mapping(uint256 => MeasurementType) public eventMeasurementType;\r\n    mapping(uint256 => address) public eventUser;\r\n\r\n    address public owner;\r\n    address public arbiter;\r\n    address public contractorTechnician;\r\n    address public hiredTechnician;\r\n    address public contractorCommercial;\r\n    address public hiredCommercial;\r\n\r\n    ITabularium tab;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setTabulariumAddress(address _tabulariumAddress) public isOwner {\r\n        tab = ITabularium(_tabulariumAddress);\r\n    }\r\n\r\n    function getMeasurementId(string memory _label) public pure returns (uint256){\r\n        return uint256(keccak256(abi.encodePacked(_label)));\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier measurementIsOpen(string memory _label) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        require(measurementVariables[measurementId][uint256(Variables.IS_OPEN)] == TRUE, \"no open measurement\");\r\n        _;\r\n    }\r\n    modifier canBeTechnicallyMeasured(string memory _label, bytes32 _startDate, bytes32 _endDate) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (measurementStatus[measurementId] == MeasurementStatus.WAITING_ARBITER) {\r\n            require(msg.sender == arbiter, \"Arbiter must be called\");\r\n        } else if (measurementVariables[measurementId][uint256(Variables.IS_OPEN)] != TRUE &&\r\n                     measurementStatus[measurementId] != MeasurementStatus.COMMERCIALLY_APPROVED) {\r\n            require(msg.sender == hiredTechnician || msg.sender == contractorTechnician, \"Only technician can open a Measurement\");\r\n         } else if (measurementStatus[measurementId] == MeasurementStatus.TECHNICALLY_DISAPPROVED) {\r\n            require(measurementVariables[measurementId][uint256(Variables.START_DATE)] == _startDate && \r\n                      measurementVariables[measurementId][uint256(Variables.END_DATE)] == _endDate,\r\n                    \"Measurement must have same start and end date!\");\r\n            require(msg.sender == hiredTechnician || msg.sender == contractorTechnician, \"Must be Technician\");\r\n         }\r\n         else {\r\n            require(false, \"Wrong role or Wrong time\");\r\n        }\r\n        _;\r\n    }\r\n    modifier canBeTechnicallyApproved(string memory _label, bool _decision) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (measurementStatus[measurementId] == MeasurementStatus.WAITING_CONTRACTOR_TECHNICIAN) {\r\n            require(msg.sender == contractorTechnician, \"Only the contractor technician\");\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.WAITING_HIRED_TECHNICIAN) {\r\n            require(msg.sender == hiredTechnician, \"Only the hired technician\");\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.WAITING_ARBITER) {\r\n            require(msg.sender == arbiter, \"Only arbiter\");\r\n            require(_decision == true, \"Arbiter can't Reprove a Measurement\");\r\n        } else {\r\n            require(false, \"Measurement not waiting for this action or user has wrong role\");\r\n        }\r\n        _;\r\n    }\r\n    modifier canBeCommerciallyMeasured(string memory _label) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (measurementStatus[measurementId] == MeasurementStatus.WAITING_ARBITER) {\r\n            require(msg.sender == arbiter, \"Arbiter not called\");\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.COMMERCIALLY_DISAPPROVED || \r\n                   measurementStatus[measurementId] == MeasurementStatus.TECHNICALLY_APPROVED ) {\r\n             require(msg.sender == hiredCommercial || \r\n                     msg.sender == contractorCommercial, \"Only commercial participants\");\r\n        } else { \r\n            require(false, \"Measurement not waiting for this action or user has wrong role\");\r\n        }\r\n        _;\r\n    }\r\n    modifier canBeCommerciallyApproved(string memory _label, bool _decision) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (measurementStatus[measurementId] == MeasurementStatus.WAITING_CONTRACTOR_COMMERCIAL) {\r\n            require(msg.sender == contractorCommercial, \"Only contractor commercial and arbiter\");\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.WAITING_HIRED_COMMERCIAL) {\r\n            require(msg.sender == hiredCommercial, \"Only hired commercial and arbiter \" );\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.WAITING_ARBITER) {\r\n            require(msg.sender == arbiter, \"Only arbiter \");\r\n            require(_decision == true, \"Arbiter can't Reprove a Measurement\");\r\n        } else {\r\n            require(false,  \"Measurement not waiting for this action or user has wrong role\");\r\n        }\r\n        _;\r\n    }\r\n    modifier userCanCallArbiter(string memory _label) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (measurementStatus[measurementId] == MeasurementStatus.TECHNICALLY_DISAPPROVED) {\r\n            require(msg.sender == hiredTechnician || msg.sender == contractorTechnician, \"Only technician\");\r\n        } else if (measurementStatus[measurementId] == MeasurementStatus.COMMERCIALLY_DISAPPROVED) {\r\n            require(msg.sender == hiredCommercial || msg.sender == contractorCommercial, \"Only commercial\");\r\n        } else {\r\n            require(false, \"Measurement not waiting for this action or user has wrong role\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function defineArbiter(address _arbiter) public isOwner {\r\n        arbiter = _arbiter;\r\n    }\r\n\r\n    function defineContractorTechnician(address _contractorTechnician) public isOwner {\r\n        contractorTechnician = _contractorTechnician;\r\n    }\r\n\r\n    function defineHiredTechnician(address _hiredTechnician) public isOwner {\r\n        hiredTechnician = _hiredTechnician;\r\n    }\r\n\r\n    function defineContractorCommercial(address _contractorCommercial) public isOwner {\r\n        contractorCommercial = _contractorCommercial;\r\n    }\r\n\r\n    function defineHiredCommercial(address _hiredCommercial) public isOwner {\r\n        hiredCommercial = _hiredCommercial;\r\n    }\r\n\r\n    function registerTechnicalMeasurement(\r\n        string memory _label,\r\n        bytes32 _startDate,\r\n        bytes32 _endDate,\r\n        bytes32 _runNumber,\r\n        bytes32 _timeStamp,\r\n        bytes32 _vacuumTime,\r\n        bytes32 _blownOxigenOnRun,\r\n        bytes32 _technicalNotes,\r\n        bytes32 _technicalFiles\r\n    ) public canBeTechnicallyMeasured(_label, _startDate, _endDate) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n        \r\n        eventUser[measurementId] = msg.sender;\r\n        eventMeasurementType[measurementId] = MeasurementType.TECHNICAL;\r\n\r\n        if (msg.sender == arbiter) {\r\n            eventAction[measurementId] = Action.ARBITER_MEASURE;\r\n            measurementStatus[measurementId] = MeasurementStatus.TECHNICALLY_APPROVED;\r\n        } else {\r\n            if (measurementVariables[measurementId][uint256(Variables.IS_OPEN)] != TRUE) {\r\n                eventAction[measurementId] = Action.OPEN;\r\n                measurementLabels[measurementId] = _label;\r\n                measurementVariables[measurementId][uint256(Variables.IS_OPEN)] = TRUE;\r\n                measurementVariables[measurementId][uint256(Variables.START_DATE)] = _startDate;\r\n                measurementVariables[measurementId][uint256(Variables.END_DATE)] = _endDate;\r\n            } else {\r\n                eventAction[measurementId] = Action.MEASURE;\r\n            }\r\n            if (msg.sender == contractorTechnician) {\r\n                measurementStatus[measurementId] = MeasurementStatus.WAITING_HIRED_TECHNICIAN;\r\n            } else {\r\n                measurementStatus[measurementId] = MeasurementStatus.WAITING_CONTRACTOR_TECHNICIAN;\r\n            }\r\n        }\r\n        \r\n        eventVariables[measurementId][uint256(Variables.RUN_NUMBER)] = _runNumber;\r\n        eventVariables[measurementId][uint256(Variables.TIMESTAMP)] = _timeStamp;\r\n        eventVariables[measurementId][uint256(Variables.VACUUM_TIME)] = _vacuumTime;\r\n        eventVariables[measurementId][uint256(Variables.BLOWN_OXIGEN_ON_RUN)] = _blownOxigenOnRun;\r\n        eventVariables[measurementId][uint256(Variables.TECHNICAL_NOTES)] = _technicalNotes;\r\n        eventVariables[measurementId][uint256(Variables.TECHNICAL_FILES)] = _technicalFiles;\r\n    }\r\n\r\n    function approveTechnicalMeasurement(\r\n        string memory _label,\r\n        bool _decision,\r\n        bytes32 _technicalJustificative\r\n    ) public measurementIsOpen(_label) canBeTechnicallyApproved(_label, _decision) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        eventMeasurementType[measurementId] = MeasurementType.TECHNICAL;\r\n        eventUser[measurementId] = msg.sender;\r\n       \r\n        if (_decision == true) {\r\n            eventAction[measurementId] = Action.APPROVAL;\r\n            measurementStatus[measurementId] = MeasurementStatus.TECHNICALLY_APPROVED;\r\n        } else if (_decision == false) {\r\n            eventAction[measurementId] = Action.DISSAPROVAL;\r\n            measurementStatus[measurementId] = MeasurementStatus.TECHNICALLY_DISAPPROVED;\r\n        }\r\n        else {\r\n            revert(\"Decision not boolean\"); // não sei se precisa\r\n        }\r\n        \r\n        eventVariables[measurementId][uint256(Variables.TECHNICAL_JUSTIFICATIVE)] = _technicalJustificative;\r\n    }\r\n\r\n    function registerCommercialMeasurement(\r\n        string memory _label,\r\n        int256 _producedSteel,\r\n        int256 _totalInvoicedMaterial,\r\n        bytes32 _commercialNotes,\r\n        bytes32 _commercialFiles,\r\n        bool _updateAdminVariables,\r\n        int256 _stopLimit,\r\n        int256 _contractedValueRatio,\r\n        int256 _coefficient\r\n    )\r\n        public\r\n        canBeCommerciallyMeasured(_label)\r\n    {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n        eventUser[measurementId] = msg.sender;\r\n        eventMeasurementType[measurementId] = MeasurementType.COMMERCIAL;\r\n\r\n        if (msg.sender == arbiter) {\r\n            eventAction[measurementId] = Action.ARBITER_MEASURE;\r\n\r\n            measurementVariables[measurementId][uint256(Variables.IS_OPEN)] = FALSE;\r\n            measurementStatus[measurementId] = MeasurementStatus.COMMERCIALLY_APPROVED;\r\n            setFinancialMeasurement(measurementId);\r\n        } else {\r\n            eventAction[measurementId] = Action.MEASURE;\r\n\r\n            if (msg.sender == contractorCommercial) {\r\n                measurementStatus[measurementId] = MeasurementStatus.WAITING_HIRED_COMMERCIAL;\r\n            } else {\r\n                measurementStatus[measurementId] = MeasurementStatus.WAITING_CONTRACTOR_COMMERCIAL;\r\n            }\r\n        }\r\n\r\n        financialVariables[measurementId][uint256(Variables.PRODUCED_STEEL)] = _producedSteel;\r\n        financialVariables[measurementId][uint256(Variables.TOTAL_INVOICED_MATERIAL)] = _totalInvoicedMaterial;\r\n\r\n        if (_updateAdminVariables == true) {\r\n            financialVariables[measurementId][uint256(Variables.STOP_LIMIT)] = _stopLimit;\r\n            financialVariables[measurementId][uint256(Variables.CONTRACTED_VALUE_RATIO)] = _contractedValueRatio;\r\n            financialVariables[measurementId][uint256(Variables.COEFFICIENT)] = _coefficient;\r\n\r\n            stopLimit = _stopLimit;\r\n            contractedValueRatio = _contractedValueRatio;\r\n            coefficient = _coefficient;\r\n        }\r\n\r\n        \r\n        eventVariables[measurementId][uint256(Variables.COMMERCIAL_NOTES)] = _commercialNotes;\r\n        eventVariables[measurementId][uint256(Variables.COMMERCIAL_FILES)] = _commercialFiles;\r\n    }\r\n\r\n    function approveCommercialMeasurement(\r\n        string memory _label,\r\n        bool _decision,\r\n        bytes32 _commercialJustificative\r\n    ) public measurementIsOpen(_label) canBeCommerciallyApproved(_label, _decision) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n        \r\n        eventMeasurementType[measurementId] = MeasurementType.COMMERCIAL;\r\n        eventUser[measurementId] = msg.sender;\r\n        if (_decision == true) {\r\n            eventAction[measurementId] = Action.APPROVAL;\r\n            measurementStatus[measurementId] = MeasurementStatus.COMMERCIALLY_APPROVED;\r\n            measurementVariables[measurementId][uint256(Variables.IS_OPEN)] = FALSE;\r\n            setFinancialMeasurement(measurementId);\r\n        } else {\r\n            eventAction[measurementId] = Action.DISSAPROVAL;\r\n            measurementStatus[measurementId] = MeasurementStatus.COMMERCIALLY_DISAPPROVED;\r\n        }\r\n\r\n        \r\n        eventVariables[measurementId][uint256(Variables.COMMERCIAL_JUSTIFICATIVE)] = _commercialJustificative;\r\n    }\r\n\r\n    function callArbiter(string memory _label) public userCanCallArbiter(_label) measurementIsOpen(_label) {\r\n        uint256 measurementId = getMeasurementId(_label);\r\n\r\n        if (msg.sender == hiredTechnician || msg.sender == contractorTechnician) {\r\n            eventMeasurementType[measurementId] = MeasurementType.TECHNICAL;\r\n        } else if (msg.sender == hiredCommercial || msg.sender == contractorCommercial) {\r\n            eventMeasurementType[measurementId] = MeasurementType.COMMERCIAL;\r\n        }\r\n\r\n        eventAction[measurementId] = Action.ARBITER_CALL;\r\n        measurementStatus[measurementId] = MeasurementStatus.WAITING_ARBITER;\r\n    }\r\n\r\n    function addFinancialMeasurement(\r\n        uint256 _id,\r\n        int256 _status,\r\n        int256 _receivable,\r\n        int256 _creditDebit,\r\n        int256 _specificValueRatio,\r\n        int256 _producedSteel\r\n    ) public isOwner {\r\n        tab.addMeasurement(\r\n            _id,\r\n            _status,\r\n            _receivable,\r\n            _creditDebit,\r\n            _specificValueRatio,\r\n            _producedSteel\r\n        );\r\n    }\r\n\r\n    function defineBaseAdjustment() public isOwner {\r\n        int256 averageSpecificValueRatio = tab\r\n            .defineAverageSpecificValueRatio();\r\n\r\n        contractedValueRatio = tab.defineBaseAdjustment(\r\n            averageSpecificValueRatio,\r\n            contractedValueRatio,\r\n            stopLimit\r\n        );\r\n    }\r\n\r\n    function setFinancialMeasurement(uint256 _measurementId) private {\r\n        (\r\n            int256 specificPayment,\r\n            int256 creditDebit,\r\n            int256 specificValueRatio,\r\n            int256 status\r\n        ) = tab.calculationPipeline(\r\n            financialVariables[_measurementId][uint256(Variables.TOTAL_INVOICED_MATERIAL)],\r\n            financialVariables[_measurementId][uint256(Variables.PRODUCED_STEEL)],\r\n            coefficient,\r\n            contractedValueRatio\r\n        );\r\n\r\n        financialVariables[_measurementId][uint256(Variables.RECEIVABLE)] = specificPayment;\r\n        financialVariables[_measurementId][uint256(Variables.CREDIT_DEBIT)] = creditDebit;\r\n        financialVariables[_measurementId][uint256(Variables.SPECIFIC_VALUE_RATIO)] = specificValueRatio;\r\n        financialVariables[_measurementId][uint256(Variables.STATUS)] = status;\r\n\r\n        tab.addMeasurement(\r\n            _measurementId,\r\n            financialVariables[_measurementId][uint256(Variables.STATUS)],\r\n            financialVariables[_measurementId][uint256(Variables.RECEIVABLE)],\r\n            financialVariables[_measurementId][uint256(Variables.CREDIT_DEBIT)],\r\n            financialVariables[_measurementId][uint256(Variables.SPECIFIC_VALUE_RATIO)],\r\n            financialVariables[_measurementId][uint256(Variables.PRODUCED_STEEL)]\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FALSE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_status\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_receivable\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_creditDebit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_specificValueRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_producedSteel\",\"type\":\"int256\"}],\"name\":\"addFinancialMeasurement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_decision\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_commercialJustificative\",\"type\":\"bytes32\"}],\"name\":\"approveCommercialMeasurement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_decision\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_technicalJustificative\",\"type\":\"bytes32\"}],\"name\":\"approveTechnicalMeasurement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"callArbiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coefficient\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractedValueRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractorCommercial\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractorTechnician\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbiter\",\"type\":\"address\"}],\"name\":\"defineArbiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defineBaseAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractorCommercial\",\"type\":\"address\"}],\"name\":\"defineContractorCommercial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractorTechnician\",\"type\":\"address\"}],\"name\":\"defineContractorTechnician\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hiredCommercial\",\"type\":\"address\"}],\"name\":\"defineHiredCommercial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hiredTechnician\",\"type\":\"address\"}],\"name\":\"defineHiredTechnician\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventAction\",\"outputs\":[{\"internalType\":\"enum SMCRHIMagnesita.Action\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventMeasurementType\",\"outputs\":[{\"internalType\":\"enum SMCRHIMagnesita.MeasurementType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"financialVariables\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getMeasurementId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiredCommercial\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiredTechnician\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"measurementLabels\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"measurementStatus\",\"outputs\":[{\"internalType\":\"enum SMCRHIMagnesita.MeasurementStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"measurementVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_producedSteel\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_totalInvoicedMaterial\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"_commercialNotes\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_commercialFiles\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_updateAdminVariables\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"_stopLimit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_contractedValueRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_coefficient\",\"type\":\"int256\"}],\"name\":\"registerCommercialMeasurement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_startDate\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_endDate\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_runNumber\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_timeStamp\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_vacuumTime\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_blownOxigenOnRun\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_technicalNotes\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_technicalFiles\",\"type\":\"bytes32\"}],\"name\":\"registerTechnicalMeasurement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tabulariumAddress\",\"type\":\"address\"}],\"name\":\"setTabulariumAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLimit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SMCRHIMagnesita","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a3bae6ab8b9362c49103a2be9d7c0555e8c3747c29b90a446d4f848784377a1e"}]}