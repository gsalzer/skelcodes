{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n// File: contracts/util/TransferETHInterface.sol\r\n\r\n\r\n\r\n\r\ninterface TransferETHInterface {\r\n    receive() external payable;\r\n\r\n    event LogTransferETH(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/util/TransferETH.sol\r\n\r\n\r\n\r\n\r\nabstract contract TransferETH is TransferETHInterface {\r\n    receive() external payable override {\r\n        emit LogTransferETH(msg.sender, address(this), msg.value);\r\n    }\r\n\r\n    function _hasSufficientBalance(uint256 amount) internal view returns (bool ok) {\r\n        address thisContract = address(this);\r\n        return amount <= thisContract.balance;\r\n    }\r\n\r\n    /**\r\n     * @notice transfer `amount` ETH to the `recipient` account with emitting log\r\n     */\r\n    function _transferETH(\r\n        address payable recipient,\r\n        uint256 amount,\r\n        string memory errorMessage\r\n    ) internal {\r\n        require(_hasSufficientBalance(amount), errorMessage);\r\n        (bool success, ) = recipient.call{value: amount}(\"\"); // solhint-disable-line avoid-low-level-calls\r\n        require(success, \"transferring Ether failed\");\r\n        emit LogTransferETH(address(this), recipient, amount);\r\n    }\r\n\r\n    function _transferETH(address payable recipient, uint256 amount) internal {\r\n        _transferETH(recipient, amount, \"TransferETH: transfer amount exceeds balance\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Multiplies two signed integers, reverts on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two signed integers, reverts on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two signed integers, reverts on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/math/UseSafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice ((a - 1) / b) + 1 = (a + b -1) / b\r\n * for example a.add(10**18 -1).div(10**18) = a.sub(1).div(10**18) + 1\r\n */\r\n\r\nlibrary SafeMathDivRoundUp {\r\n    using SafeMath for uint256;\r\n\r\n    function divRoundUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        require(b > 0, errorMessage);\r\n        return ((a - 1) / b) + 1;\r\n    }\r\n\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divRoundUp(a, b, \"SafeMathDivRoundUp: modulo by zero\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title UseSafeMath\r\n * @dev One can use SafeMath for not only uint256 but also uin64 or uint16,\r\n * and also can use SafeCast for uint256.\r\n * For example:\r\n *   uint64 a = 1;\r\n *   uint64 b = 2;\r\n *   a = a.add(b).toUint64() // `a` become 3 as uint64\r\n * In addition, one can use SignedSafeMath and SafeCast.toUint256(int256) for int256.\r\n * In the case of the operation to the uint64 value, one needs to cast the value into int256 in\r\n * advance to use `sub` as SignedSafeMath.sub not SafeMath.sub.\r\n * For example:\r\n *   int256 a = 1;\r\n *   uint64 b = 2;\r\n *   int256 c = 3;\r\n *   a = a.add(int256(b).sub(c)); // `a` becomes 0 as int256\r\n *   b = a.toUint256().toUint64(); // `b` becomes 0 as uint64\r\n */\r\nabstract contract UseSafeMath {\r\n    using SafeMath for uint256;\r\n    using SafeMathDivRoundUp for uint256;\r\n    using SafeMath for uint64;\r\n    using SafeMathDivRoundUp for uint64;\r\n    using SafeMath for uint16;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface BondTokenInterface is IERC20 {\r\n    event LogExpire(uint128 rateNumerator, uint128 rateDenominator, bool firstTime);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool success);\r\n\r\n    function expire(uint128 rateNumerator, uint128 rateDenominator)\r\n        external\r\n        returns (bool firstTime);\r\n\r\n    function simpleBurn(address account, uint256 amount) external returns (bool success);\r\n\r\n    function burn(uint256 amount) external returns (bool success);\r\n\r\n    function burnAll() external returns (uint256 amount);\r\n\r\n    function getRate() external view returns (uint128 rateNumerator, uint128 rateDenominator);\r\n}\r\n\r\n// File: contracts/oracle/LatestPriceOracleInterface.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns `true`if oracle is working.\r\n     */\r\n    function isWorking() external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the last updated price. Decimals is 8.\r\n     **/\r\n    function latestPrice() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of the last updated price.\r\n     */\r\n    function latestTimestamp() external returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/PriceOracleInterface.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the price oracle.\r\n */\r\ninterface PriceOracleInterface is LatestPriceOracleInterface {\r\n    /**\r\n     * @dev Returns the latest id. The id start from 1 and increments by 1.\r\n     */\r\n    function latestId() external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the historical price specified by `id`. Decimals is 8.\r\n     */\r\n    function getPrice(uint256 id) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the timestamp of historical price specified by `id`.\r\n     */\r\n    function getTimestamp(uint256 id) external returns (uint256);\r\n}\r\n\r\n// File: contracts/bondMaker/BondMakerInterface.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface BondMakerInterface {\r\n    event LogNewBond(\r\n        bytes32 indexed bondID,\r\n        address indexed bondTokenAddress,\r\n        uint256 indexed maturity,\r\n        bytes32 fnMapID\r\n    );\r\n\r\n    event LogNewBondGroup(\r\n        uint256 indexed bondGroupID,\r\n        uint256 indexed maturity,\r\n        uint64 indexed sbtStrikePrice,\r\n        bytes32[] bondIDs\r\n    );\r\n\r\n    event LogIssueNewBonds(uint256 indexed bondGroupID, address indexed issuer, uint256 amount);\r\n\r\n    event LogReverseBondGroupToCollateral(\r\n        uint256 indexed bondGroupID,\r\n        address indexed owner,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogExchangeEquivalentBonds(\r\n        address indexed owner,\r\n        uint256 indexed inputBondGroupID,\r\n        uint256 indexed outputBondGroupID,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogLiquidateBond(bytes32 indexed bondID, uint128 rateNumerator, uint128 rateDenominator);\r\n\r\n    function registerNewBond(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        returns (\r\n            bytes32 bondID,\r\n            address bondTokenAddress,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function registerNewBondGroup(bytes32[] calldata bondIDList, uint256 maturity)\r\n        external\r\n        returns (uint256 bondGroupID);\r\n\r\n    function reverseBondGroupToCollateral(uint256 bondGroupID, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    function exchangeEquivalentBonds(\r\n        uint256 inputBondGroupID,\r\n        uint256 outputBondGroupID,\r\n        uint256 amount,\r\n        bytes32[] calldata exceptionBonds\r\n    ) external returns (bool);\r\n\r\n    function liquidateBond(uint256 bondGroupID, uint256 oracleHintID)\r\n        external\r\n        returns (uint256 totalPayment);\r\n\r\n    function collateralAddress() external view returns (address);\r\n\r\n    function oracleAddress() external view returns (PriceOracleInterface);\r\n\r\n    function feeTaker() external view returns (address);\r\n\r\n    function decimalsOfBond() external view returns (uint8);\r\n\r\n    function decimalsOfOraclePrice() external view returns (uint8);\r\n\r\n    function maturityScale() external view returns (uint256);\r\n\r\n    function nextBondGroupID() external view returns (uint256);\r\n\r\n    function getBond(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (\r\n            address bondAddress,\r\n            uint256 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function getFnMap(bytes32 fnMapID) external view returns (bytes memory fnMap);\r\n\r\n    function getBondGroup(uint256 bondGroupID)\r\n        external\r\n        view\r\n        returns (bytes32[] memory bondIDs, uint256 maturity);\r\n\r\n    function generateFnMapID(bytes calldata fnMap) external view returns (bytes32 fnMapID);\r\n\r\n    function generateBondID(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        view\r\n        returns (bytes32 bondID);\r\n}\r\n\r\n// File: contracts/bondMaker/BondMakerCollateralizedErc20Interface.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface BondMakerCollateralizedErc20Interface is BondMakerInterface {\r\n    function issueNewBonds(uint256 bondGroupID) external returns (uint256 amount);\r\n}\r\n\r\n// File: contracts/util/Time.sol\r\n\r\n\r\n\r\nabstract contract Time {\r\n    function _getBlockTimestampSec() internal view returns (uint256 unixtimesec) {\r\n        unixtimesec = block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/bondToken/BondToken.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BondToken is Ownable, BondTokenInterface, ERC20 {\r\n    struct Frac128x128 {\r\n        uint128 numerator;\r\n        uint128 denominator;\r\n    }\r\n\r\n    Frac128x128 internal _rate;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public ERC20(name, symbol) {\r\n        _setupDecimals(decimals);\r\n    }\r\n\r\n    function mint(address account, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(!_isExpired(), \"this token contract has expired\");\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override(ERC20, IERC20)\r\n        returns (bool success)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override(ERC20, IERC20) returns (bool success) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            allowance(sender, msg.sender).sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Record the settlement price at maturity in the form of a fraction and let the bond\r\n     * token expire.\r\n     */\r\n    function expire(uint128 rateNumerator, uint128 rateDenominator)\r\n        public\r\n        override\r\n        onlyOwner\r\n        returns (bool isFirstTime)\r\n    {\r\n        isFirstTime = !_isExpired();\r\n        if (isFirstTime) {\r\n            _setRate(Frac128x128(rateNumerator, rateDenominator));\r\n        }\r\n\r\n        emit LogExpire(rateNumerator, rateDenominator, isFirstTime);\r\n    }\r\n\r\n    function simpleBurn(address from, uint256 amount) public override onlyOwner returns (bool) {\r\n        if (amount > balanceOf(from)) {\r\n            return false;\r\n        }\r\n\r\n        _burn(from, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public override returns (bool success) {\r\n        if (!_isExpired()) {\r\n            return false;\r\n        }\r\n\r\n        _burn(msg.sender, amount);\r\n\r\n        if (_rate.numerator != 0) {\r\n            uint8 decimalsOfCollateral = _getCollateralDecimals();\r\n            uint256 withdrawAmount = _applyDecimalGap(amount, decimals(), decimalsOfCollateral)\r\n                .mul(_rate.numerator)\r\n                .div(_rate.denominator);\r\n\r\n            _sendCollateralTo(msg.sender, withdrawAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function burnAll() public override returns (uint256 amount) {\r\n        amount = balanceOf(msg.sender);\r\n        bool success = burn(amount);\r\n        if (!success) {\r\n            amount = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev rateDenominator never be zero due to div() function, thus initial _rateDenominator is 0\r\n     * can be used for flag of non-expired;\r\n     */\r\n    function _isExpired() internal view returns (bool) {\r\n        return _rate.denominator != 0;\r\n    }\r\n\r\n    function getRate()\r\n        public\r\n        override\r\n        view\r\n        returns (uint128 rateNumerator, uint128 rateDenominator)\r\n    {\r\n        rateNumerator = _rate.numerator;\r\n        rateDenominator = _rate.denominator;\r\n    }\r\n\r\n    function _setRate(Frac128x128 memory rate) internal {\r\n        require(\r\n            rate.denominator != 0,\r\n            \"system error: the exchange rate must be non-negative number\"\r\n        );\r\n        _rate = rate;\r\n    }\r\n\r\n    /**\r\n     * @dev removes a decimal gap from rate.\r\n     */\r\n    function _applyDecimalGap(\r\n        uint256 baseAmount,\r\n        uint8 decimalsOfBase,\r\n        uint8 decimalsOfQuote\r\n    ) internal pure returns (uint256 quoteAmount) {\r\n        uint256 n;\r\n        uint256 d;\r\n\r\n        if (decimalsOfBase > decimalsOfQuote) {\r\n            d = decimalsOfBase - decimalsOfQuote;\r\n        } else if (decimalsOfBase < decimalsOfQuote) {\r\n            n = decimalsOfQuote - decimalsOfBase;\r\n        }\r\n\r\n        // The consequent multiplication would overflow under extreme and non-blocking circumstances.\r\n        require(n < 19 && d < 19, \"decimal gap needs to be lower than 19\");\r\n        quoteAmount = baseAmount.mul(10**n).div(10**d);\r\n    }\r\n\r\n    function _getCollateralDecimals() internal virtual view returns (uint8);\r\n\r\n    function _sendCollateralTo(address receiver, uint256 amount) internal virtual;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenCollateralizedErc20.sol\r\n\r\n\r\n\r\n\r\n\r\ncontract BondTokenCollateralizedErc20 is BondToken {\r\n    using SafeERC20 for ERC20;\r\n\r\n    ERC20 internal immutable COLLATERALIZED_TOKEN;\r\n\r\n    constructor(\r\n        ERC20 collateralizedTokenAddress,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public BondToken(name, symbol, decimals) {\r\n        COLLATERALIZED_TOKEN = collateralizedTokenAddress;\r\n    }\r\n\r\n    function _getCollateralDecimals() internal view override returns (uint8) {\r\n        return COLLATERALIZED_TOKEN.decimals();\r\n    }\r\n\r\n    function _sendCollateralTo(address receiver, uint256 amount) internal override {\r\n        COLLATERALIZED_TOKEN.safeTransfer(receiver, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenCollateralizedEth.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BondTokenCollateralizedEth is BondToken, TransferETH {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public BondToken(name, symbol, decimals) {}\r\n\r\n    function _getCollateralDecimals() internal override view returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _sendCollateralTo(address receiver, uint256 amount) internal override {\r\n        _transferETH(payable(receiver), amount);\r\n    }\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenFactory.sol\r\n\r\n\r\n\r\n\r\n\r\ncontract BondTokenFactory {\r\n    address private constant ETH = address(0);\r\n\r\n    function createBondToken(\r\n        address collateralizedTokenAddress,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals\r\n    ) external returns (address createdBondAddress) {\r\n        if (collateralizedTokenAddress == ETH) {\r\n            BondTokenCollateralizedEth bond = new BondTokenCollateralizedEth(\r\n                name,\r\n                symbol,\r\n                decimals\r\n            );\r\n            bond.transferOwnership(msg.sender);\r\n            return address(bond);\r\n        } else {\r\n            BondTokenCollateralizedErc20 bond = new BondTokenCollateralizedErc20(\r\n                ERC20(collateralizedTokenAddress),\r\n                name,\r\n                symbol,\r\n                decimals\r\n            );\r\n            bond.transferOwnership(msg.sender);\r\n            return address(bond);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/util/Polyline.sol\r\n\r\n\r\n\r\n\r\ncontract Polyline is UseSafeMath {\r\n    struct Point {\r\n        uint64 x; // Value of the x-axis of the x-y plane\r\n        uint64 y; // Value of the y-axis of the x-y plane\r\n    }\r\n\r\n    struct LineSegment {\r\n        Point left; // The left end of the line definition range\r\n        Point right; // The right end of the line definition range\r\n    }\r\n\r\n    /**\r\n     * @notice Return the value of y corresponding to x on the given line. line in the form of\r\n     * a rational number (numerator / denominator).\r\n     * If you treat a line as a line segment instead of a line, you should run\r\n     * includesDomain(line, x) to check whether x is included in the line's domain or not.\r\n     * @dev To guarantee accuracy, the bit length of the denominator must be greater than or equal\r\n     * to the bit length of x, and the bit length of the numerator must be greater than or equal\r\n     * to the sum of the bit lengths of x and y.\r\n     */\r\n    function _mapXtoY(LineSegment memory line, uint64 x)\r\n        internal\r\n        pure\r\n        returns (uint128 numerator, uint64 denominator)\r\n    {\r\n        int256 x1 = int256(line.left.x);\r\n        int256 y1 = int256(line.left.y);\r\n        int256 x2 = int256(line.right.x);\r\n        int256 y2 = int256(line.right.y);\r\n\r\n        require(x2 > x1, \"must be left.x < right.x\");\r\n\r\n        denominator = uint64(x2 - x1);\r\n\r\n        // Calculate y = ((x2 - x) * y1 + (x - x1) * y2) / (x2 - x1)\r\n        // in the form of a fraction (numerator / denominator).\r\n        int256 n = (x - x1) * y2 + (x2 - x) * y1;\r\n\r\n        require(n >= 0, \"underflow n\");\r\n        require(n < 2**128, \"system error: overflow n\");\r\n        numerator = uint128(n);\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a line segment is a valid format.\r\n     */\r\n    function assertLineSegment(LineSegment memory segment) internal pure {\r\n        uint64 x1 = segment.left.x;\r\n        uint64 x2 = segment.right.x;\r\n        require(x1 < x2, \"must be left.x < right.x\");\r\n    }\r\n\r\n    /**\r\n     * @notice Checking that a polyline is a valid format.\r\n     */\r\n    function assertPolyline(LineSegment[] memory polyline) internal pure {\r\n        uint256 numOfSegment = polyline.length;\r\n        require(numOfSegment != 0, \"polyline must not be empty array\");\r\n\r\n        LineSegment memory leftSegment = polyline[0]; // mutable\r\n        int256 gradientNumerator = int256(leftSegment.right.y) - int256(leftSegment.left.y); // mutable\r\n        int256 gradientDenominator = int256(leftSegment.right.x) - int256(leftSegment.left.x); // mutable\r\n\r\n        // The beginning of the first line segment's domain is 0.\r\n        require(\r\n            leftSegment.left.x == uint64(0),\r\n            \"the x coordinate of left end of the first segment must be 0\"\r\n        );\r\n        // The value of y when x is 0 is 0.\r\n        require(\r\n            leftSegment.left.y == uint64(0),\r\n            \"the y coordinate of left end of the first segment must be 0\"\r\n        );\r\n\r\n        // Making sure that the first line segment is a correct format.\r\n        assertLineSegment(leftSegment);\r\n\r\n        // The end of the domain of a segment and the beginning of the domain of the adjacent\r\n        // segment must coincide.\r\n        LineSegment memory rightSegment; // mutable\r\n        for (uint256 i = 1; i < numOfSegment; i++) {\r\n            rightSegment = polyline[i];\r\n\r\n            // Make sure that the i-th line segment is a correct format.\r\n            assertLineSegment(rightSegment);\r\n\r\n            // Checking that the x-coordinates are same.\r\n            require(\r\n                leftSegment.right.x == rightSegment.left.x,\r\n                \"given polyline has an undefined domain.\"\r\n            );\r\n\r\n            // Checking that the y-coordinates are same.\r\n            require(\r\n                leftSegment.right.y == rightSegment.left.y,\r\n                \"given polyline is not a continuous function\"\r\n            );\r\n\r\n            int256 nextGradientNumerator = int256(rightSegment.right.y) -\r\n                int256(rightSegment.left.y);\r\n            int256 nextGradientDenominator = int256(rightSegment.right.x) -\r\n                int256(rightSegment.left.x);\r\n            require(\r\n                nextGradientNumerator * gradientDenominator !=\r\n                    nextGradientDenominator * gradientNumerator,\r\n                \"the sequential segments must not have the same gradient\"\r\n            );\r\n\r\n            leftSegment = rightSegment;\r\n            gradientNumerator = nextGradientNumerator;\r\n            gradientDenominator = nextGradientDenominator;\r\n        }\r\n\r\n        // rightSegment is lastSegment\r\n\r\n        // About the last line segment.\r\n        require(\r\n            gradientNumerator >= 0 && gradientNumerator <= gradientDenominator,\r\n            \"the gradient of last line segment must be non-negative, and equal to or less than 1\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice zip a LineSegment structure to uint256\r\n     * @return zip uint256( 0 ... 0 | x1 | y1 | x2 | y2 )\r\n     */\r\n    function zipLineSegment(LineSegment memory segment) internal pure returns (uint256 zip) {\r\n        uint256 x1U256 = uint256(segment.left.x) << (64 + 64 + 64); // uint64\r\n        uint256 y1U256 = uint256(segment.left.y) << (64 + 64); // uint64\r\n        uint256 x2U256 = uint256(segment.right.x) << 64; // uint64\r\n        uint256 y2U256 = uint256(segment.right.y); // uint64\r\n        zip = x1U256 | y1U256 | x2U256 | y2U256;\r\n    }\r\n\r\n    /**\r\n     * @notice unzip uint256 to a LineSegment structure\r\n     */\r\n    function unzipLineSegment(uint256 zip) internal pure returns (LineSegment memory) {\r\n        uint64 x1 = uint64(zip >> (64 + 64 + 64));\r\n        uint64 y1 = uint64(zip >> (64 + 64));\r\n        uint64 x2 = uint64(zip >> 64);\r\n        uint64 y2 = uint64(zip);\r\n        return LineSegment({left: Point({x: x1, y: y1}), right: Point({x: x2, y: y2})});\r\n    }\r\n\r\n    /**\r\n     * @notice unzip the fnMap to uint256[].\r\n     */\r\n    function decodePolyline(bytes memory fnMap) internal pure returns (uint256[] memory) {\r\n        return abi.decode(fnMap, (uint256[]));\r\n    }\r\n}\r\n\r\n// File: contracts/bondMaker/BondMaker.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BondMaker is UseSafeMath, BondMakerInterface, Time, Polyline {\r\n    uint8 internal immutable DECIMALS_OF_BOND;\r\n    uint8 internal immutable DECIMALS_OF_ORACLE_PRICE;\r\n    address internal immutable FEE_TAKER;\r\n    uint256 internal immutable MATURITY_SCALE;\r\n    PriceOracleInterface internal immutable _oracleContract;\r\n\r\n    uint256 internal _nextBondGroupID = 1;\r\n\r\n    /**\r\n     * @dev The contents in this internal storage variable can be seen by getBond function.\r\n     */\r\n    struct BondInfo {\r\n        uint256 maturity;\r\n        BondTokenInterface contractInstance;\r\n        uint64 strikePrice;\r\n        bytes32 fnMapID;\r\n    }\r\n    mapping(bytes32 => BondInfo) internal _bonds;\r\n\r\n    /**\r\n     * @notice mapping fnMapID to polyline\r\n     * @dev The contents in this internal storage variable can be seen by getFnMap function.\r\n     */\r\n    mapping(bytes32 => LineSegment[]) internal _registeredFnMap;\r\n\r\n    /**\r\n     * @dev The contents in this internal storage variable can be seen by getBondGroup function.\r\n     */\r\n    struct BondGroup {\r\n        bytes32[] bondIDs;\r\n        uint256 maturity;\r\n    }\r\n    mapping(uint256 => BondGroup) internal _bondGroupList;\r\n\r\n    constructor(\r\n        PriceOracleInterface oracleAddress,\r\n        address feeTaker,\r\n        uint256 maturityScale,\r\n        uint8 decimalsOfBond,\r\n        uint8 decimalsOfOraclePrice\r\n    ) public {\r\n        require(address(oracleAddress) != address(0), \"oracleAddress should be non-zero address\");\r\n        _oracleContract = oracleAddress;\r\n        require(decimalsOfBond < 19, \"the decimals of bond must be less than 19\");\r\n        DECIMALS_OF_BOND = decimalsOfBond;\r\n        require(decimalsOfOraclePrice < 19, \"the decimals of oracle price must be less than 19\");\r\n        DECIMALS_OF_ORACLE_PRICE = decimalsOfOraclePrice;\r\n        require(feeTaker != address(0), \"the fee taker must be non-zero address\");\r\n        FEE_TAKER = feeTaker;\r\n        require(maturityScale != 0, \"MATURITY_SCALE must be positive\");\r\n        MATURITY_SCALE = maturityScale;\r\n    }\r\n\r\n    /**\r\n     * @notice Create bond token contract.\r\n     * The name of this bond token is its bond ID.\r\n     * @dev To convert bytes32 to string, encode its bond ID at first, then convert to string.\r\n     * The symbol of any bond token with bond ID is either SBT or LBT;\r\n     * As SBT is a special case of bond token, any bond token which does not match to the form of\r\n     * SBT is defined as LBT.\r\n     */\r\n    function registerNewBond(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        virtual\r\n        override\r\n        returns (\r\n            bytes32,\r\n            address,\r\n            bytes32\r\n        )\r\n    {\r\n        _assertBeforeMaturity(maturity);\r\n        require(maturity < _getBlockTimestampSec() + 365 days, \"the maturity is too far\");\r\n        require(\r\n            maturity % MATURITY_SCALE == 0,\r\n            \"the maturity must be the multiple of MATURITY_SCALE\"\r\n        );\r\n\r\n        bytes32 bondID = generateBondID(maturity, fnMap);\r\n\r\n        // Check if the same form of bond is already registered.\r\n        // Cannot detect if the bond is described in a different polyline while two are\r\n        // mathematically equivalent.\r\n        require(\r\n            address(_bonds[bondID].contractInstance) == address(0),\r\n            \"the bond type has been already registered\"\r\n        );\r\n\r\n        // Register function mapping if necessary.\r\n        bytes32 fnMapID = generateFnMapID(fnMap);\r\n        uint64 sbtStrikePrice;\r\n        if (_registeredFnMap[fnMapID].length == 0) {\r\n            uint256[] memory polyline = decodePolyline(fnMap);\r\n            for (uint256 i = 0; i < polyline.length; i++) {\r\n                _registeredFnMap[fnMapID].push(unzipLineSegment(polyline[i]));\r\n            }\r\n\r\n            LineSegment[] memory segments = _registeredFnMap[fnMapID];\r\n            assertPolyline(segments);\r\n            require(!_isBondWorthless(segments), \"the bond is 0-value at any price\");\r\n            sbtStrikePrice = _getSbtStrikePrice(segments);\r\n        } else {\r\n            LineSegment[] memory segments = _registeredFnMap[fnMapID];\r\n            sbtStrikePrice = _getSbtStrikePrice(segments);\r\n        }\r\n\r\n        BondTokenInterface bondTokenContract = _createNewBondToken(maturity, fnMap);\r\n\r\n        // Set bond info to storage.\r\n        _bonds[bondID] = BondInfo({\r\n            maturity: maturity,\r\n            contractInstance: bondTokenContract,\r\n            strikePrice: sbtStrikePrice,\r\n            fnMapID: fnMapID\r\n        });\r\n\r\n        emit LogNewBond(bondID, address(bondTokenContract), maturity, fnMapID);\r\n\r\n        return (bondID, address(bondTokenContract), fnMapID);\r\n    }\r\n\r\n    function _assertBondGroup(bytes32[] memory bondIDs, uint256 maturity) internal view {\r\n        require(bondIDs.length >= 2, \"the bond group should consist of 2 or more bonds\");\r\n\r\n        /**\r\n         * @dev Count the number of the end points on x axis. In the case of a simple SBT/LBT split,\r\n         * 3 for SBT plus 3 for LBT equals to 6.\r\n         * In the case of SBT with the strike price 100, (x,y) = (0,0), (100,100), (200,100) defines\r\n         * the form of SBT on the field.\r\n         * In the case of LBT with the strike price 100, (x,y) = (0,0), (100,0), (200,100) defines\r\n         * the form of LBT on the field.\r\n         * Right hand side area of the last grid point is expanded on the last line to the infinity.\r\n         * @param nextBreakPointIndex returns the number of unique points on x axis.\r\n         * In the case of SBT and LBT with the strike price 100, x = 0,100,200 are the unique points\r\n         * and the number is 3.\r\n         */\r\n        uint256 numOfBreakPoints = 0;\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            BondInfo storage bond = _bonds[bondIDs[i]];\r\n            require(bond.maturity == maturity, \"the maturity of the bonds must be same\");\r\n            LineSegment[] storage polyline = _registeredFnMap[bond.fnMapID];\r\n            numOfBreakPoints = numOfBreakPoints.add(polyline.length);\r\n        }\r\n\r\n        uint256 nextBreakPointIndex = 0;\r\n        uint64[] memory rateBreakPoints = new uint64[](numOfBreakPoints);\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            BondInfo storage bond = _bonds[bondIDs[i]];\r\n            LineSegment[] storage segments = _registeredFnMap[bond.fnMapID];\r\n            for (uint256 j = 0; j < segments.length; j++) {\r\n                uint64 breakPoint = segments[j].right.x;\r\n                bool ok = false;\r\n\r\n                for (uint256 k = 0; k < nextBreakPointIndex; k++) {\r\n                    if (rateBreakPoints[k] == breakPoint) {\r\n                        ok = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (ok) {\r\n                    continue;\r\n                }\r\n\r\n                rateBreakPoints[nextBreakPointIndex] = breakPoint;\r\n                nextBreakPointIndex++;\r\n            }\r\n        }\r\n\r\n        for (uint256 k = 0; k < rateBreakPoints.length; k++) {\r\n            uint64 rate = rateBreakPoints[k];\r\n            uint256 totalBondPriceN = 0;\r\n            uint256 totalBondPriceD = 1;\r\n            for (uint256 i = 0; i < bondIDs.length; i++) {\r\n                BondInfo storage bond = _bonds[bondIDs[i]];\r\n                LineSegment[] storage segments = _registeredFnMap[bond.fnMapID];\r\n                (uint256 segmentIndex, bool ok) = _correspondSegment(segments, rate);\r\n\r\n                require(ok, \"invalid domain expression\");\r\n\r\n                (uint128 n, uint64 d) = _mapXtoY(segments[segmentIndex], rate);\r\n\r\n                if (n != 0) {\r\n                    // a/b + c/d = (ad+bc)/bd\r\n                    // totalBondPrice += (n / d);\r\n                    // N = D*n + N*d, D = D*d\r\n                    totalBondPriceN = totalBondPriceD.mul(n).add(totalBondPriceN.mul(d));\r\n                    totalBondPriceD = totalBondPriceD.mul(d);\r\n                }\r\n            }\r\n            /**\r\n             * @dev Ensure that totalBondPrice (= totalBondPriceN / totalBondPriceD) is the same\r\n             * with rate. Because we need 1 Ether to mint a unit of each bond token respectively,\r\n             * the sum of cashflow (USD) per a unit of bond token is the same as USD/ETH\r\n             * rate at maturity.\r\n             */\r\n            require(\r\n                totalBondPriceN == totalBondPriceD.mul(rate),\r\n                \"the total price at any rateBreakPoints should be the same value as the rate\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Collect bondIDs that regenerate the collateral, and group them as a bond group.\r\n     * Any bond is described as a set of linear functions(i.e. polyline),\r\n     * so we can easily check if the set of bondIDs are well-formed by looking at all the end\r\n     * points of the lines.\r\n     */\r\n    function registerNewBondGroup(bytes32[] calldata bondIDs, uint256 maturity)\r\n        external\r\n        virtual\r\n        override\r\n        returns (uint256 bondGroupID)\r\n    {\r\n        _assertBondGroup(bondIDs, maturity);\r\n\r\n        (, , uint64 sbtStrikePrice, ) = getBond(bondIDs[0]);\r\n        for (uint256 i = 1; i < bondIDs.length; i++) {\r\n            (, , uint64 strikePrice, ) = getBond(bondIDs[i]);\r\n            require(strikePrice == 0, \"except the first bond must not be pure SBT\");\r\n        }\r\n\r\n        // Get and increment next bond group ID\r\n        bondGroupID = _nextBondGroupID;\r\n        _nextBondGroupID = _nextBondGroupID.add(1);\r\n\r\n        _bondGroupList[bondGroupID] = BondGroup(bondIDs, maturity);\r\n\r\n        emit LogNewBondGroup(bondGroupID, maturity, sbtStrikePrice, bondIDs);\r\n\r\n        return bondGroupID;\r\n    }\r\n\r\n    /**\r\n     * @dev A user needs to issue a bond via BondGroup in order to guarantee that the total value\r\n     * of bonds in the bond group equals to the token allowance except for about 0.2% fee (accurately 2/1002).\r\n     * The fee send to Lien token contract when liquidateBond() or reverseBondGroupToCollateral().\r\n     */\r\n    function _issueNewBonds(uint256 bondGroupID, uint256 collateralAmountWithFee)\r\n        internal\r\n        returns (uint256 bondAmount)\r\n    {\r\n        (bytes32[] memory bondIDs, uint256 maturity) = getBondGroup(bondGroupID);\r\n        _assertNonEmptyBondGroup(bondIDs);\r\n        _assertBeforeMaturity(maturity);\r\n\r\n        uint256 fee = collateralAmountWithFee.mul(2).divRoundUp(1002);\r\n\r\n        uint8 decimalsOfCollateral = _getCollateralDecimals();\r\n        bondAmount = _applyDecimalGap(\r\n            collateralAmountWithFee.sub(fee),\r\n            decimalsOfCollateral,\r\n            DECIMALS_OF_BOND\r\n        );\r\n        require(bondAmount != 0, \"the minting amount must be non-zero\");\r\n\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            _mintBond(bondIDs[i], msg.sender, bondAmount);\r\n        }\r\n\r\n        emit LogIssueNewBonds(bondGroupID, msg.sender, bondAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice redeems collateral from the total set of bonds in the bondGroupID before maturity date.\r\n     * @param bondGroupID is the bond group ID.\r\n     * @param bondAmount is the redeemed bond amount (decimal: 8).\r\n     */\r\n    function reverseBondGroupToCollateral(uint256 bondGroupID, uint256 bondAmount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(bondAmount != 0, \"the bond amount must be non-zero\");\r\n\r\n        (bytes32[] memory bondIDs, uint256 maturity) = getBondGroup(bondGroupID);\r\n        _assertNonEmptyBondGroup(bondIDs);\r\n        _assertBeforeMaturity(maturity);\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            _burnBond(bondIDs[i], msg.sender, bondAmount);\r\n        }\r\n\r\n        uint8 decimalsOfCollateral = _getCollateralDecimals();\r\n        uint256 collateralAmount = _applyDecimalGap(\r\n            bondAmount,\r\n            DECIMALS_OF_BOND,\r\n            decimalsOfCollateral\r\n        );\r\n\r\n        uint256 fee = collateralAmount.mul(2).div(1000); // collateral:fee = 1000:2\r\n        _sendCollateralTo(payable(FEE_TAKER), fee);\r\n        _sendCollateralTo(msg.sender, collateralAmount);\r\n\r\n        emit LogReverseBondGroupToCollateral(bondGroupID, msg.sender, collateralAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Burns set of LBTs and mints equivalent set of LBTs that are not in the exception list.\r\n     * @param inputBondGroupID is the BondGroupID of bonds which you want to burn.\r\n     * @param outputBondGroupID is the BondGroupID of bonds which you want to mint.\r\n     * @param exceptionBonds is the list of bondIDs that should be excluded in burn/mint process.\r\n     */\r\n    function exchangeEquivalentBonds(\r\n        uint256 inputBondGroupID,\r\n        uint256 outputBondGroupID,\r\n        uint256 amount,\r\n        bytes32[] calldata exceptionBonds\r\n    ) external virtual override returns (bool) {\r\n        (bytes32[] memory inputIDs, uint256 inputMaturity) = getBondGroup(inputBondGroupID);\r\n        _assertNonEmptyBondGroup(inputIDs);\r\n        (bytes32[] memory outputIDs, uint256 outputMaturity) = getBondGroup(outputBondGroupID);\r\n        _assertNonEmptyBondGroup(outputIDs);\r\n        require(inputMaturity == outputMaturity, \"cannot exchange bonds with different maturities\");\r\n        _assertBeforeMaturity(inputMaturity);\r\n\r\n        bool flag;\r\n        uint256 exceptionCount;\r\n        for (uint256 i = 0; i < inputIDs.length; i++) {\r\n            // this flag control checks whether the bond is in the scope of burn/mint\r\n            flag = true;\r\n            for (uint256 j = 0; j < exceptionBonds.length; j++) {\r\n                if (exceptionBonds[j] == inputIDs[i]) {\r\n                    flag = false;\r\n                    // this count checks if all the bondIDs in exceptionBonds are included both in inputBondGroupID and outputBondGroupID\r\n                    exceptionCount = exceptionCount.add(1);\r\n                }\r\n            }\r\n            if (flag) {\r\n                _burnBond(inputIDs[i], msg.sender, amount);\r\n            }\r\n        }\r\n\r\n        require(\r\n            exceptionBonds.length == exceptionCount,\r\n            \"All the exceptionBonds need to be included in input\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < outputIDs.length; i++) {\r\n            flag = true;\r\n            for (uint256 j = 0; j < exceptionBonds.length; j++) {\r\n                if (exceptionBonds[j] == outputIDs[i]) {\r\n                    flag = false;\r\n                    exceptionCount = exceptionCount.sub(1);\r\n                }\r\n            }\r\n            if (flag) {\r\n                _mintBond(outputIDs[i], msg.sender, amount);\r\n            }\r\n        }\r\n\r\n        require(\r\n            exceptionCount == 0,\r\n            \"All the exceptionBonds need to be included both in input and output\"\r\n        );\r\n\r\n        emit LogExchangeEquivalentBonds(msg.sender, inputBondGroupID, outputBondGroupID, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice This function distributes the collateral to the bond token holders\r\n     * after maturity date based on the oracle price.\r\n     * @param bondGroupID is the target bond group ID.\r\n     * @param oracleHintID is manually set to be smaller number than the oracle latestId\r\n     * when the caller wants to save gas.\r\n     */\r\n    function liquidateBond(uint256 bondGroupID, uint256 oracleHintID)\r\n        external\r\n        virtual\r\n        override\r\n        returns (uint256 totalPayment)\r\n    {\r\n        (bytes32[] memory bondIDs, uint256 maturity) = getBondGroup(bondGroupID);\r\n        _assertNonEmptyBondGroup(bondIDs);\r\n        require(_getBlockTimestampSec() >= maturity, \"the bond has not expired yet\");\r\n\r\n        uint256 latestID = _oracleContract.latestId();\r\n        require(latestID != 0, \"system error: the ID of oracle data should not be zero\");\r\n\r\n        uint256 price = _getPriceOn(\r\n            maturity,\r\n            (oracleHintID != 0 && oracleHintID <= latestID) ? oracleHintID : latestID\r\n        );\r\n        require(price != 0, \"price should be non-zero value\");\r\n        require(price < 2**64, \"price should be less than 2^64\");\r\n\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            bytes32 bondID = bondIDs[i];\r\n            uint256 payment = _sendCollateralToBondTokenContract(bondID, uint64(price));\r\n            totalPayment = totalPayment.add(payment);\r\n        }\r\n\r\n        if (totalPayment != 0) {\r\n            uint256 fee = totalPayment.mul(2).div(1000); // collateral:fee = 1000:2\r\n            _sendCollateralTo(payable(FEE_TAKER), fee);\r\n        }\r\n    }\r\n\r\n    function collateralAddress() external view override returns (address) {\r\n        return _collateralAddress();\r\n    }\r\n\r\n    function oracleAddress() external view override returns (PriceOracleInterface) {\r\n        return _oracleContract;\r\n    }\r\n\r\n    function feeTaker() external view override returns (address) {\r\n        return FEE_TAKER;\r\n    }\r\n\r\n    function decimalsOfBond() external view override returns (uint8) {\r\n        return DECIMALS_OF_BOND;\r\n    }\r\n\r\n    function decimalsOfOraclePrice() external view override returns (uint8) {\r\n        return DECIMALS_OF_ORACLE_PRICE;\r\n    }\r\n\r\n    function maturityScale() external view override returns (uint256) {\r\n        return MATURITY_SCALE;\r\n    }\r\n\r\n    function nextBondGroupID() external view override returns (uint256) {\r\n        return _nextBondGroupID;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns multiple information for the bondID.\r\n     * @dev The decimals of strike price is the same as that of oracle price.\r\n     */\r\n    function getBond(bytes32 bondID)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            address bondTokenAddress,\r\n            uint256 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        )\r\n    {\r\n        BondInfo memory bondInfo = _bonds[bondID];\r\n        bondTokenAddress = address(bondInfo.contractInstance);\r\n        maturity = bondInfo.maturity;\r\n        solidStrikePrice = bondInfo.strikePrice;\r\n        fnMapID = bondInfo.fnMapID;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns polyline for the fnMapID.\r\n     */\r\n    function getFnMap(bytes32 fnMapID) public view override returns (bytes memory fnMap) {\r\n        LineSegment[] storage segments = _registeredFnMap[fnMapID];\r\n        uint256[] memory polyline = new uint256[](segments.length);\r\n        for (uint256 i = 0; i < segments.length; i++) {\r\n            polyline[i] = zipLineSegment(segments[i]);\r\n        }\r\n        return abi.encode(polyline);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the bondIDs and their maturity for the bondGroupID.\r\n     */\r\n    function getBondGroup(uint256 bondGroupID)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes32[] memory bondIDs, uint256 maturity)\r\n    {\r\n        require(bondGroupID < _nextBondGroupID, \"the bond group does not exist\");\r\n        BondGroup memory bondGroup = _bondGroupList[bondGroupID];\r\n        bondIDs = bondGroup.bondIDs;\r\n        maturity = bondGroup.maturity;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns keccak256 for the fnMap.\r\n     */\r\n    function generateFnMapID(bytes memory fnMap) public view override returns (bytes32 fnMapID) {\r\n        return keccak256(fnMap);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a bond ID determined by this contract address, maturity and fnMap.\r\n     */\r\n    function generateBondID(uint256 maturity, bytes memory fnMap)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes32 bondID)\r\n    {\r\n        return keccak256(abi.encodePacked(address(this), maturity, fnMap));\r\n    }\r\n\r\n    function _mintBond(\r\n        bytes32 bondID,\r\n        address account,\r\n        uint256 amount\r\n    ) internal {\r\n        BondTokenInterface bondTokenContract = _bonds[bondID].contractInstance;\r\n        _assertRegisteredBond(bondTokenContract);\r\n        require(bondTokenContract.mint(account, amount), \"failed to mint bond token\");\r\n    }\r\n\r\n    function _burnBond(\r\n        bytes32 bondID,\r\n        address account,\r\n        uint256 amount\r\n    ) internal {\r\n        BondTokenInterface bondTokenContract = _bonds[bondID].contractInstance;\r\n        _assertRegisteredBond(bondTokenContract);\r\n        require(bondTokenContract.simpleBurn(account, amount), \"failed to burn bond token\");\r\n    }\r\n\r\n    function _sendCollateralToBondTokenContract(bytes32 bondID, uint64 price)\r\n        internal\r\n        returns (uint256 collateralAmount)\r\n    {\r\n        BondTokenInterface bondTokenContract = _bonds[bondID].contractInstance;\r\n        _assertRegisteredBond(bondTokenContract);\r\n\r\n        LineSegment[] storage segments = _registeredFnMap[_bonds[bondID].fnMapID];\r\n\r\n        (uint256 segmentIndex, bool ok) = _correspondSegment(segments, price);\r\n        assert(ok); // not found a segment whose price range include current price\r\n\r\n        (uint128 n, uint64 _d) = _mapXtoY(segments[segmentIndex], price); // x = price, y = n / _d\r\n\r\n        // uint64(-1) *  uint64(-1) < uint128(-1)\r\n        uint128 d = uint128(_d) * uint128(price);\r\n\r\n        uint256 totalSupply = bondTokenContract.totalSupply();\r\n        bool expiredFlag = bondTokenContract.expire(n, d); // rateE0 = n / d = f(price) / price\r\n\r\n        if (expiredFlag) {\r\n            uint8 decimalsOfCollateral = _getCollateralDecimals();\r\n            collateralAmount = _applyDecimalGap(totalSupply, DECIMALS_OF_BOND, decimalsOfCollateral)\r\n                .mul(n)\r\n                .div(d);\r\n            _sendCollateralTo(address(bondTokenContract), collateralAmount);\r\n\r\n            emit LogLiquidateBond(bondID, n, d);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the price of the oracle data with a minimum timestamp that does more than input value\r\n     * when you know the ID you are looking for.\r\n     * @param timestamp is the timestamp that you want to get price.\r\n     * @param hintID is the ID of the oracle data you are looking for.\r\n     * @return priceE8 (10^-8 USD)\r\n     */\r\n    function _getPriceOn(uint256 timestamp, uint256 hintID) internal returns (uint256 priceE8) {\r\n        require(\r\n            _oracleContract.getTimestamp(hintID) > timestamp,\r\n            \"there is no price data after maturity\"\r\n        );\r\n\r\n        uint256 id = hintID - 1;\r\n        while (id != 0) {\r\n            if (_oracleContract.getTimestamp(id) <= timestamp) {\r\n                break;\r\n            }\r\n            id--;\r\n        }\r\n\r\n        return _oracleContract.getPrice(id + 1);\r\n    }\r\n\r\n    /**\r\n     * @dev removes a decimal gap from rate.\r\n     */\r\n    function _applyDecimalGap(\r\n        uint256 baseAmount,\r\n        uint8 decimalsOfBase,\r\n        uint8 decimalsOfQuote\r\n    ) internal pure returns (uint256 quoteAmount) {\r\n        uint256 n;\r\n        uint256 d;\r\n\r\n        if (decimalsOfBase > decimalsOfQuote) {\r\n            d = decimalsOfBase - decimalsOfQuote;\r\n        } else if (decimalsOfBase < decimalsOfQuote) {\r\n            n = decimalsOfQuote - decimalsOfBase;\r\n        }\r\n\r\n        // The consequent multiplication would overflow under extreme and non-blocking circumstances.\r\n        require(n < 19 && d < 19, \"decimal gap needs to be lower than 19\");\r\n        quoteAmount = baseAmount.mul(10**n).div(10**d);\r\n    }\r\n\r\n    function _assertRegisteredBond(BondTokenInterface bondTokenContract) internal pure {\r\n        require(address(bondTokenContract) != address(0), \"the bond is not registered\");\r\n    }\r\n\r\n    function _assertNonEmptyBondGroup(bytes32[] memory bondIDs) internal pure {\r\n        require(bondIDs.length != 0, \"the list of bond ID must be non-empty\");\r\n    }\r\n\r\n    function _assertBeforeMaturity(uint256 maturity) internal view {\r\n        require(_getBlockTimestampSec() < maturity, \"the maturity has already expired\");\r\n    }\r\n\r\n    function _isBondWorthless(LineSegment[] memory polyline) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < polyline.length; i++) {\r\n            LineSegment memory segment = polyline[i];\r\n            if (segment.right.y != 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the strike price only when the form of polyline matches to the definition of SBT.\r\n     * Check if the form is SBT even when the polyline is in a verbose style.\r\n     */\r\n    function _getSbtStrikePrice(LineSegment[] memory polyline) internal pure returns (uint64) {\r\n        if (polyline.length != 2) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 strikePrice = polyline[0].right.x;\r\n\r\n        if (strikePrice == 0) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < polyline.length; i++) {\r\n            LineSegment memory segment = polyline[i];\r\n            if (segment.right.y != strikePrice) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return uint64(strikePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Only when the form of polyline matches to the definition of LBT, this function returns\r\n     * the minimum collateral price (USD) that LBT is not worthless.\r\n     * Check if the form is LBT even when the polyline is in a verbose style.\r\n     */\r\n    function _getLbtStrikePrice(LineSegment[] memory polyline) internal pure returns (uint64) {\r\n        if (polyline.length != 2) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 strikePrice = polyline[0].right.x;\r\n\r\n        if (strikePrice == 0) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < polyline.length; i++) {\r\n            LineSegment memory segment = polyline[i];\r\n            if (segment.right.y.add(strikePrice) != segment.right.x) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return uint64(strikePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev In order to calculate y axis value for the corresponding x axis value, we need to find\r\n     * the place of domain of x value on the polyline.\r\n     * As the polyline is already checked to be correctly formed, we can simply look from the right\r\n     * hand side of the polyline.\r\n     */\r\n    function _correspondSegment(LineSegment[] memory segments, uint64 x)\r\n        internal\r\n        pure\r\n        returns (uint256 i, bool ok)\r\n    {\r\n        i = segments.length;\r\n        while (i > 0) {\r\n            i--;\r\n            if (segments[i].left.x <= x) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // function issueNewBonds(uint256 bondGroupID, uint256 amount) external returns (uint256 bondAmount);\r\n\r\n    function _createNewBondToken(uint256 maturity, bytes memory fnMap)\r\n        internal\r\n        virtual\r\n        returns (BondTokenInterface);\r\n\r\n    function _collateralAddress() internal view virtual returns (address);\r\n\r\n    function _getCollateralDecimals() internal view virtual returns (uint8);\r\n\r\n    function _sendCollateralTo(address receiver, uint256 amount) internal virtual;\r\n}\r\n\r\n// File: contracts/bondTokenName/BondTokenNameInterface.sol\r\n\r\n\r\n\r\n/**\r\n * @title bond token name contract interface\r\n */\r\ninterface BondTokenNameInterface {\r\n    function genBondTokenName(\r\n        string calldata shortNamePrefix,\r\n        string calldata longNamePrefix,\r\n        uint256 maturity,\r\n        uint256 solidStrikePriceE4\r\n    ) external pure returns (string memory shortName, string memory longName);\r\n\r\n    function getBondTokenName(\r\n        uint256 maturity,\r\n        uint256 solidStrikePriceE4,\r\n        uint256 rateLBTWorthlessE4\r\n    ) external pure returns (string memory shortName, string memory longName);\r\n}\r\n\r\n// File: contracts/bondMaker/BondMakerCollateralizedEth.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BondMakerCollateralizedEth is BondMaker, TransferETH {\r\n    address private constant ETH = address(0);\r\n\r\n    BondTokenNameInterface internal immutable BOND_TOKEN_NAMER;\r\n    BondTokenFactory internal immutable BOND_TOKEN_FACTORY;\r\n\r\n    constructor(\r\n        PriceOracleInterface oracleAddress,\r\n        address feeTaker,\r\n        BondTokenNameInterface bondTokenNamerAddress,\r\n        BondTokenFactory bondTokenFactoryAddress,\r\n        uint256 maturityScale\r\n    ) public BondMaker(oracleAddress, feeTaker, maturityScale, 8, 8) {\r\n        require(\r\n            address(bondTokenNamerAddress) != address(0),\r\n            \"bondTokenNamerAddress should be non-zero address\"\r\n        );\r\n        BOND_TOKEN_NAMER = bondTokenNamerAddress;\r\n        require(\r\n            address(bondTokenFactoryAddress) != address(0),\r\n            \"bondTokenFactoryAddress should be non-zero address\"\r\n        );\r\n        BOND_TOKEN_FACTORY = bondTokenFactoryAddress;\r\n    }\r\n\r\n    function issueNewBonds(uint256 bondGroupID) public payable returns (uint256 bondAmount) {\r\n        return _issueNewBonds(bondGroupID, msg.value);\r\n    }\r\n\r\n    function _createNewBondToken(uint256 maturity, bytes memory fnMap)\r\n        internal\r\n        override\r\n        returns (BondTokenInterface)\r\n    {\r\n        (string memory symbol, string memory name) = _getBondTokenName(maturity, fnMap);\r\n        address bondAddress = BOND_TOKEN_FACTORY.createBondToken(\r\n            ETH,\r\n            name,\r\n            symbol,\r\n            DECIMALS_OF_BOND\r\n        );\r\n        return BondTokenInterface(bondAddress);\r\n    }\r\n\r\n    function _getBondTokenName(uint256 maturity, bytes memory fnMap)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (string memory symbol, string memory name)\r\n    {\r\n        bytes32 fnMapID = generateFnMapID(fnMap);\r\n        LineSegment[] memory segments = _registeredFnMap[fnMapID];\r\n        uint64 sbtStrikePrice = _getSbtStrikePrice(segments);\r\n        uint64 lbtStrikePrice = _getLbtStrikePrice(segments);\r\n        uint64 sbtStrikePriceE0 = sbtStrikePrice / (uint64(10)**DECIMALS_OF_ORACLE_PRICE);\r\n        uint64 lbtStrikePriceE0 = lbtStrikePrice / (uint64(10)**DECIMALS_OF_ORACLE_PRICE);\r\n\r\n        if (sbtStrikePrice != 0) {\r\n            return BOND_TOKEN_NAMER.genBondTokenName(\"SBT\", \"SBT\", maturity, sbtStrikePriceE0);\r\n        } else if (lbtStrikePrice != 0) {\r\n            return BOND_TOKEN_NAMER.genBondTokenName(\"LBT\", \"LBT\", maturity, lbtStrikePriceE0);\r\n        } else {\r\n            return BOND_TOKEN_NAMER.genBondTokenName(\"IMT\", \"Immortal Option\", maturity, 0);\r\n        }\r\n    }\r\n\r\n    function _collateralAddress() internal view override returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    function _getCollateralDecimals() internal view override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _sendCollateralTo(address receiver, uint256 amount) internal override {\r\n        _transferETH(payable(receiver), amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"contract BondTokenNameInterface\",\"name\":\"bondTokenNamerAddress\",\"type\":\"address\"},{\"internalType\":\"contract BondTokenFactory\",\"name\":\"bondTokenFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityScale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inputBondGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputBondGroupID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogExchangeEquivalentBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogIssueNewBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rateNumerator\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rateDenominator\",\"type\":\"uint128\"}],\"name\":\"LogLiquidateBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fnMapID\",\"type\":\"bytes32\"}],\"name\":\"LogNewBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sbtStrikePrice\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"}],\"name\":\"LogNewBondGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogReverseBondGroupToCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTransferETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsOfBond\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsOfOraclePrice\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputBondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputBondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"exceptionBonds\",\"type\":\"bytes32[]\"}],\"name\":\"exchangeEquivalentBonds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"fnMap\",\"type\":\"bytes\"}],\"name\":\"generateBondID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"fnMap\",\"type\":\"bytes\"}],\"name\":\"generateFnMapID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fnMapID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"}],\"name\":\"getBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bondTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"solidStrikePrice\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"fnMapID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"}],\"name\":\"getBondGroup\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fnMapID\",\"type\":\"bytes32\"}],\"name\":\"getFnMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"fnMap\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"}],\"name\":\"issueNewBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleHintID\",\"type\":\"uint256\"}],\"name\":\"liquidateBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPayment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondGroupID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"contract PriceOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"fnMap\",\"type\":\"bytes\"}],\"name\":\"registerNewBond\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"registerNewBondGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"reverseBondGroupToCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BondMakerCollateralizedEth","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"0000000000000000000000006e33f11625b2c8b7270cf8e0319b8b9ffb8f086d000000000000000000000000ab37e1358b639fd877f015027bb62d3ddaa7557e000000000000000000000000f3f01ea328d290b3808a8ed53c0dad3a40e684f2000000000000000000000000fe09db40d2f972d2d9c286b0facae9bbbe0fe9d90000000000000000000000000000000000000000000000000000000000000e10","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://071592c519f8f143fb19e35d2e2542b14b53f6bb5bef71203bb82b952a1f63fb"}]}