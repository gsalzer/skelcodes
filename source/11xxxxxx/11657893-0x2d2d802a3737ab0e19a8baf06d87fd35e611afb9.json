{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/MatchPairStable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport './uniswapv2/libraries/UniswapV2Library.sol';\\nimport './uniswapv2/libraries/TransferHelper.sol';\\n\\nimport \\\"./utils/QueueStableStakesFuns.sol\\\";\\nimport \\\"./utils/MasterCaller.sol\\\";\\nimport \\\"./interfaces/IStakeGatling.sol\\\";\\nimport \\\"./interfaces/IMatchPair.sol\\\";\\nimport \\\"./interfaces/IPriceSafeChecker.sol\\\";\\n\\n\\n\\n\\ncontract MatchPairStable is  IMatchPair, Ownable, MasterCaller{\\n    using SafeERC20 for IERC20;\\n    using QueueStableStakesFuns for QueueStableStakes;\\n    using SafeMath for uint256; \\n    \\n    uint256 profitRateDenominator;\\n    // round index of pair order\\n    uint256 public pairRound;\\n    uint256 public minToken0;\\n    uint256 public minToken1;\\n\\n    struct QueuePoolInfo {\\n        //LP Token : LIFO\\n        UserStableStake[] lpQueue;\\n        //from LP to priorityQueue :FIFO\\n        QueueStableStakes priorityQueue;\\n        //Single Token  : FIFO\\n        QueueStableStakes pendingQueue;\\n        //Queue Total\\n        uint256 totalPending;\\n        //index of User index\\n        mapping(address => uint256[]) userLP;\\n        mapping(address => uint256[]) userPriority;\\n        mapping(address => uint256[]) userPending;\\n    }\\n\\n    struct UserAmount {\\n        address user;\\n        uint256 amount;\\n    }\\n\\n    struct RequestWrapper {\\n        uint256 index;\\n        address user;\\n        uint256 amount;\\n        uint256 rate;\\n        uint256 rate2;\\n    }\\n    \\n    //LP token Address\\n    IUniswapV2Pair public lpToken;\\n    //queue\\n    QueuePoolInfo queueStake0;\\n    QueuePoolInfo queueStake1;\\n\\n    IStakeGatling stakeGatling;\\n\\n    IPriceSafeChecker priceChecker;\\n    // LP index array each round\\n    // index0/1 => round => lpIndex[]\\n    mapping(uint256 => mapping(uint256 => uint256[])) roundLpIndex;\\n\\n    event Stake(bool _index0, address _user, uint256 _amount);\\n    // int256 constant INT256_MAX = int256(~(uint256(1) << 255));\\n    constructor(address _lpToken) public {\\n        lpToken =  IUniswapV2Pair(_lpToken);\\n        createQueue(true, 10e7);\\n        createQueue(false, 10e7);\\n    }\\n\\n   /**  From Library  */\\n    function createQueue(bool _isFirst, uint256 _size) private {\\n        QueuePoolInfo storage self = _isFirst? queueStake0 : queueStake1;\\n        self.priorityQueue.create(_size);\\n        self.pendingQueue.create(_size);\\n    }\\n\\n    function setPriceSafeChecker(address _priceChecker) public onlyOwner() {\\n        priceChecker = IPriceSafeChecker(_priceChecker);\\n    }\\n    function setStakeGatling(address _gatlinAddress) public onlyOwner() {\\n        stakeGatling = IStakeGatling(_gatlinAddress);\\n        profitRateDenominator =   stakeGatling.profitRateDenominator();\\n    }\\n\\n    function stake(uint256 _index, address _user,uint256 _amount) public override onlyMasterCaller() {\\n        \\n        toQueue(_index == 0, _user, _amount);\\n        updatePool();\\n    }\\n    \\n    function setMinLimit(uint256 _min0, uint256 _mint1 ) public onlyOwner() {\\n        minToken0 = _min0;\\n        minToken1 = _mint1;\\n    }\\n\\n    function updatePool() private {\\n        (uint256 pendingA, uint256 pendingB) = ( queueStake0.totalPending, queueStake1.totalPending);\\n\\n        //todo setting min pairableAmount\\n        if( pendingA > minToken0 && pendingB > minToken1 ) {\\n            \\n            (uint amountA, uint amountB) = getPairAmount( lpToken.token0(), lpToken.token1(), pendingA, pendingB ); \\n\\n            TransferHelper.safeTransfer(lpToken.token0(), address(lpToken), amountA);\\n            TransferHelper.safeTransfer(lpToken.token1(), address(lpToken), amountB);\\n            \\n            pairRound = pairRound + 1;\\n            //mint LP\\n            uint liquidity = lpToken.mint(address(this));\\n            // stake via stakeGatling\\n            TransferHelper.safeTransfer(address(lpToken), address(stakeGatling), liquidity);\\n            stakeGatling.stake(liquidity); // update Percent\\n\\n            uint256 presentRate = stakeGatling.presentRate();\\n\\n\\n            pending2LP(true, amountA,  liquidity, presentRate, pairRound); \\n            pending2LP(false,amountB,  liquidity, presentRate, pairRound);\\n            \\n        }\\n    }\\n    \\n    function getPairAmount(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired  ) public returns ( uint amountA, uint amountB) {\\n            \\n        (uint reserveA, uint reserveB,) = lpToken.getReserves();\\n\\n        if( address(priceChecker) != address(0) ) {\\n            priceChecker.checkPrice(reserveA, reserveB);\\n        }\\n\\n        uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\\n        if (amountBOptimal <= amountBDesired) {\\n            (amountA, amountB) = (amountADesired, amountBOptimal);\\n        } else {\\n            uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\\n            assert(amountAOptimal <= amountADesired);\\n            (amountA, amountB) = (amountAOptimal, amountBDesired);\\n        }\\n    }\\n    \\n    function untakeToken(uint256 _index, address _user,uint256 _amount) \\n        public\\n        override\\n        onlyMasterCaller()\\n        returns (uint256 _tokenAmount) \\n    {\\n        //\\n        bool index0 = _index == 0;\\n        address tokenCurrent = index0 ? lpToken.token0() : lpToken.token1();\\n        _tokenAmount = untakePending(index0, _user, _amount);\\n        \\n        if(_tokenAmount < _amount) {\\n            uint256 amountRequerViaLp =  _amount.sub(_tokenAmount);\\n            //update rate\\n            stakeGatling.withdraw(0);\\n            uint256 presentRate = stakeGatling.presentRate();\\n            stakeGatling.presentRate();\\n//57\\n\\n            \\n            ( UserAmount[] memory originAccountCurrent,\\n              UserAmount[] memory originAccountPaired, \\n              uint256[] memory amountArray) = lpOriginAccountCalc( RequestWrapper(_index, _user, amountRequerViaLp, presentRate, 0 ));\\n              \\n             \\n            if(amountArray[2] > 0) {\\n                (uint tokenCurrent, uint tokenPaired) = coverageLose(_index, amountArray[0], amountArray[1], amountArray[2]);\\n\\n                \\n                // balanceTokenCurrent, balanceTokenPaired . perShare\\n                uint256 tokenPerShare = tokenPaired.mul(1e36).div(amountArray[1]);\\n\\n                distributePairedOrigin(index0, tokenPerShare, originAccountPaired );\\n\\n                _tokenAmount = _tokenAmount.add(tokenCurrent);\\n            }\\n        }\\n        // transfer to Master\\n        TransferHelper.safeTransfer(tokenCurrent, masterCaller(), _tokenAmount);\\n    }\\n\\n    function distributePairedOrigin(bool index0, uint256 tokenPerShare, UserAmount[] memory originAccountPaired ) private {\\n\\n        uint256 balancePaired = IERC20( index0? lpToken.token1() : lpToken.token0()).balanceOf(address(this));\\n\\n        uint256 accountLength = originAccountPaired.length;\\n        \\n        QueuePoolInfo storage _poolInfo = getQueuePoolInfo(!index0);\\n        QueueStableStakes storage _priorityQueue = _poolInfo.priorityQueue;\\n        mapping(address => uint256[])  storage _userPriority = _poolInfo.userPriority;\\n\\n        for (uint i=0; i < accountLength; i++) {\\n            UserAmount memory account =  originAccountPaired[i];\\n\\n            if(account.amount == 0) {\\n\\n                break;\\n            }\\n            uint256 priorityAmount = account.amount.mul(tokenPerShare).div(1e36);\\n            \\n            uint256 pid = _priorityQueue.append(UserStableStake( account.user, priorityAmount, 0, 0, 0));\\n            _userPriority[account.user].push(pid);\\n            _poolInfo.totalPending = _poolInfo.totalPending.add(priorityAmount);\\n        }\\n    }\\n\\n    function coverageLose(uint256 _index, uint256 amountOriginSumCurrent, uint256 amountOriginSumPaired, uint256 untakeLpAmount) private returns (uint256 tokenCuurent, uint256 tokenPaired) {\\n\\n\\n\\n        address tokenCurrent = _index == 0 ? lpToken.token0() : lpToken.token1();\\n        uint256 pairedIndex = (_index+1)%2;\\n        //burn \\n        (tokenCuurent, tokenPaired) = burnLp(_index, untakeLpAmount);\\n\\n\\n\\n\\n\\n        bool enoughCurrent =  tokenCuurent >= amountOriginSumCurrent;\\n        bool enoughPaired  =  tokenPaired  >= amountOriginSumPaired;\\n\\n\\n\\n\\n        if(enoughCurrent == enoughPaired) { //ture ture || false false\\n\\n        }else {\\n            bool sellCurrent = enoughCurrent;\\n\\n            // paired lose\\n            uint256 amountLoss  = sellCurrent ? amountOriginSumPaired.sub(tokenPaired) : amountOriginSumCurrent.sub(tokenCuurent);\\n            uint256 amountWin = sellCurrent ? tokenCuurent.sub(amountOriginSumCurrent) : tokenPaired.sub(amountOriginSumPaired);\\n            uint256 regainRequireAmount = getAmountVinIndexed(sellCurrent ? pairedIndex : _index,  amountLoss);\\n            \\n            uint256 sellAmount;\\n            if(regainRequireAmount >= amountWin) {\\n                //sell Win\\n                sellAmount = amountWin;\\n            }else {\\n                // half profit\\n                sellAmount = amountWin.sub(regainRequireAmount).div(2).add(regainRequireAmount);\\n            }\\n            //sell\\n            regainRequireAmount = execSwap(sellCurrent? _index : pairedIndex, sellAmount);\\n\\n            if(sellCurrent) {\\n                tokenCuurent = tokenCuurent.sub(sellAmount);\\n                tokenPaired  = tokenPaired.add(regainRequireAmount);\\n            }else {\\n                tokenCuurent = tokenCuurent.add(regainRequireAmount);\\n                tokenPaired  = tokenPaired.sub(sellAmount);\\n            }\\n        }\\n    }\\n\\n    function execSwap(uint256 indexIn, uint256 amountIn ) private returns(uint256 amountOunt) {\\n\\n        if(amountIn > 0) {\\n            amountOunt = getAmountVoutIndexed( indexIn,  amountIn);\\n\\n\\n            address sellToken = indexIn == 0? lpToken.token0() : lpToken.token1();\\n            TransferHelper.safeTransfer(sellToken, address(lpToken), amountIn);\\n            uint256 zero;\\n            (uint256 amount0Out, uint256 amount1Out ) = indexIn == 0 ? ( zero , amountOunt ) : (amountOunt, zero);\\n            lpToken.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n        }\\n    }\\n\\n    //add to quequeEnd\\n    function toQueue(bool _isFirst, address _user,  uint256 _amount) private {\\n        QueuePoolInfo storage self =  getQueuePoolInfo(_isFirst); // _isFirst? queueStake0 : queueStake1;\\n\\n        uint256 pIndex =  self.pendingQueue.append(UserStableStake( _user, _amount, 0, 0, 0));\\n        self.totalPending = self.totalPending.add(_amount);\\n        self.userPending[_user].push(pIndex);\\n        emit Stake(_isFirst, _user, _amount);\\n    }\\n\\n    function getQueuePoolInfo(bool _isIndex0) private returns( QueuePoolInfo storage poolInfo ) {\\n        return _isIndex0 ? queueStake0 : queueStake1;\\n    }\\n    // untake from pendingQueue && priorityQueue\\n    function untakePending(bool _index0, address _user,  uint256 _amount) private returns (uint256 untakeAmount) {\\n        QueuePoolInfo storage self = _index0? queueStake0 : queueStake1;\\n        \\n        uint256[] storage pQueueIndex = self.userPending[_user];\\n\\n        while(pQueueIndex.length>0) {\\n            uint256 pIndex = pQueueIndex[pQueueIndex.length.sub(1)];\\n            UserStableStake storage UserStableStake = self.pendingQueue.indexOf(pIndex);\\n            uint256 amount = UserStableStake.amount;\\n\\n            if(untakeAmount.add(amount)>= _amount) {\\n                UserStableStake.amount = untakeAmount.add(amount).sub(_amount);\\n                untakeAmount = _amount;    \\n                break;\\n            }else{\\n                untakeAmount = untakeAmount.add(amount);\\n                UserStableStake.amount = 0;\\n                pQueueIndex.pop();\\n            }\\n\\n        }\\n        if (untakeAmount < _amount) {\\n            uint256 untakeProority = untakePriority(_index0, _user, _amount.sub(untakeAmount));\\n            untakeAmount = untakeAmount.add(untakeProority);\\n        }\\n\\n        self.totalPending = self.totalPending.sub(untakeAmount);\\n    }\\n\\n    function untakePriority(bool _index0, address _user,  uint256 _amount) private returns(uint256 _untakeAmount) {\\n        QueuePoolInfo storage self = _index0? queueStake0 : queueStake1;\\n        uint256[] storage priorityIndex = self.userPriority[_user];\\n        uint256 untakeAmount;\\n        while( priorityIndex.length > 0 ) {\\n            uint256 pIndex = priorityIndex[priorityIndex.length.sub(1)];\\n            UserStableStake storage UserStableStake = self.priorityQueue.indexOf(pIndex);\\n            uint256 amount = UserStableStake.amount;\\n            //self assets only allows\\n            if(UserStableStake.user != _user ) {\\n                break;\\n            }\\n            if(untakeAmount.add(amount)>= _amount) {\\n                UserStableStake.amount = untakeAmount.add(amount).sub(_amount);\\n                return _amount;\\n            }else{\\n                untakeAmount = untakeAmount.add(amount);\\n                UserStableStake.amount = 0;\\n                priorityIndex.pop();\\n            }\\n        }\\n        return untakeAmount;\\n    }\\n\\n    function pending2LP(bool _index0, uint256 _amount, uint256 _liquidity, uint256 _presentRate, uint256 _pairRound) private {\\n        // lpRate\\n        uint256 lpPreShare =  _liquidity.mul(1e36).div(_amount);\\n        uint leftAmount = moveQueue2LP(_index0, true, _amount, lpPreShare, _presentRate, _pairRound);\\n        //\\n        if(leftAmount>0) {\\n            moveQueue2LP(_index0, false, leftAmount, lpPreShare, _presentRate, _pairRound);\\n        }\\n        //update totalPending\\n        QueuePoolInfo storage self = _index0? queueStake0 : queueStake1;\\n        self.totalPending = self.totalPending.sub(_amount);\\n    }\\n\\n    function burnLp(uint256 _index, uint256 _lpAmount) private returns (uint256 tokenCurrent, uint256 tokenPaired) {\\n        //send LP to address(this);\\n        // update profitRate\\n        bool index0 = _index == 0;\\n        address lpAddress = address(lpToken);\\n        \\n        stakeGatling.withdraw(_lpAmount);\\n\\n\\n\\n        TransferHelper.safeTransfer(lpAddress, lpAddress, _lpAmount);\\n\\n        (tokenCurrent, tokenPaired) = lpToken.burn(address(this));\\n        if(_index == 1) {\\n            (tokenCurrent, tokenPaired) = (tokenPaired, tokenCurrent );\\n        }\\n\\n    }\\n\\n     // LP to Priority\\n    function lpOriginAccountCalc(RequestWrapper memory request) \\n        private\\n        returns (UserAmount[] memory , UserAmount[] memory , uint256[] memory )\\n    {\\n\\n        uint256[] storage userLp =  request.index == 0? queueStake0.userLP[request.user] : queueStake1.userLP[request.user];\\n\\n        UserAmount[] memory originAccountCurrent = new UserAmount[](userLp.length);\\n        //how to set length\\n        UserAmount[] memory originAccountPaired = new UserAmount[](0);\\n        uint256[] memory amountArray = new uint256[](3);\\n\\n        uint256 index;\\n        while(userLp.length>0) {\\n            if(request.amount == 0) {\\n                break;\\n            }\\n            \\n            (uint256 cutLp10round, UserAmount memory burnAmount  ) = burnUserLp(request.index, userLp, request.rate, request.amount);\\n            if(burnAmount.amount ==0) {\\n                continue;\\n            }\\n //82\\n            request.amount = request.amount.sub(burnAmount.amount);\\n\\n            //retrun struts\\n            originAccountCurrent[index] = burnAmount;\\n            index++;\\n            amountArray[0] = amountArray[0].add(burnAmount.amount);\\n //69\\n\\n            (uint256 originPairAmount , UserAmount[] memory paireArray) = untakePairedLP( (cutLp10round % 1e10).mul(10).add(request.index ==0 ? 1:0), cutLp10round.div(1e10)+1, request.rate);\\n\\n            originAccountPaired = mergeArray(originAccountPaired, paireArray);\\n\\n            amountArray[1] = amountArray[1].add(originPairAmount);\\n            amountArray[2] = amountArray[2].add(cutLp10round.div(1e10));\\n\\n        }\\n\\n        return (originAccountCurrent, originAccountPaired, amountArray);\\n     \\n    }\\n\\n    function mergeArray(UserAmount[] memory arrayA, UserAmount[] memory arrayB) private returns (UserAmount[] memory) {\\n            UserAmount[] memory arraySum = new UserAmount[](arrayA.length.add(arrayB.length));\\n            uint256 index;\\n            for (uint i=0; i < arrayA.length; i++) {\\n                arraySum[index] = arrayA[i];\\n                index++;\\n            }\\n\\n            for (uint i=0; i < arrayB.length; i++) {\\n                arraySum[index] = arrayB[i];\\n                index++;\\n            }\\n            return arraySum;\\n    }\\n    //return uint256  = cutLp* 1e10 + round\\n    function burnUserLp(uint256 index, uint256[] storage userLp, uint256 _presentRate, uint256 requireTokenAmount) \\n        private \\n        returns (uint256, UserAmount memory)\\n    {\\n\\n        UserStableStake[] storage queueStakes =  index == 0? queueStake0.lpQueue : queueStake1.lpQueue;\\n        uint256 pIndex = userLp[userLp.length.sub(1)];\\n\\n        UserStableStake storage userStake = queueStakes[pIndex];\\n\\n\\n        if(userStake.amount ==0) {\\n            userLp.pop();\\n            return (0, UserAmount( address(0), 0));\\n        }\\n        // inflate profit\\n        uint256 amount = userStake.amount.mul(_presentRate).div(userStake.perRate); // profit\\n\\n        address _user = userStake.user;\\n        uint256 _round = userStake.round;   \\n        uint256 _lpPerToken = userStake.lpPerToken;\\n        uint256 originTokenAmount = amount.mul(1e36).div(_lpPerToken);\\n//79\\n        UserAmount memory userAmount = UserAmount( _user, 0);\\n        uint256 cutLp;\\n        if(originTokenAmount >= requireTokenAmount) {\\n            uint256 amountLeft =  originTokenAmount.sub(requireTokenAmount);\\n\\n            if(amountLeft == 0 ) {\\n                userStake.amount = 0;\\n                userLp.pop();\\n                cutLp = amount;\\n            }else {\\n                userStake.amount = amountLeft.mul(amount).div(originTokenAmount);\\n                userStake.perRate = _presentRate;\\n                cutLp = amount.sub(amountLeft.mul(amount).div(originTokenAmount).add(1));\\n            }\\n            userAmount.amount = requireTokenAmount;\\n\\n        }else {\\n            userStake.amount = 0; \\n            userLp.pop();\\n            cutLp = amount;\\n            userAmount.amount = cutLp.mul(1e36).div(_lpPerToken); \\n        }\\n\\n        \\n        return (cutLp.mul(1e10).add(_round), userAmount);\\n    }\\n\\n    function untakePairedLP(uint256 _roundAndIndex, uint256 _amountLp, uint256 _presentRateC )\\n        private\\n        returns (uint256 amountOriginSumOther, UserAmount[] memory)\\n    {\\n        UserStableStake[] storage queueStakesOther =  _roundAndIndex %10 == 0? queueStake0.lpQueue : queueStake1.lpQueue;        \\n        uint[] storage pairLpIndex = roundLpIndex[_roundAndIndex %10][_roundAndIndex/10];\\n        \\n        // uint256 amountOriginSumOther;\\n        UserAmount[] memory originAccountOther = new UserAmount[](pairLpIndex.length);\\n\\n\\n\\n        uint i;\\n        while(pairLpIndex.length>0) {\\n\\n            if( _amountLp == 0 ){\\n                break;\\n            }\\n            UserStableStake storage userPair = queueStakesOther[pairLpIndex.length - 1];\\n\\n\\n            if(userPair.amount == 0) {\\n                pairLpIndex.pop(); //removeEnd\\n                continue;\\n            }\\n            uint256 amountPairLp = userPair.amount.mul(_presentRateC).div(userPair.perRate); // profit\\n\\n            if(amountPairLp >= _amountLp) {\\n                userPair.amount = amountPairLp.sub(_amountLp);\\n                userPair.perRate = _presentRateC;\\n\\n                amountOriginSumOther = amountOriginSumOther.add(_amountLp.mul(1e36).div(userPair.lpPerToken));\\n                originAccountOther[i] = UserAmount( userPair.user, _amountLp.mul(1e36).div(userPair.lpPerToken));\\n                break;\\n            }else {\\n\\n                amountOriginSumOther = amountOriginSumOther.add(userPair.amount.mul(1e36).div(userPair.lpPerToken));\\n\\n                originAccountOther[i] =  UserAmount( userPair.user, userPair.amount.mul(1e36).div(userPair.lpPerToken));\\n                userPair.amount = 0;\\n                _amountLp = _amountLp.sub(amountPairLp);\\n                pairLpIndex.pop(); //removeEnd\\n            }\\n\\n            i++;\\n        }\\n\\n        return (amountOriginSumOther, originAccountOther);\\n\\n    }\\n\\n    /**\\n     * @dev _amount , totoal amount to LP \\n     * return left Amount to LP , pick from pendingQueue\\n     */\\n    function moveQueue2LP(bool _index0, bool isPriority, uint256 _amount , uint256 lpPreShare, uint256 _presentRate, uint256 _pairRound) private returns(uint256 untakeAmount) {\\n        QueuePoolInfo storage poolinfo = _index0? queueStake0 : queueStake1;\\n        QueueStableStakes storage queueStakes =  isPriority ? poolinfo.priorityQueue : poolinfo.pendingQueue;\\n        untakeAmount = _amount;\\n\\n\\n\\n\\n        // uint256[] memory indexArray  = new uint256[](2);\\n        // uint256 index = 0;\\n        while(queueStakes.used>0) { //used == length\\n            UserStableStake storage userStableStake = queueStakes.first();\\n            uint256 amount = userStableStake.amount;\\n\\n            if(amount ==0) { \\n                queueStakes.remove();\\n                continue;\\n            }\\n            if(untakeAmount <= amount) {\\n                if(untakeAmount == amount ) {\\n                    userStableStake.amount = 0;\\n                    queueStakes.remove();\\n                }else {\\n                    userStableStake.amount = amount.sub(untakeAmount);\\n                }\\n                //mark lpQueue index\\n                poolinfo.userLP[userStableStake.user].push(poolinfo.lpQueue.length);\\n\\n                roundLpIndex[_index0 ? 0: 1][_pairRound].push(poolinfo.lpQueue.length);\\n\\n                uint256 lpAmount = untakeAmount.mul(lpPreShare).div(1e36);\\n\\n\\n                poolinfo.lpQueue.push( UserStableStake( userStableStake.user, lpAmount, _presentRate , lpPreShare, _pairRound));\\n\\n                untakeAmount = 0; \\n                break;\\n            }else {\\n                untakeAmount = untakeAmount.sub(amount);\\n                userStableStake.amount = 0;\\n                queueStakes.remove();\\n                //mark lpQueue index\\n                poolinfo.userLP[userStableStake.user].push(poolinfo.lpQueue.length);\\n               \\n\\n                roundLpIndex[_index0 ? 0: 1][_pairRound].push(poolinfo.lpQueue.length);\\n\\n                uint256 lpAmount = amount.mul(lpPreShare).div(1e36);\\n\\n                poolinfo.lpQueue.push(UserStableStake( userStableStake.user, lpAmount, _presentRate, lpPreShare , _pairRound));\\n            }\\n        }\\n    }\\n\\n    function getAmountVinIndexed(uint256 _outIndex, uint256 _amountOut ) private returns(uint256 amountIn) {\\n        (uint256 _reserveIn, uint256 _reserveOut,) = lpToken.getReserves();\\n        if(_outIndex == 0) {\\n            (_reserveIn, _reserveOut) = (_reserveOut, _reserveIn);\\n        }\\n        amountIn = getAmountIn(_amountOut, _reserveIn, _reserveOut);\\n    }\\n\\n    function getAmountVoutIndexed(uint256 _inIndex, uint256 _amountIn ) private returns(uint256 amountOut) {\\n        (uint256 _reserveIn, uint256 _reserveOut, ) = lpToken.getReserves();\\n        if(_inIndex == 1) {\\n            (_reserveIn, _reserveOut) = (_reserveOut, _reserveIn);\\n        }\\n        amountOut = getAmountOut(_amountIn, _reserveIn, _reserveOut);\\n    }\\n\\n    function getAmountIn( uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n    /** >>>>>>>  Call functions ,the following list  <<<<<<<<<<< */\\n\\n    function lPAmount(uint256 _index, address _user) public view returns (uint256) {\\n        //gatlin profit rate\\n        uint256 presentRate = stakeGatling.presentRate();\\n\\n        uint256 totalLPAmount;\\n        QueuePoolInfo memory self = _index == 0? queueStake0 : queueStake1;\\n        UserStableStake[] memory lpQueue = self.lpQueue;\\n        uint256[] memory lps =  _index == 0? queueStake0.userLP[_user] : queueStake1.userLP[_user];\\n        //lpQueue partion\\n        for (uint i=0; i< lps.length; i++) {\\n            \\n            uint256 amount = lpQueue[lps[i]].amount;\\n            totalLPAmount = totalLPAmount.add(amount);\\n        }\\n        return totalLPAmount;\\n    }\\n\\n     function tokenAmount(uint256 _index, address _user) public view returns (uint256) {\\n        //gatlin profit rate\\n        uint256 totalLPAmount;\\n        QueuePoolInfo storage self = _index == 0? queueStake0 : queueStake1;\\n\\n        uint256[] storage _userPriority = self.userPriority[_user];\\n        if( _userPriority.length > 0 ) {\\n            QueueStableStakes storage  _priorityQueue = self.priorityQueue;\\n\\n            for (uint i=0; i< _userPriority.length; i++) {\\n                \\n                uint256 amount = _priorityQueue.indexOfView( _userPriority[i] ).amount;\\n                totalLPAmount = totalLPAmount.add(amount);\\n            }\\n        }\\n\\n        uint256[] storage _userPending = self.userPending[_user];\\n        if( _userPending.length > 0 ) {\\n            QueueStableStakes storage  _pendingQueue = self.pendingQueue;\\n\\n            for (uint i=0; i< _userPending.length; i++) {\\n                \\n                uint256 amount = _pendingQueue.indexOfView( _userPending[i]).amount;\\n                totalLPAmount = totalLPAmount.add(amount);\\n            }\\n        }\\n        return totalLPAmount;\\n    }\\n\\n    function lp2TokenAmount(uint256 _liquidity) public view  returns (uint256 amount0, uint256 amount1) {\\n\\n        uint256 _totalSupply = lpToken.totalSupply();\\n        (address _token0, address _token1) = (lpToken.token0(), lpToken.token1());\\n\\n        uint balance0 = IERC20(_token0).balanceOf(address(lpToken));\\n        uint balance1 = IERC20(_token1).balanceOf(address(lpToken));\\n\\n        // //\\n        // //\\n\\n        amount0 = _liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = _liquidity.mul(balance1) / _totalSupply;\\n\\n    }\\n\\n    function maxAcceptAmount(uint256 _index, uint256 _times, uint256 _inputAmount) public view override returns (uint256) {\\n        \\n        QueuePoolInfo storage info =  _index == 0? queueStake0: queueStake1;\\n        (uint256 amount0, uint256 amount1) = stakeGatling.totalToken();\\n\\n        uint256 pendingTokenAmount = info.totalPending;\\n        uint256 lpTokenAmount =  _index == 0 ? amount0 : amount1;\\n\\n        require(lpTokenAmount.mul(_times) > pendingTokenAmount, \\\"Amount in pool less than PendingAmount\\\");\\n        uint256 maxAmount = lpTokenAmount.mul(_times).sub(pendingTokenAmount);\\n        \\n        return _inputAmount > maxAmount ? maxAmount : _inputAmount ; \\n        \\n    }\\n\\n    function queueTokenAmount(uint256 _index) public view override  returns (uint256) {\\n        QueuePoolInfo storage self = _index == 0? queueStake0 : queueStake1;\\n        return self.totalPending;\\n    }\\n    function balanceOfToken0(address _user) external view override returns (uint256) {\\n        return tokenAmount(0, _user);\\n    } \\n    function balanceOfToken1(address _user) external view override returns (uint256) {\\n       return tokenAmount(1, _user);\\n    }\\n    //LP0 - LP1 Amount\\n    function balanceOfLP0(address _user) external view override returns (uint256) {\\n        return lPAmount(0, _user);\\n    }\\n    function balanceOfLP1(address _user) external view override  returns (uint256) {\\n        return lPAmount(1, _user);\\n    }\\n\\n    function token(uint256 _index) public view override returns (address) {\\n        return _index == 0 ? lpToken.token0() : lpToken.token1();\\n    }\\n\\n    function token0() public view override returns (address) {\\n        return lpToken.token0();\\n    }\\n\\n    function token1() public view override returns (address) {\\n        return lpToken.token1();\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        return lpToken.getReserves();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/interfaces/IMatchPair.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ninterface IMatchPair {\\n    \\n    function stake(uint256 _index, address _user,uint256 _amount) external;  // owner\\n    function untakeToken(uint256 _index, address _user,uint256 _amount) external returns (uint256 _tokenAmount);// owner\\n    // function untakeLP(uint256 _index, address _user,uint256 _amount) external returns (uint256);// owner\\n\\n    function token(uint256 _index) external view  returns (address);\\n    function token0() external view  returns (address);\\n    function token1() external view  returns (address);\\n    //token0 - token1 Amount\\n    function balanceOfToken0(address _user) external view  returns (uint256);\\n    function balanceOfToken1(address _user) external view  returns (uint256);\\n    //LP0 - LP1 Amount\\n    function balanceOfLP0(address _user) external view  returns (uint256);\\n    function balanceOfLP1(address _user) external view  returns (uint256);\\n    // queue Token0 / token1\\n    function queueTokenAmount(uint256 _index) external view  returns (uint256);\\n    // max Accept Amount\\n    function maxAcceptAmount(uint256 _index, uint256 _times, uint256 _inputAmount) external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/interfaces/IPriceSafeChecker.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\ninterface IPriceSafeChecker {\\n    //checking price ( _reserve0/_reserve1 ) to making sure  in a safe range\\n    function checkPrice(uint256 _reserve0, uint256 _reserve1) external view ;\\n\\n     event SettingPriceRang(uint256 _minPriceNumerator, uint256 _minPriceDenominator, uint256 _maxPriceNumerator, uint256 _maxPriceDenominator);\\n}\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/interfaces/IStakeGatling.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ninterface IStakeGatling {\\n\\n    function stake(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function presentRate() external view returns (uint256);\\n    function profitRateDenominator() external view returns (uint256);\\n    function totalToken() external view returns (uint256 amount0, uint256 amount1);\\n\\n}\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/uniswapv2/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/uniswapv2/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/uniswapv2/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\nimport '../interfaces/IUniswapV2Factory.sol';\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair  =  IUniswapV2Factory(factory).getPair(token0, token1);\\n        \\n        // = address(uint(keccak256(abi.encodePacked(\\n        //         hex'ff',\\n        //         factory,\\n        //         keccak256(abi.encodePacked(token0, token1)),\\n        //         hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\\n        //     ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/utils/MasterCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ncontract MasterCaller {\\n    address private _master;\\n\\n    event MastershipTransferred(address indexed previousMaster, address indexed newMaster);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _master = msg.sender;\\n        emit MastershipTransferred(address(0), _master);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current MasterCaller.\\n     */\\n    function masterCaller() public view returns (address) {\\n        return _master;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyMasterCaller() {\\n        require(_master == msg.sender, \\\"Master: caller is not the master\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferMastership(address newMaster) public virtual onlyMasterCaller {\\n        require(newMaster != address(0), \\\"Master: new owner is the zero address\\\");\\n        emit MastershipTransferred(_master, newMaster);\\n        _master = newMaster;\\n    }\\n}\"\r\n    },\r\n    \"/Users/dingyp/vsCode/splitharvest/trufformat/contracts/utils/QueueStableStakesFuns.sol\": {\r\n      \"content\": \"// pragma solidity 0.7.0;\\n// // SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct QueueStableStakes {\\n    UserStableStake[] items;\\n    uint256 head;\\n    uint256 tail;\\n    uint256 used;\\n    uint256 length;\\n}\\n\\nstruct UserStableStake {\\n    address user;\\n    uint256 amount;\\n    uint256 perRate;\\n    //used in LP queue\\n    // tokenAmount = amount.mul(1e12).div(tokenPerLp)\\n    uint256 lpPerToken;\\n    uint256 round;\\n}\\n\\nlibrary QueueStableStakesFuns {\\n   \\n    function create(QueueStableStakes storage self, uint256 size) internal {\\n        self.head = 0;\\n        self.tail = 0;\\n        self.used = 0;\\n        self.length = size;\\n    }\\n    \\n    function append(QueueStableStakes storage self, UserStableStake memory item) internal\\n    returns (uint256 result) {\\n\\n        require(self.used < self.length, \\\"Arrays out of length\\\");\\n\\n        self.tail = (self.tail + 1) % self.length;\\n        uint256 index = (self.tail -1) % self.length;\\n\\n        if(self.items.length == self.length) {\\n            self.items[index] = item;\\n        }else {\\n            self.items.push(item);\\n        }\\n\\n        self.used++;\\n        return index;\\n    }\\n    \\n    function remove(QueueStableStakes storage self) internal \\n    returns (UserStableStake memory item, bool result) {\\n       if (self.used > 0) {\\n            item = self.items[self.head];\\n            self.head = (self.head + 1) % self.length;\\n            self.used--;\\n            result = true;\\n        }\\n    }\\n\\n    function first(QueueStableStakes storage self) internal \\n    returns (UserStableStake storage item) {\\n        require(self.used > 0, \\\"Empty data\\\");\\n        item = self.items[self.head];\\n    }\\n\\n    function indexOf(QueueStableStakes storage self, uint256 _index) internal returns (UserStableStake storage item) {\\n        item = self.items[_index % self.length];\\n    }\\n\\n    function indexOfView(QueueStableStakes storage self, uint256 _index) internal view returns (UserStableStake memory item) {\\n        item = self.items[_index % self.length];\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"MastershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_index0\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLP0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLP1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"}],\"name\":\"getPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"lp2TokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"maxAcceptAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"queueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mint1\",\"type\":\"uint256\"}],\"name\":\"setMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceChecker\",\"type\":\"address\"}],\"name\":\"setPriceSafeChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gatlinAddress\",\"type\":\"address\"}],\"name\":\"setStakeGatling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"transferMastership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"untakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MatchPairStable","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c3d03e4f041fd4cd388c549ee2a29a9e5075882f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}