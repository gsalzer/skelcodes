{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.1;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n        \r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n        \r\n    function getAmountsIn(uint amountOut, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n        \r\n    function getAmountsOut(uint amountIn, address[] memory path) \r\n        external \r\n        view \r\n        returns (uint[] memory amounts);\r\n        \r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CulaProject {\r\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\r\n    address internal constant UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f ;\r\n    IUniswapV2Router02 uniswap;\r\n    IUniswapV2Factory factory;\r\n    \r\n    constructor() {\r\n        uniswap = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n        factory = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS);\r\n    }\r\n    \r\n    // Transfer\r\n    function transfer(address tokenAddress, address receipment, uint tokenAmount) external {\r\n        IERC20(tokenAddress).transferFrom(msg.sender, receipment, tokenAmount);\r\n    }\r\n    \r\n    /************* Trade from Token to ETH *************/\r\n    // Swap ERC20 token to ETH\r\n    function tradeTokenToEth(address tokenAddress, uint amountIn, uint amountOutMin) external {\r\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amountIn), 'transferFrom failed.');\r\n        \r\n        require(IERC20(tokenAddress).approve(address(uniswap), amountIn), 'approve failed.');\r\n        \r\n        uniswap.swapExactTokensForETH(amountIn, amountOutMin, getPathForTokenToETH(tokenAddress), msg.sender, block.timestamp);\r\n    } \r\n    \r\n    // Amount of ETH required for the amount of Tokens\r\n    function estimateTokenToEth(address tokenAddress, uint amount) public view returns (uint[] memory) {\r\n        return uniswap.getAmountsOut(amount, getPathForTokenToETH(tokenAddress));\r\n    }\r\n    \r\n    // Path ETH to Token\r\n    function getPathForTokenToETH(address tokenAddress) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = uniswap.WETH();\r\n        \r\n        return path;\r\n    }\r\n    \r\n    /************* Trade from ETH to Token *************/\r\n    // Swap ETH to ERC20 token\r\n    function tradeEthToToken(address tokenAddress, uint amount) external payable {\r\n        uniswap.swapETHForExactTokens{ value: msg.value }(amount, getPathForETHtoToken(tokenAddress), msg.sender, block.timestamp);\r\n        \r\n        (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\r\n        require(success, \"refund failed\");\r\n    }\r\n    \r\n    // Amount of ETH required for the amount of Tokens\r\n    function estimateEthToToken(address tokenAddress, uint amount) public view returns (uint[] memory) {\r\n        return uniswap.getAmountsIn(amount, getPathForETHtoToken(tokenAddress));\r\n    }\r\n    \r\n    // Path ETH to Token\r\n    function getPathForETHtoToken(address tokenAddress) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswap.WETH();\r\n        path[1] = tokenAddress;\r\n        \r\n        return path;\r\n    }\r\n    \r\n    /************* Create Pairs *************/\r\n    // Register Pair to token\r\n    function createPair(address token1, address token2) external {\r\n        factory.createPair(token1, token2);\r\n    }\r\n    \r\n    // Register Pair to ETH\r\n    function createPair(address token1) external {\r\n        address token2 = uniswap.WETH();\r\n        factory.createPair(token1, token2);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"estimateEthToToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"estimateTokenToEth\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tradeEthToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"tradeTokenToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receipment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CulaProject","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://21dc424c64b7da6549eb2bb5d8bd297b27aba29006d103dd353d45bf32f8eea9"}]}