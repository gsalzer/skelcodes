{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n/*\r\n * @title: SafeMath\r\n * @dev: Helper contract functions to arithmatic operations safely.\r\n */\r\ncontract SafeMath {\r\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function Mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @title: Token\r\n * @dev: Interface contract for ERC20 tokens\r\n */\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint public _totalSupply;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract USDT is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n    function approve(address spender, uint256 value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @title: Staking\r\n */\r\ncontract KaiStarterSGBB is SafeMath {\r\n    // _kaiAddress: KAI ERC20 contract address\r\n    // msg.sender: owner\r\n    constructor(uint256 _contributeStartTime, uint256 _lockDays) public {\r\n        owner = msg.sender;\r\n        isEnded = false;\r\n        contributeStartTime = _contributeStartTime;\r\n        lockDays = _lockDays;\r\n    }\r\n\r\n    address constant KAI_ADDRESS = 0xD9Ec3ff1f8be459Bb9369b4E79e9Ebcf7141C093;\r\n    address constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    uint256 constant public HARD_CAP = 10000000000000000000000000; // 10000000 KAI\r\n    uint256 constant public MAX_CONTRIBUTION_EACH_BACKER = 500000000000000000000000; // 500000 KAI\r\n    uint256 constant public AMOUNT_MULTIPLES = 1000000000000000000000; // 1000 KAI\r\n\r\n    address private owner;\r\n    uint256 public currentCap;\r\n    uint256 public totalBackers;\r\n    uint256 public contributeStartTime;\r\n    uint256 public lockDays;\r\n    bool public isEnded; // isEnded is true when the campaign ends\r\n    uint256 public totalBonusUSDT;\r\n    \r\n    mapping (address => uint256) public contributedAmount;\r\n    mapping (address => bool) public isWithdrawBonus;\r\n    mapping (address => bool) public isWithdrawContribution;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // backers contribute KAI to the campaign\r\n    function contributeKAI(uint256 _amount) public {\r\n        require(isEnded != true, 'Campaign ended');\r\n        require(now > contributeStartTime, 'Contribute time not comming');\r\n        require(Add(contributedAmount[msg.sender], _amount) <= MAX_CONTRIBUTION_EACH_BACKER, \"Exceed limit personal cap\");\r\n        require(Mod(_amount, AMOUNT_MULTIPLES) == 0, \"Amount must be in multiples of 1,000 KAI\");\r\n        require(Add(_amount, currentCap) <= HARD_CAP, 'Exceed limit total cap');\r\n        require(Token(KAI_ADDRESS).transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        if (contributedAmount[msg.sender] == 0) {\r\n            totalBackers += 1;\r\n        }\r\n        \r\n        contributedAmount[msg.sender] = Add(contributedAmount[msg.sender], _amount);\r\n        currentCap = Add(currentCap, _amount);\r\n    }\r\n\r\n    // Backers withdraw KAI to their personal addresses\r\n    function withdrawKAI() public {\r\n        require((contributeStartTime + lockDays * 1 days) < now, \"Locking period\"); // ensure lock time is passeed\r\n        require(isWithdrawContribution[msg.sender] == false, \"The backer withdraw only once\"); //ensure the backer withdraw only once\r\n        \r\n        uint256 amount = contributedAmount[msg.sender];\r\n        require(Token(KAI_ADDRESS).transfer(msg.sender, amount));\r\n        \r\n        isWithdrawContribution[msg.sender] = true;\r\n    }\r\n    \r\n    // Backers withdraw their distributed revenue\r\n    function withdrawBonusUSDT() public {\r\n        require((contributeStartTime + lockDays * 1 days) < now, \"Locking period\"); // ensure lock time is passeed\r\n        require(isWithdrawBonus[msg.sender] == false, \"The backer withdraw only once\"); // ensure the backer withdraw only once\r\n        \r\n        uint256 amount = contributedAmount[msg.sender];\r\n        uint256 bonus = Mul(amount, totalBonusUSDT) / currentCap;\r\n        USDT(USDT_ADDRESS).transfer(msg.sender, bonus);\r\n        isWithdrawBonus[msg.sender] = true;\r\n    }\r\n    \r\n    function setTotalBonusUSDT(uint256 _totalBonusUSDT) public onlyOwner {\r\n        require(USDT(USDT_ADDRESS).balanceOf(address(this)) >= _totalBonusUSDT);\r\n\r\n        totalBonusUSDT = _totalBonusUSDT;\r\n    }\r\n    \r\n    // owner sets global variables the campaign ends\r\n    function setEnded() public onlyOwner {\r\n        isEnded = true;\r\n    }\r\n    \r\n    \r\n    function getMyContribution(address _backer) public view returns (uint256) {\r\n        return contributedAmount[_backer];\r\n    }\r\n    \r\n    function getBalanceKAIContract() public view returns (uint256) {\r\n        return Token(KAI_ADDRESS).balanceOf(address(this));\r\n    }\r\n    \r\n    function getBalanceUSDTContract() public view returns (uint256) {\r\n        return USDT(USDT_ADDRESS).balanceOf(address(this));\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return now;\r\n    }\r\n    \r\n    function emergencyWithdrawalETH(uint256 amount) public onlyOwner {\r\n        require(msg.sender.send(amount));\r\n    }\r\n    \r\n    function emergencyWithdrawalKAI(uint256 amount) public onlyOwner {\r\n        Token(KAI_ADDRESS).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function emergencyWithdrawalUSDT(uint256 amount) public onlyOwner {\r\n        USDT(USDT_ADDRESS).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    // @notice Will receive any eth sent to the contract\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"setEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalBonusUSDT\",\"type\":\"uint256\"}],\"name\":\"setTotalBonusUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION_EACH_BACKER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNT_MULTIPLES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_backer\",\"type\":\"address\"}],\"name\":\"getMyContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWithdrawContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonusUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contributeKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceUSDTContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWithdrawBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceKAIContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contributeStartTime\",\"type\":\"uint256\"},{\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KaiStarterSGBB","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005fc4dec0000000000000000000000000000000000000000000000000000000000000005d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a0ae1b2c4b481eee7cbb1767e187bc87222acac250165b74691a7470af2816fe"}]}