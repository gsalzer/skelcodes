{"status":"1","message":"OK","result":[{"SourceCode":"{\"LibAuthPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Auth pause.\\r\\n */\\r\\ncontract AuthPause is BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    bool private _paused = false;\\r\\n\\r\\n    event PausedON();\\r\\n    event PausedOFF();\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier onlyNotPaused() {\\r\\n        require(!_paused, \\\"Paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Returns true if the contract is paused, false otherwise.\\r\\n     */\\r\\n    function isPaused()\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets paused state.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setPaused(bool value)\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _paused = value;\\r\\n\\r\\n        if (_paused) {\\r\\n            emit PausedON();\\r\\n        } else {\\r\\n            emit PausedOFF();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"LibAuthProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Auth proxy.\\r\\n */\\r\\ncontract AuthProxy is BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _proxies;\\r\\n    \\r\\n    event ProxyAdded(address indexed account);\\r\\n    event ProxyRemoved(address indexed account);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by account which is not a proxy.\\r\\n     */\\r\\n    modifier onlyProxy() {\\r\\n        require(isProxy(msg.sender), \\\"ProxyRole: caller does not have the Proxy role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Proxy role.\\r\\n     */\\r\\n    function isProxy(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _proxies.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Proxy role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function addProxy(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _proxies.add(account);\\r\\n        emit ProxyAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Proxy role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function removeProxy(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _proxies.remove(account);\\r\\n        emit ProxyRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"LibAuthVoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\nimport \\\"LibAuthPause.sol\\\";\\r\\nimport \\\"LibAuthProxy.sol\\\";\\r\\n\\r\\n\\r\\ncontract AuthVoken is BaseAuth, AuthPause, AuthProxy {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _banks;\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    event BankAdded(address indexed account);\\r\\n    event BankRemoved(address indexed account);\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by account which is not a minter.\\r\\n     */\\r\\n    modifier onlyMinter()\\r\\n    {\\r\\n        require(isMinter(msg.sender), \\\"MinterRole: caller does not have the Minter role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Bank role.\\r\\n     */\\r\\n    function isBank(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _banks.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Bank role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function addBank(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _banks.add(account);\\r\\n        emit BankAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Bank role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function removeBank(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _banks.remove(account);\\r\\n        emit BankRemoved(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Minter role\\r\\n     */\\r\\n    function isMinter(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Minter role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function addMinter(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Minter role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function removeMinter(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\"},\"LibBaseAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibRoles.sol\\\";\\r\\nimport \\\"LibIERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Base auth.\\r\\n */\\r\\ncontract BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _agents;\\r\\n\\r\\n    event AgentAdded(address indexed account);\\r\\n    event AgentRemoved(address indexed account);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor ()\\r\\n    {\\r\\n        _agents.add(msg.sender);\\r\\n        emit AgentAdded(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by account which is not an agent.\\r\\n     */\\r\\n    modifier onlyAgent() {\\r\\n        require(isAgent(msg.sender), \\\"AgentRole: caller does not have the Agent role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescue compatible ERC20 Token\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function rescueToken(\\r\\n        address tokenAddr,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        IERC20 _token = IERC20(tokenAddr);\\r\\n        require(recipient != address(0), \\\"Rescue: recipient is the zero address\\\");\\r\\n        uint256 balance = _token.balanceOf(address(this));\\r\\n\\r\\n        require(balance \\u003e= amount, \\\"Rescue: amount exceeds balance\\\");\\r\\n        _token.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw Ether\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function withdrawEther(\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        require(recipient != address(0), \\\"Withdraw: recipient is the zero address\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance \\u003e= amount, \\\"Withdraw: amount exceeds balance\\\");\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Agent role.\\r\\n     */\\r\\n    function isAgent(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _agents.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Agent role.\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function addAgent(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _agents.add(account);\\r\\n        emit AgentAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Agent role.\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function removeAgent(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _agents.remove(account);\\r\\n        emit AgentRemoved(account);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"LibBurning.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\nimport \\\"LibSafeMath.sol\\\";\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Burning.\\r\\n */\\r\\ncontract Burning is BaseAuth {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint16 private _burningPermilleMin;\\r\\n    uint16 private _burningPermilleMax;\\r\\n    uint16 private _burningPermilleMod;\\r\\n\\r\\n    constructor () {\\r\\n        _burningPermilleMin = 10;\\r\\n        _burningPermilleMax = 30;\\r\\n        _burningPermilleMod = 21;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the burning border from `min` and `max`.\\r\\n     */\\r\\n    function setBurningBorder(\\r\\n        uint16 min,\\r\\n        uint16 max\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        require(min \\u003c= 1000, \\\"Set burning border: min exceeds 100.0%\\\");\\r\\n        require(max \\u003c= 1000, \\\"Set burning border: max exceeds 100.0%\\\");\\r\\n        require(min \\u003c= max, \\u0027Set burning border: min exceeds max\\u0027);\\r\\n\\r\\n        _burningPermilleMin = min;\\r\\n        _burningPermilleMax = max;\\r\\n        _burningPermilleMod = _burningPermilleMax - _burningPermilleMin + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the min/max value of burning permille.\\r\\n     */\\r\\n    function burningPermilleBorder()\\r\\n        public\\r\\n        view\\r\\n        returns (uint16 min, uint16 max)\\r\\n    {\\r\\n        min = _burningPermilleMin;\\r\\n        max = _burningPermilleMax;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns {value} of burning permille.\\r\\n     */\\r\\n    function burningPermille()\\r\\n        public\\r\\n        view\\r\\n        returns (uint16)\\r\\n    {\\r\\n        if (_burningPermilleMax == 0)\\r\\n            return 0;\\r\\n\\r\\n        if (_burningPermilleMin == _burningPermilleMax)\\r\\n            return _burningPermilleMin;\\r\\n\\r\\n        return uint16(uint256(keccak256(abi.encode(blockhash(block.number - 1)))).mod(_burningPermilleMod).add(_burningPermilleMin));\\r\\n    }\\r\\n}\\r\\n\"},\"LibIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\"},\"LibIVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of an vesting contract.\\r\\n */\\r\\ninterface IVesting {\\r\\n    function vestingOf(address account) external view returns (uint256);\\r\\n}\\r\\n\"},\"LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role\\r\\n    {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account\\u0027s access to this role.\\r\\n     */\\r\\n    function remove(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     *\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\"},\"LibSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"VokenTB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n// Voken TeraByte Main Contract for vnCHAIN (vision.network)\\r\\n//\\r\\n// More info:\\r\\n//   https://voken.io\\r\\n//\\r\\n// Contact us:\\r\\n//   support@voken.io\\r\\n\\r\\n\\r\\nimport \\\"LibSafeMath.sol\\\";\\r\\nimport \\\"LibIERC20.sol\\\";\\r\\nimport \\\"LibIVesting.sol\\\";\\r\\nimport \\\"LibAuthVoken.sol\\\";\\r\\nimport \\\"LibBurning.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title VokenTB Main Contract for vnCHAIN\\r\\n */\\r\\ncontract VokenTB is IERC20, IVesting, AuthVoken, Burning {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Account {\\r\\n        uint256 balance;\\r\\n\\r\\n        uint160 voken;\\r\\n        address payable referrer;\\r\\n\\r\\n        IVesting[] vestingContracts;\\r\\n        mapping (address =\\u003e bool) hasVesting;\\r\\n\\r\\n        mapping (address =\\u003e uint256) allowances;\\r\\n    }\\r\\n\\r\\n    string private _name = \\\"Voken TeraByte\\\";\\r\\n    string private _symbol = \\\"VokenTB\\\";\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private constant _cap = 210_000_000e9;\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _vokenCounter;\\r\\n    bool private _changeVokenAddressAllowed;\\r\\n\\r\\n    mapping (address =\\u003e Account) private _accounts;\\r\\n    mapping (uint160 =\\u003e address payable) private _voken2address;\\r\\n\\r\\n    event Mint(address indexed account, uint256 amount);\\r\\n    event Burn(address indexed account, uint256 amount);\\r\\n    event Donate(address indexed account, uint256 amount);\\r\\n    event VokenAddressSet(address indexed account, uint160 voken);\\r\\n    event ReferrerSet(address indexed account, address indexed referrerAccount);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Donate\\r\\n     */\\r\\n    receive()\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        if (msg.value \\u003e 0) {\\r\\n            emit Donate(msg.sender, msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the full name of VOKEN.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setName(\\r\\n        string calldata value\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _name = value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the symbol of VOKEN.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setSymbol(\\r\\n        string calldata value\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _symbol = value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set change Voken address is allowed or not.\\r\\n     */\\r\\n    function setChangeVokenAddressAllowed(bool value)\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _changeVokenAddressAllowed = value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set Voken address by `voken`.\\r\\n     */\\r\\n    function setVokenAddress(uint160 voken)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(balanceOf(msg.sender) \\u003e 0, \\\"Set Voken Address: balance is zero\\\");\\r\\n        require(voken \\u003e 0, \\\"Set Voken Address: is zero address\\\");\\r\\n\\r\\n        if (_accounts[msg.sender].voken \\u003e 0) {\\r\\n            require(_changeVokenAddressAllowed, \\\"Change Voken Address: is not allowed\\\");\\r\\n            delete _voken2address[voken];\\r\\n        }\\r\\n\\r\\n        else {\\r\\n            _vokenCounter = _vokenCounter.add(1);\\r\\n        }\\r\\n\\r\\n        _voken2address[voken] = msg.sender;\\r\\n        _accounts[msg.sender].voken = voken;\\r\\n\\r\\n        emit VokenAddressSet(msg.sender, voken);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set referrer.\\r\\n     */\\r\\n    function setReferrer(\\r\\n        uint160 referrerVoken\\r\\n    )\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        address payable referrer_ = _voken2address[referrerVoken];\\r\\n\\r\\n        require(referrer_ != address(0), \\\"Set referrer: does not exist\\\");\\r\\n        require(_accounts[msg.sender].referrer == address(0), \\\"Set referrer: was already exist\\\");\\r\\n\\r\\n        _accounts[msg.sender].referrer = referrer_;\\r\\n        emit ReferrerSet(msg.sender, referrer_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the full name of VOKEN.\\r\\n     */\\r\\n    function name()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of VOKEN.\\r\\n     */\\r\\n    function symbol()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     */\\r\\n    function decimals()\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (uint8)\\r\\n    {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the cap on VOKEN\\u0027s total supply.\\r\\n     */\\r\\n    function cap()\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of VOKEN in existence.\\r\\n     */\\r\\n    function totalSupply()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of VOKEN owned by `account`.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _accounts[account].balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the vesting contracts\\u0027 addresses on `account`.\\r\\n     */\\r\\n    function vestingContracts(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (IVesting[] memory contracts)\\r\\n    {\\r\\n        contracts = _accounts[account].vestingContracts;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if change Voken address is allowed.\\r\\n     */\\r\\n    function isChangeVokenAddressAllowed()\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _changeVokenAddressAllowed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns Voken address of `account`.\\r\\n     */\\r\\n    function address2voken(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint160)\\r\\n    {\\r\\n        return _accounts[account].voken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of `voken`.\\r\\n     */\\r\\n    function voken2address(\\r\\n        uint160 voken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (address payable)\\r\\n    {\\r\\n        return _voken2address[voken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of Voken address.\\r\\n     */\\r\\n    function vokenCounter()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _vokenCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the referrer of an `account`.\\r\\n     */\\r\\n    function referrer(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (address payable)\\r\\n    {\\r\\n        return _accounts[account].referrer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value)\\r\\n        public\\r\\n        override\\r\\n        onlyNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of VOKEN that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}.\\r\\n     * This is zero by default.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _accounts[owner].allowances[spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the vesting amount of VOKEN by `account`.\\r\\n     */\\r\\n    function vestingOf(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 reserved)\\r\\n    {\\r\\n        for (uint256 i = 0; i \\u003c _accounts[account].vestingContracts.length; i++) {\\r\\n            if (\\r\\n                _accounts[account].vestingContracts[i] != IVesting(0)\\r\\n                \\u0026\\u0026\\r\\n                isContract(address(_accounts[account].vestingContracts[i]))\\r\\n            ) {\\r\\n                try _accounts[account].vestingContracts[i].vestingOf(account) returns (uint256 value) {\\r\\n                    reserved = reserved.add(value);\\r\\n                }\\r\\n    \\r\\n                catch {\\r\\n                    //\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the available amount of VOKEN by `account` and a certain `amount`.\\r\\n     */\\r\\n    function availableOf(\\r\\n        address account\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(account).sub(vestingOf(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` VOKEN from the caller.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     */\\r\\n    function burn(\\r\\n        uint256 amount\\r\\n    )\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount \\u003e 0, \\\"Burn: amount is zero\\\");\\r\\n\\r\\n        uint256 balance = balanceOf(msg.sender);\\r\\n        require(balance \\u003e 0, \\\"Burn: balance is zero\\\");\\r\\n\\r\\n        if (balance \\u003e= amount) {\\r\\n            _burn(msg.sender, amount);\\r\\n        }\\r\\n        \\r\\n        else {\\r\\n            _burn(msg.sender, balance);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` VOKEN and assigns them to `account`.\\r\\n     *\\r\\n     * Can only be called by a minter.\\r\\n     */\\r\\n    function mint(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        public\\r\\n        onlyNotPaused\\r\\n        onlyMinter\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount \\u003e 0, \\\"Mint: amount is zero\\\");\\r\\n\\r\\n        _mint(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` VOKEN and assigns them to `account` with an `vestingContract`\\r\\n     *\\r\\n     * Can only be called by a minter.\\r\\n     */\\r\\n    function mintWithVesting(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        address vestingContract\\r\\n    )\\r\\n        public\\r\\n        onlyNotPaused\\r\\n        onlyMinter\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount \\u003e 0, \\\"Mint: amount is zero\\\");\\r\\n        require(vestingContract != address(this), \\\"Mint, vesting address is the token address\\\");\\r\\n\\r\\n        _mintWithVesting(account, amount, vestingContract);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` VOKEN from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Auto handle {WhitelistSignUp} when `amount` is a specific value.\\r\\n     * Auto handle {Burn} when `recipient` is `address(0)`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        onlyNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount \\u003e 0, \\\"Transfer: amount is zero\\\");\\r\\n\\r\\n        // Burn\\r\\n        if (recipient == address(0)) {\\r\\n            uint256 balance = balanceOf(msg.sender);\\r\\n            require(balance \\u003e 0, \\\"Transfer: balance is zero\\\");\\r\\n\\r\\n            if (amount \\u003c= balance) {\\r\\n                _burn(msg.sender, amount);\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                _burn(msg.sender, balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer\\r\\n        else {\\r\\n            uint256 available = availableOf(msg.sender);\\r\\n            require(available \\u003e 0, \\\"Transfer: available balance is zero\\\");\\r\\n            require(amount \\u003c= available, \\\"Transfer: insufficient available balance\\\");\\r\\n            \\r\\n            _transfer(msg.sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` VOKEN from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Auto handle {Burn} when `recipient` is `address(0)`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        onlyNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount \\u003e 0, \\\"TransferFrom: amount is zero\\\");\\r\\n\\r\\n        // Burn\\r\\n        if (recipient == address(0)) {\\r\\n            uint256 balance = balanceOf(sender);\\r\\n            require(balance \\u003e 0, \\\"Transfer: balance is zero\\\");\\r\\n\\r\\n            if (amount \\u003c= balance) {\\r\\n                _burn(sender, amount);\\r\\n            }\\r\\n\\r\\n            else {\\r\\n                _burn(sender, balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Normal transfer\\r\\n        else {\\r\\n            uint256 available = availableOf(sender);\\r\\n            require(available \\u003e 0, \\\"TransferFrom: available balance is zero\\\");\\r\\n            require(amount \\u003c= available, \\\"TransferFrom: insufficient available balance\\\");\\r\\n            \\r\\n            _transfer(sender, recipient, amount);\\r\\n            _approve(sender, msg.sender, _accounts[sender].allowances[msg.sender].sub(amount, \\\"TransferFrom: amount exceeds allowance\\\"));\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s VOKEN.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        require(owner != address(0), \\\"Approve: from the zero address\\\");\\r\\n        require(spender != address(0), \\\"Approve: to the zero address\\\");\\r\\n\\r\\n        _accounts[owner].allowances[spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` VOKEN from `account`, reducing the total supply.\\r\\n     *\\r\\n     * Emits a {Burn} event.\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     */\\r\\n    function _burn(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        _accounts[account].balance = _accounts[account].balance.sub(amount, \\\"Burn: insufficient balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount, \\\"Burn: amount exceeds total supply\\\");\\r\\n        emit Burn(account, amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` VOKEN and assigns them to `account`, increasing the total supply.\\r\\n     *\\r\\n     * Emits a {Mint} event.\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     */\\r\\n    function _mint(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        uint256 total = _totalSupply.add(amount);\\r\\n\\r\\n        require(total \\u003c= _cap, \\\"Mint: total supply cap exceeded\\\");\\r\\n        require(account != address(0), \\\"Mint: to the zero address\\\");\\r\\n\\r\\n        _totalSupply = total;\\r\\n        _accounts[account].balance = _accounts[account].balance.add(amount);\\r\\n        emit Mint(account, amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` VOKEN and assigns them to `account` with an `vestingContract`, increasing the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     */\\r\\n    function _mintWithVesting(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        address vestingContract\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        uint256 total = _totalSupply.add(amount);\\r\\n\\r\\n        require(total \\u003c= _cap, \\\"Mint: total supply cap exceeded\\\");\\r\\n        require(account != address(0), \\\"Mint: to the zero address\\\");\\r\\n\\r\\n        _totalSupply = total;\\r\\n        _accounts[account].balance = _accounts[account].balance.add(amount);\\r\\n\\r\\n        if (!_accounts[account].hasVesting[vestingContract]) {\\r\\n            _accounts[account].vestingContracts.push(IVesting(vestingContract));\\r\\n            _accounts[account].hasVesting[vestingContract] = true;\\r\\n        }\\r\\n\\r\\n        emit Mint(account, amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` VOKEN from `sender` to `recipient`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        if (!isBank(sender) \\u0026\\u0026 !isBank(recipient)) {\\r\\n            uint16 permille = burningPermille();\\r\\n\\r\\n            if (permille \\u003e 0) {\\r\\n                uint256 amountBurn = amount.mul(permille).div(1_000);\\r\\n                uint256 amountTransfer = amount.sub(amountBurn);\\r\\n    \\r\\n                _accounts[sender].balance = _accounts[sender].balance.sub(amountTransfer, \\\"Transfer: insufficient balance\\\");\\r\\n                _accounts[recipient].balance = _accounts[recipient].balance.add(amountTransfer);\\r\\n                emit Transfer(sender, recipient, amountTransfer);\\r\\n    \\r\\n                _burn(sender, amountBurn);\\r\\n                \\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _accounts[sender].balance = _accounts[sender].balance.sub(amount, \\\"Transfer: insufficient balance\\\");\\r\\n        _accounts[recipient].balance = _accounts[recipient].balance.add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` is a contract.\\r\\n     */\\r\\n    function isContract(address account)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BankAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BankRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausedOFF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausedON\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAccount\",\"type\":\"address\"}],\"name\":\"ReferrerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"voken\",\"type\":\"uint160\"}],\"name\":\"VokenAddressSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"address2voken\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningPermille\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningPermilleBorder\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"min\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChangeVokenAddressAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"mintWithVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"min\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"name\":\"setBurningBorder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setChangeVokenAddressAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"referrerVoken\",\"type\":\"uint160\"}],\"name\":\"setReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"voken\",\"type\":\"uint160\"}],\"name\":\"setVokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingContracts\",\"outputs\":[{\"internalType\":\"contract IVesting[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"voken\",\"type\":\"uint160\"}],\"name\":\"voken2address\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VokenTB","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4436dbb8aec6345ba0b9bee099512de0f4759be920bcea227c30c02da0f969a8"}]}