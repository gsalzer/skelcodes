{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ITokenInterface {\r\n    /** ERC20 **/\r\n    function totalSupply() external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /** VALUE, YFV, vUSD, vETH has minters **/\r\n    function minters(address account) external view returns (bool);\r\n    function mint(address _to, uint _amount) external;\r\n\r\n    /** VALUE **/\r\n    function cap() external returns (uint);\r\n    function yfvLockedBalance() external returns (uint);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint valueToken) external returns (uint freed);\r\n}\r\n\r\ncontract GovVaultRewardAutoCompound {\r\n    using SafeMath for uint;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 _flag) {\r\n        if ((_flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint gasStart = gasleft();\r\n            _;\r\n            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    ITokenInterface public valueToken = ITokenInterface(0x49E833337ECe7aFE375e44F4E3e8481029218E5c);\r\n\r\n    address public govVault = address(0xceC03a960Ea678A2B6EA350fe0DbD1807B22D875);\r\n    address public insuranceFund = address(0xb7b2Ea8A1198368f950834875047aA7294A2bDAa); // set to Governance Multisig at start\r\n    address public exploitCompensationFund = address(0x0000000000000000000000000000000000000000); // to compensate who lost during the exploit on Nov 14 2020\r\n    address public otherReserve = address(0x0000000000000000000000000000000000000000); // to reserve for future use\r\n\r\n    uint public govVaultValuePerBlock = 0.2 ether;         // VALUE/block\r\n    uint public insuranceFundValuePerBlock = 0;            // VALUE/block\r\n    uint public exploitCompensationFundValuePerBlock = 0;  // VALUE/block\r\n    uint public otherReserveValuePerBlock = 0;             // VALUE/block\r\n\r\n    uint public lastRewardBlock;    // Last block number that reward distribution occurs.\r\n    bool public minterPaused;       // if the minter is paused\r\n\r\n    address public governance;\r\n\r\n    event TransferToFund(address indexed fund, uint amount);\r\n\r\n    constructor (ITokenInterface _valueToken, uint _govVaultValuePerBlock, uint _startBlock) public {\r\n        if (address(_valueToken) != address(0)) valueToken = _valueToken;\r\n        govVaultValuePerBlock = _govVaultValuePerBlock;\r\n        lastRewardBlock = (block.number > _startBlock) ? block.number : _startBlock;\r\n        governance = msg.sender;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n    }\r\n\r\n    function setMinterPaused(bool _minterPaused) external onlyGovernance {\r\n        minterPaused = _minterPaused;\r\n    }\r\n\r\n    function setGovVault(address _govVault) external onlyGovernance {\r\n        govVault = _govVault;\r\n    }\r\n\r\n    function setInsuranceFund(address _insuranceFund) external onlyGovernance {\r\n        insuranceFund = _insuranceFund;\r\n    }\r\n\r\n    function setExploitCompensationFund(address _exploitCompensationFund) external onlyGovernance {\r\n        exploitCompensationFund = _exploitCompensationFund;\r\n    }\r\n\r\n    function setOtherReserve(address _otherReserve) external onlyGovernance {\r\n        otherReserve = _otherReserve;\r\n    }\r\n\r\n    function setGovVaultValuePerBlock(uint _govVaultValuePerBlock) external onlyGovernance {\r\n        require(_govVaultValuePerBlock <= 10 ether, \"_govVaultValuePerBlock is insanely high\");\r\n        mintAndSendFund(uint8(0));\r\n        govVaultValuePerBlock = _govVaultValuePerBlock;\r\n    }\r\n\r\n    function setInsuranceFundValuePerBlock(uint _insuranceFundValuePerBlock) external onlyGovernance {\r\n        require(_insuranceFundValuePerBlock <= 1 ether, \"_insuranceFundValuePerBlock is insanely high\");\r\n        mintAndSendFund(uint8(0));\r\n        insuranceFundValuePerBlock = _insuranceFundValuePerBlock;\r\n    }\r\n\r\n    function setExploitCompensationFundValuePerBlock(uint _exploitCompensationFundValuePerBlock) external onlyGovernance {\r\n        require(_exploitCompensationFundValuePerBlock <= 1 ether, \"_exploitCompensationFundValuePerBlock is insanely high\");\r\n        mintAndSendFund(uint8(0));\r\n        exploitCompensationFundValuePerBlock = _exploitCompensationFundValuePerBlock;\r\n    }\r\n\r\n    function setOtherReserveValuePerBlock(uint _otherReserveValuePerBlock) external onlyGovernance {\r\n        require(_otherReserveValuePerBlock <= 1 ether, \"_otherReserveValuePerBlock is insanely high\");\r\n        mintAndSendFund(uint8(0));\r\n        otherReserveValuePerBlock = _otherReserveValuePerBlock;\r\n    }\r\n\r\n    function mintAndSendFund(uint8 _flag) public discountCHI(_flag) {\r\n        if (minterPaused || lastRewardBlock >= block.number) {\r\n            return;\r\n        }\r\n        uint numBlks = block.number.sub(lastRewardBlock);\r\n        lastRewardBlock = block.number;\r\n        if (govVaultValuePerBlock > 0) _safeValueMint(govVault, govVaultValuePerBlock.mul(numBlks));\r\n        if (insuranceFundValuePerBlock > 0) _safeValueMint(insuranceFund, insuranceFundValuePerBlock.mul(numBlks));\r\n        if (exploitCompensationFundValuePerBlock > 0) _safeValueMint(exploitCompensationFund, exploitCompensationFundValuePerBlock.mul(numBlks));\r\n        if (otherReserveValuePerBlock > 0) _safeValueMint(otherReserve, otherReserveValuePerBlock.mul(numBlks));\r\n    }\r\n\r\n    // Safe valueToken mint, ensure it is never over cap and we are the current owner.\r\n    function _safeValueMint(address _to, uint _amount) internal {\r\n        if (valueToken.minters(address(this)) && _to != address(0)) {\r\n            uint totalSupply = valueToken.totalSupply();\r\n            uint realCap = valueToken.cap().add(valueToken.yfvLockedBalance());\r\n            if (totalSupply.add(_amount) > realCap) {\r\n                _amount = realCap.sub(totalSupply);\r\n            }\r\n            valueToken.mint(_to, _amount);\r\n            emit TransferToFund(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(ITokenInterface _token, uint _amount, address _to) external onlyGovernance {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"_valueToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_govVaultValuePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToFund\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exploitCompensationFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exploitCompensationFundValuePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govVaultValuePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundValuePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"mintAndSendFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherReserveValuePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exploitCompensationFund\",\"type\":\"address\"}],\"name\":\"setExploitCompensationFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exploitCompensationFundValuePerBlock\",\"type\":\"uint256\"}],\"name\":\"setExploitCompensationFundValuePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govVault\",\"type\":\"address\"}],\"name\":\"setGovVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_govVaultValuePerBlock\",\"type\":\"uint256\"}],\"name\":\"setGovVaultValuePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"setInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insuranceFundValuePerBlock\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFundValuePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_minterPaused\",\"type\":\"bool\"}],\"name\":\"setMinterPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otherReserve\",\"type\":\"address\"}],\"name\":\"setOtherReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_otherReserveValuePerBlock\",\"type\":\"uint256\"}],\"name\":\"setOtherReserveValuePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueToken\",\"outputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GovVaultRewardAutoCompound","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000ac8794","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://146cbbca5a721b43f23484e52e9f9ae60f9c64ec80e72f7bafa8a5407185a2be"}]}