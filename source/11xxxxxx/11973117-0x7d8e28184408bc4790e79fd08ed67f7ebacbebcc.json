{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/GPv2AllowanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/GPv2TradeExecution.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Allowance Manager Contract\\n/// @author Gnosis Developers\\ncontract GPv2AllowanceManager {\\n    using GPv2TradeExecution for GPv2TradeExecution.Data;\\n\\n    /// @dev The recipient of all transfers made by the allowance manager. The\\n    /// recipient is set at creation time and cannot change.\\n    address private immutable recipient;\\n\\n    constructor() {\\n        recipient = msg.sender;\\n    }\\n\\n    /// @dev Modifier that ensures that a function can only be called by the\\n    /// recipient of this contract.\\n    modifier onlyRecipient {\\n        require(msg.sender == recipient, \\\"GPv2: not allowance recipient\\\");\\n        _;\\n    }\\n\\n    /// @dev Transfers all sell amounts for the executed trades from their\\n    /// owners to the caller.\\n    ///\\n    /// This function reverts if:\\n    /// - The caller is not the recipient of the allowance manager\\n    /// - Any ERC20 transfer fails\\n    ///\\n    /// @param trades The executed trades whose sell amounts need to be\\n    /// transferred in.\\n    function transferIn(GPv2TradeExecution.Data[] calldata trades)\\n        external\\n        onlyRecipient\\n    {\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            GPv2TradeExecution.transferSellAmountToRecipient(\\n                trades[i],\\n                msg.sender\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2TradeExecution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./GPv2SafeERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Trade Execution\\n/// @author Gnosis Developers\\nlibrary GPv2TradeExecution {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /// @dev Executed trade data.\\n    struct Data {\\n        address owner;\\n        address receiver;\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n    }\\n\\n    /// @dev Ether marker address used to indicate an order is buying Ether.\\n    address internal constant BUY_ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Executes the trade's sell amount, transferring it from the trade's\\n    /// owner to the specified recipient.\\n    function transferSellAmountToRecipient(\\n        Data calldata trade,\\n        address recipient\\n    ) internal {\\n        require(\\n            address(trade.sellToken) != BUY_ETH_ADDRESS,\\n            \\\"GPv2: cannot transfer native ETH\\\"\\n        );\\n        trade.sellToken.safeTransferFrom(\\n            trade.owner,\\n            recipient,\\n            trade.sellAmount\\n        );\\n    }\\n\\n    /// @dev Executes the trade's buy amount, transferring it to the trade's\\n    /// receiver from the caller's address.\\n    function transferBuyAmountToOwner(Data memory trade) internal {\\n        if (address(trade.buyToken) == BUY_ETH_ADDRESS) {\\n            payable(trade.receiver).transfer(trade.buyAmount);\\n        } else {\\n            trade.buyToken.safeTransfer(trade.receiver, trade.buyAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract that notably\\n/// does not revert when calling a non-contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTansferResult(), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTansferResult(), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTansferResult() private pure returns (bool success) {\\n        bool badReturnSize;\\n\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch returndatasize()\\n                // Non-standard ERC20 transfer without return.\\n                case 0 {\\n                    success := 1\\n                }\\n                // Standard ERC20 transfer returning boolean success value.\\n                case 32 {\\n                    returndatacopy(0, 0, returndatasize())\\n\\n                    // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                    // as `true` for a boolean. In order to stay compatible with\\n                    // OpenZeppelin's `SafeERC20` library which is known to work\\n                    // with the existing ERC20 implementation we care about,\\n                    // make sure we return success for any non-zero return value\\n                    // from the `transfer*` call.\\n                    success := iszero(iszero(mload(0)))\\n                }\\n                default {\\n                    badReturnSize := 1\\n                }\\n        }\\n\\n        require(!badReturnSize, \\\"GPv2: malformed transfer result\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/GPv2Settlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./GPv2AllowanceManager.sol\\\";\\nimport \\\"./interfaces/GPv2Authentication.sol\\\";\\nimport \\\"./libraries/GPv2Interaction.sol\\\";\\nimport \\\"./libraries/GPv2Order.sol\\\";\\nimport \\\"./libraries/GPv2Trade.sol\\\";\\nimport \\\"./libraries/GPv2TradeExecution.sol\\\";\\nimport \\\"./mixins/GPv2Signing.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Settlement Contract\\n/// @author Gnosis Developers\\ncontract GPv2Settlement is GPv2Signing, ReentrancyGuard, StorageAccessible {\\n    using GPv2Order for bytes;\\n    using GPv2TradeExecution for GPv2TradeExecution.Data;\\n    using SafeMath for uint256;\\n\\n    /// @dev The authenticator is used to determine who can call the settle function.\\n    /// That is, only authorised solvers have the ability to invoke settlements.\\n    /// Any valid authenticator implements an isSolver method called by the onlySolver\\n    /// modifier below.\\n    GPv2Authentication public immutable authenticator;\\n\\n    /// @dev The allowance manager which has access to order funds. This\\n    /// contract is created during deployment\\n    GPv2AllowanceManager public immutable allowanceManager;\\n\\n    /// @dev Map each user order by UID to the amount that has been filled so\\n    /// far. If this amount is larger than or equal to the amount traded in the\\n    /// order (amount sold for sell orders, amount bought for buy orders) then\\n    /// the order cannot be traded anymore. If the order is fill or kill, then\\n    /// this value is only used to determine whether the order has already been\\n    /// executed.\\n    mapping(bytes => uint256) public filledAmount;\\n\\n    /// @dev Event emitted for each executed trade.\\n    event Trade(\\n        address indexed owner,\\n        IERC20 sellToken,\\n        IERC20 buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 feeAmount,\\n        bytes orderUid\\n    );\\n\\n    /// @dev Event emitted for each executed interaction.\\n    ///\\n    /// For gas effeciency, only the interaction calldata selector (first 4\\n    /// bytes) is included in the event. For interactions without calldata or\\n    /// whose calldata is shorter than 4 bytes, the selector will be `0`.\\n    event Interaction(address indexed target, uint256 value, bytes4 selector);\\n\\n    /// @dev Event emitted when a settlement complets\\n    event Settlement(address indexed solver);\\n\\n    /// @dev Event emitted when an order is invalidated.\\n    event OrderInvalidated(address indexed owner, bytes orderUid);\\n\\n    constructor(GPv2Authentication authenticator_) {\\n        authenticator = authenticator_;\\n        allowanceManager = new GPv2AllowanceManager();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // NOTE: Include an empty receive function so that the settlement\\n        // contract can receive Ether from contract interactions.\\n    }\\n\\n    /// @dev This modifier is called by settle function to block any non-listed\\n    /// senders from settling batches.\\n    modifier onlySolver {\\n        require(authenticator.isSolver(msg.sender), \\\"GPv2: not a solver\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that an external function is only callable as a\\n    /// settlement interaction.\\n    modifier onlyInteraction {\\n        require(address(this) == msg.sender, \\\"GPv2: not an interaction\\\");\\n        _;\\n    }\\n\\n    /// @dev Settle the specified orders at a clearing price. Note that it is\\n    /// the responsibility of the caller to ensure that all GPv2 invariants are\\n    /// upheld for the input settlement, otherwise this call will revert.\\n    /// Namely:\\n    /// - All orders are valid and signed\\n    /// - Accounts have sufficient balance and approval.\\n    /// - Settlement contract has sufficient balance to execute trades. Note\\n    ///   this implies that the accumulated fees held in the contract can also\\n    ///   be used for settlement. This is OK since:\\n    ///   - Solvers need to be authorized\\n    ///   - Misbehaving solvers will be slashed for abusing accumulated fees for\\n    ///     settlement\\n    ///   - Critically, user orders are entirely protected\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// Trades encode tokens as indices into this array.\\n    /// @param clearingPrices An array of clearing prices where the `i`-th price\\n    /// is for the `i`-th token in the [`tokens`] array.\\n    /// @param trades Trades for signed orders.\\n    /// @param interactions Smart contract interactions split into three\\n    /// separate lists to be run before the settlement, during the settlement\\n    /// and after the settlement respectively.\\n    function settle(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades,\\n        GPv2Interaction.Data[][3] calldata interactions\\n    ) external nonReentrant onlySolver {\\n        executeInteractions(interactions[0]);\\n\\n        GPv2TradeExecution.Data[] memory executedTrades =\\n            computeTradeExecutions(tokens, clearingPrices, trades);\\n\\n        allowanceManager.transferIn(executedTrades);\\n\\n        executeInteractions(interactions[1]);\\n\\n        transferOut(executedTrades);\\n\\n        executeInteractions(interactions[2]);\\n\\n        emit Settlement(msg.sender);\\n    }\\n\\n    /// @dev Invalidate onchain an order that has been signed offline.\\n    ///\\n    /// @param orderUid The unique identifier of the order that is to be made\\n    /// invalid after calling this function. The user that created the order\\n    /// must be the the sender of this message. See [`extractOrderUidParams`]\\n    /// for details on orderUid.\\n    function invalidateOrder(bytes calldata orderUid) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: caller does not own order\\\");\\n        filledAmount[orderUid] = uint256(-1);\\n        emit OrderInvalidated(owner, orderUid);\\n    }\\n\\n    /// @dev Free storage from the filled amounts of **expired** orders to claim\\n    /// a gas refund. This method can only be called as an interaction.\\n    ///\\n    /// @param orderUids The unique identifiers of the expired order to free\\n    /// storage for.\\n    function freeFilledAmountStorage(bytes[] calldata orderUids)\\n        external\\n        onlyInteraction\\n    {\\n        freeOrderStorage(filledAmount, orderUids);\\n    }\\n\\n    /// @dev Free storage from the pre signatures of **expired** orders to claim\\n    /// a gas refund. This method can only be called as an interaction.\\n    ///\\n    /// @param orderUids The unique identifiers of the expired order to free\\n    /// storage for.\\n    function freePreSignatureStorage(bytes[] calldata orderUids)\\n        external\\n        onlyInteraction\\n    {\\n        freeOrderStorage(preSignature, orderUids);\\n    }\\n\\n    /// @dev Process all trades one at a time returning the computed net in and\\n    /// out transfers for the trades.\\n    ///\\n    /// This method reverts if processing of any single trade fails. See\\n    /// [`computeTradeExecution`] for more details.\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// @param clearingPrices An array of token clearing prices.\\n    /// @param trades Trades for signed orders.\\n    /// @return executedTrades Array of executed trades.\\n    function computeTradeExecutions(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades\\n    ) internal returns (GPv2TradeExecution.Data[] memory executedTrades) {\\n        RecoveredOrder memory recoveredOrder = allocateRecoveredOrder();\\n\\n        executedTrades = new GPv2TradeExecution.Data[](trades.length);\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            GPv2Trade.Data calldata trade = trades[i];\\n\\n            recoverOrderFromTrade(recoveredOrder, tokens, trade);\\n            computeTradeExecution(\\n                recoveredOrder,\\n                clearingPrices[trade.sellTokenIndex],\\n                clearingPrices[trade.buyTokenIndex],\\n                trade.executedAmount,\\n                executedTrades[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Compute the in and out transfer amounts for a single trade.\\n    /// This function reverts if:\\n    /// - The order has expired\\n    /// - The order's limit price is not respected\\n    /// - The order gets over-filled\\n    /// - The fee discount is larger than the executed fee\\n    ///\\n    /// @param recoveredOrder The recovered order to process.\\n    /// @param sellPrice The price of the order's sell token.\\n    /// @param buyPrice The price of the order's buy token.\\n    /// @param executedAmount The portion of the order to execute. This will be\\n    /// ignored for fill-or-kill orders.\\n    /// @param executedTrade Memory location for computed executed trade data.\\n    function computeTradeExecution(\\n        RecoveredOrder memory recoveredOrder,\\n        uint256 sellPrice,\\n        uint256 buyPrice,\\n        uint256 executedAmount,\\n        GPv2TradeExecution.Data memory executedTrade\\n    ) internal {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n        bytes memory orderUid = recoveredOrder.uid;\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(order.validTo >= block.timestamp, \\\"GPv2: order expired\\\");\\n\\n        executedTrade.owner = recoveredOrder.owner;\\n        executedTrade.receiver = recoveredOrder.receiver;\\n        executedTrade.sellToken = order.sellToken;\\n        executedTrade.buyToken = order.buyToken;\\n\\n        // NOTE: The following computation is derived from the equation:\\n        // ```\\n        // amount_x * price_x = amount_y * price_y\\n        // ```\\n        // Intuitively, if a chocolate bar is 0,50€ and a beer is 4€, 1 beer\\n        // is roughly worth 8 chocolate bars (`1 * 4 = 8 * 0.5`). From this\\n        // equation, we can derive:\\n        // - The limit price for selling `x` and buying `y` is respected iff\\n        // ```\\n        // limit_x * price_x >= limit_y * price_y\\n        // ```\\n        // - The executed amount of token `y` given some amount of `x` and\\n        //   clearing prices is:\\n        // ```\\n        // amount_y = amount_x * price_x / price_y\\n        // ```\\n\\n        require(\\n            order.sellAmount.mul(sellPrice) >= order.buyAmount.mul(buyPrice),\\n            \\\"GPv2: limit price not respected\\\"\\n        );\\n\\n        uint256 executedSellAmount;\\n        uint256 executedBuyAmount;\\n        uint256 executedFeeAmount;\\n        uint256 currentFilledAmount;\\n\\n        // NOTE: Don't use `SafeMath.div` or `SafeMath.sub` anywhere here as it\\n        // allocates a string even if it does not revert. Additionally, `div`\\n        // only checks that the divisor is non-zero and `revert`s in that case\\n        // instead of consuming all of the remaining transaction gas when\\n        // dividing by zero, so no extra checks are needed for those operations.\\n\\n        if (order.kind == GPv2Order.SELL) {\\n            if (order.partiallyFillable) {\\n                executedSellAmount = executedAmount;\\n                executedFeeAmount =\\n                    order.feeAmount.mul(executedSellAmount) /\\n                    order.sellAmount;\\n            } else {\\n                executedSellAmount = order.sellAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedBuyAmount = executedSellAmount.mul(sellPrice) / buyPrice;\\n\\n            currentFilledAmount = filledAmount[orderUid].add(\\n                executedSellAmount\\n            );\\n            require(\\n                currentFilledAmount <= order.sellAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        } else {\\n            if (order.partiallyFillable) {\\n                executedBuyAmount = executedAmount;\\n                executedFeeAmount =\\n                    order.feeAmount.mul(executedBuyAmount) /\\n                    order.buyAmount;\\n            } else {\\n                executedBuyAmount = order.buyAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedSellAmount = executedBuyAmount.mul(buyPrice) / sellPrice;\\n\\n            currentFilledAmount = filledAmount[orderUid].add(executedBuyAmount);\\n            require(\\n                currentFilledAmount <= order.buyAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        }\\n\\n        executedTrade.sellAmount = executedSellAmount.add(executedFeeAmount);\\n        executedTrade.buyAmount = executedBuyAmount;\\n\\n        filledAmount[orderUid] = currentFilledAmount;\\n        emit Trade(\\n            executedTrade.owner,\\n            executedTrade.sellToken,\\n            executedTrade.buyToken,\\n            executedTrade.sellAmount,\\n            executedTrade.buyAmount,\\n            executedFeeAmount,\\n            orderUid\\n        );\\n    }\\n\\n    /// @dev Execute a list of arbitrary contract calls from this contract.\\n    /// @param interactions The list of interactions to execute.\\n    function executeInteractions(GPv2Interaction.Data[] calldata interactions)\\n        internal\\n    {\\n        for (uint256 i; i < interactions.length; i++) {\\n            GPv2Interaction.Data calldata interaction = interactions[i];\\n\\n            // To prevent possible attack on user funds, we explicitly disable\\n            // any interactions with AllowanceManager contract.\\n            require(\\n                interaction.target != address(allowanceManager),\\n                \\\"GPv2: forbidden interaction\\\"\\n            );\\n            GPv2Interaction.execute(interaction);\\n\\n            emit Interaction(\\n                interaction.target,\\n                interaction.value,\\n                GPv2Interaction.selector(interaction)\\n            );\\n        }\\n    }\\n\\n    /// @dev Transfers all buy amounts for the executed trades from the\\n    /// settlement contract to the order owners. This function reverts if any of\\n    /// the ERC20 operations fail.\\n    ///\\n    /// @param trades The executed trades whose buy amounts need to be\\n    /// transferred out.\\n    function transferOut(GPv2TradeExecution.Data[] memory trades) internal {\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            trades[i].transferBuyAmountToOwner();\\n        }\\n    }\\n\\n    /// @dev Claims refund for the specified storage and order UIDs.\\n    ///\\n    /// This method reverts if any of the orders are still valid.\\n    ///\\n    /// @param orderUids Order refund data for freeing storage.\\n    /// @param orderStorage Order storage mapped on a UID.\\n    function freeOrderStorage(\\n        mapping(bytes => uint256) storage orderStorage,\\n        bytes[] calldata orderUids\\n    ) internal {\\n        for (uint256 i = 0; i < orderUids.length; i++) {\\n            bytes calldata orderUid = orderUids[i];\\n\\n            (, , uint32 validTo) = orderUid.extractOrderUidParams();\\n            // solhint-disable-next-line not-rely-on-time\\n            require(validTo < block.timestamp, \\\"GPv2: order still valid\\\");\\n\\n            orderStorage[orderUid] = 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\\ninterface ViewStorageAccessible {\\n    /**\\n     * @dev Same as `simulateDelegatecall` on StorageAccessible. Marked as view so that it can be called from external contracts\\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * @dev Same as `getStorageAt` on StorageAccessible. This method allows reading aribtrary ranges of storage.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\ncontract StorageAccessible {\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) public returns (bytes memory response) {\\n        bytes memory innerCall = abi.encodeWithSelector(\\n            this.simulateDelegatecallInternal.selector,\\n            targetContract,\\n            calldataPayload\\n        );\\n        (, response) = address(this).call(innerCall);\\n        bool innerSuccess = response[response.length - 1] == 0x01;\\n        setLength(response, response.length - 1);\\n        if (innerSuccess) {\\n            return response;\\n        } else {\\n            revertWith(response);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message\\n     * concatenated with the success flag of the inner call as a last byte.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecallInternal(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) external returns (bytes memory response) {\\n        bool success;\\n        (success, response) = targetContract.delegatecall(\\n            calldataPayload\\n        );\\n        revertWith(abi.encodePacked(response, success));\\n    }\\n\\n    function revertWith(bytes memory response) internal pure {\\n        assembly {\\n            revert(add(response, 0x20), mload(response))\\n        }\\n    }\\n\\n    function setLength(bytes memory buffer, uint256 length) internal pure {\\n        assembly {\\n            mstore(buffer, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/GPv2Authentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Authentication Interface\\n/// @author Gnosis Developers\\ninterface GPv2Authentication {\\n    /// @dev determines whether the provided address is an authenticated solver.\\n    /// @param prospectiveSolver the address of prospective solver.\\n    /// @return true when prospectiveSolver is an authenticated solver, otherwise false.\\n    function isSolver(address prospectiveSolver) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2Interaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Interaction Library\\n/// @author Gnosis Developers\\nlibrary GPv2Interaction {\\n    /// @dev Interaction data for performing arbitrary contract interactions.\\n    /// Submitted to [`GPv2Settlement.settle`] for code execution.\\n    struct Data {\\n        address target;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    /// @dev Execute an arbitrary contract interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    function execute(Data calldata interaction) internal {\\n        address target = interaction.target;\\n        uint256 value = interaction.value;\\n        bytes calldata callData = interaction.callData;\\n\\n        // NOTE: Use assembly to call the interaction instead of a low level\\n        // call for two reasons:\\n        // - We don't want to copy the return data, since we discard it for\\n        // interactions.\\n        // - Solidity will under certain conditions generate code to copy input\\n        // calldata twice to memory (the second being a \\\"memcopy loop\\\").\\n        // <https://github.com/gnosis/gp-v2-contracts/pull/417#issuecomment-775091258>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\\n            if iszero(\\n                call(\\n                    gas(),\\n                    target,\\n                    value,\\n                    freeMemoryPointer,\\n                    callData.length,\\n                    0,\\n                    0\\n                )\\n            ) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    /// @return result The 4 byte function selector of the call encoded in\\n    /// this interaction.\\n    function selector(Data calldata interaction)\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        bytes calldata callData = interaction.callData;\\n        if (callData.length >= 4) {\\n            // NOTE: Read the first word of the interaction's calldata. The\\n            // value does not need to be shifted since `bytesN` values are left\\n            // aligned, and the value does not need to be masked since masking\\n            // occurs when the value is accessed and not stored:\\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                result := calldataload(callData.offset)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2Order.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Order Library\\n/// @author Gnosis Developers\\nlibrary GPv2Order {\\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\\n    /// all order parameters that are signed for submitting to GP.\\n    struct Data {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        bytes32 kind;\\n        bool partiallyFillable;\\n    }\\n\\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\n    ///     \\\"Order(\\\" +\\n    ///         \\\"address sellToken,\\\" +\\n    ///         \\\"address buyToken,\\\" +\\n    ///         \\\"address receiver,\\\" +\\n    ///         \\\"uint256 sellAmount,\\\" +\\n    ///         \\\"uint256 buyAmount,\\\" +\\n    ///         \\\"uint32 validTo,\\\" +\\n    ///         \\\"bytes32 appData,\\\" +\\n    ///         \\\"uint256 feeAmount,\\\" +\\n    ///         \\\"string kind,\\\" +\\n    ///         \\\"bool partiallyFillable\\\" +\\n    ///     \\\")\\\"\\n    /// )\\n    /// ```\\n    bytes32 internal constant TYPE_HASH =\\n        hex\\\"d604be04a8c6d2df582ec82eba9b65ce714008acbf9122dd95e499569c8f1a80\\\";\\n\\n    /// @dev The marker value for a sell order for computing the order struct\\n    /// hash. This allows the EIP-712 compatible wallets to display a\\n    /// descriptive string for the order kind (instead of 0 or 1).\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"sell\\\")\\n    /// ```\\n    bytes32 internal constant SELL =\\n        hex\\\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\\\";\\n\\n    /// @dev The OrderKind marker value for a buy order for computing the order\\n    /// struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"buy\\\")\\n    /// ```\\n    bytes32 internal constant BUY =\\n        hex\\\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\\\";\\n\\n    /// @dev Marker address used to indicate that the receiver of the trade\\n    /// proceeds should the owner of the order.\\n    ///\\n    /// This is chosen to be `address(0)` for gas efficiency as it is expected\\n    /// to be the most common case.\\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\\n\\n    /// @dev The byte length of an order unique identifier.\\n    uint256 internal constant UID_LENGTH = 56;\\n\\n    /// @dev Returns the actual receiver for an order. This function checks\\n    /// whether or not the [`receiver`] field uses the marker value to indicate\\n    /// it is the same as the order owner.\\n    ///\\n    /// @return receiver The actual receiver of trade proceeds.\\n    function actualReceiver(Data memory order, address owner)\\n        internal\\n        pure\\n        returns (address receiver)\\n    {\\n        if (order.receiver == RECEIVER_SAME_AS_OWNER) {\\n            receiver = owner;\\n        } else {\\n            receiver = order.receiver;\\n        }\\n    }\\n\\n    /// @dev Return the EIP-712 signing hash for the specified order.\\n    ///\\n    /// @param order The order to compute the EIP-712 signing hash for.\\n    /// @param domainSeparator The EIP-712 domain separator to use.\\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\\n    function hash(Data memory order, bytes32 domainSeparator)\\n        internal\\n        pure\\n        returns (bytes32 orderDigest)\\n    {\\n        bytes32 structHash;\\n\\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\\n        // in the EIP proposal, noting that the order struct has 10 fields, and\\n        // including the type hash `(10 + 1) * 32 = 352` bytes to hash.\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let dataStart := sub(order, 32)\\n            let temp := mload(dataStart)\\n            mstore(dataStart, TYPE_HASH)\\n            structHash := keccak256(dataStart, 352)\\n            mstore(dataStart, temp)\\n        }\\n\\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\\n        // hash using scratch memory past the free memory pointer. The signing\\n        // hash is computed from `\\\"\\\\x19\\\\x01\\\" || domainSeparator || structHash`.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\\n            mstore(add(freeMemoryPointer, 34), structHash)\\n            orderDigest := keccak256(freeMemoryPointer, 66)\\n        }\\n    }\\n\\n    /// @dev Packs order UID parameters into the specified memory location. The\\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\\n    /// it allows re-using the memory for packing the order UID.\\n    ///\\n    /// This function reverts if the order UID buffer is not the correct size.\\n    ///\\n    /// @param orderUid The buffer pack the order UID parameters into.\\n    /// @param orderDigest The EIP-712 struct digest derived from the order\\n    /// parameters.\\n    /// @param owner The address of the user who owns this order.\\n    /// @param validTo The epoch time at which the order will stop being valid.\\n    function packOrderUidParams(\\n        bytes memory orderUid,\\n        bytes32 orderDigest,\\n        address owner,\\n        uint32 validTo\\n    ) internal pure {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: uid buffer overflow\\\");\\n\\n        // NOTE: Write the order UID to the allocated memory buffer. The order\\n        // parameters are written to memory in **reverse order** as memory\\n        // operations write 32-bytes at a time and we want to use a packed\\n        // encoding. This means, for example, that after writing the value of\\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\\n        // only 20 bytes and `20:32` should be `0`s:\\n        //\\n        //        |           1111111111222222222233333333334444444444555555\\n        //   byte | 01234567890123456789012345678901234567890123456789012345\\n        // -------+---------------------------------------------------------\\n        //  field | [.........orderDigest..........][......owner.......][vT]\\n        // -------+---------------------------------------------------------\\n        // mstore |                         [000000000000000000000000000.vT]\\n        //        |                     [00000000000.......owner.......]\\n        //        | [.........orderDigest..........]\\n        //\\n        // Additionally, since Solidity `bytes memory` are length prefixed,\\n        // 32 needs to be added to all the offsets.\\n        //\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(orderUid, 56), validTo)\\n            mstore(add(orderUid, 52), owner)\\n            mstore(add(orderUid, 32), orderDigest)\\n        }\\n    }\\n\\n    /// @dev Extracts specific order information from the standardized unique\\n    /// order id of the protocol.\\n    ///\\n    /// @param orderUid The unique identifier used to represent an order in\\n    /// the protocol. This uid is the packed concatenation of the order digest,\\n    /// the validTo order parameter and the address of the user who created the\\n    /// order. It is used by the user to interface with the contract directly,\\n    /// and not by calls that are triggered by the solvers.\\n    /// @return orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the user who owns this order.\\n    /// @return validTo The epoch time at which the order will stop being valid.\\n    function extractOrderUidParams(bytes calldata orderUid)\\n        internal\\n        pure\\n        returns (\\n            bytes32 orderDigest,\\n            address owner,\\n            uint32 validTo\\n        )\\n    {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: invalid uid\\\");\\n\\n        // Use assembly to efficiently decode packed calldata.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            orderDigest := calldataload(orderUid.offset)\\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2Trade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../mixins/GPv2Signing.sol\\\";\\nimport \\\"./GPv2Order.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Trade Library.\\n/// @author Gnosis Developers\\nlibrary GPv2Trade {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev A struct representing a trade to be executed as part a batch\\n    /// settlement.\\n    struct Data {\\n        uint256 sellTokenIndex;\\n        uint256 buyTokenIndex;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        uint256 flags;\\n        uint256 executedAmount;\\n        bytes signature;\\n    }\\n\\n    /// @dev Extracts the order data and signing scheme for the specified trade.\\n    ///\\n    /// @param trade The trade.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param order The memory location to extract the order data to.\\n    function extractOrder(\\n        Data calldata trade,\\n        IERC20[] calldata tokens,\\n        GPv2Order.Data memory order\\n    ) internal pure returns (GPv2Signing.Scheme signingScheme) {\\n        order.sellToken = tokens[trade.sellTokenIndex];\\n        order.buyToken = tokens[trade.buyTokenIndex];\\n        order.receiver = trade.receiver;\\n        order.sellAmount = trade.sellAmount;\\n        order.buyAmount = trade.buyAmount;\\n        order.validTo = trade.validTo;\\n        order.appData = trade.appData;\\n        order.feeAmount = trade.feeAmount;\\n        (order.kind, order.partiallyFillable, signingScheme) = extractFlags(\\n            trade.flags\\n        );\\n    }\\n\\n    /// @dev Decodes trade flags.\\n    ///\\n    /// Trade flags are used to tightly encode information on how to decode\\n    /// an order. Examples that directly affect the structure of an order are\\n    /// the kind of order (either a sell or a buy order) as well as whether the\\n    /// order is partially fillable or if it is a \\\"fill-or-kill\\\" order. It also\\n    /// encodes the signature scheme used to validate the order. As the most\\n    /// likely values are fill-or-kill sell orders by an externally owned\\n    /// account, the flags are chosen such that `0x00` represents this kind of\\n    /// order. The flags byte uses the following format:\\n    ///\\n    /// ```\\n    /// bit | 31 ... 4 | 3 | 2 | 1 | 0 |\\n    /// ----+----------+-------+---+---+\\n    ///     | reserved | *   * | * | * |\\n    ///                  |   |   |   |\\n    ///                  |   |   |   +---- order kind bit, 0 for a sell order\\n    ///                  |   |   |         and 1 for a buy order\\n    ///                  |   |   |\\n    ///                  |   |   +-------- order fill bit, 0 for fill-or-kill\\n    ///                  |   |             and 1 for a partially fillable order\\n    ///                  |   |\\n    ///                  +---+------------ signature scheme bits:\\n    ///                                    00: EIP-712\\n    ///                                    01: eth_sign\\n    ///                                    10: EIP-1271\\n    ///                                    11: pre_sign\\n    /// ```\\n    function extractFlags(uint256 flags)\\n        internal\\n        pure\\n        returns (\\n            bytes32 kind,\\n            bool partiallyFillable,\\n            GPv2Signing.Scheme signingScheme\\n        )\\n    {\\n        if (flags & 0x01 == 0) {\\n            kind = GPv2Order.SELL;\\n        } else {\\n            kind = GPv2Order.BUY;\\n        }\\n        partiallyFillable = flags & 0x02 != 0;\\n\\n        // NOTE: Take advantage of the fact that Solidity will revert if the\\n        // following expression does not produce a valid enum value. This means\\n        // we check here that the leading reserved bits must be 0.\\n        signingScheme = GPv2Signing.Scheme(flags >> 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/mixins/GPv2Signing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/GPv2EIP1271.sol\\\";\\nimport \\\"../libraries/GPv2Order.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Signing Library.\\n/// @author Gnosis Developers\\nabstract contract GPv2Signing {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev Recovered trade data containing the extracted order and the\\n    /// recovered owner address.\\n    struct RecoveredOrder {\\n        GPv2Order.Data data;\\n        bytes uid;\\n        address owner;\\n        address receiver;\\n    }\\n\\n    /// @dev Signing scheme used for recovery.\\n    enum Scheme {Eip712, EthSign, Eip1271, PreSign}\\n\\n    /// @dev The EIP-712 domain type hash used for computing the domain\\n    /// separator.\\n    bytes32 private constant DOMAIN_TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev The EIP-712 domain name used for computing the domain separator.\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"Gnosis Protocol\\\");\\n\\n    /// @dev The EIP-712 domain version used for computing the domain separator.\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"v2\\\");\\n\\n    /// @dev Marker value indicating an order is pre-signed.\\n    uint256 private constant PRE_SIGNED =\\n        uint256(keccak256(\\\"GPv2Signing.Scheme.PreSign\\\"));\\n\\n    /// @dev The domain separator used for signing orders that gets mixed in\\n    /// making signatures for different domains incompatible. This domain\\n    /// separator is computed following the EIP-712 standard and has replay\\n    /// protection mixed in so that signed orders are only valid for specific\\n    /// GPv2 contracts.\\n    bytes32 public immutable domainSeparator;\\n\\n    /// @dev Storage indicating whether or not an order has been signed by a\\n    /// particular address.\\n    mapping(bytes => uint256) public preSignature;\\n\\n    /// @dev Event that is emitted when an account either pre-signs an order or\\n    /// revokes an existing pre-signature.\\n    event PreSignature(address indexed owner, bytes orderUid, bool signed);\\n\\n    constructor() {\\n        // NOTE: Currently, the only way to get the chain ID in solidity is\\n        // using assembly.\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Sets a presignature for the specified order UID.\\n    ///\\n    /// @param orderUid The unique identifier of the order to pre-sign.\\n    function setPreSignature(bytes calldata orderUid, bool signed) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: cannot presign order\\\");\\n        if (signed) {\\n            preSignature[orderUid] = PRE_SIGNED;\\n        } else {\\n            preSignature[orderUid] = 0;\\n        }\\n        emit PreSignature(owner, orderUid, signed);\\n    }\\n\\n    /// @dev Returns an empty recovered order with a pre-allocated buffer for\\n    /// packing the unique identifier.\\n    ///\\n    /// @return recoveredOrder The empty recovered order data.\\n    function allocateRecoveredOrder()\\n        internal\\n        pure\\n        returns (RecoveredOrder memory recoveredOrder)\\n    {\\n        recoveredOrder.uid = new bytes(GPv2Order.UID_LENGTH);\\n    }\\n\\n    /// @dev Extracts order data and recovers the signer from the specified\\n    /// trade.\\n    ///\\n    /// @param recoveredOrder Memory location used for writing the recovered order data.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param trade The trade data to recover the order data from.\\n    function recoverOrderFromTrade(\\n        RecoveredOrder memory recoveredOrder,\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) internal view {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n\\n        Scheme signingScheme = GPv2Trade.extractOrder(trade, tokens, order);\\n        (bytes32 orderDigest, address owner) =\\n            recoverOrderSigner(order, signingScheme, trade.signature);\\n\\n        recoveredOrder.uid.packOrderUidParams(\\n            orderDigest,\\n            owner,\\n            order.validTo\\n        );\\n        recoveredOrder.owner = owner;\\n        recoveredOrder.receiver = order.actualReceiver(owner);\\n    }\\n\\n    /// @dev The length of any signature from an externally owned account.\\n    uint256 private constant ECDSA_SIGNATURE_LENGTH = 65;\\n\\n    /// @dev Recovers an order's signer from the specified order and signature.\\n    ///\\n    /// @param order The order to recover a signature for.\\n    /// @param signingScheme The signing scheme.\\n    /// @param signature The signature bytes.\\n    /// @return orderDigest The computed order hash.\\n    /// @return owner The recovered address from the specified signature.\\n    function recoverOrderSigner(\\n        GPv2Order.Data memory order,\\n        Scheme signingScheme,\\n        bytes calldata signature\\n    ) internal view returns (bytes32 orderDigest, address owner) {\\n        orderDigest = order.hash(domainSeparator);\\n        if (signingScheme == Scheme.Eip712) {\\n            owner = recoverEip712Signer(orderDigest, signature);\\n        } else if (signingScheme == Scheme.EthSign) {\\n            owner = recoverEthsignSigner(orderDigest, signature);\\n        } else if (signingScheme == Scheme.Eip1271) {\\n            owner = recoverEip1271Signer(orderDigest, signature);\\n        } else {\\n            // signingScheme == Scheme.PreSign\\n            owner = recoverPreSigner(orderDigest, signature, order.validTo);\\n        }\\n    }\\n\\n    /// @dev Perform an ECDSA recover for the specified message and calldata\\n    /// signature.\\n    ///\\n    /// The signature is encoded by tighyly packing the following struct:\\n    /// ```\\n    /// struct EncodedSignature {\\n    ///     bytes32 r;\\n    ///     bytes32 s;\\n    ///     uint8 v;\\n    /// }\\n    /// ```\\n    ///\\n    /// @param message The signed message.\\n    /// @param encodedSignature The encoded signature.\\n    function ecdsaRecover(bytes32 message, bytes calldata encodedSignature)\\n        internal\\n        pure\\n        returns (address signer)\\n    {\\n        require(\\n            encodedSignature.length == ECDSA_SIGNATURE_LENGTH,\\n            \\\"GPv2: malformed ecdsa signature\\\"\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // NOTE: Use assembly to efficiently decode signature data.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // r = uint256(encodedSignature[0:32])\\n            r := calldataload(encodedSignature.offset)\\n            // s = uint256(encodedSignature[32:64])\\n            s := calldataload(add(encodedSignature.offset, 32))\\n            // v = uint8(encodedSignature[64])\\n            v := shr(248, calldataload(add(encodedSignature.offset, 64)))\\n        }\\n\\n        signer = ecrecover(message, v, r, s);\\n        require(signer != address(0), \\\"GPv2: invalid ecdsa signature\\\");\\n    }\\n\\n    /// @dev Decodes signature bytes originating from an EIP-712-encoded\\n    /// signature.\\n    ///\\n    /// EIP-712 signs typed data. The specifications are described in the\\n    /// related EIP (<https://eips.ethereum.org/EIPS/eip-712>).\\n    ///\\n    /// EIP-712 signatures are encoded as standard ECDSA signatures as described\\n    /// in the corresponding decoding function [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEip712Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        owner = ecdsaRecover(orderDigest, encodedSignature);\\n    }\\n\\n    /// @dev Decodes signature bytes originating from the output of the eth_sign\\n    /// RPC call.\\n    ///\\n    /// The specifications are described in the Ethereum documentation\\n    /// (<https://eth.wiki/json-rpc/API#eth_sign>).\\n    ///\\n    /// eth_sign signatures are encoded as standard ECDSA signatures as\\n    /// described in the corresponding decoding function\\n    /// [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEthsignSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        // The signed message is encoded as:\\n        // `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" || length || data`, where\\n        // the length is a constant (32 bytes) and the data is defined as:\\n        // `orderDigest`.\\n        bytes32 ethsignDigest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    orderDigest\\n                )\\n            );\\n\\n        owner = ecdsaRecover(ethsignDigest, encodedSignature);\\n    }\\n\\n    /// @dev Verifies the input calldata as an EIP-1271 contract signature and\\n    /// returns the address of the signer.\\n    ///\\n    /// The encoded signature tightly packs the following struct:\\n    ///\\n    /// ```\\n    /// struct EncodedEip1271Signature {\\n    ///     address owner;\\n    ///     bytes signature;\\n    /// }\\n    /// ```\\n    ///\\n    /// This function enforces that the encoded data stores enough bytes to\\n    /// cover the full length of the decoded signature.\\n    ///\\n    /// @param encodedSignature The encoded EIP-1271 signature.\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the signer.\\n    function recoverEip1271Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal view returns (address owner) {\\n        // NOTE: Use assembly to read the verifier address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        // NOTE: Configure prettier to ignore the following line as it causes\\n        // a panic in the Solidity plugin.\\n        // prettier-ignore\\n        bytes calldata signature = encodedSignature[20:];\\n\\n        require(\\n            EIP1271Verifier(owner).isValidSignature(orderDigest, signature) ==\\n                GPv2EIP1271.MAGICVALUE,\\n            \\\"GPv2: invalid eip1271 signature\\\"\\n        );\\n    }\\n\\n    /// @dev Verifies the order has been pre-signed. The signature is the\\n    /// address of the signer of the order.\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature The pre-sign signature reprenting the order UID.\\n    /// @param validTo The order expiry timestamp.\\n    /// @return owner The address of the signer.\\n    function recoverPreSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature,\\n        uint32 validTo\\n    ) internal view returns (address owner) {\\n        require(encodedSignature.length == 20, \\\"GPv2: malformed presignature\\\");\\n        // NOTE: Use assembly to read the owner address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        bytes memory orderUid = new bytes(GPv2Order.UID_LENGTH);\\n        orderUid.packOrderUidParams(orderDigest, owner, validTo);\\n\\n        require(\\n            preSignature[orderUid] == PRE_SIGNED,\\n            \\\"GPv2: order not presigned\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/GPv2EIP1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nlibrary GPv2EIP1271 {\\n    /// @dev Value returned by a call to `isValidSignature` if the signature\\n    /// was verified successfully. The value is defined in EIP-1271 as:\\n    /// bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n}\\n\\n/// @title EIP1271 Interface\\n/// @dev Standardized interface for an implementation of smart contract\\n/// signatures as described in EIP-1271. The code that follows is identical to\\n/// the code in the standard with the exception of formatting and syntax\\n/// changes to adapt the code to our Solidity version.\\ninterface EIP1271Verifier {\\n    /// @dev Should return whether the signature provided is valid for the\\n    /// provided data\\n    /// @param _hash      Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _data\\n    ///\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for\\n    /// solc > 0.5)\\n    /// MUST allow external calls\\n    ///\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2SettlementTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../GPv2Settlement.sol\\\";\\nimport \\\"../libraries/GPv2Interaction.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\nimport \\\"../libraries/GPv2TradeExecution.sol\\\";\\n\\ncontract GPv2SettlementTestInterface is GPv2Settlement {\\n    constructor(GPv2Authentication authenticator_)\\n        GPv2Settlement(authenticator_)\\n    // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    function computeTradeExecutionsTest(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades\\n    ) external returns (GPv2TradeExecution.Data[] memory executedTrades) {\\n        executedTrades = computeTradeExecutions(tokens, clearingPrices, trades);\\n    }\\n\\n    function computeTradeExecutionMemoryTest() external returns (uint256 mem) {\\n        RecoveredOrder memory recoveredOrder;\\n        GPv2TradeExecution.Data memory executedTrade;\\n\\n        // NOTE: Solidity stores the free memory pointer at address 0x40. Read\\n        // it before and after calling `processOrder` to ensure that there are\\n        // no memory allocations.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mem := mload(0x40)\\n        }\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        recoveredOrder.data.validTo = uint32(block.timestamp);\\n        computeTradeExecution(recoveredOrder, 1, 1, 0, executedTrade);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mem := sub(mload(0x40), mem)\\n        }\\n    }\\n\\n    function transferOutTest(GPv2TradeExecution.Data[] memory trades) external {\\n        transferOut(trades);\\n    }\\n\\n    function executeInteractionsTest(\\n        GPv2Interaction.Data[] calldata interactions\\n    ) external {\\n        executeInteractions(interactions);\\n    }\\n\\n    function freeFilledAmountStorageTest(bytes[] calldata orderUids) external {\\n        this.freeFilledAmountStorage(orderUids);\\n    }\\n\\n    function freePreSignatureStorageTest(bytes[] calldata orderUids) external {\\n        this.freePreSignatureStorage(orderUids);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2TradeExecutionTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/GPv2TradeExecution.sol\\\";\\n\\ncontract GPv2TradeExecutionTestInterface {\\n    using GPv2TradeExecution for GPv2TradeExecution.Data;\\n\\n    function transferSellAmountToRecipientTest(\\n        GPv2TradeExecution.Data calldata trade,\\n        address recipient\\n    ) external {\\n        GPv2TradeExecution.transferSellAmountToRecipient(trade, recipient);\\n    }\\n\\n    function transferBuyAmountToOwnerTest(\\n        GPv2TradeExecution.Data calldata trade\\n    ) external {\\n        trade.transferBuyAmountToOwner();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2SafeERC20TestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/GPv2SafeERC20.sol\\\";\\n\\ncontract GPv2SafeERC20TestInterface {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    function transfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) public {\\n        token.safeTransfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public {\\n        token.safeTransferFrom(from, to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/vendor/ChiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n// Vendored from: https://github.com/1inch-exchange/chi/blob/master/contracts/ChiToken.sol\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nabstract contract ERC20WithoutTotalSupply is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 allowed = _allowances[sender][msg.sender];\\n        if ((allowed >> 255) == 0) {\\n            _approve(sender, msg.sender, allowed.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        }\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        uint256 allowed = _allowances[account][msg.sender];\\n        if ((allowed >> 255) == 0) {\\n            _approve(account, msg.sender, allowed.sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n        }\\n    }\\n}\\n\\n\\ncontract ChiToken is IERC20, ERC20WithoutTotalSupply {\\n    string constant public name = \\\"Chi Token by 1inch\\\";\\n    string constant public symbol = \\\"CHI\\\";\\n    uint8 constant public decimals = 0;\\n\\n    uint256 public totalMinted;\\n    uint256 public totalBurned;\\n\\n    function totalSupply() public view override returns(uint256) {\\n        return totalMinted - totalBurned;\\n    }\\n\\n    function mint(uint256 value) public {\\n        uint256 offset = totalMinted;\\n        assembly {\\n            mstore(0, 0x746d4946c0e9F43F4Dee607b0eF1fA1c3318585733ff6000526015600bf30000)\\n\\n            for {let i := div(value, 32)} i {i := sub(i, 1)} {\\n                pop(create2(0, 0, 30, add(offset, 0))) pop(create2(0, 0, 30, add(offset, 1)))\\n                pop(create2(0, 0, 30, add(offset, 2))) pop(create2(0, 0, 30, add(offset, 3)))\\n                pop(create2(0, 0, 30, add(offset, 4))) pop(create2(0, 0, 30, add(offset, 5)))\\n                pop(create2(0, 0, 30, add(offset, 6))) pop(create2(0, 0, 30, add(offset, 7)))\\n                pop(create2(0, 0, 30, add(offset, 8))) pop(create2(0, 0, 30, add(offset, 9)))\\n                pop(create2(0, 0, 30, add(offset, 10))) pop(create2(0, 0, 30, add(offset, 11)))\\n                pop(create2(0, 0, 30, add(offset, 12))) pop(create2(0, 0, 30, add(offset, 13)))\\n                pop(create2(0, 0, 30, add(offset, 14))) pop(create2(0, 0, 30, add(offset, 15)))\\n                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\\n                pop(create2(0, 0, 30, add(offset, 18))) pop(create2(0, 0, 30, add(offset, 19)))\\n                pop(create2(0, 0, 30, add(offset, 20))) pop(create2(0, 0, 30, add(offset, 21)))\\n                pop(create2(0, 0, 30, add(offset, 22))) pop(create2(0, 0, 30, add(offset, 23)))\\n                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\\n                pop(create2(0, 0, 30, add(offset, 26))) pop(create2(0, 0, 30, add(offset, 27)))\\n                pop(create2(0, 0, 30, add(offset, 28))) pop(create2(0, 0, 30, add(offset, 29)))\\n                pop(create2(0, 0, 30, add(offset, 30))) pop(create2(0, 0, 30, add(offset, 31)))\\n                offset := add(offset, 32)\\n            }\\n\\n            for {let i := and(value, 0x1F)} i {i := sub(i, 1)} {\\n                pop(create2(0, 0, 30, offset))\\n                offset := add(offset, 1)\\n            }\\n        }\\n\\n        _mint(msg.sender, value);\\n        totalMinted = offset;\\n    }\\n\\n    function computeAddress2(uint256 salt) public pure returns (address child) {\\n        assembly {\\n            let data := mload(0x40)\\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\\n            mstore(add(data, 21), salt)\\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\\n            child := and(keccak256(data, 85), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    function _destroyChildren(uint256 value) internal {\\n        assembly {\\n            let i := sload(totalBurned.slot)\\n            let end := add(i, value)\\n            sstore(totalBurned.slot, end)\\n\\n            let data := mload(0x40)\\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\\n            let ptr := add(data, 21)\\n            for { } lt(i, end) { i := add(i, 1) } {\\n                mstore(ptr, i)\\n                pop(call(gas(), keccak256(data, 85), 0, 0, 0, 0, 0))\\n            }\\n        }\\n    }\\n\\n    function free(uint256 value) public returns (uint256)  {\\n        if (value > 0) {\\n            _burn(msg.sender, value);\\n            _destroyChildren(value);\\n        }\\n        return value;\\n    }\\n\\n    function freeUpTo(uint256 value) public returns (uint256) {\\n        return free(Math.min(value, balanceOf(msg.sender)));\\n    }\\n\\n    function freeFrom(address from, uint256 value) public returns (uint256) {\\n        if (value > 0) {\\n            _burnFrom(from, value);\\n            _destroyChildren(value);\\n        }\\n        return value;\\n    }\\n\\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\\n        return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * This file is adapted the OpenZeppelin implementation which is not yet\\n * released on npm to also allow minting.\\n *\\n * Once a new OpenZeppelin version is released, this contract should be removed.\\n *\\n * Origianl source:\\n * <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/drafts/IERC20Permit.sol>\\n */\\n\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ncontract ERC20Permit is ERC20PresetMinterPauser {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory symbol) ERC20PresetMinterPauser(symbol, symbol) {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(symbol)),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(\\n                    _PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    value,\\n                    _nonces[owner].current(),\\n                    deadline\\n                )\\n            );\\n\\n        bytes32 hash =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash)\\n            );\\n\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n\\n        address signer = ECDSA.recover(hash, signature);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/GPv2AllowListAuthentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/GPv2Authentication.sol\\\";\\nimport \\\"./libraries/GPv2EIP1967.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Access Control Contract\\n/// @author Gnosis Developers\\ncontract GPv2AllowListAuthentication is\\n    GPv2Authentication,\\n    Initializable,\\n    StorageAccessible\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public manager;\\n\\n    EnumerableSet.AddressSet private solvers;\\n\\n    function initializeManager(address manager_) external initializer {\\n        manager = manager_;\\n    }\\n\\n    modifier onlyManager() {\\n        require(manager == msg.sender, \\\"GPv2: caller not manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyManagerOrOwner() {\\n        require(\\n            manager == msg.sender || GPv2EIP1967.getAdmin() == msg.sender,\\n            \\\"GPv2: not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function setManager(address manager_) external onlyManagerOrOwner {\\n        manager = manager_;\\n    }\\n\\n    function addSolver(address solver) external onlyManager {\\n        solvers.add(solver);\\n    }\\n\\n    function removeSolver(address solver) external onlyManager {\\n        solvers.remove(solver);\\n    }\\n\\n    function isSolver(address prospectiveSolver)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return solvers.contains(prospectiveSolver);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/GPv2EIP1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nlibrary GPv2EIP1967 {\\n    /// @dev The storage slot where the proxy administrator is stored, defined\\n    /// as `keccak256('eip1967.proxy.admin') - 1`.\\n    bytes32 internal constant ADMIN_SLOT =\\n        hex\\\"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\\";\\n\\n    /// @dev Returns the address stored in the EIP-1967 administrator storage\\n    /// slot for the current contract. If this method is not called from an\\n    /// contract behind an EIP-1967 proxy, then it will most likely return\\n    /// `address(0)`, as the implementation slot is likely to be unset.\\n    ///\\n    /// @return admin The administrator address.\\n    function getAdmin() internal view returns (address admin) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            admin := sload(ADMIN_SLOT)\\n        }\\n    }\\n\\n    /// @dev Sets the storage at the EIP-1967 administrator slot to be the\\n    /// specified address.\\n    ///\\n    /// @param admin The administrator address to set.\\n    function setAdmin(address admin) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(ADMIN_SLOT, admin)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2AllowListAuthenticationV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../GPv2AllowListAuthentication.sol\\\";\\n\\ncontract GPv2AllowListAuthenticationV2 is GPv2AllowListAuthentication {\\n    function newMethod() external pure returns (uint256) {\\n        return 1337;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2AllowListAuthenticationTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../GPv2AllowListAuthentication.sol\\\";\\nimport \\\"../libraries/GPv2EIP1967.sol\\\";\\n\\ncontract GPv2AllowListAuthenticationTestInterface is\\n    GPv2AllowListAuthentication\\n{\\n    constructor(address owner) {\\n        GPv2EIP1967.setAdmin(owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/reader/AllowListStorageReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../GPv2AllowListAuthentication.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Allow List Storage Reader\\n/// @author Gnosis Developers\\ncontract AllowListStorageReader {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address private _owner;\\n    EnumerableSet.AddressSet private solvers;\\n\\n    function getSolverAt(uint256 index) external view returns (address) {\\n        return solvers.at(index);\\n    }\\n\\n    function numSolvers() external view returns (uint256) {\\n        return solvers.length();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2TradeTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/GPv2Order.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\n\\ncontract GPv2TradeTestInterface {\\n    function extractOrderTest(\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) external pure returns (GPv2Order.Data memory order) {\\n        GPv2Trade.extractOrder(trade, tokens, order);\\n    }\\n\\n    function extractFlagsTest(uint256 flags)\\n        external\\n        pure\\n        returns (\\n            bytes32 kind,\\n            bool partiallyFillable,\\n            GPv2Signing.Scheme signingScheme\\n        )\\n    {\\n        return GPv2Trade.extractFlags(flags);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2SigningTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/GPv2Order.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\nimport \\\"../mixins/GPv2Signing.sol\\\";\\n\\ncontract GPv2SigningTestInterface is GPv2Signing {\\n    function recoverOrderFromTradeTest(\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) external view returns (RecoveredOrder memory recoveredOrder) {\\n        recoveredOrder = allocateRecoveredOrder();\\n        recoverOrderFromTrade(recoveredOrder, tokens, trade);\\n    }\\n\\n    function recoverOrderSignerTest(\\n        GPv2Order.Data memory order,\\n        GPv2Signing.Scheme signingScheme,\\n        bytes calldata signature\\n    ) external view returns (address owner) {\\n        (, owner) = recoverOrderSigner(order, signingScheme, signature);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/StateChangingERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/GPv2EIP1271.sol\\\";\\n\\n/// @dev This contract implements the standard described in EIP-1271 with the\\n/// minor change that the verification function changes the state. This is\\n/// forbidden by the standard specifications.\\ncontract StateChangingEIP1271 {\\n    uint256 public state = 0;\\n\\n    // solhint-disable-next-line no-unused-vars\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        public\\n        returns (bytes4 magicValue)\\n    {\\n        state += 1;\\n        magicValue = GPv2EIP1271.MAGICVALUE;\\n\\n        // The following lines are here to suppress no-unused-var compiler-time\\n        // warnings when compiling the contracts. The warning is forwarded by\\n        // Hardhat from Solc. It is currently not possible to selectively\\n        // ignore Solc warinings:\\n        // <https://github.com/ethereum/solidity/issues/269>\\n        _hash;\\n        _signature;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2OrderTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/GPv2Order.sol\\\";\\n\\ncontract GPv2OrderTestInterface {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    function typeHashTest() external pure returns (bytes32) {\\n        return GPv2Order.TYPE_HASH;\\n    }\\n\\n    function hashTest(GPv2Order.Data memory order, bytes32 domainSeparator)\\n        external\\n        pure\\n        returns (bytes32 orderDigest)\\n    {\\n        orderDigest = order.hash(domainSeparator);\\n    }\\n\\n    function packOrderUidParamsTest(\\n        uint256 bufferLength,\\n        bytes32 orderDigest,\\n        address owner,\\n        uint32 validTo\\n    ) external pure returns (bytes memory orderUid) {\\n        orderUid = new bytes(bufferLength);\\n        orderUid.packOrderUidParams(orderDigest, owner, validTo);\\n    }\\n\\n    function extractOrderUidParamsTest(bytes calldata orderUid)\\n        external\\n        pure\\n        returns (\\n            bytes32 orderDigest,\\n            address owner,\\n            uint32 validTo\\n        )\\n    {\\n        return orderUid.extractOrderUidParams();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/test/GPv2InteractionTestInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/GPv2Interaction.sol\\\";\\n\\ncontract GPv2InteractionTestInterface {\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function executeTest(GPv2Interaction.Data calldata interaction) external {\\n        GPv2Interaction.execute(interaction);\\n    }\\n\\n    function selectorTest(GPv2Interaction.Data calldata interaction)\\n        external\\n        pure\\n        returns (bytes4)\\n    {\\n        return GPv2Interaction.selector(interaction);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GPv2TradeExecution.Data[]\",\"name\":\"trades\",\"type\":\"tuple[]\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GPv2AllowanceManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://149613821ec7e26c7ca23bb4d44976eaba202d71fbaa8b8f222beab055627c3b"}]}