{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.10;\r\n    \r\n    // SPDX-License-Identifier: MIT;\r\n    \r\n    \r\n    library SafeMath {\r\n        /**\r\n         * @dev Returns the addition of two unsigned integers, reverting on\r\n         * overflow.\r\n         *\r\n         * Counterpart to Solidity's `+` operator.\r\n         *\r\n         * Requirements:\r\n         * - Addition cannot overflow.\r\n         */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n    \r\n            return c;\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the subtraction of two unsigned integers, reverting on\r\n         * overflow (when the result is negative).\r\n         *\r\n         * Counterpart to Solidity's `-` operator.\r\n         *\r\n         * Requirements:\r\n         * - Subtraction cannot overflow.\r\n         */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n         * overflow (when the result is negative).\r\n         *\r\n         * Counterpart to Solidity's `-` operator.\r\n         *\r\n         * Requirements:\r\n         * - Subtraction cannot overflow.\r\n         *\r\n         * _Available since v2.4.0._\r\n         */\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n    \r\n            return c;\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the multiplication of two unsigned integers, reverting on\r\n         * overflow.\r\n         *\r\n         * Counterpart to Solidity's `*` operator.\r\n         *\r\n         * Requirements:\r\n         * - Multiplication cannot overflow.\r\n         */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n    \r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    \r\n            return c;\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the integer division of two unsigned integers. Reverts on\r\n         * division by zero. The result is rounded towards zero.\r\n         *\r\n         * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n         * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n         * uses an invalid opcode to revert (consuming all remaining gas).\r\n         *\r\n         * Requirements:\r\n         * - The divisor cannot be zero.\r\n         */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n         * division by zero. The result is rounded towards zero.\r\n         *\r\n         * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n         * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n         * uses an invalid opcode to revert (consuming all remaining gas).\r\n         *\r\n         * Requirements:\r\n         * - The divisor cannot be zero.\r\n         *\r\n         * _Available since v2.4.0._\r\n         */\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            // Solidity only automatically asserts when dividing by 0\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    \r\n            return c;\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n         * Reverts when dividing by zero.\r\n         *\r\n         * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n         * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n         * invalid opcode to revert (consuming all remaining gas).\r\n         *\r\n         * Requirements:\r\n         * - The divisor cannot be zero.\r\n         */\r\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return mod(a, b, \"SafeMath: modulo by zero\");\r\n        }\r\n    \r\n        /**\r\n         * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n         * Reverts with custom message when dividing by zero.\r\n         *\r\n         * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n         * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n         * invalid opcode to revert (consuming all remaining gas).\r\n         *\r\n         * Requirements:\r\n         * - The divisor cannot be zero.\r\n         *\r\n         * _Available since v2.4.0._\r\n         */\r\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b != 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n    \r\n    interface IERC20 {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n        function name() external view returns (string memory);\r\n        function symbol() external view returns (string memory);\r\n        function decimals() external view returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n    \r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n    }\r\n    \r\n    contract Mutex {\r\n        bool isLocked;\r\n        modifier noReentrance() {\r\n            require(!isLocked);\r\n            isLocked = true;\r\n            _;\r\n            isLocked = false;\r\n        }\r\n        \r\n    }\r\n    \r\n    contract STIMULUS_FINANCE_Dispatcher is Mutex {\r\n      using SafeMath for uint256;\r\n    \r\n    \r\n      IERC20 public token;\r\n  \r\n      address payable public wallet = 0xC6e6711174227602C1A97723502Fea490F84C569;\r\n      uint256 public rate = 50;\r\n     \r\n      uint256 public trxnCount;\r\n      uint256 public weiRaised;\r\n    \r\n    \r\n      event Bought(uint256 amount);\r\n      event Transfer(address _to, uint256 amount);\r\n      event TransferMultiple(address[] _receivers, uint256 amount);\r\n      event TotalBalance(address sender,uint256 vlue,uint256 balance);\r\n    \r\n      modifier onlyOwner{\r\n          require(msg.sender==wallet);\r\n          _;\r\n      }\r\n      \r\n    constructor(address _token) public {\r\n        token = IERC20(_token);\r\n    }\r\n  \r\n\r\n\r\n    receive() external payable {\r\n        (bool success,) = wallet.call{value:msg.value}(\"\");\r\n        require(success, \"can not transfer funds\");\r\n        buy(msg.sender);\r\n        weiRaised = weiRaised.add(msg.value);\r\n    }\r\n\r\n\r\n    function buy(address _buyer) payable public noReentrance {\r\n        uint256 amountTobuy = _getTokenAmount(msg.value);\r\n        uint256 thisBalance = token.balanceOf(address(this));\r\n        require(amountTobuy > 0, \"You need to send some ether\");\r\n        require(amountTobuy <= thisBalance, \"Not enough tokens in the reserve\");\r\n        TransferHelper.safeTransfer(address(token), _buyer, amountTobuy);\r\n        emit Bought(amountTobuy);\r\n        trxnCount++;\r\n    }\r\n\r\n  \r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(rate);\r\n    }\r\n    \r\n  \r\n    function getEthTokenBal() public view returns(uint256, uint256) {\r\n        return ( address(this).balance, token.balanceOf(address(this)));\r\n    }\r\n  \r\n    function withdrawToken() public onlyOwner{\r\n        uint bal = token.balanceOf(address(this));\r\n        TransferHelper.safeTransfer(address(token), wallet, bal);\r\n        emit Transfer(wallet, bal);\r\n    }\r\n  \r\n    function burn()public onlyOwner {\r\n        \r\n        uint256 bal = token.balanceOf(address(this));\r\n        TransferHelper.safeTransfer(address(token), address(0), bal);\r\n        emit Transfer(address(0), bal);\r\n    }\r\n    \r\n\r\n  \r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\n    library TransferHelper {\r\n        function safeApprove(address token, address to, uint value) internal {\r\n            // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n        }\r\n    \r\n        function safeTransfer(address token, address to, uint value) internal {\r\n            // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n        }\r\n    \r\n        function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n            // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n        }\r\n    \r\n        function safeTransferETH(address to, uint value) internal {\r\n            (bool success,) = to.call{value:value}(new bytes(0));\r\n            require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n        }\r\n    }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vlue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TotalBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMultiple\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthTokenBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trxnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"STIMULUS_FINANCE_Dispatcher","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c30d9776f088e72686e69cd274d446f94f10c4a4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9922c84abe588fd64fb9771451475e6ce193ca80b997f18de16a53c15bed7e1a"}]}