{"status":"1","message":"OK","result":[{"SourceCode":"/*                   \r\n███╗   ██╗███████╗████████╗                         \r\n████╗  ██║██╔════╝╚══██╔══╝                         \r\n██╔██╗ ██║█████╗     ██║                            \r\n██║╚██╗██║██╔══╝     ██║                            \r\n██║ ╚████║██║        ██║                            \r\n╚═╝  ╚═══╝╚═╝        ╚═╝                            \r\n███████╗██╗  ██╗ █████╗ ██████╗ ██████╗ ███████╗    \r\n██╔════╝██║  ██║██╔══██╗██╔══██╗██╔══██╗██╔════╝    \r\n███████╗███████║███████║██████╔╝██║  ██║███████╗    \r\n╚════██║██╔══██║██╔══██║██╔══██╗██║  ██║╚════██║    \r\n███████║██║  ██║██║  ██║██║  ██║██████╔╝███████║    \r\n╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝\r\npresented by LexDAO LLC\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.0;\r\n\r\ninterface IERC20Withdrawal { // brief interface for erc20 token withdrawal\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IERC721transferFrom { // brief interface for erc721 token (nft)\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract NFTShards {\r\n    uint8   public decimals; // fixed unit scaling factor - default 18 to match ETH\r\n    uint256 public totalSupply; // tracks outstanding token mint - mint updateable by manager\r\n    uint256 public totalSupplyCap; // maximum of token mintable\r\n    bytes32 public DOMAIN_SEPARATOR; // eip-2612 permit() pattern - hash identifies contract\r\n    bytes32 constant public PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"); // eip-2612 permit() pattern - hash identifies function for signature\r\n    string  public details; // details token offering, redemption, etc. - updateable by manager\r\n    string  public name; // fixed token name\r\n    string  public symbol; // fixed token symbol\r\n    bool    public transferable; // transferability of token - updateable by manager\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public nonces;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event UpdateDetails(string details);\r\n    event UpdateTransferability(bool transferable);\r\n    \r\n    constructor(\r\n        address _manager,\r\n        uint8 _decimals, \r\n        uint256 _managerSupply,  \r\n        uint256 _totalSupplyCap,\r\n        string memory _details, \r\n        string memory _name, \r\n        string memory _symbol,  \r\n        bool _transferable\r\n    ) {\r\n        decimals = _decimals; \r\n        totalSupplyCap = _totalSupplyCap; \r\n        details = _details; \r\n        name = _name; \r\n        symbol = _symbol;  \r\n        transferable = _transferable; \r\n        if (_managerSupply > 0) {_mint(_manager, _managerSupply);}\r\n        // eip-2612 permit() pattern:\r\n        uint256 chainId;\r\n        assembly {chainId := chainid()}\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(\"1\")),\r\n            chainId,\r\n            address(this)));\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        allowance[owner][spender] = value; \r\n        emit Approval(owner, spender, value); \r\n    }\r\n    \r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from] - value; \r\n        totalSupply = totalSupply - value; \r\n        emit Transfer(from, address(0), value);\r\n    }\r\n    \r\n    function burn(uint256 value) external {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    function burnFrom(address from, uint256 value) external {\r\n        _approve(from, msg.sender, allowance[from][msg.sender] - value);\r\n        _burn(from, value);\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    // Adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= deadline, \"expired\");\r\n        bytes32 hashStruct = keccak256(abi.encode(\r\n                PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                amount,\r\n                nonces[owner]++,\r\n                deadline));\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                hashStruct));\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"!signer\");\r\n        _approve(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from] - value; \r\n        balanceOf[to] = balanceOf[to] + value; \r\n        emit Transfer(from, to, value); \r\n    }\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        require(transferable, \"!transferable\"); \r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferBatch(address[] calldata to, uint256[] calldata value) external {\r\n        require(to.length == value.length, \"!to/value\");\r\n        require(transferable, \"!transferable\");\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(msg.sender, to[i], value[i]);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        _approve(from, msg.sender, allowance[from][msg.sender] - value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    /****************\r\n    MANAGER FUNCTIONS\r\n    ****************/\r\n    modifier onlyManager {\r\n        require(balanceOf[msg.sender] > totalSupply / 2, \"!manager\"); // require simple majority\r\n        _;\r\n    }\r\n    \r\n    function _mint(address to, uint256 value) internal {\r\n        require(totalSupply + value <= totalSupplyCap, \"capped\"); \r\n        balanceOf[to] = balanceOf[to] + value; \r\n        totalSupply = totalSupply + value; \r\n        emit Transfer(address(0), to, value); \r\n    }\r\n    \r\n    function mint(address to, uint256 value) external onlyManager {\r\n        _mint(to, value);\r\n    }\r\n    \r\n    function mintBatch(address[] calldata to, uint256[] calldata value) external onlyManager {\r\n        require(to.length == value.length, \"!to/value\");\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _mint(to[i], value[i]); \r\n        }\r\n    }\r\n    \r\n    function updateDetails(string calldata _details) external onlyManager {\r\n        details = _details;\r\n        emit UpdateDetails(_details);\r\n    }\r\n    \r\n    function updateTransferability(bool _transferable) external onlyManager {\r\n        transferable = _transferable;\r\n        emit UpdateTransferability(_transferable);\r\n    }\r\n    \r\n    function withdrawNFT(address[] calldata nft, address[] calldata withrawTo, uint256[] calldata tokenId) external onlyManager { // withdraw NFT sent to contract\r\n        require(nft.length == withrawTo.length && nft.length == tokenId.length, \"!nft/withdrawTo/tokenId\");\r\n        for (uint256 i = 0; i < nft.length; i++) {\r\n            IERC721transferFrom(nft[i]).transferFrom(address(this), withrawTo[i], tokenId[i]);\r\n        }\r\n    }\r\n    \r\n    function withdrawToken(address[] calldata token, address[] calldata withdrawTo, uint256[] calldata value, bool max) external onlyManager { // withdraw token sent to contract\r\n        require(token.length == withdrawTo.length && token.length == value.length, \"!token/withdrawTo/value\");\r\n        for (uint256 i = 0; i < token.length; i++) {\r\n            uint256 withdrawalValue = value[i];\r\n            if (max) {withdrawalValue = IERC20Withdrawal(token[i]).balanceOf(address(this));}\r\n            IERC20Withdrawal(token[i]).transfer(withdrawTo[i], withdrawalValue);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_managerSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"UpdateDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"UpdateTransferability\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"details\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"updateDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"updateTransferability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nft\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"withrawTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"withdrawTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"max\",\"type\":\"bool\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTShards","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a2000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001a4652414354494f4e414c495a4520414c4c20544845204e465453000000000000000000000000000000000000000000000000000000000000000000000000000c4e6966747920536861726473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e46545300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a206740b911aec39da56f6936b71e22da1299ea8f4fee001d84d57fcb951fab"}]}