{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} abstract contract GasTokenInterface is ERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n} contract GasBurner {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n\r\n    modifier burnGas(uint _amount) {\r\n        if (gasToken.balanceOf(address(this)) >= _amount) {\r\n            gasToken.free(_amount);\r\n        }\r\n\r\n        _;\r\n    }\r\n} abstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n} library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n} library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n} library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n} /// @title Contract with the actuall DSProxy permission calls the automation operations\r\ncontract AaveMonitorProxy is AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint public CHANGE_PERIOD;\r\n    address public monitor;\r\n    address public newMonitor;\r\n    address public lastMonitor;\r\n    uint public changeRequestedTimestamp;\r\n\r\n    mapping(address => bool) public allowed;\r\n\r\n    event MonitorChangeInitiated(address oldMonitor, address newMonitor);\r\n    event MonitorChangeCanceled();\r\n    event MonitorChangeFinished(address monitor);\r\n    event MonitorChangeReverted(address monitor);\r\n\r\n    // if someone who is allowed become malicious, owner can't be changed\r\n    modifier onlyAllowed() {\r\n        require(allowed[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMonitor() {\r\n        require (msg.sender == monitor);\r\n        _;\r\n    }\r\n\r\n    constructor(uint _changePeriod) public {\r\n        CHANGE_PERIOD = _changePeriod * 1 days;\r\n    }\r\n\r\n    /// @notice Only monitor contract is able to call execute on users proxy\r\n    /// @param _owner Address of cdp owner (users DSProxy address)\r\n    /// @param _aaveSaverProxy Address of AaveSaverProxy\r\n    /// @param _data Data to send to AaveSaverProxy\r\n    function callExecute(address _owner, address _aaveSaverProxy, bytes memory _data) public payable onlyMonitor {\r\n        // execute reverts if calling specific method fails\r\n        DSProxyInterface(_owner).execute{value: msg.value}(_aaveSaverProxy, _data);\r\n\r\n        // return if anything left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Allowed users are able to set Monitor contract without any waiting period first time\r\n    /// @param _monitor Address of Monitor contract\r\n    function setMonitor(address _monitor) public onlyAllowed {\r\n        require(monitor == address(0));\r\n        monitor = _monitor;\r\n    }\r\n\r\n    /// @notice Allowed users are able to start procedure for changing monitor\r\n    /// @dev after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change\r\n    /// @param _newMonitor address of new monitor\r\n    function changeMonitor(address _newMonitor) public onlyAllowed {\r\n        require(changeRequestedTimestamp == 0);\r\n\r\n        changeRequestedTimestamp = now;\r\n        lastMonitor = monitor;\r\n        newMonitor = _newMonitor;\r\n\r\n        emit MonitorChangeInitiated(lastMonitor, newMonitor);\r\n    }\r\n\r\n    /// @notice At any point allowed users are able to cancel monitor change\r\n    function cancelMonitorChange() public onlyAllowed {\r\n        require(changeRequestedTimestamp > 0);\r\n\r\n        changeRequestedTimestamp = 0;\r\n        newMonitor = address(0);\r\n\r\n        emit MonitorChangeCanceled();\r\n    }\r\n\r\n    /// @notice Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started\r\n    function confirmNewMonitor() public onlyAllowed {\r\n        require((changeRequestedTimestamp + CHANGE_PERIOD) < now);\r\n        require(changeRequestedTimestamp != 0);\r\n        require(newMonitor != address(0));\r\n\r\n        monitor = newMonitor;\r\n        newMonitor = address(0);\r\n        changeRequestedTimestamp = 0;\r\n\r\n        emit MonitorChangeFinished(monitor);\r\n    }\r\n\r\n    /// @notice Its possible to revert monitor to last used monitor\r\n    function revertMonitor() public onlyAllowed {\r\n        require(lastMonitor != address(0));\r\n\r\n        monitor = lastMonitor;\r\n\r\n        emit MonitorChangeReverted(monitor);\r\n    }\r\n\r\n\r\n    /// @notice Allowed users are able to add new allowed user\r\n    /// @param _user Address of user that will be allowed\r\n    function addAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = true;\r\n    }\r\n\r\n    /// @notice Allowed users are able to remove allowed user\r\n    /// @dev owner is always allowed even if someone tries to remove it from allowed mapping\r\n    /// @param _user Address of allowed user\r\n    function removeAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = false;\r\n    }\r\n\r\n    function setChangePeriod(uint _periodInDays) public onlyAllowed {\r\n        require(_periodInDays * 1 days > CHANGE_PERIOD);\r\n\r\n        CHANGE_PERIOD = _periodInDays * 1 days;\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    /// @param _token address of token to withdraw balance\r\n    function withdrawToken(address _token) public onlyOwner {\r\n        uint balance = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).safeTransfer(msg.sender, balance);\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    function withdrawEth() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Stores subscription information for Aave automatization\r\ncontract AaveSubscriptions is AdminAuth {\r\n\r\n    struct AaveHolder {\r\n        address user;\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        bool boostEnabled;\r\n    }\r\n\r\n    struct SubPosition {\r\n        uint arrPos;\r\n        bool subscribed;\r\n    }\r\n\r\n    AaveHolder[] public subscribers;\r\n    mapping (address => SubPosition) public subscribersPos;\r\n\r\n    uint public changeIndex;\r\n\r\n    event Subscribed(address indexed user);\r\n    event Unsubscribed(address indexed user);\r\n    event Updated(address indexed user);\r\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\r\n\r\n    /// @dev Called by the DSProxy contract which owns the Aave position\r\n    /// @notice Adds the users Aave poistion in the list of subscriptions so it can be monitored\r\n    /// @param _minRatio Minimum ratio below which repay is triggered\r\n    /// @param _maxRatio Maximum ratio after which boost is triggered\r\n    /// @param _optimalBoost Ratio amount which boost should target\r\n    /// @param _optimalRepay Ratio amount which repay should target\r\n    /// @param _boostEnabled Boolean determing if boost is enabled\r\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\r\n\r\n        // if boost is not enabled, set max ratio to max uint\r\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\r\n        require(checkParams(_minRatio, localMaxRatio), \"Must be correct params\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[msg.sender];\r\n\r\n        AaveHolder memory subscription = AaveHolder({\r\n                minRatio: _minRatio,\r\n                maxRatio: localMaxRatio,\r\n                optimalRatioBoost: _optimalBoost,\r\n                optimalRatioRepay: _optimalRepay,\r\n                user: msg.sender,\r\n                boostEnabled: _boostEnabled\r\n            });\r\n\r\n        changeIndex++;\r\n\r\n        if (subInfo.subscribed) {\r\n            subscribers[subInfo.arrPos] = subscription;\r\n\r\n            emit Updated(msg.sender);\r\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\r\n        } else {\r\n            subscribers.push(subscription);\r\n\r\n            subInfo.arrPos = subscribers.length - 1;\r\n            subInfo.subscribed = true;\r\n\r\n            emit Subscribed(msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Called by the users DSProxy\r\n    /// @dev Owner who subscribed cancels his subscription\r\n    function unsubscribe() external {\r\n        _unsubscribe(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks limit if minRatio is bigger than max\r\n    /// @param _minRatio Minimum ratio, bellow which repay can be triggered\r\n    /// @param _maxRatio Maximum ratio, over which boost can be triggered\r\n    /// @return Returns bool if the params are correct\r\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\r\n\r\n        if (_minRatio > _maxRatio) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal method to remove a subscriber from the list\r\n    /// @param _user The actual address that owns the Aave position\r\n    function _unsubscribe(address _user) internal {\r\n        require(subscribers.length > 0, \"Must have subscribers in the list\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        require(subInfo.subscribed, \"Must first be subscribed\");\r\n\r\n        address lastOwner = subscribers[subscribers.length - 1].user;\r\n\r\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\r\n        subInfo2.arrPos = subInfo.arrPos;\r\n\r\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\r\n        subscribers.pop(); // remove last element and reduce arr length\r\n\r\n        changeIndex++;\r\n        subInfo.subscribed = false;\r\n        subInfo.arrPos = 0;\r\n\r\n        emit Unsubscribed(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks if the user is subscribed\r\n    /// @param _user The actual address that owns the Aave position\r\n    /// @return If the user is subscribed\r\n    function isSubscribed(address _user) public view returns (bool) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subInfo.subscribed;\r\n    }\r\n\r\n    /// @dev Returns subscribtion information about a user\r\n    /// @param _user The actual address that owns the Aave position\r\n    /// @return Subscription information about the user if exists\r\n    function getHolder(address _user) public view returns (AaveHolder memory) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subscribers[subInfo.arrPos];\r\n    }\r\n\r\n    /// @notice Helper method to return all the subscribed CDPs\r\n    /// @return List of all subscribers\r\n    function getSubscribers() public view returns (AaveHolder[] memory) {\r\n        return subscribers;\r\n    }\r\n\r\n    /// @notice Helper method for the frontend, returns all the subscribed CDPs paginated\r\n    /// @param _page What page of subscribers you want\r\n    /// @param _perPage Number of entries per page\r\n    /// @return List of all subscribers for that page\r\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (AaveHolder[] memory) {\r\n        AaveHolder[] memory holders = new AaveHolder[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > holders.length) ? holders.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            holders[count] = subscribers[i];\r\n            count++;\r\n        }\r\n\r\n        return holders;\r\n    }\r\n\r\n    ////////////// ADMIN METHODS ///////////////////\r\n\r\n    /// @notice Admin function to unsubscribe a position\r\n    /// @param _user The actual address that owns the Aave position\r\n    function unsubscribeByAdmin(address _user) public onlyOwner {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        if (subInfo.subscribed) {\r\n            _unsubscribe(_user);\r\n        }\r\n    }\r\n} contract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n} contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n} abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} contract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n} abstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n} contract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n} abstract contract IAToken {\r\n    function redeem(uint256 _amount) external virtual;\r\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\r\n} abstract contract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\r\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\r\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\r\n\tfunction swapBorrowRateMode(address _reserve) external virtual;\r\n    function getReserves() external virtual view returns(address[] memory);\r\n\r\n    /// @param _reserve underlying token address\r\n    function getReserveData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,               // reserve total liquidity\r\n            uint256 availableLiquidity,           // reserve available liquidity for borrowing\r\n            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\r\n            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\r\n            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\r\n            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\r\n            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\r\n            uint256 averageStableBorrowRate,      // current average stable borrow rate\r\n            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\r\n            uint256 liquidityIndex,               // cumulative liquidity index\r\n            uint256 variableBorrowIndex,          // cumulative variable borrow index\r\n            address aTokenAddress,                // aTokens contract address for the specific _reserve\r\n            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\r\n        );\r\n\r\n    /// @param _user users address\r\n    function getUserAccountData(address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\r\n            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\r\n            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\r\n            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\r\n            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\r\n            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\r\n            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\r\n            uint256 healthFactor                  // user current Health Factor\r\n    );    \r\n\r\n    /// @param _reserve underlying token address\r\n    /// @param _user users address\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,         // user current reserve aToken balance\r\n            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\r\n            uint256 principalBorrowBalance,       // user balance of borrowed asset\r\n            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\r\n            uint256 borrowRate,                   // user current borrow rate APY\r\n            uint256 liquidityRate,                // user current earn rate on _reserve\r\n            uint256 originationFee,               // user outstanding loan origination fee\r\n            uint256 variableBorrowIndex,          // user variable cumulative index\r\n            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\r\n            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\r\n    );\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address rateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n    );\r\n\r\n    // ------------------ LendingPoolCoreData ------------------------\r\n    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\r\n    function getReserveConfiguration(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (uint256, uint256, uint256, bool);\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentLiquidityRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentVariableBorrowRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentStableBorrowRate(address _reserve) \r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveAvailableLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalBorrowsVariable(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    // ---------------- LendingPoolDataProvider ---------------------\r\n    function calculateUserGlobalData(address _user)\r\n        public virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityBalanceETH,\r\n            uint256 totalCollateralBalanceETH,\r\n            uint256 totalBorrowBalanceETH,\r\n            uint256 totalFeesETH,\r\n            uint256 currentLtv,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 healthFactor,\r\n            bool healthFactorBelowThreshold\r\n        );\r\n} /**\r\n@title ILendingPoolAddressesProvider interface\r\n@notice provides the interface to fetch the LendingPoolCore address\r\n */\r\nabstract contract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public virtual view returns (address);\r\n    function getLendingPoolCore() public virtual view returns (address payable);\r\n    function getLendingPoolConfigurator() public virtual view returns (address);\r\n    function getLendingPoolDataProvider() public virtual view returns (address);\r\n    function getLendingPoolParametersProvider() public virtual view returns (address);\r\n    function getTokenDistributor() public virtual view returns (address);\r\n    function getFeeProvider() public virtual view returns (address);\r\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\r\n    function getLendingPoolManager() public virtual view returns (address);\r\n    function getPriceOracle() public virtual view returns (address);\r\n    function getLendingRateOracle() public virtual view returns (address);\r\n} /************\r\n@title IPriceOracleGetterAave interface\r\n@notice Interface for the Aave price oracle.*/\r\nabstract contract IPriceOracleGetterAave {\r\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\r\n    function getFallbackOracle() external virtual view returns(address);\r\n} contract BotRegistry is AdminAuth {\r\n\r\n    mapping (address => bool) public botList;\r\n\r\n    constructor() public {\r\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\r\n\r\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\r\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\r\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\r\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\r\n    }\r\n\r\n    function setBot(address _botAddr, bool _state) public onlyOwner {\r\n        botList[_botAddr] = _state;\r\n    }\r\n\r\n} contract AaveHelper is DSMath {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\r\n    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\r\n\r\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n\r\n\taddress public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant AAVE_LENDING_POOL_ADDRESSES = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n    uint public constant NINETY_NINE_PERCENT_WEI = 990000000000000000;\r\n    uint16 public constant AAVE_REFERRAL_CODE = 64;\r\n\r\n    /// @param _collateralAddress underlying token address\r\n    /// @param _user users address\r\n\tfunction getMaxCollateral(address _collateralAddress, address _user) public view returns (uint256) {\r\n        address lendingPoolAddressDataProvider = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolDataProvider();\r\n        address lendingPoolCoreAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\r\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\r\n\r\n        uint256 pow10 = 10 ** (18 - _getDecimals(_collateralAddress));\r\n\r\n        // fetch all needed data\r\n        (,uint256 totalCollateralETH, uint256 totalBorrowsETH,,uint256 currentLTV,,,) = ILendingPool(lendingPoolAddressDataProvider).calculateUserGlobalData(_user);\r\n        (,uint256 tokenLTV,,) = ILendingPool(lendingPoolCoreAddress).getReserveConfiguration(_collateralAddress);\r\n        uint256 collateralPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_collateralAddress);\r\n        uint256 userTokenBalance = ILendingPool(lendingPoolCoreAddress).getUserUnderlyingAssetBalance(_collateralAddress, _user);\r\n        uint256 userTokenBalanceEth = wmul(userTokenBalance * pow10, collateralPrice);\r\n\r\n\t\t// if borrow is 0, return whole user balance\r\n        if (totalBorrowsETH == 0) {\r\n        \treturn userTokenBalance;\r\n        }\r\n\r\n        uint256 maxCollateralEth = div(sub(mul(currentLTV, totalCollateralETH), mul(totalBorrowsETH, 100)), currentLTV);\r\n\t\t/// @dev final amount can't be higher than users token balance\r\n        maxCollateralEth = maxCollateralEth > userTokenBalanceEth ? userTokenBalanceEth : maxCollateralEth;\r\n\r\n        // might happen due to wmul precision\r\n        if (maxCollateralEth >= totalCollateralETH) {\r\n        \treturn wdiv(totalCollateralETH, collateralPrice) / pow10;\r\n        }\r\n\r\n        // get sum of all other reserves multiplied with their liquidation thresholds by reversing formula\r\n        uint256 a = sub(wmul(currentLTV, totalCollateralETH), wmul(tokenLTV, userTokenBalanceEth));\r\n        // add new collateral amount multiplied by its threshold, and then divide with new total collateral\r\n        uint256 newLiquidationThreshold = wdiv(add(a, wmul(sub(userTokenBalanceEth, maxCollateralEth), tokenLTV)), sub(totalCollateralETH, maxCollateralEth));\r\n\r\n        // if new threshold is lower than first one, calculate new max collateral with newLiquidationThreshold\r\n        if (newLiquidationThreshold < currentLTV) {\r\n        \tmaxCollateralEth = div(sub(mul(newLiquidationThreshold, totalCollateralETH), mul(totalBorrowsETH, 100)), newLiquidationThreshold);\r\n        \tmaxCollateralEth = maxCollateralEth > userTokenBalanceEth ? userTokenBalanceEth : maxCollateralEth;\r\n        }\r\n\r\n\t\treturn wmul(wdiv(maxCollateralEth, collateralPrice) / pow10, NINETY_NINE_PERCENT_WEI);\r\n\t}\r\n\r\n\t/// @param _borrowAddress underlying token address\r\n\t/// @param _user users address\r\n\tfunction getMaxBorrow(address _borrowAddress, address _user) public view returns (uint256) {\r\n\t\taddress lendingPoolAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPool();\r\n\t\taddress priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\r\n\r\n\t\t(,,,,uint256 availableBorrowsETH,,,) = ILendingPool(lendingPoolAddress).getUserAccountData(_user);\r\n\r\n\t\tuint256 borrowPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_borrowAddress);\r\n\r\n\t\treturn wmul(wdiv(availableBorrowsETH, borrowPrice) / (10 ** (18 - _getDecimals(_borrowAddress))), NINETY_NINE_PERCENT_WEI);\r\n\t}\r\n\r\n    function getMaxBoost(address _borrowAddress, address _collateralAddress, address _user) public view returns (uint256) {\r\n        address lendingPoolAddressDataProvider = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolDataProvider();\r\n        address lendingPoolCoreAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPoolCore();\r\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\r\n\r\n        (,uint256 totalCollateralETH, uint256 totalBorrowsETH,,uint256 currentLTV,,,) = ILendingPool(lendingPoolAddressDataProvider).calculateUserGlobalData(_user);\r\n        (,uint256 tokenLTV,,) = ILendingPool(lendingPoolCoreAddress).getReserveConfiguration(_collateralAddress);\r\n        totalCollateralETH = div(mul(totalCollateralETH, currentLTV), 100);\r\n\r\n        uint256 availableBorrowsETH = wmul(mul(div(sub(totalCollateralETH, totalBorrowsETH), sub(100, tokenLTV)), 100), NINETY_NINE_PERCENT_WEI);\r\n        uint256 borrowPrice = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_borrowAddress);\r\n\r\n        return wdiv(availableBorrowsETH, borrowPrice) / (10 ** (18 - _getDecimals(_borrowAddress)));\r\n    }\r\n\r\n    /// @notice Calculates the fee amount\r\n    /// @param _amount Amount that is converted\r\n    /// @param _user Actuall user addr not DSProxy\r\n    /// @param _gasCost Ether amount of gas we are spending for tx\r\n    /// @param _tokenAddr token addr. of token we are getting for the fee\r\n    /// @return feeAmount The amount we took for the fee\r\n    function getFee(uint _amount, address _user, uint _gasCost, address _tokenAddr) internal returns (uint feeAmount) {\r\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\r\n\r\n        uint fee = MANUAL_SERVICE_FEE;\r\n\r\n        if (BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin)) {\r\n            fee = AUTOMATIC_SERVICE_FEE;\r\n        }\r\n\r\n        if (Discount(DISCOUNT_ADDR).isCustomFeeSet(_user)) {\r\n            fee = Discount(DISCOUNT_ADDR).getCustomServiceFee(_user);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        if (_gasCost != 0) {\r\n            uint256 price = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr);\r\n\r\n            _gasCost = wdiv(_gasCost, price) / (10 ** (18 - _getDecimals(_tokenAddr)));\r\n\r\n            feeAmount = add(feeAmount, _gasCost);\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            WALLET_ADDR.transfer(feeAmount);\r\n        } else {\r\n            ERC20(_tokenAddr).safeTransfer(WALLET_ADDR, feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the gas cost for transaction\r\n    /// @param _amount Amount that is converted\r\n    /// @param _user Actuall user addr not DSProxy\r\n    /// @param _gasCost Ether amount of gas we are spending for tx\r\n    /// @param _tokenAddr token addr. of token we are getting for the fee\r\n    /// @return gasCost The amount we took for the gas cost\r\n    function getGasCost(uint _amount, address _user, uint _gasCost, address _tokenAddr) internal returns (uint gasCost) {\r\n        address priceOracleAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getPriceOracle();\r\n\r\n        if (_gasCost != 0) {\r\n            uint256 price = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr);\r\n            _gasCost = wmul(_gasCost, price);\r\n\r\n            gasCost = _gasCost;\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (gasCost > (_amount / 5)) {\r\n            gasCost = _amount / 5;\r\n        }\r\n\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            WALLET_ADDR.transfer(gasCost);\r\n        } else {\r\n            ERC20(_tokenAddr).safeTransfer(WALLET_ADDR, gasCost);\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        DSProxy proxy = DSProxy(payable(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Approves token contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _caller Address which will gain the approval\r\n    function approveToken(address _tokenAddr, address _caller) internal {\r\n        if (_tokenAddr != ETH_ADDR) {\r\n            ERC20(_tokenAddr).safeApprove(_caller, uint256(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Send specific amount from contract to specific user\r\n    /// @param _token Token we are trying to send\r\n    /// @param _user User that should receive funds\r\n    /// @param _amount Amount that should be sent\r\n    function sendContractBalance(address _token, address _user, uint _amount) public {\r\n        if (_amount == 0) return;\r\n\r\n        if (_token == ETH_ADDR) {\r\n            payable(_user).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(_user, _amount);\r\n        }\r\n    }\r\n\r\n    function sendFullContractBalance(address _token, address _user) public {\r\n        if (_token == ETH_ADDR) {\r\n            sendContractBalance(_token, _user, address(this).balance);\r\n        } else {\r\n            sendContractBalance(_token, _user, ERC20(_token).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == ETH_ADDR) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n} contract AaveSafetyRatio is AaveHelper {\r\n\r\n    function getSafetyRatio(address _user) public view returns(uint256) {\r\n        address lendingPoolAddress = ILendingPoolAddressesProvider(AAVE_LENDING_POOL_ADDRESSES).getLendingPool();\r\n        (,,uint256 totalBorrowsETH,,uint256 availableBorrowsETH,,,) = ILendingPool(lendingPoolAddress).getUserAccountData(_user);\r\n\r\n        if (totalBorrowsETH == 0) return uint256(0);\r\n\r\n        return wdiv(add(totalBorrowsETH, availableBorrowsETH), totalBorrowsETH);\r\n    }\r\n} abstract contract TokenInterface {\r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n} interface ExchangeInterfaceV2 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n} contract ZrxAllowlist is AdminAuth {\r\n\r\n    mapping (address => bool) public zrxAllowlist;\r\n    mapping(address => bool) private nonPayableAddrs;\r\n\r\n    constructor() public {\r\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\r\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\r\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\r\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n\r\n        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n    }\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n\r\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = true;\r\n\t}\r\n\r\n\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = false;\r\n\t}\r\n\r\n\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\r\n\t\treturn nonPayableAddrs[_addr];\r\n\t}\r\n} contract SaverExchangeHelper {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\r\n\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == KYBER_ETH_ADDRESS) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n\r\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\r\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function approve0xProxy(address _tokenAddr, uint _amount) internal {\r\n        if (_tokenAddr != KYBER_ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(address(ERC20_PROXY_0X), _amount);\r\n        }\r\n    }\r\n\r\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\r\n        // send back any leftover ether or tokens\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n\r\n        if (getBalance(_srcAddr) > 0) {\r\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\r\n        }\r\n\r\n        if (getBalance(_destAddr) > 0) {\r\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\r\n        }\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n} contract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tconstructor() public {\r\n\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\r\n\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\r\n\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\r\n\t}\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SaverExchangeCore is SaverExchangeHelper, DSMath {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint srcAmount;\r\n        uint destAmount;\r\n        uint minPrice;\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        bytes callData;\r\n        uint256 price0x;\r\n    }\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n        uint tokensLeft = exData.srcAmount;\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(WETH_ADDRESS).deposit.value(exData.srcAmount)();\r\n        }\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.price0x > 0) {\r\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n            uint ethAmount = getProtocolFee(exData.srcAddr, exData.srcAmount);\r\n            (success, swapedTokens, tokensLeft) = takeOrder(exData, ethAmount, ActionType.SELL);\r\n\r\n            if (success) {\r\n                wrapper = exData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), \"Final amount isn't correct\");\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(WETH_ADDRESS) > 0) {\r\n            TokenInterface(WETH_ADDRESS).withdraw(\r\n                TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        return (wrapper, swapedTokens);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        require(exData.destAmount != 0, \"Dest amount must be specified\");\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(WETH_ADDRESS).deposit.value(exData.srcAmount)();\r\n        }\r\n\r\n        if (exData.price0x > 0) {\r\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n            uint ethAmount = getProtocolFee(exData.srcAddr, exData.srcAmount);\r\n            (success, swapedTokens,) = takeOrder(exData, ethAmount, ActionType.BUY);\r\n\r\n            if (success) {\r\n                wrapper = exData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.BUY);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        require(getBalance(exData.destAddr) >= exData.destAmount, \"Final amount isn't correct\");\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(WETH_ADDRESS) > 0) {\r\n            TokenInterface(WETH_ADDRESS).withdraw(\r\n                TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        return (wrapper, getBalance(exData.destAddr));\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    /// @param _ethAmount Ether fee needed for 0x order\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        uint256 _ethAmount,\r\n        ActionType _type\r\n    ) private returns (bool success, uint256, uint256) {\r\n\r\n        // write in the exact amount we are selling/buing in an order\r\n        if (_type == ActionType.SELL) {\r\n            writeUint256(_exData.callData, 36, _exData.srcAmount);\r\n        } else {\r\n            writeUint256(_exData.callData, 36, _exData.destAmount);\r\n        }\r\n\r\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isNonPayableAddr(_exData.exchangeAddr)) {\r\n            _ethAmount = 0;\r\n        }\r\n\r\n        uint256 tokensBefore = getBalance(_exData.destAddr);\r\n\r\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.exchangeAddr)) {\r\n            (success, ) = _exData.exchangeAddr.call{value: _ethAmount}(_exData.callData);\r\n        } else {\r\n            success = false;\r\n        }\r\n\r\n        uint256 tokensSwaped = 0;\r\n        uint256 tokensLeft = _exData.srcAmount;\r\n\r\n        if (success) {\r\n            // check to see if any _src tokens are left over after exchange\r\n            tokensLeft = getBalance(_exData.srcAddr);\r\n\r\n            // convert weth -> eth if needed\r\n            if (_exData.destAddr == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(\r\n                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n                );\r\n            }\r\n\r\n            // get the current balance of the swaped tokens\r\n            tokensSwaped = getBalance(_exData.destAddr) - tokensBefore;\r\n        }\r\n\r\n        return (success, tokensSwaped, tokensLeft);\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\r\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), \"Wrapper is not valid\");\r\n\r\n        uint ethValue = 0;\r\n\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n\r\n        if (_type == ActionType.SELL) {\r\n            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\r\n                    sell{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.srcAmount);\r\n        } else {\r\n            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\r\n                    buy{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.destAmount);\r\n        }\r\n    }\r\n\r\n    function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(\"Incorrent lengt while writting bytes32\");\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n\r\n    /// @notice Converts Kybers Eth address -> Weth\r\n    /// @param _src Input address\r\n    function ethToWethAddr(address _src) internal pure returns (address) {\r\n        return _src == KYBER_ETH_ADDRESS ? WETH_ADDRESS : _src;\r\n    }\r\n\r\n    /// @notice Calculates protocol fee\r\n    /// @param _srcAddr selling token address (if eth should be WETH)\r\n    /// @param _srcAmount amount we are selling\r\n    function getProtocolFee(address _srcAddr, uint256 _srcAmount) internal view returns(uint256) {\r\n        // if we are not selling ETH msg value is always the protocol fee\r\n        if (_srcAddr != WETH_ADDRESS) return address(this).balance;\r\n\r\n        // if msg value is larger than srcAmount, that means that msg value is protocol fee + srcAmount, so we subsctract srcAmount from msg value\r\n        // we have an edge case here when protocol fee is higher than selling amount\r\n        if (address(this).balance > _srcAmount) return address(this).balance - _srcAmount;\r\n\r\n        // if msg value is lower than src amount, that means that srcAmount isn't included in msg value, so we return msg value\r\n        return address(this).balance;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        // splitting in two different bytes and encoding all because of stack too deep in decoding part\r\n\r\n        bytes memory part1 = abi.encode(\r\n            _exData.srcAddr,\r\n            _exData.destAddr,\r\n            _exData.srcAmount,\r\n            _exData.destAmount\r\n        );\r\n\r\n        bytes memory part2 = abi.encode(\r\n            _exData.minPrice,\r\n            _exData.wrapper,\r\n            _exData.exchangeAddr,\r\n            _exData.callData,\r\n            _exData.price0x\r\n        );\r\n\r\n\r\n        return abi.encode(part1, part2);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        (\r\n            bytes memory part1,\r\n            bytes memory part2\r\n        ) = abi.decode(_data, (bytes,bytes));\r\n\r\n        (\r\n            _exData.srcAddr,\r\n            _exData.destAddr,\r\n            _exData.srcAmount,\r\n            _exData.destAmount\r\n        ) = abi.decode(part1, (address,address,uint256,uint256));\r\n\r\n        (\r\n            _exData.minPrice,\r\n            _exData.wrapper,\r\n            _exData.exchangeAddr,\r\n            _exData.callData,\r\n            _exData.price0x\r\n        )\r\n        = abi.decode(part2, (uint256,address,address,bytes,uint256));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external virtual payable {}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Contract implements logic of calling boost/repay in the automatic system\r\ncontract AaveMonitor is AdminAuth, DSMath, AaveSafetyRatio, GasBurner {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    enum Method { Boost, Repay }\r\n\r\n    uint public REPAY_GAS_TOKEN = 19;\r\n    uint public BOOST_GAS_TOKEN = 19;\r\n\r\n    uint public MAX_GAS_PRICE = 200000000000; // 200 gwei\r\n\r\n    uint public REPAY_GAS_COST = 2500000;\r\n    uint public BOOST_GAS_COST = 2500000;\r\n\r\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\r\n\r\n    AaveMonitorProxy public aaveMonitorProxy;\r\n    AaveSubscriptions public subscriptionsContract;\r\n    address public aaveSaverProxy;\r\n\r\n    DefisaverLogger public logger = DefisaverLogger(DEFISAVER_LOGGER);\r\n\r\n    modifier onlyApproved() {\r\n        require(BotRegistry(BOT_REGISTRY_ADDRESS).botList(msg.sender), \"Not auth bot\");\r\n        _;\r\n    }\r\n\r\n    /// @param _aaveMonitorProxy Proxy contracts that actually is authorized to call DSProxy\r\n    /// @param _subscriptions Subscriptions contract for Aave positions\r\n    /// @param _aaveSaverProxy Contract that actually performs Repay/Boost\r\n    constructor(address _aaveMonitorProxy, address _subscriptions, address _aaveSaverProxy) public {\r\n        aaveMonitorProxy = AaveMonitorProxy(_aaveMonitorProxy);\r\n        subscriptionsContract = AaveSubscriptions(_subscriptions);\r\n        aaveSaverProxy = _aaveSaverProxy;\r\n    }\r\n\r\n    /// @notice Bots call this method to repay for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    /// @param _exData Exchange data\r\n    /// @param _user The actual address that owns the Aave position\r\n    function repayFor(\r\n        SaverExchangeCore.ExchangeData memory _exData,\r\n        address _user\r\n    ) public payable onlyApproved burnGas(REPAY_GAS_TOKEN) {\r\n\r\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Repay, _user);\r\n        require(isAllowed); // check if conditions are met\r\n\r\n        uint256 gasCost = calcGasCost(REPAY_GAS_COST);\r\n\r\n        aaveMonitorProxy.callExecute{value: msg.value}(\r\n            _user,\r\n            aaveSaverProxy,\r\n            abi.encodeWithSignature(\r\n                \"repay((address,address,uint256,uint256,uint256,address,address,bytes,uint256),uint256)\",\r\n                _exData,\r\n                gasCost\r\n            )\r\n        );\r\n\r\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Repay, _user);\r\n        require(isGoodRatio); // check if the after result of the actions is good\r\n\r\n        returnEth();\r\n\r\n        logger.Log(address(this), _user, \"AutomaticAaveRepay\", abi.encode(ratioBefore, ratioAfter));\r\n    }\r\n\r\n    /// @notice Bots call this method to boost for user when conditions are met\r\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\r\n    /// @param _exData Exchange data\r\n    /// @param _user The actual address that owns the Aave position\r\n    function boostFor(\r\n        SaverExchangeCore.ExchangeData memory _exData,\r\n        address _user\r\n    ) public payable onlyApproved burnGas(BOOST_GAS_TOKEN) {\r\n\r\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Boost, _user);\r\n        require(isAllowed); // check if conditions are met\r\n\r\n        uint256 gasCost = calcGasCost(BOOST_GAS_COST);\r\n\r\n        aaveMonitorProxy.callExecute{value: msg.value}(\r\n            _user,\r\n            aaveSaverProxy,\r\n            abi.encodeWithSignature(\r\n                \"boost((address,address,uint256,uint256,uint256,address,address,bytes,uint256),uint256)\",\r\n                _exData,\r\n                gasCost\r\n            )\r\n        );\r\n\r\n\r\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Boost, _user);\r\n        require(isGoodRatio);  // check if the after result of the actions is good\r\n\r\n        returnEth();\r\n\r\n        logger.Log(address(this), _user, \"AutomaticAaveBoost\", abi.encode(ratioBefore, ratioAfter));\r\n    }\r\n\r\n/******************* INTERNAL METHODS ********************************/\r\n    function returnEth() internal {\r\n        // return if some eth left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n/******************* STATIC METHODS ********************************/\r\n\r\n    /// @notice Checks if Boost/Repay could be triggered for the CDP\r\n    /// @dev Called by AaveMonitor to enforce the min/max check\r\n    /// @param _method Type of action to be called\r\n    /// @param _user The actual address that owns the Aave position\r\n    /// @return Boolean if it can be called and the ratio\r\n    function canCall(Method _method, address _user) public view returns(bool, uint) {\r\n        bool subscribed = subscriptionsContract.isSubscribed(_user);\r\n        AaveSubscriptions.AaveHolder memory holder = subscriptionsContract.getHolder(_user);\r\n\r\n        // check if cdp is subscribed\r\n        if (!subscribed) return (false, 0);\r\n\r\n        // check if boost and boost allowed\r\n        if (_method == Method.Boost && !holder.boostEnabled) return (false, 0);\r\n\r\n        uint currRatio = getSafetyRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.minRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.maxRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @dev After the Boost/Repay check if the ratio doesn't trigger another call\r\n    /// @param _method Type of action to be called\r\n    /// @param _user The actual address that owns the Aave position\r\n    /// @return Boolean if the recent action preformed correctly and the ratio\r\n    function ratioGoodAfter(Method _method, address _user) public view returns(bool, uint) {\r\n        AaveSubscriptions.AaveHolder memory holder;\r\n\r\n        holder= subscriptionsContract.getHolder(_user);\r\n\r\n        uint currRatio = getSafetyRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            return (currRatio < holder.maxRatio, currRatio);\r\n        } else if (_method == Method.Boost) {\r\n            return (currRatio > holder.minRatio, currRatio);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates gas cost (in Eth) of tx\r\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\r\n    /// @param _gasAmount Amount of gas used for the tx\r\n    function calcGasCost(uint _gasAmount) public view returns (uint) {\r\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\r\n\r\n        return mul(gasPrice, _gasAmount);\r\n    }\r\n\r\n/******************* OWNER ONLY OPERATIONS ********************************/\r\n\r\n    /// @notice Allows owner to change gas cost for boost operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for boost method\r\n    function changeBoostGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        BOOST_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change gas cost for repay operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for repay method\r\n    function changeRepayGasCost(uint _gasCost) public onlyOwner {\r\n        require(_gasCost < 3000000);\r\n\r\n        REPAY_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change max gas price\r\n    /// @param _maxGasPrice New max gas price\r\n    function changeMaxGasPrice(uint _maxGasPrice) public onlyOwner {\r\n        require(_maxGasPrice < 500000000000);\r\n\r\n        MAX_GAS_PRICE = _maxGasPrice;\r\n    }\r\n\r\n    /// @notice Allows owner to change gas token amount\r\n    /// @param _gasTokenAmount New gas token amount\r\n    /// @param _repay true if repay gas token, false if boost gas token\r\n    function changeGasTokenAmount(uint _gasTokenAmount, bool _repay) public onlyOwner {\r\n        if (_repay) {\r\n            REPAY_GAS_TOKEN = _gasTokenAmount;\r\n        } else {\r\n            BOOST_GAS_TOKEN = _gasTokenAmount;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveMonitorProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveSaverProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AAVE_LENDING_POOL_ADDRESSES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTOMATIC_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUAL_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NINETY_NINE_PERCENT_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveMonitorProxy\",\"outputs\":[{\"internalType\":\"contract AaveMonitorProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveSaverProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price0x\",\"type\":\"uint256\"}],\"internalType\":\"struct SaverExchangeCore.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"boostFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AaveMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeBoostGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_repay\",\"type\":\"bool\"}],\"name\":\"changeGasTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeRepayGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract GasTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getSafetyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AaveMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ratioGoodAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price0x\",\"type\":\"uint256\"}],\"internalType\":\"struct SaverExchangeCore.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"repayFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"sendFullContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionsContract\",\"outputs\":[{\"internalType\":\"contract AaveSubscriptions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveMonitor","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa560dba3a8d0b197ca9505a2b98120dd89209ac000000000000000000000000e08ff7a2badb634f0b581e675e6b3e583de086fc000000000000000000000000fd10bd442f065b96831ef57b439d80a3de09eacb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a7d4093bbf8af40dc16f17a1be4c8312dea03d5cc54fb860133f86edb86da0b7"}]}