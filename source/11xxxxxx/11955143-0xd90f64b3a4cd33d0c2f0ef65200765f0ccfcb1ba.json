{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n */\r\ncontract Pausable is Context {\r\n    event Paused(address account);\r\n    event Shutdown(address account);\r\n    event Unpaused(address account);\r\n    event Open(address account);\r\n\r\n    bool public paused;\r\n    bool public stopEverything;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n    modifier whenPaused() {\r\n        require(paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotShutdown() {\r\n        require(!stopEverything, \"Pausable: shutdown\");\r\n        _;\r\n    }\r\n\r\n    modifier whenShutdown() {\r\n        require(stopEverything, \"Pausable: not shutdown\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Pause contract operations, if contract is not paused.\r\n    function _pause() internal virtual whenNotPaused {\r\n        paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\r\n    function _unpause() internal virtual whenPaused whenNotShutdown {\r\n        paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /// @dev Shutdown contract operations, if not already shutdown.\r\n    function _shutdown() internal virtual whenNotShutdown {\r\n        stopEverything = true;\r\n        paused = true;\r\n        emit Shutdown(_msgSender());\r\n    }\r\n\r\n    /// @dev Open contract operations, if contract is in shutdown state\r\n    function _open() internal virtual whenShutdown {\r\n        stopEverything = false;\r\n        emit Open(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/aave/IAaveV2.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface AaveLendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function getAddress(bytes32 id) external view returns (address);\r\n}\r\n\r\ninterface AaveLendingPool {\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface AaveProtocolDataProvider {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n}\r\n\r\n// File: contracts/interfaces/maker/IMakerDAO.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(\r\n        address,\r\n        uint256,\r\n        address\r\n    ) external view returns (uint256);\r\n\r\n    function ilks(uint256) external view returns (bytes32);\r\n\r\n    function owns(uint256) external view returns (address);\r\n\r\n    function urns(uint256) external view returns (address);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function open(bytes32, address) external returns (uint256);\r\n\r\n    function give(uint256, address) external;\r\n\r\n    function cdpAllow(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function urnAllow(address, uint256) external;\r\n\r\n    function frob(\r\n        uint256,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function flux(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function move(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function exit(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function quit(uint256, address) external;\r\n\r\n    function enter(address, uint256) external;\r\n\r\n    function shift(uint256, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n\r\n    function ilks(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function dai(address) external view returns (uint256);\r\n\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function hope(address) external;\r\n\r\n    function nope(address) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external view returns (uint256);\r\n\r\n    function gem() external view returns (address);\r\n\r\n    function ilk() external view returns (bytes32);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n\r\n    function dai() external view returns (address);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface SpotterLike {\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n}\r\n\r\n// File: contracts/interfaces/vesper/ICollateralManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICollateralManager {\r\n    function addGemJoin(address[] calldata gemJoins) external;\r\n\r\n    function mcdManager() external view returns (address);\r\n\r\n    function borrow(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function depositCollateral(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function getVaultBalance(uint256 vaultNum) external view returns (uint256 collateralLocked);\r\n\r\n    function getVaultDebt(uint256 vaultNum) external view returns (uint256 daiDebt);\r\n\r\n    function getVaultInfo(uint256 vaultNum)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function payback(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function registerVault(uint256 vaultNum, bytes32 collateralType) external;\r\n\r\n    function vaultOwner(uint256 vaultNum) external returns (address owner);\r\n\r\n    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function withdrawCollateral(uint256 vaultNum, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IController.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IController {\r\n    function aaveReferralCode() external view returns (uint16);\r\n\r\n    function feeCollector(address) external view returns (address);\r\n\r\n    function founderFee() external view returns (uint256);\r\n\r\n    function founderVault() external view returns (address);\r\n\r\n    function interestFee(address) external view returns (uint256);\r\n\r\n    function isPool(address) external view returns (bool);\r\n\r\n    function pools() external view returns (address);\r\n\r\n    function strategy(address) external view returns (address);\r\n\r\n    function rebalanceFriction(address) external view returns (uint256);\r\n\r\n    function poolRewards(address) external view returns (address);\r\n\r\n    function treasuryPool() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function withdrawFee(address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IStrategy {\r\n    function rebalance() external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function beforeWithdraw() external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawAll() external;\r\n\r\n    function isUpgradable() external view returns (bool);\r\n\r\n    function isReservedToken(address _token) external view returns (bool);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function totalLocked() external view returns (uint256);\r\n\r\n    //Lifecycle functions\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IVesperPool.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IVesperPool is IERC20 {\r\n    function approveToken() external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function multiTransfer(uint256[] memory) external returns (bool);\r\n\r\n    function permit(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint8,\r\n        bytes32,\r\n        bytes32\r\n    ) external;\r\n\r\n    function rebalance() external;\r\n\r\n    function resetApproval() external;\r\n\r\n    function sweepErc20(address) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawETH(uint256) external;\r\n\r\n    function withdrawByStrategy(uint256) external;\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function tokensHere() external view returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function withdrawFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/strategies/AaveV2MakerStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @dev This strategy will deposit collateral token in Maker and borrow DAI\r\n/// and deposit borrowed DAI in Aave to earn interest on it.\r\nabstract contract AaveV2MakerStrategy is IStrategy, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    //solhint-disable-next-line const-name-snakecase\r\n    AaveLendingPoolAddressesProvider public constant aaveAddressesProvider =\r\n        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\r\n    ICollateralManager public immutable cm;\r\n    IController public immutable controller;\r\n    IERC20 public immutable collateralToken;\r\n    bytes32 public immutable collateralType;\r\n    uint256 public immutable vaultNum;\r\n    address public immutable override pool;\r\n    uint256 public lastRebalanceBlock;\r\n    uint256 public highWater;\r\n    uint256 public lowWater;\r\n\r\n    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\r\n    uint256 private constant WAT = 10**16;\r\n    IERC20 private immutable aToken;\r\n    mapping(address => bool) private reservedToken;\r\n\r\n    constructor(\r\n        address _controller,\r\n        address _pool,\r\n        address _collateralToken,\r\n        address _cm,\r\n        bytes32 _collateralType\r\n    ) public {\r\n        require(_controller != address(0), \"Controller address is zero\");\r\n        require(IController(_controller).isPool(_pool), \"Not a valid pool\");\r\n        controller = IController(_controller);\r\n        collateralType = _collateralType;\r\n        vaultNum = _createVault(_collateralType, _cm);\r\n        pool = _pool;\r\n        collateralToken = IERC20(_collateralToken);\r\n        cm = ICollateralManager(_cm);\r\n        address aTokenAddress = _getToken();\r\n        aToken = IERC20(aTokenAddress);\r\n\r\n        reservedToken[_collateralToken] = true;\r\n        reservedToken[aTokenAddress] = true;\r\n        reservedToken[DAI] = true;\r\n    }\r\n\r\n    modifier live() {\r\n        require(!paused || _msgSender() == address(controller), \"Contract has paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            _msgSender() == address(controller) || _msgSender() == pool,\r\n            \"Caller is not authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(_msgSender() == address(controller), \"Caller is not the controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(_msgSender() == pool, \"Caller is not pool\");\r\n        _;\r\n    }\r\n\r\n    function pause() external override onlyController {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external override onlyController {\r\n        _unpause();\r\n    }\r\n\r\n    /// @dev Approve Dai and collateralToken to collateral manager\r\n    function approveToken() external onlyController {\r\n        IERC20(DAI).safeApprove(address(cm), MAX_UINT_VALUE);\r\n        collateralToken.safeApprove(address(cm), MAX_UINT_VALUE);\r\n    }\r\n\r\n    /// @dev Reset Dai and collateralToken approval of collateral manager\r\n    function resetApproval() external onlyController {\r\n        IERC20(DAI).safeApprove(address(cm), 0);\r\n        collateralToken.safeApprove(address(cm), 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit collateral token into Maker vault.\r\n     * @param _amount Amount of collateral token\r\n     */\r\n    function deposit(uint256 _amount) external override onlyPool {\r\n        _deposit(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called during withdrawal process.\r\n     * Withdraw is not allowed if pool in underwater.\r\n     * If pool is underwater, calling resurface() will bring pool above water.\r\n     * It will impact share price in pool and that's why it has to be called before withdraw.\r\n     */\r\n    function beforeWithdraw() external override onlyPool {\r\n        if (isUnderwater()) {\r\n            _resurface();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collateral token from Maker and in order to do that strategy\r\n     * has to withdraw Dai from Aave and payback Dai in Maker.\r\n     * @param _amount Amount of collateral token to be withdrawn\r\n     */\r\n    function withdraw(uint256 _amount) external override onlyAuthorized {\r\n        _withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Rebalance earning and withdraw all collateral.\r\n     * Controller only function, called when migrating strategy.\r\n     */\r\n    function withdrawAllWithRebalance() external onlyController {\r\n        _rebalanceEarned();\r\n        _withdrawAll();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all collateral. No rebalance earning.\r\n     * Controller only function, called when migrating strategy.\r\n     */\r\n    function withdrawAll() external override onlyController {\r\n        _withdrawAll();\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper function for rebalanceEarned and rebalanceCollateral\r\n     * Anyone can call it except when paused.\r\n     */\r\n    function rebalance() external override live {\r\n        _rebalanceEarned();\r\n        _rebalanceCollateral();\r\n    }\r\n\r\n    /**\r\n     * @dev Rebalance collateral and debt in Maker.\r\n     * Based on defined risk parameter either borrow more DAI from Maker or\r\n     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\r\n     * Anyone can call it except when paused.\r\n     */\r\n    function rebalanceCollateral() external live {\r\n        _rebalanceCollateral();\r\n    }\r\n\r\n    /**\r\n     * @dev Convert earned DAI from Aave to collateral token\r\n     * Also calculate interest fee on earning from Aave and transfer fee to fee collector.\r\n     * Anyone can call it except when paused.\r\n     */\r\n    function rebalanceEarned() external live {\r\n        _rebalanceEarned();\r\n    }\r\n\r\n    /**\r\n     * @dev If pool is underwater this function will resolve underwater condition.\r\n     * If Debt in Maker is greater than aDAI balance in Aave then pool in underwater.\r\n     * Lowering DAI debt in Maker will resolve underwater condtion.\r\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\r\n     * collateral token from pool and/or Maker and convert those to DAI via Uniswap.\r\n     * Finally payback debt in Maker using DAI.\r\n     */\r\n    function resurface() external live {\r\n        _resurface();\r\n    }\r\n\r\n    /// @dev sweep given ERC20 token to vesper pool\r\n    function sweepErc20(address _fromToken) external {\r\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\r\n        IERC20(_fromToken).safeTransfer(pool, amount);\r\n    }\r\n\r\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyController {\r\n        require(_lowWater != 0, \"Value is zero\");\r\n        require(_highWater > _lowWater, \"highWater <= lowWater\");\r\n        highWater = _highWater.mul(WAT);\r\n        lowWater = _lowWater.mul(WAT);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns interest earned since last rebalance.\r\n     * @dev Make sure to return value in collateral token and in order to do that\r\n     * we are using Uniswap to get collateral amount for earned DAI.\r\n     */\r\n    function interestEarned() external view returns (uint256) {\r\n        uint256 aDaiBalance = aToken.balanceOf(pool);\r\n        uint256 debt = cm.getVaultDebt(vaultNum);\r\n        if (aDaiBalance > debt) {\r\n            uint256 daiEarned = aDaiBalance.sub(debt);\r\n            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n            address[] memory path = _getPath(DAI, address(collateralToken));\r\n            return uniswapRouter.getAmountsOut(daiEarned, path)[path.length - 1];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Returns true if strategy can be upgraded.\r\n    function isUpgradable() external view override returns (bool) {\r\n        return totalLocked() == 0;\r\n    }\r\n\r\n    function isReservedToken(address _token) external view override returns (bool) {\r\n        return reservedToken[_token];\r\n    }\r\n\r\n    /// @dev Address of Aave DAI token\r\n    function token() external view override returns (address) {\r\n        return address(aToken);\r\n    }\r\n\r\n    /// @dev Check if pool is underwater i.e. debt is greater than aDai in Aave\r\n    function isUnderwater() public view returns (bool) {\r\n        return cm.getVaultDebt(vaultNum) > aToken.balanceOf(pool);\r\n    }\r\n\r\n    /// @dev Returns total collateral locked in Maker vault\r\n    function totalLocked() public view override returns (uint256) {\r\n        return convertFrom18(cm.getVaultBalance(vaultNum));\r\n    }\r\n\r\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\r\n    function convertFrom18(uint256 _amount) public pure virtual returns (uint256) {\r\n        return _amount;\r\n    }\r\n\r\n    /// @dev Create new Maker vault\r\n    function _createVault(bytes32 _collateralType, address _cm) internal returns (uint256 vaultId) {\r\n        address mcdManager = ICollateralManager(_cm).mcdManager();\r\n        ManagerLike manager = ManagerLike(mcdManager);\r\n        vaultId = manager.open(_collateralType, address(this));\r\n        manager.cdpAllow(vaultId, address(this), 1);\r\n\r\n        //hope and cpdAllow on vat for collateralManager's address\r\n        VatLike(manager.vat()).hope(_cm);\r\n        manager.cdpAllow(vaultId, _cm, 1);\r\n\r\n        //Register vault with collateral Manager\r\n        ICollateralManager(_cm).registerVault(vaultId, _collateralType);\r\n    }\r\n\r\n    function _deposit(uint256 _amount) internal {\r\n        collateralToken.safeTransferFrom(pool, address(this), _amount);\r\n        cm.depositCollateral(vaultNum, _amount);\r\n    }\r\n\r\n    function _depositDaiToAave(uint256 _amount) internal {\r\n        address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\r\n        IERC20(DAI).safeApprove(_aaveLendingPool, 0);\r\n        IERC20(DAI).safeApprove(_aaveLendingPool, _amount);\r\n        AaveLendingPool(_aaveLendingPool).deposit(\r\n            DAI,\r\n            _amount,\r\n            pool,\r\n            controller.aaveReferralCode()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit fee into Vesper pool to get Vesper pool shares.\r\n     * Transfer fee, Vesper pool shares, to fee collector.\r\n     */\r\n    function _handleFee(uint256 fee) internal {\r\n        if (fee != 0) {\r\n            collateralToken.safeApprove(pool, 0);\r\n            collateralToken.safeApprove(pool, fee);\r\n            IVesperPool(pool).deposit(fee);\r\n            uint256 feeInShare = IERC20(pool).balanceOf(address(this));\r\n            IERC20(pool).safeTransfer(controller.feeCollector(pool), feeInShare);\r\n        }\r\n    }\r\n\r\n    function _moveDaiToMaker(uint256 _amount) internal {\r\n        if (_amount != 0) {\r\n            _withdrawDaiFromAave(_amount);\r\n            cm.payback(vaultNum, _amount);\r\n        }\r\n    }\r\n\r\n    function _moveDaiFromMaker(uint256 _amount) internal {\r\n        cm.borrow(vaultNum, _amount);\r\n        _depositDaiToAave(_amount);\r\n    }\r\n\r\n    function _rebalanceCollateral() internal {\r\n        _deposit(collateralToken.balanceOf(pool));\r\n        (\r\n            uint256 collateralLocked,\r\n            uint256 debt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        ) = cm.getVaultInfo(vaultNum);\r\n        uint256 maxDebt = collateralLocked.mul(collateralUsdRate).div(highWater);\r\n        if (maxDebt < minimumDebt) {\r\n            // Dusting scenario. Payback all DAI\r\n            _moveDaiToMaker(debt);\r\n        } else {\r\n            if (collateralRatio > highWater) {\r\n                require(!isUnderwater(), \"Pool is underwater\");\r\n                _moveDaiFromMaker(maxDebt.sub(debt));\r\n            } else if (collateralRatio < lowWater) {\r\n                // Redeem DAI from Aave and deposit in maker\r\n                _moveDaiToMaker(debt.sub(maxDebt));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _rebalanceEarned() internal {\r\n        require(\r\n            (block.number - lastRebalanceBlock) >= controller.rebalanceFriction(pool),\r\n            \"Can not rebalance\"\r\n        );\r\n        lastRebalanceBlock = block.number;\r\n        uint256 debt = cm.getVaultDebt(vaultNum);\r\n        _withdrawExcessDaiFromAave(debt);\r\n        uint256 balance = IERC20(DAI).balanceOf(address(this));\r\n        if (balance != 0) {\r\n            IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n            IERC20(DAI).safeApprove(address(uniswapRouter), 0);\r\n            IERC20(DAI).safeApprove(address(uniswapRouter), balance);\r\n            address[] memory path = _getPath(DAI, address(collateralToken));\r\n            // Swap and get collateralToken here.\r\n            // It is possible that amount out resolves to 0\r\n            // Which will cause the swap to fail\r\n            uint256 tokenAmountOut = uniswapRouter.getAmountsOut(balance, path)[0];\r\n            if (tokenAmountOut != 0) {\r\n                uniswapRouter.swapExactTokensForTokens(balance, 1, path, address(this), now + 30);\r\n                uint256 collateralBalance = collateralToken.balanceOf(address(this));\r\n                uint256 fee = collateralBalance.mul(controller.interestFee(pool)).div(1e18);\r\n                collateralToken.safeTransfer(pool, collateralBalance.sub(fee));\r\n                _handleFee(fee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _resurface() internal {\r\n        uint256 earnBalance = aToken.balanceOf(pool);\r\n        uint256 debt = cm.getVaultDebt(vaultNum);\r\n        require(debt > earnBalance, \"Pool is above water\");\r\n        uint256 shortAmount = debt.sub(earnBalance);\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n        address[] memory path = _getPath(address(collateralToken), DAI);\r\n        uint256 tokenNeeded = uniswapRouter.getAmountsIn(shortAmount, path)[0];\r\n\r\n        uint256 balance = collateralToken.balanceOf(pool);\r\n\r\n        // If pool has more balance than tokenNeeded, get what needed from pool\r\n        // else get pool balance from pool and remaining from Maker vault\r\n        if (balance >= tokenNeeded) {\r\n            collateralToken.safeTransferFrom(pool, address(this), tokenNeeded);\r\n        } else {\r\n            cm.withdrawCollateral(vaultNum, tokenNeeded.sub(balance));\r\n            collateralToken.safeTransferFrom(pool, address(this), balance);\r\n        }\r\n        collateralToken.safeApprove(address(uniswapRouter), 0);\r\n        collateralToken.safeApprove(address(uniswapRouter), tokenNeeded);\r\n        uniswapRouter.swapExactTokensForTokens(tokenNeeded, 1, path, address(this), now + 30);\r\n        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\r\n        cm.payback(vaultNum, daiBalance);\r\n\r\n        // If Uniswap operation leave any collateral dust then send it to pool\r\n        uint256 _collateralbalance = collateralToken.balanceOf(address(this));\r\n        if (_collateralbalance != 0) {\r\n            collateralToken.safeTransfer(pool, _collateralbalance);\r\n        }\r\n    }\r\n\r\n    function _withdrawDaiFromAave(uint256 _amount) internal {\r\n        IERC20(address(aToken)).safeTransferFrom(pool, address(this), _amount);\r\n        address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\r\n        AaveLendingPool(_aaveLendingPool).withdraw(DAI, _amount, address(this));\r\n    }\r\n\r\n    function _withdrawExcessDaiFromAave(uint256 _base) internal {\r\n        uint256 _balance = aToken.balanceOf(pool);\r\n        if (_balance > _base) {\r\n            uint256 _amount = _balance.sub(_base);\r\n            IERC20(address(aToken)).safeTransferFrom(pool, address(this), _amount);\r\n            address _aaveLendingPool = aaveAddressesProvider.getLendingPool();\r\n            AaveLendingPool(_aaveLendingPool).withdraw(DAI, _amount, address(this));\r\n        }\r\n    }\r\n\r\n    function _withdraw(uint256 _amount) internal {\r\n        (\r\n            uint256 collateralLocked,\r\n            uint256 debt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        ) = cm.whatWouldWithdrawDo(vaultNum, _amount);\r\n        if (debt != 0 && collateralRatio < lowWater) {\r\n            // If this withdraw results in Low Water scenario.\r\n            uint256 maxDebt = collateralLocked.mul(collateralUsdRate).div(highWater);\r\n            if (maxDebt < minimumDebt) {\r\n                // This is Dusting scenario\r\n                _moveDaiToMaker(debt);\r\n            } else if (maxDebt < debt) {\r\n                _moveDaiToMaker(debt.sub(maxDebt));\r\n            }\r\n        }\r\n        cm.withdrawCollateral(vaultNum, _amount);\r\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _moveDaiToMaker(cm.getVaultDebt(vaultNum));\r\n        require(cm.getVaultDebt(vaultNum) == 0, \"Debt should be 0\");\r\n        cm.withdrawCollateral(vaultNum, totalLocked());\r\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /// @dev Get aToken address\r\n    function _getToken() internal view returns (address) {\r\n        bytes32 providerId = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n        address aaveProtocolDataProvider = aaveAddressesProvider.getAddress(providerId);\r\n        (address aTokenAddress, , ) =\r\n            AaveProtocolDataProvider(aaveProtocolDataProvider).getReserveTokensAddresses(DAI);\r\n        return aTokenAddress;\r\n    }\r\n\r\n    function _getPath(address _from, address _to) internal pure returns (address[] memory) {\r\n        address[] memory path;\r\n        if (_from == WETH || _to == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WETH;\r\n            path[2] = _to;\r\n        }\r\n        return path;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/AaveV2MakerStrategyETH.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n//solhint-disable no-empty-blocks\r\ncontract AaveV2MakerStrategyETH is AaveV2MakerStrategy {\r\n    string public constant NAME = \"Strategy-AaveV2Maker-ETH\";\r\n    string public constant VERSION = \"2.0.2\";\r\n\r\n    constructor(\r\n        address _controller,\r\n        address _pool,\r\n        address _cm\r\n    )\r\n        public\r\n        AaveV2MakerStrategy(\r\n            _controller,\r\n            _pool,\r\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\r\n            _cm,\r\n            \"ETH-A\"\r\n        )\r\n    {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddressesProvider\",\"outputs\":[{\"internalType\":\"contract AaveLendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cm\",\"outputs\":[{\"internalType\":\"contract ICollateralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highWater\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowWater\",\"type\":\"uint256\"}],\"name\":\"updateBalancingFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllWithRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveV2MakerStrategyETH","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4f1671d3aee73c05b552d57f2d16d3cfcbd02170000000000000000000000002c361913e2da663e1898162ec01497c46eb87abf0000000000000000000000008d0b8e2b5584ce1487317f81da7d97397ef3e899","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2447c3f3178e1dedb9302aa1ef793e702392d47667e73e8eebbba7f4b20fa79c"}]}