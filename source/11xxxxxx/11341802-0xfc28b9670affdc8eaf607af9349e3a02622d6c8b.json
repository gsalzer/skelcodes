{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"Safe Math Error-Add!\");\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a, \"Safe Math Error-Sub!\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"Safe Math Error-Mul!\");\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0, \"Safe Math Error-Div!\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract digitalMarketAirdrop is Owned{\r\n    address public token;\r\n    bool public status =  false; \r\n    uint public tokenAmount; // airdrop allocation \r\n    \r\n    uint public recieved; // total amount \r\n    uint public paid;\r\n    uint public totalWithdrawn;\r\n    uint public remaining;\r\n    \r\n    uint public amount; // = 100\r\n    uint public benficiaries;\r\n    \r\n    \r\n    mapping(address => uint) public payments;\r\n    \r\n    // Events \r\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n    \r\n    \r\n}\r\n\r\ncontract airdropProxy is digitalMarketAirdrop{\r\n    \r\n    function setup(address _token, uint _amount) public onlyOwner{\r\n        require(token == address(0), \"token is set\");\r\n        token = _token;\r\n        tokenAmount = _amount;\r\n    }\r\n    \r\n    function chageAirdropAllocationAmount(uint _amount) public onlyOwner{\r\n        require(_amount >= paid, \"Allocation is smaller than paid amount!\");\r\n        tokenAmount = _amount;\r\n    }\r\n    \r\n    function receiveApproval(address _spender, uint _amount, address _reciver) public payable {\r\n        require(token==msg.sender, \"Sender is not the Project Token!\"); \r\n        require(_reciver == address(this), \"Approved failed!\");  \r\n        \r\n        if (!Token(token).transferFrom(_spender, address(this), _amount)) { revert(\"Amoount not recieved!\"); }\r\n        \r\n        status=true;\r\n        recieved = SafeMath.safeAdd(recieved, _amount);\r\n        remaining = SafeMath.safeAdd(remaining, _amount);\r\n        \r\n        emit Deposit(token, _spender, _amount, recieved);\r\n        \r\n    }\r\n    \r\n    function changeAmount(uint _amount) public onlyOwner{\r\n        amount = _amount;\r\n    }\r\n    \r\n    function changeStatus(bool _status) public onlyOwner{\r\n        require(status != _status, \"no change will happen\");\r\n        if(status == true){\r\n            status = false;\r\n        } else {\r\n           status = true; \r\n        }\r\n    }\r\n    \r\n    function claimFreeToken() public { \r\n        uint available = tokenAmount - paid;\r\n        require(status == true, \"Airdrop is Closed!\");\r\n        require(amount > 0, \"No amount is set by admin\");\r\n        require(remaining >= amount, \"Balance Inssuficiant!\");\r\n        require(available >= amount, \"Inssuficiant Airdrop Balance!\");\r\n        require(benficiaries < 1000, \"Airdrop has reached the maximum limitation!\");\r\n        require(payments[msg.sender] == 0, \"user has recieved his free token!\");\r\n        \r\n        if (!Token(token).transfer(msg.sender, amount)) { revert(\"withdraw failed!\"); }\r\n        \r\n        benficiaries++;\r\n        paid = SafeMath.safeAdd(paid, amount);\r\n        remaining = SafeMath.safeSub(remaining, amount);\r\n        \r\n        payments[msg.sender] = SafeMath.safeAdd(payments[msg.sender], amount);\r\n        emit Withdraw(token, msg.sender, amount, payments[msg.sender]);\r\n    \r\n    }\r\n    \r\n    // ======================\r\n    function withdrawUnlockedToken(uint _amount) public onlyOwner{ \r\n        uint available = recieved - paid - totalWithdrawn;\r\n        require(available >= _amount, \"Balance Inssuficiant!\");\r\n        \r\n        if (!Token(token).transfer(msg.sender, _amount)) { revert(\"withdraw failed!\"); }\r\n        \r\n        totalWithdrawn = SafeMath.safeAdd(totalWithdrawn, _amount);\r\n        remaining = SafeMath.safeSub(remaining, _amount);\r\n        emit Withdraw(token, msg.sender, _amount, totalWithdrawn);\r\n    \r\n    }\r\n    \r\n    // the goal of this Fun is to manage any compitions being done on the platform \r\n    // in addttion to pay any expenses such as salaries of employees \r\n    function sendPrizes(uint[] memory _amount, address[] memory _benficiaries) public onlyOwner{ \r\n        require(_amount.length == _benficiaries.length, \"inputs error\");\r\n        for(uint i=0; i<_amount.length; i++){\r\n            uint a = _amount[i];\r\n            address b = _benficiaries[i];\r\n            uint available = recieved - paid - totalWithdrawn;\r\n            require(available >= a, \"Balance Inssuficiant!\");\r\n            \r\n            if (!Token(token).transfer(b, a)) { revert(\"withdraw failed!\"); }\r\n            \r\n            totalWithdrawn = SafeMath.safeAdd(totalWithdrawn, a);\r\n            remaining = SafeMath.safeSub(remaining, a);\r\n            emit Withdraw(token, msg.sender, a, totalWithdrawn);\r\n        }\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"chageAirdropAllocationAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFreeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reciver\",\"type\":\"address\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_benficiaries\",\"type\":\"address[]\"}],\"name\":\"sendPrizes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnlockedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"airdropProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://737a1736b83fd036b1b2bc8a3b1e60fe4f6c88827e74cebb6d150651dca57947"}]}