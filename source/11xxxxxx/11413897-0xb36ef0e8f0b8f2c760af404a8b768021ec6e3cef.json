{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract PearToken is ERC20 {\r\n    using SafeMath for uint;\r\n    \r\n    event staked(address sender, uint amount, uint lockedTime);\r\n    event unstaked(address sender, uint amount);\r\n    \r\n    address private _owner;\r\n    address private _minter;\r\n    address private _sales;\r\n    address private _tokenContract;\r\n    \r\n    uint private stakeBuffer = 10000000000;\r\n    uint private stakedSupply = 0;\r\n    \r\n    // Staking\r\n    uint private yearInMs = 31536000;\r\n    struct StakeType {\r\n        uint rewardPercent; // Percent reward to get each period\r\n        uint lockedTime; // How long the stake is locked before allowed to withdraw\r\n    }\r\n    mapping(uint => StakeType) private _stakingOptions;\r\n    \r\n    struct Stake {\r\n        uint amount; // Amount staked\r\n        uint startTime; // When staking started\r\n        uint stakeType; // Type of stake\r\n    }\r\n    mapping(address => Stake[]) private _staking;\r\n    \r\n    constructor () public  ERC20(\"Pear\", \"PEAR\", 18){\r\n        _owner = tx.origin;\r\n        \r\n        _stakingOptions[0].rewardPercent = 1000;\r\n        _stakingOptions[0].lockedTime = 0;\r\n        \r\n        _stakingOptions[1].rewardPercent = 2000;\r\n        _stakingOptions[1].lockedTime = 604800;\r\n        \r\n        _stakingOptions[2].rewardPercent = 3500;\r\n        _stakingOptions[2].lockedTime = 2592000;\r\n        \r\n        _stakingOptions[3].rewardPercent = 5000;\r\n        _stakingOptions[3].lockedTime = 31536000;\r\n    }\r\n    \r\n    /* Set the token contract for which to call for the stake reward\r\n     *\r\n     */\r\n    function getTotalSupply() public view returns(uint) {\r\n        return totalSupply() + stakedSupply;\r\n    }\r\n    \r\n    /* Get available tokens\r\n     *\r\n     */\r\n    function getMyBalance() public view returns(uint) {\r\n        return balanceOf(msg.sender);\r\n    }\r\n    \r\n    /* Get all tokens inkl staked\r\n     *\r\n     */\r\n    function getMyFullBalance() public view returns(uint) {\r\n        uint balance = balanceOf(msg.sender);\r\n        for (uint i = 0; i < _staking[msg.sender].length; i++){\r\n            balance += getStakeAmount(i);\r\n        } \r\n        return balance;\r\n    }\r\n    \r\n    /* Set the token contract for which to call for the stake reward\r\n     *\r\n     */\r\n    function setTokenContract(address _address) public {\r\n        require(_msgSender() == _owner,\"Only owner can set token contract!\");\r\n        _tokenContract = _address;\r\n    }\r\n    \r\n    /* Sets the address allowed to mint\r\n     *\r\n     */\r\n    function setMinter(address minter_) public {\r\n        require(msg.sender == _owner, \"Only owner can set minter!\");\r\n        _minter = minter_;\r\n    }\r\n    \r\n    /* \r\n     *\r\n     */\r\n    function setSales(address sales_) public {\r\n        require(msg.sender == _owner, \"Only owner can set minter!\");\r\n        _sales = sales_;\r\n    }\r\n    \r\n    /* Mint an amount of tokens to an address\r\n     *\r\n     */\r\n    function mint(address address_, uint256 amount_) public {\r\n        require(msg.sender == _minter || msg.sender == _sales, \"Only minter can mint tokens!\");\r\n        _mint(address_, amount_);\r\n    }\r\n    \r\n    /*\r\n     *\r\n     */\r\n    function mintToMultipleAddresses(address[] memory _addresses, uint _amount) public {\r\n        require(_msgSender() == _owner,\"Only owner can mint to multiple addresses!\");\r\n        for(uint i = 0; i < _addresses.length; i++){\r\n            _mint(_addresses[i],  _amount);\r\n        }\r\n    }\r\n    \r\n    /* Stake\r\n     *\r\n     */\r\n    function stake(uint amount_, uint stakeType_) public {\r\n        _burn(msg.sender, amount_);\r\n        stakedSupply += amount_;\r\n        Stake memory temp;\r\n        temp.amount = amount_;\r\n        temp.startTime = now;\r\n        temp.stakeType = stakeType_;\r\n        _staking[msg.sender].push(temp);\r\n        emit staked(msg.sender, amount_, _stakingOptions[stakeType_].lockedTime);\r\n    }\r\n    \r\n    /* Get all stakes a address holds\r\n     *\r\n     */\r\n    function getStakes() public view returns (uint[3][] memory) {\r\n        uint[3][] memory tempStakeList = new uint[3][](_staking[msg.sender].length);\r\n        for (uint i = 0; i < _staking[msg.sender].length; i++){\r\n            tempStakeList[i][0] = getStakeAmount(i);\r\n            tempStakeList[i][1] = getRemainingLockTime(i);\r\n            tempStakeList[i][2] = getStakeReward(i);\r\n        } \r\n        return tempStakeList;\r\n    }\r\n    \r\n    /* Returns the amount of token provided with a stake.\r\n     *\r\n     */\r\n    function getStakeAmount(uint stake_) public view returns (uint) {\r\n        return _staking[msg.sender][stake_].amount;\r\n    } \r\n    \r\n    /* returns true or false depending on if a stake is locked\r\n     * or free to withdraw.\r\n     */\r\n    function isStakeLocked(uint stake_) private view returns (bool) {\r\n        uint stakingTime = now - _staking[msg.sender][stake_].startTime;\r\n        return stakingTime < _stakingOptions[_staking[msg.sender][stake_].stakeType].lockedTime;\r\n    }\r\n    \r\n    /* Returns the remaining lock time of a stake, if unlocked\r\n     * returns 0.\r\n     */\r\n    function getRemainingLockTime(uint stake_) public view returns (uint) {\r\n        uint stakingTime = now - _staking[msg.sender][stake_].startTime;\r\n        if (stakingTime < _stakingOptions[_staking[msg.sender][stake_].stakeType].lockedTime) {\r\n            return _stakingOptions[_staking[msg.sender][stake_].stakeType].lockedTime - stakingTime;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    /* Calculates the current reward of a stake.\r\n     * Get time staked\r\n     * Add a buffer to circumvent float calculations\r\n     * Gets amount of periods staked\r\n     * Multiplies the periods staked with the reward percent amount\r\n     * Multiplies the reward by the amount staked\r\n     * Removed the buffer\r\n     * Removes the percent buffer\r\n     */\r\n    function getStakeReward(uint stake_) public view returns (uint) {\r\n        uint stakingTime = now - _staking[msg.sender][stake_].startTime;\r\n        uint buffededStakingTime = stakingTime * stakeBuffer;\r\n        uint periods = buffededStakingTime / yearInMs;\r\n        uint buffedRewardPeriodPercent = periods * _stakingOptions[_staking[msg.sender][stake_].stakeType].rewardPercent;\r\n        uint buffedReward = _staking[msg.sender][stake_].amount * buffedRewardPeriodPercent;\r\n        uint rewardPerc = buffedReward / stakeBuffer;\r\n        uint reward = rewardPerc / 100;\r\n        return reward;\r\n    }\r\n    \r\n    /* Unstake previous stake, mints back the original tokens,\r\n     * sends mint function call to reward contract to mint the\r\n     * reward to the sender address.\r\n     */\r\n    function unstake(uint stake_) public {\r\n        require(isStakeLocked(stake_) != true, \"Stake still locked!\");\r\n        _mint(msg.sender, _staking[msg.sender][stake_].amount);\r\n        stakedSupply -= _staking[msg.sender][stake_].amount;\r\n        uint _amount = getStakeReward(stake_);\r\n        (bool success, bytes memory returnData) = address(_tokenContract).call(abi.encodeWithSignature(\"mint(address,uint256)\",msg.sender, _amount));\r\n        require(success);\r\n        _removeIndexInArray(_staking[msg.sender], stake_);\r\n        emit unstaked(msg.sender, _amount);\r\n    }\r\n    \r\n    /* Walks through an array from index, moves all values down one\r\n     * step the pops the last value.\r\n     */\r\n    function _removeIndexInArray(Stake[] storage _array, uint _index) private {\r\n        if (_index >= _array.length) return;\r\n        for (uint i = _index; i<_array.length-1; i++){\r\n            _array[i] = _array[i+1];\r\n        }\r\n        _array.pop();\r\n    }\r\n    \r\n    /* Changes the owner of the token\r\n     *\r\n     */\r\n    function setOwner(address owner_) public {\r\n        require(msg.sender == _owner, \"Only owner can set owner!\");\r\n        _owner = owner_;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTime\",\"type\":\"uint256\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFullBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getRemainingLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"getStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakes\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToMultipleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sales_\",\"type\":\"address\"}],\"name\":\"setSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PearToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c3aa755903008d35a9ef74a4f03f6ab56da422e39ff1b068f9d68db99d10692"}]}