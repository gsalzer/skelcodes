{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.5;\r\n\r\ncontract AdoreFinanceToken {\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event Reward(\r\n       address indexed to,\r\n       uint256 rewardAmount,\r\n       uint256 level\r\n    );\r\n    \r\n    event RewardWithdraw(\r\n       address indexed from,\r\n       uint256 rewardAmount\r\n    );\r\n    \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    event Approval(\r\n        address indexed tokenOwner, \r\n        address indexed spender,\r\n        uint tokens\r\n    );\r\n    \r\n    event Buy(\r\n        address indexed buyer,\r\n        uint256 tokensBought\r\n    );\r\n    \r\n    event Sell(\r\n        address indexed seller,\r\n        uint256 tokensSold\r\n    );\r\n   \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Adore Finance Token\";\r\n    string public symbol = \"XFA\";\r\n    uint8 constant public decimals = 0;\r\n    uint256 public totalSupply_ = 2000000;\r\n    uint256 constant internal tokenPriceInitial_ = 0.00012 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 25000000;\r\n    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\r\n    uint256 public base = 1;\r\n    uint public percent = 500;\r\n    uint public referralPercent = 1000;\r\n    uint public sellPercent = 1500;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal rewardBalanceLedger_;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    address commissionHolder;\r\n    uint256 internal tokenSupply_ = 0;\r\n    mapping(address => bool) internal administrators;\r\n    mapping(address => address) public genTree;\r\n    mapping(address => uint256) public level1Holding_;\r\n    address payable internal creator;\r\n    address internal management; //for management funds\r\n    address internal poolFund;\r\n    uint8[] percent_ = [7,2,1];\r\n    uint8[] adminPercent_ = [37,37,16,10];\r\n    address dev1;\r\n    address dev2;\r\n    address dev3;\r\n    address dev4;\r\n    bool buyable = false;\r\n    bool sellable = false;\r\n   \r\n    constructor()\r\n    {\r\n        creator = msg.sender;\r\n        administrators[creator] = true;\r\n    }\r\n    \r\n    function upgradeContract(address[] memory _users, uint256[] memory _balances, uint256[] memory _rewardBalances, address[] memory _refers, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                 genTree[_users[i]] = _refers[i];\r\n                if(_balances[i] > 0)\r\n                {\r\n                    tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                    rewardBalanceLedger_[_users[i]] += _rewardBalances[i];\r\n                    tokenSupply_ += _balances[i];\r\n                    emit Transfer(address(this),_users[i],_balances[i]);\r\n                }\r\n            }\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                genTree[_users[i]] = _refers[i];\r\n                if(_balances[i] > 0)\r\n                {\r\n                    tokenBalanceLedger_[_users[i]] -= _balances[i];\r\n                    rewardBalanceLedger_[_users[i]] -= _rewardBalances[i];\r\n                    tokenSupply_ -= _balances[i];\r\n                    emit Transfer(_users[i],address(this),_balances[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n      allowed[msg.sender][delegate] = numTokens;\r\n      emit Approval(msg.sender, delegate, numTokens);\r\n      return true;\r\n    }\r\n    \r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n      return allowed[owner][delegate];\r\n    }\r\n    \r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n      require(numTokens <= tokenBalanceLedger_[owner]);\r\n      require(numTokens <= allowed[owner][msg.sender]);\r\n      tokenBalanceLedger_[owner] = SafeMath.sub(tokenBalanceLedger_[owner],numTokens);\r\n      allowed[owner][msg.sender] =SafeMath.sub(allowed[owner][msg.sender],numTokens);\r\n      tokenBalanceLedger_[buyer] = SafeMath.add(tokenBalanceLedger_[buyer],numTokens);\r\n      emit Transfer(owner, buyer, numTokens);\r\n      return true;\r\n    }\r\n    \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _grv, uint256 _commFunds)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        base = _grv;\r\n        rewardBalanceLedger_[management] = _commFunds;\r\n    }\r\n    \r\n    function upgradePercentages(uint256 _percent, uint modeType) onlyAdministrator() public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            referralPercent = _percent;\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            sellPercent = _percent;\r\n        }\r\n        if(modeType == 3)\r\n        {\r\n            percent = _percent;\r\n        }\r\n    }\r\n    \r\n    function setAdministrator(address _address) public onlyAdministrator(){\r\n        administrators[_address] = true;\r\n    }\r\n    \r\n    function removeAdministrator(address _address) public onlyAdministrator(){\r\n        administrators[_address] = false;\r\n    }\r\n    \r\n    function isContract(address account) public view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n   \r\n   function stopInitial() public onlyAdministrator(){\r\n        buyable = false;\r\n    }\r\n    \r\n    function startInitial() public onlyAdministrator(){\r\n        buyable = true;\r\n    }\r\n    \r\n    function stopFinal() public onlyAdministrator(){\r\n        sellable = false;\r\n    }\r\n    \r\n    function startFinal() public onlyAdministrator(){\r\n        sellable = true;\r\n    }\r\n   \r\n    function withdrawRewards(address payable _customerAddress, uint256 _amount) onlyAdministrator() public\r\n    {\r\n        require(rewardBalanceLedger_[_customerAddress]>=_amount && _amount > 3000000000000000);\r\n        rewardBalanceLedger_[commissionHolder] += 3000000000000000;\r\n        rewardBalanceLedger_[_customerAddress] -= _amount;\r\n        emit RewardWithdraw(_customerAddress,_amount);\r\n        _amount = SafeMath.sub(_amount, 3000000000000000);\r\n        _customerAddress.transfer(_amount);\r\n    }\r\n\r\n    function setDevs(address _dev1, address _dev2, address _dev3, address _dev4) onlyAdministrator() public{\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        dev3 = _dev3;\r\n        dev4 = _dev4;\r\n    }\r\n    function distributeCommission() onlyAdministrator() public returns(bool)\r\n    {\r\n        require(rewardBalanceLedger_[management]>100000000000000);\r\n        rewardBalanceLedger_[dev1] += (rewardBalanceLedger_[management]*3600)/10000;\r\n        rewardBalanceLedger_[dev2] += (rewardBalanceLedger_[management]*3600)/10000;\r\n        rewardBalanceLedger_[dev3] += (rewardBalanceLedger_[management]*1500)/10000;\r\n        rewardBalanceLedger_[dev4] += (rewardBalanceLedger_[management]*1300)/10000;\r\n        rewardBalanceLedger_[management] = 0;\r\n        return true;\r\n    }\r\n    \r\n    function withdrawRewards(uint256 _amount) onlyAdministrator() public\r\n    {\r\n        address payable _customerAddress = msg.sender;\r\n        require(rewardBalanceLedger_[_customerAddress]>_amount && _amount > 3000000000000000);\r\n        rewardBalanceLedger_[_customerAddress] -= _amount;\r\n        rewardBalanceLedger_[commissionHolder] += 3000000000000000;\r\n        _amount = SafeMath.sub(_amount, 3000000000000000);\r\n        _customerAddress.transfer(_amount);\r\n    }\r\n   \r\n    function distributeRewards(uint256 _amountToDistribute, address _idToDistribute)\r\n    internal\r\n    {\r\n        uint256 _tempAmountToDistribute = _amountToDistribute;\r\n        for(uint i=0; i<3; i++)\r\n        {\r\n            address referrer = genTree[_idToDistribute];\r\n            if(referrer != address(0x0) && level1Holding_[referrer] > i && i>0)\r\n            {\r\n                rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[i])/10;\r\n                _idToDistribute = referrer;\r\n                emit Reward(referrer,(_amountToDistribute*percent_[i])/10,i);\r\n                _tempAmountToDistribute -= (_amountToDistribute*percent_[i])/10;\r\n            }\r\n            else if(i == 0)\r\n            {\r\n                 rewardBalanceLedger_[referrer] += (_amountToDistribute*percent_[i])/10;\r\n                _idToDistribute = referrer;\r\n                emit Reward(referrer,(_amountToDistribute*percent_[i])/10,i);\r\n                _tempAmountToDistribute -= (_amountToDistribute*percent_[i])/10;\r\n            }\r\n            else\r\n            {\r\n                \r\n            }\r\n        }\r\n        rewardBalanceLedger_[commissionHolder] += _tempAmountToDistribute;\r\n    }\r\n   \r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n    {\r\n        require(!isContract(msg.sender),\"Buy from contract is not allowed\");\r\n        require(_referredBy != msg.sender,\"Self Referral Not Allowed\");\r\n        if(genTree[msg.sender]!=_referredBy)\r\n            level1Holding_[_referredBy] +=1;\r\n        genTree[msg.sender] = _referredBy;\r\n        purchaseTokens(msg.value);\r\n    }\r\n   \r\n    receive() external payable\r\n    {\r\n        require(msg.value > currentPrice_, \"Very Low Amount\");\r\n        purchaseTokens(msg.value);\r\n    }\r\n    \r\n    fallback() external payable\r\n    {\r\n        require(msg.value > currentPrice_, \"Very Low Amount\");\r\n        purchaseTokens(msg.value);\r\n    }\r\n   \r\n    bool mutex = true;\r\n     \r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        require(!isContract(msg.sender),\"Selling from contract is not allowed\");\r\n        require (mutex == true);\r\n        address payable _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens,true);\r\n        uint256 _dividends = _ethereum * (sellPercent)/10000;\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        rewardBalanceLedger_[management] += _dividends;\r\n        rewardBalanceLedger_[commissionHolder] += 3000000000000000;\r\n        _dividends = _dividends + 3000000000000000;\r\n        _ethereum = SafeMath.sub(_ethereum,_dividends);\r\n        _customerAddress.transfer(_ethereum);\r\n        emit Transfer(_customerAddress, address(this), _tokens);\r\n    }\r\n   \r\n    function rewardOf(address _toCheck)\r\n        public view\r\n        returns(uint256)\r\n    {\r\n        return rewardBalanceLedger_[_toCheck];    \r\n    }\r\n   \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n   \r\n    function destruct() onlyAdministrator() public{\r\n        selfdestruct(creator);\r\n    }\r\n   \r\n    function setName(string memory _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    function setSymbol(string memory _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setupWallets(address _commissionHolder, address payable _management, address _poolFunds)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        commissionHolder = _commissionHolder;\r\n        management = _management;\r\n        poolFund = _poolFunds;\r\n    }\r\n    \r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalSupply_;\r\n    }\r\n   \r\n    function tokenSupply()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return currentPrice_;\r\n    }\r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n   \r\n    function purchaseTokens(uint256 _incomingEthereum)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        require(buyable,\"Contract does not allow\");\r\n        uint256 _totalDividends = 0;\r\n        uint256 _dividends = _incomingEthereum * referralPercent/10000;\r\n        _totalDividends += _dividends;\r\n        address _customerAddress = msg.sender;\r\n        distributeRewards(_dividends,_customerAddress);\r\n        _dividends = _incomingEthereum * referralPercent/10000;\r\n        _totalDividends += _dividends;\r\n        rewardBalanceLedger_[management] += _dividends;\r\n        _dividends = (_incomingEthereum *percent)/10000;\r\n        _totalDividends += _dividends;\r\n        rewardBalanceLedger_[poolFund] += _dividends;\r\n        _incomingEthereum = SafeMath.sub(_incomingEthereum, _totalDividends);\r\n        \r\n        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum , currentPrice_, base, true);\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) < (totalSupply_));\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        // fire event\r\n        emit Transfer(address(this), _customerAddress, _amountOfTokens);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, uint256 _grv, bool _buy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(3**(_grv-1)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        if(_buy == true)\r\n        {\r\n            currentPrice_ = _currentPrice;\r\n            base = _grv;\r\n        }\r\n        return _totalTokens;\r\n    }\r\n    \r\n    function getEthereumToTokens_(uint256 _ethereum)\r\n    public view returns(uint256)\r\n    {\r\n        uint256 _grv = base;\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(3**(_grv-1)));\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = upperBound_(_grv);\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _grv = _grv + 1;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = upperBound_(_grv);\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        return _totalTokens;\r\n    }\r\n   \r\n    function upperBound_(uint256 _grv)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        uint256 topBase = 0;\r\n        for(uint i = 1;i<=_grv;i++)\r\n        {\r\n            topBase +=200000-((_grv-i)*10000);\r\n        }\r\n        return topBase;\r\n    }\r\n   \r\n     function tokensToEthereum_(uint256 _tokens, bool _sell)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = base;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                _grv -= 1;\r\n                tempbase = upperBound_(_grv-1);\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             uint256 a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n       \r\n        if(_sell == true)\r\n        {\r\n            base = _grv;\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n    \r\n    function getTokensToEthereum_(uint256 _tokens)\r\n        public view returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 _grv = base;\r\n        uint256 tempbase = upperBound_(_grv-1);\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                _grv -= 1;\r\n                tempbase = upperBound_(_grv-1);\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _grv = _grv-1 ;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_grv-1)));\r\n            tempbase = upperBound_(_grv-1);\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             uint256 a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n       \r\n        return _etherReceived;\r\n    }\r\n   \r\n   \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeCommission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"genTree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"getEthereumToTokens_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getTokensToEthereum_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"level1Holding_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toCheck\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev4\",\"type\":\"address\"}],\"name\":\"setDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionHolder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolFunds\",\"type\":\"address\"}],\"name\":\"setupWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_refers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_grv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commFunds\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AdoreFinanceToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://134ecc9fbed43e88ec5ed583913dabec22c682cbebb6bd70ee1b199091607075"}]}