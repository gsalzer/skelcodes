{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CoverFlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IProtocol.sol\\\";\\r\\nimport \\\"./interfaces/IFlashBorrower.sol\\\";\\r\\nimport \\\"./interfaces/IERC3156FlashLender.sol\\\";\\r\\nimport \\\"./interfaces/ICover.sol\\\";\\r\\nimport \\\"./interfaces/IBPool.sol\\\";\\r\\nimport \\\"./ERC20/IERC20.sol\\\";\\r\\nimport \\\"./ERC20/IYERC20.sol\\\";\\r\\nimport \\\"./ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Cover FlashBorrower\\r\\n * @author alan\\r\\n */\\r\\ncontract CoverFlashBorrower is Ownable, IFlashBorrower {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC3156FlashLender public flashLender;\\r\\n    IERC20 public constant dai = IERC20(0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa);\\r\\n    IYERC20 public constant ydai = IYERC20(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\\r\\n\\r\\n    modifier onlySupportedCollaterals(address _collateral) {\\r\\n        require(_collateral == address(dai) || _collateral == address(ydai), \\\"only supports DAI and yDAI collaterals\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor (IERC3156FlashLender _flashLender) {\\r\\n        flashLender = _flashLender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Receive a flash loan.\\r\\n     * @param initiator The initiator of the loan.\\r\\n     * @param token The loan currency.\\r\\n     * @param amount The amount of tokens lent.\\r\\n     * @param fee The additional amount of tokens to repay.\\r\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\r\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\r\\n     */\\r\\n    function onFlashLoan(\\r\\n        address initiator, \\r\\n        address token, \\r\\n        uint256 amount, \\r\\n        uint256 fee, \\r\\n        bytes calldata data\\r\\n    ) external override returns(bytes32) {\\r\\n        require(msg.sender == address(flashLender), \\\"CoverFlashBorrower: Untrusted lender\\\");\\r\\n        require(initiator == address(this), \\\"CoverFlashBorrower: Untrusted loan initiator\\\");\\r\\n        require(token == address(dai), \\\"!dai\\\"); // For v1, can only flashloan DAI\\r\\n        uint256 amountOwed = amount + fee;\\r\\n        FlashLoanData memory flashLoanData = abi.decode(data, (FlashLoanData));\\r\\n        if (flashLoanData.isBuy) {\\r\\n            _onFlashLoanBuyClaim(flashLoanData, amount, amountOwed);\\r\\n        } else {\\r\\n            _onFlashLoanSellClaim(flashLoanData, amount, amountOwed);\\r\\n        }\\r\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Flash loan the amount of collateral needed to mint `_amountCovTokens` covTokens\\r\\n     * - If collateral is yDAI, `_amountCovTokens` is scaled by current price of yDAI to flash borrow enough DAI\\r\\n     */\\r\\n    function flashBuyClaim(\\r\\n        IBPool _bpool,\\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToBuy, \\r\\n        uint256 _maxAmountToSpend\\r\\n    ) external override onlySupportedCollaterals(_collateral) {\\r\\n        bytes memory data = abi.encode(FlashLoanData({\\r\\n            isBuy: true,\\r\\n            bpool: _bpool,\\r\\n            protocol: _protocol,\\r\\n            caller: msg.sender,\\r\\n            collateral: _collateral,\\r\\n            timestamp: _timestamp,\\r\\n            amount: _amountToBuy,\\r\\n            limit: _maxAmountToSpend\\r\\n        }));\\r\\n        uint256 amountDaiNeeded;\\r\\n        if (_collateral == address(dai)) {\\r\\n            amountDaiNeeded = _amountToBuy;\\r\\n        } else if (_collateral == address(ydai)) {\\r\\n            amountDaiNeeded = _amountToBuy * ydai.getPricePerFullShare();\\r\\n        }\\r\\n        require(amountDaiNeeded <= flashLender.maxFlashAmount(address(dai)), \\\"_amount > lender reserves\\\");\\r\\n        uint256 _allowance = dai.allowance(address(this), address(flashLender));\\r\\n        uint256 _fee = flashLender.flashFee(address(dai), amountDaiNeeded);\\r\\n        uint256 _repayment = amountDaiNeeded + _fee;\\r\\n        dai.approve(address(flashLender), _allowance + _repayment);\\r\\n        flashLender.flashLoan(address(this), address(dai), amountDaiNeeded, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Flash loan the amount of DAI needed to buy enough NOCLAIM to redeem with CLAIM tokens\\r\\n     */\\r\\n    function flashSellClaim(\\r\\n        IBPool _bpool,\\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToSell, \\r\\n        uint256 _minAmountToReturn\\r\\n    ) external override onlySupportedCollaterals(_collateral) {\\r\\n        bytes memory data = abi.encode(FlashLoanData({\\r\\n            isBuy: false,\\r\\n            bpool: _bpool,\\r\\n            protocol: _protocol,\\r\\n            caller: msg.sender,\\r\\n            collateral: _collateral,\\r\\n            timestamp: _timestamp,\\r\\n            amount: _amountToSell,\\r\\n            limit: _minAmountToReturn\\r\\n        }));\\r\\n        (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\\r\\n        uint256 amountDaiNeeded = _calcInGivenOut(_bpool, address(dai), address(noclaimToken), _amountToSell);\\r\\n        require(amountDaiNeeded <= flashLender.maxFlashAmount(address(dai)), \\\"_amount > lender reserves\\\");\\r\\n        uint256 _allowance = dai.allowance(address(this), address(flashLender));\\r\\n        uint256 _fee = flashLender.flashFee(address(dai), amountDaiNeeded);\\r\\n        uint256 _repayment = amountDaiNeeded + _fee;\\r\\n        dai.approve(address(flashLender), _allowance + _repayment);\\r\\n        flashLender.flashLoan(address(this), address(dai), amountDaiNeeded, data);\\r\\n    }\\r\\n\\r\\n    function setFlashLender(address _flashLender) external override onlyOwner {\\r\\n        require(_flashLender != address(0), \\\"_flashLender is 0\\\");\\r\\n        flashLender = IERC3156FlashLender(_flashLender);\\r\\n    }\\r\\n\\r\\n    /// @notice Tokens that are accidentally sent to this contract can be recovered\\r\\n    function collect(IERC20 _token) external override onlyOwner {\\r\\n        uint256 balance = _token.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"_token balance is 0\\\");\\r\\n        _token.transfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    function getBuyClaimCost(\\r\\n        IBPool _bpool, \\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToBuy\\r\\n    ) external override view onlySupportedCollaterals(_collateral) returns (uint256 totalCost) {\\r\\n        uint256 amountDaiNeeded = _amountToBuy;\\r\\n        if (_collateral == address(ydai)) {\\r\\n            amountDaiNeeded = amountDaiNeeded * ydai.getPricePerFullShare();\\r\\n        }\\r\\n        uint256 flashFee = flashLender.flashFee(address(dai), amountDaiNeeded);\\r\\n        uint256 daiReceivedFromSwap;\\r\\n        {\\r\\n            (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\\r\\n            daiReceivedFromSwap = _calcOutGivenIn(_bpool, address(noclaimToken), _amountToBuy, address(dai));\\r\\n        }\\r\\n        totalCost = amountDaiNeeded - daiReceivedFromSwap + flashFee;\\r\\n    }\\r\\n\\r\\n    function getSellClaimReturn(\\r\\n        IBPool _bpool, \\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToSell,\\r\\n        uint256 _redeemFeeNumerator\\r\\n    ) external override view onlySupportedCollaterals(_collateral) returns (uint256 totalReturn) {\\r\\n        (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\\r\\n        uint256 amountDaiNeeded = _calcInGivenOut(_bpool, address(dai), address(noclaimToken), _amountToSell);\\r\\n        uint256 flashFee = flashLender.flashFee(address(dai), amountDaiNeeded);\\r\\n        uint256 daiReceivedFromRedeem;\\r\\n        if (_collateral == address(dai)) {\\r\\n            daiReceivedFromRedeem = _amountToSell;\\r\\n        } else if (_collateral == address(ydai)) {\\r\\n            // Adjust for price of yDAI\\r\\n            daiReceivedFromRedeem = _amountToSell * ydai.getPricePerFullShare();\\r\\n        }\\r\\n        // Adjust for redemption fee\\r\\n        daiReceivedFromRedeem = daiReceivedFromRedeem * (10000 - _redeemFeeNumerator) / 10000;\\r\\n        totalReturn = daiReceivedFromRedeem - amountDaiNeeded - flashFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * - If collateral is yDAI, wrap borrowed DAI\\r\\n     * - Deposit collateral for covTokens\\r\\n     * - Sell NOCLAIM tokens on Balancer to receive DAI\\r\\n     * - Calculate amount user needs to pay to repay loan + slippage + fee\\r\\n     * - Send minted CLAIM tokens to user\\r\\n     */\\r\\n    function _onFlashLoanBuyClaim(FlashLoanData memory data, uint256 amount, uint256 amountOwed) internal {\\r\\n        uint256 mintAmount;\\r\\n\\r\\n        // Wrap DAI to yDAI if necessary\\r\\n        if (data.collateral == address(dai)) {\\r\\n            mintAmount = amount;\\r\\n            _approve(dai, address(data.protocol), mintAmount);\\r\\n        } else if (data.collateral == address(ydai)) {\\r\\n            _approve(dai, address(ydai), amount);\\r\\n            uint256 ydaiBalBefore = ydai.balanceOf(address(this));\\r\\n            ydai.deposit(amount);\\r\\n            mintAmount = ydai.balanceOf(address(this)) - ydaiBalBefore;\\r\\n            _approve(ydai, address(data.protocol), mintAmount);\\r\\n        }\\r\\n\\r\\n        // Mint claim and NOCLAIM tokens using collateral\\r\\n        data.protocol.addCover(data.collateral, data.timestamp, mintAmount);\\r\\n        (IERC20 claimToken, IERC20 noclaimToken) = _getCovTokenAddresses(\\r\\n            data.protocol, \\r\\n            data.collateral, \\r\\n            data.timestamp\\r\\n        );\\r\\n\\r\\n        // Swap exact number of NOCLAIM tokens for DAI on Balancer\\r\\n        _approve(noclaimToken, address(data.bpool), mintAmount);\\r\\n        (uint256 daiReceived, ) = data.bpool.swapExactAmountIn(\\r\\n            address(noclaimToken),\\r\\n            mintAmount,\\r\\n            address(dai),\\r\\n            0,\\r\\n            type(uint256).max\\r\\n        );\\r\\n        // Make sure cost is not greater than limit\\r\\n        require(amountOwed - daiReceived <= data.limit, \\\"cost exceeds limit\\\");\\r\\n        // User pays for slippage + flash loan fee\\r\\n        dai.transferFrom(data.caller, address(this), amountOwed - daiReceived);\\r\\n        // Resolve the flash loan\\r\\n        dai.transfer(msg.sender, amountOwed);\\r\\n        // Transfer claim tokens to caller\\r\\n        claimToken.transfer(data.caller, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * - Sell DAI for NOCLAIM tokens\\r\\n     * - Transfer CLAIM tokens from user to this contract\\r\\n     * - Redeem CLAIM and NOCLAIM tokens for collateral\\r\\n     * - If collateral is yDAI, unwrap to DAI\\r\\n     * - Calculate amount user needs to repay loan + slippage + fee\\r\\n     * - Send leftover DAI to user\\r\\n     */\\r\\n    function _onFlashLoanSellClaim(FlashLoanData memory data, uint256 amount, uint256 amountOwed) internal {\\r\\n        uint256 daiAvailable = amount;\\r\\n        _approve(dai, address(data.bpool), amount);\\r\\n        (IERC20 claimToken, IERC20 noclaimToken) = _getCovTokenAddresses(\\r\\n            data.protocol, \\r\\n            data.collateral, \\r\\n            data.timestamp\\r\\n        );\\r\\n        // Swap DAI for exact number of NOCLAIM tokens\\r\\n        (uint256 daiSpent, ) = data.bpool.swapExactAmountOut(\\r\\n            address(dai),\\r\\n            amount,\\r\\n            address(noclaimToken),\\r\\n            data.amount,\\r\\n            type(uint256).max\\r\\n        );\\r\\n        daiAvailable = daiAvailable - daiSpent;\\r\\n        // Need an equal number of CLAIM and NOCLAIM tokens\\r\\n        claimToken.transferFrom(data.caller, address(this), data.amount);\\r\\n        \\r\\n        // Redeem CLAIM and NOCLAIM tokens for collateral\\r\\n        uint256 collateralBalBefore = IERC20(data.collateral).balanceOf(address(this));\\r\\n        address cover = data.protocol.coverMap(data.collateral, data.timestamp);\\r\\n        ICover(cover).redeemCollateral(data.amount);\\r\\n        uint256 collateralReceived = IERC20(data.collateral).balanceOf(address(this)) - collateralBalBefore;\\r\\n        // Unwrap yDAI to DAI if necessary\\r\\n        if (data.collateral == address(dai)) {\\r\\n            daiAvailable = daiAvailable + collateralReceived;\\r\\n        } else if (data.collateral == address(ydai)) {\\r\\n            _approve(ydai, address(ydai), collateralReceived);\\r\\n            uint256 daiBalBefore = dai.balanceOf(address(this));\\r\\n            ydai.withdraw(collateralReceived);\\r\\n            uint256 daiReceived = dai.balanceOf(address(this)) - daiBalBefore;\\r\\n            daiAvailable = daiAvailable + daiReceived;\\r\\n        }\\r\\n        // Make sure return is not less than limit\\r\\n        require(daiAvailable - amountOwed >= data.limit, \\\"returns are less than limit\\\");\\r\\n        // Resolve the flash loan\\r\\n        dai.transfer(msg.sender, amountOwed);\\r\\n        // Transfer leftover DAI to caller\\r\\n        dai.transfer(data.caller, daiAvailable - amountOwed);\\r\\n    }\\r\\n\\r\\n    function _calcInGivenOut(IBPool _bpool, address _tokenIn, address _tokenOut, uint256 _tokenAmountOut) internal view returns (uint256 tokenAmountIn) {\\r\\n        uint256 tokenBalanceIn = _bpool.getBalance(_tokenIn);\\r\\n        uint256 tokenWeightIn = _bpool.getNormalizedWeight(_tokenIn);\\r\\n        uint256 tokenBalanceOut = _bpool.getBalance(_tokenOut);\\r\\n        uint256 tokenWeightOut = _bpool.getNormalizedWeight(_tokenOut);\\r\\n        uint256 swapFee = _bpool.getSwapFee();\\r\\n\\r\\n        tokenAmountIn = _bpool.calcInGivenOut(\\r\\n            tokenBalanceIn,\\r\\n            tokenWeightIn,\\r\\n            tokenBalanceOut,\\r\\n            tokenWeightOut,\\r\\n            _tokenAmountOut,\\r\\n            swapFee\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _calcOutGivenIn(IBPool _bpool, address _tokenIn, uint256 _tokenAmountIn, address _tokenOut) internal view returns (uint256 tokenAmountOut) {\\r\\n        uint256 tokenBalanceIn = _bpool.getBalance(_tokenIn);\\r\\n        uint256 tokenWeightIn = _bpool.getNormalizedWeight(_tokenIn);\\r\\n        uint256 tokenBalanceOut = _bpool.getBalance(_tokenOut);\\r\\n        uint256 tokenWeightOut = _bpool.getNormalizedWeight(_tokenOut);\\r\\n        uint256 swapFee = _bpool.getSwapFee();\\r\\n\\r\\n        tokenAmountOut = _bpool.calcOutGivenIn(\\r\\n            tokenBalanceIn,\\r\\n            tokenWeightIn,\\r\\n            tokenBalanceOut,\\r\\n            tokenWeightOut,\\r\\n            _tokenAmountIn,\\r\\n            swapFee\\r\\n        );\\r\\n    } \\r\\n\\r\\n    function _getCovTokenAddresses(\\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp\\r\\n    ) internal view returns (IERC20 claimToken, IERC20 noclaimToken) {\\r\\n        address cover = _protocol.coverMap(_collateral, _timestamp);\\r\\n        claimToken = ICover(cover).claimCovToken();\\r\\n        noclaimToken = ICover(cover).noclaimCovToken();\\r\\n    }\\r\\n\\r\\n    function _approve(IERC20 _token, address _spender, uint256 _amount) internal {\\r\\n        if (_token.allowance(address(this), _spender) < _amount) {\\r\\n            _token.approve(_spender, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProtocol {\\r\\n  function coverMap(address _collateral, uint48 _expirationTimestamp) external view returns (address);\\r\\n  function addCover(address _collateral, uint48 _timestamp, uint256 _amount) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\r\\nimport \\\"./IProtocol.sol\\\";\\r\\nimport \\\"./ICover.sol\\\";\\r\\nimport \\\"./IBPool.sol\\\";\\r\\nimport \\\"../ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFlashBorrower is IERC3156FlashBorrower {\\r\\n    struct FlashLoanData {\\r\\n        bool isBuy;\\r\\n        IBPool bpool;\\r\\n        IProtocol protocol;\\r\\n        address caller;\\r\\n        address collateral;\\r\\n        uint48 timestamp;\\r\\n        uint256 amount;\\r\\n        uint256 limit;\\r\\n    }\\r\\n\\r\\n    function flashBuyClaim(\\r\\n        IBPool _bpool,\\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToBuy, \\r\\n        uint256 _maxAmountToSpend\\r\\n    ) external;\\r\\n    \\r\\n    function flashSellClaim(\\r\\n        IBPool _bpool,\\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToSell, \\r\\n        uint256 _minAmountToReturn\\r\\n    ) external;\\r\\n\\r\\n    function getBuyClaimCost(\\r\\n        IBPool _bpool, \\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToBuy\\r\\n    ) external view returns (uint256 totalCost);\\r\\n\\r\\n    function getSellClaimReturn(\\r\\n        IBPool _bpool, \\r\\n        IProtocol _protocol, \\r\\n        address _collateral, \\r\\n        uint48 _timestamp, \\r\\n        uint256 _amountToSell,\\r\\n        uint256 _redeemFeeNumerator\\r\\n    ) external view returns (uint256 totalReturn);\\r\\n\\r\\n    function setFlashLender(address _flashLender) external;\\r\\n    function collect(IERC20 _token) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC3156FlashLender {\\r\\n\\r\\n    /**\\r\\n     * @dev The amount of currency available to be lended.\\r\\n     * @param token The loan currency.\\r\\n     * @return The amount of `token` that can be borrowed.\\r\\n     */\\r\\n    function maxFlashAmount(\\r\\n        address token\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev The fee to be charged for a given loan.\\r\\n     * @param token The loan currency.\\r\\n     * @param amount The amount of tokens lent.\\r\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\r\\n     */\\r\\n    function flashFee(\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Initiate a flash loan.\\r\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\r\\n     * @param token The loan currency.\\r\\n     * @param amount The amount of tokens lent.\\r\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\r\\n     */\\r\\n    function flashLoan(\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ICover {\\r\\n  function claimCovToken() external view returns (IERC20);\\r\\n  function noclaimCovToken() external view returns (IERC20);\\r\\n  function redeemCollateral(uint256 _amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBPool {\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\r\\n\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) external view returns (uint256 tokenAmountOut);\\r\\n\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) external view returns (uint256 tokenAmountIn);\\r\\n\\r\\n    function getNormalizedWeight(address token) external view returns (uint256);\\r\\n    function getBalance(address token) external view returns (uint256);\\r\\n    function getSwapFee() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20/IYERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IYERC20 is IERC20 {\\r\\n    function deposit(uint256 _amount) external;\\r\\n    function withdraw(uint256 _shares) external;\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC3156FlashBorrower {\\r\\n\\r\\n    /**\\r\\n     * @dev Receive a flash loan.\\r\\n     * @param initiator The initiator of the loan.\\r\\n     * @param token The loan currency.\\r\\n     * @param amount The amount of tokens lent.\\r\\n     * @param fee The additional amount of tokens to repay.\\r\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\r\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\r\\n     */\\r\\n    function onFlashLoan(\\r\\n        address initiator,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_flashLender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"_bpool\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"flashBuyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"_bpool\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountToReturn\",\"type\":\"uint256\"}],\"name\":\"flashSellClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"_bpool\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBuy\",\"type\":\"uint256\"}],\"name\":\"getBuyClaimCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"_bpool\",\"type\":\"address\"},{\"internalType\":\"contract IProtocol\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"getSellClaimReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashLender\",\"type\":\"address\"}],\"name\":\"setFlashLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ydai\",\"outputs\":[{\"internalType\":\"contract IYERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoverFlashBorrower","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009adf4155d44053e1f8009d4550f2a7cd456a817d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}