{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/Keep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"add: +\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"sub: -\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"mul: *\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"div: /\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"mod: %\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call{value:amount}(\\\"\\\");\\n        require(success, \\\"Address: reverted\\\");\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: < 0\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: !contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: !succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary Keep3rV1Library {\\n    function getReserve(address pair, address reserve) external view returns (uint) {\\n        (uint _r0, uint _r1,) = IUniswapV2Pair(pair).getReserves();\\n        if (IUniswapV2Pair(pair).token0() == reserve) {\\n            return _r0;\\n        } else if (IUniswapV2Pair(pair).token1() == reserve) {\\n            return _r1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ninterface IGovernance {\\n    function proposeJob(address job) external;\\n}\\n\\ninterface IKeep3rV1Helper {\\n    function getQuoteLimit(uint gasUsed) external view returns (uint);\\n}\\n\\n// File: contracts/Keep3r.sol\\n\\npragma solidity ^0.6.6;\\ncontract Relay3rV3 is ReentrancyGuard {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Keep3r Helper to set max prices for the ecosystem\\n    IKeep3rV1Helper public KPRH;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"RelayerV3\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"RLR\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply = 0; // Initial 0\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    mapping (address => mapping (address => uint)) internal allowances;\\n    mapping (address => uint) internal balances;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint chainId,address verifyingContract)\\\");\\n    bytes32 public immutable DOMAINSEPARATOR;\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint nonce,uint expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\\\");\\n\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint votes;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAINSEPARATOR, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"delegateBySig: sig\\\");\\n        require(nonce == nonces[signatory]++, \\\"delegateBySig: nonce\\\");\\n        require(now <= expiry, \\\"delegateBySig: expired\\\");\\n        _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint) {\\n        require(blockNumber < block.number, \\\"getPriorVotes:\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint delegatorBalance = votes[delegator].add(bonds[delegator][address(this)]);\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint srcRepNew = srcRepOld.sub(amount, \\\"_moveVotes: underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint oldVotes, uint newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"_writeCheckpoint: 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /// @notice Submit a job\\n    event SubmitJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\\n\\n    /// @notice Apply credit to a job\\n    event ApplyCredit(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\\n\\n    /// @notice Remove credit for a job\\n    event RemoveJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\\n\\n    /// @notice Unbond credit for a job\\n    event UnbondJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\\n\\n    /// @notice Added a Job\\n    event JobAdded(address indexed job, uint block, address governance);\\n\\n    /// @notice Removed a job\\n    event JobRemoved(address indexed job, uint block, address governance);\\n\\n    /// @notice Worked a job\\n    event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block, uint amount);\\n\\n    /// @notice Keeper bonding\\n    event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);\\n\\n    /// @notice Keeper bonded\\n    event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);\\n\\n    /// @notice Keeper unbonding\\n    event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);\\n\\n    /// @notice Keeper unbound\\n    event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);\\n\\n    /// @notice Keeper slashed\\n    event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);\\n\\n    /// @notice Keeper disputed\\n    event KeeperDispute(address indexed keeper, uint block);\\n\\n    /// @notice Keeper resolved\\n    event KeeperResolved(address indexed keeper, uint block);\\n\\n    event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);\\n\\n    /// @notice Keeper rights approved to be spent by spender\\n    event KeeperRightApproval(address indexed owner, address indexed bonding ,address indexed spender, uint256 amount);\\n\\n    /// @notice Keeper right transfered to a new address\\n    event KeeperRightTransfered(address indexed from, address indexed to, address indexed bond);\\n\\n    /// @notice 3 days to bond to become a keeper\\n    uint public BOND = 3 days;\\n    /// @notice 14 days to unbond to remove funds from being a keeper\\n    uint public UNBOND = 14 days;\\n    /// @notice 3 days till liquidity can be bound\\n    uint public LIQUIDITYBOND = 3 days;\\n\\n    /// @notice direct liquidity fee 0.3%,Can be modified by governance contract\\n    uint public FEE = 30;\\n    uint constant public BASE = 10000;\\n\\n    /// @notice address used for ETH transfers\\n    address constant public ETH = address(0xE);\\n\\n    /// @notice tracks all current bondings (time)\\n    mapping(address => mapping(address => uint)) public bondings;\\n    /// @notice tracks all current unbondings (time)\\n    mapping(address => mapping(address => uint)) public unbondings;\\n    /// @notice allows for partial unbonding\\n    mapping(address => mapping(address => uint)) public partialUnbonding;\\n    /// @notice tracks all current pending bonds (amount)\\n    mapping(address => mapping(address => uint)) public pendingbonds;\\n    /// @notice tracks how much a keeper has bonded\\n    mapping(address => mapping(address => uint)) public bonds;\\n    /// @notice tracks underlying votes (that don't have bond)\\n    mapping(address => uint) public votes;\\n\\n    /// @notice total bonded (totalSupply for bonds)\\n    uint public totalBonded = 0;\\n    /// @notice tracks when a keeper was first registered\\n    mapping(address => uint) public firstSeen;\\n\\n    /// @notice tracks if a keeper has a pending dispute\\n    mapping(address => bool) public disputes;\\n\\n    /// @notice tracks last job performed for a keeper\\n    mapping(address => uint) public lastJob;\\n    /// @notice tracks the total job executions for a keeper\\n    mapping(address => uint) public workCompleted;\\n    /// @notice list of all jobs registered for the keeper system\\n    mapping(address => bool) public jobs;\\n    /// @notice the current credit available for a job\\n    mapping(address => mapping(address => uint)) public credits;\\n    /// @notice the balances for the liquidity providers\\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityProvided;\\n    /// @notice liquidity unbonding days\\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityUnbonding;\\n    /// @notice liquidity unbonding amounts\\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmountsUnbonding;\\n    /// @dev job proposal delay\\n    mapping(address => uint) public jobProposalDelay;\\n    /// @notice liquidity apply date\\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityApplied;\\n    /// @notice liquidity amount to apply\\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmount;\\n\\n    /// @notice list of all current keepers\\n    mapping(address => bool) public keepers;\\n    /// @notice blacklist of keepers not allowed to participate\\n    mapping(address => bool) public blacklist;\\n\\n    //Allowances of transfer rights of relayer rights\\n    //first address is user,second is the spender,3rd is the bonding that may be allowed to be spent,finally last is the allowance of bond amount to be spent\\n    mapping(address => mapping (address => mapping(address => uint256))) public KeeperAllowances;\\n\\n    /// @notice traversable array of keepers to make external management easier\\n    address[] public keeperList;\\n    /// @notice traversable array of jobs to make external management easier\\n    address[] public jobList;\\n\\n    /// @notice governance address for the governance contract\\n    address public governance;\\n    address public pendingGovernance;\\n    /// @notice the liquidity token supplied by users paying for jobs\\n    mapping(address => bool) public liquidityAccepted;\\n\\n    address[] public liquidityPairs;\\n\\n    uint internal _gasUsed;\\n\\n    constructor() public {\\n        // Set governance for this token\\n        governance = msg.sender;\\n        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\\n    }\\n\\n    modifier onlyGovernance(){\\n        require(msg.sender == governance);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add ETH credit to a job to be paid out for work\\n     * @param job the job being credited\\n     */\\n    function addCreditETH(address job) external payable {\\n        require(jobs[job], \\\"!job\\\");\\n        uint _fee = msg.value.mul(FEE).div(BASE);\\n        credits[job][ETH] = credits[job][ETH].add(msg.value.sub(_fee));\\n        payable(governance).transfer(_fee);\\n\\n        emit AddCredit(ETH, job, msg.sender, block.number, msg.value);\\n    }\\n\\n    /**\\n     * @notice Add credit to a job to be paid out for work\\n     * @param credit the credit being assigned to the job\\n     * @param job the job being credited\\n     * @param amount the amount of credit being added to the job\\n     */\\n    function addCredit(address credit, address job, uint amount) external nonReentrant {\\n        require(jobs[job], \\\"!job\\\");\\n        uint _before = IERC20(credit).balanceOf(address(this));\\n        IERC20(credit).safeTransferFrom(msg.sender, address(this), amount);\\n        uint _received = IERC20(credit).balanceOf(address(this)).sub(_before);\\n        uint _fee = _received.mul(FEE).div(BASE);\\n        credits[job][credit] = credits[job][credit].add(_received.sub(_fee));\\n        IERC20(credit).safeTransfer(governance, _fee);\\n\\n        emit AddCredit(credit, job, msg.sender, block.number, _received);\\n    }\\n\\n    /**\\n     * @notice Add non transferable votes for governance\\n     * @param voter to add the votes to\\n     * @param amount of votes to add\\n     */\\n    function addVotes(address voter, uint amount) external onlyGovernance{\\n        _activate(voter, address(this));\\n        votes[voter] = votes[voter].add(amount);\\n        totalBonded = totalBonded.add(amount);\\n        _moveDelegates(address(0), delegates[voter], amount);\\n    }\\n\\n    /**\\n     * @notice Remove non transferable votes for governance\\n     * @param voter to subtract the votes\\n     * @param amount of votes to remove\\n     */\\n    function removeVotes(address voter, uint amount) external onlyGovernance{\\n        votes[voter] = votes[voter].sub(amount);\\n        totalBonded = totalBonded.sub(amount);\\n        _moveDelegates(delegates[voter], address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Add credit to a job to be paid out for work\\n     * @param job the job being credited\\n     * @param amount the amount of credit being added to the job\\n     */\\n    function addRLRCredit(address job, uint amount) external onlyGovernance{\\n        require(jobs[job], \\\"!job\\\");\\n        credits[job][address(this)] = credits[job][address(this)].add(amount);\\n        _mint(address(this), amount);\\n        emit AddCredit(address(this), job, msg.sender, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice Approve a liquidity pair for being accepted in future\\n     * @param liquidity the liquidity no longer accepted\\n     */\\n    function approveLiquidity(address liquidity) external onlyGovernance{\\n        require(!liquidityAccepted[liquidity], \\\"!pair\\\");\\n        liquidityAccepted[liquidity] = true;\\n        liquidityPairs.push(liquidity);\\n    }\\n\\n    /**\\n     * @notice Revoke a liquidity pair from being accepted in future\\n     * @param liquidity the liquidity no longer accepted\\n     */\\n    function revokeLiquidity(address liquidity) external onlyGovernance{\\n        liquidityAccepted[liquidity] = false;\\n    }\\n\\n    /**\\n     * @notice Set new delay from governance\\n     * @param newDelay the new delay\\n     * @param delayType the type of bond delay being updated\\n     */\\n    function setNewDelay(uint newDelay,uint delayType) external onlyGovernance {\\n        require( delayType >= 1 && delayType <= 3 ,\\\"!type\\\");\\n        if(delayType == 1)\\n            BOND = newDelay;\\n        else if (delayType == 2)\\n            UNBOND = newDelay;\\n        else\\n            LIQUIDITYBOND = newDelay;\\n    }\\n\\n    /**\\n     * @notice Displays all accepted liquidity pairs\\n     */\\n    function pairs() external view returns (address[] memory) {\\n        return liquidityPairs;\\n    }\\n\\n    /**\\n     * @notice Allows liquidity providers to submit jobs\\n     * @param liquidity the liquidity being added\\n     * @param job the job to assign credit to\\n     * @param amount the amount of liquidity tokens to use\\n     */\\n    function addLiquidityToJob(address liquidity, address job, uint amount) external nonReentrant {\\n        require(liquidityAccepted[liquidity], \\\"!pair\\\");\\n        IERC20(liquidity).safeTransferFrom(msg.sender, address(this), amount);\\n        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);\\n        liquidityApplied[msg.sender][liquidity][job] = now;\\n        liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);\\n\\n        if (!jobs[job] && jobProposalDelay[job].add(UNBOND) < now) {\\n            IGovernance(governance).proposeJob(job);\\n            jobProposalDelay[job] = now;\\n        }\\n        emit SubmitJob(job, liquidity, msg.sender, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice Applies the credit provided in addLiquidityToJob to the job\\n     * @param provider the liquidity provider\\n     * @param liquidity the pair being added as liquidity\\n     * @param job the job that is receiving the credit\\n     */\\n    function applyCreditToJob(address provider, address liquidity, address job) external {\\n        require(liquidityAccepted[liquidity], \\\"!pair\\\");\\n        require(liquidityApplied[provider][liquidity][job] != 0, \\\"no bond\\\");\\n        require(block.timestamp.sub(liquidityApplied[provider][liquidity][job].add(LIQUIDITYBOND)) >= 0, \\\"bonding\\\");\\n        uint _liquidity = Keep3rV1Library.getReserve(liquidity, address(this));\\n        uint _credit = _liquidity.mul(liquidityAmount[provider][liquidity][job]).div(IERC20(liquidity).totalSupply());\\n        _mint(address(this), _credit);\\n        credits[job][address(this)] = credits[job][address(this)].add(_credit);\\n        liquidityAmount[provider][liquidity][job] = 0;\\n\\n        emit ApplyCredit(job, liquidity, provider, block.number, _credit);\\n    }\\n\\n    /**\\n     * @notice Unbond liquidity for a job\\n     * @param liquidity the pair being unbound\\n     * @param job the job being unbound from\\n     * @param amount the amount of liquidity being removed\\n     */\\n    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external {\\n        require(liquidityAmount[msg.sender][liquidity][job] == 0, \\\"pending credit\\\");\\n        liquidityUnbonding[msg.sender][liquidity][job] = now;\\n        liquidityAmountsUnbonding[msg.sender][liquidity][job] = liquidityAmountsUnbonding[msg.sender][liquidity][job].add(amount);\\n        require(liquidityAmountsUnbonding[msg.sender][liquidity][job] <= liquidityProvided[msg.sender][liquidity][job], \\\"insufficient funds\\\");\\n\\n        uint _liquidity = Keep3rV1Library.getReserve(liquidity, address(this));\\n        uint _credit = _liquidity.mul(amount).div(IERC20(liquidity).totalSupply());\\n        if (_credit > credits[job][address(this)]) {\\n            _burn(address(this), credits[job][address(this)]);\\n            credits[job][address(this)] = 0;\\n        } else {\\n            _burn(address(this), _credit);\\n            credits[job][address(this)] = credits[job][address(this)].sub(_credit);\\n        }\\n\\n        emit UnbondJob(job, liquidity, msg.sender, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice Allows liquidity providers to remove liquidity\\n     * @param liquidity the pair being unbound\\n     * @param job the job being unbound from\\n     */\\n    function removeLiquidityFromJob(address liquidity, address job) external {\\n        require(liquidityUnbonding[msg.sender][liquidity][job] != 0, \\\"unbond\\\");\\n        require(block.timestamp.sub(liquidityUnbonding[msg.sender][liquidity][job].add(UNBOND)) >= 0, \\\"unbonding\\\");\\n        uint _amount = liquidityAmountsUnbonding[msg.sender][liquidity][job];\\n        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].sub(_amount);\\n        liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;\\n        IERC20(liquidity).safeTransfer(msg.sender, _amount);\\n\\n        emit RemoveJob(job, liquidity, msg.sender, block.number, _amount);\\n    }\\n\\n    /**\\n     * @notice Allows governance to mint new tokens to treasury\\n     * @param amount the amount of tokens to mint to treasury\\n     */\\n    function mint(uint amount) external onlyGovernance{\\n        _mint(governance, amount);\\n    }\\n\\n    /**\\n     * @notice burn owned tokens\\n     * @param amount the amount of tokens to burn\\n     */\\n    function burn(uint amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function _mint(address dst, uint amount) internal {\\n        // mint the amount\\n        totalSupply = totalSupply.add(amount);\\n        // transfer the amount to the recipient\\n        balances[dst] = balances[dst].add(amount);\\n        emit Transfer(address(0), dst, amount);\\n    }\\n\\n    function _burn(address dst, uint amount) internal {\\n        require(dst != address(0), \\\"_burn: zero address\\\");\\n        balances[dst] = balances[dst].sub(amount, \\\"_burn: exceeds balance\\\");\\n        totalSupply = totalSupply.sub(amount);\\n        emit Transfer(dst, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Implemented by jobs to show that a keeper performed work\\n     * @param keeper address of the keeper that performed the work\\n     */\\n    function worked(address keeper) external {\\n        workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));\\n    }\\n\\n    /**\\n     * @notice Implemented by jobs to show that a keeper performed work\\n     * @param keeper address of the keeper that performed the work\\n     * @param amount the reward that should be allocated\\n     */\\n    function workReceipt(address keeper, uint amount) public {\\n        require(jobs[msg.sender], \\\"!job\\\");\\n        require(amount <= KPRH.getQuoteLimit(_gasUsed.sub(gasleft())), \\\"max limit\\\");\\n        credits[msg.sender][address(this)] = credits[msg.sender][address(this)].sub(amount, \\\"insuffcient funds\\\");\\n        lastJob[keeper] = now;\\n        _reward(keeper, amount);\\n        workCompleted[keeper] = workCompleted[keeper].add(amount);\\n        emit KeeperWorked(address(this), msg.sender, keeper, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice Implemented by jobs to show that a keeper performed work\\n     * @param credit the asset being awarded to the keeper\\n     * @param keeper address of the keeper that performed the work\\n     * @param amount the reward that should be allocated\\n     */\\n    function receipt(address credit, address keeper, uint amount) external {\\n        require(jobs[msg.sender], \\\"receipt: !job\\\");\\n        credits[msg.sender][credit] = credits[msg.sender][credit].sub(amount, \\\"receipt: insuffcient funds\\\");\\n        lastJob[keeper] = now;\\n        IERC20(credit).safeTransfer(keeper, amount);\\n        emit KeeperWorked(credit, msg.sender, keeper, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice Implemented by jobs to show that a keeper performed work\\n     * @param keeper address of the keeper that performed the work\\n     * @param amount the amount of ETH sent to the keeper\\n     */\\n    function receiptETH(address keeper, uint amount) public {\\n        require(jobs[msg.sender], \\\"receipt: !job\\\");\\n        credits[msg.sender][ETH] = credits[msg.sender][ETH].sub(amount, \\\"insuffcient funds\\\");\\n        lastJob[keeper] = now;\\n        payable(keeper).transfer(amount);\\n        emit KeeperWorked(ETH, msg.sender, keeper, block.number, amount);\\n    }\\n\\n    function _reward(address _from, uint _amount) internal {\\n        bonds[_from][address(this)] = bonds[_from][address(this)].add(_amount);\\n        totalBonded = totalBonded.add(_amount);\\n        _moveDelegates(address(0), delegates[_from], _amount);\\n        emit Transfer(msg.sender, _from, _amount);\\n    }\\n\\n    function _bond(address bonding, address _from, uint _amount) internal {\\n        bonds[_from][bonding] = bonds[_from][bonding].add(_amount);\\n        if (bonding == address(this)) {\\n            totalBonded = totalBonded.add(_amount);\\n            _moveDelegates(address(0), delegates[_from], _amount);\\n        }\\n    }\\n\\n    function _unbond(address bonding, address _from, uint _amount) internal {\\n        bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);\\n        if (bonding == address(this)) {\\n            totalBonded = totalBonded.sub(_amount);\\n            _moveDelegates(delegates[_from], address(0), _amount);\\n        }\\n\\n    }\\n\\n    /**\\n     * @notice Allows governance to add new job systems\\n     * @param job address of the contract for which work should be performed\\n     */\\n    function addJob(address job) external onlyGovernance{\\n        require(!jobs[job], \\\"job known\\\");\\n        jobs[job] = true;\\n        jobList.push(job);\\n        emit JobAdded(job, block.number, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Full listing of all jobs ever added\\n     * @return array blob\\n     */\\n    function getJobs() external view returns (address[] memory) {\\n        return jobList;\\n    }\\n\\n    /**\\n     * @notice Allows governance to remove a job from the systems\\n     * @param job address of the contract for which work should be performed\\n     */\\n    function removeJob(address job) external onlyGovernance{\\n        jobs[job] = false;\\n        emit JobRemoved(job, block.number, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allows governance to change the Keep3rHelper for max spend\\n     * @param _kprh new helper address to set\\n     */\\n    function setKeep3rHelper(address _kprh) external onlyGovernance{\\n        KPRH = IKeep3rV1Helper(_kprh);\\n    }\\n\\n    /**\\n     * @notice Allows governance to change governance (for future upgradability)\\n     * @param _governance new governance address to set\\n     */\\n    function setGovernance(address _governance) external onlyGovernance{\\n        pendingGovernance = _governance;\\n    }\\n\\n    /**\\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\\n     */\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"!pendingGov\\\");\\n        governance = pendingGovernance;\\n    }\\n\\n    /**\\n     * @notice confirms if the current keeper is registered, can be used for general (non critical) functions\\n     * @param keeper the keeper being investigated\\n     * @return true/false if the address is a keeper\\n     */\\n    function isKeeper(address keeper) public returns (bool) {\\n        _gasUsed = gasleft();\\n        return keepers[keeper];\\n    }\\n\\n    /**\\n     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\\n     * @param keeper the keeper being investigated\\n     * @param minBond the minimum requirement for the asset provided in bond\\n     * @param earned the total funds earned in the keepers lifetime\\n     * @param age the age of the keeper in the system\\n     * @return true/false if the address is a keeper and has more than the bond\\n     */\\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {\\n        _gasUsed = gasleft();\\n        return keepers[keeper]\\n                && bonds[keeper][address(this)].add(votes[keeper]) >= minBond\\n                && workCompleted[keeper] >= earned\\n                && now.sub(firstSeen[keeper]) >= age;\\n    }\\n\\n    /**\\n     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\\n     * @param keeper the keeper being investigated\\n     * @param bond the bound asset being evaluated\\n     * @param minBond the minimum requirement for the asset provided in bond\\n     * @param earned the total funds earned in the keepers lifetime\\n     * @param age the age of the keeper in the system\\n     * @return true/false if the address is a keeper and has more than the bond\\n     */\\n    function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {\\n        _gasUsed = gasleft();\\n        return keepers[keeper]\\n                && bonds[keeper][bond] >= minBond\\n                && workCompleted[keeper] >= earned\\n                && now.sub(firstSeen[keeper]) >= age;\\n    }\\n\\n    /**\\n     * @notice begin the bonding process for a new keeper\\n     * @param bonding the asset being bound\\n     * @param amount the amount of bonding asset being bound\\n     */\\n    function bond(address bonding, uint amount) external nonReentrant {\\n        require(!blacklist[msg.sender], \\\"blacklisted\\\");\\n        //In this part we changed the addition of current time + bond time to the time bond was called\\n        bondings[msg.sender][bonding] = now;\\n        if (bonding == address(this)) {\\n            _transferTokens(msg.sender, address(this), amount);\\n        } else {\\n            uint _before = IERC20(bonding).balanceOf(address(this));\\n            IERC20(bonding).safeTransferFrom(msg.sender, address(this), amount);\\n            amount = IERC20(bonding).balanceOf(address(this)).sub(_before);\\n        }\\n        pendingbonds[msg.sender][bonding] = pendingbonds[msg.sender][bonding].add(amount);\\n        emit KeeperBonding(msg.sender, block.number, bondings[msg.sender][bonding], amount);\\n    }\\n\\n    /**\\n     * @notice get full list of keepers in the system\\n     */\\n    function getKeepers() external view returns (address[] memory) {\\n        return keeperList;\\n    }\\n\\n    /**\\n     * @notice Does initial data initialization of keeper entry\\n     * @param sender the address to init data for\\n     */\\n    function doDataInit(address sender) internal {\\n        if (firstSeen[sender] == 0) {\\n          firstSeen[sender] = now;\\n          keeperList.push(sender);\\n          lastJob[sender] = now;\\n        }\\n    }\\n\\n    /**\\n     * @notice allows a keeper to activate/register themselves after bonding\\n     * @param bonding the asset being activated as bond collateral\\n     */\\n    function activate(address bonding) external {\\n        require(!blacklist[msg.sender], \\\"blacklisted\\\");\\n        //In this part we changed the check of bonding time being lesser than now to check if current time is > bonding time\\n        require(bondings[msg.sender][bonding] != 0 && block.timestamp.sub(bondings[msg.sender][bonding].add(BOND)) >= 0, \\\"bonding\\\");\\n        //Setup initial data\\n        doDataInit(msg.sender);\\n        _activate(msg.sender, bonding);\\n    }\\n\\n    function _activate(address keeper, address bonding) internal {\\n        keepers[keeper] = true;\\n        _bond(bonding, keeper, pendingbonds[keeper][bonding]);\\n        pendingbonds[keeper][bonding] = 0;\\n        emit KeeperBonded(keeper, block.number, block.timestamp, bonds[keeper][bonding]);\\n    }\\n\\n    /**\\n     * @notice allows a keeper to transfer their keeper rights and bonds to another address\\n     * @param bonding the asset being transfered to new address as bond collateral\\n     * @param from the address keeper rights and bonding amount is transfered from\\n     * @param to the address keeper rights and bonding amount is transfered to\\n     */\\n    function transferKeeperRight(address bonding,address from,address to,uint256 bondAmount) public {\\n        //Removed dokeeperRightChecks and put it here\\n        require(isKeeper(from));\\n        //Check caller or caller allowances\\n        require(msg.sender == from || KeeperAllowances[from][msg.sender][bonding] >= bondAmount);\\n        //Check the bond amount\\n        require(bondAmount <= bonds[from][bonding]);\\n        doDataInit(to);\\n\\n        bool fullTransfer = bondAmount == bonds[from][bonding];\\n\\n        //Set the user calling keeper stat to false if bond amount transfered is the full bond balance\\n        if(fullTransfer)\\n            keepers[from] = false;\\n        //Set the to addr keeper stat to true\\n        keepers[to] = true;\\n\\n        //Unbond from sender\\n        _unbond(bonding,from,bondAmount);\\n        //Bond to receiver\\n        _bond(bonding,to,bondAmount);\\n\\n        //Transfer firstSeen to new addr,which transfers the age of the relayer\\n        firstSeen[to] = firstSeen[from];\\n        //Reset from addr's firstSeen,transfer workcompleted data if fullTransfer\\n        if(fullTransfer){\\n            firstSeen[from] = 0;\\n            workCompleted[to] = workCompleted[from];\\n            workCompleted[from] = 0;\\n        }\\n        //remove rights for this address after transfer is done from caller,if caller isnt the from addr\\n        if(msg.sender != from) KeeperAllowances[from][msg.sender][bonding] = KeeperAllowances[from][msg.sender][bonding].sub(bondAmount);\\n        emit KeeperRightTransfered(from,to,bonding);\\n    }\\n\\n    /**\\n     * @notice begin the unbonding process to stop being a keeper\\n     * @param bonding the asset being unbound\\n     * @param amount allows for partial unbonding\\n     */\\n    function unbond(address bonding, uint amount) external {\\n        unbondings[msg.sender][bonding] = now;\\n        _unbond(bonding, msg.sender, amount);\\n        partialUnbonding[msg.sender][bonding] = partialUnbonding[msg.sender][bonding].add(amount);\\n        emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender][bonding], amount);\\n    }\\n\\n    /**\\n     * @notice withdraw funds after unbonding has finished\\n     * @param bonding the asset to withdraw from the bonding pool\\n     */\\n    function withdraw(address bonding) external nonReentrant {\\n        //Same changes as on bonding check is done here\\n        require(unbondings[msg.sender][bonding] != 0 && block.timestamp.sub(unbondings[msg.sender][bonding].add(UNBOND)) >= 0, \\\"unbonding\\\");\\n        require(!disputes[msg.sender], \\\"disputes\\\");\\n\\n        if (bonding == address(this)) {\\n            _transferTokens(address(this), msg.sender, partialUnbonding[msg.sender][bonding]);\\n        } else {\\n            IERC20(bonding).safeTransfer(msg.sender, partialUnbonding[msg.sender][bonding]);\\n        }\\n        emit KeeperUnbound(msg.sender, block.number, block.timestamp, partialUnbonding[msg.sender][bonding]);\\n        partialUnbonding[msg.sender][bonding] = 0;\\n    }\\n\\n    /**\\n     * @notice allows governance to create a dispute for a given keeper\\n     * @param keeper the address in dispute\\n     */\\n    function dispute(address keeper) external onlyGovernance{\\n        disputes[keeper] = true;\\n        emit KeeperDispute(keeper, block.number);\\n    }\\n\\n    /**\\n     * @notice allows governance to slash a keeper based on a dispute\\n     * @param bonded the asset being slashed\\n     * @param keeper the address being slashed\\n     * @param amount the amount being slashed\\n     */\\n    function slash(address bonded, address keeper, uint amount) public nonReentrant onlyGovernance{\\n        if (bonded == address(this)) {\\n            _transferTokens(address(this), governance, amount);\\n        } else {\\n            IERC20(bonded).safeTransfer(governance, amount);\\n        }\\n        _unbond(bonded, keeper, amount);\\n        disputes[keeper] = false;\\n        emit KeeperSlashed(keeper, msg.sender, block.number, amount);\\n    }\\n\\n    /**\\n     * @notice blacklists a keeper from participating in the network\\n     * @param keeper the address being slashed\\n     */\\n    function revoke(address keeper) external onlyGovernance{\\n        keepers[keeper] = false;\\n        blacklist[keeper] = true;\\n        slash(address(this), keeper, bonds[keeper][address(this)]);\\n    }\\n\\n    /**\\n     * @notice allows governance to resolve a dispute on a keeper\\n     * @param keeper the address cleared\\n     */\\n    function resolve(address keeper) external onlyGovernance{\\n        disputes[keeper] = false;\\n        emit KeeperResolved(keeper, block.number);\\n    }\\n\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint amount) public returns (bool) {\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer Keeper rights\\n     * @param spender The address of the account which may transfer keeper rights\\n     * @param amount Amount of bonding to approve to be spent\\n     * @return Whether or not the approval succeeded\\n     */\\n    function keeperrightapprove(address spender,address bonding,uint256 amount) public returns (bool) {\\n        KeeperAllowances[msg.sender][spender][bonding] = amount;\\n\\n        emit KeeperRightApproval(msg.sender, bonding,spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAINSEPARATOR, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"permit: signature\\\");\\n        require(signatory == owner, \\\"permit: unauthorized\\\");\\n        require(now <= deadline, \\\"permit: expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint amount) public returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint(-1)) {\\n            uint newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(address src, address dst, uint amount) internal {\\n        require(src != address(0), \\\"_transferTokens: zero address\\\");\\n        require(dst != address(0), \\\"_transferTokens: zero address\\\");\\n\\n        balances[src] = balances[src].sub(amount);\\n        balances[dst] = balances[dst].add(amount);\\n        emit Transfer(src, dst, amount);\\n    }\\n\\n    function _getChainId() internal pure returns (uint) {\\n        uint chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"Keep3rV1Library\": \"0x57694b69636d4C7DaeC1E1cc7901CE48AC28563d\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"ApplyCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"JobAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"JobRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperBonding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"KeeperDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"KeeperResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeeperRightApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"}],\"name\":\"KeeperRightTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slasher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slash\",\"type\":\"uint256\"}],\"name\":\"KeeperSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperUnbonding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactivated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeeperWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"RemoveJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"SubmitJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"UnbondJob\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAINSEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KPRH\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Helper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"KeeperAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITYBOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNBOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"addCreditETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"addJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRLRCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"applyCreditToJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"approveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstSeen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJobs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"isBondedKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"isMinKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jobProposalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jobs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keeperList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"keeperrightapprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmountsUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partialUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingbonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiptETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"removeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"removeLiquidityFromJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"revokeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kprh\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayType\",\"type\":\"uint256\"}],\"name\":\"setNewDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonded\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"transferKeeperRight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbondLiquidityFromJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unbondings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"workReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"worked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Relay3rV3","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}