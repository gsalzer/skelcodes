{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface StakingContract {\r\n    function transferOwnership(address newOwner) external;\r\n    function burn(address account, uint256 amount) external;\r\n    function updateHoldersDay(bool _enableHoldersDay) external;\r\n    \r\n    // Self-explanatory functions to update several configuration variables\r\n    \r\n    function updateTokenAddress(address newToken) external;\r\n    \r\n    function updateCalculator(address calc) external;\r\n    \r\n    function updateUseExternalCalcIterative(bool _useExternalCalcIterative) external;\r\n    \r\n    \r\n    function updateInflationAdjustmentFactor(uint256 _inflationAdjustmentFactor) external;\r\n    \r\n    function updateStreak(bool negative, uint _streak) external;\r\n    \r\n    function updateMinStakeDurationDays(uint8 _minStakeDurationDays) external;\r\n    \r\n    function updateMinStakes(uint _minStake) external;\r\n    function updateMinPercentIncrease(uint8 _minIncrease) external;\r\n    function updateEnableBurns(bool _enabledBurns) external;\r\n    \r\n    function updateWhitelist(address addr, string calldata reason, bool remove) external;\r\n    \r\n    function updateUniWhitelist(address addr, string calldata reason, bool remove) external;\r\n    \r\n    function updateBlacklist(address addr, uint256 fee, bool remove) external;\r\n    \r\n    function updateUniswapPair(address addr) external;\r\n    \r\n    function updateEnableUniswapSellBurns(bool _enableDirectSellBurns) external;\r\n    \r\n    function updateUniswapSellBurnPercent(uint8 _sellerBurnPercent) external;\r\n    \r\n    function updateFreeze(bool _enableFreeze) external;\r\n    \r\n    function updateNextStakingContract(address nextContract) external;\r\n    \r\n    function updateLiquidityStakingContract(address _liquidityStakingContract) external;\r\n    \r\n    function updateOracle(address _oracle) external;\r\n    \r\n    function updatePreviousStakingContract(address previousContract) external;\r\n\r\n    function updateTransferBurnFee(uint _transferBurnFee) external;\r\n\r\n    function updateMaxStreak(uint _maxStreak) external;\r\n\r\n    function updateMaxStakingDays(uint _maxStakingDays) external;\r\n    function updateHoldersDayRewardDenominator(uint _holdersDayRewardDenominator) external;\r\n\r\n    function updateIncreaseTransferFees(bool _increaseTransferFees) external;\r\n    function updateCheckPreviousContractWhitelist(bool _checkPreviousStakingContractWhitelist) external;\r\n    \r\n    function removeLatestUpdate() external;\r\n    function resetStakeTimeDebug(address account, uint startTimestamp, uint lastTimestamp, bool migrated) external;\r\n    \r\n}\r\n\r\n\r\ninterface Minter {\r\n    function liquidityRewards(address recipient, uint amount) external;\r\n}\r\n\r\ninterface UniswapV2Router{\r\n    function addLiquidityETH(\r\n      address token,\r\n      uint amountTokenDesired,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n      \r\n     function WETH() external pure returns (address);\r\n     \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface ERC20 {\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n}\r\n\r\n\r\ncontract Administrator {\r\n    \r\n    address public owner;\r\n    StakingContract public stakingContract;\r\n    address public TimeContract;\r\n    Minter public minter;\r\n    address public storedTokens;\r\n    UniswapV2Router public router;\r\n    \r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTIME() {\r\n        assert(msg.sender == TimeContract);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        stakingContract = StakingContract(0x738d3CEC4E685A2546Ab6C3B055fd6B8C1198093); \r\n        minter = Minter(0x28e484dBD6BB501D37EFC8cD4b8dc33121cC78be);\r\n        storedTokens = 0xB3470826919CC8eA0aB5e333358E36f701B1c6f5;\r\n        router = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        TimeContract = 0x8e9bF4AfcE134C25743c454be2b95831202A638d;\r\n    }\r\n    \r\n    function transfer(address to, uint amount) external onlyOwner {\r\n        stakingContract.burn(storedTokens, amount);\r\n        minter.liquidityRewards(to, amount);\r\n    }\r\n    \r\n    function transferOwnership() external onlyOwner {\r\n        stakingContract.transferOwnership(owner);\r\n    }\r\n    \r\n    function updateStoredTokens(address _storedTokens) external onlyOwner {\r\n        storedTokens = _storedTokens;\r\n    }\r\n    \r\n    function updateStakingContract(address _stakingContract) external onlyOwner {\r\n        stakingContract = StakingContract(_stakingContract);\r\n    }\r\n    \r\n    function updateMinter(address _minter) external onlyOwner {\r\n        minter = Minter(_minter);\r\n    }\r\n    \r\n    function swapExactETHForTokensAddLiquidity(address[] calldata path, uint liquidityETH, uint swapETH)\r\n      external\r\n      payable\r\n      onlyTIME\r\n      returns (uint liquidity) {\r\n        uint[] memory amounts = router.swapExactETHForTokens{value: swapETH}(0, path, address(this), block.timestamp + 86400);\r\n        (uint amountToken, uint amountETH, uint liquidity) = router.addLiquidityETH{value: liquidityETH}(TimeContract, amounts[amounts.length-1], 0, 0, TimeContract, block.timestamp + 86400);\r\n        return liquidity;\r\n      }\r\n     \r\n    function updateTimeContract(address _time) external onlyOwner {\r\n      TimeContract = _time;   \r\n    }\r\n    \r\n    function updateHoldersDay(bool _enableHoldersDay) external onlyOwner {\r\n        stakingContract.updateHoldersDay(_enableHoldersDay);\r\n    }\r\n    \r\n    // Self-explanatory functions to update several configuration variables\r\n    \r\n    function updateTokenAddress(address newToken) external onlyOwner {\r\n        stakingContract.updateTokenAddress(newToken);\r\n    }\r\n    \r\n    function updateCalculator(address calc) external onlyOwner {\r\n        stakingContract.updateCalculator(calc);\r\n    }\r\n    \r\n    function updateUseExternalCalcIterative(bool _useExternalCalcIterative) external onlyOwner {\r\n        stakingContract.updateUseExternalCalcIterative(_useExternalCalcIterative);\r\n    }\r\n    \r\n    \r\n    function updateInflationAdjustmentFactor(uint256 _inflationAdjustmentFactor) external onlyOwner {\r\n        stakingContract.updateInflationAdjustmentFactor(_inflationAdjustmentFactor);\r\n    }\r\n    \r\n    function updateStreak(bool negative, uint _streak) external onlyOwner {\r\n        stakingContract.updateStreak(negative, _streak);\r\n    }\r\n    \r\n    function updateMinStakeDurationDays(uint8 _minStakeDurationDays) external onlyOwner {\r\n        stakingContract.updateMinStakeDurationDays(_minStakeDurationDays);\r\n    }\r\n    \r\n    function updateMinStakes(uint _minStake) external onlyOwner {\r\n        stakingContract.updateMinStakes(_minStake);\r\n    }\r\n    function updateMinPercentIncrease(uint8 _minIncrease) external onlyOwner {\r\n        stakingContract.updateMinPercentIncrease(_minIncrease);\r\n    }\r\n    \r\n    function updateEnableBurns(bool _enabledBurns) external onlyOwner {\r\n        stakingContract.updateEnableBurns(_enabledBurns);\r\n    }\r\n    \r\n    function updateWhitelist(address addr, string calldata reason, bool remove) external onlyOwner {\r\n        stakingContract.updateWhitelist(addr, reason, remove);\r\n    }\r\n    \r\n    function updateUniWhitelist(address addr, string calldata reason, bool remove) external onlyOwner {\r\n        stakingContract.updateUniWhitelist(addr, reason, remove);\r\n    }\r\n    \r\n    function updateBlacklist(address addr, uint256 fee, bool remove) external onlyOwner {\r\n       stakingContract.updateBlacklist(addr, fee, remove);\r\n    }\r\n    \r\n    function updateUniswapPair(address addr) external onlyOwner {\r\n       stakingContract.updateUniswapPair(addr);\r\n    }\r\n    \r\n    function updateEnableUniswapSellBurns(bool _enableDirectSellBurns) external onlyOwner {\r\n        stakingContract.updateEnableUniswapSellBurns(_enableDirectSellBurns);\r\n    }\r\n    \r\n    function updateUniswapSellBurnPercent(uint8 _sellerBurnPercent) external onlyOwner {\r\n        stakingContract.updateUniswapSellBurnPercent(_sellerBurnPercent);\r\n    }\r\n    \r\n    function updateFreeze(bool _enableFreeze) external onlyOwner {\r\n        stakingContract.updateFreeze(_enableFreeze);\r\n    }\r\n    \r\n    function updateNextStakingContract(address nextContract) external onlyOwner {\r\n        stakingContract.updateNextStakingContract(nextContract);\r\n    }\r\n    \r\n    function updateLiquidityStakingContract(address _liquidityStakingContract) external onlyOwner {\r\n        stakingContract.updateLiquidityStakingContract(_liquidityStakingContract);\r\n    }\r\n    \r\n    function updateOracle(address _oracle) external onlyOwner {\r\n        stakingContract.updateOracle(_oracle);\r\n    }\r\n    \r\n    function updatePreviousStakingContract(address previousContract) external onlyOwner {\r\n        stakingContract.updatePreviousStakingContract(previousContract);\r\n    }\r\n\r\n    function updateTransferBurnFee(uint _transferBurnFee) external onlyOwner {\r\n        stakingContract.updateTransferBurnFee(_transferBurnFee);\r\n    }\r\n\r\n    function updateMaxStreak(uint _maxStreak) external onlyOwner {\r\n        stakingContract.updateMaxStreak(_maxStreak);\r\n    }\r\n    \r\n\r\n    function updateMaxStakingDays(uint _maxStakingDays) external onlyOwner {\r\n        stakingContract.updateMaxStakingDays(_maxStakingDays);\r\n    }\r\n\r\n    function updateHoldersDayRewardDenominator(uint _holdersDayRewardDenominator) external onlyOwner {\r\n        stakingContract.updateHoldersDayRewardDenominator( _holdersDayRewardDenominator);\r\n    }\r\n\r\n    function updateIncreaseTransferFees(bool _increaseTransferFees) external onlyOwner {\r\n        stakingContract.updateIncreaseTransferFees(_increaseTransferFees);\r\n    }\r\n\r\n    function updateCheckPreviousContractWhitelist(bool _checkPreviousStakingContractWhitelist) external onlyOwner {\r\n        stakingContract.updateCheckPreviousContractWhitelist(_checkPreviousStakingContractWhitelist);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n       stakingContract.transferOwnership(newOwner);\r\n    }\r\n    \r\n    function removeLatestUpdate() external onlyOwner {\r\n        stakingContract.removeLatestUpdate();\r\n    }\r\n    \r\n    function burn(address account, uint256 amount) external onlyOwner {     // We allow ourselves to burn tokens in case they were minted due to a bug\r\n        stakingContract.burn(account, amount);\r\n    }\r\n    \r\n    function resetStakeTimeDebug(address account, uint lastTimestamp, uint startTimestamp, bool migrated) external {\r\n        require(msg.sender == owner || msg.sender == TimeContract);\r\n        stakingContract.resetStakeTimeDebug(account, lastTimestamp, startTimestamp, migrated);\r\n    }\r\n    \r\n    function transferTokens(address token, uint amount) external onlyOwner { // in case any tokens get caught here\r\n        ERC20(token).transfer(owner, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TimeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLatestUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"migrated\",\"type\":\"bool\"}],\"name\":\"resetStakeTimeDebug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract StakingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidityETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapETH\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"calc\",\"type\":\"address\"}],\"name\":\"updateCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_checkPreviousStakingContractWhitelist\",\"type\":\"bool\"}],\"name\":\"updateCheckPreviousContractWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabledBurns\",\"type\":\"bool\"}],\"name\":\"updateEnableBurns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableDirectSellBurns\",\"type\":\"bool\"}],\"name\":\"updateEnableUniswapSellBurns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableFreeze\",\"type\":\"bool\"}],\"name\":\"updateFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableHoldersDay\",\"type\":\"bool\"}],\"name\":\"updateHoldersDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdersDayRewardDenominator\",\"type\":\"uint256\"}],\"name\":\"updateHoldersDayRewardDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_increaseTransferFees\",\"type\":\"bool\"}],\"name\":\"updateIncreaseTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationAdjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"updateInflationAdjustmentFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityStakingContract\",\"type\":\"address\"}],\"name\":\"updateLiquidityStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStakingDays\",\"type\":\"uint256\"}],\"name\":\"updateMaxStakingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStreak\",\"type\":\"uint256\"}],\"name\":\"updateMaxStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minIncrease\",\"type\":\"uint8\"}],\"name\":\"updateMinPercentIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minStakeDurationDays\",\"type\":\"uint8\"}],\"name\":\"updateMinStakeDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"updateMinStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"updateMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextContract\",\"type\":\"address\"}],\"name\":\"updateNextStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousContract\",\"type\":\"address\"}],\"name\":\"updatePreviousStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"updateStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storedTokens\",\"type\":\"address\"}],\"name\":\"updateStoredTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"negative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_streak\",\"type\":\"uint256\"}],\"name\":\"updateStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_time\",\"type\":\"address\"}],\"name\":\"updateTimeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferBurnFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"updateUniWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_sellerBurnPercent\",\"type\":\"uint8\"}],\"name\":\"updateUniswapSellBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useExternalCalcIterative\",\"type\":\"bool\"}],\"name\":\"updateUseExternalCalcIterative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Administrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://774e9bd939970dbbb152a1ad1a8501eabe078f9702b25ec04e99fedc0a071903"}]}