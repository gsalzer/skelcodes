{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function initialize(uint256 _requiredSignatures, address[] _initialValidators, address _owner) public returns(bool);\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function owner() public view returns(address);\r\n}\r\n\r\n// File: contracts/IForeignBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IForeignBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function setValidators(address[] _validators) public returns(bool);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\nlibrary Message {\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // bytes 1 to 32 are 0 because message length is stored as little endian.\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 zero bytes followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns(address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function parseNewSetMessage(bytes message)\r\n        internal\r\n        returns(address[] memory newSet, bytes32 txHash, address contractAddress)\r\n    {\r\n        uint256 msgLength;\r\n        uint256 position;\r\n        address newSetMember;\r\n        assembly {\r\n            msgLength := mload(message)\r\n            txHash := mload(add(message, 32))\r\n            contractAddress := mload(add(message, 52))\r\n            position := 72\r\n        }\r\n        uint256 newSetLength = (msgLength - position) / 20 + 1;\r\n        newSet = new address[](newSetLength);\r\n        uint256 i = 0;\r\n        while (position <= msgLength) {\r\n            assembly {\r\n                newSetMember := mload(add(message, position))\r\n            }\r\n            newSet[i] = newSetMember;\r\n            position += 20;\r\n            i++;\r\n        }\r\n        return (newSet, txHash, contractAddress);\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns(bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns(uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message, bool knownLength) internal pure returns (address) {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        if (knownLength) {\r\n            return ecrecover(hashMessage(message), uint8(v), r, s);\r\n        } else {\r\n            return ecrecover(hashMessageOfUnknownLength(message), uint8(v), r, s);\r\n        }\r\n    }\r\n\r\n    function hashMessage(bytes message) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        // message is always 84 length\r\n        string memory msgLength = \"104\";\r\n        return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n    }\r\n\r\n    function hashMessageOfUnknownLength(bytes message) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        uint256 lengthOffset;\r\n        uint256 length;\r\n        assembly {\r\n          // The first word of a string is its length\r\n          length := mload(message)\r\n          // The beginning of the base-10 message length in the prefix\r\n          lengthOffset := add(prefix, 57)\r\n        }\r\n        uint256 lengthLength = 0;\r\n        // The divisor to get the next left-most message length digit\r\n        uint256 divisor = 100000;\r\n        // Move one digit of the message length to the right at a time\r\n        while (divisor != 0) {\r\n          // The place value at the divisor\r\n          uint256 digit = length / divisor;\r\n          if (digit == 0) {\r\n            // Skip leading zeros\r\n            if (lengthLength == 0) {\r\n              divisor /= 10;\r\n              continue;\r\n            }\r\n          }\r\n          // Found a non-zero digit or non-leading zero digit\r\n          lengthLength++;\r\n          // Remove this digit from the message length's current value\r\n          length -= digit * divisor;\r\n          // Shift our base-10 divisor over\r\n          divisor /= 10;\r\n          // Convert the digit to its ASCII representation (man ascii)\r\n          digit += 0x30;\r\n          // Move to the next character and write the digit\r\n          lengthOffset++;\r\n          assembly {\r\n            mstore8(lengthOffset, digit)\r\n          }\r\n        }\r\n        // The null string requires exactly 1 zero (unskip 1 leading 0)\r\n        if (lengthLength == 0) {\r\n          lengthLength = 1 + 0x19 + 1;\r\n        } else {\r\n          lengthLength += 1 + 0x19;\r\n        }\r\n        // Truncate the tailing zeros from the prefix\r\n        assembly {\r\n          mstore(prefix, lengthLength)\r\n        }\r\n        return keccak256(prefix, message);\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IBridgeValidators _validatorContract) internal view\r\n    {\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function hasEnoughValidSignaturesForeignBridgeValidator(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IForeignBridgeValidators _validatorContract) internal view\r\n    {\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function hasEnoughValidNewSetSignaturesForeignBridgeValidator(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IForeignBridgeValidators _validatorContract) internal view\r\n    {\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessageOfUnknownLength(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (sig.length != 65) {\r\n          return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        assembly {\r\n          r := mload(add(sig, 32))\r\n          s := mload(add(sig, 64))\r\n          v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n          v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n          return (address(0));\r\n        } else {\r\n          return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IOwnedUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ninterface IOwnedUpgradeabilityProxy {\r\n    function proxyOwner() public view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/OwnedUpgradeability.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract OwnedUpgradeability {\r\n\r\n    function upgradeabilityAdmin() public view returns (address) {\r\n        return IOwnedUpgradeabilityProxy(this).proxyOwner();\r\n    }\r\n\r\n    // Avoid using onlyProxyOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfOwnerOfProxy() {\r\n        require(msg.sender == upgradeabilityAdmin());\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n\r\n    mapping(bytes32 => uint256[]) internal uintArrayStorage;\r\n    mapping(bytes32 => string[]) internal stringArrayStorage;\r\n    mapping(bytes32 => address[]) internal addressArrayStorage;\r\n    //mapping(bytes32 => bytes[]) internal bytesArrayStorage;\r\n    mapping(bytes32 => bool[]) internal boolArrayStorage;\r\n    mapping(bytes32 => int256[]) internal intArrayStorage;\r\n    mapping(bytes32 => bytes32[]) internal bytes32ArrayStorage;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/EternalOwnable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title EternalOwnable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract EternalOwnable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event EternalOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit EternalOwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(abi.encodePacked(\"owner\"))] = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicBridge is EternalStorage, EternalOwnable, OwnedUpgradeability {\r\n    using SafeMath for uint256;\r\n\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n    event DailyLimitChanged(uint256 newLimit);\r\n    event ExecutionDailyLimitChanged(uint256 newLimit);\r\n\r\n    function getBridgeInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\r\n        return (2, 2, 0);\r\n    }\r\n\r\n    function setGasPrice(uint256 _gasPrice) public onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[keccak256(abi.encodePacked(\"gasPrice\"))] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"gasPrice\"))];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) public onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"deployedAtBlock\"))];\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function setTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\r\n    }\r\n\r\n    function minPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"minPerTx\"))];\r\n    }\r\n\r\n    function maxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"maxPerTx\"))];\r\n    }\r\n\r\n    function executionMaxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"executionMaxPerTx\"))];\r\n    }\r\n\r\n    function setInitialize(bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))] = _status;\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))];\r\n    }\r\n\r\n    function getCurrentDay() public view returns(uint256) {\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) public onlyOwner {\r\n        uintStorage[keccak256(abi.encodePacked(\"dailyLimit\"))] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function dailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"dailyLimit\"))];\r\n    }\r\n\r\n    function setExecutionDailyLimit(uint256 _dailyLimit) public onlyOwner {\r\n        uintStorage[keccak256(abi.encodePacked(\"executionDailyLimit\"))] = _dailyLimit;\r\n        emit ExecutionDailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function executionDailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"executionDailyLimit\"))];\r\n    }\r\n\r\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < executionDailyLimit());\r\n        uintStorage[keccak256(abi.encodePacked(\"executionMaxPerTx\"))] = _maxPerTx;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < dailyLimit());\r\n        uintStorage[keccak256(abi.encodePacked(\"maxPerTx\"))] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[keccak256(abi.encodePacked(\"minPerTx\"))] = _minPerTx;\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinExecutionLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyIfOwnerOfProxy {\r\n        require(_to != address(0));\r\n        if (_token == address(0)) {\r\n            _to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IERC20 token = IERC20(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        require(token.transfer(_to, balance));\r\n    }\r\n\r\n\r\n    function isContract(address _addr) internal view returns (bool)\r\n    {\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicForeignBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract BasicForeignBridge is EternalStorage {\r\n    using SafeMath for uint256;\r\n    /// triggered when relay of deposit from HomeBridge is complete\r\n    event RelayedMessage(address recipient, uint value, bytes32 transactionHash);\r\n\r\n    function onExecuteMessage(address, uint256) internal returns(bool);\r\n\r\n    function setRelayedMessages(bytes32 _txHash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))] = _status;\r\n    }\r\n\r\n    function relayedMessages(bytes32 _txHash) public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))];\r\n    }\r\n\r\n    function messageWithinLimits(uint256) internal view returns(bool);\r\n\r\n    function onFailedMessage(address, uint256, bytes32) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Validatable is EternalStorage {\r\n    function validatorContract() public view returns(IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[keccak256(abi.encodePacked(\"validatorContract\"))]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns(uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n}\r\n\r\n// File: contracts/ERC677Receiver.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC677Receiver {\r\n  function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/erc20_to_erc20/ForeignBridgeErcToErc.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ForeignBridgeErcToErc is ERC677Receiver, BasicBridge, BasicForeignBridge, Validatable {\r\n\r\n    event RelayedMessage(address recipient, uint value, bytes32 transactionHash);\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        address _erc20token,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256 _gasPrice,\r\n        uint256 _maxPerTx,\r\n        uint256 _homeDailyLimit,\r\n        uint256 _homeMaxPerTx,\r\n        address _owner\r\n    ) public returns(bool) {\r\n        require(!isInitialized());\r\n        require(_validatorContract != address(0) && isContract(_validatorContract));\r\n        require(_requiredBlockConfirmations != 0);\r\n        require(_gasPrice > 0);\r\n        require(_homeMaxPerTx < _homeDailyLimit);\r\n        require(_owner != address(0));\r\n        addressStorage[keccak256(abi.encodePacked(\"validatorContract\"))] = _validatorContract;\r\n        setErc20token(_erc20token);\r\n        uintStorage[keccak256(abi.encodePacked(\"deployedAtBlock\"))] = block.number;\r\n        uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))] = _requiredBlockConfirmations;\r\n        uintStorage[keccak256(abi.encodePacked(\"gasPrice\"))] = _gasPrice;\r\n        uintStorage[keccak256(abi.encodePacked(\"maxPerTx\"))] = _maxPerTx;\r\n        uintStorage[keccak256(abi.encodePacked(\"executionDailyLimit\"))] = _homeDailyLimit;\r\n        uintStorage[keccak256(abi.encodePacked(\"executionMaxPerTx\"))] = _homeMaxPerTx;\r\n        setOwner(_owner);\r\n        setInitialize(true);\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() public pure returns(bytes4 _data) {\r\n        return bytes4(keccak256(abi.encodePacked(\"erc-to-erc-core\")));\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyIfOwnerOfProxy {\r\n        require(_token != address(erc20token()));\r\n        super.claimTokens(_token, _to);\r\n    }\r\n\r\n    function erc20token() public view returns(IERC20) {\r\n        return IERC20(addressStorage[keccak256(abi.encodePacked(\"erc20token\"))]);\r\n    }\r\n\r\n    function executeSignatures(uint8[] vs, bytes32[] rs, bytes32[] ss, bytes message) external {\r\n        require(Message.isMessageValid(message));\r\n        Message.hasEnoughValidSignatures(message, vs, rs, ss, validatorContract());\r\n        address recipient;\r\n        uint256 amount;\r\n        bytes32 txHash;\r\n        address contractAddress;\r\n        (recipient, amount, txHash, contractAddress) = Message.parseMessage(message);\r\n        if (messageWithinLimits(amount)) {\r\n            require(contractAddress == address(this));\r\n            require(!relayedMessages(txHash));\r\n            setRelayedMessages(txHash, true);\r\n            require(onExecuteMessage(recipient, amount));\r\n            emit RelayedMessage(recipient, amount, txHash);\r\n        } else {\r\n            onFailedMessage(recipient, amount, txHash);\r\n        }\r\n    }\r\n\r\n    function onExecuteMessage(address _recipient, uint256 _amount) internal returns(bool) {\r\n        setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(_amount));\r\n        return erc20token().transfer(_recipient, _amount);\r\n    }\r\n\r\n    function setErc20token(address _token) private {\r\n        require(_token != address(0) && isContract(_token));\r\n        addressStorage[keccak256(abi.encodePacked(\"erc20token\"))] = _token;\r\n    }\r\n\r\n    function messageWithinLimits(uint256 _amount) internal view returns(bool) {\r\n        return withinExecutionLimit(_amount);\r\n    }\r\n\r\n    function onTokenTransfer(address /*_from*/, uint256 /*_value*/, bytes /*_data*/) external returns(bool) {\r\n        require(msg.sender == address(erc20token()));\r\n        return false;\r\n    }\r\n\r\n    function onFailedMessage(address, uint256, bytes32) internal {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"erc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"relayedMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executeSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_erc20token\",\"type\":\"address\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPerTx\",\"type\":\"uint256\"},{\"name\":\"_homeDailyLimit\",\"type\":\"uint256\"},{\"name\":\"_homeMaxPerTx\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeabilityAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"EternalOwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignBridgeErcToErc","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d0d19169b4c1a3b2b01ae458470b0afc66ac1e32bf0bc5e2783492d90e5e71a1"}]}