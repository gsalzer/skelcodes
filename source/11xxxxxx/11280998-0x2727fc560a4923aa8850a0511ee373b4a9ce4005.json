{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary SafeMath128{\r\n\r\n    //Custom addition\r\n    function safemul(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint128 c = a * b;\r\n        if(!(c / a == b)){\r\n            c = (2**128)-1;\r\n        }\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath104 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint112 a, uint112 b) internal pure returns (uint112) {\r\n        uint112 c = a + b;\r\n        if(!(c >= a)){\r\n            c = (2**112)-1;\r\n        }\r\n        require(c >= a, \"addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint112 a, uint112 b) internal pure returns (uint112) {\r\n        if(!(b <= a)){\r\n            return 0;\r\n        }\r\n        uint112 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint112 a, uint112 b) internal pure returns (uint112) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint112 c = a * b;\r\n        if(!(c / a == b)){\r\n            c = (2**112)-1;\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint112 a, uint112 b) internal pure returns (uint112) {\r\n        require(b > 0, \"div by zero\");\r\n        uint112 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n//Restrictions:\r\n//only 2^32 Users\r\n//Maximum of 2^104 / 10^18 Ether investment. Theoretically 20 Trl Ether, practically 100000000000 Ether compiles\r\n//Maximum of (2^104 / 10^18 Ether) investment. Theoretically 20 Trl Ether, practically 100000000000 Ether compiles\r\ncontract PrestigeClub is Ownable() {\r\n\r\n    using SafeMath104 for uint112;\r\n    using SafeMath128 for uint128;\r\n\r\n    struct User {\r\n        uint112 deposit; //265 bits together\r\n        uint112 payout;\r\n        uint32 position;\r\n        uint8 qualifiedPools;\r\n        uint8 downlineBonus;\r\n        address referer;\r\n        address[] referrals;\r\n\r\n        uint112 directSum;\r\n        uint40 lastPayout;\r\n\r\n        uint112[5] downlineVolumes;\r\n    }\r\n    \r\n    event NewDeposit(address indexed addr, uint112 amount);\r\n    event PoolReached(address indexed addr, uint8 pool);\r\n    event DownlineBonusStageReached(address indexed adr, uint8 stage);\r\n    // event Referral(address indexed addr, address indexed referral);\r\n    \r\n    event Payout(address indexed addr, uint112 interest, uint112 direct, uint112 pool, uint112 downline, uint40 dayz); \r\n    \r\n    event Withdraw(address indexed addr, uint112 amount);\r\n    \r\n    mapping (address => User) public users;\r\n    address[] public userList;\r\n\r\n    uint32 public lastPosition;\r\n    \r\n    uint128 public depositSum;\r\n    \r\n    Pool[8] public pools;\r\n    \r\n    struct Pool {\r\n        uint112 minOwnInvestment;\r\n        uint8 minDirects;\r\n        uint112 minSumDirects;\r\n        uint8 payoutQuote; //ppm\r\n        uint32 numUsers;\r\n    }\r\n\r\n    PoolState[] public states;\r\n\r\n    struct PoolState {\r\n        uint128 totalDeposits;\r\n        uint32 totalUsers;\r\n        uint32[8] numUsers;\r\n    }\r\n    \r\n    DownlineBonusStage[4] downlineBonuses;\r\n    \r\n    struct DownlineBonusStage {\r\n        uint32 minPool;\r\n        uint64 payoutQuote; //ppm\r\n    }\r\n    \r\n    uint40 public pool_last_draw;\r\n    \r\n    constructor() public {\r\n \r\n        uint40 timestamp = uint40(block.timestamp);\r\n        pool_last_draw = timestamp - (timestamp % payout_interval) - (2 * payout_interval);\r\n\r\n\r\n        pools[0] = Pool(3 ether, 1, 3 ether, 130, 0);\r\n        pools[1] = Pool(15 ether, 3, 5 ether, 130, 0);\r\n        pools[2] = Pool(15 ether, 4, 44 ether, 130, 0);\r\n        pools[3] = Pool(30 ether, 10, 105 ether, 130, 0);\r\n        pools[4] = Pool(45 ether, 15, 280 ether, 130, 0);\r\n        pools[5] = Pool(60 ether, 20, 530 ether, 130, 0);\r\n        pools[6] = Pool(150 ether, 20, 1470 ether, 80, 0);\r\n        pools[7] = Pool(300 ether, 20, 2950 ether, 80, 0);\r\n\r\n        downlineBonuses[0] = DownlineBonusStage(3, 50);\r\n        downlineBonuses[1] = DownlineBonusStage(4, 100);\r\n        downlineBonuses[2] = DownlineBonusStage(5, 160);\r\n        downlineBonuses[3] = DownlineBonusStage(6, 210);\r\n\r\n        userList.push(address(0));\r\n        \r\n    }\r\n    \r\n    uint112 internal minDeposit = 1 ether;\r\n    uint112 internal minWithdraw = 1000 wei; \r\n    \r\n    uint40 constant internal payout_interval = 1 days;\r\n    \r\n    function recieve() public payable {\r\n        require((users[msg.sender].deposit * 20 / 19) >= minDeposit || msg.value >= minDeposit, \"Mininum deposit value not reached\");\r\n        \r\n        address sender = msg.sender;\r\n\r\n        uint112 value = uint112(msg.value).mul(19) / 20;\r\n\r\n        bool userExists = users[sender].position != 0;\r\n        \r\n        triggerCalculation();\r\n\r\n        // Create a position for new accounts\r\n        if(!userExists){\r\n            lastPosition++;\r\n            users[sender].position = lastPosition;\r\n            users[sender].lastPayout = (pool_last_draw + 1);\r\n            userList.push(sender);\r\n        }\r\n\r\n        address referer = users[sender].referer; //can put outside because referer is always set since setReferral() gets called before recieve() in recieve(address)\r\n\r\n        if(referer != address(0)){\r\n            updateUpline(sender, referer, value);\r\n        }\r\n\r\n        //Update Payouts\r\n        if(userExists){\r\n            updatePayout(sender);\r\n        }\r\n\r\n        users[sender].deposit = users[sender].deposit.add(value);\r\n        \r\n        //Transfer fee\r\n        payable(owner()).transfer(msg.value - value);\r\n        \r\n        emit NewDeposit(sender, value);\r\n        \r\n        updateUserPool(sender);\r\n        updateDownlineBonusStage(sender);\r\n        if(referer != address(0)){\r\n            users[referer].directSum = users[referer].directSum.add(value);\r\n\r\n            updateUserPool(referer);\r\n            updateDownlineBonusStage(referer);\r\n        }\r\n        \r\n        depositSum = depositSum + value; //Won´t do an overflow since value is uint112 and depositSum 128\r\n\r\n    }\r\n    \r\n    \r\n    function recieve(address referer) public payable {\r\n        \r\n        _setReferral(referer);\r\n        recieve();\r\n        \r\n    }\r\n\r\n    uint8 public downlineLimit = 31;\r\n\r\n    function updateUpline(address reciever, address adr, uint112 addition) private {\r\n        \r\n        address current = adr;\r\n        uint8 bonusStage = users[reciever].downlineBonus;\r\n        \r\n        uint8 downlineLimitCounter = downlineLimit - 1;\r\n        \r\n        while(current != address(0) && downlineLimitCounter > 0){\r\n\r\n            updatePayout(current);\r\n\r\n            users[current].downlineVolumes[bonusStage] = users[current].downlineVolumes[bonusStage].add(addition);\r\n            uint8 currentBonus = users[current].downlineBonus;\r\n            if(currentBonus > bonusStage){\r\n                bonusStage = currentBonus;\r\n            }\r\n\r\n            current = users[current].referer;\r\n            downlineLimitCounter--;\r\n        }\r\n        \r\n    }\r\n    \r\n    function updatePayout(address adr) private {\r\n        \r\n        uint40 dayz = (uint40(block.timestamp) - users[adr].lastPayout) / (payout_interval);\r\n        if(dayz >= 1){\r\n            \r\n            uint112 interestPayout = getInterestPayout(adr);\r\n            uint112 poolpayout = getPoolPayout(adr, dayz);\r\n            uint112 directsPayout = getDirectsPayout(adr);\r\n            uint112 downlineBonusAmount = getDownlinePayout(adr);\r\n            \r\n            \r\n            uint112 sum = interestPayout.add(directsPayout).add(downlineBonusAmount); \r\n            sum = (sum.mul(dayz)).add(poolpayout);\r\n            \r\n            users[adr].payout = users[adr].payout.add(sum);\r\n            users[adr].lastPayout += (payout_interval * dayz);\r\n            \r\n            emit Payout(adr, interestPayout, directsPayout, poolpayout, downlineBonusAmount, dayz);\r\n            \r\n        }\r\n    }\r\n    \r\n    function getInterestPayout(address adr) public view returns (uint112){\r\n        //Calculate Base Payouts\r\n        uint8 quote;\r\n        uint112 deposit = users[adr].deposit;\r\n        if(deposit >= 30 ether){\r\n            quote = 15;\r\n        }else{\r\n            quote = 10;\r\n        }\r\n        \r\n        return deposit.mul(quote) / 10000;\r\n    }\r\n    \r\n    function getPoolPayout(address adr, uint40 dayz) public view returns (uint112){\r\n\r\n        uint40 length = (uint40)(states.length);\r\n\r\n        uint112 poolpayout = 0;\r\n\r\n        if(users[adr].qualifiedPools > 0){\r\n            for(uint40 day = length - dayz ; day < length ; day++){\r\n\r\n\r\n                uint32 numUsers = states[day].totalUsers;\r\n                uint112 streamline = uint112(states[day].totalDeposits.safemul(numUsers - users[adr].position)).div(numUsers);\r\n\r\n\r\n                uint112 payout_day = 0; \r\n                uint32 stateNumUsers = 0;\r\n                for(uint8 j = 0 ; j < users[adr].qualifiedPools ; j++){\r\n                    uint112 pool_base = streamline.mul(pools[j].payoutQuote) / 1000000;\r\n\r\n                    stateNumUsers = states[day].numUsers[j];\r\n\r\n                    if(stateNumUsers != 0){\r\n                        payout_day += pool_base.div(stateNumUsers);\r\n                    }\r\n                }\r\n\r\n                poolpayout = poolpayout.add(payout_day);\r\n\r\n            }\r\n        }\r\n        \r\n        return poolpayout;\r\n    }\r\n\r\n    function getDownlinePayout(address adr) public view returns (uint112){\r\n\r\n        //Calculate Downline Bonus\r\n        uint112 downlinePayout = 0;\r\n        \r\n        uint8 downlineBonus = users[adr].downlineBonus;\r\n        \r\n        if(downlineBonus > 0){\r\n            \r\n            uint64 ownPercentage = downlineBonuses[downlineBonus - 1].payoutQuote;\r\n\r\n            for(uint8 i = 0 ; i < downlineBonus; i++){\r\n\r\n                uint64 quote = 0;\r\n                if(i > 0){\r\n                    quote = downlineBonuses[i - 1].payoutQuote;\r\n                }else{\r\n                    quote = 0;\r\n                }\r\n\r\n                uint64 percentage = ownPercentage - quote;\r\n                if(percentage > 0){ //Requiring positivity and saving gas for 0, since that returns 0\r\n\r\n                    downlinePayout = downlinePayout.add(users[adr].downlineVolumes[i].mul(percentage) / 1000000); \r\n\r\n                }\r\n\r\n            }\r\n\r\n            if(downlineBonus == 4){\r\n                downlinePayout = downlinePayout.add(users[adr].downlineVolumes[downlineBonus].mul(50) / 1000000);\r\n            }\r\n\r\n        }\r\n\r\n        return downlinePayout;\r\n        \r\n    }\r\n\r\n    function getDirectsPayout(address adr) public view returns (uint112) {\r\n        \r\n        //Calculate Directs Payouts\r\n        uint112 directsDepositSum = users[adr].directSum;\r\n\r\n        uint112 directsPayout = directsDepositSum.mul(5) / 10000;\r\n\r\n        return (directsPayout);\r\n        \r\n    }\r\n\r\n    function pushPoolState() private {\r\n        uint32[8] memory temp;\r\n        for(uint8 i = 0 ; i < 8 ; i++){\r\n            temp[i] = pools[i].numUsers;\r\n        }\r\n        states.push(PoolState(depositSum, lastPosition, temp));\r\n        pool_last_draw += payout_interval;\r\n    }\r\n    \r\n    function updateUserPool(address adr) private {\r\n        \r\n        if(users[adr].qualifiedPools < pools.length){\r\n            \r\n            uint8 poolnum = users[adr].qualifiedPools;\r\n            \r\n            uint112 sumDirects = users[adr].directSum;\r\n            \r\n            //Check if requirements for next pool are met\r\n            if(users[adr].deposit >= pools[poolnum].minOwnInvestment && users[adr].referrals.length >= pools[poolnum].minDirects && sumDirects >= pools[poolnum].minSumDirects){\r\n                users[adr].qualifiedPools = poolnum + 1;\r\n                pools[poolnum].numUsers++;\r\n                \r\n                emit PoolReached(adr, poolnum + 1);\r\n                \r\n                updateUserPool(adr);\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function updateDownlineBonusStage(address adr) private {\r\n\r\n        uint8 bonusstage = users[adr].downlineBonus;\r\n\r\n        if(bonusstage < downlineBonuses.length){\r\n\r\n            //Check if requirements for next stage are met\r\n            if(users[adr].qualifiedPools >= downlineBonuses[bonusstage].minPool){\r\n                users[adr].downlineBonus += 1;\r\n                \r\n                //Update data in upline\r\n                uint112 value = users[adr].deposit;  //Value without current stage, since that must not be subtracted\r\n\r\n                for(uint8 i = 0 ; i <= bonusstage ; i++){\r\n                    value = value.add(users[adr].downlineVolumes[i]);\r\n                }\r\n\r\n                // uint8 previousBonusStage = bonusstage;\r\n                uint8 currentBonusStage = bonusstage + 1;\r\n                uint8 lastBonusStage = bonusstage;\r\n\r\n                address current = users[adr].referer;\r\n                while(current != address(0)){\r\n\r\n                    \r\n                    users[current].downlineVolumes[lastBonusStage] = users[current].downlineVolumes[lastBonusStage].sub(value);\r\n                    users[current].downlineVolumes[currentBonusStage] = users[current].downlineVolumes[currentBonusStage].add(value);\r\n\r\n                    uint8 currentDB = users[current].downlineBonus;\r\n                    if(currentDB > currentBonusStage){\r\n                        currentBonusStage = currentDB;\r\n                    }\r\n                    if(currentDB > lastBonusStage){\r\n                        lastBonusStage = currentDB;\r\n                    }\r\n\r\n                    if(lastBonusStage == currentBonusStage){\r\n                        break;\r\n                    }\r\n\r\n                    current = users[current].referer;\r\n                }\r\n\r\n                emit DownlineBonusStageReached(adr, users[adr].downlineBonus);\r\n                \r\n                updateDownlineBonusStage(adr);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function calculateDirects(address adr) external view returns (uint112, uint32) {\r\n        \r\n        address[] memory referrals = users[adr].referrals;\r\n        \r\n        uint112 sum = 0;\r\n        for(uint32 i = 0 ; i < referrals.length ; i++){\r\n            sum = sum.add(users[referrals[i]].deposit);\r\n        }\r\n        \r\n        return (sum, (uint32)(referrals.length));\r\n        \r\n    }\r\n    \r\n    //Endpoint to withdraw payouts\r\n    function withdraw(uint112 amount) public {\r\n        \r\n        updatePayout(msg.sender);\r\n\r\n        require(amount > minWithdraw, \"Minimum Withdrawal amount not met\");\r\n        require(users[msg.sender].payout >= amount, \"Not enough payout available\");\r\n        \r\n        uint112 transfer = amount * 19 / 20;\r\n        \r\n        users[msg.sender].payout -= amount;\r\n        \r\n        payable(msg.sender).transfer(transfer);\r\n        \r\n        payable(owner()).transfer(amount - transfer);\r\n        \r\n        emit Withdraw(msg.sender, amount);\r\n        \r\n    }\r\n\r\n    function _setReferral(address referer) private {\r\n        \r\n        if(users[msg.sender].referer == referer){\r\n            return;\r\n        }\r\n        \r\n        if(users[msg.sender].position != 0 && users[msg.sender].position < users[referer].position) {\r\n            return;\r\n        }\r\n        \r\n        require(users[msg.sender].referer == address(0), \"Referer can only be set once\");\r\n        require(users[referer].position > 0, \"Referer does not exist\");\r\n        require(msg.sender != referer, \"Cant set oneself as referer\");\r\n        \r\n        users[referer].referrals.push(msg.sender);\r\n        users[msg.sender].referer = referer;\r\n\r\n        if(users[msg.sender].deposit > 0){\r\n            users[referer].directSum = users[referer].directSum.add(users[msg.sender].deposit);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function invest(uint amount) public onlyOwner {\r\n        \r\n        payable(owner()).transfer(amount);\r\n    }\r\n    \r\n    function reinvest() public payable onlyOwner {\r\n    }\r\n    \r\n    function setLimits(uint112 _minDeposit, uint112 _minWithdrawal) public onlyOwner {\r\n        minDeposit = _minDeposit;\r\n        minWithdraw = _minWithdrawal;\r\n    }\r\n\r\n    function setDownlineLimit(uint8 limit) public onlyOwner {\r\n        downlineLimit = limit;\r\n    }\r\n    \r\n    function forceSetReferral(address adr, address referer) public onlyOwner {\r\n        users[referer].referrals.push(adr);\r\n        users[adr].referer = referer;\r\n    }\r\n\r\n    //Only for BO\r\n    function getDownline() external view returns (uint112, uint){\r\n        uint112 sum;\r\n        for(uint8 i = 0 ; i < users[msg.sender].downlineVolumes.length ; i++){\r\n            sum += users[msg.sender].downlineVolumes[i];\r\n        }\r\n\r\n        uint numUsers = getDownlineUsers(msg.sender);\r\n\r\n        return (sum, numUsers);\r\n    }\r\n\r\n    function getDownlineUsers(address adr) public view returns (uint128){\r\n\r\n        uint128 sum = 0;\r\n        uint32 length = uint32(users[adr].referrals.length);\r\n        sum += length;\r\n        for(uint32 i = 0; i < length ; i++){\r\n            sum += getDownlineUsers(users[adr].referrals[i]);\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function reCalculateImported(uint64 from, uint64 to) public onlyOwner {\r\n        uint40 time = pool_last_draw - payout_interval;\r\n        for(uint64 i = from ; i < to + 1 ; i++){\r\n            address adr = userList[i];\r\n            users[adr].payout = 0;\r\n            users[adr].lastPayout = time;\r\n            updatePayout(adr);\r\n        }\r\n    }\r\n    \r\n    function _import(address[] memory sender, uint112[] memory deposit, address[] memory referer) public onlyOwner {\r\n        for(uint64 i = 0 ; i < sender.length ; i++){\r\n            importUser(sender[i], deposit[i], referer[i]);\r\n        }\r\n    }\r\n    \r\n    function importUser(address sender, uint112 deposit, address referer) internal onlyOwner {\r\n        \r\n        if(referer != address(0)){\r\n            users[referer].referrals.push(sender);\r\n            users[sender].referer = referer;\r\n        }\r\n\r\n        uint112 value = deposit;\r\n\r\n        // Create a position for new accounts\r\n        lastPosition++;\r\n        users[sender].position = lastPosition;\r\n        users[sender].lastPayout = pool_last_draw;\r\n        userList.push(sender);\r\n\r\n        if(referer != address(0)){\r\n            updateUpline(sender, referer, value);\r\n        }\r\n\r\n        users[sender].deposit += value;\r\n        \r\n        emit NewDeposit(sender, value);\r\n        \r\n        updateUserPool(sender);\r\n        updateDownlineBonusStage(sender);\r\n        \r\n        if(referer != address(0)){\r\n            users[referer].directSum += value;\r\n    \r\n            updateUserPool(referer);\r\n            updateDownlineBonusStage(referer);\r\n        }\r\n        \r\n        depositSum += value;\r\n        \r\n    }\r\n\r\n    function getUserReferrals(address adr) public view returns (address[] memory referrals){\r\n        return users[adr].referrals;\r\n    }\r\n    \r\n    function getUserList() public view returns (address[] memory){  //TODO Probably not needed\r\n        return userList;\r\n    }\r\n    \r\n    function triggerCalculation() public {\r\n        if(block.timestamp > pool_last_draw + payout_interval){\r\n            pushPoolState();\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"DownlineBonusStageReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"interest\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"direct\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"pool\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"downline\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pool\",\"type\":\"uint8\"}],\"name\":\"PoolReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sender\",\"type\":\"address[]\"},{\"internalType\":\"uint112[]\",\"name\":\"deposit\",\"type\":\"uint112[]\"},{\"internalType\":\"address[]\",\"name\":\"referer\",\"type\":\"address[]\"}],\"name\":\"_import\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"calculateDirects\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSum\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"downlineLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"forceSetReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDirectsPayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDownline\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownlinePayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDownlineUsers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getInterestPayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"dayz\",\"type\":\"uint40\"}],\"name\":\"getPoolPayout\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_last_draw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"minOwnInvestment\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"minDirects\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"minSumDirects\",\"type\":\"uint112\"},{\"internalType\":\"uint8\",\"name\":\"payoutQuote\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"numUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"from\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"to\",\"type\":\"uint64\"}],\"name\":\"reCalculateImported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"setDownlineLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"_minDeposit\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_minWithdrawal\",\"type\":\"uint112\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalDeposits\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"totalUsers\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"payout\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"position\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"qualifiedPools\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"downlineBonus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"directSum\",\"type\":\"uint112\"},{\"internalType\":\"uint40\",\"name\":\"lastPayout\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrestigeClub","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3308b1e7b8de86828bb4364b984ebc2998672bab6b7e8078dc8281d9de3bf979"}]}