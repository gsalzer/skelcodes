{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IManaged.sol\\\";\\nimport \\\"./Governed.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @title Graph Controller contract\\n * @dev Controller is a registry of contracts for convenience. Inspired by Livepeer:\\n * https://github.com/livepeer/protocol/blob/streamflow/contracts/Controller.sol\\n */\\ncontract Controller is Governed, Pausable, IController {\\n    // Track contract ids to contract proxy address\\n    mapping(bytes32 => address) private registry;\\n\\n    event SetContractProxy(bytes32 indexed id, address contractAddress);\\n\\n    /** \\n     * @dev Contract constructor.\\n     */\\n    constructor() {\\n        Governed._initialize(msg.sender);\\n\\n        _setPaused(true);\\n    }\\n\\n    /**\\n     * @dev Check if the caller is the governor or pause guardian.\\n     */\\n    modifier onlyGovernorOrGuardian {\\n        require(\\n            msg.sender == governor || msg.sender == pauseGuardian,\\n            \\\"Only Governor or Guardian can call\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Getter to access governor\\n     */\\n    function getGovernor() external override view returns (address) {\\n        return governor;\\n    }\\n\\n    // -- Registry --\\n\\n    /**\\n     * @notice Register contract id and mapped address\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     * @param _contractAddress Contract address\\n     */\\n    function setContractProxy(bytes32 _id, address _contractAddress)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(_contractAddress != address(0), \\\"Contract address must be set\\\");\\n        registry[_id] = _contractAddress;\\n        emit SetContractProxy(_id, _contractAddress);\\n    }\\n\\n    /**\\n     * @notice Unregister a contract address\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     */\\n    function unsetContractProxy(bytes32 _id)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        registry[_id] = address(0);\\n        emit SetContractProxy(_id, address(0));\\n    }\\n\\n    /**\\n     * @notice Get contract proxy address by its id\\n     * @param _id Contract id\\n     */\\n    function getContractProxy(bytes32 _id) public override view returns (address) {\\n        return registry[_id];\\n    }\\n\\n    /**\\n     * @notice Update contract's controller\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     * @param _controller Controller address\\n     */\\n    function updateController(bytes32 _id, address _controller) external override onlyGovernor {\\n        require(_controller != address(0), \\\"Controller must be set\\\");\\n        return IManaged(registry[_id]).setController(_controller);\\n    }\\n\\n    // -- Pausing --\\n\\n    /**\\n     * @notice Change the partial paused state of the contract\\n     * Partial pause is intended as a partial pause of the protocol\\n     */\\n    function setPartialPaused(bool _partialPaused) external override onlyGovernorOrGuardian {\\n        _setPartialPaused(_partialPaused);\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * Full pause most of protocol functions\\n     */\\n    function setPaused(bool _paused) external override onlyGovernorOrGuardian {\\n        _setPaused(_paused);\\n    }\\n\\n    /**\\n     * @notice Change the Pause Guardian\\n     * @param _newPauseGuardian The address of the new Pause Guardian\\n     */\\n    function setPauseGuardian(address _newPauseGuardian) external override onlyGovernor {\\n        require(_newPauseGuardian != address(0), \\\"PauseGuardian must be set\\\");\\n        _setPauseGuardian(_newPauseGuardian);\\n    }\\n\\n    /**\\n     * @notice Getter to access paused\\n     */\\n    function paused() external override view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Getter to access partial pause status\\n     */\\n    function partialPaused() external override view returns (bool) {\\n        return _partialPaused;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\n\\ninterface IController {\\n    function getGovernor() external view returns (address);\\n\\n    // -- Registry --\\n\\n    function setContractProxy(bytes32 _id, address _contractAddress) external;\\n\\n    function unsetContractProxy(bytes32 _id) external;\\n\\n    function updateController(bytes32 _id, address _controller) external;\\n\\n    function getContractProxy(bytes32 _id) external view returns (address);\\n\\n    // -- Pausing --\\n\\n    function setPartialPaused(bool _partialPaused) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function setPauseGuardian(address _newPauseGuardian) external;\\n\\n    function paused() external view returns (bool);\\n\\n    function partialPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ninterface IManaged {\\n    function setController(address _controller) external;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\n/**\\n * @title Graph Governance contract\\n * @dev All contracts that will be owned by a Governor entity should extend this contract.\\n */\\ncontract Governed {\\n    // -- State --\\n\\n    address public governor;\\n    address public pendingGovernor;\\n\\n    // -- Events --\\n\\n    event NewPendingOwnership(address indexed from, address indexed to);\\n    event NewOwnership(address indexed from, address indexed to);\\n\\n    /**\\n     * @dev Check if the caller is the governor.\\n     */\\n    modifier onlyGovernor {\\n        require(msg.sender == governor, \\\"Only Governor can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialize the governor to the contract caller.\\n     */\\n    function _initialize(address _initGovernor) internal {\\n        governor = _initGovernor;\\n    }\\n\\n    /**\\n     * @dev Admin function to begin change of governor. The `_newGovernor` must call\\n     * `acceptOwnership` to finalize the transfer.\\n     * @param _newGovernor Address of new `governor`\\n     */\\n    function transferOwnership(address _newGovernor) external onlyGovernor {\\n        require(_newGovernor != address(0), \\\"Governor must be set\\\");\\n\\n        address oldPendingGovernor = pendingGovernor;\\n        pendingGovernor = _newGovernor;\\n\\n        emit NewPendingOwnership(oldPendingGovernor, pendingGovernor);\\n    }\\n\\n    /**\\n     * @dev Admin function for pending governor to accept role and update governor.\\n     * This function must called by the pending governor.\\n     */\\n    function acceptOwnership() external {\\n        require(\\n            pendingGovernor != address(0) && msg.sender == pendingGovernor,\\n            \\\"Caller must be pending governor\\\"\\n        );\\n\\n        address oldGovernor = governor;\\n        address oldPendingGovernor = pendingGovernor;\\n\\n        governor = pendingGovernor;\\n        pendingGovernor = address(0);\\n\\n        emit NewOwnership(oldGovernor, governor);\\n        emit NewPendingOwnership(oldPendingGovernor, pendingGovernor);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\ncontract Pausable {\\n    // Partial paused paused exit and enter functions for GRT, but not internal\\n    // functions, such as allocating\\n    bool internal _partialPaused;\\n    // Paused will pause all major protocol functions\\n    bool internal _paused;\\n\\n    // Time last paused for both pauses\\n    uint256 public lastPausePartialTime;\\n    uint256 public lastPauseTime;\\n\\n    // Pause guardian is a separate entity from the governor that can pause\\n    address public pauseGuardian;\\n\\n    event PartialPauseChanged(bool isPaused);\\n    event PauseChanged(bool isPaused);\\n    event NewPauseGuardian(address indexed oldPauseGuardian, address indexed pauseGuardian);\\n\\n    /**\\n     * @notice Change the partial paused state of the contract\\n     */\\n    function _setPartialPaused(bool _toPause) internal {\\n        if (_toPause == _partialPaused) {\\n            return;\\n        }\\n        _partialPaused = _toPause;\\n        if (_partialPaused) {\\n            lastPausePartialTime = block.timestamp;\\n        }\\n        emit PartialPauseChanged(_partialPaused);\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     */\\n    function _setPaused(bool _toPause) internal {\\n        if (_toPause == _paused) {\\n            return;\\n        }\\n        _paused = _toPause;\\n        if (_paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n        emit PauseChanged(_paused);\\n    }\\n\\n    /**\\n     * @notice Change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) internal {\\n        address oldPauseGuardian = pauseGuardian;\\n        pauseGuardian = newPauseGuardian;\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NewOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NewPendingOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PartialPauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SetContractProxy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getContractProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPausePartialTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setContractProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_partialPaused\",\"type\":\"bool\"}],\"name\":\"setPartialPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauseGuardian\",\"type\":\"address\"}],\"name\":\"setPauseGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"unsetContractProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}