{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\core\\nameVerifiers\\IIdeaTokenNameVerifier.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.9;\r\n\r\n/**\r\n * @title IIdeaTokenNameVerifier\r\n * @author Alexander Schlindwein\r\n *\r\n * Interface for token name verifiers\r\n */\r\ninterface IIdeaTokenNameVerifier {\r\n    function verifyTokenName(string calldata name) external pure returns (bool);\r\n}\r\n\r\n// File: contracts\\core\\nameVerifiers\\TwitterHandleNameVerifier.sol\r\n\r\n\r\n/**\r\n * @title TwitterHandleNameVerifier\r\n * @author Alexander Schlindwein\r\n *\r\n * Verifies a string to be a Twitter handle: @ followed by 1-15 letters or numbers including \"_\". All lower-case.\r\n */\r\ncontract TwitterHandleNameVerifier is IIdeaTokenNameVerifier {\r\n    /**\r\n     * Verifies whether a string matches the required format\r\n     *\r\n     * @param name The input string (Twitter handle)\r\n     *\r\n     * @return Bool; True=matches, False=does not match\r\n     */\r\n    function verifyTokenName(string calldata name) external pure override returns (bool) {\r\n        bytes memory b = bytes(name);\r\n        if(b.length < 2 || b.length > 16) {\r\n            return false;\r\n        }\r\n\r\n        if(b[0] != 0x40) { // @\r\n            return false;\r\n        }\r\n\r\n        for(uint i = 1; i < b.length; i++) {\r\n            bytes1 char = b[i];\r\n            if (!(char >= 0x30 && char <= 0x39) && //9-0\r\n                !(char >= 0x61 && char <= 0x7A) && //a-z\r\n                !(char == 0x5F)) { //_\r\n                \r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"verifyTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TwitterHandleNameVerifier","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ddecda19b6cab99ed55cb0c6ec64b1455fba9ee0cb28d1cfd94c3ef31116f0b5"}]}