{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/libs/openzeppelin_upgradable_v2_5_0/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/libs/openzeppelin_upgradable_v2_5_0/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/openzeppelin_upgradable_v2_5_0/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      require(b != 0, errorMessage);\r\n      return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Advanced.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title ERC20 Advanced interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20Advanced {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Basic.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ninterface ERC20Basic {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Standard.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Standard\r\n * @dev Full ERC20 interface\r\n */\r\ncontract ERC20Standard is ERC20Basic, ERC20Advanced {}\r\n\r\n// File: contracts/tokenDistribution/TokenDistribution.sol\r\n\r\n/**\r\n* @title TokenDistribution\r\n* @author @Ola, @ziweidream\r\n* @notice This contract allows Investors to claim tokens based on a future token WITHDRAWAL date,\r\n*         and an amount of ether they contributed and bonus percentage of KTY allocations based on\r\n*         amount of Ether contributed.\r\n*/\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\ncontract TokenDistribution is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /*                                               GENERAL VARIABLES                                                */\r\n    /* ============================================================================================================== */\r\n\r\n    ERC20Standard public token;                         // ERC20Token contract variable\r\n\r\n    uint256 constant internal base18 = 1000000000000000000;\r\n\r\n    uint256 public standardRate;\r\n\r\n    uint256 public percentBonus;                        // Percentage Bonus\r\n    uint256 public withdrawDate;                        // Withdraw Date\r\n    uint256 public totalNumberOfInvestments;            // total number of investments\r\n    uint256 public totalEtherInvested;                  // total amount of ethers invested from all investments\r\n\r\n    // details of an Investment\r\n    struct Investment {\r\n        address investAddr;\r\n        uint256 ethAmount;\r\n        bool hasClaimed;\r\n        uint256 principalClaimed;\r\n        uint256 bonusClaimed;\r\n        uint256 claimTime;\r\n    }\r\n\r\n    // mapping investment number to the details of the investment\r\n    mapping(uint256 => Investment) public investments;\r\n\r\n    // mapping investment address to the investment ID of all the investments made by this address\r\n    mapping(address => uint256[]) public investmentIDs;\r\n\r\n    uint256 private unlocked;\r\n\r\n    /*                                                   MODIFIERS                                                    */\r\n    /* ============================================================================================================== */\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }          \r\n\r\n    /*                                                   INITIALIZER                                                  */\r\n    /* ============================================================================================================== */\r\n    function initialize\r\n    (\r\n        address[] calldata _investors,\r\n        uint256[] calldata _ethAmounts,\r\n        ERC20Standard _erc20Token,\r\n        uint256 _withdrawDate,\r\n        uint256 _standardRate,\r\n        uint256 _percentBonus\r\n    )\r\n        external initializer\r\n    {\r\n        Ownable.initialize(_msgSender());\r\n\r\n        // set investments\r\n        addInvestments(_investors, _ethAmounts);\r\n        // set ERC20Token contract variable\r\n        setERC20Token(_erc20Token);\r\n\r\n        // Set withdraw date\r\n        withdrawDate = _withdrawDate;\r\n\r\n        standardRate = _standardRate;\r\n\r\n        // Set percentage bonus\r\n        percentBonus = _percentBonus;\r\n\r\n        //Reentrancy lock\r\n        unlocked = 1;\r\n    }\r\n\r\n    /*                                                      EVENTS                                                    */\r\n    /* ============================================================================================================== */\r\n    event WithDrawn(\r\n        address indexed investor,\r\n        uint256 indexed investmentID,\r\n        uint256 principal,\r\n        uint256 bonus,\r\n        uint256 withdrawTime\r\n    );\r\n\r\n    /*                                                 YIELD FARMING FUNCTIONS                                        */\r\n    /* ============================================================================================================== */\r\n\r\n    /**\r\n     * @notice Withdraw tokens\r\n     * @param investmentID uint256 investment ID of the investment for which the bonus tokens are distributed\r\n     * @return bool true if the withdraw is successful\r\n     */\r\n    function withdraw(uint256 investmentID) external lock returns (bool) {\r\n        require(investments[investmentID].investAddr == msg.sender, \"You are not the investor of this investment\");\r\n        require(block.timestamp >= withdrawDate, \"Can only withdraw after withdraw date\");\r\n        require(!investments[investmentID].hasClaimed, \"Tokens already withdrawn for this investment\");\r\n        require(investments[investmentID].ethAmount > 0, \"0 ether in this investment\");\r\n\r\n        // get the ether amount of this investment\r\n        uint256 _ethAmount = investments[investmentID].ethAmount;\r\n\r\n        (uint256 _principal, uint256 _bonus, uint256 _principalAndBonus) = calculatePrincipalAndBonus(_ethAmount);\r\n\r\n        _updateWithdraw(investmentID, _principal, _bonus);\r\n\r\n        // transfer tokens to this investor\r\n        require(token.transfer(msg.sender, _principalAndBonus), \"Fail to transfer tokens\");\r\n\r\n        emit WithDrawn(msg.sender, investmentID, _principal, _bonus, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /*                                                 SETTER FUNCTIONS                                               */\r\n    /* ============================================================================================================== */\r\n    /**\r\n     * @dev Add new investments\r\n     * @dev This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function addInvestments(address[] memory _investors, uint256[] memory _ethAmounts) public onlyOwner {\r\n        require(_investors.length == _ethAmounts.length, \"The number of investing addresses should equal the number of ether amounts\");\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n             addInvestment(_investors[i], _ethAmounts[i]); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set ERC20Token contract\r\n     * @dev This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function setERC20Token(ERC20Standard _erc20Token) public onlyOwner {\r\n        token = _erc20Token; \r\n    }\r\n\r\n    /**\r\n     * @dev Set standard rate. Standard rate is amplified 10**18 times for float precision\r\n     * @dev This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function setStandardRate(uint256 _standardRate) public onlyOwner {\r\n        standardRate = _standardRate; \r\n    }\r\n\r\n    /**\r\n     * @dev Set percentage bonus. Percentage bonus is amplified 10**18 times for float precision\r\n     * @dev This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function setPercentBonus(uint256 _percentBonus) public onlyOwner {\r\n        percentBonus = _percentBonus; \r\n    }\r\n\r\n    /**\r\n     * @notice This function transfers tokens out of this contract to a new address\r\n     * @dev This function is used to transfer unclaimed KittieFightToken to a new address,\r\n     *      or transfer other tokens erroneously tranferred to this contract back to their original owner\r\n     * @dev This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function returnTokens(address _token, uint256 _amount, address _newAddress) external onlyOwner {\r\n        require(block.timestamp >= withdrawDate.add(7 * 24 * 60 * 60), \"Cannot return any token within 7 days of withdraw date\");\r\n        uint256 balance = ERC20Standard(_token).balanceOf(address(this));\r\n        require(_amount <= balance, \"Exceeds balance\");\r\n        require(ERC20Standard(_token).transfer(_newAddress, _amount), \"Fail to transfer tokens\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set withdraw date for the token\r\n     * @param _withdrawDate uint256 withdraw date for the token\r\n     * @dev    This function can only be carreid out by the owner of this contract.\r\n     */\r\n    function setWithdrawDate(uint256 _withdrawDate) public onlyOwner {\r\n        withdrawDate = _withdrawDate;\r\n    }\r\n\r\n    /*                                                 GETTER FUNCTIONS                                               */\r\n    /* ============================================================================================================== */\r\n    \r\n    /**\r\n     * @return true and 0 if it is time to withdraw, false and time until withdraw if it is not the time to withdraw yet\r\n     */\r\n    function canWithdraw() public view returns (bool, uint256) {\r\n        if (block.timestamp >= withdrawDate) {\r\n            return (true, 0);\r\n        } else {\r\n            return (false, withdrawDate.sub(block.timestamp));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return uint256 bonus tokens calculated for the amount of ether specified\r\n     */\r\n    function calculatePrincipalAndBonus(uint256 _ether)\r\n        public view returns (uint256, uint256, uint256)\r\n    {\r\n        uint256 principal = _ether.mul(standardRate).div(base18);\r\n        uint256 bonus = principal.mul(percentBonus).div(base18);\r\n        uint256 principalAndBonus = principal.add(bonus);\r\n        return (principal, bonus, principalAndBonus);\r\n    }\r\n\r\n    /**\r\n     * @return address an array of the ID of each investment belonging to the investor\r\n     */\r\n    function getInvestmentIDs(address _investAddr) external view returns (uint256[] memory) {\r\n        return investmentIDs[_investAddr];\r\n    }\r\n\r\n    /**\r\n     * @return the details of an investment associated with an investment ID, including the address \r\n     *         of the investor, the amount of ether invested in this investment, whether bonus tokens\r\n     *         have been claimed for this investment, the amount of bonus tokens already claimed for\r\n     *         this investment(0 if bonus tokens are not claimed yet), the unix time when the bonus tokens\r\n     *         have been claimed(0 if bonus tokens are not claimed yet)\r\n     */\r\n    function getInvestment(uint256 _investmentID) external view\r\n        returns(address _investAddr, uint256 _ethAmount, bool _hasClaimed,\r\n                uint256 _principalClaimed, uint256 _bonusClaimed, uint256 _claimTime)\r\n    {\r\n        _investAddr = investments[_investmentID].investAddr;\r\n        _ethAmount = investments[_investmentID].ethAmount;\r\n        _hasClaimed = investments[_investmentID].hasClaimed;\r\n        _principalClaimed = investments[_investmentID].principalClaimed;\r\n        _bonusClaimed = investments[_investmentID].bonusClaimed;\r\n        _claimTime = investments[_investmentID].claimTime;\r\n    }\r\n    \r\n\r\n    /*                                                 PRIVATE FUNCTIONS                                             */\r\n    /* ============================================================================================================== */\r\n    /**\r\n     * @param _investmentID uint256 investment ID of the investment for which tokens are withdrawn\r\n     * @param _bonus uint256 tokens distributed to this investor\r\n     * @dev this function updates the storage upon successful withdraw of tokens.\r\n     */\r\n    function _updateWithdraw(uint256 _investmentID, uint256 _principal, uint256 _bonus) \r\n        private\r\n    {\r\n        investments[_investmentID].hasClaimed = true;\r\n        investments[_investmentID].principalClaimed = _principal;\r\n        investments[_investmentID].bonusClaimed = _bonus;\r\n        investments[_investmentID].claimTime = block.timestamp;\r\n        investments[_investmentID].ethAmount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Add one new investment\r\n     */\r\n    function addInvestment(address _investor, uint256 _eth) private {\r\n        uint256 investmentID = totalNumberOfInvestments.add(1);\r\n        investments[investmentID].investAddr = _investor;\r\n        investments[investmentID].ethAmount = _eth;\r\n   \r\n        totalEtherInvested = totalEtherInvested.add(_eth);\r\n        totalNumberOfInvestments = investmentID;\r\n\r\n        investmentIDs[_investor].push(investmentID);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"WithDrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ethAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"calculatePrincipalAndBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentID\",\"type\":\"uint256\"}],\"name\":\"getInvestment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_investAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_principalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investAddr\",\"type\":\"address\"}],\"name\":\"getInvestmentIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ethAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20Standard\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_standardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentBonus\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20Standard\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"setERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentBonus\",\"type\":\"uint256\"}],\"name\":\"setPercentBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_standardRate\",\"type\":\"uint256\"}],\"name\":\"setStandardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawDate\",\"type\":\"uint256\"}],\"name\":\"setWithdrawDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Standard\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberOfInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenDistribution","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://21e071c6f7c0798602f56a5fe6e3463b741e5198a491ee0b14a5d3a4230de713"}]}