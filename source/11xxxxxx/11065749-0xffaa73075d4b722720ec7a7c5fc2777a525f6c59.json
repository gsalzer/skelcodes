{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract U2Binary {\r\n    struct User {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        address referrer;\r\n        address[] referral;\r\n        uint256 poolPosition;\r\n        uint256 poolFee;\r\n        uint256 binaryAmount;\r\n        bool isInPool;\r\n        bool isInBinary;\r\n        string binaryPosition;\r\n      \r\n    }\r\n    struct PaymentList {\r\n        uint256 id;\r\n        address userAddress;\r\n        uint256 poolFee;\r\n        uint256 canEarnMax;\r\n        uint256 incomeAfterTopUp;\r\n        bool status;\r\n        bool isBlocked;\r\n    }\r\n    uint256 public ENTRY_FEE;\r\n    mapping(uint256 => uint256) public POOL_ENTRY;\r\n    mapping(uint256 => uint256) public POOL_COMMISION;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public userList;\r\n    mapping(uint256 => PaymentList) public paymentList;\r\n    mapping(uint256 => address) public poolList;\r\n    uint256 public currentId;\r\n    uint256 public COMMISSION;\r\n    uint256 public FEE_COMMISSION;\r\n    uint256 public POOL_INCOME;\r\n    uint256 public CARRY_FORWARD;\r\n  \r\n    address public manager; \r\n    address partner = 0xB1A8DB884f7aB50221c9DA20BCA1FA3A17A7ee3C;\r\n   \r\n    address public PAYMENT_LIST_ONE=0x61ee42B5c0F2240E0979F09F7e3C176aA2795105;\r\n\r\n   \r\n    uint256 lockedAmount;\r\n    uint256 public TOP_UP_AFTER_INCOME;\r\n    uint256 public CAN_EARN_INCOME;\r\n\r\n    uint256 public currentPoolPosition;\r\n    uint256 public poolStartFrom;\r\n\r\n    event Reg(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 value,\r\n        uint256 level,\r\n        uint256 time\r\n    );\r\n    event UserPoolIncome(\r\n        address indexed user,\r\n        address indexed fromUser,\r\n        uint256 value,\r\n        uint256 myInvestment,\r\n        uint256 time\r\n    );\r\n    \r\n    event BinaryIncome(\r\n        address indexed receiver,\r\n        uint256 amount\r\n    );\r\n    event UserCarryForward(\r\n        address indexed user,\r\n        address indexed fromUser,\r\n        uint256 value,\r\n        uint256 time\r\n    );\r\n    event Topup(\r\n        address indexed user,\r\n        uint256 position,\r\n        uint256 value,\r\n        uint256 time\r\n    );\r\n    event CheckStep(uint256 value, uint256 step);\r\n\r\n    constructor(address managerAddress) public {\r\n        manager = managerAddress;\r\n        \r\n        POOL_ENTRY[0] = .1 ether;\r\n        POOL_ENTRY[1] = .25 ether;\r\n        POOL_ENTRY[2] = .5 ether;\r\n        POOL_ENTRY[3] = 1 ether;\r\n        POOL_ENTRY[4] = 2 ether;\r\n        POOL_ENTRY[5] = 5 ether;\r\n        POOL_ENTRY[6] = 10 ether;\r\n\r\n        COMMISSION = 25;\r\n        POOL_INCOME = .25 ether;\r\n        CAN_EARN_INCOME = 4;\r\n\r\n        User memory user;\r\n        currentId++;\r\n        currentPoolPosition++;\r\n       \r\n        user = User({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: 0,\r\n            referrer: address(0),\r\n            referral: new address[](0),\r\n            poolPosition: currentPoolPosition,\r\n            poolFee: 10 ether,\r\n            binaryAmount: uint256(0),\r\n            isInPool: true,\r\n            isInBinary: false,\r\n            binaryPosition: '0'\r\n           \r\n        });\r\n\r\n        users[PAYMENT_LIST_ONE] = user;\r\n        userList[currentId] = PAYMENT_LIST_ONE;\r\n        poolList[currentPoolPosition] = PAYMENT_LIST_ONE;\r\n        poolStartFrom = currentPoolPosition;\r\n\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, 10 ether, 40 ether);\r\n\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, 5 ether, 20 ether);\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, 2 ether, 8 ether);\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, 1 ether, 4 ether);\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, .5 ether, 2 ether);\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, .25 ether, 1 ether);\r\n        addUserInPoolInternal(PAYMENT_LIST_ONE, .1 ether, .4 ether);\r\n\r\n        \r\n    }\r\n\r\n    function addUserInPoolAdmin(\r\n        uint256 _position,\r\n        address _userAddress,\r\n        uint256 _investWith,\r\n        uint256 _canEarn,\r\n        uint256 _incomeAfterTopUp\r\n    ) public restricted returns (bool) {\r\n        addUserInPoolInternalWithIncome(\r\n            _position,\r\n            _userAddress,\r\n            _investWith,\r\n            _canEarn,\r\n            _incomeAfterTopUp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addUserInPoolInternalWithIncome(\r\n        uint256 _position,\r\n        address userAddress,\r\n        uint256 investWith,\r\n        uint256 maxEarn,\r\n        uint256 _incomeAfterTopUp\r\n    ) internal {\r\n        addUserInPool(_position, userAddress, investWith, maxEarn);\r\n        emit Topup(userAddress, _position, investWith, now);\r\n        poolList[_position] = userAddress;\r\n       \r\n    }\r\n\r\n    function changePoolStartFromCount(uint256 _count) public restricted {\r\n        poolStartFrom = _count;\r\n    }\r\n\r\n    function changeCurrentPoolCount(uint256 _count) public restricted {\r\n        currentPoolPosition = _count;\r\n    }\r\n\r\n    function changeCurrentIdCount(uint256 _count) public restricted {\r\n        currentId = _count;\r\n    }\r\n\r\n    function addUserInPoolInternal(\r\n        address userAddress,\r\n        uint256 investWith,\r\n        uint256 maxEarn\r\n    ) internal {\r\n        addUserInPool(currentPoolPosition, userAddress, investWith, maxEarn);\r\n        emit Topup(userAddress, currentPoolPosition, investWith, now);\r\n        poolList[currentPoolPosition] = userAddress;\r\n        currentPoolPosition++;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager, \"Only Manager can update!\");\r\n        _;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      \r\n        uint256 c = a / b;\r\n       \r\n        return c;\r\n    }\r\n\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function getUser(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256 id,\r\n            bool isInPool\r\n            \r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].isExist,\r\n            users[userAddress].id,\r\n            users[userAddress].isInPool\r\n        );\r\n    }\r\n\r\n    function getUserReferrals(address userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[userAddress].referral;\r\n    }\r\n\r\n    function regUserAdmin(\r\n        uint256 _position,\r\n        address _refId,\r\n        address _userAddress\r\n    ) public restricted returns (bool) {\r\n        require(!users[_userAddress].isExist, \"User Already Exits\");\r\n        require(users[_refId].isExist, \"Upline not exists!\");\r\n       \r\n\r\n        addInitUserWithPosition(_position, _userAddress, _refId, 0);\r\n       \r\n        return true;\r\n    }\r\n\r\n    function regUser(address _refId) public payable returns (bool) {\r\n        require(!users[msg.sender].isExist, \"User Already Exits\");\r\n        require(users[_refId].isExist, \"Upline not exists!\");\r\n        addUser(_refId, 0);\r\n        \r\n        joinPool();\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    function joinPool() public payable returns (bool) {\r\n        require(users[msg.sender].isExist, \"Register before joing pool!\");\r\n        uint256 poolLevel;\r\n\r\n        if (msg.value == POOL_ENTRY[0]) {\r\n            poolLevel = 0;\r\n        } else if (msg.value == POOL_ENTRY[1]) {\r\n            poolLevel = 1;\r\n        } else if (msg.value == POOL_ENTRY[2]) {\r\n            poolLevel = 2;\r\n        } else if (msg.value == POOL_ENTRY[3]) {\r\n            poolLevel = 3;\r\n        } else if (msg.value == POOL_ENTRY[4]) {\r\n            poolLevel = 4;\r\n        } else if (msg.value == POOL_ENTRY[5]) {\r\n            poolLevel = 5;\r\n        } else if (msg.value == POOL_ENTRY[6]) {\r\n            poolLevel = 6;\r\n        } else {\r\n            revert(\"Invalid Pool Entry Fee\");\r\n        }\r\n        User storage _user = users[msg.sender];\r\n        \r\n        payPoolIncome(msg.sender, msg.value / 2);\r\n       \r\n        _user.poolPosition = currentPoolPosition;\r\n        _user.isInPool = true;\r\n        _user.poolFee = msg.value;\r\n        _user.binaryAmount += (msg.value / 2);\r\n        lockedAmount += (msg.value / 2);\r\n        \r\n        addUserInPool(\r\n            currentPoolPosition,\r\n            msg.sender,\r\n            msg.value,\r\n            4 * msg.value\r\n        );\r\n        emit Topup(userList[_user.id], currentPoolPosition, _user.poolFee, now);\r\n    }\r\n    \r\n    function investBinary(string memory position) public returns(bool) {\r\n        User storage user = users[msg.sender];\r\n        require(user.isExist, \"User not registered yet\");\r\n        require(user.binaryAmount > 0, \"No pool Activated\");\r\n        require(!user.isInBinary, \"User Already added to binary\");\r\n        bytes memory pos = bytes(position);\r\n        if (keccak256(pos) == keccak256(\"L\")) {\r\n            user.binaryPosition = 'L';\r\n            user.isInBinary = true;\r\n            return true;\r\n        } else if (keccak256(pos) == keccak256(\"R\")) {\r\n            user.binaryPosition = 'R';\r\n            user.isInBinary = true;\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    function addUserInPool(\r\n        uint256 _position,\r\n        address _userAddress,\r\n        uint256 _fee,\r\n        uint256 _canEarn\r\n    ) internal {\r\n        PaymentList memory pList;\r\n        pList = PaymentList({\r\n            id: _position,\r\n            userAddress: _userAddress,\r\n            poolFee: _fee,\r\n            canEarnMax: _canEarn,\r\n            incomeAfterTopUp: 0,\r\n            status: true,\r\n            isBlocked: false\r\n        });\r\n\r\n        paymentList[_position] = pList;\r\n    }\r\n\r\n    function payPoolIncome(address _poolAddress, uint256 value) internal {\r\n        uint256 totalTransactions = value / POOL_INCOME;\r\n        \r\n       \r\n        for (uint256 i = 1; i <= totalTransactions; i++) {\r\n            PaymentList storage _user = paymentList[poolStartFrom];\r\n\r\n            uint256 _calculateIncome = _user.incomeAfterTopUp + POOL_INCOME;\r\n            if (_calculateIncome <= _user.canEarnMax && !_user.isBlocked) {\r\n                \r\n                sendRewards(_user.userAddress, POOL_INCOME);\r\n                \r\n                _user.incomeAfterTopUp = _user.incomeAfterTopUp + POOL_INCOME;\r\n              \r\n                emit UserPoolIncome(\r\n                    _user.userAddress,\r\n                    _poolAddress,\r\n                    POOL_INCOME,\r\n                    _user.poolFee,\r\n                    now\r\n                );\r\n\r\n                if (_user.incomeAfterTopUp == _user.canEarnMax) {\r\n                    poolStartFrom++;\r\n                    _user.isBlocked = true;\r\n                }\r\n            } \r\n        }\r\n        currentPoolPosition++;\r\n        poolList[currentPoolPosition] = _poolAddress;\r\n    }\r\n    \r\n    function payBinaryIncome(address receiver, uint256 amount) external restricted {\r\n        require(users[receiver].isExist, \"User doesn't Exits\");\r\n        \r\n        sendRewards(receiver, amount);\r\n        \r\n    }\r\n    \r\n    function sendRewards(address receiver, uint256 amount) internal {\r\n        User storage user = users[receiver];\r\n        if (user.id <= 20) {\r\n            if (amount >= address(this).balance) {\r\n                amount = address(this).balance;\r\n                receiver.transfer(amount * 90/100);\r\n                partner.transfer(amount * 10/100); //check before deploying\r\n                emit BinaryIncome(receiver, amount);\r\n            } else {\r\n                receiver.transfer(amount * 90/100);\r\n                partner.transfer(amount * 10/100);\r\n                emit BinaryIncome(receiver, amount);\r\n            }\r\n        } else {\r\n            if (amount >= address(this).balance) {\r\n                amount = address(this).balance;\r\n                receiver.transfer(amount);\r\n                emit BinaryIncome(receiver, amount);\r\n            } else {\r\n                 receiver.transfer(amount);\r\n                 emit BinaryIncome(receiver, amount);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function addInitUserWithPosition(\r\n        uint256 _postion,\r\n        address userAddress,\r\n        address upline,\r\n        uint256 level\r\n    ) internal {\r\n        uint256 refId = 0;\r\n        refId = users[upline].id;\r\n        address _teamOf;\r\n        User memory user;\r\n        //currentId++;\r\n        user = User({\r\n            isExist: true,\r\n            id: _postion,\r\n            referrerID: refId,\r\n            referrer: address(0),\r\n            referral: new address[](0),\r\n           \r\n            poolPosition: 0,\r\n            poolFee: 0,\r\n            binaryAmount: uint256(0),\r\n            isInPool: false,\r\n            isInBinary: false,\r\n            binaryPosition: '0'\r\n        });\r\n        users[userAddress] = user;\r\n        userList[_postion] = userAddress;\r\n        users[userList[refId]].referral.push(userAddress);\r\n\r\n       \r\n    }\r\n\r\n    function addInitUser(\r\n        address userAddress,\r\n        address upline,\r\n        uint256 level\r\n    ) internal {\r\n        uint256 refId = 0;\r\n        refId = users[upline].id;\r\n        address _teamOf;\r\n        User memory user;\r\n        currentId++;\r\n        user = User({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: refId,\r\n            referrer: address(0),\r\n            referral: new address[](0),\r\n           \r\n            poolPosition: 0,\r\n            poolFee: 0,\r\n            binaryAmount: uint256(0),\r\n            isInPool: true,\r\n            isInBinary: false,\r\n            binaryPosition: '0'\r\n        });\r\n        users[userAddress] = user;\r\n        userList[currentId] = userAddress;\r\n        users[userList[refId]].referral.push(userAddress);\r\n       \r\n    }\r\n\r\n    function addUser(address upline, uint256 level) internal {\r\n        uint256 refId = 0;\r\n        refId = users[upline].id;\r\n       \r\n        User memory user;\r\n        currentId++;\r\n        user = User({\r\n            isExist: true,\r\n            id: currentId,\r\n            referrerID: refId,\r\n            referrer: upline,\r\n            referral: new address[](0),\r\n           \r\n            poolPosition: 0,\r\n            poolFee: 0,\r\n            binaryAmount: uint256(0),\r\n            isInPool: false,\r\n            isInBinary: false,\r\n            binaryPosition: '0'\r\n           \r\n        });\r\n        users[msg.sender] = user;\r\n        userList[currentId] = msg.sender;\r\n        users[userList[refId]].referral.push(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"POOL_ENTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_investWith\",\"type\":\"uint256\"},{\"name\":\"_canEarn\",\"type\":\"uint256\"},{\"name\":\"_incomeAfterTopUp\",\"type\":\"uint256\"}],\"name\":\"addUserInPoolAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAYMENT_LIST_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EARN_INCOME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOP_UP_AFTER_INCOME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"changeCurrentPoolCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolStartFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPoolPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"isInPool\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payBinaryIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinPool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOL_INCOME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"poolPosition\",\"type\":\"uint256\"},{\"name\":\"poolFee\",\"type\":\"uint256\"},{\"name\":\"binaryAmount\",\"type\":\"uint256\"},{\"name\":\"isInPool\",\"type\":\"bool\"},{\"name\":\"isInBinary\",\"type\":\"bool\"},{\"name\":\"binaryPosition\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_position\",\"type\":\"uint256\"},{\"name\":\"_refId\",\"type\":\"address\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"regUserAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"POOL_COMMISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refId\",\"type\":\"address\"}],\"name\":\"regUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentList\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"poolFee\",\"type\":\"uint256\"},{\"name\":\"canEarnMax\",\"type\":\"uint256\"},{\"name\":\"incomeAfterTopUp\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"isBlocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"changePoolStartFromCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CARRY_FORWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"changeCurrentIdCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"position\",\"type\":\"string\"}],\"name\":\"investBinary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"myInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UserPoolIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BinaryIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UserCarryForward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Topup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"CheckStep\",\"type\":\"event\"}]","ContractName":"U2Binary","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000061ee42b5c0f2240e0979f09f7e3c176aa2795105","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a7cf6088737af64e0db3ffb1395475de3b4df3fbe7af458935a9fc3382d6384c"}]}