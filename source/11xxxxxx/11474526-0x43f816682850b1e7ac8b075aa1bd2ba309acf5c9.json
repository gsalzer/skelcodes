{"status":"1","message":"OK","result":[{"SourceCode":"{\"ITFToken.sol\":{\"content\":\"// SPDX-License-Identifier: --ðŸ¥º--\\npragma solidity =0.7.0;\\n\\ninterface ITFToken {\\n    function currentTFDay()\\n        external view\\n        returns (uint64);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function mintSupply(\\n        address _investorAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function giveStatus(\\n        address _referrer\\n    ) external;\\n}\\n\\ninterface UniswapRouterV2 {\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenMax,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (\\n        uint256 amountToken,\\n        uint256 amountETH,\\n        uint256 liquidity\\n    );\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (\\n        uint256 amountB\\n    );\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (\\n        uint256[] memory amounts\\n    );\\n}\\n\\ninterface UniswapV2Pair {\\n    function getReserves() external view returns (\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 blockTimestampLast\\n    );\\n\\n    function token1() external view returns (address);\\n}\\n\\ninterface RefundSponsorI {\\n    function addGasRefund(address _a, uint256 _c) external;\\n}\\n\\ninterface IERC20Token {\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )  external returns (\\n        bool success\\n    );\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    )  external returns (\\n        bool success\\n    );\\n}\"},\"LiquidityTransformer.sol\":{\"content\":\"// SPDX-License-Identifier: --ðŸ¥º--\\n\\npragma solidity =0.7.0;\\n\\nimport \\u0027./ITFToken.sol\\u0027;\\n\\ncontract LiquidityTransformer is usingProvable {\\n    using SafeMathLT for uint256;\\n    using SafeMathLT for uint128;\\n\\n    ITFToken public TF_CONTRACT;\\n    UniswapV2Pair public UNISWAP_PAIR;\\n\\n    UniswapRouterV2 public constant UNISWAP_ROUTER = UniswapRouterV2(\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D // mainnet\\n        // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D // rinkeby\\n   );\\n\\n    RefundSponsorI public constant REFUND_SPONSOR = RefundSponsorI(\\n        0x162b53D630977D90FCa9e0b8Bbc165DF9598b88a // mainnet\\n        // 0x9CA1e4C129Cfc97a4d0Cc5E3Bfca4B4ed0579FC2 // rinkeby\\n   );\\n\\n    address payable constant TEAM_ADDRESS = 0x94C0904e6a37AB6B94145267b1855e59c4579DA7;\\n    address public TOKEN_OWNER = 0x48F8bc095353B1652568012d7d74553d431a0317;\\n\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\\n    // address constant WETH = 0x3235625666b458a8881100f689152aCa023ae778; // rinkeby\\n\\n    uint8 constant INVESTMENT_DAYS = 30;\\n    \\n    uint128 constant THRESHOLD_LIMIT_MIN = 1 ether;\\n    uint128 constant THRESHOLD_LIMIT_MAX = 50 ether;\\n    uint128 constant MIN_INVEST = 50000000 gwei;\\n    uint128 constant DAILY_MAX_SUPPLY = 10000000;\\n\\n    uint256 constant CROP_PER_TF = 10 ** uint256(18);\\n    uint256 constant NUM_RANDOM_BYTES_REQUESTED = 7;\\n\\n    struct Globals {\\n        uint64 generatedDays;\\n        uint64 generationDayBuffer;\\n        uint64 generationTimeout;\\n        uint64 preparedReferrals;\\n        uint256 totalTransferTokens;\\n        uint256 totalWeiContributed;\\n        uint256 totalReferralTokens;\\n    }\\n\\n    Globals public g;\\n\\n    mapping(uint256 =\\u003e uint256) dailyMinSupply;\\n    mapping(uint256 =\\u003e uint256) public dailyTotalSupply;\\n    mapping(uint256 =\\u003e uint256) public dailyTotalInvestment;\\n\\n    mapping(uint256 =\\u003e uint256) public investorAccountCount;\\n    mapping(uint256 =\\u003e mapping(uint256 =\\u003e address)) public investorAccounts;\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public investorBalances;\\n\\n    mapping(address =\\u003e uint256) public referralAmount;\\n    mapping(address =\\u003e uint256) public referralTokens;\\n    mapping(address =\\u003e uint256) public investorTotalBalance;\\n    mapping(address =\\u003e uint256) originalInvestment;\\n\\n    uint256 public referralAccountCount;\\n    uint256 public uniqueInvestorCount;\\n\\n    mapping (uint256 =\\u003e address) public uniqueInvestors;\\n    mapping (uint256 =\\u003e address) public referralAccounts;\\n\\n    event GeneratingRandomSupply(uint256 indexed investmentDay);\\n    event GeneratedRandomSupply(uint256 indexed investmentDay, uint256 randomSupply);\\n    event GeneratedStaticSupply(uint256 indexed investmentDay, uint256 staticSupply);\\n    event GenerationStatus(uint64 indexed investmentDay, bool result);\\n    event LogNewProvableQuery(string description);\\n    event ReferralAdded(address indexed referral, address indexed referee, uint256 amount);\\n    event UniSwapResult(uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    event TFReservation(address indexed sender, uint256 indexed investmentDay, uint256 amount);\\n\\n    modifier afterInvestmentPhase() {\\n        require(_currentTFDay() \\u003e INVESTMENT_DAYS, \\u0027ongoing investment phase\\u0027);\\n        _;\\n    }\\n\\n    modifier afterUniswapTransfer() {\\n        require(g.generatedDays \\u003e 0 \\u0026\\u0026 g.totalWeiContributed == 0, \\u0027forward liquidity first\\u0027);\\n        _;\\n    }\\n\\n    modifier afterInvestmentDaysRange(uint256 _investmentDay) {\\n        require(_investmentDay \\u003e 0 \\u0026\\u0026 _investmentDay \\u003c= INVESTMENT_DAYS, \\u0027not in initial investment days range\\u0027);\\n        _;\\n    }\\n\\n    modifier afterInvestmentEntryAmount(uint256 _days) {\\n        require(msg.value \\u003e= MIN_INVEST * _days, \\u0027investment below minimum\\u0027);\\n        _;\\n    }\\n\\n    modifier afterFundedDays(uint256 _investmentDay) {\\n        require(dailyTotalInvestment[_investmentDay] \\u003e 0, \\u0027no investments on that day\\u0027);\\n        _;\\n    }\\n\\n    modifier afterTokenOwner() {\\n        require(msg.sender == TOKEN_OWNER, \\u0027wrong sender\\u0027);\\n        _;\\n    }\\n\\n    modifier useRefundSponsorDynamic() {\\n        uint256 gasStart = gasleft();\\n        _;\\n        uint256 gasSpent = (21000 + gasStart - gasleft()).mul(tx.gasprice);\\n        gasSpent = msg.value.div(10) \\u003e gasSpent ? gasSpent : msg.value.div(10);\\n        REFUND_SPONSOR.addGasRefund(msg.sender, gasSpent);\\n    }\\n\\n    modifier useRefundSponsorFixed() {\\n        uint256 gasStart = gasleft();\\n        _;\\n        uint256 gasSpent = (21000 + gasStart - gasleft()).mul(tx.gasprice);\\n        gasSpent = gasSpent \\u003e 5000000000000000 ? 5000000000000000 : gasSpent;\\n        REFUND_SPONSOR.addGasRefund(msg.sender, gasSpent);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(UNISWAP_ROUTER) || msg.sender == TEAM_ADDRESS || msg.sender == TOKEN_OWNER, \\u0027direct deposits disabled\\u0027);\\n    }\\n\\n    function resetToken(address _tfToken, address _uniswapPair ) external afterTokenOwner {\\n        TF_CONTRACT = ITFToken(_tfToken);\\n        UNISWAP_PAIR = UniswapV2Pair(_uniswapPair);\\n    }\\n\\n    function revokeAccess() external afterTokenOwner {\\n        TOKEN_OWNER = address(0x0);\\n    }\\n\\n    constructor(address _tfToken, address _uniswapPair) {\\n        TF_CONTRACT = ITFToken(_tfToken);\\n        UNISWAP_PAIR = UniswapV2Pair(_uniswapPair);\\n\\n        // OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\\n\\n        provable_setProof(proofType_Ledger);\\n        provable_setCustomGasPrice(10000000000);\\n\\n        dailyMinSupply[1] = 5000000;\\n        dailyMinSupply[2] = 10000000;\\n        dailyMinSupply[3] = 5000000;\\n        dailyMinSupply[4] = 1;\\n        dailyMinSupply[5] = 5000000;\\n        dailyMinSupply[6] = 5000000;\\n        dailyMinSupply[7] = 4000000;\\n\\n        dailyMinSupply[8] = 2500000;\\n        dailyMinSupply[9] = 10000000;\\n        dailyMinSupply[10] = 5000000;\\n\\n        dailyMinSupply[11] = 1;\\n        dailyMinSupply[12] = 2500000;\\n        dailyMinSupply[13] = 5000000;\\n        dailyMinSupply[14] = 5000000;\\n        dailyMinSupply[15] = 4000000;\\n        dailyMinSupply[16] = 5000000;\\n        dailyMinSupply[17] = 2500000;\\n\\n        dailyMinSupply[18] = 1;\\n        dailyMinSupply[19] = 5000000;\\n        dailyMinSupply[20] = 4000000;\\n        dailyMinSupply[21] = 5000000;\\n        dailyMinSupply[22] = 5000000;\\n        dailyMinSupply[23] = 2500000;\\n        dailyMinSupply[24] = 4000000;\\n\\n        dailyMinSupply[25] = 1;\\n        dailyMinSupply[26] = 5000000;\\n        dailyMinSupply[27] = 2500000;\\n        dailyMinSupply[28] = 5000000;\\n        dailyMinSupply[29] = 4000000;\\n        dailyMinSupply[30] = 1;\\n    }\\n\\n\\n    //  TF RESERVATION (EXTERNAL FUNCTIONS)  //\\n    //  -------------------------------------  //\\n\\n    /** @dev Performs reservation of TF tokens with ETH\\n      * @param _investmentDays array of reservation days.\\n      * @param _referralAddress referral address for bonus.\\n      */\\n    function reserveTF(uint8[] calldata _investmentDays, address _referralAddress ) external payable useRefundSponsorDynamic afterInvestmentEntryAmount(_investmentDays.length) {\\n        checkInvestmentDays(_investmentDays, _currentTFDay());\\n\\n        _reserveTF(_investmentDays, _referralAddress, msg.sender, msg.value);\\n    }\\n\\n    /** @notice Allows reservation of TF tokens with other ERC20 tokens\\n      * @dev this will require LT contract to be approved as spender\\n      * @param _tokenAddress address of an ERC20 token to use\\n      * @param _tokenAmount amount of tokens to use for reservation\\n      * @param _investmentDays array of reservation days\\n      * @param _referralAddress referral address for bonus\\n      */\\n    function reserveTFWithToken(address _tokenAddress, uint256 _tokenAmount, uint8[] calldata _investmentDays, address _referralAddress ) external useRefundSponsorFixed {\\n        IERC20Token _token = IERC20Token(_tokenAddress);\\n\\n        _token.transferFrom(msg.sender, address(this), _tokenAmount);\\n        _token.approve(address(UNISWAP_ROUTER), _tokenAmount);\\n\\n        address[] memory _path = preparePath(_tokenAddress);\\n        uint256[] memory amounts = UNISWAP_ROUTER.swapExactTokensForETH(_tokenAmount, 0, _path, address(this), block.timestamp.add(2 hours));\\n\\n        require(amounts[1] \\u003e= MIN_INVEST * _investmentDays.length, \\u0027investment below minimum\\u0027);\\n\\n        checkInvestmentDays(_investmentDays, _currentTFDay());\\n        _reserveTF(_investmentDays, _referralAddress, msg.sender, amounts[1]);\\n    }\\n\\n    //  TF RESERVATION (INTERNAL FUNCTIONS)  //\\n    //  -------------------------------------  //\\n\\n    /** @notice Distributes ETH equaly between selected reservation days\\n      * @dev this will require LT contract to be approved as a spender\\n      * @param _investmentDays array of selected reservation days\\n      * @param _referralAddress referral address for bonus\\n      * @param _senderAddress address of the investor\\n      * @param _senderValue amount of ETH contributed\\n      */\\n    function _reserveTF(uint8[] memory _investmentDays, address _referralAddress, address _senderAddress, uint256 _senderValue ) internal {\\n        require(_senderAddress != _referralAddress, \\u0027must be a different address\\u0027);\\n        require(notContract(_referralAddress), \\u0027invalid referral address\\u0027);\\n\\n        uint256 _investmentBalance = _referralAddress == address(0x0)\\n            ? _senderValue // no referral bonus\\n            : _senderValue.mul(1100).div(1000);\\n\\n        uint256 _totalDays = _investmentDays.length;\\n        uint256 _dailyAmount = _investmentBalance.div(_totalDays);\\n        uint256 _leftOver = _investmentBalance.mod(_totalDays);\\n\\n        _addBalance(_senderAddress, _investmentDays[0], _dailyAmount.add(_leftOver));\\n\\n        for (uint8 _i = 1; _i \\u003c _totalDays; _i++) {\\n            _addBalance(_senderAddress, _investmentDays[_i], _dailyAmount);\\n        }\\n\\n        _trackInvestors(_senderAddress, _investmentBalance);\\n\\n        if (_referralAddress != address(0x0)) {\\n            _trackReferrals(_referralAddress, _senderValue);\\n\\n            emit ReferralAdded(_referralAddress, _senderAddress, _senderValue);\\n        }\\n\\n        originalInvestment[_senderAddress] += _senderValue;\\n        g.totalWeiContributed += _senderValue;\\n    }\\n\\n    /** @notice Allocates investors balance to specific day\\n      * @param _senderAddress investors wallet address\\n      * @param _investmentDay selected investment day\\n      * @param _investmentBalance amount invested (with bonus)\\n      */\\n    function _addBalance(address _senderAddress, uint256 _investmentDay, uint256 _investmentBalance ) internal {\\n        if (investorBalances[_senderAddress][_investmentDay] == 0) {\\n            investorAccounts[_investmentDay][investorAccountCount[_investmentDay]] = _senderAddress;\\n            investorAccountCount[_investmentDay]++;\\n        }\\n\\n        investorBalances[_senderAddress][_investmentDay] += _investmentBalance;\\n        dailyTotalInvestment[_investmentDay] += _investmentBalance;\\n\\n        emit TFReservation(_senderAddress, _investmentDay, _investmentBalance);\\n    }\\n\\n    //  TF RESERVATION (PRIVATE FUNCTIONS)  //\\n    //  ------------------------------------  //\\n\\n    /** @notice Tracks investorTotalBalance and uniqueInvestors\\n      * @dev used in _reserveTF() internal function\\n      * @param _investorAddress address of the investor\\n      * @param _value ETH amount invested (with bonus)\\n      */\\n    function _trackInvestors(address _investorAddress, uint256 _value) private {\\n        // if (investorTotalBalance[_investorAddress] == 0) uniqueInvestors.push(_investorAddress);\\n        if (investorTotalBalance[_investorAddress] == 0) {\\n            uniqueInvestors[\\n            uniqueInvestorCount] = _investorAddress;\\n            uniqueInvestorCount++;\\n        }\\n        investorTotalBalance[_investorAddress] += _value;\\n    }\\n\\n    /** @notice Tracks referralAmount and referralAccounts\\n      * @dev used in _reserveTF() internal function\\n      * @param _referralAddress address of the referrer\\n      * @param _value ETH amount referred during reservation\\n      */\\n    function _trackReferrals(address _referralAddress, uint256 _value) private {\\n        if (referralAmount[_referralAddress] == 0) {\\n            referralAccounts[\\n            referralAccountCount] = _referralAddress;\\n            referralAccountCount++;\\n        }\\n        referralAmount[_referralAddress] += _value;\\n    }\\n\\n\\n    //  SUPPLY GENERATION (EXTERNAL FUNCTION)  //\\n    //  -------------------------------------  //\\n\\n    /** @notice Allows to generate supply for past funded days\\n      * @param _investmentDay investemnt day index (1-30)\\n      */\\n    function generateSupply(uint64 _investmentDay ) external afterInvestmentDaysRange(_investmentDay) afterFundedDays(_investmentDay) {\\n        require(_investmentDay \\u003c _currentTFDay(), \\u0027investment day must be in past\\u0027);\\n        require(g.generationDayBuffer == 0, \\u0027supply generation in progress\\u0027);\\n        require(dailyTotalSupply[_investmentDay] == 0, \\u0027supply already generated\\u0027);\\n\\n        g.generationDayBuffer = _investmentDay;\\n        g.generationTimeout = uint64(block.timestamp.add(2 hours));\\n\\n        (DAILY_MAX_SUPPLY - dailyMinSupply[_investmentDay] == dailyMinSupply[_investmentDay] || DAILY_MAX_SUPPLY - dailyMinSupply[_investmentDay] == 0)\\n            ? _generateStaticSupply(_investmentDay)\\n            : _generateRandomSupply(_investmentDay);\\n    }\\n\\n\\n    //  SUPPLY GENERATION (INTERNAL FUNCTIONS)  //\\n    //  --------------------------------------  //\\n\\n    /** @notice Generates supply for days with static supply\\n      * @param _investmentDay investemnt day index (1-30)\\n      */\\n    function _generateStaticSupply(uint256 _investmentDay ) internal {\\n        dailyTotalSupply[_investmentDay] = dailyMinSupply[_investmentDay] * CROP_PER_TF;\\n        g.totalTransferTokens += dailyTotalSupply[_investmentDay];\\n\\n        g.generatedDays++;\\n        g.generationDayBuffer = 0;\\n        g.generationTimeout = 0;\\n\\n        emit GeneratedStaticSupply(_investmentDay, dailyTotalSupply[_investmentDay]);\\n    }\\n\\n    /** @notice Generates supply for days with random supply\\n      * @dev uses provable api to request provable_newRandomDSQuery\\n      * @param _investmentDay investemnt day index (1-30)\\n      */\\n    function _generateRandomSupply(uint256 _investmentDay ) internal {\\n        uint256 QUERY_EXECUTION_DELAY = 0;\\n        uint256 GAS_FOR_CALLBACK = 200000;\\n\\n        provable_newRandomDSQuery(QUERY_EXECUTION_DELAY, NUM_RANDOM_BYTES_REQUESTED, GAS_FOR_CALLBACK);\\n\\n        emit GeneratingRandomSupply(_investmentDay);\\n        emit LogNewProvableQuery(\\\"Provable query was sent, standing by for the answer...\\\");\\n    }\\n\\n    //  SUPPLY GENERATION (ORACLE FUNCTIONS)  //\\n    //  ------------------------------------  //\\n\\n    /** @notice Function that generates random supply\\n      * @dev expected to be called by oracle within 2 hours\\n      * time-frame, otherTF __timeout() can be performed\\n      */\\n    function __callback(bytes32 _queryId, string memory _result, bytes memory _proof ) public override {\\n        require(msg.sender == provable_cbAddress(), \\u0027can only be called by Oracle\\u0027);\\n        require(g.generationDayBuffer \\u003e 0 \\u0026\\u0026 g.generationDayBuffer \\u003c= INVESTMENT_DAYS, \\u0027incorrect generation day\\u0027);\\n\\n        if (provable_randomDS_proofVerify__returnCode(_queryId, _result, _proof ) != 0 ) {\\n\\n            g.generationDayBuffer = 0;\\n            g.generationTimeout = 0;\\n\\n            emit GenerationStatus(g.generationDayBuffer, false);\\n        } else {\\n            g.generatedDays = g.generatedDays + 1;\\n            uint256 _investmentDay = g.generationDayBuffer;\\n\\n            uint256 currentDayMaxSupply = DAILY_MAX_SUPPLY.sub(dailyMinSupply[_investmentDay]);\\n            uint256 ceilingDayMaxSupply = currentDayMaxSupply.sub(dailyMinSupply[_investmentDay]);\\n\\n            uint256 randomSupply = uint256(keccak256(abi.encodePacked(_result))) % ceilingDayMaxSupply;\\n\\n            require(dailyTotalSupply[_investmentDay] == 0, \\u0027supply already generated!\\u0027);\\n\\n            dailyTotalSupply[_investmentDay] = dailyMinSupply[_investmentDay].add(randomSupply).mul(CROP_PER_TF);\\n\\n            g.totalTransferTokens = g.totalTransferTokens.add(dailyTotalSupply[_investmentDay]);\\n\\n            emit GeneratedRandomSupply(_investmentDay, dailyTotalSupply[_investmentDay]);\\n            emit GenerationStatus(g.generationDayBuffer, true);\\n\\n            g.generationDayBuffer = 0;\\n            g.generationTimeout = 0;\\n        }\\n    }\\n\\n    /** @notice Allows to reset expected oracle callback\\n      * @dev resets generationDayBuffer to retry callback\\n      * assigns static supply if no callback within a day\\n      */\\n    function __timeout() external {\\n        require(g.generationTimeout \\u003e 0 \\u0026\\u0026 g.generationTimeout \\u003c block.timestamp, \\u0027still awaiting!\\u0027);\\n\\n        uint64 _investmentDay = g.generationDayBuffer;\\n\\n        require(_investmentDay \\u003e 0 \\u0026\\u0026 _investmentDay \\u003c= INVESTMENT_DAYS, \\u0027incorrect generation day\\u0027);\\n        require(dailyTotalSupply[_investmentDay] == 0, \\u0027supply already generated!\\u0027);\\n\\n        if (_currentTFDay() - _investmentDay \\u003e 1) {\\n            dailyTotalSupply[_investmentDay] = dailyMinSupply[1].mul(CROP_PER_TF);\\n\\n            g.totalTransferTokens = g.totalTransferTokens.add(dailyTotalSupply[_investmentDay]);\\n            g.generatedDays = g.generatedDays + 1;\\n\\n            emit GeneratedStaticSupply(_investmentDay, dailyTotalSupply[_investmentDay]);\\n            emit GenerationStatus(_investmentDay, true);\\n\\n        } else {\\n            emit GenerationStatus(_investmentDay, false);\\n        }\\n\\n        g.generationDayBuffer = 0;\\n        g.generationTimeout = 0;\\n    }\\n\\n\\n    //  PRE-LIQUIDITY GENERATION FUNCTION  //\\n    //  ---------------------------------  //\\n\\n    /** @notice Pre-calculates amount of tokens each referrer will get\\n      * @dev must run this for all referrer addresses in batches\\n      * converts _referralAmount to _referralTokens based on dailyRatio\\n      */\\n    function prepareReferralBonuses(uint256 _referralBatchFrom, uint256 _referralBatchTo ) external afterInvestmentPhase {\\n        require(_referralBatchFrom \\u003c _referralBatchTo, \\u0027incorrect referral batch\\u0027);\\n        require(g.preparedReferrals \\u003c referralAccountCount, \\u0027all referrals already prepared\\u0027);\\n\\n        uint256 _totalRatio = g.totalTransferTokens.div(g.totalWeiContributed);\\n\\n        for (uint256 i = _referralBatchFrom; i \\u003c _referralBatchTo; i++) {\\n            address _referralAddress = referralAccounts[i];\\n            uint256 _referralAmount = referralAmount[_referralAddress];\\n            if (referralAmount[_referralAddress] \\u003e 0) {\\n                referralAmount[_referralAddress] = 0;\\n                if (_referralAmount \\u003e= THRESHOLD_LIMIT_MIN) {\\n                    _referralAmount \\u003e= THRESHOLD_LIMIT_MAX\\n                        ? _fullReferralBonus(_referralAddress, _referralAmount, _totalRatio)\\n                        : _familyReferralBonus(_referralAddress, _totalRatio);\\n\\n                    g.totalReferralTokens = g.totalReferralTokens.add(\\n                        referralTokens[_referralAddress]\\n                  );\\n                }\\n                g.preparedReferrals++;\\n            }\\n        }\\n    }\\n\\n    /** @notice performs token allocation for 10% of referral amount\\n      * @dev after liquidity is formed referrer can withdraw this amount\\n      * additionally this will give CM status to the referrer address\\n      */\\n    function _fullReferralBonus(address _referralAddress, uint256 _referralAmount, uint256 _ratio) internal {\\n        referralTokens[_referralAddress] = _referralAmount.div(10).mul(_ratio);\\n        TF_CONTRACT.giveStatus(_referralAddress);\\n    }\\n\\n    /** @notice performs token allocation for family bonus referrals\\n      * @dev after liquidity is formed referrer can withdraw this amount\\n      */\\n    function _familyReferralBonus(address _referralAddress, uint256 _ratio) internal {\\n        referralTokens[_referralAddress] = MIN_INVEST.mul(_ratio);\\n    }\\n\\n\\n    //  LIQUIDITY GENERATION FUNCTION  //\\n    //  -----------------------------  //\\n\\n    /** @notice Creates initial liquidity on Uniswap by forwarding\\n      * reserved tokens equivalent to ETH contributed to the contract\\n      * @dev check addLiquidityETH documentation\\n      */\\n    function forwardLiquidity(/*ðŸ¦„*/) external afterInvestmentPhase {\\n        require(g.generatedDays == fundedDays(), \\u0027must generate supply for all days\\u0027);\\n        require(g.preparedReferrals == referralAccountCount, \\u0027must prepare all referrals\\u0027);\\n        require(g.totalTransferTokens \\u003e 0, \\u0027must have tokens to transfer\\u0027);\\n\\n        uint256 _balance = g.totalWeiContributed;\\n        uint256 _buffer = g.totalTransferTokens + g.totalReferralTokens;\\n\\n        _balance = _balance.sub(_balance.div(10));\\n        _buffer = _buffer.mul(_balance).div(g.totalWeiContributed);\\n\\n        TF_CONTRACT.mintSupply(address(this), _buffer);\\n        TF_CONTRACT.approve(address(UNISWAP_ROUTER), _buffer);\\n\\n        (uint256 amountToken, uint256 amountETH, uint256 liquidity ) = UNISWAP_ROUTER.addLiquidityETH{value: _balance}(address(TF_CONTRACT), _buffer, 0, 0, address(0x0), block.timestamp.add(2 hours));\\n\\n        g.totalTransferTokens = 0;\\n        g.totalReferralTokens = 0;\\n        g.totalWeiContributed = 0;\\n\\n        emit UniSwapResult(amountToken, amountETH, liquidity);\\n    }\\n\\n\\n    //  TF TOKEN PAYOUT FUNCTIONS (INDIVIDUAL)  //\\n    //  ----------------------------------------  //\\n\\n    /** @notice Allows to mint all the tokens\\n      * from investor and referrer perspectives\\n      * @dev can be called after forwardLiquidity()\\n      */\\n    function $getMyTokens(/*ðŸ’°*/) external afterUniswapTransfer {\\n        payoutInvestorAddress(msg.sender);\\n        payoutReferralAddress(msg.sender);\\n    }\\n\\n    /** @notice Allows to mint tokens for specific investor address\\n      * @dev aggregades investors tokens across all investment days\\n      * and uses TF_CONTRACT instance to mint all the TF tokens\\n      * @param _investorAddress requested investor calculation address\\n      * @return _payout amount minted to the investors address\\n      */\\n    function payoutInvestorAddress(address _investorAddress ) public afterUniswapTransfer returns (uint256 _payout) {\\n        for (uint8 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            if (investorBalances[_investorAddress][i] \\u003e 0) {\\n                _payout += investorBalances[_investorAddress][i].mul(\\n                    _calculateDailyRatio(i)\\n                ).div(100E18);\\n                investorBalances[_investorAddress][i] = 0;\\n            }\\n        }\\n        if (_payout \\u003e 0) {\\n            TF_CONTRACT.mintSupply(\\n                _investorAddress,\\n                _payout\\n           );\\n        }\\n    }\\n\\n    /** @notice Allows to mint tokens for specific referrer address\\n      * @dev must be pre-calculated in prepareReferralBonuses()\\n      * @param _referralAddress referrer payout address\\n      * @return _referralTokens amount minted to the referrer address\\n      */\\n    function payoutReferralAddress(address _referralAddress ) public afterUniswapTransfer returns (uint256 _referralTokens) {\\n        _referralTokens = referralTokens[_referralAddress];\\n        if (referralTokens[_referralAddress] \\u003e 0) {\\n            referralTokens[_referralAddress] = 0;\\n            TF_CONTRACT.mintSupply(\\n                _referralAddress,\\n                _referralTokens\\n           );\\n        }\\n    }\\n\\n    //  TF TOKEN PAYOUT FUNCTIONS (BATCHES)  //\\n    //  -------------------------------------  //\\n\\n    /** @notice Allows to mint tokens for specific investment day\\n      * recommended batch size is up to 50 addresses per call\\n      * @param _investmentDay processing investment day\\n      * @param _investorBatchFrom batch starting index\\n      * @param _investorBatchTo bach finishing index\\n      */\\n    function payoutInvestmentDayBatch(uint256 _investmentDay, uint256 _investorBatchFrom, uint256 _investorBatchTo ) external afterUniswapTransfer afterFundedDays(_investmentDay) {\\n        require(_investorBatchFrom \\u003c _investorBatchTo, \\u0027incorrect investment batch\\u0027);\\n\\n        uint256 _dailyRatio = _calculateDailyRatio(_investmentDay);\\n\\n        for (uint256 i = _investorBatchFrom; i \\u003c _investorBatchTo; i++) {\\n            address _investor = investorAccounts[_investmentDay][i];\\n            uint256 _balance = investorBalances[_investor][_investmentDay];\\n            uint256 _payout = _balance.mul(_dailyRatio).div(100E18);\\n\\n            if (investorBalances[_investor][_investmentDay] \\u003e 0) {\\n                investorBalances[_investor][_investmentDay] = 0;\\n                TF_CONTRACT.mintSupply(_investor, _payout);\\n            }\\n        }\\n    }\\n\\n    /** @notice Allows to mint tokens for referrers in batches\\n      * @dev can be called right after forwardLiquidity()\\n      * recommended batch size is up to 50 addresses per call\\n      * @param _referralBatchFrom batch starting index\\n      * @param _referralBatchTo bach finishing index\\n      */\\n    function payoutReferralBatch(uint256 _referralBatchFrom, uint256 _referralBatchTo ) external afterUniswapTransfer {\\n        require(_referralBatchFrom \\u003c _referralBatchTo, \\u0027incorrect referral batch\\u0027);\\n\\n        for (uint256 i = _referralBatchFrom; i \\u003c _referralBatchTo; i++) {\\n            address _referralAddress = referralAccounts[i];\\n            uint256 _referralTokens = referralTokens[_referralAddress];\\n            if (referralTokens[_referralAddress] \\u003e 0) {\\n                referralTokens[_referralAddress] = 0;\\n                TF_CONTRACT.mintSupply(_referralAddress, _referralTokens);\\n            }\\n        }\\n    }\\n\\n    //  INFO VIEW FUNCTIONS (PERSONAL)  //\\n    //  ------------------------------  //\\n\\n    /** @notice checks for callers investment amount on specific day (with bonus)\\n      * @return total amount invested across all investment days (with bonus)\\n      */\\n    function myInvestmentAmount(uint256 _investmentDay) external view returns (uint256) {\\n        return investorBalances[msg.sender][_investmentDay];\\n    }\\n\\n    /** @notice checks for callers investment amount on each day (with bonus)\\n      * @return _myAllDays total amount invested across all days (with bonus)\\n      */\\n    function myInvestmentAmountAllDays() external view returns (uint256[31] memory _myAllDays) {\\n        for (uint256 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            _myAllDays[i] = investorBalances[msg.sender][i];\\n        }\\n    }\\n\\n    /** @notice checks for callers total investment amount (with bonus)\\n      * @return total amount invested across all investment days (with bonus)\\n      */\\n    function myTotalInvestmentAmount() external view returns (uint256) {\\n        return investorTotalBalance[msg.sender];\\n    }\\n    \\n    /** @notice checks for callers total investment tokens (with bonus)\\n      * @return total tokens\\n      */\\n    function myTotalInvestmentTokens() external view returns (uint256) {\\n        uint256 _total = 0;\\n\\n        for (uint8 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            if (investorBalances[msg.sender][i] \\u003e 0) {\\n                _total += investorBalances[msg.sender][i].mul(\\n                    _calculateDailyRatio(i)\\n                ).div(100E18);\\n            }\\n        }\\n\\n        \\n        return _total.add(referralTokens[msg.sender]);\\n    }\\n\\n    //  INFO VIEW FUNCTIONS (GLOBAL)  //\\n    //  ----------------------------  //\\n\\n    /** @notice checks for investors count on specific day\\n      * @return investors count for specific day\\n      */\\n    function investorsOnDay(uint256 _investmentDay) public view returns (uint256) {\\n        return dailyTotalInvestment[_investmentDay] \\u003e 0 ? investorAccountCount[_investmentDay] : 0;\\n    }\\n\\n    /** @notice checks for investors count on each day\\n      * @return _allInvestors array with investors count for each day\\n      */\\n    function investorsOnAllDays() external view returns (uint256[31] memory _allInvestors) {\\n        for (uint256 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            _allInvestors[i] = investorsOnDay(i);\\n        }\\n    }\\n\\n    /** @notice checks for investment amount on each day\\n      * @return _allInvestments array with investment amount for each day\\n      */\\n    function investmentsOnAllDays() external view returns (uint256[31] memory _allInvestments) {\\n        for (uint256 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            _allInvestments[i] = dailyTotalInvestment[i];\\n        }\\n    }\\n\\n    /** @notice checks for supply amount on each day\\n      * @return _allSupply array with supply amount for each day\\n      */\\n    function supplyOnAllDays() external view returns (uint256[31] memory _allSupply) {\\n        for (uint256 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            _allSupply[i] = dailyTotalSupply[i];\\n        }\\n    }\\n\\n\\n    //  HELPER FUNCTIONS (PURE)  //\\n    //  -----------------------  //\\n\\n    /** @notice checks that provided days are valid for investemnt\\n      * @dev used in reserveTF() and reserveTFWithToken()\\n      */\\n    function checkInvestmentDays(uint8[] memory _investmentDays, uint64 _tfDay ) internal pure {\\n        for (uint8 _i = 0; _i \\u003c _investmentDays.length; _i++) {\\n            require(_investmentDays[_i] \\u003e= _tfDay, \\u0027investment day already passed\\u0027);\\n            require(_investmentDays[_i] \\u003e 0 \\u0026\\u0026 _investmentDays[_i] \\u003c= INVESTMENT_DAYS, \\u0027incorrect investment day\\u0027);\\n        }\\n    }\\n\\n    /** @notice prepares path variable for uniswap to exchange tokens\\n      * @dev used in reserveTFWithToken() swapExactTokensForETH call\\n      * @param _tokenAddress ERC20 token address to be swapped for ETH\\n      * @return _path that is used to swap tokens for ETH on uniswap\\n      */\\n    function preparePath(address _tokenAddress ) internal pure returns (address[] memory _path ) {\\n        _path = new address[](2);\\n        _path[0] = _tokenAddress;\\n        _path[1] = WETH;\\n    }\\n\\n    /** @notice checks for invesments on all days\\n      * @dev used in forwardLiquidity() requirements\\n      * @return $fundedDays - amount of funded days 0-30\\n      */\\n    function fundedDays() public view returns (uint8 $fundedDays ) {\\n        for (uint8 i = 1; i \\u003c= INVESTMENT_DAYS; i++) {\\n            if (dailyTotalInvestment[i] \\u003e 0) $fundedDays++;\\n        }\\n    }\\n\\n    /** @notice TF equivalent in ETH price calculation\\n      * @dev returned value has 100E18 precision - divided later on\\n      * @return token price for specific day based on total investement\\n      */\\n    function _calculateDailyRatio(uint256 _investmentDay ) internal view returns (uint256) {\\n\\n        uint256 dailyRatio = dailyTotalSupply[_investmentDay].mul(100E18).div(dailyTotalInvestment[_investmentDay]);\\n        uint256 remainderCheck = dailyTotalSupply[_investmentDay].mul(100E18).mod(dailyTotalInvestment[_investmentDay]);\\n\\n        return remainderCheck == 0 ? dailyRatio : dailyRatio.add(1);\\n    }\\n\\n    //  TIMING FUNCTIONS  //\\n    //  ----------------  //\\n\\n    /** @notice shows current day of TFToken\\n      * @dev value is fetched from TF_CONTRACT\\n      * @return iteration day since TF inception\\n      */\\n    function _currentTFDay() public view returns (uint64) {\\n        return TF_CONTRACT.currentTFDay();\\n    }\\n\\n    //  EMERGENCY REFUND FUNCTIONS  //\\n    //  --------------------------  //\\n\\n    /** @notice allows refunds if funds are stuck\\n      * @param _investor address to be refunded\\n      * @return _amount refunded to the investor\\n      */\\n    function requestRefund(address payable _investor, address payable _succesor ) external returns (uint256 _amount ) {\\n        require(g.totalWeiContributed \\u003e 0  \\u0026\\u0026 originalInvestment[_investor] \\u003e 0 \\u0026\\u0026 _currentTFDay() \\u003e INVESTMENT_DAYS + 10, unicode\\u0027liquidity successfully forwarded to uniswap ðŸ¦„\\u0027);\\n\\n        // refunds the investor\\n        _amount = originalInvestment[_investor];\\n        originalInvestment[_investor] = 0;\\n        _succesor.transfer(_amount);\\n\\n        // deny possible comeback\\n        g.totalTransferTokens = 0;\\n    }\\n\\n    /** @notice allows to withdraw team funds for the work\\n      * strictly only after the uniswap liquidity is formed\\n      * @param _amount value to withdraw from the contract\\n      */\\n    function requestTeamFunds(uint256 _amount ) external afterUniswapTransfer {\\n        TEAM_ADDRESS.transfer(_amount);\\n    }\\n\\n    function notContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size == 0);\\n    }\\n\\n}\\n\\nlibrary SafeMathLT {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\u0027addition overflow\\u0027);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\u0027subtraction overflow\\u0027);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\u0027multiplication overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\u0027division by zero\\u0027);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\u0027modulo by zero\\u0027);\\n        return a % b;\\n    }\\n}\\n\\nimport \\u0027./provableAPI_0.6.sol\\u0027;\"},\"provableAPI_0.6.sol\":{\"content\":\"// SPDX-License-Identifier: --ðŸ¥º--\\npragma solidity =0.7.0;\\n\\ninterface ProvableI {\\n\\n    function cbAddress() external returns (address _cbAddress);\\n    function setProofType(byte _proofType) external;\\n    function setCustomGasPrice(uint _gasPrice) external;\\n    function getPrice(string calldata _datasource) external returns (uint _dsprice);\\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\\n    function getPrice(string calldata _datasource, uint _gasLimit)  external returns (uint _dsprice);\\n    function queryN(uint _timestamp, string calldata _datasource, bytes calldata _argN) external payable returns (bytes32 _id);\\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\\n    function query2(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2) external payable returns (bytes32 _id);\\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\\n}\\n\\ninterface OracleAddrResolverI {\\n    function getAddress() external returns (address _address);\\n}\\n\\nlibrary Buffer {\\n\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    function init(buffer memory _buf, uint _capacity) internal pure {\\n        uint capacity = _capacity;\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        _buf.capacity = capacity; // Allocate space for the buffer data\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(_buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(ptr, capacity))\\n        }\\n    }\\n\\n    function resize(buffer memory _buf, uint _capacity) private pure {\\n        bytes memory oldbuf = _buf.buf;\\n        init(_buf, _capacity);\\n        append(_buf, oldbuf);\\n    }\\n\\n    function max(uint _a, uint _b) private pure returns (uint _max) {\\n        if (_a \\u003e _b) {\\n            return _a;\\n        }\\n        return _b;\\n    }\\n    /**\\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\\n      *      would exceed the capacity of the buffer.\\n      * @param _buf The buffer to append to.\\n      * @param _data The data to append.\\n      * @return _buffer The original buffer.\\n      *\\n      */\\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\\n        if (_data.length + _buf.buf.length \\u003e _buf.capacity) {\\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\\n        }\\n        uint dest;\\n        uint src;\\n        uint len = _data.length;\\n        assembly {\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\n            let buflen := mload(bufptr) // Length of existing buffer data\\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\\n            src := add(_data, 32)\\n        }\\n        for(; len \\u003e= 32; len -= 32) { // Copy word-length chunks while possible\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n        return _buf;\\n    }\\n    /**\\n      *\\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n      * exceed the capacity of the buffer.\\n      * @param _buf The buffer to append to.\\n      * @param _data The data to append.\\n      *\\n      */\\n    function append(buffer memory _buf, uint8 _data) internal pure {\\n        if (_buf.buf.length + 1 \\u003e _buf.capacity) {\\n            resize(_buf, _buf.capacity * 2);\\n        }\\n        assembly {\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\n            let buflen := mload(bufptr) // Length of existing buffer data\\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\\n            mstore8(dest, _data)\\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\\n        }\\n    }\\n    /**\\n      *\\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n      * exceed the capacity of the buffer.\\n      * @param _buf The buffer to append to.\\n      * @param _data The data to append.\\n      * @return _buffer The original buffer.\\n      *\\n      */\\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\\n        if (_len + _buf.buf.length \\u003e _buf.capacity) {\\n            resize(_buf, max(_buf.capacity, _len) * 2);\\n        }\\n        uint mask = 256 ** _len - 1;\\n        assembly {\\n            let bufptr := mload(_buf) // Memory address of the buffer data\\n            let buflen := mload(bufptr) // Length of existing buffer data\\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\\n        }\\n        return _buf;\\n    }\\n}\\n\\nlibrary CBOR {\\n\\n    using Buffer for Buffer.buffer;\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\\n        if (_value \\u003c= 23) {\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | _value));\\n        } else if (_value \\u003c= 0xFF) {\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 24));\\n            _buf.appendInt(_value, 1);\\n        } else if (_value \\u003c= 0xFFFF) {\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 25));\\n            _buf.appendInt(_value, 2);\\n        } else if (_value \\u003c= 0xFFFFFFFF) {\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 26));\\n            _buf.appendInt(_value, 4);\\n        } else if (_value \\u003c= 0xFFFFFFFFFFFFFFFF) {\\n            _buf.append(uint8((_major \\u003c\\u003c 5) | 27));\\n            _buf.appendInt(_value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\\n        _buf.append(uint8((_major \\u003c\\u003c 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\\n    }\\n\\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\\n        if (_value \\u003e= 0) {\\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\\n        } else {\\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\\n        _buf.append(_value);\\n    }\\n\\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\\n        _buf.append(bytes(_value));\\n    }\\n\\n    function startArray(Buffer.buffer memory _buf) internal pure {\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory _buf) internal pure {\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory _buf) internal pure {\\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n/*\\nEnd solidity-cborutils\\n*/\\ncontract usingProvable {\\n\\n    using CBOR for Buffer.buffer;\\n\\n    ProvableI provable;\\n    OracleAddrResolverI OAR;\\n\\n    uint constant day = 60 * 60 * 24;\\n    uint constant week = 60 * 60 * 24 * 7;\\n    uint constant month = 60 * 60 * 24 * 30;\\n\\n    byte constant proofType_NONE = 0x00;\\n    byte constant proofType_Ledger = 0x30;\\n    byte constant proofType_Native = 0xF0;\\n    byte constant proofStorage_IPFS = 0x01;\\n    byte constant proofType_Android = 0x40;\\n    byte constant proofType_TLSNotary = 0x10;\\n\\n    string provable_network_name;\\n    uint8 constant networkID_auto = 0;\\n    uint8 constant networkID_morden = 2;\\n    uint8 constant networkID_mainnet = 1;\\n    uint8 constant networkID_testnet = 2;\\n    uint8 constant networkID_consensys = 161;\\n\\n    mapping(bytes32 =\\u003e bytes32) provable_randomDS_args;\\n    mapping(bytes32 =\\u003e bool) provable_randomDS_sessionKeysHashVerified;\\n\\n    modifier provableAPI {\\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\\n            provable_setNetwork(networkID_auto);\\n        }\\n        if (address(provable) != OAR.getAddress()) {\\n            provable = ProvableI(OAR.getAddress());\\n        }\\n        _;\\n    }\\n\\n    modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\\n        // RandomDS Proof Step 1: The prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        require((_proof[0] == \\\"L\\\") \\u0026\\u0026 (_proof[1] == \\\"P\\\") \\u0026\\u0026 (uint8(_proof[2]) == uint8(1)));\\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\\n        require(proofVerified);\\n        _;\\n    }\\n\\n    function provable_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\\n      _networkID; // NOTE: Silence the warning and remain backwards compatible\\n      return provable_setNetwork();\\n    }\\n\\n    function provable_setNetworkName(string memory _network_name) internal {\\n        provable_network_name = _network_name;\\n    }\\n\\n    function provable_getNetworkName() internal view returns (string memory _networkName) {\\n        return provable_network_name;\\n    }\\n\\n    function provable_setNetwork() internal returns (bool _networkSet) {\\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) \\u003e 0) { //mainnet\\n            OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\\n            provable_setNetworkName(\\\"eth_mainnet\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) \\u003e 0) { //ropsten testnet\\n            OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\\n            provable_setNetworkName(\\\"eth_ropsten3\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) \\u003e 0) { //kovan testnet\\n            OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\\n            provable_setNetworkName(\\\"eth_kovan\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) \\u003e 0) { //rinkeby testnet\\n            OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\\n            provable_setNetworkName(\\\"eth_rinkeby\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) \\u003e 0) { //goerli testnet\\n            OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\\n            provable_setNetworkName(\\\"eth_goerli\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) \\u003e 0) { //ethereum-bridge\\n            OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\\n            return true;\\n        }\\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) \\u003e 0) { //ether.camp ide\\n            OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\\n            return true;\\n        }\\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) \\u003e 0) { //browser-solidity\\n            OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev The following `__callback` functions are just placeholders ideally\\n     *      meant to be defined in child contract when proofs are used.\\n     *      The function bodies simply silence compiler warnings.\\n     */\\n    function __callback(bytes32 _myid, string memory _result) virtual public {\\n        __callback(_myid, _result, new bytes(0));\\n    }\\n\\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) virtual public {\\n      _myid; _result; _proof;\\n      provable_randomDS_args[bytes32(0)] = bytes32(0);\\n    }\\n\\n    function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {\\n        return provable.getPrice(_datasource);\\n    }\\n\\n    function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {\\n        return provable.getPrice(_datasource, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query{value: price}(0, _datasource, _arg);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query{value: price}(_timestamp, _datasource, _arg);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource,_gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query_withGasLimit{value: price}(_timestamp, _datasource, _arg, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n           return 0; // Unexpectedly high price\\n        }\\n        return provable.query_withGasLimit{value: price}(0, _datasource, _arg, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query2{value: price}(0, _datasource, _arg1, _arg2);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query2{value: price}(_timestamp, _datasource, _arg1, _arg2);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query2_withGasLimit{value: price}(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        return provable.query2_withGasLimit{value: price}(0, _datasource, _arg1, _arg2, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = stra2cbor(_argN);\\n        return provable.queryN{value: price}(0, _datasource, args);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = stra2cbor(_argN);\\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = stra2cbor(_argN);\\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = stra2cbor(_argN);\\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = ba2cbor(_argN);\\n        return provable.queryN{value: price}(0, _datasource, args);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource);\\n        if (price \\u003e 1 ether + tx.gasprice * 200000) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = ba2cbor(_argN);\\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = ba2cbor(_argN);\\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        uint price = provable.getPrice(_datasource, _gasLimit);\\n        if (price \\u003e 1 ether + tx.gasprice * _gasLimit) {\\n            return 0; // Unexpectedly high price\\n        }\\n        bytes memory args = ba2cbor(_argN);\\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = _args[0];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_timestamp, _datasource, dynargs);\\n    }\\n\\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = _args[0];\\n        dynargs[1] = _args[1];\\n        dynargs[2] = _args[2];\\n        dynargs[3] = _args[3];\\n        dynargs[4] = _args[4];\\n        return provable_query(_datasource, dynargs, _gasLimit);\\n    }\\n\\n    function provable_setProof(byte _proofP) provableAPI internal {\\n        return provable.setProofType(_proofP);\\n    }\\n\\n\\n    function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {\\n        return provable.cbAddress();\\n    }\\n\\n    function getCodeSize(address _addr) view internal returns (uint _size) {\\n        assembly {\\n            _size := extcodesize(_addr)\\n        }\\n    }\\n\\n    function provable_setCustomGasPrice(uint _gasPrice) provableAPI internal {\\n        return provable.setCustomGasPrice(_gasPrice);\\n    }\\n\\n    function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {\\n        return provable.randomDS_getSessionPubKeyHash();\\n    }\\n\\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\\n        bytes memory tmp = bytes(_a);\\n        uint160 iaddr = 0;\\n        uint160 b1;\\n        uint160 b2;\\n        for (uint i = 2; i \\u003c 2 + 2 * 20; i += 2) {\\n            iaddr *= 256;\\n            b1 = uint160(uint8(tmp[i]));\\n            b2 = uint160(uint8(tmp[i + 1]));\\n            if ((b1 \\u003e= 97) \\u0026\\u0026 (b1 \\u003c= 102)) {\\n                b1 -= 87;\\n            } else if ((b1 \\u003e= 65) \\u0026\\u0026 (b1 \\u003c= 70)) {\\n                b1 -= 55;\\n            } else if ((b1 \\u003e= 48) \\u0026\\u0026 (b1 \\u003c= 57)) {\\n                b1 -= 48;\\n            }\\n            if ((b2 \\u003e= 97) \\u0026\\u0026 (b2 \\u003c= 102)) {\\n                b2 -= 87;\\n            } else if ((b2 \\u003e= 65) \\u0026\\u0026 (b2 \\u003c= 70)) {\\n                b2 -= 55;\\n            } else if ((b2 \\u003e= 48) \\u0026\\u0026 (b2 \\u003c= 57)) {\\n                b2 -= 48;\\n            }\\n            iaddr += (b1 * 16 + b2);\\n        }\\n        return address(iaddr);\\n    }\\n\\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\\n        bytes memory a = bytes(_a);\\n        bytes memory b = bytes(_b);\\n        uint minLength = a.length;\\n        if (b.length \\u003c minLength) {\\n            minLength = b.length;\\n        }\\n        for (uint i = 0; i \\u003c minLength; i ++) {\\n            if (a[i] \\u003c b[i]) {\\n                return -1;\\n            } else if (a[i] \\u003e b[i]) {\\n                return 1;\\n            }\\n        }\\n        if (a.length \\u003c b.length) {\\n            return -1;\\n        } else if (a.length \\u003e b.length) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\\n        bytes memory h = bytes(_haystack);\\n        bytes memory n = bytes(_needle);\\n        if (h.length \\u003c 1 || n.length \\u003c 1 || (n.length \\u003e h.length)) {\\n            return -1;\\n        } else if (h.length \\u003e (2 ** 128 - 1)) {\\n            return -1;\\n        } else {\\n            uint subindex = 0;\\n            for (uint i = 0; i \\u003c h.length; i++) {\\n                if (h[i] == n[0]) {\\n                    subindex = 1;\\n                    while(subindex \\u003c n.length \\u0026\\u0026 (i + subindex) \\u003c h.length \\u0026\\u0026 h[i + subindex] == n[subindex]) {\\n                        subindex++;\\n                    }\\n                    if (subindex == n.length) {\\n                        return int(i);\\n                    }\\n                }\\n            }\\n            return -1;\\n        }\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n        bytes memory babcde = bytes(abcde);\\n        uint k = 0;\\n        uint i = 0;\\n        for (i = 0; i \\u003c _ba.length; i++) {\\n            babcde[k++] = _ba[i];\\n        }\\n        for (i = 0; i \\u003c _bb.length; i++) {\\n            babcde[k++] = _bb[i];\\n        }\\n        for (i = 0; i \\u003c _bc.length; i++) {\\n            babcde[k++] = _bc[i];\\n        }\\n        for (i = 0; i \\u003c _bd.length; i++) {\\n            babcde[k++] = _bd[i];\\n        }\\n        for (i = 0; i \\u003c _be.length; i++) {\\n            babcde[k++] = _be[i];\\n        }\\n        return string(babcde);\\n    }\\n\\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\\n        return safeParseInt(_a, 0);\\n    }\\n\\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\n        bytes memory bresult = bytes(_a);\\n        uint mint = 0;\\n        bool decimals = false;\\n        for (uint i = 0; i \\u003c bresult.length; i++) {\\n            if ((uint(uint8(bresult[i])) \\u003e= 48) \\u0026\\u0026 (uint(uint8(bresult[i])) \\u003c= 57)) {\\n                if (decimals) {\\n                   if (_b == 0) break;\\n                    else _b--;\\n                }\\n                mint *= 10;\\n                mint += uint(uint8(bresult[i])) - 48;\\n            } else if (uint(uint8(bresult[i])) == 46) {\\n                require(!decimals, \\u0027More than one decimal encountered in string!\\u0027);\\n                decimals = true;\\n            } else {\\n                revert(\\\"Non-numeral character encountered in string!\\\");\\n            }\\n        }\\n        if (_b \\u003e 0) {\\n            mint *= 10 ** _b;\\n        }\\n        return mint;\\n    }\\n\\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\\n        return parseInt(_a, 0);\\n    }\\n\\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\n        bytes memory bresult = bytes(_a);\\n        uint mint = 0;\\n        bool decimals = false;\\n        for (uint i = 0; i \\u003c bresult.length; i++) {\\n            if ((uint(uint8(bresult[i])) \\u003e= 48) \\u0026\\u0026 (uint(uint8(bresult[i])) \\u003c= 57)) {\\n                if (decimals) {\\n                   if (_b == 0) {\\n                       break;\\n                   } else {\\n                       _b--;\\n                   }\\n                }\\n                mint *= 10;\\n                mint += uint(uint8(bresult[i])) - 48;\\n            } else if (uint(uint8(bresult[i])) == 46) {\\n                decimals = true;\\n            }\\n        }\\n        if (_b \\u003e 0) {\\n            mint *= 10 ** _b;\\n        }\\n        return mint;\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\\n        Buffer.buffer memory buf;\\n        Buffer.init(buf, 1024);\\n        buf.startArray();\\n        for (uint i = 0; i \\u003c _arr.length; i++) {\\n            buf.encodeString(_arr[i]);\\n        }\\n        buf.endSequence();\\n        return buf.buf;\\n    }\\n\\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\\n        Buffer.buffer memory buf;\\n        Buffer.init(buf, 1024);\\n        buf.startArray();\\n        for (uint i = 0; i \\u003c _arr.length; i++) {\\n            buf.encodeBytes(_arr[i]);\\n        }\\n        buf.endSequence();\\n        return buf.buf;\\n    }\\n\\n    function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\\n        require((_nbytes \\u003e 0) \\u0026\\u0026 (_nbytes \\u003c= 32));\\n        _delay *= 10; // Convert from seconds to ledger timer ticks\\n        bytes memory nbytes = new bytes(1);\\n        nbytes[0] = byte(uint8(_nbytes));\\n        bytes memory unonce = new bytes(32);\\n        bytes memory sessionKeyHash = new bytes(32);\\n        bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();\\n        assembly {\\n            mstore(unonce, 0x20)\\n            /*\\n             The following variables can be relaxed.\\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\\n             for an idea on how to override and replace commit hash variables.\\n            */\\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number(), 1)), xor(coinbase(), timestamp())))\\n            mstore(sessionKeyHash, 0x20)\\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\\n        }\\n        bytes memory delay = new bytes(32);\\n        assembly {\\n            mstore(add(delay, 0x20), _delay)\\n        }\\n        bytes memory delay_bytes8 = new bytes(8);\\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\\n        bytes32 queryId = provable_query(\\\"random\\\", args, _customGasLimit);\\n        bytes memory delay_bytes8_left = new bytes(8);\\n        assembly {\\n            let x := mload(add(delay_bytes8, 0x20))\\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\\n        }\\n        provable_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\\n        return queryId;\\n    }\\n\\n    function provable_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\\n        provable_randomDS_args[_queryId] = _commitment;\\n    }\\n\\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\\n        bool sigok;\\n        address signer;\\n        bytes32 sigr;\\n        bytes32 sigs;\\n        bytes memory sigr_ = new bytes(32);\\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\\n        bytes memory sigs_ = new bytes(32);\\n        offset += 32 + 2;\\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\\n        assembly {\\n            sigr := mload(add(sigr_, 32))\\n            sigs := mload(add(sigs_, 32))\\n        }\\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\\n            return true;\\n        } else {\\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\\n        }\\n    }\\n\\n    function provable_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\\n        bool sigok;\\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\\n        bytes memory appkey1_pubkey = new bytes(64);\\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\\n        tosign2[0] = byte(uint8(1)); //role\\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\\n        bytes memory CODEHASH = hex\\\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\\\";\\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\\n        if (!sigok) {\\n            return false;\\n        }\\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\\n        bytes memory LEDGERKEY = hex\\\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\\\";\\n        bytes memory tosign3 = new bytes(1 + 65);\\n        tosign3[0] = 0xFE;\\n        copyBytes(_proof, 3, 65, tosign3, 1);\\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\\n        return sigok;\\n    }\\n\\n    function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\\n        // Random DS Proof Step 1: The prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        if ((_proof[0] != \\\"L\\\") || (_proof[1] != \\\"P\\\") || (uint8(_proof[2]) != uint8(1))) {\\n            return 1;\\n        }\\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\\n        if (!proofVerified) {\\n            return 2;\\n        }\\n        return 0;\\n    }\\n\\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\\n        bool match_ = true;\\n        require(_prefix.length == _nRandomBytes);\\n        for (uint256 i = 0; i\\u003c _nRandomBytes; i++) {\\n            if (_content[i] != _prefix[i]) {\\n                match_ = false;\\n            }\\n        }\\n        return match_;\\n    }\\n\\n    function provable_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\\n        bytes memory keyhash = new bytes(32);\\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\\n            return false;\\n        }\\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if \\u0027_result\\u0027 is the _prefix of sha256(sig1)\\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\\n            return false;\\n        }\\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\\n        // This is to verify that the computed args match with the ones specified in the query.\\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\\n        bytes memory sessionPubkey = new bytes(64);\\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\\n        if (provable_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\\n            delete provable_randomDS_args[_queryId];\\n        } else return false;\\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\\n            return false;\\n        }\\n        // Verify if sessionPubkeyHash was verified already, if not.. let\\u0027s do it!\\n        if (!provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\\n            provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = provable_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\\n        }\\n        return provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\\n    }\\n    /*\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    */\\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\\n        uint minLength = _length + _toOffset;\\n        require(_to.length \\u003e= minLength); // Buffer too small. Should be a better way?\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint j = 32 + _toOffset;\\n        while (i \\u003c (32 + _fromOffset + _length)) {\\n            assembly {\\n                let tmp := mload(add(_from, i))\\n                mstore(add(_to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n        return _to;\\n    }\\n    /*\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n     Duplicate Solidity\\u0027s ecrecover, but catching the CALL return value\\n    */\\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\\n        /*\\n         We do our own memory management here. Solidity uses memory offset\\n         0x40 to store the current end of memory. We write past it (as\\n         writes are memory extensions), but don\\u0027t update the offset so\\n         Solidity will reuse it. The memory used here is only needed for\\n         this context.\\n         FIXME: inline assembly can\\u0027t access return values\\n        */\\n        bool ret;\\n        address addr;\\n        assembly {\\n            let size := mload(0x40)\\n            mstore(size, _hash)\\n            mstore(add(size, 32), _v)\\n            mstore(add(size, 64), _r)\\n            mstore(add(size, 96), _s)\\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\\n            addr := mload(size)\\n        }\\n        return (ret, addr);\\n    }\\n    /*\\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    */\\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        if (_sig.length != 65) {\\n            return (false, address(0));\\n        }\\n        /*\\n         The signature format is a compact form of:\\n           {bytes32 r}{bytes32 s}{uint8 v}\\n         Compact means, uint8 is not padded to 32 bytes.\\n        */\\n        assembly {\\n            r := mload(add(_sig, 32))\\n            s := mload(add(_sig, 64))\\n            /*\\n             Here we are loading the last 32 bytes. We exploit the fact that\\n             \\u0027mload\\u0027 will pad with zeroes if we overread.\\n             There is no \\u0027mload8\\u0027 to do this, but that would be nicer.\\n            */\\n            v := byte(0, mload(add(_sig, 96)))\\n            /*\\n              Alternative solution:\\n              \\u0027byte\\u0027 is not working due to the Solidity parser, so lets\\n              use the second best option, \\u0027and\\u0027\\n              v := and(mload(add(_sig, 65)), 255)\\n            */\\n        }\\n        /*\\n         albeit non-transactional signatures are not specified by the YP, one would expect it\\n         to match the YP range of [27, 28]\\n         geth uses [0, 1] and some clients have followed. This might change, see:\\n         https://github.com/ethereum/go-ethereum/issues/2053\\n        */\\n        if (v \\u003c 27) {\\n            v += 27;\\n        }\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\n            return (false, address(0));\\n        }\\n        return safer_ecrecover(_hash, v, r, s);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSupply\",\"type\":\"uint256\"}],\"name\":\"GeneratedRandomSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staticSupply\",\"type\":\"uint256\"}],\"name\":\"GeneratedStaticSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentDay\",\"type\":\"uint256\"}],\"name\":\"GeneratingRandomSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"investmentDay\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"GenerationStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewProvableQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TFReservation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"UniSwapResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"$getMyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUND_SPONSOR\",\"outputs\":[{\"internalType\":\"contract RefundSponsorI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TF_CONTRACT\",\"outputs\":[{\"internalType\":\"contract ITFToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_PAIR\",\"outputs\":[{\"internalType\":\"contract UniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract UniswapRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_myid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentTFDay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundedDays\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"$fundedDays\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"generatedDays\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"generationDayBuffer\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"generationTimeout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"preparedReferrals\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTransferTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeiContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_investmentDay\",\"type\":\"uint64\"}],\"name\":\"generateSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentsOnAllDays\",\"outputs\":[{\"internalType\":\"uint256[31]\",\"name\":\"_allInvestments\",\"type\":\"uint256[31]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorAccountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorsOnAllDays\",\"outputs\":[{\"internalType\":\"uint256[31]\",\"name\":\"_allInvestors\",\"type\":\"uint256[31]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentDay\",\"type\":\"uint256\"}],\"name\":\"investorsOnDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentDay\",\"type\":\"uint256\"}],\"name\":\"myInvestmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myInvestmentAmountAllDays\",\"outputs\":[{\"internalType\":\"uint256[31]\",\"name\":\"_myAllDays\",\"type\":\"uint256[31]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTotalInvestmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTotalInvestmentTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investmentDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorBatchFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorBatchTo\",\"type\":\"uint256\"}],\"name\":\"payoutInvestmentDayBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"payoutInvestorAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"payoutReferralAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralBatchFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralBatchTo\",\"type\":\"uint256\"}],\"name\":\"payoutReferralBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralBatchFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralBatchTo\",\"type\":\"uint256\"}],\"name\":\"prepareReferralBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralAccountCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_succesor\",\"type\":\"address\"}],\"name\":\"requestRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestTeamFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_investmentDays\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"reserveTF\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_investmentDays\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"reserveTFWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"}],\"name\":\"resetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyOnAllDays\",\"outputs\":[{\"internalType\":\"uint256[31]\",\"name\":\"_allSupply\",\"type\":\"uint256[31]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueInvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueInvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LiquidityTransformer","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b4a9b92177b779f0a9fca859b785b67251ae7d800000000000000000000000033124590856dc35b58c458c1859104b31466a6ba","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a5402d4e128e900d554b988a895df56cc85db0f95ad2e7e16b15d4b08d5cb2f"}]}