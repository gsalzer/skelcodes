{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * A highly limited supply utility token of Gear Protocol\r\n * \r\n *  Official Website: \r\n *  https://www.GearProtocol.com\r\n */\r\n\r\n\r\n\r\npragma solidity ^0.4.25;\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ApproveAndCallFallBack \r\n{\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\r\n}\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract GearAutomatic is ERC20Detailed \r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    \r\n    string constant tokenName = \"GearAutomatic\";\r\n    string constant tokenSymbol = \"AUTO\"; \r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 0;\r\n  \r\n    address public contractOwner;\r\n\r\n    uint256 public fullUnitsFarmed_total = 0;\r\n    uint256 public totalFarmers = 0;\r\n    mapping (address => bool) public isFarming;\r\n\r\n    uint256 _totalRewardsPerUnit = 0;\r\n    mapping (address => uint256) private _totalRewardsPerUnit_positions;\r\n    mapping (address => uint256) private _savedRewards;\r\n    \r\n    //these addresses won't be affected by network fee,ie liquidity pools\r\n    mapping(address => bool) public whitelistFrom;\r\n    mapping(address => bool) public whitelistTo;\r\n    event WhitelistFrom(address _addr, bool _whitelisted);\r\n    event WhitelistTo(address _addr, bool _whitelisted);\r\n    \r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n    {\r\n        contractOwner = msg.sender;\r\n        _supply(msg.sender, 10000*(10**uint256(tokenDecimals)));\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner, \"only owner\");\r\n        _;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return balances[owner];\r\n    }\r\n    \r\n    function fullUnitsFarmed(address owner) external view returns (uint256) \r\n    {\r\n        return isFarming[owner] ? toFullUnits(balances[owner]) : 0;\r\n    }\r\n    \r\n    function toFullUnits(uint256 valueWithDecimals) public pure returns (uint256) \r\n    {\r\n        return valueWithDecimals.div(10**uint256(tokenDecimals));\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) \r\n    {\r\n        return allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) \r\n    {\r\n        _executeTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public\r\n    {\r\n        require(receivers.length == values.length);\r\n        for(uint256 i = 0; i < receivers.length; i++)\r\n            _executeTransfer(msg.sender, receivers[i], values[i]);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= allowed[from][msg.sender]);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        _executeTransfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function _supply(address account, uint256 value) internal onlyOwner\r\n    {\r\n        require(value != 0);\r\n        \r\n        uint256 initalBalance = balances[account];\r\n        uint256 newBalance = initalBalance.add(value);\r\n        \r\n        balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.add(value);\r\n        \r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    function burn(uint256 value) external \r\n    {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n\r\n    function _burn(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        require(value <= balances[account]);\r\n        \r\n        uint256 initalBalance = balances[account];\r\n        uint256 newBalance = initalBalance.sub(value);\r\n        \r\n        balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.sub(value);\r\n        \r\n        //update full units farmed\r\n        if(isFarming[account])\r\n        {\r\n            uint256 fus_total = fullUnitsFarmed_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance));\r\n            fus_total = fus_total.add(toFullUnits(newBalance));\r\n            fullUnitsFarmed_total = fus_total;\r\n        }\r\n        \r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    /*\r\n    *   transfer incurring a fee of 5%\r\n    *   the receiver gets 95% of the sent value\r\n    *   5% is distributed to AUTO farming pool\r\n    */\r\n    function _executeTransfer(address from, address to, uint256 value) private\r\n    {\r\n        require(value <= balances[from]);\r\n        require(to != address(0) && to != from);\r\n        require(to != address(this));\r\n        \r\n        \r\n        //Update sender and receivers rewards - changing balances will change rewards shares\r\n        updateRewardsFor(from);\r\n        updateRewardsFor(to);\r\n        \r\n        uint256 fivePercent = 0;\r\n        \r\n        if(!whitelistFrom[from] && !whitelistTo[to])\r\n        {\r\n            fivePercent = value.mul(5).div(100);\r\n            \r\n            \r\n            //set a minimum  rate to prevent no-fee-txs due to precision loss\r\n            if(fivePercent == 0 && value > 0)\r\n                fivePercent = 1;\r\n        }\r\n            \r\n        uint256 initalBalance_from = balances[from];\r\n        balances[from] = initalBalance_from.sub(value);\r\n        \r\n        value = value.sub(fivePercent);\r\n        \r\n        uint256 initalBalance_to = balances[to];\r\n        balances[to] = initalBalance_to.add(value);\r\n        \r\n        emit Transfer(from, to, value);\r\n         \r\n        //update full units farmed\r\n        uint256 fus_total = fullUnitsFarmed_total;\r\n        if(isFarming[from])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_from));\r\n            fus_total = fus_total.add(toFullUnits(balances[from]));\r\n        }\r\n        if(isFarming[to])\r\n        {\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_to));\r\n            fus_total = fus_total.add(toFullUnits(balances[to]));\r\n        }\r\n        \r\n        if(isFarming[from] && balances[from] < 1)\r\n        {\r\n             updateRewardsFor(from);\r\n             isFarming[from] = false;\r\n             fullUnitsFarmed_total = fullUnitsFarmed_total.sub(toFullUnits(balances[from]));\r\n             totalFarmers = totalFarmers.sub(1); \r\n        }\r\n        \r\n        \r\n        fullUnitsFarmed_total = fus_total;\r\n        \r\n        if(fus_total > 0)\r\n        {\r\n            uint256 farmingRewards = fivePercent;\r\n            //split up to rewards per unit in farm\r\n            uint256 rewardsPerUnit = farmingRewards.div(fus_total);\r\n            //apply reward\r\n            _totalRewardsPerUnit = _totalRewardsPerUnit.add(rewardsPerUnit);\r\n            balances[address(this)] = balances[address(this)].add(farmingRewards);\r\n            if(farmingRewards > 0)\r\n                emit Transfer(msg.sender, address(this), farmingRewards);\r\n        }\r\n        \r\n    }\r\n    \r\n    //catch up with the current total harvest rewards. This needs to be done before an addresses balance is changed\r\n    function updateRewardsFor(address farmer) private\r\n    {\r\n        _savedRewards[farmer] = viewHarvest(farmer);\r\n        _totalRewardsPerUnit_positions[farmer] = _totalRewardsPerUnit;\r\n    }\r\n    \r\n    //get all harvest rewards that have not been claimed yet\r\n    function viewHarvest(address farmer) public view returns (uint256)\r\n    {\r\n        if(!isFarming[farmer])\r\n            return _savedRewards[farmer];\r\n        uint256 newRewardsPerUnit = _totalRewardsPerUnit.sub(_totalRewardsPerUnit_positions[farmer]);\r\n        \r\n        uint256 newRewards = newRewardsPerUnit.mul(toFullUnits(balances[farmer]));\r\n        return _savedRewards[farmer].add(newRewards);\r\n    }\r\n    \r\n    //pay out unclaimed harvest rewards\r\n    function harvest() public\r\n    {\r\n        updateRewardsFor(msg.sender);\r\n        uint256 rewards = _savedRewards[msg.sender];\r\n        require(rewards > 0 && rewards <= balances[address(this)]);\r\n        \r\n        _savedRewards[msg.sender] = 0;\r\n        \r\n         uint256 fivePercent = 0;\r\n         uint256 reward = 0;\r\n        \r\n        fivePercent = rewards.mul(5).div(100);\r\n        \r\n       //set a minimum  rate to prevent no harvest-fee-txs due to precision loss\r\n            if(fivePercent == 0 && rewards > 0) {\r\n                fivePercent = 1;\r\n        }\r\n        \r\n        reward = rewards.sub(fivePercent);\r\n        \r\n        uint256 initalBalance_farmer = balances[msg.sender];\r\n        uint256 newBalance_farmer = initalBalance_farmer.add(reward);\r\n        \r\n        //update full units farmed\r\n        if(isFarming[msg.sender])\r\n        {\r\n            uint256 fus_total = fullUnitsFarmed_total;\r\n            fus_total = fus_total.sub(toFullUnits(initalBalance_farmer));\r\n            fus_total = fus_total.add(toFullUnits(newBalance_farmer));\r\n            fullUnitsFarmed_total = fus_total;\r\n        }\r\n        \r\n        //transfer\r\n        balances[address(this)] = balances[address(this)].sub(rewards);\r\n        balances[msg.sender] = newBalance_farmer;\r\n        balances[contractOwner] = balances[contractOwner].add(fivePercent);\r\n        emit Transfer(address(this), msg.sender, rewards);\r\n        emit Transfer(address(this), contractOwner, fivePercent);\r\n    }\r\n    \r\n    function enableFarming() public { _enableFarming(msg.sender);  }\r\n    \r\n    function disableFarming() public { _disableFarming(msg.sender); }\r\n    \r\n    function enableFarmingFor(address farmer) public onlyOwner { _enableFarming(farmer); }\r\n    \r\n    function disableFarmingFor(address farmer) public onlyOwner { _disableFarming(farmer); }\r\n    \r\n    //enable farming for target address\r\n    function _enableFarming(address farmer) private\r\n    {\r\n        require(!isFarming[farmer]);\r\n        updateRewardsFor(farmer);\r\n        isFarming[farmer] = true;\r\n        fullUnitsFarmed_total = fullUnitsFarmed_total.add(toFullUnits(balances[farmer]));\r\n        totalFarmers = totalFarmers.add(1);\r\n    }\r\n    \r\n    //disable farming for target address\r\n    function _disableFarming(address farmer) private\r\n    {\r\n        require(isFarming[farmer]);\r\n        updateRewardsFor(farmer);\r\n        isFarming[farmer] = false;\r\n        fullUnitsFarmed_total = fullUnitsFarmed_total.sub(toFullUnits(balances[farmer]));\r\n        totalFarmers = totalFarmers.sub(1);\r\n    }\r\n    \r\n    //withdraw tokens that were sent to this contract by accident\r\n    function withdrawERC20Tokens(address tokenAddress, uint256 amount) public onlyOwner\r\n    {\r\n        require(tokenAddress != address(this));\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    //no fees if receiver is whitelisted\r\n    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\r\n        emit WhitelistTo(_addr, _whitelisted);\r\n        whitelistTo[_addr] = _whitelisted;\r\n    }\r\n\r\n    //no fees if sender is whitelisted\r\n    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\r\n        emit WhitelistFrom(_addr, _whitelisted);\r\n        whitelistFrom[_addr] = _whitelisted;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"fullUnitsFarmed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"disableFarmingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fullUnitsFarmed_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFarmers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFarming\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"enableFarmingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueWithDecimals\",\"type\":\"uint256\"}],\"name\":\"toFullUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"viewHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GearAutomatic","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fcc9120e83f085b9e60919b125a49e184e45b194366da508216c2beb29d8c1e4"}]}