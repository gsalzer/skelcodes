{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    //GOVERNANCE\r\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\r\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\r\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\r\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\r\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\r\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\r\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\r\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\r\n\r\n    // POOL\r\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\r\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\r\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\r\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\r\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\r\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\r\n    \r\n    //NOT GOVERNANCE\r\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\r\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\r\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\r\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\r\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\r\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\r\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\r\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\r\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\r\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\r\n\r\n    //POOL\r\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\r\n\r\n    //wallet\r\n    bytes32 public constant TEAM = bytes32('team'); \r\n    bytes32 public constant SPARE = bytes32('spare');\r\n    bytes32 public constant REWARD = bytes32('reward');\r\n}\r\n\r\n// Root file: contracts/AAAAQuery.sol\r\n\r\npragma solidity >=0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"contracts/libraries/SafeMath.sol\";\r\n// import 'contracts/modules/ConfigNames.sol';\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ninterface IConfig {\r\n    function developer() external view returns (address);\r\n    function platform() external view returns (address);\r\n    function factory() external view returns (address);\r\n    function mint() external view returns (address);\r\n    function token() external view returns (address);\r\n    function developPercent() external view returns (uint);\r\n    function wallet() external view returns (address);\r\n    function base() external view returns (address);\r\n    function share() external view returns (address);\r\n    function params(bytes32 key) external view returns(uint);\r\n    function setParameter(uint[] calldata _keys, uint[] calldata _values) external;\r\n    function setPoolParameter(address _pool, bytes32 _key, uint _value) external;\r\n    function getValue(bytes32 _key) external view returns (uint);\r\n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint);\r\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint);\r\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint);\r\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns(uint toAmount);\r\n}\r\n\r\ninterface IAAAAFactory {\r\n    function countPools() external view returns(uint);\r\n    function countBallots() external view returns(uint);\r\n    function allBallots(uint index) external view returns(address);\r\n    function allPools(uint index) external view returns(address);\r\n    function isPool(address addr) external view returns(bool);\r\n    function getPool(address lend, address collateral) external view returns(address);\r\n}\r\n\r\ninterface IAAAAPlatform {\r\n    function getRepayAmount(address _lendToken, address _collateralToken, uint amountCollateral, address from) external view returns(uint);\r\n    function getMaximumBorrowAmount(address _lendToken, address _collateralToken, uint amountCollateral) external view returns(uint amountBorrow);\r\n}\r\n\r\ninterface IAAAAPool {\r\n    function supplyToken() external view returns(address);\r\n    function collateralToken() external view returns(address);\r\n    function totalBorrow() external view returns(uint);\r\n    function totalPledge() external view returns(uint);\r\n    function remainSupply() external view returns(uint);\r\n    function getInterests() external view returns(uint);\r\n    function numberBorrowers() external view returns(uint);\r\n    function borrowerList(uint index) external view returns(address);\r\n    function borrows(address user) external view returns(uint,uint,uint,uint,uint);\r\n    function getRepayAmount(uint amountCollateral, address from) external view returns(uint);\r\n    function liquidationHistory(address user, uint index) external view returns(uint,uint,uint);\r\n    function liquidationHistoryLength(address user) external view returns(uint);\r\n    function interestPerBorrow() external view returns(uint);\r\n    function lastInterestUpdate() external view returns(uint);\r\n    function interestPerSupply() external view returns(uint);\r\n    function supplys(address user) external view returns(uint,uint,uint,uint,uint);\r\n}\r\n\r\ninterface IAAAAMint {\r\n    function maxSupply() external view returns(uint);\r\n    function mintCumulation() external view returns(uint);\r\n    function takeLendWithAddress(address user) external view returns (uint);\r\n    function takeBorrowWithAddress(address user) external view returns (uint);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IAAAABallot {\r\n    struct Voter {\r\n        uint weight; // weight is accumulated by delegation\r\n        bool voted;  // if true, that person already voted\r\n        uint vote;   // index of the voted proposal 0 YES, 1 NO\r\n        bool claimed; // already claimed reward\r\n    }\r\n    function name() external view returns(bytes32);\r\n    function subject() external view returns(string memory);\r\n    function content() external view returns(string memory);\r\n    function createdBlock() external view returns(uint);\r\n    function createdTime() external view returns(uint);\r\n    function creator() external view returns(address);\r\n    function proposals(uint index) external view returns(uint);\r\n    function end() external view returns (bool);\r\n    function pass() external view returns (bool);\r\n    function expire() external view returns (bool);\r\n    function pool() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function total() external view returns (uint);\r\n    function reward() external view returns (uint);\r\n    function voters(address user) external view returns (Voter memory);\r\n}\r\n\r\ncontract AAAAQuery {\r\n    address public owner;\r\n    address public config;\r\n    using SafeMath for uint;\r\n\r\n    struct PoolInfoStruct {\r\n        address pair;\r\n        uint totalBorrow;\r\n        uint totalPledge;\r\n        uint totalPledgeValue;\r\n        uint remainSupply;\r\n        uint totalSupplyValue;\r\n        uint borrowInterests;\r\n        uint supplyInterests;\r\n        address supplyToken;\r\n        address collateralToken;\r\n        uint8 supplyTokenDecimals;\r\n        uint8 collateralTokenDecimals;\r\n        string lpToken0Symbol;\r\n        string lpToken1Symbol;\r\n        string supplyTokenSymbol;\r\n        string collateralTokenSymbol;\r\n    }\r\n\r\n    struct TokenStruct {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint balance;\r\n        uint totalSupply;\r\n        uint allowance;\r\n    }\r\n\r\n    struct MintTokenStruct {\r\n        uint mintCumulation;\r\n        uint maxSupply;\r\n        uint takeBorrow;\r\n        uint takeLend;\r\n    }\r\n\r\n     struct SupplyInfo {\r\n        uint amountSupply;\r\n        uint interestSettled;\r\n        uint liquidationSettled;\r\n\r\n        uint interests;\r\n        uint liquidation;\r\n    }\r\n\r\n    struct BorrowInfo {\r\n        address user;\r\n        uint amountCollateral;\r\n        uint interestSettled;\r\n        uint amountBorrow;\r\n        uint interests;\r\n    }\r\n\r\n    struct LiquidationStruct {\r\n        address pool;\r\n        address user;\r\n        uint amountCollateral;\r\n        uint expectedRepay;\r\n        uint liquidationRate;\r\n    }\r\n\r\n    struct PoolConfigInfo {\r\n        uint baseInterests;\r\n        uint marketFrenzy;\r\n        uint pledgeRate;\r\n        uint pledgePrice;\r\n        uint liquidationRate;   \r\n    }\r\n\r\n    struct UserLiquidationStruct {\r\n        uint amountCollateral;\r\n        uint liquidationAmount;\r\n        uint timestamp;\r\n    }\r\n\r\n    struct BallotStruct {\r\n        address ballot;\r\n        bytes32 name;\r\n        address pool; // pool address or address(0)\r\n        address creator;\r\n        uint currentValue;\r\n        uint    value;\r\n        uint    createdBlock;\r\n        uint    createdTime;\r\n        uint    total;\r\n        uint    reward;\r\n        uint YES;\r\n        uint NO;\r\n        uint weight;\r\n        bool voted;\r\n        uint voteIndex;\r\n        bool claimed;\r\n        uint myReward;\r\n        bool end;\r\n        bool pass;\r\n        bool expire;\r\n        string  subject;\r\n        string  content;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setupConfig (address _config) external {\r\n        require(msg.sender == owner, \"FORBIDDEN\");\r\n        config = _config;\r\n    }\r\n        \r\n    function getPoolInterests(address pair) public view returns (uint, uint) {\r\n        uint borrowInterests = IAAAAPool(pair).getInterests();\r\n        uint supplyInterests = 0;\r\n        uint borrow = IAAAAPool(pair).totalBorrow();\r\n        uint total = borrow + IAAAAPool(pair).remainSupply();\r\n        if(total > 0) {\r\n            supplyInterests = borrowInterests * borrow / total;\r\n        }\r\n        return (supplyInterests, borrowInterests);\r\n    }\r\n\r\n    function getPoolInfoByIndex(uint index) public view returns (PoolInfoStruct memory info) {\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\r\n        if (index >= count || count == 0) {\r\n            return info;\r\n        }\r\n        address pair = IAAAAFactory(IConfig(config).factory()).allPools(index);\r\n        return getPoolInfo(pair);\r\n    }\r\n\r\n    function getPoolInfoByTokens(address lend, address collateral) public view returns (PoolInfoStruct memory info) {\r\n        address pair = IAAAAFactory(IConfig(config).factory()).getPool(lend, collateral);\r\n        return getPoolInfo(pair);\r\n    }\r\n    \r\n    function getPoolInfo(address pair) public view returns (PoolInfoStruct memory info) {\r\n        if(!IAAAAFactory(IConfig(config).factory()).isPool(pair)) {\r\n            return info;\r\n        }\r\n        info.pair = pair;\r\n        info.totalBorrow = IAAAAPool(pair).totalBorrow();\r\n        info.totalPledge = IAAAAPool(pair).totalPledge();\r\n        info.remainSupply = IAAAAPool(pair).remainSupply();\r\n        info.borrowInterests = IAAAAPool(pair).getInterests();\r\n        info.supplyToken = IAAAAPool(pair).supplyToken();\r\n        info.collateralToken = IAAAAPool(pair).collateralToken();\r\n        info.supplyTokenDecimals = IERC20(info.supplyToken).decimals();\r\n        info.collateralTokenDecimals = IERC20(info.collateralToken).decimals();\r\n        info.supplyTokenSymbol = IERC20(info.supplyToken).symbol();\r\n        info.collateralTokenSymbol = IERC20(info.collateralToken).symbol();\r\n        address lpToken0 = ISwapPair(info.collateralToken).token0();\r\n        address lpToken1 = ISwapPair(info.collateralToken).token1();\r\n        info.lpToken0Symbol = IERC20(lpToken0).symbol();\r\n        info.lpToken1Symbol = IERC20(lpToken1).symbol();\r\n\r\n        info.totalSupplyValue = IConfig(config).convertTokenAmount(info.supplyToken, IConfig(config).base(), info.remainSupply.add(info.totalBorrow));\r\n        info.totalPledgeValue = IConfig(config).convertTokenAmount(info.collateralToken, IConfig(config).base(), info.totalPledge);\r\n\r\n        if(info.totalBorrow + info.remainSupply > 0) {\r\n            info.supplyInterests = info.borrowInterests * info.totalBorrow / (info.totalBorrow + info.remainSupply);\r\n        }\r\n    }\r\n\r\n    function queryPoolList() public view returns (PoolInfoStruct[] memory list) {\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\r\n        if(count > 0) {\r\n            list = new PoolInfoStruct[](count);\r\n            for(uint i = 0;i < count;i++) {\r\n                list[i] = getPoolInfoByIndex(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function queryPoolListByToken(address token) public view returns (PoolInfoStruct[] memory list) {\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countPools();\r\n        uint outCount = 0;\r\n        if(count > 0) {\r\n            for(uint i = 0;i < count;i++) {\r\n                PoolInfoStruct memory info = getPoolInfoByIndex(i);\r\n                if(info.supplyToken == token) {\r\n                    outCount++;\r\n                }\r\n            }\r\n            if(outCount == 0) return list;\r\n            list = new PoolInfoStruct[](outCount);\r\n            uint index = 0;\r\n            for(uint i = 0;i < count;i++) {\r\n                PoolInfoStruct memory info = getPoolInfoByIndex(i);\r\n                if(info.supplyToken == token) {\r\n                    list[index] = info;\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    function queryToken(address user, address spender, address token) public view returns (TokenStruct memory info) {\r\n        info.name = IERC20(token).name();\r\n        info.symbol = IERC20(token).symbol();\r\n        info.decimals = IERC20(token).decimals();\r\n        info.balance = IERC20(token).balanceOf(user);\r\n        info.totalSupply = IERC20(token).totalSupply();\r\n        if(spender != user) {\r\n            info.allowance = IERC20(token).allowance(user, spender);\r\n        }\r\n    }\r\n\r\n    function queryTokenList(address user, address spender, address[] memory tokens) public view returns (TokenStruct[] memory token_list) {\r\n        uint count = tokens.length;\r\n        if(count > 0) {\r\n            token_list = new TokenStruct[](count);\r\n            for(uint i = 0;i < count;i++) {\r\n                token_list[i] = queryToken(user, spender, tokens[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function queryMintToken(address user) public view returns (MintTokenStruct memory info) {\r\n        address token = IConfig(config).mint();\r\n        info.mintCumulation = IAAAAMint(token).mintCumulation();\r\n        info.maxSupply = IAAAAMint(token).maxSupply();\r\n        info.takeBorrow = IAAAAMint(token).takeBorrowWithAddress(user);\r\n        info.takeLend = IAAAAMint(token).takeLendWithAddress(user);\r\n    }\r\n\r\n    function getBorrowInfo(address _pair, address _user) public view returns (BorrowInfo memory info){\r\n        (, uint amountCollateral, uint interestSettled, uint amountBorrow, uint interests) = IAAAAPool(_pair).borrows(_user);\r\n        info = BorrowInfo(_user, amountCollateral, interestSettled, amountBorrow, interests);\r\n    }\r\n\r\n    function iterateBorrowInfo(address _pair, uint _start, uint _end) public view returns (BorrowInfo[] memory list){\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        uint count = IAAAAPool(_pair).numberBorrowers();\r\n        if (_end > count) _end = count;\r\n        count = _end - _start;\r\n        list = new BorrowInfo[](count);\r\n        uint index = 0;\r\n        for(uint i = _start; i < _end; i++) {\r\n            address user = IAAAAPool(_pair).borrowerList(i);\r\n            list[index] = getBorrowInfo(_pair, user);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    function iteratePairLiquidationInfo(address _pair, uint _start, uint _end) public view returns (\r\n        LiquidationStruct[] memory list)\r\n    {\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        address supplyToken = IAAAAPool(_pair).supplyToken();\r\n        address collateralToken = IAAAAPool(_pair).collateralToken();\r\n\r\n        uint count = IAAAAPool(_pair).numberBorrowers();\r\n        if (_end > count) _end = count;\r\n        count = _end - _start;\r\n        uint index = 0;\r\n        uint liquidationRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\r\n        uint pledgeRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\r\n        \r\n        for(uint i = _start; i < _end; i++) {\r\n            address user = IAAAAPool(_pair).borrowerList(i);\r\n            (, uint amountCollateral, , , ) = IAAAAPool(_pair).borrows(user);\r\n            uint pledgeAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, amountCollateral);\r\n            uint repayAmount = IAAAAPlatform(IConfig(config).platform()).getRepayAmount(supplyToken, collateralToken, amountCollateral, user);\r\n            if(repayAmount > pledgeAmount.mul(pledgeRate).div(1e18).mul(liquidationRate).div(1e18))\r\n            {\r\n                index++;\r\n            }\r\n        }\r\n        list = new LiquidationStruct[](index);\r\n        index = 0;\r\n        for(uint i = _start; i < _end; i++) {\r\n            address user = IAAAAPool(_pair).borrowerList(i);\r\n            (, uint amountCollateral, , , ) = IAAAAPool(_pair).borrows(user);\r\n            uint pledgeAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, amountCollateral);\r\n            uint repayAmount = IAAAAPlatform(IConfig(config).platform()).getRepayAmount(supplyToken, collateralToken, amountCollateral, user);\r\n            if(repayAmount > pledgeAmount.mul(pledgeRate).div(1e18).mul(liquidationRate).div(1e18))\r\n            {\r\n                list[index].user             = user;\r\n                list[index].pool             = _pair;\r\n                list[index].amountCollateral = amountCollateral;\r\n                list[index].expectedRepay    = repayAmount;\r\n                list[index].liquidationRate  = liquidationRate;\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPoolConf(address _pair) public view returns (PoolConfigInfo memory info) {\r\n        info.baseInterests = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_BASE_INTERESTS);\r\n        info.marketFrenzy = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_MARKET_FRENZY);\r\n        info.pledgeRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PLEDGE_RATE);\r\n        info.pledgePrice = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_PRICE);\r\n        info.liquidationRate = IConfig(config).getPoolValue(_pair, ConfigNames.POOL_LIQUIDATION_RATE);\r\n    }\r\n\r\n    function queryUserLiquidationList(address _pair, address _user) public view returns (UserLiquidationStruct[] memory list) {\r\n        uint count = IAAAAPool(_pair).liquidationHistoryLength(_user);\r\n        if(count > 0) {\r\n            list = new UserLiquidationStruct[](count);\r\n            for(uint i = 0;i < count; i++) {\r\n                (uint amountCollateral, uint liquidationAmount, uint timestamp) = IAAAAPool(_pair).liquidationHistory(_user, i);\r\n                list[i] = UserLiquidationStruct(amountCollateral, liquidationAmount, timestamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSwapPairReserve(address _pair) public view returns (address token0, address token1, uint8 decimals0, uint8 decimals1, uint reserve0, uint reserve1) {\r\n        token0 = ISwapPair(_pair).token0();\r\n        token1 = ISwapPair(_pair).token1();\r\n        decimals0 = IERC20(token0).decimals();\r\n        decimals1 = IERC20(token1).decimals();\r\n        (reserve0, reserve1, ) = ISwapPair(_pair).getReserves();\r\n    }\r\n\r\n    function getCanMaxBorrowAmount(address _pair, address _user, uint _blocks) public view returns(uint) {\r\n        (, uint amountCollateral, uint interestSettled, uint amountBorrow, uint interests) = IAAAAPool(_pair).borrows(_user);\r\n        uint maxBorrow = IAAAAPlatform(IConfig(config).platform()).getMaximumBorrowAmount(IAAAAPool(_pair).supplyToken(), IAAAAPool(_pair).collateralToken(), amountCollateral);\r\n        uint poolBalance = IERC20(IAAAAPool(_pair).supplyToken()).balanceOf(_pair);\r\n\r\n        uint _interestPerBorrow = IAAAAPool(_pair).interestPerBorrow().add(IAAAAPool(_pair).getInterests().mul(block.number+_blocks - IAAAAPool(_pair).lastInterestUpdate()));\r\n        uint _totalInterest = interests.add(_interestPerBorrow.mul(amountBorrow).div(1e18).sub(interestSettled));\r\n\r\n        uint repayInterest = amountCollateral == 0 ? 0 : _totalInterest.mul(amountCollateral).div(amountCollateral);\r\n        uint repayAmount = amountCollateral == 0 ? 0 : amountBorrow.mul(amountCollateral).div(amountCollateral).add(repayInterest);\r\n\r\n        uint result = maxBorrow.sub(repayAmount);\r\n        if(poolBalance < result) {\r\n            result = poolBalance;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function canReinvest(address _pair, address _user) public view returns(bool) {\r\n        uint interestPerSupply = IAAAAPool(_pair).interestPerSupply();\r\n        (uint amountSupply, uint interestSettled, , uint interests, ) = IAAAAPool(_pair).supplys(_user);\r\n        uint remainSupply = IAAAAPool(_pair).remainSupply();\r\n        uint platformShare = IConfig(config).params(ConfigNames.INTEREST_PLATFORM_SHARE);\r\n\r\n        uint curInterests = interestPerSupply.mul(amountSupply).div(1e18).sub(interestSettled);\r\n        interests = interests.add(curInterests);\r\n        uint reinvestAmount = interests.mul(platformShare).div(1e18);\r\n  \r\n        if(reinvestAmount < remainSupply) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getBallotInfo(address _ballot, address _user) public view returns (BallotStruct memory proposal){\r\n        proposal.ballot = _ballot;\r\n        proposal.name = IAAAABallot(_ballot).name();\r\n        proposal.creator = IAAAABallot(_ballot).creator();\r\n        proposal.subject = IAAAABallot(_ballot).subject();\r\n        proposal.content = IAAAABallot(_ballot).content();\r\n        proposal.createdTime = IAAAABallot(_ballot).createdTime();\r\n        proposal.createdBlock = IAAAABallot(_ballot).createdBlock();\r\n        proposal.end = IAAAABallot(_ballot).end();\r\n        proposal.pass = IAAAABallot(_ballot).pass();\r\n        proposal.expire = IAAAABallot(_ballot).expire();\r\n        proposal.YES = IAAAABallot(_ballot).proposals(0);\r\n        proposal.NO = IAAAABallot(_ballot).proposals(1);\r\n        proposal.reward = IAAAABallot(_ballot).reward();\r\n        proposal.voted = IAAAABallot(_ballot).voters(_user).voted;\r\n        proposal.voteIndex = IAAAABallot(_ballot).voters(_user).vote;\r\n        proposal.weight = IAAAABallot(_ballot).voters(_user).weight;\r\n        proposal.claimed = IAAAABallot(_ballot).voters(_user).claimed;\r\n        proposal.value = IAAAABallot(_ballot).value();\r\n        proposal.total = IAAAABallot(_ballot).total();\r\n        proposal.pool = IAAAABallot(_ballot).pool();\r\n        if(proposal.pool != address(0)) {\r\n            proposal.currentValue = IConfig(config).getPoolValue(proposal.pool, proposal.name);\r\n        } else {\r\n            proposal.currentValue = IConfig(config).getValue(proposal.name);\r\n        }\r\n\r\n        if(proposal.total > 0) {\r\n           proposal.myReward = proposal.reward * proposal.weight / proposal.total;\r\n        }\r\n    }\r\n\r\n\r\n    function iterateBallotList(uint _start, uint _end) public view returns (BallotStruct[] memory ballots){\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"INVAID_PARAMTERS\");\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countBallots();\r\n        if (_end > count) _end = count;\r\n        count = _end - _start;\r\n        ballots = new BallotStruct[](count);\r\n        if (count == 0) return ballots;\r\n        uint index = 0;\r\n        for(uint i = _start;i < _end;i++) {\r\n            address ballot = IAAAAFactory(IConfig(config).factory()).allBallots(i);\r\n            ballots[index] = getBallotInfo(ballot, msg.sender);\r\n            index++;\r\n        }\r\n        return ballots;\r\n    }\r\n\r\n    function iterateReverseBallotList(uint _start, uint _end) public view returns (BallotStruct[] memory ballots){\r\n        require(_end <= _start && _end >= 0 && _start >= 0, \"INVAID_PARAMTERS\");\r\n        uint count = IAAAAFactory(IConfig(config).factory()).countBallots();\r\n        if (_start > count) _start = count;\r\n        count = _start - _end;\r\n        ballots = new BallotStruct[](count);\r\n        if (count == 0) return ballots;\r\n        uint index = 0;\r\n        for(uint i = _end;i < _start; i++) {\r\n            uint j = _start - i -1;\r\n            address ballot = IAAAAFactory(IConfig(config).factory()).allBallots(j);\r\n            ballots[index] = getBallotInfo(ballot, msg.sender);\r\n            index++;\r\n        }\r\n        return ballots;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBallotInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"myReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expire\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.BallotStruct\",\"name\":\"proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSettled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interests\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.BorrowInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"getCanMaxBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getPoolConf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFrenzy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.PoolConfigInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledgeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyInterests\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supplyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.PoolInfoStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPoolInfoByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledgeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyInterests\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supplyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.PoolInfoStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getPoolInfoByTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledgeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyInterests\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supplyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.PoolInfoStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPoolInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getSwapPairReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateBallotList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"myReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expire\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.BallotStruct[]\",\"name\":\"ballots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateBorrowInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSettled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interests\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.BorrowInfo[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iteratePairLiquidationInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.LiquidationStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateReverseBallotList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"YES\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"voteIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"myReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"end\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expire\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.BallotStruct[]\",\"name\":\"ballots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"queryMintToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintCumulation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeLend\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.MintTokenStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledgeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyInterests\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supplyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.PoolInfoStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"queryPoolListByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPledgeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyInterests\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"supplyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"collateralTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"lpToken0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpToken1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateralTokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct AAAAQuery.PoolInfoStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"queryToken\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.TokenStruct\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"queryTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.TokenStruct[]\",\"name\":\"token_list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryUserLiquidationList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AAAAQuery.UserLiquidationStruct[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AAAAQuery","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed2079029ad8a1edffcf9b562d77ea07a6be47cbb432bb217e5ca94cfae74f0d"}]}