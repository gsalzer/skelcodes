{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/access/PuulAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract PuulAccessControl is AccessControl {\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n  bytes32 constant ROLE_MEMBER = keccak256(\\\"ROLE_MEMBER\\\");\\n  bytes32 constant ROLE_MINTER = keccak256(\\\"ROLE_MINTER\\\");\\n  bytes32 constant ROLE_EXTRACT = keccak256(\\\"ROLE_EXTRACT\\\");\\n  bytes32 constant ROLE_HARVESTER = keccak256(\\\"ROLE_HARVESTER\\\");\\n  \\n  constructor () public {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(ROLE_ADMIN, msg.sender), \\\"!admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyMinter() {\\n    require(hasRole(ROLE_MINTER, msg.sender), \\\"!minter\\\");\\n    _;\\n  }\\n\\n  modifier onlyExtract() {\\n    require(hasRole(ROLE_EXTRACT, msg.sender), \\\"!extract\\\");\\n    _;\\n  }\\n\\n  modifier onlyHarvester() {\\n    require(hasRole(ROLE_HARVESTER, msg.sender), \\\"!harvester\\\");\\n    _;\\n  }\\n\\n  modifier onlyDefaultAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"!default_admin\\\");\\n    _;\\n  }\\n\\n  function _setup(bytes32 role, address user) internal {\\n    if (msg.sender != user) {\\n      _setupRole(role, user);\\n      revokeRole(role, msg.sender);\\n    }\\n  }\\n\\n  function _setupDefaultAdmin(address admin) internal {\\n    _setup(DEFAULT_ADMIN_ROLE, admin);\\n  }\\n\\n  function _setupAdmin(address admin) internal {\\n    _setup(ROLE_ADMIN, admin);\\n  }\\n\\n  function setupDefaultAdmin(address admin) external onlyDefaultAdmin {\\n    _setupDefaultAdmin(admin);\\n  }\\n\\n  function setupAdmin(address admin) external onlyAdmin {\\n    _setupAdmin(admin);\\n  }\\n\\n  function setupMinter(address admin) external onlyMinter {\\n    _setup(ROLE_MINTER, admin);\\n  }\\n\\n  function setupExtract(address admin) external onlyExtract {\\n    _setup(ROLE_EXTRACT, admin);\\n  }\\n\\n  function setupHarvester(address admin) external onlyHarvester {\\n    _setup(ROLE_HARVESTER, admin);\\n  }\\n\\n  function _tokenInUse(address /*token*/) virtual internal view returns(bool) {\\n    return false;\\n  }\\n\\n  function extractStuckTokens(address token, address to) onlyExtract external {\\n    require(token != address(0) && to != address(0));\\n    // require(!_tokenInUse(token)); // TODO add back after beta\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    if (balance > 0)\\n      IERC20(token).safeTransfer(to, balance);\\n  }\\n\\n}\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/access/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport './PuulAccessControl.sol';\\n\\ncontract Whitelist is PuulAccessControl {\\n  using Address for address;\\n\\n  bool _startWhitelist;\\n  mapping (address => bool) _whitelist;\\n  mapping (address => bool) _blacklist;\\n\\n  constructor () public {}\\n\\n  modifier onlyWhitelist() {\\n    require(!_blacklist[msg.sender] && (!_startWhitelist || _whitelist[msg.sender]), \\\"!whitelist\\\");\\n    _;\\n  }\\n\\n  function stopWhitelist() onlyHarvester external {\\n    _startWhitelist = false;\\n  }\\n\\n  function startWhitelist() onlyHarvester external {\\n    _startWhitelist = true;\\n  }\\n\\n  function addWhitelist(address c) onlyHarvester external {\\n    require(c != address(0), '!contract');\\n    _whitelist[c] = true;\\n  }\\n  \\n  function removeWhitelist(address c) onlyHarvester external {\\n    require(c != address(0), '!contract');\\n    _whitelist[c] = false;\\n  }\\n  \\n  function addBlacklist(address c) onlyHarvester external {\\n    require(c != address(0), '!contract');\\n    _blacklist[c] = true;\\n  }\\n  \\n  function removeBlacklist(address c) onlyHarvester external {\\n    require(c != address(0), '!contract');\\n    _blacklist[c] = false;\\n  }\\n  \\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/farm/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\ninterface IFarm {\\n  function earn() external;\\n  function harvest() external;\\n  function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/farm/IFarmRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\ninterface IFarmRewards {\\n  function rewards() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/fees/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport '../access/PuulAccessControl.sol';\\nimport \\\"../utils/Console.sol\\\";\\n\\ncontract Fees is PuulAccessControl, ReentrancyGuard {\\n  using SafeMath for uint256;\\n\\n  address _currency;\\n  address _reward;\\n  uint256 _rewardFee;\\n  address _withdrawal;\\n  uint256 _withdrawalFee;\\n  address _helper;\\n\\n  uint256 constant FEE_BASE = 10000;\\n  \\n  constructor (address helper, address withdrawal, uint256 withdrawalFee, address reward, uint256 rewardFee) public {\\n    _helper = helper;\\n    _reward = reward;\\n    _rewardFee = rewardFee;\\n    _withdrawal = withdrawal;\\n    _withdrawalFee = withdrawalFee;\\n\\n    _setupRole(ROLE_ADMIN, msg.sender);\\n  }\\n\\n  function setupRoles(address admin) onlyDefaultAdmin external {\\n    _setupAdmin(admin);\\n    _setupDefaultAdmin(admin);\\n  }\\n\\n  function currency() external view returns (address) {\\n    return _currency;\\n  }\\n\\n  function helper() external view returns (address) {\\n    return _helper;\\n  }\\n\\n  function reward() external view returns (address) {\\n    return _reward;\\n  }\\n\\n  function withdrawal() external view returns (address) {\\n    return _withdrawal;\\n  }\\n\\n  function setHelper(address help) onlyAdmin external {\\n    _helper = help;\\n  }\\n\\n  function setCurrency(address curr) onlyAdmin external {\\n    _currency = curr;\\n  }\\n\\n  function setRewardFee(address to, uint256 fee) onlyAdmin external {\\n    _reward = to;\\n    _rewardFee = fee;\\n  }\\n\\n  function setWithdrawalFee(address to, uint256 fee) onlyAdmin external {\\n    _withdrawal = to;\\n    _withdrawalFee = fee;\\n  }\\n\\n  function _calcFee(uint256 amount, uint256 fee) internal pure returns (uint256) {\\n    return amount.mul(fee).div(FEE_BASE);\\n  }\\n\\n  function _calcWithdrawalFee(uint256 amount) internal view returns (uint256) {\\n    return _withdrawalFee == 0 || _withdrawal == address(0) ? 0 : _calcFee(amount, _withdrawalFee);\\n  }\\n\\n  function _calcRewardFee(uint256 amount) internal view returns (uint256) {\\n    return _rewardFee == 0 || _reward == address(0) ? 0 : _calcFee(amount, _rewardFee);\\n  }\\n\\n  function getRewardFee() external view returns (uint256) {\\n    return _rewardFee;\\n  }\\n\\n  function rewardFee(uint256 amount) external view returns (uint256) {\\n    return _calcRewardFee(amount);\\n  }\\n\\n  function getWithdrawalFee() external view returns (uint256) {\\n    return _withdrawalFee;\\n  }\\n\\n  function withdrawalFee(uint256 amount) external view returns (uint256) {\\n    return _calcWithdrawalFee(amount);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/EarnPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"../utils/Console.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../fees/Fees.sol\\\";\\nimport '../farm/IFarm.sol';\\nimport './IPoolFarm.sol';\\nimport './PuulRewards.sol';\\nimport './Limits.sol';\\n\\ncontract EarnPool is ERC20, ReentrancyGuard, PuulRewards, IPoolFarm {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using Arrays for uint256[];\\n  using SafeERC20 for IERC20;\\n\\n  Fees _fees;\\n  Limits _limits;\\n  mapping (IERC20 => uint256) _rewardExtra;\\n  mapping (IERC20 => uint256) _accSharePrices;\\n  mapping (address => mapping (IERC20 => uint256)) _owedRewards;\\n  mapping (address => mapping (IERC20 => uint256)) _debtSharePrices;\\n\\n  bool _allowAll;\\n  bool _initialized;\\n\\n  uint256 precision = 1e18;\\n  uint256 constant MIN_PRICE_PER_SHARE = 10;\\n\\n  modifier onlyMember() {\\n    isMember(msg.sender);\\n    _;\\n  }\\n\\n  modifier onlyWithdrawal() {\\n    require((address(_fees) != address(0) && msg.sender == _fees.withdrawal()), '!with');\\n    _;\\n  }\\n\\n  function isMember(address member) internal view {\\n    require(member != address(0) && (_allowAll == true || hasRole(ROLE_MEMBER, member)), '!mem');\\n  }\\n\\n  constructor (string memory name, string memory symbol, bool allowAll, address fees) public ERC20(name, symbol) {\\n    if (fees != address(0))\\n      _fees = Fees(fees);\\n    _allowAll = allowAll;\\n    _setupRole(ROLE_ADMIN, msg.sender);\\n    _setupRole(ROLE_HARVESTER, msg.sender);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  function setupRoles(address defaultAdmin, address admin, address extract, address harvester, address minter) onlyDefaultAdmin external {\\n    _setupRoles(defaultAdmin, admin, extract, harvester, minter);\\n  }\\n\\n  function _setupRoles(address defaultAdmin, address admin, address extract, address harvester, address minter) internal {\\n    _setup(ROLE_EXTRACT, extract);\\n    _setup(ROLE_MINTER, minter);\\n    _setup(ROLE_HARVESTER, harvester);\\n    _setupAdmin(admin);\\n    _setupDefaultAdmin(defaultAdmin);\\n  }\\n\\n  function mint(address to, uint256 amount) external onlyMinter {\\n    _mint(to, amount);\\n  }\\n\\n  function addMember(address member) onlyAdmin external {\\n    _setupRole(ROLE_MEMBER, member);\\n  }\\n\\n  function getFees() external view returns(address) {\\n    return address(_fees);\\n  }\\n\\n  function setFees(address fees) onlyMinter external {\\n    _fees = Fees(fees);\\n  }\\n\\n  function setLimits(address limits) onlyAdmin external {\\n    _limits = Limits(limits);\\n  }\\n\\n  function getLimits() external view returns(address) {\\n    return address(_limits);\\n  }\\n\\n  function initialize() onlyAdmin nonReentrant external returns(bool success) {\\n    if (_initialized) return false;\\n    _initialized = _initialize();\\n    return _initialized;\\n  }\\n\\n  function _initialize() virtual internal returns(bool) {\\n    return true;\\n  }\\n\\n  function earn() onlyHarvester nonReentrant virtual external {\\n    _earn();\\n  }\\n\\n  function unearn() onlyHarvester nonReentrant virtual external {}\\n\\n  function harvest() onlyHarvester nonReentrant virtual external {\\n    _harvest();\\n    _earn();\\n  }\\n\\n  function harvestOnly() onlyHarvester nonReentrant virtual external {\\n    _harvest();\\n  }\\n\\n  function _earn() virtual internal { }\\n  function _unearn(uint256 amount) virtual internal { }\\n\\n  /* Trying out function parameters for a functional map */\\n  function mapToken(IERC20[] storage self, function (IERC20) view returns (uint256) f) internal view returns (uint256[] memory r) {\\n    uint256 len = self.length;\\n    r = new uint[](len);\\n    for (uint i = 0; i < len; i++) {\\n      r[i] = f(self[i]);\\n    }\\n  }\\n\\n  function balanceOfToken(IERC20 token) internal view returns (uint256) {\\n    return token.balanceOf(address(this));\\n  }\\n\\n  function _harvest() internal virtual {\\n    uint256[] memory prev = mapToken(_rewards, balanceOfToken);\\n    _harvestRewards();\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      uint256 tokenSupply = token.balanceOf(address(this)).sub(prev[i], 'tokenSupply<0');\\n      _rewardTotals[token] = _rewardTotals[token].add(tokenSupply);\\n      _updateRewardSharePrice(token, tokenSupply);\\n    }\\n  }\\n\\n  function _updateRewardSharePrice(IERC20 token, uint256 tokenSupply) internal {\\n    uint256 supply = totalSupply();\\n    uint256 extra = _rewardExtra[token];\\n    if (extra > 0) {\\n      tokenSupply = tokenSupply.add(extra);\\n      _rewardExtra[token] = 0;\\n    }\\n    if (tokenSupply == 0) return; // Nothing to do\\n    uint256 pricePerShare = supply > 0 ? (tokenSupply * precision).div(supply) : 0;\\n    if (pricePerShare < MIN_PRICE_PER_SHARE) {\\n      pricePerShare = 0;\\n    }\\n    _accSharePrices[token] = pricePerShare.add(_accSharePrices[token]);\\n    if (pricePerShare == 0) {\\n      _rewardExtra[token] = tokenSupply.add(_rewardExtra[token]);\\n    } else {\\n      uint256 rounded = pricePerShare.mul(supply).div(precision);\\n      if (rounded < tokenSupply) {\\n        _rewardExtra[token] = _rewardExtra[token].add(tokenSupply - rounded);\\n      }\\n    }\\n  }\\n\\n  function owedRewards() external view returns(uint256[] memory rewards) {\\n    rewards = new uint256[](_rewards.length);\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[msg.sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      rewards[i] = owed[token];\\n    }\\n  }\\n\\n  function getPendingRewards(address sender) onlyHarvester external view returns(uint256[] memory totals) {\\n    totals = _pendingRewards(sender);\\n  }\\n\\n  function pendingRewards() external view returns(uint256[] memory totals) {\\n    totals = _pendingRewards(msg.sender);\\n  }\\n\\n  function _pendingRewards(address sender) internal view returns(uint256[] memory totals) {\\n    uint256 amount = balanceOf(sender);\\n    totals = new uint256[](_rewards.length);\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      totals[i] = owed[_rewards[i]];\\n    }\\n    mapping (IERC20 => uint256) storage debt = _debtSharePrices[sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      uint256 debtSharePrice = debt[token];\\n      uint256 currentSharePrice = _accSharePrices[token];\\n      totals[i] += ((currentSharePrice - debtSharePrice) * amount).div(precision);\\n    }\\n  }\\n\\n  function addReward(address token) onlyAdmin external override virtual {\\n    if (_addReward(token)) {\\n      uint256 tokenSupply = IERC20(token).balanceOf(address(this));\\n      _updateRewardSharePrice(IERC20(token), tokenSupply);\\n    }\\n  }\\n\\n  function rewardAdded(address token) onlyFarm external override virtual {\\n    if (_addReward(token)) {\\n      uint256 tokenSupply = IERC20(token).balanceOf(address(this));\\n      _updateRewardSharePrice(IERC20(token), tokenSupply);\\n    }\\n  }\\n\\n  event Deposit(address, uint);\\n  function _deposit(uint256 amount) internal virtual {\\n    if (address(_limits) != address(0)) \\n      _limits.checkLimits(msg.sender, address(this), amount);\\n    _mint(msg.sender, amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  function _updateRewards(address user, uint256 amount, bool updateDebt) internal {\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[user];\\n    mapping (IERC20 => uint256) storage debt = _debtSharePrices[user];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      uint256 debtSharePrice = debt[token];\\n      uint256 currentSharePrice = _accSharePrices[token];\\n      uint256 computedSharePrice = currentSharePrice - debtSharePrice;\\n      if (computedSharePrice > 0) {\\n        uint256 rewards = computedSharePrice.mul(amount).div(precision);\\n        owed[token] = rewards.add(owed[token]);\\n      }\\n      if (updateDebt) {\\n        debt[token] = currentSharePrice;\\n      }\\n    }\\n  }\\n\\n  function _splitWithdrawal(uint256 amount, address account) internal view returns(uint256 newAmount, uint256 feeAmount, address withdrawal) {\\n    withdrawal = address(_fees) == address(0) ? address(0) : _fees.withdrawal();\\n    if (withdrawal == account) // no fees for withdrawer\\n      withdrawal = address(0);\\n    feeAmount = withdrawal == address(0) ? 0 : _fees.withdrawalFee(amount);\\n    newAmount = amount - feeAmount;\\n  }\\n\\n  function _mint(address account, uint256 amount) internal override {\\n    isMember(account);\\n    uint256 balance = _balances[account];\\n    _updateRewards(account, balance, true);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = balance.add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal override {\\n    isMember(account);\\n    _updateRewards(account, amount, false);\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"burn amount\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _burnWithFee(address account, uint256 amount) internal returns (uint256) {\\n    isMember(account);\\n    _updateRewards(account, amount, false);\\n\\n    (uint256 newAmount, uint256 feeAmount, address withdrawal) = _splitWithdrawal(amount, account);\\n    require(newAmount + feeAmount == amount, 'bad amount');\\n\\n    if (withdrawal != address(0))\\n      _updateRewards(withdrawal, _balances[withdrawal], true);\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"burn amount\\\");\\n    if (withdrawal != address(0))\\n      _balances[withdrawal] = _balances[withdrawal].add(feeAmount);\\n    _totalSupply = _totalSupply.sub(newAmount);\\n\\n    if (withdrawal != address(0))\\n      emit Transfer(address(0), withdrawal, feeAmount);\\n    emit Transfer(account, address(0), amount);\\n\\n    return newAmount;\\n  }\\n\\n  function _transfer(address sender, address recipient, uint256 amount) internal override {\\n    isMember(sender);\\n    isMember(recipient);\\n    _updateRewards(sender, amount, false);\\n\\n    (uint256 newAmount, uint256 feeAmount, address withdrawal) = _splitWithdrawal(amount, sender);\\n    require(newAmount + feeAmount == amount, 'xfer amt');\\n    _updateRewards(recipient, _balances[recipient], true);\\n    \\n    if (withdrawal != address(0)) {\\n      _updateRewards(withdrawal, _balances[withdrawal], true);\\n      _balances[withdrawal] = _balances[withdrawal].add(feeAmount);\\n    }\\n    _balances[recipient] = _balances[recipient].add(newAmount);\\n    _balances[sender] = _balances[sender].sub(amount, \\\"xfer amt\\\");\\n\\n    emit Transfer(sender, recipient, newAmount);\\n    if (withdrawal != address(0))\\n      emit Transfer(sender, withdrawal, feeAmount);\\n  }\\n\\n  function _harvestRewards() virtual internal { }\\n\\n  function updateRewards() nonReentrant external {\\n    _updateRewards(msg.sender, balanceOf(msg.sender), true);\\n  }\\n\\n  function updateAndClaim() nonReentrant external override {\\n    _updateRewards(msg.sender, balanceOf(msg.sender), true);\\n    _claim();\\n  }\\n\\n  function claim() nonReentrant external override {\\n    _claim();\\n  }\\n\\n  function _claim() internal virtual {\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[msg.sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      uint256 amount = owed[token];\\n      owed[token] = 0;\\n      safeTransferReward(token, msg.sender, amount);\\n    }\\n  }\\n\\n  event Withdraw(address, uint);\\n  function withdrawAll() nonReentrant external virtual {\\n    _withdraw(balanceOf(msg.sender));\\n  }\\n\\n  function withdraw(uint256 amount) nonReentrant external virtual {\\n    require(amount <= balanceOf(msg.sender));\\n    _withdraw(amount);\\n  }\\n\\n  function withdrawFees() onlyWithdrawal nonReentrant virtual external {\\n    _withdrawFees();\\n  }\\n\\n  function _withdrawFees() virtual internal returns(uint256 amount) {\\n    require(address(_fees) != address(0));\\n    address withdrawer = _fees.withdrawal();\\n    amount = balanceOf(withdrawer);\\n    _unearn(amount);\\n    _burn(withdrawer, amount);\\n  }\\n\\n  function _withdraw(uint256 amount) virtual internal returns(uint256 afterFee) {\\n    afterFee = _burnWithFee(msg.sender, amount);\\n    _unearn(afterFee);\\n  }\\n\\n  function _tokenInUse(address token) override virtual internal view returns(bool) {\\n    return PuulRewards._tokenInUse(token);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\ninterface IPool {\\n  function rewardAdded(address token) external;\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/IPoolFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\ninterface IPoolFarm {\\n  function claim() external;\\n  function updateAndClaim() external;\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/IPoolFarmExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\ninterface IPoolFarmExtended {\\n  function claimToToken(address token, uint256[] memory amounts, uint256[] memory mins) external;\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/Limits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport '../access/PuulAccessControl.sol';\\nimport \\\"../utils/Console.sol\\\";\\n\\ncontract Limits is PuulAccessControl, ReentrancyGuard {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  struct LimitValues {\\n    uint256 minPuul;\\n    uint256 minPuulStake;\\n    uint256 minDeposit;\\n    uint256 maxDeposit;\\n    uint256 maxTotal;\\n  }\\n\\n  address _puul;\\n  address _puulStake;\\n  mapping (address => LimitValues) _limits;\\n\\n  constructor (address puul, address puulStake) public {\\n    _puul = puul;\\n    _puulStake = puulStake;\\n    _setupRole(ROLE_ADMIN, msg.sender);\\n    _setupRole(ROLE_HARVESTER, msg.sender);\\n  }\\n\\n  function setupRoles(address defaultAdmin, address admin, address harvester) onlyDefaultAdmin external {\\n    _setupRoles(defaultAdmin, admin, harvester);\\n  }\\n\\n  function _setupRoles(address defaultAdmin, address admin, address harvester) internal {\\n    _setup(ROLE_ADMIN, admin);\\n    _setup(ROLE_HARVESTER, harvester);\\n    _setupAdmin(admin);\\n    _setupDefaultAdmin(defaultAdmin);\\n  }\\n\\n  function setMinPuul(address pool, uint256 value) onlyHarvester external {\\n    _limits[pool].minPuul = value;\\n  }\\n\\n  function setMinPuulStake(address pool, uint256 value) onlyHarvester external {\\n    _limits[pool].minPuulStake = value;\\n  }\\n\\n  function setMinDeposit(address pool, uint256 value) onlyHarvester external {\\n    _limits[pool].minDeposit = value;\\n  }\\n\\n  function setMaxDeposit(address pool, uint256 value) onlyHarvester external {\\n    _limits[pool].maxDeposit = value;\\n  }\\n\\n  function setMaxTotal(address pool, uint256 value) onlyHarvester external {\\n    _limits[pool].maxTotal = value;\\n  }\\n\\n  function checkLimits(address sender, address pool, uint256 amount) external view {\\n    uint256 minPuul = _limits[pool].minPuul;\\n    if (minPuul > 0)\\n      require(IERC20(_puul).balanceOf(sender) >= minPuul, '!minPuul');\\n    uint256 minPuulStake = _limits[pool].minPuulStake;\\n    if (minPuulStake > 0)\\n      require(IERC20(_puulStake).balanceOf(sender) >= minPuulStake, '!minPuulStake');\\n    uint256 minDeposit = _limits[pool].minDeposit;\\n    if (minDeposit > 0)\\n      require(amount >= minDeposit, '!minDeposit');\\n    uint256 maxDeposit = _limits[pool].maxDeposit;\\n    if (maxDeposit > 0)\\n      require(amount <= maxDeposit, '!maxDeposit');\\n    uint256 maxTotal = _limits[pool].maxTotal;\\n    if (maxTotal > 0)\\n      require(amount.add(IERC20(pool).totalSupply()) <= maxTotal, '!maxTotal');\\n  }\\n\\n  function getMinPuul(address pool) view external returns(uint256) {\\n    return _limits[pool].minPuul;\\n  }\\n\\n  function getMinPuulStake(address pool) view external returns(uint256) {\\n    return _limits[pool].minPuulStake;\\n  }\\n\\n  function getMinDeposit(address pool) view external returns(uint256) {\\n    return _limits[pool].minDeposit;\\n  }\\n\\n  function getMaxDeposit(address pool) view external returns(uint256) {\\n    return _limits[pool].maxDeposit;\\n  }\\n\\n  function getMaxTotal(address pool) view external returns(uint256) {\\n    return _limits[pool].maxTotal;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/PuulRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport '../access/PuulAccessControl.sol';\\nimport \\\"../utils/Console.sol\\\";\\nimport './IPool.sol';\\nimport '../farm/IFarm.sol';\\nimport '../farm/IFarmRewards.sol';\\n\\ncontract PuulRewards is PuulAccessControl, IPool, IFarmRewards {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IFarm _farm;\\n  IERC20[] _rewards;\\n  mapping (IERC20 => uint256) _rewardsMap;\\n  mapping (IERC20 => uint256) _rewardTotals;\\n\\n  modifier onlyFarm() virtual {\\n    require(msg.sender == address(_farm), '!farm');\\n    _;\\n  }\\n\\n  function _addRewards(address[] memory rewards) internal {\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      _addReward(rewards[i]);\\n    }\\n  }\\n\\n  function setFarm(address farm) onlyAdmin external {\\n    _farm = IFarm(farm);\\n    address[] memory rewards = IFarmRewards(address(_farm)).rewards();\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      _addReward(rewards[i]);\\n    }\\n  }\\n\\n  function getFarm() external view returns(address) {\\n    return address(_farm);\\n  }\\n\\n  function addReward(address token) onlyAdmin external virtual {\\n    _addReward(token);\\n  }\\n\\n  function _getRewards() internal view returns(address[] memory result) {\\n    result = new address[](_rewards.length);\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      result[i] = address(_rewards[i]);\\n    }\\n  }\\n\\n  function rewards() external view override returns(address[] memory result) {\\n    return _getRewards();\\n  }\\n\\n  function rewardAdded(address token) onlyFarm external override virtual {\\n    _addReward(token);\\n  }\\n\\n  function safeTransferReward(IERC20 reward, address dest, uint256 amount) internal returns(uint256) {\\n    // in case there is a tiny rounding error\\n    uint256 remaining = _rewardTotals[reward];\\n    if (remaining < amount)\\n      amount = remaining;\\n    _rewardTotals[reward] = remaining - amount;\\n    if (amount > 0) {\\n      uint256 bef = reward.balanceOf(dest);\\n      reward.safeTransfer(dest, amount);\\n      uint256 aft = reward.balanceOf(dest);\\n      amount = aft.sub(bef, '!reward');\\n    }\\n    return amount;\\n  }\\n\\n  function rewardTotals() onlyHarvester external view returns(uint256[] memory totals) {\\n    totals = new uint256[](_rewards.length);\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      totals[i] = _rewardTotals[_rewards[i]];\\n    }\\n  }\\n\\n  function _addReward(address token) internal returns(bool) {\\n    IERC20 erc = IERC20(token);\\n    if (_rewardsMap[erc] == 0) {\\n      _rewards.push(erc);\\n      _rewardsMap[erc] = _rewards.length;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function _tokenInUse(address token) override virtual internal view returns(bool) {\\n    return _rewardsMap[IERC20(token)] != 0;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/UniswapPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport '../protocols/uniswap-v2/interfaces/IUniswapV2Pair.sol';\\nimport '../protocols/uniswap-v2/interfaces/IUniswapV2Router02.sol';\\nimport './EarnPool.sol';\\nimport './IPoolFarmExtended.sol';\\nimport './UniswapPoolHelper.sol';\\nimport '../farm/IFarm.sol';\\nimport '../protocols/uniswap-v2/UniswapHelper.sol';\\n\\ncontract UniswapPool is EarnPool, IPoolFarmExtended {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private _token0;\\n  IERC20 private _token1;\\n  IUniswapV2Pair private _pair;\\n  UniswapHelper private _helper;\\n\\n  uint256 MAX_UINT = 2**256 - 1;\\n  uint256 MAX_SLIPPAGE = 10000;\\n\\n  constructor (string memory name, string memory symbol, address pair, bool allowAll, address fees) public EarnPool(name, symbol, allowAll, fees) {\\n    require(pair != address(0), 'pair == 0');\\n    _pair = IUniswapV2Pair(pair);\\n    _token0 = IERC20(_pair.token0());\\n    _token1 = IERC20(_pair.token1());\\n  }\\n\\n  function setHelper(address helper) onlyAdmin external {\\n    require(helper != address(0));\\n    _helper = UniswapHelper(helper);\\n  }\\n\\n  function _initialize() internal override returns(bool success) {\\n    _token0.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), 0);\\n    _token0.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), MAX_UINT);\\n    _token1.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), 0);\\n    _token1.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), MAX_UINT);\\n    return true;\\n  }\\n\\n  function getPair() external view returns (address) {\\n    return address(_pair);\\n  }\\n\\n  function depositFromToken(address token, uint256 amountA, uint256 amountB, uint256 minSwapA, uint256 minSwapB, uint256 slippageA, uint256 slippageB, uint256 slippageRemA, uint256 slippageRemB) onlyMember nonReentrant external {\\n    uint256 liquidity = UniswapPoolHelper.depositFromToken(address(_helper), token, amountA, amountB, _pair, minSwapA, minSwapB, slippageA, slippageB, slippageRemA, slippageRemB);\\n    _deposit(liquidity);\\n  }\\n\\n  function depositPair(uint256 amount0, uint256 amount1, uint256 minA, uint256 minB) onlyMember nonReentrant external {\\n    uint256 liquidity = UniswapPoolHelper.depositPair(amount0, amount1, _pair, minA, minB);\\n    _deposit(liquidity);\\n  }\\n\\n  function depositSingleSided(address token, uint256 amountA, uint256 amountB, uint256 minSwapB, uint256 slippageA, uint256 slippageB, uint256 slippageRemA, uint256 slippageRemB) onlyMember nonReentrant external {\\n    uint256 liquidity = UniswapPoolHelper.depositSingleSided(address(_helper), token, amountA, amountB, _pair, minSwapB, slippageA, slippageB, slippageRemA, slippageRemB);\\n    _deposit(liquidity);\\n  }\\n\\n  function depositLPToken(uint256 amount) onlyMember nonReentrant external {\\n    uint256 liquidity = UniswapPoolHelper.depositLPToken(_pair, amount);\\n    _deposit(liquidity);\\n  }\\n\\n  function getUsableBalance() internal view returns(uint256 balance) {\\n    balance = _pair.balanceOf(address(this));\\n  }\\n\\n  function _harvestRewards() internal override {\\n    if (address(_farm) != address(0)) {\\n      _farm.harvest();\\n    }\\n  }\\n\\n  function _earn() internal override {\\n    if (address(_farm) != address(0)) {\\n      uint256 amount = getUsableBalance();\\n      _pair.transfer(address(_farm), amount);\\n      _farm.earn();\\n    }\\n  }\\n\\n  function unearn() onlyHarvester nonReentrant override virtual external {\\n    _unearnAll();\\n  }\\n\\n  function liquidate() onlyHarvester nonReentrant virtual external {\\n    _unearnAll();\\n    // TODO\\n  }\\n\\n  function _unearnAll() virtual internal {\\n    _unearn(totalSupply().sub(getUsableBalance(), 'unearn<0'));\\n\\n  }\\n\\n  function _unearn(uint256 amount) internal override {\\n    if (address(_farm) != address(0)) {\\n      uint256 balance = getUsableBalance();\\n      if (amount > balance) {\\n        _farm.withdraw(amount - balance);\\n      }\\n    }\\n  }\\n\\n  function claimToToken(address token, uint[] memory amounts, uint[] memory mins) external override nonReentrant {\\n    _updateRewards(msg.sender, balanceOf(msg.sender), true);\\n    UniswapPoolHelper.claimToToken(_helper, token, amounts, mins, _owedRewards, _rewards, _rewardTotals);\\n  }\\n\\n  function withdrawToToken(uint256 amount, address token, uint256 minA, uint256 minB, uint256 slippageA, uint256 slippageB) external nonReentrant {\\n    require(amount > 0 && amount <= balanceOf(msg.sender), '!amount');\\n    uint afterFee = _burnWithFee(msg.sender, amount);\\n    _unearn(afterFee);\\n    IERC20(address(_pair)).safeTransfer(address(_helper), afterFee);\\n    _helper.withdrawToToken(token, afterFee, msg.sender, _pair, minA, minB, slippageA, slippageB);\\n    emit Withdraw(msg.sender, amount);\\n  }\\n\\n  function withdrawFees(uint256 amount, uint256 minA, uint256 minB) onlyWithdrawal nonReentrant virtual external nonReentrant {\\n    _withdrawFees(amount, minA, minB);\\n  }\\n\\n  function _withdrawFees(uint256 amount, uint256 minA, uint256 minB) virtual internal returns(uint256) {\\n    address withdrawer = _fees.withdrawal();\\n    uint256 bal = balanceOf(withdrawer);\\n    require(amount > 0 && amount <= bal, '0<amount<bal');\\n    _unearn(amount);\\n    _removeLiquidity(IERC20(address(_pair)), amount, msg.sender, minA, minB);\\n    _burn(withdrawer, amount);\\n    return amount;\\n  }\\n\\n  function withdrawFeesToToken(uint256 amount, address token, uint256 minA, uint256 minB, uint256 slippageA, uint256 slippageB) onlyWithdrawal nonReentrant external {\\n    address withdrawer = _fees.withdrawal();\\n    require(withdrawer != address(0), '!withdrawer');\\n    uint256 bal = balanceOf(withdrawer);\\n    require(amount > 0 && amount <= bal, '0<amount<bal');\\n    _unearn(amount);\\n    _burn(withdrawer, amount);\\n    IERC20(address(_pair)).safeTransfer(address(_helper), amount);\\n    _helper.withdrawToToken(token, amount, msg.sender, _pair, minA, minB, slippageA, slippageB);\\n    emit Withdraw(msg.sender, amount);\\n  }\\n\\n  function withdrawLP(uint256 amount) nonReentrant external virtual {\\n    require(amount <= balanceOf(msg.sender));\\n    _withdraw(amount);\\n  }\\n\\n  function _withdraw(uint256 amount) virtual override internal returns(uint256 afterFee) {\\n    afterFee = _burnWithFee(msg.sender, amount);\\n    _unearn(afterFee);\\n    IERC20(address(_pair)).safeTransfer(msg.sender, afterFee);\\n    emit Withdraw(msg.sender, amount);\\n  }\\n\\n  function _withdrawFees() override internal returns(uint256 /*amount*/) {\\n  }\\n\\n  function withdrawAll(uint256 minA, uint256 minB) nonReentrant external virtual {\\n    _withdraw(balanceOf(msg.sender), minA, minB);\\n  }\\n\\n  function withdrawPair(uint256 amount, uint256 minA, uint256 minB) nonReentrant external virtual {\\n    require(amount <= balanceOf(msg.sender));\\n    _withdraw(amount, minA, minB);\\n  }\\n\\n  function _withdraw(uint256 amount, uint256 minA, uint256 minB) virtual internal returns(uint256 afterFee) {\\n    afterFee = _burnWithFee(msg.sender, amount);\\n    _unearn(afterFee);\\n    _removeLiquidity(IERC20(address(_pair)), afterFee, msg.sender, minA, minB);\\n    emit Withdraw(msg.sender, amount);\\n}\\n\\n  function _removeLiquidity(IERC20 pair, uint256 amount, address to, uint256 minA, uint256 minB) internal virtual returns(uint256 token0, uint256 token1) {\\n    pair.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), 0);\\n    pair.safeApprove(address(UniswapPoolHelper.UNI_ROUTER), amount * 2);\\n    (token0, token1) = UniswapPoolHelper.UNI_ROUTER.removeLiquidity(address(_token0), address(_token1), amount, minA, minB, to, now.add(1800));\\n  }\\n\\n  function _tokenInUse(address token) override virtual internal view returns(bool) {\\n    return token == address(_pair) || EarnPool._tokenInUse(token);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/UniswapPoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport '../protocols/uniswap-v2/interfaces/IUniswapV2Pair.sol';\\nimport '../protocols/uniswap-v2/interfaces/IUniswapV2Router02.sol';\\nimport '../utils/Console.sol';\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../protocols/uniswap-v2/UniswapHelper.sol\\\";\\n\\nstruct UniswapPoolHelperState {\\n  IUniswapV2Pair pair;\\n  address token0;\\n  address token1;\\n  uint256 min0;\\n  uint256 min1;\\n  uint256 allocated0;\\n  uint256 allocated1;\\n  uint256 liquidity;\\n  uint256 amount0;\\n  uint256 amount1;\\n  uint256 remaining0;\\n  uint256 remaining1;\\n  uint256 currBefore;\\n  uint256 currAfter;\\n  string path0;\\n  string path1;\\n  address from;\\n  address to;\\n}\\n\\nlibrary UniswapPoolHelper {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  // TODO adjust MIN_AMOUNT\\n  uint256 public constant MIN_AMOUNT = 5;\\n\\n  IUniswapV2Router02 public constant UNI_ROUTER = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n  address constant public USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n  address constant public DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n  address constant public USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n  address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); \\n  address public constant WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n\\n  IERC20 public constant IUSDC = IERC20(USDC);\\n  IERC20 public constant IUSDT = IERC20(USDT);\\n  IERC20 public constant IDAI = IERC20(DAI);\\n\\n  uint256 public constant SLIPPAGE_BASE = 10000;\\n\\n  function allocateState(uint256 amount0, uint256 amount1, IUniswapV2Pair pair, uint256 min0, uint256 min1) internal view returns (UniswapPoolHelperState memory state) {\\n    state = UniswapPoolHelperState(\\n      pair, \\n      pair.token0(), \\n      pair.token1(), \\n      min0, \\n      min1, \\n      0, \\n      0, \\n      0, \\n      amount0, \\n      amount1,\\n      0,\\n      0,\\n      0,\\n      0,\\n      '',\\n      '',\\n      address(0),\\n      address(0)\\n    );\\n  }\\n\\n  function allocateState(IUniswapV2Pair pair, uint256 min0, uint256 min1) internal view returns (UniswapPoolHelperState memory state) {\\n    state = allocateState(0, 0, pair, min0, min1);\\n  }\\n\\n  function getPath(address token0, address token1) internal pure returns(address[] memory path) {\\n    path = new address[](2);\\n    path[0] = token0;\\n    path[1] = token1;\\n  }\\n\\n  function safeTransferDeflationary(IERC20 token, uint256 amount, UniswapPoolHelperState memory state) internal returns (uint256 result) {\\n    state.currBefore = IERC20(token).balanceOf(address(this));\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n    state.currAfter = IERC20(token).balanceOf(address(this));\\n    result = state.currAfter.sub(state.currBefore);\\n  }\\n\\n  function safeTransferDeflationaryTo(address token, uint256 amount, UniswapPoolHelperState memory state) internal returns (uint256 result) {\\n    state.currBefore = IERC20(token).balanceOf(state.to);\\n    IERC20(token).safeTransfer(state.to, amount);\\n    state.currAfter = IERC20(token).balanceOf(state.to);\\n    result = state.currAfter.sub(state.currBefore);\\n  }\\n\\n  function depositPair(uint256 amount0, uint256 amount1, IUniswapV2Pair pair, uint256 min0, uint256 min1) external returns (uint256) {\\n    require(amount0 > MIN_AMOUNT, '!amount0');\\n    require(amount1 > MIN_AMOUNT, '!amount1');\\n\\n    UniswapPoolHelperState memory state = UniswapPoolHelper.allocateState(amount0, amount1, pair, min0, min1);\\n\\n    state.amount0 = safeTransferDeflationary(IERC20(state.token0), state.amount0, state);\\n    state.amount1 = safeTransferDeflationary(IERC20(state.token1), state.amount1, state);\\n    addLiquidity(state);\\n    if (state.remaining0 > 0) {\\n      IERC20(state.token0).safeTransfer(msg.sender, state.remaining0);\\n    }\\n    if (state.remaining1 > 0) {\\n      IERC20(state.token1).safeTransfer(msg.sender, state.remaining1);\\n    }\\n    return state.liquidity;\\n  }\\n\\n  function depositLPToken(IUniswapV2Pair pair, uint256 amount) external returns (uint256) {\\n    require(amount > MIN_AMOUNT, '!amount');\\n    UniswapPoolHelperState memory state = UniswapPoolHelper.allocateState(pair, 0, 0);\\n    return safeTransferDeflationary(IERC20(address(pair)), amount, state);\\n  }\\n\\n  function addLiquidity(UniswapPoolHelperState memory state) internal {\\n    // debugBalances('addLiquidity', state);\\n    (state.allocated0, state.allocated1, state.liquidity) = UNI_ROUTER.addLiquidity(state.token0, state.token1, state.amount0, state.amount1, state.min0, state.min1, address(this), now.add(1800));\\n    state.remaining0 = state.amount0.sub(state.allocated0, '!remaining0');\\n    state.remaining1 = state.amount1.sub(state.allocated1, '!remaining1');\\n    // debugRemaining('addLiquidity', state);\\n  }\\n\\n  function safeTransferReward(mapping (IERC20 => uint256) storage _rewardTotals, IERC20 reward, address dest, uint256 amount) internal returns(uint256) {\\n    uint256 remaining = _rewardTotals[reward];\\n    if (remaining < amount)\\n      amount = remaining;\\n    _rewardTotals[reward] = remaining.sub(amount);\\n    if (amount > 0) {\\n      uint256 bef = reward.balanceOf(dest);\\n      reward.safeTransfer(dest, amount);\\n      uint256 aft = reward.balanceOf(dest);\\n      amount = aft.sub(bef, '!reward');\\n    }\\n    return amount;\\n  }\\n\\n  function claimToToken(\\n    UniswapHelper helper, \\n    address to, \\n    uint[] memory amounts,\\n    uint[] memory min, \\n    mapping (address => mapping (IERC20 => uint256)) storage _owedRewards, \\n    IERC20[] storage _rewards,\\n    mapping (IERC20 => uint256) storage _rewardTotals\\n  ) internal virtual {\\n    require(amounts.length == _rewards.length, 'amounts!=rewards');\\n    require(min.length == amounts.length, 'min!=rewards');\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[msg.sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      uint256 amount = amounts[i];\\n      if (amount > 0) {\\n        uint256 rem = owed[token];\\n        require(amount <= rem, 'bad amount');\\n        owed[token] = rem.sub(amount);\\n        if (address(token) == to) {\\n          safeTransferReward(_rewardTotals, token, msg.sender, amount);\\n        } else {\\n          require(helper.pathExists(address(token), to), 'bad token');\\n          string memory path = Path.path(address(token), to);\\n          amount = safeTransferReward(_rewardTotals, token, address(helper), amount);\\n          if (amount > 0) {\\n            helper.swap(path, amount, min[i], msg.sender);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function owedRewards(\\n    mapping (address => mapping (IERC20 => uint256)) storage _owedRewards, \\n    IERC20[] storage _rewards\\n  ) external view returns(uint256[] memory rewards) {\\n    rewards = new uint256[](_rewards.length);\\n    mapping (IERC20 => uint256) storage owed = _owedRewards[msg.sender];\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      rewards[i] = owed[token];\\n    }\\n  }\\n\\n  function rewardTotals(\\n    mapping (IERC20 => uint256) storage _rewardTotals, \\n    IERC20[] storage _rewards\\n  ) external view returns(uint256[] memory rewards) {\\n    rewards = new uint256[](_rewards.length);\\n    mapping (IERC20 => uint256) storage totals = _rewardTotals;\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      IERC20 token = _rewards[i];\\n      rewards[i] = totals[token];\\n    }\\n  }\\n\\n  function amountWithSlippage(uint256 amount, uint256 slippage) internal pure returns (uint256 out) {\\n    out = slippage == 0 ? 0 : amount.sub(amount.mul(slippage).div(SLIPPAGE_BASE));\\n  }\\n\\n  function depositSingleSided(address help, address token, uint256 amountA, uint256 amountB, IUniswapV2Pair pair, uint256 minSwapB, uint256 slippageA, uint256 slippageB, uint256 slippageRemA, uint256 slippageRemB) external returns (uint256) {\\n    UniswapHelper helper = UniswapHelper(help);\\n    UniswapPoolHelperState memory state = UniswapPoolHelper.allocateState(pair, 0, 0);\\n    require(token == state.token0 || token == state.token1, 'invalid token');\\n\\n    // Transfer tokens here\\n    amountB = safeTransferDeflationary(IERC20(token), amountB, state);\\n    amountA = safeTransferDeflationary(IERC20(token), amountA, state);\\n    // Transfer B to helper and swap\\n    state.to = help;\\n    amountB = safeTransferDeflationaryTo(token, amountB, state);\\n    state.from = token == state.token0 ? state.token0 : state.token1;\\n    state.to = state.from == state.token0 ? state.token1 : state.token0;\\n    state.path0 = Path.path(state.from, state.to);\\n    amountB = helper.swap(state.path0, amountB, minSwapB, address(this));\\n\\n    state.amount0 = token == state.token0 ? amountA : amountB;\\n    state.amount1 = token == state.token0 ? amountB : amountA;\\n\\n    state.min0 = amountWithSlippage(state.amount0, slippageA);\\n    state.min1 = amountWithSlippage(state.amount1, slippageB);\\n\\n    addLiquidity(state);\\n\\n    if (state.remaining0 > 0) {\\n      if (token == state.token1) {\\n        state.path0 = Path.path(state.token0, token);\\n        state.to = help;\\n        state.remaining0 = safeTransferDeflationaryTo(state.token0, state.remaining0, state); // IERC20(state.token0).safeTransfer(help, state.remaining0);\\n        state.min0 = helper.estimateOut(state.token0, token, state.remaining0);\\n        helper.swap(state.path0, state.remaining0, amountWithSlippage(state.min0, slippageRemA), msg.sender);\\n      } else {\\n        IERC20(state.token0).safeTransfer(msg.sender, state.remaining0);\\n      }\\n    }\\n    if (state.remaining1 > 0) {\\n      if (token == state.token0) {\\n        state.path1 = Path.path(state.token1, token);\\n        state.to = help;\\n        state.remaining1 = safeTransferDeflationaryTo(state.token1, state.remaining1, state);\\n        state.min1 = helper.estimateOut(state.token1, token, state.remaining1);\\n        helper.swap(state.path1, state.remaining1, amountWithSlippage(state.min1, slippageRemB), msg.sender);\\n      } else {\\n        IERC20(state.token1).safeTransfer(msg.sender, state.remaining1);\\n      }\\n    }\\n\\n    return state.liquidity;\\n  }\\n\\n  function depositFromToken(address help, address token, uint256 amountA, uint256 amountB, IUniswapV2Pair pair, uint256 minSwapA, uint256 minSwapB, uint256 slippageA, uint256 slippageB, uint256 slippageRemA, uint256 slippageRemB) external returns (uint256) {\\n    UniswapHelper helper = UniswapHelper(help);\\n    UniswapPoolHelperState memory state = UniswapPoolHelper.allocateState(pair, 0, 0);\\n    require(token != state.token0 && token != state.token1, 'use depositSingleSided');\\n    require(helper.pathExists(token, state.token0), 'bad token');\\n    require(helper.pathExists(token, state.token1), 'bad token');\\n    state.path0 = Path.path(token, state.token0);\\n    state.path1 = Path.path(token, state.token1);\\n\\n    // This is inefficient but necessary for deflationary tokens\\n    amountA = safeTransferDeflationary(IERC20(token), amountA, state);\\n    amountB = safeTransferDeflationary(IERC20(token), amountB, state);\\n    state.to = help;\\n    amountA = safeTransferDeflationaryTo(token, amountA, state);\\n    amountB = safeTransferDeflationaryTo(token, amountB, state);\\n\\n    state.amount0 = helper.swap(state.path0, amountA, minSwapA, address(this));\\n    state.amount1 = helper.swap(state.path1, amountB, minSwapB, address(this));\\n    state.min0 = amountWithSlippage(state.amount0, slippageA);\\n    state.min1 = amountWithSlippage(state.amount1, slippageB);\\n\\n    addLiquidity(state);\\n\\n    if (state.remaining0 > 0) {\\n      state.path0 = Path.path(state.token0, token);\\n      state.to = help;\\n      state.remaining0 = safeTransferDeflationaryTo(state.token0, state.remaining0, state); // IERC20(state.token0).safeTransfer(help, state.remaining0);\\n      state.min0 = helper.estimateOut(state.token0, token, state.remaining0);\\n      helper.swap(state.path0, state.remaining0, amountWithSlippage(state.min0, slippageRemA), msg.sender);\\n    }\\n    if (state.remaining1 > 0) {\\n      state.path1 = Path.path(state.token1, token);\\n      state.to = help;\\n      state.remaining1 = safeTransferDeflationaryTo(state.token1, state.remaining1, state);\\n      state.min1 = helper.estimateOut(state.token1, token, state.remaining1);\\n      helper.swap(state.path1, state.remaining1, amountWithSlippage(state.min1, slippageRemB), msg.sender);\\n    }\\n\\n    return state.liquidity;\\n  }\\n\\n  function debugAmounts(string memory method, UniswapPoolHelperState memory state) internal {\\n    Console.log(method, ' token0 amount ', ERC20(state.token0).symbol(), state.amount0);\\n    Console.log(method, ' token1 amount ', ERC20(state.token1).symbol(), state.amount1);\\n  }\\n\\n  function debugBalances(string memory method, UniswapPoolHelperState memory state) internal {\\n    Console.log(method, ' token0 balance ', ERC20(state.token0).symbol(), IERC20(state.token0).balanceOf(address(this)));\\n    Console.log(method, ' token1 balance ', ERC20(state.token1).symbol(), IERC20(state.token1).balanceOf(address(this)));\\n  }\\n\\n  function debugRemaining(string memory method, UniswapPoolHelperState memory state) internal {\\n    Console.log(method, ' token0 remaining ', ERC20(state.token0).symbol(), state.remaining0);\\n    Console.log(method, ' token1 remaining ', ERC20(state.token1).symbol(), state.remaining1);\\n  }\\n\\n  function debugSwap(address token, uint256 amount, address tokenOut, uint256 out) internal {\\n    Console.log('swap in ', ERC20(token).name(), amount);\\n    Console.log('swap out ', ERC20(tokenOut).name(), out);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/pool/mph/MPH_WETHPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport '../UniswapPool.sol';\\n\\ncontract MPH_WETHPool is UniswapPool {\\n  using Address for address;\\n\\n  string constant _symbol = 'puMPH_WETH';\\n  string constant _name = 'UniswapPoolMPH_WETH';\\n  address constant MPH_WETH = 0x4D96369002fc5b9687ee924d458A7E5bAa5df34E;\\n\\n  constructor (address fees) public UniswapPool(_name, _symbol, MPH_WETH, true, fees) { }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/protocols/uniswap-v2/UniswapHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0-with-puul-exception\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport '../../protocols/uniswap-v2/interfaces/IUniswapV2Pair.sol';\\nimport '../../protocols/uniswap-v2/interfaces/IUniswapV2Factory.sol';\\nimport '../../protocols/uniswap-v2/interfaces/IUniswapV2Router02.sol';\\nimport '../../access/Whitelist.sol';\\nimport '../../utils/Console.sol';\\n\\ncontract UniswapHelper is Whitelist, ReentrancyGuard {\\n  using Address for address;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  mapping (bytes32 => uint) _hasPath;\\n  mapping (bytes32 => mapping (uint => address)) _paths;\\n\\n  IUniswapV2Factory public constant UNI_FACTORY = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n  IUniswapV2Router02 public constant UNI_ROUTER = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n  uint256 public constant MIN_AMOUNT = 5;\\n  uint256 public constant MIN_SWAP_AMOUNT = 1000; // should be ok for most coins\\n  uint256 public constant MIN_SLIPPAGE = 1; // .01%\\n  uint256 public constant MAX_SLIPPAGE = 1000; // 10%\\n  uint256 public constant SLIPPAGE_BASE = 10000;\\n\\n   constructor () public {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(ROLE_HARVESTER, msg.sender);\\n  }\\n\\n  function setupRoles(address admin, address harvester) onlyDefaultAdmin external {\\n    _setup(ROLE_HARVESTER, harvester);\\n    _setupDefaultAdmin(admin);\\n  }\\n\\n  function addPath(string memory name, address[] memory path) onlyHarvester external {\\n    bytes32 key = keccak256(abi.encodePacked(name));\\n    require(_hasPath[key] == 0, 'path exists');\\n    require(path.length > 0, 'invalid path');\\n\\n    _hasPath[key] = path.length;\\n    mapping (uint => address) storage spath = _paths[key];\\n    for (uint i = 0; i < path.length; i++) {\\n      spath[i] = path[i];\\n    }\\n  }\\n\\n  function removePath(string memory name) onlyHarvester external {\\n    bytes32 key = keccak256(abi.encodePacked(name));\\n    uint length = _hasPath[key];\\n    require(length > 0, 'path not found exists');\\n\\n    _hasPath[key] = 0;\\n    mapping (uint => address) storage spath = _paths[key];\\n    for (uint i = 0; i < length; i++) {\\n      spath[i] = address(0);\\n    }\\n  }\\n\\n  function pathExists(address from, address to) external view returns(bool) {\\n    string memory name = Path.path(from, to);\\n    bytes32 key = keccak256(abi.encodePacked(name));\\n    uint256 length = _hasPath[key];\\n    if (length == 0) return false;\\n    address first = _paths[key][0];\\n    if (from != first) return false;\\n    address last = _paths[key][length - 1];\\n    if (to != last) return false;\\n    return true;\\n  }\\n\\n  function _removeLiquidityDeflationary(address tokenA, address tokenB, uint256 amount, uint256 minA, uint256 minB) internal returns (uint256 amountA, uint256 amountB) {\\n    uint256 befA = IERC20(tokenA).balanceOf(address(this));\\n    uint256 befB = IERC20(tokenB).balanceOf(address(this));\\n    UNI_ROUTER.removeLiquidity(tokenA, tokenB, amount, minA, minB, address(this), now.add(1800));\\n    uint256 aftA = IERC20(tokenA).balanceOf(address(this));\\n    uint256 aftB = IERC20(tokenB).balanceOf(address(this));\\n    amountA = aftA.sub(befA, 'deflat');\\n    amountB = aftB.sub(befB, 'deflat');\\n  }\\n\\n  function withdrawToToken(address token, uint256 amount, address dest, IUniswapV2Pair pair, uint256 minA, uint256 minB, uint256 slippageA, uint256 slippageB) onlyWhitelist nonReentrant external {\\n    address token0 = pair.token0();\\n    address token1 = pair.token1();\\n    IERC20(address(pair)).safeApprove(address(UNI_ROUTER), 0);\\n    IERC20(address(pair)).safeApprove(address(UNI_ROUTER), amount * 2);\\n    (uint amount0, uint amount1) = _removeLiquidityDeflationary(token0, token1, amount, minA, minB);\\n    if (token == token0) {\\n      IERC20(token0).safeTransfer(dest, amount0);\\n    } else {\\n      _swapWithSlippage(token0, token, amount0, slippageA, dest);\\n    }\\n    if (token == token1) {\\n      IERC20(token1).safeTransfer(dest, amount1);\\n    } else {\\n      _swapWithSlippage(token1, token, amount1, slippageB, dest);\\n    }\\n  }\\n\\n  function _swapWithSlippage(address from, address to, uint256 amount, uint256 slippage, address dest) internal returns(uint256 swapOut) {\\n    string memory path = Path.path(from, to);\\n    uint256 out = _estimateOut(from, to, amount);\\n    uint256 min = amountWithSlippage(out, slippage);\\n    swapOut = _swap(path, amount, min, dest);\\n  }\\n\\n  function swap(string memory name, uint256 amount, uint256 minOut, address dest) onlyWhitelist nonReentrant external returns (uint256 swapOut) {\\n    swapOut = _swap(name, amount, minOut, dest);\\n  }\\n\\n  function _swap(string memory name, uint256 amount, uint256 minOut, address dest) internal returns (uint256 swapOut) {\\n    bytes32 key = keccak256(abi.encodePacked(name));\\n    uint256 length = _hasPath[key];\\n    require(length > 0, Console.concat('path not found ', name));\\n\\n    // Copy array\\n    address[] memory swapPath = new address[](length);\\n    for (uint i = 0; i < length; i++) {\\n      swapPath[i] = _paths[key][i];\\n    }\\n\\n    IERC20 token = IERC20(swapPath[0]);\\n    IERC20 to = IERC20(swapPath[swapPath.length - 1]);\\n    token.safeApprove(address(UNI_ROUTER), 0);\\n    token.safeApprove(address(UNI_ROUTER), amount * 2);\\n    uint256 bef = to.balanceOf(dest);\\n    UNI_ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, minOut, swapPath, dest, now.add(1800));\\n    uint256 aft = to.balanceOf(dest);\\n    swapOut = aft.sub(bef, '!swapOut');\\n  }\\n\\n  function amountWithSlippage(uint256 amount, uint256 slippage) internal pure returns (uint256 out) {\\n    out = slippage == 0 ? 0 : amount.sub(amount.mul(slippage).div(SLIPPAGE_BASE));\\n  }\\n\\n  function getAmountOut(IUniswapV2Pair pair, address token, uint256 amount) external view returns (uint256 optimal) {\\n    optimal = _getAmountOut(pair, token, amount);\\n  }\\n\\n  function _getAmountOut(IUniswapV2Pair pair, address token, uint256 amount) internal view returns (uint256 optimal) {\\n    uint256 reserve0;\\n    uint256 reserve1;\\n    if (pair.token0() == token) {\\n      (reserve0, reserve1, ) = pair.getReserves();\\n    } else {\\n      (reserve1, reserve0, ) = pair.getReserves();\\n    }\\n    optimal = UNI_ROUTER.getAmountOut(amount, reserve0, reserve1);\\n  }\\n\\n  function quote(IUniswapV2Pair pair, address token, uint256 amount) external view returns (uint256 optimal) {\\n    optimal = _quote(pair, token, amount);\\n  }\\n\\n  function _quote(IUniswapV2Pair pair, address token, uint256 amount) internal view returns (uint256 optimal) {\\n    uint256 reserve0;\\n    uint256 reserve1;\\n    if (pair.token0() == token) {\\n      (reserve0, reserve1, ) = pair.getReserves();\\n    } else {\\n      (reserve1, reserve0, ) = pair.getReserves();\\n    }\\n    optimal = UNI_ROUTER.quote(amount, reserve0, reserve1);\\n  }\\n\\n  function _estimateOut(address from, address to, uint256 amount) internal view returns (uint256 swapOut) {\\n    string memory path = Path.path(from, to);\\n    bytes32 key = keccak256(abi.encodePacked(path));\\n    uint256 length = _hasPath[key];\\n    require(length > 0, Console.concat('path not found ', path));\\n\\n    swapOut = amount;\\n    for (uint i = 0; i < length - 1; i++) {\\n      address first = _paths[key][i];\\n      IUniswapV2Pair pair = IUniswapV2Pair(UNI_FACTORY.getPair(first, _paths[key][i + 1]));\\n      require(address(pair) != address(0), 'swap pair not found');\\n      swapOut = _getAmountOut(pair, first, swapOut);\\n    }\\n  }\\n\\n  function estimateOut(address from, address to, uint256 amount) external view returns (uint256 swapOut) {\\n    require(amount > 0, '!amount');\\n    swapOut = _estimateOut(from, to, amount);\\n  }\\n\\n  function estimateOuts(address[] memory pairs, uint256[] memory amounts) external view returns (uint256[] memory swapOut) {\\n    require(pairs.length.div(2) == amounts.length, 'pairs!=amounts');\\n    swapOut = new uint256[](amounts.length);\\n    for (uint256 i = 0; i < pairs.length; i+=2) {\\n      uint256 ai = i.div(2);\\n      swapOut[ai] = _estimateOut(pairs[i], pairs[i+1], amounts[ai]);\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/protocols/uniswap-v2/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/protocols/uniswap-v2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    function totalSupply() external view returns(uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function balanceOf(address owner) external view returns (uint);\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/protocols/uniswap-v2/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/protocols/uniswap-v2/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) _balances;\\n\\n    mapping (address => mapping (address => uint256)) _allowances;\\n\\n    uint256 _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"\r\n    },\r\n    \"/run/media/bill/Rekoner-0/puul/puul-contracts-prep/contracts/utils/Console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.6.12;\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\n\\nlibrary Path {\\n  function path(address from, address to) internal view returns(string memory) {\\n    string memory symbol = ERC20(from).symbol();\\n    string memory symbolTo = ERC20(to).symbol();\\n    return string(abi.encodePacked(symbol, '/', symbolTo));\\n  }\\n}\\n\\nlibrary Console {\\n  bool constant PROD = true;\\n\\n  function concat(string memory a, string memory b) internal pure returns(string memory)\\n  {\\n    return string(abi.encodePacked(a, b));\\n  }\\n\\n  function concat(string memory a, string memory b, string memory c) internal pure returns(string memory)\\n  {\\n    return string(abi.encodePacked(a, b, c));\\n  }\\n\\n  event LogBalance(string, uint);\\n  function logBalance(address token, address to) internal {\\n    if (PROD) return;\\n    emit LogBalance(ERC20(token).symbol(), ERC20(token).balanceOf(to));\\n  }\\n\\n  function logBalance(string memory s, address token, address to) internal {\\n    if (PROD) return;\\n    emit LogBalance(string(abi.encodePacked(s, '/', ERC20(token).symbol())), ERC20(token).balanceOf(to));\\n  }\\n\\n  event LogUint(string, uint);\\n  function log(string memory s, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(s, x);\\n  }\\n\\n  function log(string memory s, string memory t, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(concat(s, t), x);\\n  }\\n    \\n  function log(string memory s, string memory t, string memory u, uint x) internal {\\n    if (PROD) return;\\n    emit LogUint(concat(s, t, u), x);\\n  }\\n    \\n  event LogInt(string, int);\\n  function log(string memory s, int x) internal {\\n    if (PROD) return;\\n    emit LogInt(s, x);\\n  }\\n  \\n  event LogBytes(string, bytes);\\n  function log(string memory s, bytes memory x) internal {\\n    if (PROD) return;\\n    emit LogBytes(s, x);\\n  }\\n  \\n  event LogBytes32(string, bytes32);\\n  function log(string memory s, bytes32 x) internal {\\n    if (PROD) return;\\n    emit LogBytes32(s, x);\\n  }\\n\\n  event LogAddress(string, address);\\n  function log(string memory s, address x) internal {\\n    if (PROD) return;\\n    emit LogAddress(s, x);\\n  }\\n\\n  event LogBool(string, bool);\\n  function log(string memory s, bool x) internal {\\n    if (PROD) return;\\n    emit LogBool(s, x);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"UniswapPoolHelper\": \"0x52EA9Cd452F92e5B0ca072ee0C1075d63c1CBcc6\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fees\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mins\",\"type\":\"uint256[]\"}],\"name\":\"claimToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageRemA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageRemB\",\"type\":\"uint256\"}],\"name\":\"depositFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"}],\"name\":\"depositPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageRemA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageRemB\",\"type\":\"uint256\"}],\"name\":\"depositSingleSided\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"extractStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owedRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardAdded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"setFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fees\",\"type\":\"address\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"}],\"name\":\"setHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limits\",\"type\":\"address\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setupAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setupDefaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setupExtract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setupHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setupMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"setupRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unearn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageB\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"}],\"name\":\"withdrawPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageB\",\"type\":\"uint256\"}],\"name\":\"withdrawToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MPH_WETHPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000016d08df064d7d6be79a03c5e558ca707eb74e42a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}