{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n         return 0;\r\n      }\r\n      c = a * b;  \r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      // uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return a / b;\r\n   }\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n}\r\ncontract Token {\r\n   using SafeMath for uint256;\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   mapping(address => uint256) balances;\r\n   uint256 totalSupply_;\r\n   function totalSupply() public view returns (uint256) {\r\n      return totalSupply_;\r\n   }\r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(_value <= balances[msg.sender], \"balance of msg.sender insufficient\");\r\n      require(_to != address(0));\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n   }\r\n   function balanceOf(address _owner) public view returns (uint256) {\r\n      return balances[_owner];\r\n   }\r\n   mapping (address => mapping (address => uint256)) internal allowed;\r\n   function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n      require(_to != address(0));\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n   }\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n   }\r\n   function allowance(address _owner,address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n   }\r\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n      allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);   \r\n   }\r\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n      uint256 oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue >= oldValue) {\r\n         allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n   }\r\n}\r\n\r\ncontract ChurroCoin is Token {\r\n   string public name = 'Churro Coin';\r\n   string public symbol = 'CHRR';\r\n   uint256 public decimals = 10;\r\n   uint256 public totalSupply = 1000e16;\r\n   address public crowdsaleAddress;\r\n   address public owner;\r\n   \r\n   modifier onlyCrowdsale {\r\n      require(msg.sender == crowdsaleAddress);\r\n      _;\r\n   }\r\n   modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n   }\r\n   constructor () public Token() {\r\n      owner = msg.sender;\r\n      balances[msg.sender] = 900e16;\r\n   }\r\n   function setCrowdsale(address _crowdsaleAddress) public onlyOwner {\r\n      require(_crowdsaleAddress != address(0));\r\n      crowdsaleAddress = _crowdsaleAddress;\r\n      balances[_crowdsaleAddress] = 100e16;\r\n   }\r\n   function buyTokens(address _receiver, uint256 _amount) public onlyCrowdsale {\r\n      require(_receiver != address(0));\r\n      require(_amount > 0);\r\n      \r\n      transfer(_receiver, _amount);\r\n   }\r\n}\r\n\r\ncontract Crowdsale1 {\r\n   uint256 public tokenRate;\r\n   ChurroCoin public token;   \r\n   address public owner;\r\n   uint256 public tokensSold;\r\n   uint256 public limitCrowdsale = 100e16;\r\n\r\n   modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n   }\r\n   function () public payable {\r\n      buy();\r\n   }\r\n   constructor(uint256 _tokenRate, address _tokenAddress) public {\r\n      require(_tokenRate != 0 &&\r\n      _tokenAddress != address(0));\r\n      tokenRate = _tokenRate;\r\n      token = ChurroCoin(_tokenAddress);\r\n      owner = msg.sender;\r\n   }\r\n   function buy() public payable {\r\n      uint256 tokensToBuy;\r\n      tokensToBuy = msg.value * 1e10 / 1 ether * tokenRate;\r\n\r\n      token.buyTokens(msg.sender, tokensToBuy);\r\n\r\n      tokensSold += tokensToBuy;\r\n   }\r\n   function extractEther() public onlyOwner {\r\n      owner.transfer(address(this).balance);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extractEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenRate\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000cb73500000000000000000000000033a32293c93b46ad3d462ff4a3b17c092342cc16","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://686ccf3bc0199bd91b54da53a535021eba483c281f6fb830bceecb50029c60a0"}]}