{"status":"1","message":"OK","result":[{"SourceCode":"{\"CanReclaimToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"ERC20If.sol\\\";\\nimport \\\"OwnableIf.sol\\\";\\n\\n/// @title CanReclaimToken\\nabstract contract CanReclaimToken is OwnableIf {\\n\\n    function reclaimToken(ERC20If _token) external onlyOwner {\\n        uint256 balance = _token.balanceOf((address)(this));\\n        require(_token.transfer(_owner(), balance));\\n    }\\n\\n}\\n\\n\"},\"ERC20If.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/// @title ERC20If\\nabstract contract ERC20If {\\n    function totalSupply() virtual public view returns (uint256);\\n\\n    function balanceOf(address _who) virtual public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) virtual public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function allowance(address _owner, address _spender) virtual public view returns (uint256);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool);\\n\\n    function approve(address _spender, uint256 _value) virtual public returns (bool);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n\"},\"MemberMgrIf.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n//SPDX-License-Identifier: MIT\\n/// @title MemberMgrIf\\nabstract contract MemberMgrIf {\\n    function requireMerchant(address _who) virtual public view;\\n\\n    function requireCustodian(address _who) virtual public view;\\n}\\n\"},\"MintFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n//pragma experimental ABIEncoderV2;\\nimport \\\"Ownable.sol\\\";\\nimport \\\"MTokenControllerIf.sol\\\";\\nimport \\\"MintFactoryIfView.sol\\\";\\nimport \\\"CanReclaimToken.sol\\\";\\n\\n/// @title MintFactory\\ncontract MintFactory is Ownable, MintFactoryIfView, CanReclaimToken {\\n    function getStatusString(RequestStatus status) internal pure returns (string memory) {\\n        if (status == RequestStatus.PENDING) {\\n            return \\\"pending\\\";\\n        } else if (status == RequestStatus.CANCELED) {\\n            return \\\"canceled\\\";\\n        } else if (status == RequestStatus.APPROVED) {\\n            return \\\"approved\\\";\\n        } else if (status == RequestStatus.REJECTED) {\\n            return \\\"rejected\\\";\\n        } else {\\n            // unreachable.\\n            return \\\"unknown\\\";\\n        }\\n    }\\n\\n    function getMintRequest(uint seq) override\\n    external\\n    view\\n    returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status,\\n        bytes32 requestHash\\n    )\\n    {\\n        require(seq \\u003e 0, \\\"seq from 1\\\");\\n        require(seq \\u003c mintRequests.length, \\\"invalid seq\\\");\\n        Request memory request = mintRequests[seq];\\n        string memory statusString = getStatusString(request.status);\\n\\n        requestSeq = seq;\\n        requester = request.requester;\\n        amount = request.amount;\\n        btcAddress = request.btcAddress;\\n        btcTxId = request.btcTxId;\\n        requestBlockNo = request.requestBlockNo;\\n        confirmedBlockNo = request.confirmedBlockNo;\\n        status = statusString;\\n        requestHash = calcRequestHash(request);\\n    }\\n\\n    function getMintRequestsLength() override external view returns (uint length) {\\n        return mintRequests.length;\\n    }\\n\\n    function getBurnRequest(uint seq) override\\n    external\\n    view\\n    returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status,\\n        bytes32 requestHash\\n    )\\n    {\\n        require(seq \\u003e 0, \\\"seq from 1\\\");\\n        require(seq \\u003c burnRequests.length, \\\"invalid seq\\\");\\n        Request storage request = burnRequests[seq];\\n        string memory statusString = getStatusString(request.status);\\n\\n        requestSeq = seq;\\n        requester = request.requester;\\n        amount = request.amount;\\n        btcAddress = request.btcAddress;\\n        btcTxId = request.btcTxId;\\n        requestBlockNo = request.requestBlockNo;\\n        confirmedBlockNo = request.confirmedBlockNo;\\n        status = statusString;\\n        requestHash = calcRequestHash(request);\\n    }\\n\\n    function getBurnRequestsLength() override external view returns (uint length) {\\n        return burnRequests.length;\\n    }\\n\\n    constructor() {\\n        controller = (MTokenControllerIf)(owner);\\n\\n        Request memory request = Request({\\n            requester : (address)(0),\\n            amount : 0,\\n            btcAddress : \\\"invalid.address\\\",\\n            btcTxId : \\\"invalid.tx\\\",\\n            seq : 0,\\n            requestBlockNo : 0,\\n            confirmedBlockNo : 0,\\n            status : RequestStatus.REJECTED\\n            });\\n\\n        mintRequests.push(request);\\n        burnRequests.push(request);\\n    }\\n\\n    modifier onlyMerchant() {\\n        controller.requireMerchant(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyCustodian() {\\n        controller.requireCustodian(msg.sender);\\n        _;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        for (uint i = 0; i \\u003c bytes(a).length; i ++) {\\n            if (bytes(a)[i] != bytes(b)[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function isEmptyString(string memory a) internal pure returns (bool) {\\n        return (compareStrings(a, \\\"\\\"));\\n    }\\n\\n    event CustodianBtcAddressForMerchantSet(address indexed merchant,\\n        address indexed sender,\\n        string btcDepositAddress);\\n\\n    function setCustodianBtcAddressForMerchant(\\n        address merchant,\\n        string  memory btcAddress\\n    )\\n    external\\n    onlyCustodian\\n    returns (bool)\\n    {\\n        require((address)(merchant) != address(0), \\\"invalid merchant address\\\");\\n        controller.requireMerchant(merchant);\\n        require(!isEmptyString(btcAddress), \\\"invalid btc address\\\");\\n\\n        custodianBtcAddressForMerchant[merchant] = btcAddress;\\n        emit CustodianBtcAddressForMerchantSet(merchant, msg.sender, btcAddress);\\n        return true;\\n    }\\n\\n    event BtcDepositAddressOfMerchantSet(address indexed merchant,\\n        string btcDepositAddress);\\n\\n    function setMerchantBtcDepositAddress(string  memory btcAddress)\\n    external\\n    onlyMerchant\\n    returns (bool) {\\n        require(!isEmptyString(btcAddress), \\\"invalid btc address\\\");\\n\\n        btcDepositAddressOfMerchant[msg.sender] = btcAddress;\\n        emit BtcDepositAddressOfMerchantSet(msg.sender, btcAddress);\\n        return true;\\n    }\\n\\n    event NewMintRequest(\\n        uint indexed seq,\\n        address indexed requester,\\n        string btcAddress,\\n        string btcTxId,\\n        uint blockNo,\\n        bytes32 requestHash\\n    );\\n\\n    function requestMint(\\n        uint amount,\\n        string memory btcTxId\\n    )\\n    external\\n    onlyMerchant\\n    returns (bool)\\n    {\\n        require(!isEmptyString(btcTxId), \\\"invalid btcTxId\\\");\\n        require(!isEmptyString(custodianBtcAddressForMerchant[msg.sender]), \\\"invalid btc deposit address\\\");\\n\\n        uint seq = mintRequests.length;\\n        uint blockNo = block.number;\\n\\n        Request memory request = Request({\\n            requester : msg.sender,\\n            amount : amount,\\n            btcAddress : custodianBtcAddressForMerchant[msg.sender],\\n            btcTxId : btcTxId,\\n            seq : seq,\\n            requestBlockNo : blockNo,\\n            confirmedBlockNo : 0,\\n            status : RequestStatus.PENDING\\n            });\\n\\n        bytes32 requestHash = calcRequestHash(request);\\n        mintRequestSeqMap[requestHash] = seq;\\n        mintRequests.push(request);\\n\\n        emit NewMintRequest(seq, msg.sender, request.btcAddress, btcTxId, blockNo, requestHash);\\n        return true;\\n    }\\n\\n    function calcRequestHash(Request memory request) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                request.requester,\\n                request.btcAddress,\\n                request.btcTxId,\\n                request.seq,\\n                request.requestBlockNo\\n            ));\\n    }\\n\\n    event MintRequestCancel(uint indexed seq, address indexed requester, bytes32 requestHash);\\n\\n    function getPendingMintRequest(bytes32 _requestHash) view private returns (Request memory) {\\n        uint seq = mintRequestSeqMap[_requestHash];\\n        require(mintRequests.length \\u003e seq, \\\"invalid seq\\\");\\n        require(seq \\u003e 0, \\\"invalid requestHash\\\");\\n        Request memory request = mintRequests[seq];\\n        require(request.status == RequestStatus.PENDING, \\\"status not pending.\\\");\\n        require(_requestHash == calcRequestHash(request), \\\"invalid hash\\\");\\n\\n        return request;\\n    }\\n\\n    function getPendingMintRequestV(bytes32 _requestHash) override view public returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status) {\\n        Request memory request = getPendingMintRequest(_requestHash);\\n\\n        requestSeq = request.seq;\\n        requester = request.requester;\\n        amount = request.amount;\\n        btcAddress = request.btcAddress;\\n        btcTxId = request.btcTxId;\\n        requestBlockNo = request.requestBlockNo;\\n        confirmedBlockNo = request.confirmedBlockNo;\\n        status = getStatusString(request.status);\\n    }\\n\\n\\n    function cancelMintRequest(bytes32 requestHash) external onlyMerchant returns (bool) {\\n        Request memory request = getPendingMintRequest(requestHash);\\n        uint seq = request.seq;\\n        require(msg.sender == request.requester, \\\"cancel sender is different than pending request initiator\\\");\\n\\n        mintRequests[seq].status = RequestStatus.CANCELED;\\n\\n        emit MintRequestCancel(request.seq, msg.sender, calcRequestHash(request));\\n        return true;\\n    }\\n\\n    event MintConfirmed(\\n        uint indexed seq,\\n        address indexed requester,\\n        uint amount,\\n        string btcDepositAddress,\\n        string btcTxid,\\n        uint blockNo,\\n        bytes32 requestHash\\n    );\\n\\n    function confirmMintRequest(bytes32 requestHash) external onlyCustodian returns (bool) {\\n        uint blockNo = block.number;\\n        Request memory request = getPendingMintRequest(requestHash);\\n        require(blockNo \\u003e request.requestBlockNo, \\\"confirmMintRequest failed\\\");\\n\\n        require(blockNo - 20 \\u003e= request.requestBlockNo, \\\"confirmMintRequest failed, wait for 20 blocks\\\");\\n        uint seq = request.seq;\\n        mintRequests[seq].status = RequestStatus.APPROVED;\\n        uint amount = mintRequests[seq].amount;\\n        mintRequests[seq].confirmedBlockNo = blockNo;\\n\\n        require(controller.mint(request.requester, amount), \\\"mint failed\\\");\\n        emit MintConfirmed(\\n            request.seq,\\n            request.requester,\\n            amount,\\n            request.btcAddress,\\n            request.btcTxId,\\n            blockNo,\\n            calcRequestHash(request)\\n        );\\n        return true;\\n    }\\n\\n    event MintRejected(\\n        uint indexed seq,\\n        address indexed requester,\\n        uint amount,\\n        string btcDepositAddress,\\n        string btcTxid,\\n        uint blockNo,\\n        bytes32 requestHash\\n    );\\n\\n    function rejectMintRequest(bytes32 requestHash) external onlyCustodian returns (bool) {\\n        Request memory request = getPendingMintRequest(requestHash);\\n        uint seq = request.seq;\\n\\n        mintRequests[seq].status = RequestStatus.REJECTED;\\n        uint blockNo = block.number;\\n        mintRequests[seq].confirmedBlockNo = blockNo;\\n\\n        emit MintRejected(\\n            request.seq,\\n            request.requester,\\n            request.amount,\\n            request.btcAddress,\\n            request.btcTxId,\\n            blockNo,\\n            calcRequestHash(request)\\n        );\\n        return true;\\n    }\\n\\n    event Burned(\\n        uint indexed seq,\\n        address indexed requester,\\n        uint amount,\\n        string btcAddress,\\n        uint blockNo,\\n        bytes32 requestHash\\n    );\\n\\n    function burn(uint amount) external onlyMerchant returns (bool) {\\n        string memory btcDepositAddress = btcDepositAddressOfMerchant[msg.sender];\\n        require(!isEmptyString(btcDepositAddress), \\\"merchant btc deposit address was not set\\\");\\n\\n        uint seq = burnRequests.length;\\n        uint blockNo = block.number;\\n\\n        Request memory request = Request({\\n            requester : msg.sender,\\n            amount : amount,\\n            btcAddress : btcDepositAddress,\\n            btcTxId : \\\"\\\",\\n            seq : seq,\\n            requestBlockNo : blockNo,\\n            confirmedBlockNo : 0, //由确认阶段回填\\n            status : RequestStatus.PENDING\\n            });\\n\\n        bytes32 requestHash = calcRequestHash(request);\\n        burnRequestSeqMap[requestHash] = seq;\\n        burnRequests.push(request);\\n\\n        require(controller.getMToken().transferFrom(msg.sender, (address)(controller), amount), \\\"trasnfer tokens to burn failed\\\");\\n        require(controller.burn(amount), \\\"burn failed\\\");\\n\\n        emit Burned(seq, msg.sender, amount, btcDepositAddress, blockNo, requestHash);\\n        return true;\\n    }\\n\\n    event BurnConfirmed(\\n        uint indexed seq,\\n        address indexed requester,\\n        uint amount,\\n        string btcAddress,\\n        string btcTxId,\\n        uint blockNo\\n    );\\n\\n    function confirmBurnRequest(bytes32 requestHash, string memory btcTxId) external onlyCustodian returns (bool) {\\n        uint seq = burnRequestSeqMap[requestHash];\\n        require(burnRequests.length \\u003e seq, \\\"invalid seq\\\");\\n        require(seq \\u003e 0, \\\"invalid requestHash\\\");\\n        Request memory request = burnRequests[seq];\\n        require(requestHash == calcRequestHash(request), \\\"invalid requestHash\\\");\\n        require(request.status == RequestStatus.PENDING, \\\"status not pending.\\\");\\n\\n        burnRequests[seq].btcTxId = btcTxId;\\n        burnRequests[seq].status = RequestStatus.APPROVED;\\n        uint blockNo = block.number;\\n        burnRequests[seq].confirmedBlockNo = blockNo;\\n        request.btcTxId = btcTxId;\\n        burnRequestSeqMap[calcRequestHash(request)] = seq;\\n\\n        emit BurnConfirmed(\\n            request.seq,\\n            request.requester,\\n            request.amount,\\n            request.btcAddress,\\n            btcTxId,\\n            blockNo\\n        );\\n        return true;\\n    }\\n}\\n\"},\"MintFactoryIfView.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n//pragma experimental ABIEncoderV2;\\nimport \\\"Ownable.sol\\\";\\nimport \\\"MTokenControllerIf.sol\\\";\\n\\n/// @title MintFactoryIfView\\nabstract contract MintFactoryIfView {\\n    MTokenControllerIf public controller;\\n\\n    mapping(address =\\u003e string) public custodianBtcAddressForMerchant;\\n\\n    mapping(address =\\u003e string) public btcDepositAddressOfMerchant;\\n\\n    enum RequestStatus {PENDING, CANCELED, APPROVED, REJECTED}\\n    struct Request {\\n        address requester;\\n        uint amount;\\n        string btcAddress;\\n        string btcTxId;\\n        uint seq;\\n        uint requestBlockNo;\\n        uint confirmedBlockNo;\\n        RequestStatus status;\\n    }\\n\\n    mapping(bytes32 =\\u003e uint) public mintRequestSeqMap;\\n\\n    mapping(bytes32 =\\u003e uint) public burnRequestSeqMap;\\n\\n    Request[] public mintRequests;\\n\\n    Request[] public burnRequests;\\n\\n    function getMintRequest(uint seq)\\n    external\\n    view\\n    virtual\\n    returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status,\\n        bytes32 requestHash\\n    );\\n\\n    function getMintRequestsLength() virtual external view returns (uint length);\\n\\n    function getBurnRequest(uint seq)\\n    external\\n    view\\n    virtual\\n    returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status,\\n        bytes32 requestHash\\n    );\\n\\n    function getBurnRequestsLength() virtual external view returns (uint length);\\n\\n    function getPendingMintRequestV(bytes32 _requestHash)\\n    virtual\\n    view public returns (\\n        uint requestSeq,\\n        address requester,\\n        uint amount,\\n        string memory btcAddress,\\n        string memory btcTxId,\\n        uint requestBlockNo,\\n        uint confirmedBlockNo,\\n        string  memory status);\\n\\n\\n}\\n\"},\"MTokenControllerIf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"MemberMgrIf.sol\\\";\\nimport \\\"ERC20If.sol\\\";\\n/// @title ERC20ControllerViewIf\\nabstract contract ERC20ControllerViewIf {\\n    function blocked(address _who) virtual public view returns (bool);\\n\\n    function paused() virtual public view returns (bool);\\n}\\n\\n/// @title MTokenControllerIf\\nabstract contract MTokenControllerIf is MemberMgrIf, ERC20ControllerViewIf {\\n    function mint(address to, uint amount) virtual external returns (bool);\\n\\n    function burn(uint value) virtual external returns (bool);\\n\\n    function getMToken() virtual external returns (ERC20If);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"OwnableIf.sol\\\";\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable is OwnableIf {\\n    address public owner;\\n\\n    function _owner() view override public returns (address){\\n        return owner;\\n    }\\n\\n    //    event OwnershipRenounced(address indexed previousOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    //    /**\\n    //     * @dev Throws if called by any account other than the owner.\\n    //     */\\n    //    modifier onlyOwner() {\\n    //        require(msg.sender == owner);\\n    //        _;\\n    //    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    //   function renounceOwnership() public onlyOwner {\\n    //     emit OwnershipRenounced(owner);\\n    //     owner = address(0);\\n    //   }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) virtual public onlyOwner {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"invalid _newOwner\\\");\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n}\\n\\n\\n\"},\"OwnableIf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract OwnableIf {\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"not owner......\\\");\\n        _;\\n    }\\n\\n    function _owner() view virtual public returns (address);\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcDepositAddress\",\"type\":\"string\"}],\"name\":\"BtcDepositAddressOfMerchantSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"BurnConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcDepositAddress\",\"type\":\"string\"}],\"name\":\"CustodianBtcAddressForMerchantSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcDepositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcTxid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcDepositAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcTxid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"MintRequestCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"NewMintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"btcDepositAddressOfMerchant\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"burnRequestSeqMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"enum MintFactoryIfView.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"cancelMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"}],\"name\":\"confirmBurnRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"confirmMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract MTokenControllerIf\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"custodianBtcAddressForMerchant\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"getBurnRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestSeq\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"getMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestSeq\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestHash\",\"type\":\"bytes32\"}],\"name\":\"getPendingMintRequestV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestSeq\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mintRequestSeqMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedBlockNo\",\"type\":\"uint256\"},{\"internalType\":\"enum MintFactoryIfView.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20If\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"rejectMintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcTxId\",\"type\":\"string\"}],\"name\":\"requestMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"setCustodianBtcAddressForMerchant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"setMerchantBtcDepositAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MintFactory","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"://60a1f3bb19aa5fcfafe814bb6e7523581d321167acb5e70336b4bf07feeaf0d9"}]}