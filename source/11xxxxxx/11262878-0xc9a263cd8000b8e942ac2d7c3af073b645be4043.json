{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.6.0;\r\n\r\n\r\n contract ToGETher {\r\n        \r\n        struct User  {\r\n            address userAddress;\r\n            address referrerAddress;\r\n            address UpLinePartner;\r\n            uint partnersCount;\r\n            uint id;\r\n     }\r\n         \r\n        struct partner {\r\n            address userAddress;\r\n            address referrerAddress;\r\n            address UpLinePartner;\r\n         }\r\n         \r\n         \r\n        address public ownerWallet;  \r\n        uint private cost = 0.08 ether;\r\n        partner[] private partners;\r\n         \r\n         \r\n         \r\n    constructor() public {\r\n        ownerWallet = msg.sender; \r\n        User memory user = User({\r\n            id: 1,                    \r\n            userAddress: address (ownerWallet), \r\n            UpLinePartner: address(ownerWallet),\r\n            referrerAddress: address(ownerWallet),\r\n            partnersCount: uint(0)\r\n        });\r\n            users[ownerWallet] = user;\r\n            idToAddress[1] = ownerWallet;\r\n            lastUserId = lastUserId;\r\n        }\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerWallet, \"Only Owner\");\r\n        _;\r\n     \r\n     }\r\n     \r\n    function changeCostInWei(uint NewCost)public onlyOwner returns (bool){\r\n        cost = NewCost;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function setUser(address userAddress) public onlyOwner returns (bool){\r\n        require(!isUserExists(userAddress), \"User already exists\");\r\n        \r\n        address referrerAddress = ownerWallet;\r\n        address UpLinePartner = ownerWallet;\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            userAddress: address (userAddress),\r\n            referrerAddress: address (referrerAddress),\r\n            UpLinePartner: address(UpLinePartner),\r\n            partnersCount: uint(0)\r\n            \r\n });\r\n            users[userAddress] = user;\r\n            idToAddress[lastUserId] = userAddress;\r\n            lastUserId = lastUserId + 1;\r\n        \r\n            users[referrerAddress].partnersCount++;\r\n        \r\n    }\r\n    \r\n    function viewCost()public view  returns (uint){\r\n        return uint (cost);\r\n       \r\n      \r\n     }\r\n     \r\n    function viewContractbalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n     }\r\n    \r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, ownerWallet);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n         \r\n        registration(msg.sender,  referrerAddress);\r\n    }\r\n    \r\n    \r\n    \r\n    function registration ( address userAddress, address referrerAddress) private { \r\n         \r\n        address UpLinePartner;\r\n        userAddress = msg.sender;\r\n         \r\n        users[userAddress].referrerAddress = referrerAddress;\r\n        UpLinePartner = users[referrerAddress].referrerAddress;\r\n         \r\n        require(!isUserExists(userAddress), \"User already exists\");\r\n        require(msg.sender == userAddress, \"You cannot register using someone else's ETH address\");\r\n        require(referrerAddress != msg.sender, \"You cannot invite yourself\");\r\n        require(isUserExists(referrerAddress), \"Referrer not found\");\r\n        require(msg.value == cost, \"The amount of the contribution is indicated in the menu - Cost. The amount is indicated in Wei.\");\r\n          partners.push(partner(userAddress, referrerAddress, UpLinePartner));    \r\n          \r\n\r\n        uint32 size;\r\n           assembly {\r\n           size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n       \r\n       \r\n     \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            userAddress: msg.sender,\r\n            referrerAddress: address (referrerAddress),\r\n            UpLinePartner: address(UpLinePartner),\r\n            partnersCount: uint(0)\r\n            \r\n });\r\n            users[userAddress] = user;\r\n            idToAddress[lastUserId] = userAddress;\r\n            lastUserId = lastUserId + 1;\r\n        \r\n            users[referrerAddress].partnersCount++;\r\n        \r\n        address receiver;\r\n        address secondReceiverAddress;\r\n        uint partnersCount;\r\n        uint x = partnersCount % 4 ;\r\n         (x == 0);\r\n         \r\n         // Reinvest\r\n        if ( users[referrerAddress].partnersCount % 4 ==0 ) {\r\n        receiver = ownerWallet;\r\n        secondReceiverAddress = UpLinePartner;\r\n        \r\n        if (!address(uint160(receiver)).send(msg.value/2) ) {\r\n            return address(uint160(receiver)).transfer(address(this).balance/2); \r\n               }\r\n        if (!address(uint160(secondReceiverAddress)).send(msg.value)) {\r\n            return address(uint160(secondReceiverAddress)).transfer(address(this).balance); \r\n                }\r\n                \r\n        // The logic of the distribution of funds in normal conditions        \r\n        } else {    \r\n        \r\n        receiver = referrerAddress;\r\n        secondReceiverAddress = UpLinePartner;\r\n           \r\n        if (!address(uint160(receiver)).send(msg.value/2) ) {\r\n            return address(uint160(receiver)).transfer(address(this).balance/2); \r\n               }\r\n        if (!address(uint160(secondReceiverAddress)).send(msg.value)) {\r\n            return address(uint160(secondReceiverAddress)).transfer(address(this).balance); \r\n        \r\n           }\r\n    }\r\n     emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n        \r\n }\r\n \r\n \r\n        \r\n    function isUserExists(address userAddress) public view returns (bool) {\r\n            return (users[userAddress].id != 0);\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n   }\r\n\r\n    \r\n         \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) private userIds;\r\n    mapping(uint => address) private idToAddress;\r\n    mapping(address => uint) private balances; \r\n    \r\n    uint public lastUserId = 2;\r\n     \r\n     // EVENTS\r\n     \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n     \r\n     \r\n     \r\n }","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewCost\",\"type\":\"uint256\"}],\"name\":\"changeCostInWei\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"UpLinePartner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewContractbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ToGETher","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5dbfced902bdc4f9e3452b68880594d1ca5dfd49d22565530a2e91f52f025653"}]}