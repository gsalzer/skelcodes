{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: No License (None)\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\"Zero address not allowed\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract RequestBonusETH is Ownable {\r\n    \r\n    uint256 public fee = 0.00025 ether; // 0.00025 ETH\r\n    \r\n    address public system;          // system address may change fee amount\r\n    \r\n    address payable public company; // company address receive fee\r\n\r\n    mapping(address => address) vaultToken ; // vault => token;\r\n    \r\n    mapping (address => uint256) public companyRate;       // % the our company received as fee (with 2 decimals i.e. 1250 = 12.5%)\r\n    \r\n    mapping (address => uint256[]) private allowedAmount;   // amount of ETH that have to be send to request bonus\r\n    \r\n    mapping (address => address payable) public bonusOwners;\r\n    \r\n    mapping (address => bool) public isActive;\r\n    \r\n    mapping(address => mapping(address => uint256)) public paidETH; // token => user => paid ETH amount\r\n    \r\n    event TokenRequest(address indexed vault, address indexed user, uint256 amount);\r\n    \r\n    event CompanyRate(address indexed vault, uint256 rate);\r\n\r\n    modifier onlySystem() {\r\n        require(msg.sender == system || isOwner(), \"Caller is not the system\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _system, address payable _company) {\r\n        require(_company != address(0) && _system != address(0));\r\n        system = _system;\r\n        company = _company;\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n\r\n    // set our company rate in % that will be send to it as a fee\r\n    function setCompanyRate(address vault, uint256 _rate) external onlyOwner returns(bool) {\r\n        require(_rate <= 10000);\r\n        companyRate[vault] = _rate;\r\n        emit CompanyRate(vault, _rate);\r\n        return true;\r\n    }\r\n\r\n    function setSystem(address _system) external onlyOwner returns(bool) {\r\n        require(_system != address(0));\r\n        system = _system;\r\n        return true;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external onlySystem returns(bool) {\r\n        fee = _fee;\r\n        return true;\r\n    }\r\n\r\n    function setCompany(address payable _company) external onlyOwner returns(bool) {\r\n        require(_company != address(0));\r\n        company = _company;\r\n        return true;\r\n    }\r\n\r\n    function getAllowedAmount(address vault) external view returns(uint256[] memory) {\r\n        return allowedAmount[vault];\r\n    }\r\n    \r\n    function tokenRequest(address vault) public payable {\r\n        require(isActive[vault], \"Not active\");\r\n        require(fee < msg.value, \"Not enough value\");\r\n        address token = vaultToken[vault];\r\n        require(paidETH[token][msg.sender] == 0, \"You already participated in this bonus program\");\r\n\r\n        uint256 value = msg.value - fee;\r\n        require(isAllowedAmount(vault, value), \"Wrong value\");\r\n        paidETH[token][msg.sender] = value;\r\n        uint256 companyPart = value * companyRate[vault] / 10000 + fee;\r\n        safeTransferETH(company, companyPart);\r\n        safeTransferETH(bonusOwners[vault], msg.value - companyPart);\r\n        emit TokenRequest(vault, msg.sender, value);\r\n    }\r\n    \r\n\r\n    function isAllowedAmount(address vault, uint256 amount) internal view returns(bool) {\r\n        uint256 len = allowedAmount[vault].length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if(allowedAmount[vault][i] == amount) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function registerBonus(\r\n        address vault,\r\n        address token,              // token contract address\r\n        address payable bonusOwner, // owner of bonus program (who create bonus program)\r\n        uint256 rate,               // % the our company received as fee (with 2 decimals i.e. 1250 = 12.5%)\r\n        uint256[] memory amountETH  // amount of ETH that have to be send to request bonus\r\n    ) external onlySystem returns(bool) {\r\n        \r\n        require(bonusOwners[vault] == address(0) && bonusOwner != address(0) ,\"bonusOwner is not ok\");\r\n        vaultToken[vault] = token;\r\n        companyRate[vault] = rate;\r\n        bonusOwners[vault] = bonusOwner;\r\n        createOptions(vault, amountETH);\r\n        isActive[vault] = true;\r\n        return true;\r\n    }\r\n\r\n    // create set of options by customer (bonusOwner)\r\n    function createOptions(\r\n        address vault,              // token contract address\r\n        uint256[] memory amountETH // amount of ETH that have to be send to request bonus\r\n    ) public returns(bool) {\r\n        \r\n        require(msg.sender == bonusOwners[vault] || msg.sender == system, \"Caller is not the bonusOwners or system\");\r\n        if(allowedAmount[vault].length > 0) delete allowedAmount[vault];    // delete old allowedAmount if exist\r\n        allowedAmount[vault] = amountETH;\r\n        return true;\r\n    }\r\n\r\n    function setActiveBonus(address vault, bool active) external returns(bool) {\r\n        require(msg.sender == bonusOwners[vault], \"Caller is not the bonusOwners\");\r\n        isActive[vault] = active;\r\n        return true;\r\n    }\r\n\r\n    // allow bonus owner change address\r\n    function changeBonusOwner(address vault, address payable newBonusOwner) external returns(bool) {\r\n        require(newBonusOwner != address(0));\r\n        require(msg.sender == bonusOwners[vault], \"Caller is not the bonusOwners\");\r\n        bonusOwners[vault] = newBonusOwner;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_company\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CompanyRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusOwners\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newBonusOwner\",\"type\":\"address\"}],\"name\":\"changeBonusOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"companyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amountETH\",\"type\":\"uint256[]\"}],\"name\":\"createOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getAllowedAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bonusOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountETH\",\"type\":\"uint256[]\"}],\"name\":\"registerBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActiveBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"setCompany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setCompanyRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"}],\"name\":\"setSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"system\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"tokenRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RequestBonusETH","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008313451e2979c5b0aee967c6ba2131e04f69a731000000000000000000000000c56975a27b5cbfbc31edacbf0ffd9d0c9b3a77c4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5fdae4e72eb136777e43662d4e4e275f6d2bf59db5c9bd7b146a1997dc93fc86"}]}