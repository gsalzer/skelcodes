{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ncontract AccessControl {\\n    event GrantRole(bytes32 indexed role, address indexed addr);\\n    event RevokeRole(bytes32 indexed role, address indexed addr);\\n\\n    mapping(bytes32 => mapping(address => bool)) public hasRole;\\n\\n    modifier onlyAuthorized(bytes32 _role) {\\n        require(hasRole[_role][msg.sender], \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    function _grantRole(bytes32 _role, address _addr) internal {\\n        require(_addr != address(0), \\\"address = zero\\\");\\n\\n        hasRole[_role][_addr] = true;\\n\\n        emit GrantRole(_role, _addr);\\n    }\\n\\n    function _revokeRole(bytes32 _role, address _addr) internal {\\n        require(_addr != address(0), \\\"address = zero\\\");\\n\\n        hasRole[_role][_addr] = false;\\n\\n        emit RevokeRole(_role, _addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GasRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./interfaces/GasToken.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract GasRelayer is AccessControl {\\n    bytes32 public constant GAS_TOKEN_USER_ROLE =\\n        keccak256(abi.encodePacked(\\\"GAS_TOKEN_USER\\\"));\\n\\n    address public admin;\\n    address public gasToken;\\n\\n    constructor(address _gasToken) public {\\n        require(_gasToken != address(0), \\\"gas token = zero address\\\");\\n\\n        admin = msg.sender;\\n        gasToken = _gasToken;\\n\\n        _grantRole(GAS_TOKEN_USER_ROLE, admin);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        _;\\n    }\\n\\n    // @dev use CHI token from 1inch to burn gas token\\n    // https://medium.com/@1inch.exchange/1inch-introduces-chi-gastoken-d0bd5bb0f92b\\n    modifier useChi(uint _max) {\\n        uint gasStart = gasleft();\\n        _;\\n        uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n\\n        if (_max > 0) {\\n            GasToken(gasToken).freeUpTo(Math.min(_max, (gasSpent + 14154) / 41947));\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external onlyAdmin {\\n        require(_admin != address(0), \\\"admin = zero address\\\");\\n        admin = _admin;\\n    }\\n\\n    function authorized(address _addr) external view returns (bool) {\\n        return hasRole[GAS_TOKEN_USER_ROLE][_addr];\\n    }\\n\\n    function authorize(address _addr) external onlyAdmin {\\n        _grantRole(GAS_TOKEN_USER_ROLE, _addr);\\n    }\\n\\n    function unauthorize(address _addr) external onlyAdmin {\\n        _revokeRole(GAS_TOKEN_USER_ROLE, _addr);\\n    }\\n\\n    function setGasToken(address _gasToken) external onlyAdmin {\\n        require(_gasToken != address(0), \\\"gas token = zero address\\\");\\n        gasToken = _gasToken;\\n    }\\n\\n    function mintGasToken(uint _amount) external {\\n        GasToken(gasToken).mint(_amount);\\n    }\\n\\n    function transferGasToken(address _to, uint _amount) external onlyAdmin {\\n        GasToken(gasToken).transfer(_to, _amount);\\n    }\\n\\n    function relayTx(\\n        address _to,\\n        bytes calldata _data,\\n        uint _maxGasToken\\n    ) external onlyAuthorized(GAS_TOKEN_USER_ROLE) useChi(_maxGasToken) {\\n        (bool success, ) = _to.call(_data);\\n        require(success, \\\"relay failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/GasToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.11;\\n\\ninterface GasToken {\\n    function mint(uint amount) external;\\n\\n    function free(uint amount) external returns (bool);\\n\\n    function freeUpTo(uint amount) external returns (uint);\\n\\n    // ERC20\\n    function transfer(address _to, uint _amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GrantRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RevokeRole\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GAS_TOKEN_USER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasToken\",\"type\":\"uint256\"}],\"name\":\"relayTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasToken\",\"type\":\"address\"}],\"name\":\"setGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GasRelayer","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000004946c0e9f43f4dee607b0ef1fa1c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}