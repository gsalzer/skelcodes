{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n  ________            ___    __                    __                 ____             __                   __\r\n /_  __/ /_  ___     /   |  / /_  _________  _____/ /_  ___  _____   / __ \\_________  / /_____  _________  / /\r\n  / / / __ \\/ _ \\   / /| | / __ \\/ ___/ __ \\/ ___/ __ \\/ _ \\/ ___/  / /_/ / ___/ __ \\/ __/ __ \\/ ___/ __ \\/ / \r\n / / / / / /  __/  / ___ |/ /_/ (__  ) /_/ / /  / /_/ /  __/ /     / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /  \r\n/_/ /_/ /_/\\___/  /_/  |_/_.___/____/\\____/_/  /_.___/\\___/_/     /_/   /_/   \\____/\\__/\\____/\\___/\\____/_/   \r\n\r\n  _____             __  _             _____          __               __ \r\n / ___/______ ___ _/ /_(_)__  ___    / ___/__  ___  / /________ _____/ /_\r\n/ /__/ __/ -_) _ `/ __/ / _ \\/ _ \\  / /__/ _ \\/ _ \\/ __/ __/ _ `/ __/ __/\r\n\\___/_/  \\__/\\_,_/\\__/_/\\___/_//_/  \\___/\\___/_//_/\\__/_/  \\_,_/\\__/\\__/ \r\n\r\n*/\r\n\r\npragma solidity ^0.7.0;\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    function unPauseTransferForever() external;\r\n    function uniswapV2Pair() external returns(address);\r\n}\r\ninterface IUNIv2 {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n    external \r\n    payable \r\n    returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\ninterface IUnicrypt {\r\n    event onDeposit(address, uint256, uint256);\r\n    event onWithdraw(address, uint256);\r\n    function depositToken(address token, uint256 amount, uint256 unlock_date) external payable; \r\n    function withdrawToken(address token, uint256 amount) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract AbsorberPresale is Context, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    IERC20 public ABS;\r\n    address public _burnPool = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    IUNIv2 constant uniswap =  IUNIv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Factory constant uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUnicrypt constant unicrypt = IUnicrypt(0x17e00383A843A9922bCA3B280C0ADE9f8BA48449);\r\n    \r\n    uint public tokensBought;\r\n    bool public isStopped = false;\r\n    bool public teamClaimed = false;\r\n    bool public moonMissionStarted = false;\r\n    bool public isRefundEnabled = false;\r\n    bool public presaleStarted = false;\r\n    bool justTrigger = false;\r\n    uint constant teamTokens = 70000 ether;\r\n\r\n    address payable owner;\r\n    address payable constant owner1 = 0xad5395627309774916B08b721C228f18D9973530;\r\n    address payable constant owner2 = 0xe1cDA441ffA203eCA692E3398f3C3346Ee2B786e;\r\n    address payable constant owner3 = 0xe99AbaEbE6Ed58A6b61C7eb3791D149de7791Fd5;\r\n    \r\n    address public pool;\r\n    \r\n    uint256 public liquidityUnlock;\r\n    \r\n    uint256 public ethSent;\r\n    uint256 constant tokensPerETH = 800;\r\n    uint256 public lockedLiquidityAmount;\r\n    uint256 public timeTowithdrawTeamTokens;\r\n    uint256 public refundTime; \r\n    mapping(address => uint) ethSpent;\r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; \r\n        liquidityUnlock = block.timestamp.add(365 days);\r\n        refundTime = block.timestamp.add(7 days);\r\n    }\r\n    \r\n    \r\n    receive() external payable {\r\n        \r\n        buyTokens();\r\n    }\r\n    \r\n    function SUPER_DUPER_EMERGENCY_ALLOW_REFUNDS_DO_NOT_FUCKING_CALL_IT_FOR_FUN() external onlyOwner nonReentrant {\r\n        isRefundEnabled = true;\r\n        isStopped = true;\r\n    }\r\n    \r\n    function getRefund() external nonReentrant {\r\n        require(msg.sender == tx.origin);\r\n        require(!justTrigger);\r\n        // Refund should be enabled by the owner OR 7 days passed \r\n        require(isRefundEnabled || block.timestamp >= refundTime,\"Cannot refund\");\r\n        address payable user = msg.sender;\r\n        uint256 amount = ethSpent[user];\r\n        ethSpent[user] = 0;\r\n        user.transfer(amount);\r\n    }\r\n    \r\n    function lockWithUnicrypt() external onlyOwner  {\r\n        pool = ABS.uniswapV2Pair();\r\n        IERC20 liquidityTokens = IERC20(pool);\r\n        uint256 liquidityBalance = liquidityTokens.balanceOf(address(this));\r\n        uint256 timeToLuck = liquidityUnlock;\r\n        liquidityTokens.approve(address(unicrypt), liquidityBalance);\r\n\r\n        unicrypt.depositToken{value: 0} (pool, liquidityBalance, timeToLuck);\r\n        lockedLiquidityAmount = lockedLiquidityAmount.add(liquidityBalance);\r\n    }\r\n    \r\n    function withdrawFromUnicrypt(uint256 amount) external onlyOwner {\r\n        unicrypt.withdrawToken(pool, amount);\r\n    }\r\n    \r\n    function withdrawTeamTokens() external onlyOwner nonReentrant {\r\n        require(teamClaimed);\r\n        require(block.timestamp >= timeTowithdrawTeamTokens, \"Cannot withdraw yet\");\r\n        uint256 tokesToClaim = 7000 ether;\r\n        uint256 amount = tokesToClaim.div(3); \r\n        ABS.transfer(owner1, amount);\r\n        ABS.transfer(owner2, amount);\r\n        ABS.transfer(owner3, amount);\r\n        timeTowithdrawTeamTokens = block.timestamp.add(10 days);\r\n    }\r\n\r\n    function setABS(IERC20 addr) external onlyOwner nonReentrant {\r\n        require(ABS == IERC20(address(0)), \"You can set the address only once\");\r\n        ABS = addr;\r\n    }\r\n    \r\n    function startPresale() external onlyOwner { \r\n        presaleStarted = true;\r\n    }\r\n    \r\n     function pausePresale() external onlyOwner { \r\n        presaleStarted = false;\r\n    }\r\n\r\n    function buyTokens() public payable nonReentrant {\r\n        require(msg.sender == tx.origin);\r\n        require(presaleStarted == true, \"Presale is paused, do not send ETH\");\r\n        require(ABS != IERC20(address(0)), \"Main contract address not set\");\r\n        require(!isStopped, \"Presale stopped by contract, do not send ETH\");\r\n        require(msg.value >= 0.1 ether, \"You sent less than 0.1 ETH\");\r\n        require(msg.value <= 3 ether, \"You sent more than 3 ETH\");\r\n        require(ethSent < 349 ether, \"Hard cap reached\");\r\n        require (msg.value.add(ethSent) <= 349 ether, \"Hardcap will be reached\");\r\n        require(ethSpent[msg.sender].add(msg.value) <= 3 ether, \"You cannot buy more\");\r\n        uint256 tokens = msg.value.mul(tokensPerETH);\r\n        require(ABS.balanceOf(address(this)) >= tokens, \"Not enough tokens in the contract\");\r\n        ethSpent[msg.sender] = ethSpent[msg.sender].add(msg.value);\r\n        tokensBought = tokensBought.add(tokens);\r\n        ethSent = ethSent.add(msg.value);\r\n        ABS.transfer(msg.sender, tokens);\r\n    }\r\n   \r\n    function userEthSpenttInPresale(address user) external view returns(uint){\r\n        return ethSpent[user];\r\n    }\r\n    \r\n \r\n    \r\n    function claimTeamFeeAndAddLiquidity() external onlyOwner  {\r\n       require(!teamClaimed);\r\n       uint256 amountETH = address(this).balance.mul(10).div(100); \r\n       uint256 amountETH2 = address(this).balance.mul(15).div(100); \r\n       uint256 amountETH3 = address(this).balance.mul(8).div(100); \r\n       owner1.transfer(amountETH);\r\n       owner2.transfer(amountETH2);\r\n       owner3.transfer(amountETH3);\r\n       teamClaimed = true;\r\n       \r\n       addLiquidity();\r\n    }\r\n        \r\n    function addLiquidity() internal {\r\n        uint256 ETH = address(this).balance;\r\n        uint256 tokensForUniswap = address(this).balance.mul(675);\r\n        uint256 tokensToBurn = ABS.balanceOf(address(this)).sub(tokensForUniswap).sub(teamTokens);\r\n        ABS.unPauseTransferForever();\r\n        ABS.approve(address(uniswap), tokensForUniswap);\r\n        uniswap.addLiquidityETH\r\n        { value: ETH }\r\n        (\r\n            address(ABS),\r\n            tokensForUniswap,\r\n            tokensForUniswap,\r\n            ETH,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n       \r\n       if (tokensToBurn > 0){\r\n           ABS.transfer(_burnPool ,tokensToBurn);\r\n       }\r\n       \r\n       justTrigger = true;\r\n       \r\n        if(!isStopped)\r\n            isStopped = true;\r\n            \r\n   }\r\n    \r\n    function withdrawLockedTokensAfter1Year(address tokenAddress, uint256 tokenAmount) external onlyOwner  {\r\n        require(block.timestamp >= liquidityUnlock, \"You cannot withdraw yet\");\r\n        IERC20(tokenAddress).transfer(owner, tokenAmount);\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ABS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_DUPER_EMERGENCY_ALLOW_REFUNDS_DO_NOT_FUCKING_CALL_IT_FOR_FUN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTeamFeeAndAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefundEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithUnicrypt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonMissionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setABS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTowithdrawTeamTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userEthSpenttInPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromUnicrypt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedTokensAfter1Year\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AbsorberPresale","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9589229824c2a0f8d89dae574470a1b33b28376984f6d6d7e2d97ab7324c2b1d"}]}