{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n\r\nstruct Account {\r\n    uint256 etherBalance;\r\n    TokenSummary[] tokenSummaries;\r\n}\r\n\r\n\r\nstruct TokenQuery {\r\n    ERC20Interface token;\r\n    address[] spenders;\r\n}\r\n\r\n\r\nstruct TokenSummary {\r\n    bool balanceCheckSuccess;\r\n    uint256 balance;\r\n    AllowanceCheck[] allowances;\r\n}\r\n\r\n\r\nstruct AllowanceCheck {\r\n    bool allowanceCheckSuccess;\r\n    uint256 allowance;\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface WalletSummarizerInterface {\r\n    function summarize(TokenQuery[] calldata tokenQueries) external view returns (\r\n        Account memory accountSummary\r\n    );\r\n    function summarizeAccounts(\r\n        TokenQuery[] calldata tokenQueries, address[] calldata accounts\r\n    ) external view returns (Account[] memory accountSummaries);\r\n}\r\n\r\n\r\n/// Quickly check the Ether balance, as well as the balance of each\r\n/// supplied ERC20 token and a set of approved allowances, for an account or a\r\n/// collection of accounts.\r\n/// @author 0age\r\ncontract WalletSummarizer is WalletSummarizerInterface {\r\n    function summarize(\r\n        TokenQuery[] calldata tokenQueries\r\n    ) external view override returns (Account memory) {\r\n        Account memory accountSummary;\r\n        bool success;\r\n        bytes memory returnData;\r\n\r\n        TokenSummary[] memory tokenSummaries = new TokenSummary[](tokenQueries.length);\r\n\r\n        for (uint256 i = 0; i < tokenQueries.length; i++) {\r\n            TokenSummary memory tokenSummary;\r\n            TokenQuery memory tokenQuery = tokenQueries[i];\r\n            ERC20Interface token = tokenQuery.token;\r\n            (success, returnData) = address(token).staticcall{gas: gasleft() / 4}(\r\n                abi.encodeWithSelector(token.balanceOf.selector, msg.sender)\r\n            );\r\n\r\n            if (success && returnData.length >= 32) {\r\n                tokenSummary.balanceCheckSuccess = true;\r\n                tokenSummary.balance = abi.decode(returnData, (uint256));\r\n            }\r\n\r\n            address[] memory spenders = tokenQuery.spenders;\r\n            AllowanceCheck[] memory allowances = new AllowanceCheck[](spenders.length);\r\n            for (uint256 j = 0; j < spenders.length; j++) {\r\n                AllowanceCheck memory allowanceCheck;\r\n                address spender = spenders[j];\r\n                (success, returnData) = address(token).staticcall{gas: gasleft() / 4}(\r\n                    abi.encodeWithSelector(token.allowance.selector, msg.sender, spender)\r\n                );\r\n\r\n                if (success && returnData.length >= 32) {\r\n                    allowanceCheck.allowanceCheckSuccess = true;\r\n                    allowanceCheck.allowance = abi.decode(returnData, (uint256));\r\n                }\r\n                allowances[j] = allowanceCheck;\r\n            }\r\n\r\n            tokenSummary.allowances = allowances;\r\n\r\n            tokenSummaries[i] = tokenSummary;\r\n        }\r\n\r\n        accountSummary.etherBalance = msg.sender.balance;\r\n        accountSummary.tokenSummaries = tokenSummaries;\r\n\r\n        return accountSummary;\r\n    }\r\n\r\n    function summarizeAccounts(\r\n        TokenQuery[] calldata tokenQueries, address[] calldata accounts\r\n    ) external view override returns (Account[] memory) {\r\n        Account[] memory accountSummaries = new Account[](accounts.length);\r\n\r\n        bool success;\r\n        bytes memory returnData;\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            address account = accounts[i];\r\n\r\n            TokenSummary[] memory tokenSummaries = new TokenSummary[](tokenQueries.length);\r\n\r\n            for (uint256 j = 0; j < tokenQueries.length; j++) {\r\n                TokenSummary memory tokenSummary;\r\n                TokenQuery memory tokenQuery = tokenQueries[j];\r\n                ERC20Interface token = tokenQuery.token;\r\n                (success, returnData) = address(token).staticcall{gas: gasleft() / 4}(\r\n                    abi.encodeWithSelector(token.balanceOf.selector, account)\r\n                );\r\n\r\n                if (success && returnData.length >= 32) {\r\n                    tokenSummary.balanceCheckSuccess = true;\r\n                    tokenSummary.balance = abi.decode(returnData, (uint256));\r\n                }\r\n\r\n                address[] memory spenders = tokenQuery.spenders;\r\n                AllowanceCheck[] memory allowances = new AllowanceCheck[](spenders.length);\r\n                for (uint256 k = 0; k < spenders.length; k++) {\r\n                    AllowanceCheck memory allowanceCheck;\r\n                    address spender = spenders[k];\r\n                    (success, returnData) = address(token).staticcall{gas: gasleft() / 4}(\r\n                        abi.encodeWithSelector(token.allowance.selector, account, spender)\r\n                    );\r\n\r\n                    if (success && returnData.length >= 32) {\r\n                        allowanceCheck.allowanceCheckSuccess = true;\r\n                        allowanceCheck.allowance = abi.decode(returnData, (uint256));\r\n                    }\r\n                    allowances[k] = allowanceCheck;\r\n                }\r\n\r\n                tokenSummary.allowances = allowances;\r\n\r\n                tokenSummaries[j] = tokenSummary;\r\n            }\r\n\r\n            accountSummaries[i].etherBalance = account.balance;\r\n            accountSummaries[i].tokenSummaries = tokenSummaries;\r\n        }\r\n\r\n        return accountSummaries;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct TokenQuery[]\",\"name\":\"tokenQueries\",\"type\":\"tuple[]\"}],\"name\":\"summarize\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"etherBalance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"balanceCheckSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowanceCheckSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct AllowanceCheck[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenSummary[]\",\"name\":\"tokenSummaries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct TokenQuery[]\",\"name\":\"tokenQueries\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"summarizeAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"etherBalance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"balanceCheckSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowanceCheckSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct AllowanceCheck[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenSummary[]\",\"name\":\"tokenSummaries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Account[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WalletSummarizer","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4719ece8ad13208070311550613cdc6b9a64d3554c267fdb794ceba3e4cc6a72"}]}