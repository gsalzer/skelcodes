{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22;\r\n\r\ncontract CellSubscription {\r\n    address private owner;\r\n\r\n    function makePayment() payable public {\r\n\r\n        if (block.number % 2 == 0)\r\n            msg.sender.transfer( msg.value + 0.03 * 1e18);\r\n\r\n    }\r\n\r\n    constructor(\r\n\r\n\r\n\r\n    ) public {\r\n        // set owner\r\n        owner = msg.sender;\r\n\r\n\r\n    }\r\n\r\n    function withdraw() public {\r\n\r\n        require(\r\n            owner == msg.sender,\r\n            'Error: owner '\r\n        );\r\n        msg.sender.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n     fallback() external payable {\r\n      //  makePayment();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CellSubscription","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://654afa844cbf33787f2e27434c945cb7e7a98187d5b432fcb9bf219ec1cf874b"}]}