{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/InterestRateInterface.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface InterestRateInterface {\r\n\r\n    /**\r\n      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\r\n      *\r\n      * @param dmmTokenId The DMMA whose interest should be retrieved\r\n      * @param totalSupply The total supply fot he DMM token\r\n      * @param activeSupply The supply that's currently being lent by users\r\n      * @return The interest rate in APY, which is a number with 18 decimals\r\n      */\r\n    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUnderlyingTokenValuator.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUnderlyingTokenValuator {\r\n\r\n    /**\r\n      * @dev Gets the tokens value in terms of USD.\r\n      *\r\n      * @return The value of the `amount` of `token`, as a number with the same number of decimals as `amount` passed\r\n      *         in to this function.\r\n      */\r\n    function getTokenValue(address token, uint amount) external view returns (uint);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Blacklistable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Allows accounts to be blacklisted by the owner of the contract.\r\n *\r\n *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\r\n */\r\ncontract Blacklistable is Ownable {\r\n\r\n    string public constant BLACKLISTED = \"BLACKLISTED\";\r\n\r\n    mapping(address => bool) internal blacklisted;\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator of this contract\r\n    */\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == owner(), \"MUST_BE_BLACKLISTER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(blacklisted[account] == false, BLACKLISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\r\n    */\r\n    function checkNotBlacklisted(address account) public view {\r\n        require(!blacklisted[account], BLACKLISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds `account` to blacklist\r\n     *\r\n     * @param account The address to blacklist\r\n    */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     *\r\n     * @param account The address to remove from the blacklist\r\n    */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IDmmController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface IDmmController {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets the new address that will serve as the guardian for this controller.\r\n     *\r\n     * @param newGuardian   The new address that will serve as the guardian for this controller.\r\n     */\r\n    function setGuardian(address newGuardian) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmTokenFactory` interface.\r\n     *\r\n     * @param newDmmTokenFactory  The new contract that implements the `DmmTokenFactory` interface.\r\n     */\r\n    function setDmmTokenFactory(address newDmmTokenFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `DmmEtherFactory` interface.\r\n     *\r\n     * @param newDmmEtherFactory  The new contract that implements the `DmmEtherFactory` interface.\r\n     */\r\n    function setDmmEtherFactory(address newDmmEtherFactory) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRate` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @return  All of the DMM token IDs that are currently in the ecosystem. NOTE: this is an unfiltered list.\r\n     */\r\n    function getDmmTokenIds() external view returns (uint[] memory);\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token contract address for the provided DMM token ID. For example, `1` returns the mToken\r\n     *      contract address for that token ID.\r\n     */\r\n    function getDmmTokenAddressByDmmTokenId(uint dmmTokenId) external view returns (address);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    function underlyingTokenValuator() external view returns (IUnderlyingTokenValuator);\r\n\r\n}\r\n\r\n// File: contracts/utils/IERC20WithDecimals.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20WithDecimals {\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721TokenReceiver.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC721TokenReceiver {\r\n\r\n    /**\r\n     * @notice  Handles the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw\r\n     *      to revert and reject the transfer. Return of other than the magic value MUST result in the transaction\r\n     *      being reverted. Note: the contract address is always the message sender.\r\n     *\r\n     * @param _operator The address which called `safeTransferFrom` function\r\n     * @param _from     The address which previously owned the token\r\n     * @param _tokenId  The NFT identifier which is being transferred\r\n     * @param _data     Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless a reversion\r\n     *                  occurs.\r\n     */\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/interfaces/IERC721.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev ERC-721 non-fungible token standard. See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\r\n */\r\ninterface IERC721 {\r\n\r\n    /**\r\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n     * transfer, the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n     * address indicates there is no approved address. When a Transfer event emits, this also\r\n     * indicates that the approved address for that NFT (if any) is reset to none.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n     * all NFTs of the owner.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `_to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address.\r\n     * @notice This works identically to the other function with an extra data parameter, except this\r\n     * function just sets data to \"\"\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n     * address. Throws if `_tokenId` is not a valid NFT.\r\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n     * they mayb be permanently lost.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param _approved The new approved NFT controller.\r\n     * @param _tokenId The NFT to approve.\r\n     */\r\n    function approve(\r\n        address _approved,\r\n        uint256 _tokenId\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice The contract MUST allow multiple operators per owner.\r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(\r\n        address _operator,\r\n        bool _approved\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param _owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n     * invalid, and queries about them do throw.\r\n     * @param _tokenId The identifier for an NFT.\r\n     * @return Address of _tokenId owner.\r\n     */\r\n    function ownerOf(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId The NFT to find the approved address for.\r\n     * @return Address that _tokenId is approved for.\r\n     */\r\n    function getApproved(\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    /**\r\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n     * @param _owner The address that owns the NFTs.\r\n     * @param _operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerStakingV1Initializable.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IAssetIntroducerStakingV1Initializable {\r\n\r\n    function initialize(\r\n        address owner,\r\n        address guardian,\r\n        address assetIntroducerProxy,\r\n        address dmgIncentivesPool\r\n    ) external;\r\n\r\n    function initializeOwnables(\r\n        address owner,\r\n        address guardian\r\n    ) external;\r\n\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IOwnableOrGuardian.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * NOTE:    THE STATE VARIABLES IN THIS CONTRACT CANNOT CHANGE NAME OR POSITION BECAUSE THIS CONTRACT IS USED IN\r\n *          UPGRADEABLE CONTRACTS.\r\n */\r\ncontract IOwnableOrGuardian is Initializable {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event GuardianTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier onlyOwnerOrGuardian {\r\n        require(\r\n            msg.sender == _owner || msg.sender == _guardian,\r\n            \"OwnableOrGuardian: UNAUTHORIZED_OWNER_OR_GUARDIAN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"OwnableOrGuardian: UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n    // *********************************************\r\n    // ***** State Variables DO NOT CHANGE OR MOVE\r\n    // *********************************************\r\n\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n    address internal _owner;\r\n    address internal _guardian;\r\n    // ******************************\r\n    // ***** DO NOT CHANGE OR MOVE\r\n    // ******************************\r\n\r\n    // ******************************\r\n    // ***** Misc Functions\r\n    // ******************************\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function guardian() external view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Admin Functions\r\n    // ******************************\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian\r\n    )\r\n    public\r\n    initializer {\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function transferOwnership(\r\n        address __owner\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __owner != address(0),\r\n            \"OwnableOrGuardian::transferOwnership: INVALID_OWNER\"\r\n        );\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferGuardian(\r\n        address __guardian\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            __guardian != address(0),\r\n            \"OwnableOrGuardian::transferGuardian: INVALID_OWNER\"\r\n        );\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function renounceGuardian() public onlyOwnerOrGuardian {\r\n        _transferGuardian(address(0));\r\n    }\r\n\r\n    // ******************************\r\n    // ***** Internal Functions\r\n    // ******************************\r\n\r\n    function _transferOwnership(\r\n        address __owner\r\n    )\r\n    internal {\r\n        address previousOwner = _owner;\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(previousOwner, __owner);\r\n    }\r\n\r\n    function _transferGuardian(\r\n        address __guardian\r\n    )\r\n    internal {\r\n        address previousGuardian = _guardian;\r\n        _guardian = __guardian;\r\n        emit GuardianTransferred(previousGuardian, __guardian);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/governance/dmg/IDMGToken.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IDMGToken {\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    // *************************\r\n    // ***** Functions\r\n    // *************************\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint128);\r\n\r\n    function getCurrentVotes(address account) external view returns (uint128);\r\n\r\n    function delegates(address delegator) external view returns (address);\r\n\r\n    function burn(uint amount) external returns (bool);\r\n\r\n    function approveBySig(\r\n        address spender,\r\n        uint rawAmount,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerData is Initializable, IOwnableOrGuardian {\r\n\r\n    // *************************\r\n    // ***** Constants\r\n    // *************************\r\n\r\n    // *************************\r\n    // ***** V1 State Variables\r\n    // *************************\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    AssetIntroducerStateV1 internal _assetIntroducerStateV1;\r\n\r\n    ERC721StateV1 internal _erc721StateV1;\r\n\r\n    VoteStateV1 internal _voteStateV1;\r\n\r\n    // *************************\r\n    // ***** Data Structures\r\n    // *************************\r\n\r\n    enum AssetIntroducerType {\r\n        PRINCIPAL, AFFILIATE\r\n    }\r\n\r\n    struct AssetIntroducerStateV1 {\r\n        /// The timestamp at which this contract was initialized\r\n        uint64 initTimestamp;\r\n\r\n        /// True if the DMM Foundation purchased its token for the bootstrapped pool, false otherwise.\r\n        bool isDmmFoundationSetup;\r\n\r\n        /// Total amount of DMG locked in this contract\r\n        uint128 totalDmgLocked;\r\n\r\n        /// For calculating the results of off-chain signature requests\r\n        bytes32 domainSeparator;\r\n\r\n        /// Address of the DMG token\r\n        address dmg;\r\n\r\n        /// Address of the DMM Controller\r\n        address dmmController;\r\n\r\n        /// Address of the DMM token valuator, which gets the USD value of a token\r\n        address underlyingTokenValuator;\r\n\r\n        /// Address of the implementation for the discount\r\n        address assetIntroducerDiscount;\r\n\r\n        /// Address of the implementation for the staking purchaser contract. Used to buy NFTs at a steep discount by\r\n        /// staking mTokens.\r\n        address stakingPurchaser;\r\n\r\n        /// Mapping from NFT ID to the asset introducer struct.\r\n        mapping(uint => AssetIntroducer) idToAssetIntroducer;\r\n\r\n        /// Mapping from country code to asset introducer type to token IDs\r\n        mapping(bytes3 => mapping(uint8 => uint[])) countryCodeToAssetIntroducerTypeToTokenIdsMap;\r\n\r\n        /// A mapping from the country code to asset introducer type to the cost needed to buy one. The cost is represented\r\n        /// in USD (with 18 decimals) and is purchased using DMG, so a conversion is needed using Chainlink.\r\n        mapping(bytes3 => mapping(uint8 => uint96)) countryCodeToAssetIntroducerTypeToPriceUsd;\r\n\r\n        /// The dollar amount that has actually been deployed by the asset introducer\r\n        mapping(uint => mapping(address => uint)) tokenIdToUnderlyingTokenToWithdrawnAmount;\r\n\r\n        /// Mapping for the count of each user's off-chain signed messages. 0-indexed.\r\n        mapping(address => uint) ownerToNonceMap;\r\n    }\r\n\r\n    struct ERC721StateV1 {\r\n        /// Total number of NFTs created\r\n        uint64 totalSupply;\r\n\r\n        /// The proxy address created by OpenSea, which is used to enable a smoother trading experience\r\n        address openSeaProxyRegistry;\r\n\r\n        /// The last token ID in the linked list.\r\n        uint lastTokenId;\r\n\r\n        /// The base URI for getting NFT information by token ID.\r\n        string baseURI;\r\n\r\n        /// Mapping of all token IDs. Works as a linked list such that previous key --> next value. The 0th key in the\r\n        /// list is LINKED_LIST_GUARD.\r\n        mapping(uint => uint) allTokens;\r\n\r\n        /// Mapping from NFT ID to owner address.\r\n        mapping(uint256 => address) idToOwnerMap;\r\n\r\n        /// Mapping from NFT ID to approved address.\r\n        mapping(uint256 => address) idToSpenderMap;\r\n\r\n        /// Mapping from owner to an operator that can spend all of owner's NFTs.\r\n        mapping(address => mapping(address => bool)) ownerToOperatorToIsApprovedMap;\r\n\r\n        /// Mapping from owner address to all owned token IDs. Works as a linked list such that previous key --> next value.\r\n        /// The 0th key in the list is LINKED_LIST_GUARD.\r\n        mapping(address => mapping(uint => uint)) ownerToTokenIds;\r\n\r\n        /// Mapping from owner address to a count of all owned NFTs.\r\n        mapping(address => uint32) ownerToTokenCount;\r\n\r\n        /// Mapping from an interface to whether or not it's supported.\r\n        mapping(bytes4 => bool) interfaceIdToIsSupportedMap;\r\n    }\r\n\r\n    /// Used for storing information about voting\r\n    struct VoteStateV1 {\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => mapping(uint64 => Checkpoint)) ownerToCheckpointIndexToCheckpointMap;\r\n        /// Taken from the DMG token implementation\r\n        mapping(address => uint64) ownerToCheckpointCountMap;\r\n    }\r\n\r\n    /// Tightly-packed, this data structure is 2 slots; 64 bytes\r\n    struct AssetIntroducer {\r\n        bytes3 countryCode;\r\n        AssetIntroducerType introducerType;\r\n        /// True if the asset introducer has been purchased yet, false if it hasn't and is thus\r\n        bool isOnSecondaryMarket;\r\n        /// True if the asset introducer can withdraw tokens from mToken deposits, false if it cannot yet. This value\r\n        /// must only be changed to `true` via governance vote\r\n        bool isAllowedToWithdrawFunds;\r\n        /// 1-based index at which the asset introducer was created. Used for optics\r\n        uint16 serialNumber;\r\n        uint96 dmgLocked;\r\n        /// How much this asset introducer can manage\r\n        uint96 dollarAmountToManage;\r\n        uint tokenId;\r\n    }\r\n\r\n    /// Used for tracking delegation and number of votes each user has at a given block height.\r\n    struct Checkpoint {\r\n        uint64 fromBlock;\r\n        uint128 votes;\r\n    }\r\n\r\n    /// Used to prevent the \"stack too deep\" error and make code more readable\r\n    struct DmgApprovalStruct {\r\n        address spender;\r\n        uint rawAmount;\r\n        uint nonce;\r\n        uint expiry;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    struct DiscountStruct {\r\n        uint64 initTimestamp;\r\n    }\r\n\r\n    // *************************\r\n    // ***** Modifiers\r\n    // *************************\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n    /// Enforces that an NFT has NOT been sold to a user yet\r\n    modifier requireIsPrimaryMarketNft(uint __tokenId) {\r\n        require(\r\n            !_assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_SECONDARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /// Enforces that an NFT has been sold to a user\r\n    modifier requireIsSecondaryMarketNft(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isOnSecondaryMarket,\r\n            \"AssetIntroducerData: IS_PRIMARY_MARKET\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsValidNft(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] != address(0),\r\n            \"AssetIntroducerData: INVALID_NFT\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsNftOwner(uint __tokenId) {\r\n        require(\r\n            _erc721StateV1.idToOwnerMap[__tokenId] == msg.sender,\r\n            \"AssetIntroducerData: INVALID_NFT_OWNER\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireCanWithdrawFunds(uint __tokenId) {\r\n        require(\r\n            _assetIntroducerStateV1.idToAssetIntroducer[__tokenId].isAllowedToWithdrawFunds,\r\n            \"AssetIntroducerData: NFT_NOT_ACTIVATED\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireIsStakingPurchaser() {\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser != address(0),\r\n            \"AssetIntroducerData: STAKING_PURCHASER_NOT_SETUP\"\r\n        );\r\n\r\n        require(\r\n            _assetIntroducerStateV1.stakingPurchaser == msg.sender,\r\n            \"AssetIntroducerData: INVALID_SENDER_FOR_STAKING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IAssetIntroducerV1 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event AssetIntroducerBought(uint indexed tokenId, address indexed buyer, address indexed recipient, uint dmgAmount);\r\n    event AssetIntroducerActivationChanged(uint indexed tokenId, bool isActivated);\r\n    event AssetIntroducerCreated(uint indexed tokenId, string countryCode, AssetIntroducerData.AssetIntroducerType introducerType, uint serialNumber);\r\n    event AssetIntroducerDiscountChanged(address indexed oldAssetIntroducerDiscount, address indexed newAssetIntroducerDiscount);\r\n    event AssetIntroducerDollarAmountToManageChange(uint indexed tokenId, uint oldDollarAmountToManage, uint newDollarAmountToManage);\r\n    event AssetIntroducerPriceChanged(string indexed countryCode, AssetIntroducerData.AssetIntroducerType indexed introducerType, uint oldPriceUsd, uint newPriceUsd);\r\n    event BaseURIChanged(string newBaseURI);\r\n    event CapitalDeposited(uint indexed tokenId, address indexed token, uint amount);\r\n    event CapitalWithdrawn(uint indexed tokenId, address indexed token, uint amount);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n    event InterestPaid(uint indexed tokenId, address indexed token, uint amount);\r\n    event SignatureValidated(address indexed signer, uint nonce);\r\n    event StakingPurchaserChanged(address indexed oldStakingPurchaser, address indexed newStakingPurchaser);\r\n\r\n    // *************************\r\n    // ***** Admin Functions\r\n    // *************************\r\n\r\n    function createAssetIntroducersForPrimaryMarket(\r\n        string[] calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType[] calldata introducerType\r\n    ) external returns (uint[] memory);\r\n\r\n    function setDollarAmountToManageByTokenId(\r\n        uint tokenId,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setDollarAmountToManageByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint dollarAmountToManage\r\n    ) external;\r\n\r\n    function setAssetIntroducerDiscount(\r\n        address assetIntroducerDiscount\r\n    ) external;\r\n\r\n    function setAssetIntroducerPrice(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint priceUsd\r\n    ) external;\r\n\r\n    function activateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function setStakingPurchaser(\r\n        address stakingPurchaser\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @return  The timestamp at which this contract was created\r\n     */\r\n    function initTimestamp() external view returns (uint64);\r\n\r\n    function stakingPurchaser() external view returns (address);\r\n\r\n    function openSeaProxyRegistry() external view returns (address);\r\n\r\n    /**\r\n     * @return  The domain separator used in off-chain signatures. See EIP 712 for more:\r\n     *          https://eips.ethereum.org/EIPS/eip-712\r\n     */\r\n    function domainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @return  The address of the DMG token\r\n     */\r\n    function dmg() external view returns (address);\r\n\r\n    function dmmController() external view returns (address);\r\n\r\n    function underlyingTokenValuator() external view returns (address);\r\n\r\n    function assetIntroducerDiscount() external view returns (address);\r\n\r\n    /**\r\n     * @return  The discount applied to the price of the asset introducer for being an early purchaser. Represented as\r\n     *          a number with 18 decimals, such that 0.1 * 1e18 == 10%\r\n     */\r\n    function getAssetIntroducerDiscount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in USD\r\n     */\r\n    function getAssetIntroducerPriceUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The price of the asset introducer, represented in DMG. DMG is the needed currency to purchase an asset\r\n     *          introducer NFT.\r\n     */\r\n    function getAssetIntroducerPriceDmgByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    function getAssetIntroducerPriceDmgByCountryCodeAndIntroducerType(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType\r\n    )\r\n    external view returns (uint);\r\n\r\n    /**\r\n     * @return  The total amount of DMG locked in the asset introducer reserves\r\n     */\r\n    function getTotalDmgLocked() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount that this asset introducer can manager, represented in wei format (a number with 18\r\n     *          decimals). Meaning, 10,000.25 * 1e18 == $10,000.25\r\n     */\r\n    function getDollarAmountToManageByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of DMG that this asset introducer has locked in order to maintain a valid status as an asset\r\n     *          introducer.\r\n     */\r\n    function getDmgLockedByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer memory);\r\n\r\n    function getAssetIntroducersByCountryCode(\r\n        string calldata countryCode\r\n    ) external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getAllAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getPrimaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    function getSecondaryMarketAssetIntroducers() external view returns (AssetIntroducerData.AssetIntroducer[] memory);\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function getNonceByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getNextAssetIntroducerTokenId(\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract\r\n     */\r\n    function buyAssetIntroducerSlot(\r\n        uint tokenId\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * Buys the slot for the appropriate amount of DMG, by attempting to transfer the DMG from `msg.sender` to this\r\n     * contract. The additional discount is added to the existing one\r\n     */\r\n    function buyAssetIntroducerSlotViaStaking(\r\n        uint tokenId,\r\n        uint additionalDiscount\r\n    ) external returns (bool);\r\n\r\n    function nonceOf(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function buyAssetIntroducerSlotBySig(\r\n        uint tokenId,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool);\r\n\r\n    function buyAssetIntroducerSlotBySigWithDmgPermit(\r\n        uint __tokenId,\r\n        address __recipient,\r\n        uint __nonce,\r\n        uint __expiry,\r\n        uint8 __v,\r\n        bytes32 __r,\r\n        bytes32 __s,\r\n        AssetIntroducerData.DmgApprovalStruct calldata dmgApprovalStruct\r\n    ) external returns (bool);\r\n\r\n    function getPriorVotes(\r\n        address user,\r\n        uint blockNumber\r\n    ) external view returns (uint128);\r\n\r\n    function getCurrentVotes(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    function getDmgLockedByUser(\r\n        address user\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @return  The amount of capital that has been withdrawn by this asset introducer, denominated in USD with 18\r\n     *          decimals\r\n     */\r\n    function getDeployedCapitalUsdByTokenId(\r\n        uint tokenId\r\n    ) external view returns (uint);\r\n\r\n    function getWithdrawnAmountByTokenIdAndUnderlyingToken(\r\n        uint tokenId,\r\n        address underlyingToken\r\n    ) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Deactivates the specified asset introducer from being able to withdraw funds. Doing so enables it to\r\n     *      be transferred. NOTE: NFTs can only be deactivated once all deployed capital is returned.\r\n     */\r\n    function deactivateAssetIntroducerByTokenId(\r\n        uint tokenId\r\n    ) external;\r\n\r\n    function withdrawCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function depositCapitalByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    function payInterestByTokenIdAndToken(\r\n        uint tokenId,\r\n        address token,\r\n        uint amount\r\n    ) external;\r\n\r\n    // *************************\r\n    // ***** Other Functions\r\n    // *************************\r\n\r\n    /**\r\n     * @dev Used by the DMMF to buy its token and initialize it based upon its usage of the protocol prior to the NFT\r\n     *      system having been created. We are passing through the USDC token specifically, because it was drawn down\r\n     *      by 300,000 early in the system's maturity to run a full cycle of the system and do a small allocation to\r\n     *      the bootstrapped asset pool.\r\n     */\r\n    function buyDmmFoundationToken(\r\n        uint tokenId,\r\n        address usdcToken\r\n    ) external returns (bool);\r\n\r\n    function isDmmFoundationSetup() external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/AssetIntroducerStakingData.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract AssetIntroducerStakingData is IOwnableOrGuardian {\r\n\r\n    /// For preventing reentrancy attacks\r\n    uint64 internal _guardCounter;\r\n\r\n    address internal _assetIntroducerProxy;\r\n    address internal _dmgIncentivesPool;\r\n    mapping(address => UserStake[]) internal _userToStakesMap;\r\n    bool internal _isOwnableInitialized;\r\n\r\n    enum StakingDuration {\r\n        TWELVE_MONTHS, EIGHTEEN_MONTHS\r\n    }\r\n\r\n    struct UserStake {\r\n        bool isWithdrawn;\r\n        uint64 unlockTimestamp;\r\n        address mToken;\r\n        uint amount;\r\n        uint tokenId;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n\r\n        _;\r\n\r\n        require(\r\n            localCounter == _guardCounter,\r\n            \"AssetIntroducerData: REENTRANCY\"\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/IAssetIntroducerStakingV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IAssetIntroducerStakingV1 {\r\n\r\n    // *************************\r\n    // ***** Events\r\n    // *************************\r\n\r\n    event UserBeginStaking(address indexed user, uint indexed tokenId, address dmmToken, uint amount, uint unlockTimestamp);\r\n    event UserEndStaking(address indexed user, uint indexed tokenId, address dmmToken, uint amount);\r\n    event IncentiveDmgUsed(uint indexed tokenId, address indexed buyer, uint amount);\r\n\r\n    // *************************\r\n    // ***** Misc Functions\r\n    // *************************\r\n\r\n    function assetIntroducerProxy() external view returns (address);\r\n\r\n    function dmg() external view returns (address);\r\n\r\n    function dmgIncentivesPool() external view returns (address);\r\n\r\n    function isReady() external view returns (bool);\r\n\r\n    /// The total discount received by the user by staking their mTokens.\r\n    function getTotalDiscountByStakingDuration(\r\n        AssetIntroducerStakingData.StakingDuration duration\r\n    ) external view returns (uint);\r\n\r\n    /// Returns the DMG price and the additional discount to be forwarded to the asset introducer proxy\r\n    function getAssetIntroducerPriceDmgByTokenIdAndStakingDuration(\r\n        uint tokenId,\r\n        AssetIntroducerStakingData.StakingDuration duration\r\n    ) external view returns (uint, uint);\r\n\r\n    // *************************\r\n    // ***** User Functions\r\n    // *************************\r\n\r\n    function buyAssetIntroducerSlot(\r\n        uint tokenId,\r\n        uint dmmTokenId,\r\n        AssetIntroducerStakingData.StakingDuration duration\r\n    ) external returns (bool);\r\n\r\n    function withdrawStake() external;\r\n\r\n    function getUserStakesByAddress(\r\n        address user\r\n    ) external view returns (AssetIntroducerStakingData.UserStake[] memory);\r\n\r\n    function getActiveUserStakesByAddress(\r\n        address user\r\n    ) external view returns (AssetIntroducerStakingData.UserStake[] memory);\r\n\r\n    function balanceOf(\r\n        address user,\r\n        address mToken\r\n    ) external view returns (uint);\r\n\r\n    function getStakeAmountByTokenIdAndDmmTokenId(\r\n        uint tokenId,\r\n        uint dmmTokenId\r\n    ) external view returns (uint);\r\n\r\n    function getStakeAmountByCountryCodeAndIntroducerTypeAndDmmTokenId(\r\n        string calldata countryCode,\r\n        AssetIntroducerData.AssetIntroducerType introducerType,\r\n        uint dmmTokenId\r\n    ) external view returns (uint);\r\n\r\n    function mapDurationEnumToSeconds(\r\n        AssetIntroducerStakingData.StakingDuration duration\r\n    ) external pure returns (uint64);\r\n\r\n}\r\n\r\n// File: contracts/external/asset_introducers/v1/AssetIntroducerStakingV1.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AssetIntroducerStakingV1 is IAssetIntroducerStakingV1Initializable, IAssetIntroducerStakingV1, IERC721TokenReceiver, AssetIntroducerStakingData {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    uint constant internal ONE_ETH = 1 ether;\r\n\r\n    function initialize(\r\n        address __owner,\r\n        address __guardian,\r\n        address __assetIntroducerProxy,\r\n        address __dmgIncentivesPool\r\n    ) public initializer {\r\n        IOwnableOrGuardian.initialize(__owner, __guardian);\r\n        _assetIntroducerProxy = __assetIntroducerProxy;\r\n        _dmgIncentivesPool = __dmgIncentivesPool;\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    function initializeOwnables(\r\n        address __owner,\r\n        address __guardian\r\n    ) external {\r\n        require(\r\n            !_isOwnableInitialized,\r\n            \"AssetIntroducerStakingV1::initializeOwnables: ALREADY_INITIALIZED\"\r\n        );\r\n        _isOwnableInitialized = true;\r\n        _transferOwnership(__owner);\r\n        _transferGuardian(__guardian);\r\n    }\r\n\r\n    function assetIntroducerProxy() external view returns (address) {\r\n        return _assetIntroducerProxy;\r\n    }\r\n\r\n    function dmg() public view returns (address) {\r\n        return IAssetIntroducerV1(_assetIntroducerProxy).dmg();\r\n    }\r\n\r\n    function dmgIncentivesPool() external view returns (address) {\r\n        return _dmgIncentivesPool;\r\n    }\r\n\r\n    function buyAssetIntroducerSlot(\r\n        uint __tokenId,\r\n        uint __dmmTokenId,\r\n        StakingDuration __duration\r\n    )\r\n    external\r\n    nonReentrant\r\n    returns (bool) {\r\n        IAssetIntroducerV1 __assetIntroducerProxy = IAssetIntroducerV1(_assetIntroducerProxy);\r\n        (uint fullPriceDmg, uint additionalDiscount) = getAssetIntroducerPriceDmgByTokenIdAndStakingDuration(__tokenId, __duration);\r\n        uint userPriceDmg = fullPriceDmg / 2;\r\n\r\n        address __dmg = dmg();\r\n        address __dmgIncentivesPool = _dmgIncentivesPool;\r\n\r\n        require(\r\n            IERC20(__dmg).balanceOf(__dmgIncentivesPool) >= fullPriceDmg.sub(userPriceDmg),\r\n            \"AssetIntroducerBuyerRouter::buyAssetIntroducerSlot: INSUFFICIENT_INCENTIVES\"\r\n        );\r\n        IERC20(__dmg).safeTransferFrom(__dmgIncentivesPool, address(this), fullPriceDmg.sub(userPriceDmg));\r\n        IERC20(__dmg).safeTransferFrom(msg.sender, address(this), userPriceDmg);\r\n\r\n        _performStakingForToken(__tokenId, __dmmTokenId, __duration, __assetIntroducerProxy);\r\n\r\n        IERC20(__dmg).safeApprove(address(__assetIntroducerProxy), fullPriceDmg);\r\n        __assetIntroducerProxy.buyAssetIntroducerSlotViaStaking(__tokenId, additionalDiscount);\r\n\r\n        // Forward the NFT to the purchaser\r\n        IERC721(address(__assetIntroducerProxy)).safeTransferFrom(address(this), msg.sender, __tokenId);\r\n\r\n        emit IncentiveDmgUsed(__tokenId, msg.sender, fullPriceDmg.sub(userPriceDmg));\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawStake() external nonReentrant {\r\n        UserStake[] memory userStakes = _userToStakesMap[msg.sender];\r\n        for (uint i = 0; i < userStakes.length; i++) {\r\n            if (!userStakes[i].isWithdrawn && block.timestamp > userStakes[i].unlockTimestamp) {\r\n                _userToStakesMap[msg.sender][i].isWithdrawn = true;\r\n                IERC20(userStakes[i].mToken).safeTransfer(msg.sender, userStakes[i].amount);\r\n                emit UserEndStaking(msg.sender, userStakes[i].tokenId, userStakes[i].mToken, userStakes[i].amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserStakesByAddress(\r\n        address user\r\n    ) external view returns (AssetIntroducerStakingData.UserStake[] memory) {\r\n        return _userToStakesMap[user];\r\n    }\r\n\r\n    function getActiveUserStakesByAddress(\r\n        address user\r\n    ) external view returns (AssetIntroducerStakingData.UserStake[] memory) {\r\n        AssetIntroducerStakingData.UserStake[] memory allStakes = _userToStakesMap[user];\r\n\r\n        uint count = 0;\r\n        for (uint i = 0; i < allStakes.length; i++) {\r\n            if (!allStakes[i].isWithdrawn) {\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        AssetIntroducerStakingData.UserStake[] memory activeStakes = new AssetIntroducerStakingData.UserStake[](count);\r\n        count = 0;\r\n        for (uint i = 0; i < allStakes.length; i++) {\r\n            if (!allStakes[i].isWithdrawn) {\r\n                activeStakes[count++] = allStakes[i];\r\n            }\r\n        }\r\n        return activeStakes;\r\n    }\r\n\r\n    function balanceOf(\r\n        address user,\r\n        address mToken\r\n    ) external view returns (uint) {\r\n        uint balance = 0;\r\n        AssetIntroducerStakingData.UserStake[] memory allStakes = _userToStakesMap[user];\r\n        for (uint i = 0; i < allStakes.length; i++) {\r\n            if (!allStakes[i].isWithdrawn && allStakes[i].mToken == mToken) {\r\n                balance += allStakes[i].amount;\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function getStakeAmountByTokenIdAndDmmTokenId(\r\n        uint __tokenId,\r\n        uint __dmmTokenId\r\n    ) public view returns (uint) {\r\n        uint priceUsd = IAssetIntroducerV1(_assetIntroducerProxy).getAssetIntroducerPriceUsdByTokenId(__tokenId);\r\n        return _getStakeAmountByDmmTokenId(__dmmTokenId, priceUsd);\r\n    }\r\n\r\n    function getStakeAmountByCountryCodeAndIntroducerTypeAndDmmTokenId(\r\n        string calldata __countryCode,\r\n        AssetIntroducerData.AssetIntroducerType __introducerType,\r\n        uint __dmmTokenId\r\n    ) external view returns (uint) {\r\n        uint priceUsd = IAssetIntroducerV1(_assetIntroducerProxy).getAssetIntroducerPriceUsdByCountryCodeAndIntroducerType(__countryCode, __introducerType);\r\n        return _getStakeAmountByDmmTokenId(__dmmTokenId, priceUsd);\r\n    }\r\n\r\n    function mapDurationEnumToSeconds(\r\n        StakingDuration __duration\r\n    ) public pure returns (uint64) {\r\n        if (__duration == StakingDuration.TWELVE_MONTHS) {\r\n            return 86400 * 30 * 12;\r\n        } else if (__duration == StakingDuration.EIGHTEEN_MONTHS) {\r\n            return 86400 * 30 * 18;\r\n        } else {\r\n            revert(\"AssetIntroducerStakingV1::mapDurationEnumToSeconds: INVALID_DURATION\");\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public returns (bytes4) {\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    function isReady() public view returns (bool) {\r\n        return IERC20(dmg()).allowance(_dmgIncentivesPool, address(this)) > 0 &&\r\n        IAssetIntroducerV1(_assetIntroducerProxy).stakingPurchaser() == address(this);\r\n    }\r\n\r\n    function getAssetIntroducerPriceDmgByTokenIdAndStakingDuration(\r\n        uint __tokenId,\r\n        StakingDuration __duration\r\n    ) public view returns (uint, uint) {\r\n        IAssetIntroducerV1 __assetIntroducerProxy = IAssetIntroducerV1(_assetIntroducerProxy);\r\n        uint nonStakingDiscount = __assetIntroducerProxy.getAssetIntroducerDiscount();\r\n        uint totalDiscount = getTotalDiscountByStakingDuration(__duration);\r\n        uint additionalDiscount = totalDiscount.sub(nonStakingDiscount);\r\n\r\n        uint fullPriceDmg = __assetIntroducerProxy.getAssetIntroducerPriceDmgByTokenId(__tokenId);\r\n        uint originalPriceDmg = fullPriceDmg.mul(ONE_ETH).div(ONE_ETH.sub(nonStakingDiscount));\r\n\r\n        return (originalPriceDmg.mul(ONE_ETH.sub(totalDiscount)).div(ONE_ETH), additionalDiscount);\r\n    }\r\n\r\n    function getTotalDiscountByStakingDuration(\r\n        StakingDuration duration\r\n    ) public view returns (uint) {\r\n        uint baseDiscount;\r\n        uint originalDiscount;\r\n        // The discount expired\r\n        if (duration == StakingDuration.TWELVE_MONTHS) {\r\n            // Discount is 95% at t=0 and decays to 25% at t=18_months; delta of 70%\r\n            originalDiscount = 0.7 ether;\r\n            baseDiscount = 0.25 ether;\r\n        } else if (duration == StakingDuration.EIGHTEEN_MONTHS) {\r\n            // Discount is 99% at t=0 and decays to 50% at t=18_months; delta of 49%\r\n            originalDiscount = 0.49 ether;\r\n            baseDiscount = 0.50 ether;\r\n        } else {\r\n            revert(\"AssetIntroducerStakingV1::getTotalDiscountByStakingDuration: INVALID_DURATION\");\r\n        }\r\n\r\n        uint elapsedTime = block.timestamp.sub(IAssetIntroducerV1(_assetIntroducerProxy).initTimestamp());\r\n        // 18 months or 540 days\r\n        uint discountDurationInSeconds = 86400 * 30 * 18;\r\n        if (elapsedTime > discountDurationInSeconds) {\r\n            return baseDiscount;\r\n        } else {\r\n            return (originalDiscount.mul(discountDurationInSeconds.sub(elapsedTime)).div(discountDurationInSeconds)).add(baseDiscount);\r\n        }\r\n    }\r\n\r\n    // *************************\r\n    // ***** Internal Functions\r\n    // *************************\r\n\r\n    function _performStakingForToken(\r\n        uint __tokenId,\r\n        uint __dmmTokenId,\r\n        StakingDuration __duration,\r\n        IAssetIntroducerV1 __assetIntroducerProxy\r\n    ) internal {\r\n        uint stakeAmount = getStakeAmountByTokenIdAndDmmTokenId(__tokenId, __dmmTokenId);\r\n        address mToken = IDmmController(__assetIntroducerProxy.dmmController()).getDmmTokenAddressByDmmTokenId(__dmmTokenId);\r\n        IERC20(mToken).safeTransferFrom(msg.sender, address(this), stakeAmount);\r\n        uint64 unlockTimestamp = uint64(block.timestamp) + mapDurationEnumToSeconds(__duration);\r\n        _userToStakesMap[msg.sender].push(UserStake({\r\n        isWithdrawn : false,\r\n        unlockTimestamp : unlockTimestamp,\r\n        mToken : mToken,\r\n        amount : stakeAmount,\r\n        tokenId : __tokenId\r\n        }));\r\n        emit UserBeginStaking(msg.sender, __tokenId, mToken, stakeAmount, unlockTimestamp);\r\n    }\r\n\r\n    function _getStakeAmountByDmmTokenId(\r\n        uint __dmmTokenId,\r\n        uint __priceUsd\r\n    ) internal view returns (uint) {\r\n        IDmmController controller = IDmmController(IAssetIntroducerV1(_assetIntroducerProxy).dmmController());\r\n        address dmmToken = controller.getDmmTokenAddressByDmmTokenId(__dmmTokenId);\r\n        address underlyingToken = controller.getUnderlyingTokenForDmm(dmmToken);\r\n        uint usdPricePerToken = controller.underlyingTokenValuator().getTokenValue(underlyingToken, ONE_ETH);\r\n        uint numberOfDmmTokensStandardized = __priceUsd.mul(ONE_ETH).div(usdPricePerToken).mul(ONE_ETH).div(controller.getExchangeRate(dmmToken));\r\n        uint8 decimals = IERC20WithDecimals(dmmToken).decimals();\r\n        if (decimals > 18) {\r\n            return numberOfDmmTokensStandardized.mul(10 ** uint(decimals - 18));\r\n        } else if (decimals < 18) {\r\n            return numberOfDmmTokensStandardized.div(10 ** uint(18 - decimals));\r\n        } else {\r\n            return numberOfDmmTokensStandardized;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveDmgUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"UserBeginStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dmmToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserEndStaking\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetIntroducerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__dmmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetIntroducerStakingData.StakingDuration\",\"name\":\"__duration\",\"type\":\"uint8\"}],\"name\":\"buyAssetIntroducerSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dmgIncentivesPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getActiveUserStakesByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"mToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerStakingData.UserStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum AssetIntroducerStakingData.StakingDuration\",\"name\":\"__duration\",\"type\":\"uint8\"}],\"name\":\"getAssetIntroducerPriceDmgByTokenIdAndStakingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"__countryCode\",\"type\":\"string\"},{\"internalType\":\"enum AssetIntroducerData.AssetIntroducerType\",\"name\":\"__introducerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeAmountByCountryCodeAndIntroducerTypeAndDmmTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__dmmTokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeAmountByTokenIdAndDmmTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AssetIntroducerStakingData.StakingDuration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"getTotalDiscountByStakingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakesByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"mToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetIntroducerStakingData.UserStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__assetIntroducerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__dmgIncentivesPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"name\":\"initializeOwnables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AssetIntroducerStakingData.StakingDuration\",\"name\":\"__duration\",\"type\":\"uint8\"}],\"name\":\"mapDurationEnumToSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__guardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AssetIntroducerStakingV1","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f37b76afd0df86ef184d37a4c904687b656ff0ccece7594f40c5c4b6a56f6ed4"}]}