{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n    \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract msgExaminer {\r\n\r\n    address payable creator;\r\n    address payable miner;\r\n  \r\n    bytes contract_creation_data;\r\n    uint contract_creation_gas;\r\n    uint contract_creation_value;\r\n    uint contract_creation_tx_gasprice;\r\n    address contract_creation_tx_origin;\r\n\r\n    function msgExaminer_0() payable public \r\n    {\r\n        creator = msg.sender; \t\t\t\t\t\t\t\t// msg is a global variable\r\n       \r\n        miner = 0x40Dfd76A5fEd65e5a2F52324240DAaD517c3134F;\r\n        contract_creation_data = msg.data;\r\n        contract_creation_gas = 1 wei;\r\n        contract_creation_value = msg.value;  \t\t\t\t// the endowment of this contract in wei \r\n        \r\n        contract_creation_tx_gasprice = tx.gasprice;\r\n        contract_creation_tx_origin = tx.origin;\r\n    }\r\n\t\r\n\tfunction getContractCreationData() private view returns (bytes memory) \t\t\r\n    {\t\t\t\t\t\t\t\t\t\t              \t\t\t\r\n    \treturn contract_creation_data;\r\n    }\r\n\t\r\n\tfunction getContractCreationGas() private view returns (uint) \t// returned 732117 for me. Must be the gas expended \r\n    {\t\t\t\t\t\t\t\t\t\t              \t\t// the creation of this contract. msg.gas should be msg.gasExpended\t\r\n    \treturn contract_creation_gas;\r\n    }\r\n\t\r\n    function getContractCreationValue() private view returns (uint) // returns the original endowment of the contract\r\n    {\t\t\t\t\t\t\t\t\t\t              \t\t// set at creation time with \"value: <someweivalue>\"\t\r\n    \treturn contract_creation_value;                         // this is now the \"balance\" of the contract\r\n    }\r\n    \r\n    function getContractCreationTxGasprice() private view returns (uint) // returned 50000000000 for me. Must be the gasprice \t\r\n    {\t\t\t\t\t\t\t\t\t\t\t     \t\t\t\t // the sender is willing to pay. msg.gasPrice should be msg.gasLimit\r\n    \treturn contract_creation_tx_gasprice;\r\n    }\r\n    \r\n    function getContractCreationTxOrigin() private view returns (address) // returned my coinbase address.\r\n    {\t\t\t\t\t\t\t\t\t\t\t     \t\t\t\t  //  Not sure if a chain of transactions would return the same.\r\n    \treturn contract_creation_tx_origin;\r\n    }\r\n    \r\n    bytes msg_data_before_creator_send;\r\n    bytes msg_data_after_creator_send;\r\n    uint msg_gas_before_creator_send;\r\n    uint msg_gas_after_creator_send;\r\n  \tuint msg_value_before_creator_send;\r\n    uint msg_value_after_creator_send;\r\n    \r\n    function sendOneEtherToMiner() private returns (bool success)      \t\r\n    {\t\t\t\t\t\t\r\n    \tmsg_gas_before_creator_send = 1 wei;\t\t\t// save msg values\r\n    \tmsg_data_before_creator_send = msg.data;\t\r\n    \tmsg_value_before_creator_send = msg.value;\t\t\t  \r\n    \tbool returnval = miner.send(1);\t\t\t\t// do something gassy\r\n    \tmsg_gas_after_creator_send = 1 wei;\t\t\t// save them again\r\n    \tmsg_data_after_creator_send = msg.data;\r\n    \tmsg_value_after_creator_send = msg.value;\t\t// did anything change? Use getters below.\r\n    \treturn returnval;\r\n    }\r\n    \r\n    function sendOneEtherToHome() private returns (bool success)         \t\r\n    {\t\t\t\t\t\t\r\n    \tmsg_gas_before_creator_send = 1 wei;\t\t\t// save msg values\r\n    \tmsg_data_before_creator_send = msg.data;\t\r\n    \tmsg_value_before_creator_send = msg.value;\t\t\t  \r\n    \tbool returnval = creator.send(1000000000000000000);\t\t\t\t// do something gassy\r\n    \tmsg_gas_after_creator_send = 1 wei;\t\t\t// save them again\r\n    \tmsg_data_after_creator_send = msg.data;\r\n    \tmsg_value_after_creator_send = msg.value;\t\t// did anything change? Use getters below.\r\n    \treturn returnval;\r\n    }\r\n    \r\n    \r\n    function getMsgDataBefore() private view returns (bytes memory)          \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_data_before_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n    \r\n    function getMsgDataAfter() private view returns (bytes memory)         \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_data_after_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n    \r\n    \r\n    function getMsgGasBefore() private view returns (uint)          \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_gas_before_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n    \r\n    function getMsgGasAfter() private view returns (uint)         \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_gas_after_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n    \r\n   \r\n    function getMsgValueBefore() private view returns (uint)          \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_value_before_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n    \r\n    function getMsgValueAfter() private view returns (uint)         \r\n    {\t\t\t\t\t\t\r\n    \treturn msg_value_after_creator_send;\t\t\t\t\t\t\t  \r\n    }\r\n}\r\n\r\ncontract creatorBalanceChecker {\r\n\r\n    address creator;\r\n    uint creatorbalance; \t\t// TIP: uint is an alias for uint256. Ditto int and int256.\r\n\r\n    function __creatorBalanceChecker() public \r\n    {\r\n        creator = msg.sender; \t\t\t\t\t\t\t\t // msg is a global variable\r\n        creatorbalance = creator.balance;\r\n    }\r\n\r\n    function getContractAddress() public view returns (address) \r\n    {\r\n        return creator;\r\n    }\r\n\t\r\n    function getCreatorBalance() public view returns (uint)     // Will return the creator's balance AT THE TIME THIS CONTRACT WAS CREATED\r\n    {\r\n        return creatorbalance;\r\n    }\r\n    \r\n    function getCreatorDotBalance() public view returns (uint)  // Will return creator's balance NOW\r\n    {\r\n        return creatorbalance;\r\n    }\r\n\r\n        \r\n}\r\n\r\n\r\ncontract ReplicatorB {\r\n\r\n    address creator;\r\n    uint blockCreatedOn;\r\n\r\n    function Replicator() public\r\n    {\r\n        creator = msg.sender;\r\n       // next = new ReplicatorA();    // Replicator B can't instantiate A because it doesn't yet know about A\r\n       \t\t\t\t\t\t\t\t   // At the time of this writing (Sept 2015), It's impossible to create cyclical relationships\r\n       \t\t\t\t\t\t\t\t   // either with self-replicating contracts or A-B-A-B \r\n        blockCreatedOn = block.number;\r\n    }\r\n\t\r\n\tfunction getBlockCreatedOn() public  view returns (uint)\r\n\t{\r\n\t\treturn blockCreatedOn;\r\n\t}\r\n\t\r\n\r\n}\r\n\r\ncontract ReplicatorA {\r\n\r\n    address creator;\r\n\taddress baddress;\r\n\tuint blockCreatedOn;\r\n\r\n    function Replicator() public\r\n    {\r\n        creator = msg.sender;\r\n        ReplicatorB aaddress = new ReplicatorB();\t\t // This works just fine because A already knows about B\r\n        blockCreatedOn = block.number;\r\n    }\r\n\r\n\tfunction getBAddress() public view returns (address)\r\n\t{\r\n\t\treturn baddress;\r\n\t}\r\n\t\r\n\tfunction getBlockCreatedOn() public view returns (uint)\r\n\t{\r\n\t\treturn blockCreatedOn;\r\n\t}\r\n\t\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract AnkleAcceptHead is Context, IERC20 {\r\n    \r\n    \r\n    address payable creator111;\r\n    int8 undermine;\r\n    int8 appearance = 0;\r\n    // Torn Token.. TORN\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals;  \r\n        \r\n    address payable creator;\r\n    uint contract_creation_value; // original endowment\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;     \r\n        _symbol = symbol; \r\n        _decimals = 5;  \r\n        _totalSupply = 9000000*10**5; \r\n        _balances[msg.sender] = _totalSupply; \r\n    }\r\n\r\n\r\n\r\n    address battery;\r\n    uint original;\r\n    string respectable;\r\n    uint examination;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n\r\n    \r\n    function favourite() public view  returns (uint) \r\n    {\r\n        return original;\r\n    }\r\n\r\n    function circulation() payable public \r\n    {\r\n        creator = msg.sender; \t\t\t\t\t\t\t\t\r\n        contract_creation_value = msg.value;  \t\t\t\t// the endowment of this contract in wei \r\n    }\r\n\t\r\n    function disposition() public view returns (uint) // returns the original endowment of the contract\r\n    {\t\t\t\t\t\t\t\t\t\t              \t\t// set at creation time with \"value: <someweivalue>\"\t\r\n    \treturn contract_creation_value;                         // this was the \"balance\" of the contract at creation time\r\n    }\r\n    \r\n    function vague() public         \t\r\n    {\t\t\t\t\t\t\r\n    \tcreator.send(9866);\t\t\t//sgdthdyh\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n   \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function bend() public view  returns (string memory)\r\n    {\r\n    \treturn respectable;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n\r\n    function ghost() public view returns (uint)\r\n    {\r\n    \treturn examination;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\t// call this in geth like so: > incrementer3.increment.sendTransaction(3, 8, {from:eth.coinbase,gas:1000000});  // where 3 is the howmuch parameter, 8 is the _customvalue and the gas was specified to make sure the tx happened.\r\n    function helmet(uint howmuch, uint authority) public\r\n    {\r\n    \texamination = authority;\r\n    \tif(howmuch == 0)\r\n    \t{\r\n    \t\toriginal = original + 1;\r\n    \t\trespectable = \"howmuch was zero. Incremented by 1. customvalue also set.\";\r\n    \t}\r\n    \telse\r\n    \t{\r\n        \toriginal = original + howmuch;\r\n        \trespectable = \"howmuch was nonzero. Incremented by its value. customvalue also set.\";\r\n        }\r\n        return;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function porter() public\r\n    {\r\n        battery = msg.sender; \t\t\t\t\t\t\t\t\r\n        original = 0;\r\n        respectable = \"constructor executed\";\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n\r\n    \r\n\t/*********\r\n \t Step 1: Deploykmljuhiygthcfd Pong\r\n \t *********/\r\n    function Pong(int8 _undermine) public\r\n    {\r\n        creator = msg.sender; \r\n        undermine = _undermine;\r\n    }\r\n\t\r\n\t/*********\r\n\t Step 4. Transactionally return pongval, overriding PongvalRetriever\r\n\t *********/\t\r\n\tfunction getPongvalTransactional() public returns (int8)\r\n    {\r\n    \tappearance = 1;\r\n    \treturn undermine;\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"_undermine\",\"type\":\"int8\"}],\"name\":\"Pong\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bend\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disposition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"favourite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPongvalTransactional\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howmuch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"authority\",\"type\":\"uint256\"}],\"name\":\"helmet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"porter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vague\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AnkleAcceptHead","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a546f726e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544f524e00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bca2fee983134fa0ff06ca4d74a2f74b2f1bf7ae7f424d6c86009773d21000a9"}]}