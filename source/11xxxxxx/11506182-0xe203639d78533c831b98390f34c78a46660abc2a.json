{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nwebsite: volts.finance\r\n\r\n  ______   __                               \r\n /      \\ /  |                              \r\n/$$$$$$  |$$ |____   _____  ____    _______ \r\n$$ |  $$ |$$      \\ /     \\/    \\  /       |\r\n$$ |  $$ |$$$$$$$  |$$$$$$ $$$$  |/$$$$$$$/ \r\n$$ |  $$ |$$ |  $$ |$$ | $$ | $$ |$$      \\ \r\n$$ \\__$$ |$$ |  $$ |$$ | $$ | $$ | $$$$$$  |\r\n$$    $$/ $$ |  $$ |$$ | $$ | $$ |/     $$/ \r\n $$$$$$/  $$/   $$/ $$/  $$/  $$/ $$$$$$$/  \r\n\r\n\r\nVolts single staking contract of the volts-Ecosystem\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface VOLTS {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burnRate() external view returns (uint256);\r\n}\r\n\r\ninterface OHMS {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256);\r\n    function tokenFromReflection(uint256 rAmount) external view returns(uint256);\r\n\r\n}\r\n\r\ncontract Staking is Ownable {\r\n\r\n    struct User {\r\n        uint256 depositAmount;\r\n        uint256 paidReflection;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => User) public users;\r\n\r\n    uint256 public reflectionTillNowPerToken = 0;\r\n    uint256 public lastUpdatedBlock;\r\n    uint256 public rewardPerBlock;\r\n    uint256 public totalOhmsReward = 0;\r\n\r\n    VOLTS public volts;\r\n    OHMS public ohms;\r\n\r\n    event Deposit(address user, uint256 amount);\r\n    event Withdraw(address user, uint256 amount);\r\n    event EmergencyWithdraw(address user, uint256 amount);\r\n    event RewardClaimed(address user, uint256 amount);\r\n    event RewardPerBlockChanged(uint256 oldValue, uint256 newValue);\r\n\r\n    constructor (address _VOLTS, address _OHMS, uint256 _rewardPerBlock) public {\r\n        volts = VOLTS(_VOLTS);\r\n        ohms = OHMS(_OHMS);\r\n        rewardPerBlock = _rewardPerBlock;\r\n        lastUpdatedBlock = block.number;\r\n    }\r\n\r\n    // Returns the amount of OHMS rewarded to stakers per block\r\n    function setRewardPerBlock(uint256 _rewardPerBlock) public onlyOwner {\r\n        update();\r\n        emit RewardPerBlockChanged(rewardPerBlock, _rewardPerBlock);\r\n        rewardPerBlock = _rewardPerBlock;\r\n    }\r\n\r\n    // Returns the amount of OHMS rewarded to stakers per block\r\n    function getRewardPerBlock() external view returns (uint256){\r\n        return rewardPerBlock;\r\n    }\r\n\r\n    // View function to see users staked balance on frontend.\r\n    function getUserDepositAmount(address _user) external view returns (uint256){\r\n        User storage user = users [_user];\r\n        return user.depositAmount;\r\n    }\r\n\r\n    //  View function to see the amount staked in the contract in OHMS. \r\n    function getTotalStaked() external view returns (uint256){\r\n        return volts.balanceOf(address(this));\r\n    }\r\n\r\n    // View function to get the remaining reward balance in the contract in OHMS.\r\n    function getTotalRemainingReward() external view returns (uint256){\r\n        return ohms.balanceOf(address(this));\r\n    }\r\n\r\n    // Update reward variables of the pool to be up-to-date.\r\n    function update() public {\r\n        if (block.number <= lastUpdatedBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 totalvolts;\r\n\r\n        if(volts.balanceOf(address(this)) > 0){\r\n            totalvolts = volts.balanceOf(address(this));\r\n        }\r\n        else{\r\n            totalvolts = 1;\r\n        }\r\n\r\n        uint256 rewardAmount = (block.number - lastUpdatedBlock).mul(rewardPerBlock);\r\n        totalOhmsReward = totalOhmsReward.add(rewardAmount);\r\n        uint256 reflectionRewardAmount = ohms.reflectionFromToken(rewardAmount, false).div(1000);\r\n        \r\n        reflectionTillNowPerToken = reflectionTillNowPerToken.add(reflectionRewardAmount.div(totalvolts));\r\n        lastUpdatedBlock = block.number;\r\n    }\r\n\r\n    // View function to see pending reward on frontend.\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        User storage user = users[_user];\r\n        uint256 accReflectionPerToken = reflectionTillNowPerToken;\r\n        uint256 totalvolts;\r\n\r\n        if(volts.balanceOf(address(this)) > 0){\r\n            totalvolts = volts.balanceOf(address(this));\r\n        }\r\n        else{\r\n            totalvolts = 1;\r\n        }\r\n        \r\n        if (block.number > lastUpdatedBlock) {\r\n            uint256 rewardAmount = ((block.number - lastUpdatedBlock).mul(rewardPerBlock));\r\n            uint256 reflectionReward = ohms.reflectionFromToken(rewardAmount,false).div(1000);\r\n            accReflectionPerToken = accReflectionPerToken.add(reflectionReward.div(totalvolts));\r\n        }\r\n\r\n        return ohms.tokenFromReflection((user.depositAmount.mul(accReflectionPerToken).sub(user.paidReflection)).mul(1000));\r\n    }\r\n\r\n    function deposit(uint256 amount) public {\r\n        User storage user = users[msg.sender];\r\n        update();\r\n\r\n        if (user.depositAmount > 0) {\r\n            uint256 _pendingReflection = (user.depositAmount.mul(reflectionTillNowPerToken).sub(user.paidReflection)).mul(1000);\r\n            uint256 _ohmsReward = ohms.tokenFromReflection(_pendingReflection);\r\n            if(_ohmsReward > 0){\r\n                ohms.transfer(address(msg.sender), _ohmsReward);\r\n                emit RewardClaimed(msg.sender, _ohmsReward);\r\n            }\r\n        }\r\n\r\n        uint256 burnRate = volts.burnRate();\r\n        uint256 amountBurned = amount.mul(burnRate).div(100);\r\n        uint256 amountDeposited = amount.sub(amountBurned);\r\n\r\n        volts.transferFrom(address(msg.sender), address(this), amount);\r\n        emit Deposit(msg.sender, amount);\r\n        \r\n        user.depositAmount = user.depositAmount.add(amountDeposited);\r\n        user.paidReflection = user.depositAmount.mul(reflectionTillNowPerToken);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        User storage user = users[msg.sender];\r\n        require(user.depositAmount >= amount, \"withdraw amount exceeds deposited amount\");\r\n        update();\r\n\r\n        uint256 _pendingReflection = (user.depositAmount.mul(reflectionTillNowPerToken).sub(user.paidReflection)).mul(1000);\r\n        uint256 _ohmsReward = ohms.tokenFromReflection(_pendingReflection);\r\n\r\n        if(_ohmsReward > 0){\r\n            ohms.transfer(address(msg.sender), _ohmsReward);\r\n            emit RewardClaimed(msg.sender, _ohmsReward);\r\n        }\r\n            \r\n        volts.transfer(address(msg.sender), amount);\r\n        emit Withdraw(msg.sender, amount);\r\n        \r\n        user.depositAmount = user.depositAmount.sub(amount);\r\n        user.paidReflection = user.depositAmount.mul(reflectionTillNowPerToken);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        volts.transfer(address(msg.sender), user.depositAmount);\r\n        emit EmergencyWithdraw(msg.sender, user.depositAmount);\r\n\r\n        user.depositAmount = 0;\r\n        user.paidReflection = 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VOLTS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OHMS\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RewardPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ohms\",\"outputs\":[{\"internalType\":\"contract OHMS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionTillNowPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOhmsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReflection\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volts\",\"outputs\":[{\"internalType\":\"contract VOLTS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014d1c83df4decee9deb14ee851f109f0101a66310000000000000000000000005026b766628621af6ac315705c21a21cd52172070000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4fa8664ec6976064e640bda2916dab622003149127fd67dbc5c7d585b280e839"}]}