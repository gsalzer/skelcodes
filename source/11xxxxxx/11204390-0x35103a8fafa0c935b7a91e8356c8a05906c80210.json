{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface ICurveMetaPool {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISavingsManager {\r\n\r\n    /** @dev Admin privs */\r\n    function withdrawUnallocatedInterest(address _mAsset, address _recipient) external;\r\n\r\n    /** @dev Liquidator */\r\n    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\r\n\r\n    /** @dev Public privs */\r\n    function collectAndDistributeInterest(address _mAsset) external;\r\n\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract InitializableModuleKeys {\r\n\r\n    // Governance                             // Phases\r\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\r\n    bytes32 internal KEY_STAKING;             // 1.2\r\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\r\n\r\n    // mStable\r\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\r\n    bytes32 internal KEY_MANAGER;             // 1.2\r\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\r\n    bytes32 internal KEY_META_TOKEN;          // 1.1\r\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\r\n\r\n    /**\r\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\r\n     *      via Proxy to initialize constants in the Proxy contract.\r\n     */\r\n    function _initialize() internal {\r\n        // keccak256() values are evaluated only once at the time of this function call.\r\n        // Hence, no need to assign hard-coded values to these variables.\r\n        KEY_GOVERNANCE = keccak256(\"Governance\");\r\n        KEY_STAKING = keccak256(\"Staking\");\r\n        KEY_PROXY_ADMIN = keccak256(\"ProxyAdmin\");\r\n\r\n        KEY_ORACLE_HUB = keccak256(\"OracleHub\");\r\n        KEY_MANAGER = keccak256(\"Manager\");\r\n        KEY_RECOLLATERALISER = keccak256(\"Recollateraliser\");\r\n        KEY_META_TOKEN = keccak256(\"MetaToken\");\r\n        KEY_SAVINGS_MANAGER = keccak256(\"SavingsManager\");\r\n    }\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract InitializableModule is InitializableModuleKeys {\r\n\r\n    INexus public nexus;\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    function _initialize(address _nexus) internal {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n        InitializableModuleKeys._initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\ncontract ILiquidator {\r\n\r\n    function createLiquidation(\r\n        address _integration,\r\n        address _sellToken,\r\n        address _bAsset,\r\n        int128 _curvePosition,\r\n        address[] calldata _uniswapPath,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn\r\n    )\r\n        external;\r\n\r\n    function updateBasset(\r\n        address _integration,\r\n        address _bAsset,\r\n        int128 _curvePosition,\r\n        address[] calldata _uniswapPath,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn\r\n    )\r\n        external;\r\n        \r\n    function deleteLiquidation(address _integration) external;\r\n\r\n    function triggerLiquidation(address _integration) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MassetHelpers {\r\n\r\n    using StableMath for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function transferTokens(\r\n        address _sender,\r\n        address _recipient,\r\n        address _basset,\r\n        bool _erc20TransferFeeCharged,\r\n        uint256 _qty\r\n    )\r\n        internal\r\n        returns (uint256 receivedQty)\r\n    {\r\n        receivedQty = _qty;\r\n        if(_erc20TransferFeeCharged) {\r\n            uint256 balBefore = IERC20(_basset).balanceOf(_recipient);\r\n            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\r\n            uint256 balAfter = IERC20(_basset).balanceOf(_recipient);\r\n            receivedQty = StableMath.min(_qty, balAfter.sub(balBefore));\r\n        } else {\r\n            IERC20(_basset).safeTransferFrom(_sender, _recipient, _qty);\r\n        }\r\n    }\r\n\r\n    function safeInfiniteApprove(address _asset, address _spender)\r\n        internal\r\n    {\r\n        IERC20(_asset).safeApprove(_spender, 0);\r\n        IERC20(_asset).safeApprove(_spender, uint256(-1));\r\n    }\r\n}\r\n\r\ninterface IBasicToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @title   Liquidator\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  The Liquidator allows rewards to be swapped for another token\r\n *          and returned to a calling contract\r\n * @dev     VERSION: 1.0\r\n *          DATE:    2020-10-13\r\n */\r\ncontract Liquidator is\r\n    ILiquidator,\r\n    Initializable,\r\n    InitializableModule\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event LiquidationModified(address indexed integration);\r\n    event LiquidationEnded(address indexed integration);\r\n    event Liquidated(address indexed sellToken, address mUSD, uint256 mUSDAmount, address buyToken);\r\n\r\n    address public mUSD;\r\n    ICurveMetaPool public curve;\r\n    IUniswapV2Router02 public uniswap;\r\n    uint256 private interval = 7 days;\r\n\r\n    mapping(address => Liquidation) public liquidations;\r\n    mapping(address => uint256) public minReturn;\r\n\r\n    struct Liquidation {\r\n        address sellToken;\r\n\r\n        address bAsset;\r\n        int128 curvePosition;\r\n        address[] uniswapPath;\r\n\r\n        uint256 lastTriggered;\r\n        uint256 trancheAmount;   // The amount of bAsset units to buy each week, with token decimals\r\n    }\r\n\r\n    function initialize(\r\n        address _nexus,\r\n        address _uniswap,\r\n        address _curve,\r\n        address _mUSD\r\n    )\r\n        external\r\n        initializer\r\n    {\r\n        InitializableModule._initialize(_nexus);\r\n\r\n        require(_uniswap != address(0), \"Invalid uniswap address\");\r\n        uniswap = IUniswapV2Router02(_uniswap);\r\n\r\n        require(_curve != address(0), \"Invalid curve address\");\r\n        curve = ICurveMetaPool(_curve);\r\n\r\n        require(_mUSD != address(0), \"Invalid mUSD address\");\r\n        mUSD = _mUSD;\r\n    }\r\n\r\n    /***************************************\r\n                    GOVERNANCE\r\n    ****************************************/\r\n\r\n    /**\r\n    * @dev Create a liquidation\r\n    * @param _integration The integration contract address from which to receive sellToken\r\n    * @param _sellToken Token harvested from the integration contract\r\n    * @param _bAsset The asset to buy on Uniswap\r\n    * @param _curvePosition Position of the bAsset in Curves MetaPool\r\n    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\r\n    * @param _trancheAmount The amount of bAsset units to buy in each weekly tranche\r\n    * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\r\n    */\r\n    function createLiquidation(\r\n        address _integration,\r\n        address _sellToken,\r\n        address _bAsset,\r\n        int128 _curvePosition,\r\n        address[] calldata _uniswapPath,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn\r\n    )\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(liquidations[_integration].sellToken == address(0), \"Liquidation exists for this bAsset\");\r\n\r\n        require(\r\n            _integration != address(0) &&\r\n            _sellToken != address(0) &&\r\n            _bAsset != address(0) &&\r\n            _uniswapPath.length >= 2 &&\r\n            _minReturn > 0,\r\n            \"Invalid inputs\"\r\n        );\r\n        require(_validUniswapPath(_sellToken, _bAsset, _uniswapPath), \"Invalid uniswap path\");\r\n\r\n        liquidations[_integration] = Liquidation({\r\n            sellToken: _sellToken,\r\n            bAsset: _bAsset,\r\n            curvePosition: _curvePosition,\r\n            uniswapPath: _uniswapPath,\r\n            lastTriggered: 0,\r\n            trancheAmount: _trancheAmount\r\n        });\r\n        minReturn[_integration] = _minReturn;\r\n\r\n        emit LiquidationModified(_integration);\r\n    }\r\n\r\n    /**\r\n    * @dev Update a liquidation\r\n    * @param _integration The integration contract in question\r\n    * @param _bAsset New asset to buy on Uniswap\r\n    * @param _curvePosition Position of the bAsset in Curves MetaPool\r\n    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\r\n    * @param _trancheAmount The amount of bAsset units to buy in each weekly tranche\r\n    * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\r\n    */\r\n    function updateBasset(\r\n        address _integration,\r\n        address _bAsset,\r\n        int128 _curvePosition,\r\n        address[] calldata _uniswapPath,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn\r\n    )\r\n        external\r\n        onlyGovernance\r\n    {\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n\r\n        address oldBasset = liquidation.bAsset;\r\n        require(oldBasset != address(0), \"Liquidation does not exist\");\r\n\r\n        require(_minReturn > 0, \"Must set some minimum value\");\r\n        require(_bAsset != address(0), \"Invalid bAsset\");\r\n        require(_validUniswapPath(liquidation.sellToken, _bAsset, _uniswapPath), \"Invalid uniswap path\");\r\n\r\n        liquidations[_integration].bAsset = _bAsset;\r\n        liquidations[_integration].curvePosition = _curvePosition;\r\n        liquidations[_integration].uniswapPath = _uniswapPath;\r\n        liquidations[_integration].trancheAmount = _trancheAmount;\r\n        minReturn[_integration] = _minReturn;\r\n\r\n        emit LiquidationModified(_integration);\r\n    }\r\n\r\n    /**\r\n    * @dev Validates a given uniswap path - valid if sellToken at position 0 and bAsset at end\r\n    * @param _sellToken Token harvested from the integration contract\r\n    * @param _bAsset New asset to buy on Uniswap\r\n    * @param _uniswapPath The Uniswap path as an array of addresses e.g. [COMP, WETH, DAI]\r\n    */\r\n    function _validUniswapPath(address _sellToken, address _bAsset, address[] memory _uniswapPath)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 len = _uniswapPath.length;\r\n        return _sellToken == _uniswapPath[0] && _bAsset == _uniswapPath[len-1];\r\n    }\r\n\r\n    /**\r\n    * @dev Delete a liquidation\r\n    */\r\n    function deleteLiquidation(address _integration)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n        require(liquidation.bAsset != address(0), \"Liquidation does not exist\");\r\n\r\n        delete liquidations[_integration];\r\n        delete minReturn[_integration];\r\n\r\n        emit LiquidationEnded(_integration);\r\n    }\r\n\r\n    /***************************************\r\n                    LIQUIDATION\r\n    ****************************************/\r\n\r\n    /**\r\n    * @dev Triggers a liquidation, flow (once per week):\r\n    *    - Sells $COMP for $USDC (or other) on Uniswap (up to trancheAmount)\r\n    *    - Sell USDC for mUSD on Curve\r\n    *    - Send to SavingsManager\r\n    * @param _integration Integration for which to trigger liquidation\r\n    */\r\n    function triggerLiquidation(address _integration)\r\n        external\r\n    {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(tx.origin == msg.sender, \"Must be EOA\");\r\n\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n\r\n        address bAsset = liquidation.bAsset;\r\n        require(bAsset != address(0), \"Liquidation does not exist\");\r\n\r\n        require(block.timestamp > liquidation.lastTriggered.add(interval), \"Must wait for interval\");\r\n        liquidations[_integration].lastTriggered = block.timestamp;\r\n\r\n        // Cache variables\r\n        address sellToken = liquidation.sellToken;\r\n        address[] memory uniswapPath = liquidation.uniswapPath;\r\n\r\n        // 1. Transfer sellTokens from integration contract if there are some\r\n        //    Assumes infinite approval\r\n        uint256 integrationBal = IERC20(sellToken).balanceOf(_integration);\r\n        if (integrationBal > 0) {\r\n            IERC20(sellToken).safeTransferFrom(_integration, address(this), integrationBal);\r\n        }\r\n\r\n        // 2. Get the amount to sell based on the tranche amount we want to buy\r\n        //    Check contract balance\r\n        uint256 sellTokenBal = IERC20(sellToken).balanceOf(address(this));\r\n        require(sellTokenBal > 0, \"No sell tokens to liquidate\");\r\n        require(liquidation.trancheAmount > 0, \"Liquidation has been paused\");\r\n        //    Calc amounts for max tranche\r\n        uint[] memory amountsIn = uniswap.getAmountsIn(liquidation.trancheAmount, uniswapPath);\r\n        uint256 sellAmount = amountsIn[0];\r\n\r\n        if (sellTokenBal < sellAmount) {\r\n            sellAmount = sellTokenBal;\r\n        }\r\n\r\n        // 3. Make the swap\r\n        // 3.1 Approve Uniswap and make the swap\r\n        IERC20(sellToken).safeApprove(address(uniswap), 0);\r\n        IERC20(sellToken).safeApprove(address(uniswap), sellAmount);\r\n        // 3.2. Make the sale > https://uniswap.org/docs/v2/smart-contracts/router02/#swapexacttokensfortokens\r\n\r\n        // min amount out = sellAmount * priceFloor / 1e18\r\n        // e.g. 1e18 * 100e6 / 1e18 = 100e6\r\n        // e.g. 30e8 * 100e6 / 1e8 = 3000e6\r\n        // e.g. 30e18 * 100e18 / 1e18 = 3000e18\r\n        uint256 sellTokenDec = IBasicToken(sellToken).decimals();\r\n        uint256 minOut = sellAmount.mul(minReturn[_integration]).div(10 ** sellTokenDec);\r\n        require(minOut > 0, \"Must have some price floor\");\r\n        uniswap.swapExactTokensForTokens(\r\n            sellAmount,\r\n            minOut,\r\n            uniswapPath,\r\n            address(this),\r\n            block.timestamp.add(1800)\r\n        );\r\n\r\n        // 3.3. Trade on Curve\r\n        uint256 purchased = _sellOnCrv(bAsset, liquidation.curvePosition);\r\n\r\n        // 4.0. Send to SavingsManager\r\n        address savings = _savingsManager();\r\n        IERC20(mUSD).safeApprove(savings, 0);\r\n        IERC20(mUSD).safeApprove(savings, purchased);\r\n        ISavingsManager(savings).depositLiquidation(mUSD, purchased);\r\n\r\n        emit Liquidated(sellToken, mUSD, purchased, bAsset);\r\n    }\r\n\r\n    function _sellOnCrv(address _bAsset, int128 _curvePosition) internal returns (uint256 purchased) {\r\n        uint256 bAssetBal = IERC20(_bAsset).balanceOf(address(this));\r\n\r\n        IERC20(_bAsset).safeApprove(address(curve), 0);\r\n        IERC20(_bAsset).safeApprove(address(curve), bAssetBal);\r\n        uint256 bAssetDec = IBasicToken(_bAsset).decimals();\r\n        // e.g. 100e6 * 95e16 / 1e6 = 100e18\r\n        uint256 minOutCrv = bAssetBal.mul(95e16).div(10 ** bAssetDec);\r\n        purchased = curve.exchange_underlying(_curvePosition, 0, bAssetBal, minOutCrv);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mUSD\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"}],\"name\":\"LiquidationEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"}],\"name\":\"LiquidationModified\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"},{\"internalType\":\"address[]\",\"name\":\"_uniswapPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_trancheAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"createLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurveMetaPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"deleteLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mUSD\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"curvePosition\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"lastTriggered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"},{\"internalType\":\"address[]\",\"name\":\"_uniswapPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_trancheAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"updateBasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Liquidator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fa448f8c326ee6e1b980486d76f0fb5f502f97eabf9cd57b70ab3969c47641a4"}]}