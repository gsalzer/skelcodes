{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ERC20 {\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title Protocol adapter interface.\\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ninterface ProtocolAdapter {\\n\\n    /**\\n     * @dev MUST return \\\"Asset\\\" or \\\"Debt\\\".\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function adapterType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return token type (default is \\\"ERC20\\\").\\n     * SHOULD be implemented by the public constant state variable.\\n     */\\n    function tokenType() external pure returns (string memory);\\n\\n    /**\\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\\n     */\\n    function getBalance(address token, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/igor/job/dev/defi-sdk/contracts/adapters/compound/CompoundGovernanceAdapter.sol\": {\r\n      \"content\": \"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport { ERC20 } from \\\"../../ERC20.sol\\\";\\nimport { ProtocolAdapter } from \\\"../ProtocolAdapter.sol\\\";\\n\\n\\n/**\\n * @dev CompMarketState contract interface.\\n * Only the functions required for CompoundGovernanceAdapter contract are added.\\n * The CompMarketState struct is available here\\n * github.com/compound-finance/compound-protocol/blob/master/contracts/ComptrollerStorage.sol.\\n */\\nstruct CompMarketState {\\n    uint224 index;\\n    uint32 block;\\n}\\n\\n\\n/**\\n * @dev Comptroller contract interface.\\n * Only the functions required for CompoundGovernanceAdapter contract are added.\\n * The Comptroller contract is available here\\n * github.com/compound-finance/compound-protocol/blob/master/contracts/Comptroller.sol.\\n */\\ninterface Comptroller {\\n    function getAllMarkets() external view returns (address[] memory);\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n    function compAccrued(address) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @dev CToken contract interface.\\n * Only the functions required for CompoundGovernanceAdapter contract are added.\\n * The CToken contract is available here\\n * github.com/compound-finance/compound-protocol/blob/master/contracts/CToken.sol.\\n */\\ninterface CToken {\\n    function borrowBalanceStored(address) external view returns (uint256);\\n    function borrowIndex() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title Asset adapter for Compound Governance.\\n * @dev Implementation of ProtocolAdapter interface.\\n * @author Igor Sobolev <sobolev@zerion.io>\\n */\\ncontract CompoundGovernanceAdapter is ProtocolAdapter {\\n\\n    string public constant override adapterType = \\\"Asset\\\";\\n\\n    string public constant override tokenType = \\\"ERC20\\\";\\n\\n    address internal constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    \\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n\\n    /**\\n     * @return Amount of unclaimed COMP by the given account.\\n     * @dev Implementation of ProtocolAdapter interface function.\\n     */\\n    function getBalance(address token, address account) external view override returns (uint256) {\\n        if (token != COMP) {\\n            return 0;\\n        } else {\\n            uint256 balance = Comptroller(COMPTROLLER).compAccrued(account);\\n            address[] memory allMarkets = Comptroller(COMPTROLLER).getAllMarkets();\\n\\n            for (uint256 i = 0; i < allMarkets.length; i++) {\\n                balance += borrowerComp(account, allMarkets[i]);\\n                balance += supplierComp(account, allMarkets[i]);\\n            }\\n\\n            return balance;\\n        }\\n    }\\n\\n    function borrowerComp(address account, address cToken) internal view returns (uint256) {\\n        uint256 borrowerIndex = Comptroller(COMPTROLLER).compBorrowerIndex(cToken, account);\\n\\n        if (borrowerIndex > 0) {\\n            uint256 borrowIndex = uint256(Comptroller(COMPTROLLER).compBorrowState(cToken).index);\\n            require(borrowIndex >= borrowerIndex, \\\"CGA: underflow!\\\");\\n            uint256 deltaIndex = borrowIndex - borrowerIndex;\\n            uint256 borrowerAmount = mul(\\n                CToken(cToken).borrowBalanceStored(account),\\n                1e18\\n            ) / CToken(cToken).borrowIndex();\\n            uint256 borrowerDelta = mul(borrowerAmount, deltaIndex) / 1e36;\\n            return borrowerDelta;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function supplierComp(address account, address cToken) internal view returns (uint256) {\\n        uint256 supplierIndex = Comptroller(COMPTROLLER).compSupplierIndex(cToken, account);\\n        uint256 supplyIndex = uint256(Comptroller(COMPTROLLER).compSupplyState(cToken).index);\\n        if (supplierIndex == 0 && supplyIndex > 0) {\\n            supplierIndex = 1e36;\\n        }\\n        require(supplyIndex >= supplierIndex, \\\"CGA: underflow!\\\");\\n        uint256 deltaIndex = supplyIndex - supplierIndex;\\n        uint256 supplierAmount = CToken(cToken).balanceOf(account);\\n        uint256 supplierDelta = mul(supplierAmount, deltaIndex) / 1e36;\\n\\n        return supplierDelta;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"CGA: mul overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundGovernanceAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}