{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/IGetBackETHHelperV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\ninterface IGetBackETHHelperV2 {\\n  function BASE (  ) external view returns ( uint256 );\\n  function FEE (  ) external view returns ( uint256 );\\n  function FeeDiscountRatio (  ) external view returns ( uint256 );\\n  function FeeDiscountToken (  ) external view returns ( address );\\n  function FeeTokenBalanceNeeded (  ) external view returns ( uint256 );\\n  function IsEligibleForFeeDiscount ( address user ) external view returns ( bool );\\n  function QueueDelay (  ) external view returns ( uint256 );\\n  function UniRouter (  ) external view returns ( address );\\n  function Unifactory (  ) external view returns ( address );\\n  function WETH (  ) external view returns ( address );\\n  function addWhitelisted ( address addx ) external;\\n  function addr (  ) external view returns ( address );\\n  function addrSwapStats ( address ) external view returns ( uint256 );\\n  function checkPerm ( address sender, uint256 timex, address token ) external view returns ( bool );\\n  function clearQueueFromOwner (  ) external;\\n  function feeGetter (  ) external view returns ( address );\\n  function getSendAfterFee ( uint256 amount, address user, uint256 fee ) external view returns ( uint256 amt );\\n  function getTimeLeftToTimeout (  ) external view returns ( uint256 );\\n  function getTokens (  ) external view returns ( address[] memory);\\n  function getUsers (  ) external view returns ( address[] memory);\\n  function getWETHBalance (  ) external view returns ( uint256 );\\n  function isAwaitingSwap (  ) external view returns ( bool );\\n  function isQueueEmpty (  ) external view returns ( bool );\\n  function owner (  ) external view returns ( address );\\n  function queue ( address tokentoQueue ) external;\\n  function recoverTokens ( address token ) external;\\n  function renounceOwnership (  ) external;\\n  function revokeWhitelisted ( address addx ) external;\\n  function setFeeDiscountRatio ( uint256 ratio ) external;\\n  function setFeeDiscountToken ( address token ) external;\\n  function setFeeGetter ( address newFeeGetter ) external;\\n  function setQueueDelay ( uint256 newDelay ) external;\\n  function setServicefee ( uint256 fee ) external;\\n  function setTokensForFeeDiscount ( uint256 tokenAmt ) external;\\n  function shouldClearQueue (  ) external view returns ( bool );\\n  function swapQueuedToken (  ) external returns ( uint256[] memory amounts );\\n  function swapToETH ( address tokenx ) external returns ( uint256[] memory  amounts );\\n  function time (  ) external view returns ( uint256 );\\n  function tokenHasBurn ( address ) external view returns ( bool );\\n  function tokenQueued (  ) external view returns ( address );\\n  function tokenSwappedSuccess ( address ) external view returns ( bool );\\n  function tokenTried ( address ) external view returns ( bool );\\n  function totalETHFees (  ) external view returns ( uint256 );\\n  function totalETHSwapped (  ) external view returns ( uint256 );\\n  function totalTries (  ) external view returns ( uint256 );\\n  function transferOwnership ( address newOwner ) external;\\n  function whitelistedExecutors ( address ) external view returns ( bool );\\n}\\n\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Keep3r/IKeep3rV1Mini.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\ninterface IKeep3rV1Mini {\\n    function isKeeper(address) external returns (bool);\\n    function worked(address keeper) external;\\n    function totalBonded() external view returns (uint);\\n    function bonds(address keeper, address credit) external view returns (uint);\\n    function votes(address keeper) external view returns (uint);\\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\\n    function addCreditETH(address job) external payable;\\n    function credits(address job, address credit) external view returns (uint);\\n    function receipt(address credit, address keeper, uint amount) external;\\n    function ETH() external view returns (address);\\n    function receiptETH(address keeper, uint amount) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/jobs/GBETHRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n//Import job interfaces and helper interfaces\\nimport '../interfaces/IGetBackETHHelperV2.sol';\\nimport '../interfaces/Keep3r/IKeep3rV1Mini.sol';\\n\\n\\ncontract GetBackETHRelayer is Ownable {\\n    IKeep3rV1Mini public RLR;\\n    IGetBackETHHelperV2 public iGBETH;\\n\\n    modifier upkeep() {\\n        require(RLR.isKeeper(msg.sender), \\\"::isKeeper: relayer is not registered\\\");\\n        _;\\n        RLR.worked(msg.sender);\\n    }\\n\\n    //Init interfaces with addresses\\n    constructor (address token,address gbethelper) public {\\n        RLR = IKeep3rV1Mini(token);\\n        iGBETH = IGetBackETHHelperV2(gbethelper);\\n    }\\n\\n    //Use this to depricate this job to move rlr to another job later\\n    function destructJob() public onlyOwner {\\n     //Get the credits for this job first\\n     uint256 currRLRCreds = RLR.credits(address(this),address(RLR));\\n     uint256 currETHCreds = RLR.credits(address(this),RLR.ETH());\\n     //Send out RLR Credits if any\\n     if(currRLRCreds > 0) {\\n        //Invoke receipt to send all the credits of job to owner\\n        RLR.receipt(address(RLR),owner(),currRLRCreds);\\n     }\\n     //Send out ETH credits if any\\n     if (currETHCreds > 0) {\\n        RLR.receiptETH(owner(),currETHCreds);\\n     }\\n     //Finally self destruct the contract after sending the credits\\n     selfdestruct(payable(owner()));\\n    }\\n\\n    function workableQueue() public view returns (bool) {\\n        return iGBETH.shouldClearQueue();\\n    }\\n\\n    function workableSwap() public view returns (bool) {\\n        return iGBETH.isAwaitingSwap();\\n    }\\n\\n    function clearQueue() public upkeep {\\n        require(workableQueue(),\\\"!workable\\\");\\n        iGBETH.clearQueueFromOwner();\\n    }\\n\\n    function executeSwap() public upkeep {\\n        require(workableSwap(),\\\"!workable\\\");\\n        iGBETH.swapQueuedToken();\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gbethelper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RLR\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Mini\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iGBETH\",\"outputs\":[{\"internalType\":\"contract IGetBackETHHelperV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workableQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workableSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GetBackETHRelayer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e3ef895c59e7db27214ab5bbf56347ce115a3f400000000000000000000000086fc7820ef00ef076d8b89877434e58afd8cb0c2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}