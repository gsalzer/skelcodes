{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/commons/Ownable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\nlibrary SafeMath {\r\n    using SafeMath for uint256;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"Add overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(x >= y, \"Sub overflow\");\r\n        return x - y;\r\n    }\r\n\r\n    function mult(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 z = x * y;\r\n        require(z/x == y, \"Mult overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    function multdiv(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\r\n        require(z != 0, \"div by zero\");\r\n        return x.mult(y) / z;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/StringUtils.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\nlibrary StringUtils {\r\n    function toBytes32(string memory _a) internal pure returns (bytes32 b) {\r\n        require(bytes(_a).length <= 32, \"string too long\");\r\n\r\n        assembly {\r\n            let bi := mul(mload(_a), 8)\r\n            b := and(mload(add(_a, 32)), shl(sub(256, bi), sub(exp(2, bi), 1)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IOracleAdapter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IOracleAdapter {\r\n\r\n  function setAggregator(\r\n    bytes32 _symbolA,\r\n    bytes32 _symbolB,\r\n    address _aggregator\r\n  ) external;\r\n\r\n  function removeAggregator(bytes32 _symbolA, bytes32 _symbolB) external;\r\n  function getRate (bytes32[] calldata path) external view returns (uint256, uint256);\r\n  function latestTimestamp (bytes32[] calldata path) external view returns (uint256);\r\n\r\n  event RemoveAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n  event SetAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n}\r\n\r\n// File: contracts/ChainlinkAdapterV3.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ChainlinkAdapterV3 is Ownable, IOracleAdapter {\r\n    using SafeMath for uint256;\r\n    using StringUtils for string;\r\n\r\n    mapping(bytes32 => mapping(bytes32 => address)) public aggregators;\r\n\r\n    event SetAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n    event RemoveAggregator(bytes32 _symbolA, bytes32 _symbolB, address _aggregator);\r\n\r\n    function symbolToBytes32(string calldata _symbol) external pure returns (bytes32) {\r\n        return _symbol.toBytes32();\r\n    }\r\n\r\n    function setAggregator(\r\n        bytes32 _symbolA,\r\n        bytes32 _symbolB,\r\n        address _aggregator\r\n    ) external override onlyOwner {\r\n        require(_aggregator != address(0), \"ChainLinkAdapter/Aggregator 0x0 is not valid\");\r\n        require(aggregators[_symbolA][_symbolB] == address(0), \"ChainLinkAdapter/Aggregator is already set\");\r\n\r\n        aggregators[_symbolA][_symbolB] = _aggregator;\r\n        emit SetAggregator(\r\n            _symbolA,\r\n            _symbolB,\r\n            _aggregator\r\n        );\r\n    }\r\n\r\n    function removeAggregator(\r\n        bytes32 _symbolA,\r\n        bytes32 _symbolB\r\n    ) external override onlyOwner {\r\n        address remAggregator = aggregators[_symbolA][_symbolB];\r\n        require(remAggregator != address(0), \"ChainLinkAdapter/Aggregator not set\");\r\n\r\n        aggregators[_symbolA][_symbolB] = address(0);\r\n        emit RemoveAggregator(\r\n            _symbolA,\r\n            _symbolB,\r\n            remAggregator\r\n        );\r\n    }\r\n\r\n    function latestTimestamp(bytes32[] calldata path) external override view returns (uint256 lastTimestamp)  {\r\n        uint256 prevTimestamp;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (bytes32 input, bytes32 output) = (path[i], path[i + 1]);\r\n            (uint256 timestamp0) = getLatestTimestamp(input, output);\r\n            lastTimestamp = timestamp0 < prevTimestamp || prevTimestamp == 0  ? timestamp0 : prevTimestamp;\r\n            prevTimestamp = lastTimestamp;\r\n        }\r\n    }\r\n\r\n    function getLatestTimestamp(bytes32 _symbolA, bytes32 _symbolB) public view returns (uint256 lastTimestamp)  {\r\n        address aggregator = aggregators[_symbolA][_symbolB];\r\n\r\n        if (aggregator == address(0)) {\r\n            aggregator = aggregators[_symbolB][_symbolA];\r\n            require(aggregator != address(0), \"ChainLinkAdapter/Aggregator not set, path not resolved\");\r\n        }\r\n        (,,,lastTimestamp,) = AggregatorV3Interface(aggregator).latestRoundData();\r\n    }\r\n\r\n    function getRate(bytes32[] calldata path) external override view returns (uint256 combinedRate, uint256 decimals)  {\r\n        uint256 prevRate;\r\n        uint256 prevDec;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (bytes32 input, bytes32 output) = (path[i], path[i + 1]);\r\n            (combinedRate, decimals) = _getPairRate(input, output);\r\n            combinedRate = prevRate > 0 ? _getCombined(prevRate, combinedRate, prevDec) : combinedRate;\r\n            prevRate = combinedRate;\r\n            prevDec = decimals;\r\n        }\r\n    }\r\n\r\n    function getPairLastRate(bytes32 _symbolA, bytes32 _symbolB) public view returns (uint256 answer, uint256 decimals)  {\r\n        AggregatorV3Interface aggregator = AggregatorV3Interface(aggregators[_symbolA][_symbolB]);\r\n        (,int256 rate,,,) = aggregator.latestRoundData();\r\n        require(rate > 0, \"ChainLinkAdapter/Rate lower or equal to 0\");\r\n        answer = uint256(rate);\r\n        decimals = uint256(aggregator.decimals());\r\n    }\r\n\r\n    function _getPairRate(bytes32 _input, bytes32 _output) private view returns (uint256 rate, uint256 decimals) {\r\n        address aggregator = aggregators[_input][_output];\r\n\r\n        if (aggregator == address(0)) {\r\n            aggregator = aggregators[_output][_input];\r\n            require(aggregator != address(0), \"ChainLinkAdapter/Aggregator not set, path not resolved\");\r\n            (rate, decimals) = getPairLastRate(_output, _input);\r\n            rate = (10**(uint256(decimals)*2)).div(rate);\r\n        } else {\r\n            (rate, decimals) = getPairLastRate(_input, _output);     \r\n        }\r\n    }\r\n\r\n    function _getCombined(uint256 rate0, uint256 rate1, uint256 _decimal) private pure returns (uint256 combinedRate) {\r\n        combinedRate = rate0.mult(rate1).div(10 ** _decimal);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"RemoveAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"}],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"}],\"name\":\"getPairLastRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"answer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"path\",\"type\":\"bytes32[]\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"combinedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"path\",\"type\":\"bytes32[]\"}],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"}],\"name\":\"removeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_symbolA\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_symbolB\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"symbolToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkAdapterV3","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://99e1ec185d845190ebbec6dfd9f0aaa874630cdcb004c8014ad44f8224d07dc0"}]}