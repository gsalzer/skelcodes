{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-02\r\n*/\r\n\r\n/// BasicTokenAdapters.sol\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract CollateralLike {\r\n    function decimals() virtual public view returns (uint256);\r\n    function transfer(address,uint256) virtual public returns (bool);\r\n    function transferFrom(address,address,uint256) virtual public returns (bool);\r\n}\r\n\r\nabstract contract DSTokenLike {\r\n    function mint(address,uint256) virtual external;\r\n    function burn(address,uint256) virtual external;\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function modifyCollateralBalance(bytes32,address,int256) virtual external;\r\n    function transferInternalCoins(address,address,uint256) virtual external;\r\n}\r\n\r\ncontract CoinJoin {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"CoinJoin/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // SAFE database\r\n    SAFEEngineLike public safeEngine;\r\n    // Coin created by the system; this is the external, ERC-20 representation, not the internal 'coinBalance'\r\n    DSTokenLike    public systemCoin;\r\n    // Whether this contract is enabled or not\r\n    uint256        public contractEnabled;\r\n    // Number of decimals the system coin has\r\n    uint256        public decimals;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event DisableContract();\r\n    event Join(address sender, address account, uint256 wad);\r\n    event Exit(address sender, address account, uint256 wad);\r\n\r\n    constructor(address safeEngine_, address systemCoin_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        contractEnabled                = 1;\r\n        safeEngine                     = SAFEEngineLike(safeEngine_);\r\n        systemCoin                     = DSTokenLike(systemCoin_);\r\n        decimals                       = 18;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n    /**\r\n     * @notice Disable this contract\r\n     */\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n        emit DisableContract();\r\n    }\r\n    uint256 constant RAY = 10 ** 27;\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"CoinJoin/mul-overflow\");\r\n    }\r\n    /**\r\n    * @notice Join system coins in the system\r\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\r\n           When we join, the amount (wad) is multiplied by 10**27 (ray)\r\n    * @param account Account that will receive the joined coins\r\n    * @param wad Amount of external coins to join (18 decimal number)\r\n    **/\r\n    function join(address account, uint256 wad) external {\r\n        safeEngine.transferInternalCoins(address(this), account, multiply(RAY, wad));\r\n        systemCoin.burn(msg.sender, wad);\r\n        emit Join(msg.sender, account, wad);\r\n    }\r\n    /**\r\n    * @notice Exit system coins from the system and inside 'Coin.sol'\r\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\r\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\r\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\r\n    * @param account Account that will receive the exited coins\r\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\r\n    **/\r\n    function exit(address account, uint256 wad) external {\r\n        require(contractEnabled == 1, \"CoinJoin/contract-not-enabled\");\r\n        safeEngine.transferInternalCoins(msg.sender, address(this), multiply(RAY, wad));\r\n        systemCoin.mint(account, wad);\r\n        emit Exit(msg.sender, account, wad);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"systemCoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoin\",\"outputs\":[{\"internalType\":\"contract DSTokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoinJoin","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a696200000000000000000000000003ab458634910aad20ef5f1c8ee96f1d6ac54919","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9f4c6d5b37dbecf3c8ad8bd811748c3f5c58f5d2ce8c6b6109f0a1a07e29f96e"}]}