{"status":"1","message":"OK","result":[{"SourceCode":"/*\nSPDX-License-Identifier: UNLICENSED\n(c) Developed by AgroToken\nThis work is unlicensed.\n*/\npragma solidity 0.7.5;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title AgroToken is token that refers to real grains\n * AgroToken is a token admnistrated by AgroToken company \n * (represented by admin Ethereum address variable in this Smart Contract).\n * AgroToken performs all administrative\n * functions based on grain documentations and certifications in partnership\n * with agro traders (called Grain Oracles) and in complaince with local authorities.\n * */\ncontract AgroToken is IERC20 {\n    using SafeMath for uint256;\n\n    //\n    // events\n    //\n    // mint/burn events\n    event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\n    event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\n\n    // admin events\n    event BlockLockSet(uint256 _value);\n    event NewAdmin(address _newAdmin);\n    event NewManager(address _newManager);\n    event GrainStockChanged(\n        uint256 indexed contractId,\n        string grainCategory,\n        string grainContractInfo,\n        uint256 amount,\n        uint8 status,\n        uint256 newTotalSupplyAmount\n    );\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"Only admin can perform this operation\");\n        _;\n    }    \n\n    modifier boardOrAdmin {\n        require(\n            msg.sender == board || msg.sender == admin,\n            \"Only admin or board can perform this operation\"\n        );\n        _;\n    }\n\n    modifier blockLock(address _sender) {\n        require(\n            !isLocked() || _sender == admin,\n            \"Contract is locked except for the admin\"\n        );\n        _;\n    }\n\n    struct Grain {\n        string category;\n        string contractInfo;\n        uint256 amount;\n        uint8 status;\n    }\n\n    uint256 override public totalSupply;\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    address public admin;\n    address public board;    \n    uint256 public lockedUntilBlock;\n    uint256 public tokenizationFee;\n    uint256 public deTokenizationFee;\n    uint256 public transferFee;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n    Grain[] public grains;\n\n    /**\n     * @dev Constructor\n     */\n    constructor() {\n        name = \"Agrotoken SOYA\";\n        decimals = 4;\n        symbol = \"SOYA\";\n        lockedUntilBlock = 0;\n        admin = msg.sender;\n        board = 0xA01cD92f06f60b9fdcCCdF6280CE9A10803bA720;\n        totalSupply = 0;\n        balances[address(this)] = totalSupply;\n    }\n    \n\n    /**\n     * @dev Add new grain contract to portfolio\n     * @param _grainCategory - Grain category\n     * @param _grainContractInfo - Grain Contract's details\n     * @param _grainAmount - amount of grain in tons\n     * @return success\n     */\n    function addNewGrainContract(        \n        string memory _grainCategory,\n        string memory _grainContractInfo,\n        uint256 _grainAmount\n    ) public onlyAdmin returns (bool success) {\n        Grain memory newGrain = Grain(\n            _grainCategory,\n            _grainContractInfo,\n            _grainAmount,\n            1\n        );\n        grains.push(newGrain);\n        _mint(address(this), _grainAmount);\n        emit GrainStockChanged(\n            grains.length-1,\n            _grainCategory,\n            _grainContractInfo,\n            _grainAmount,\n            1,\n            totalSupply\n        );\n        success = true;\n        return success;\n    }\n\n    /**\n     * @dev Remove a contract from Portfolio\n     * @param _contractIndex - Contract Index within Portfolio\n     * @return True if success\n     */\n    function removeGrainContract(uint256 _contractIndex) public onlyAdmin returns (bool) {\n        require(\n            _contractIndex < grains.length,\n            \"Invalid contract index number. Greater than total grain contracts\"\n        );\n        Grain storage grain = grains[_contractIndex];\n        require(grain.status == 1, \"This contract is no longer active\");\n        require(_burn(address(this), grain.amount), \"Could not to burn tokens\");\n        grain.status = 0;\n        emit GrainStockChanged( \n            _contractIndex,           \n            grain.category,\n            grain.contractInfo,\n            grain.amount,\n            grain.status,\n            totalSupply\n        );\n        return true;\n    }\n\n    /**\n     * @dev Updates a Contract\n     * @param _contractIndex - Contract Index within Portfolio\n     * @param _grainCategory - Grain category\n     * @param _grainContractInfo - Grain Contract's details\n     * @param _grainAmount - amount of grain in tons\n     * @return True if success\n     */\n    function updateGrainContract(\n        uint256 _contractIndex,\n        string memory _grainCategory,\n        string memory _grainContractInfo,\n        uint256 _grainAmount\n    ) public onlyAdmin returns (bool) {\n        require(\n            _contractIndex < grains.length,\n            \"Invalid contract index number. Greater than total grain contracts\"\n        );\n        require(_grainAmount > 0, \"Cannot set zero asset amount\");\n        Grain storage grain = grains[_contractIndex];\n        require(grain.status == 1, \"This contract is no longer active\");\n        grain.category = _grainCategory;\n        grain.contractInfo = _grainContractInfo;\n        if (grain.amount > _grainAmount) {\n            _burn(address(this), grain.amount.sub(_grainAmount));\n        } else if (grain.amount < _grainAmount) {\n            _mint(address(this), _grainAmount.sub(grain.amount));           \n        }\n        grain.amount = _grainAmount;\n        emit GrainStockChanged(\n            _contractIndex,\n            grain.category,\n            grain.contractInfo,\n            grain.amount,\n            grain.status,\n            totalSupply\n        );\n        return true;\n    }\n\n    /**\n     * @return Number of Grain Contracts in Portfolio\n     */\n    function totalContracts() public view returns (uint256) {\n        return grains.length;\n    }\n\n    /**\n     * @dev ERC20 Transfer\n     * @param _to - destination address\n     * @param _value - value to transfer\n     * @return True if success\n     */\n    function transfer(address _to, uint256 _value)\n        override\n        external\n        blockLock(msg.sender)\n        returns (bool)\n    {\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\n        require(\n            isTransferValid(from, _to, _value),\n            \"Invalid Transfer Operation\"\n        );\n        balances[from] = balances[from].sub(_value);\n        uint256 serviceAmount = 0;\n        uint256 netAmount = _value;      \n        (serviceAmount, netAmount) = calcFees(transferFee, _value); \n        balances[_to] = balances[_to].add(netAmount);\n        balances[address(this)] = balances[address(this)].add(serviceAmount);\n        emit Transfer(from, _to, netAmount);\n        emit Transfer(from, address(this), serviceAmount);\n        return true;\n    }\n\n\n    /**\n     * @dev ERC20 TransferFrom\n     * @param _from - source address\n     * @param _to - destination address\n     * @param _value - value\n     * @return True if success\n     */\n    function transferFrom(address _from, address _to, uint256 _value)\n        override\n        external\n        blockLock(_from)\n        returns (bool)\n    {\n        // check sufficient allowance\n        require(\n            _value <= allowed[_from][msg.sender],\n            \"Value informed is invalid\"\n        );\n        require(\n            isTransferValid(_from, _to, _value),\n            \"Invalid Transfer Operation\"\n        );\n        // transfer tokens\n        balances[_from] = balances[_from].sub(_value);\n        uint256 serviceAmount = 0;\n        uint256 netAmount = _value;      \n        (serviceAmount, netAmount) = calcFees(transferFee, _value); \n        balances[_to] = balances[_to].add(netAmount);\n        balances[address(this)] = balances[address(this)].add(serviceAmount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(\n            _value,\n            \"Value lower than approval\"\n        );\n\n        emit Transfer(_from, _to, netAmount);\n        emit Transfer(_from, address(this), serviceAmount);\n        return true;\n    }\n\n    /**\n     * @dev ERC20 Approve token transfers on behalf of other token owner\n     * @param _spender - destination address\n     * @param _value - value to be approved\n     * @return True if success\n     */\n    function approve(address _spender, uint256 _value)\n        override\n        external\n        blockLock(msg.sender)\n        returns (bool)\n    {\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\n        require((_value == 0) || (allowed[from][_spender] == 0), \"Allowance cannot be increased or decreased if value is different from zero\");\n        allowed[from][_spender] = _value;\n        emit Approval(from, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\n        require(_spender != address(0), \"ERC20: decreaseAllowance to the zero address\");\n\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\n        require(allowed[from][_spender] >= _subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(from, _spender, allowed[from][_spender].sub(_subtractedValue));\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\n        require(_spender != address(0), \"ERC20: decreaseAllowance to the zero address\");\n\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\n        _approve(from, _spender, allowed[from][_spender].add(_addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address _owner, address _spender, uint256 _amount) internal virtual {\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n\n        allowed[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    /**\n     * @dev withdraw tokens collected after receive fees \n     * @param _to - destination address\n     * @param _value - value to transfer\n     * @return True if success\n     */\n    function withdraw(address _to, uint256 _value)\n        external\n        boardOrAdmin\n        returns (bool)\n    {\n        address from = address(this);\n        require(\n            isTransferValid(from, _to, _value),\n            \"Invalid Transfer Operation\"\n        );\n        balances[from] = balances[from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Mint new tokens. Can only be called by mana\n     * @param _to - destination address\n     * @param _value - value\n     * @return True if success\n     */\n    function _mint(address _to, uint256 _value)\n        internal\n        onlyAdmin        \n        returns (bool)\n    {\n        require(_to != address(0), \"ERC20: mint to the zero address\");\n        require(_to != admin, \"Admin cannot mint tokens to herself\");\n        uint256 serviceAmount;\n        uint256 netAmount;\n        (serviceAmount, netAmount) = calcFees(tokenizationFee, _value);\n\n        balances[_to] = balances[_to].add(netAmount);\n        balances[address(this)] = balances[address(this)].add(serviceAmount);\n        totalSupply = totalSupply.add(_value);\n\n        emit Mint(_to, netAmount, totalSupply);\n        emit Mint(address(this), serviceAmount, totalSupply);\n        emit Transfer(address(0), _to, netAmount);\n        emit Transfer(address(0), address(this), serviceAmount);\n\n        return true;\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param _account - address\n     * @param _value - value\n     * @return True if success\n     */\n    function _burn(address _account, uint256 _value)\n        internal        \n        onlyAdmin\n        returns (bool)\n    {\n        require(_account != address(0), \"ERC20: burn from the zero address\");\n        uint256 serviceAmount;\n        uint256 netAmount;\n        (serviceAmount, netAmount) = calcFees(deTokenizationFee, _value);\n        totalSupply = totalSupply.sub(netAmount);\n        balances[_account] = balances[_account].sub(_value);\n        balances[address(this)] = balances[address(this)].add(serviceAmount);\n        emit Transfer(_account, address(0), netAmount);\n        emit Transfer(_account, address(this), serviceAmount);\n        emit Burn(_account, netAmount, totalSupply);        \n        return true;\n    }\n\n    /**\n     * @dev Set block lock. Until that block (exclusive) transfers are disallowed\n     * @param _lockedUntilBlock - Block Number\n     * @return True if success\n     */\n    function setBlockLock(uint256 _lockedUntilBlock)\n        public\n        boardOrAdmin\n        returns (bool)\n    {\n        lockedUntilBlock = _lockedUntilBlock;\n        emit BlockLockSet(_lockedUntilBlock);\n        return true;\n    }\n\n    /**\n     * @dev Replace current admin with new one\n     * @param _newAdmin New token admin\n     * @return True if success\n     */\n    function replaceAdmin(address _newAdmin)\n        public\n        boardOrAdmin\n        returns (bool)\n    {\n        require(_newAdmin != address(0x0), \"Null address\");\n        admin = _newAdmin;\n        emit NewAdmin(_newAdmin);\n        return true;\n    }\n\n    /**\n    * @dev Change AgroToken fee values\n    * @param _feeType which fee is being changed. 1 = tokenizationFee, 2 = deTokenizationFee and 3 = transferFee\n    * @param _newAmount new fee value\n    * @return processing status\n    */\n    function changeFee(uint8 _feeType, uint256 _newAmount) external boardOrAdmin returns (bool) {\n        require(_newAmount<=2, \"Invalid or exceed white paper definition\");\n        require(_feeType >0 && _feeType<=3, \"Invalid fee type\");\n        if (_feeType == 1) {\n            tokenizationFee = _newAmount;\n        } else if (_feeType == 2) {\n            deTokenizationFee = _newAmount;\n        } else if (_feeType == 3) {\n            transferFee = _newAmount;\n        }\n        return true;\n    }\n\n    /**\n     * @dev ERC20 balanceOf\n     * @param _owner Owner address\n     * @return True if success\n     */\n    function balanceOf(address _owner) public override view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev ERC20 allowance\n     * @param _owner Owner address\n     * @param _spender Address allowed to spend from Owner's balance\n     * @return uint256 allowance\n     */\n    function allowance(address _owner, address _spender)\n        override\n        external\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Are transfers currently disallowed\n     * @return True if disallowed\n     */\n    function isLocked() public view returns (bool) {\n        return lockedUntilBlock > block.number;\n    }\n\n    /**\n     * @dev Checks if transfer parameters are valid\n     * @param _from Source address\n     * @param _to Destination address\n     * @param _amount Amount to check\n     * @return True if valid\n     */\n    function isTransferValid(address _from, address _to, uint256 _amount)\n        public\n        view\n        returns (bool)\n    {\n        if (_from == address(0)) {\n            return false;\n        }\n\n        if (_to == address(0) || _to == admin) {\n            return false;\n        }\n\n        bool fromOK = true;\n        bool toOK = true;\n\n        return\n            balances[_from] >= _amount && // sufficient balance\n            fromOK && // a seller holder within the whitelist\n            toOK; // a buyer holder within the whitelist\n    }\n\n    /**\n    * @dev Calculates AgroToken fees over mint, burn and transfer operations\n    * @param _fee value of the fee\n    * @param _amount amount involved in the transaction\n    * @return serviceAmount value to be paid to AgroToken\n    * @return netAmount amount after fees\n    */\n    function calcFees(uint256 _fee, uint256 _amount) public pure returns(uint256 serviceAmount, uint256 netAmount ) {\n        serviceAmount = (_amount.mul(_fee)) / 100;\n        netAmount = _amount.sub(serviceAmount);\n        return (serviceAmount, netAmount);\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BlockLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"grainCategory\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"grainContractInfo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"GrainStockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"NewManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_grainCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_grainContractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_grainAmount\",\"type\":\"uint256\"}],\"name\":\"addNewGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"board\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deTokenizationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isTransferValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractIndex\",\"type\":\"uint256\"}],\"name\":\"removeGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setBlockLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_grainCategory\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_grainContractInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_grainAmount\",\"type\":\"uint256\"}],\"name\":\"updateGrainContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AgroToken","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}