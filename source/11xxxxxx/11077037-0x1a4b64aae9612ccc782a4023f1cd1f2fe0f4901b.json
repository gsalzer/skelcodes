{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\ninterface BaseToken {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface PepedexToken {\r\n    function getAddressPpblzStakeAmount(address _account) external view returns (uint256);\r\n    function getAddressUniV2StakeAmount(address _account) external view returns (uint256);\r\n}\r\n\r\ncontract PepemonMasterProxy {\r\n    using SafeMath for uint256;\r\n    \r\n    IUniswapV2Pair public univ2Token;\r\n    BaseToken public ppblzToken;\r\n    PepedexToken public ppdexToken;\r\n    \r\n    constructor(address _univ2Addr, address _ppblzAddr, address _ppdexAddr) public {\r\n        univ2Token = IUniswapV2Pair(_univ2Addr);\r\n        ppblzToken = BaseToken(_ppblzAddr);\r\n        ppdexToken = PepedexToken(_ppdexAddr);\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return uint8(18);\r\n    }\r\n    \r\n    function name() external pure returns (string memory) {\r\n        return \"PPMASTER\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"PPMASTER\";\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return ppblzToken.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _voter) external view returns (uint256) {\r\n        uint256 _votes = 0;\r\n\r\n        uint256 univ2Supply = univ2Token.totalSupply();\r\n        uint256 ppblzInPool = ppblzToken.balanceOf(address(univ2Token));\r\n\r\n        // Get total UNIV2 balance of address (what's on the address + what's staked into PepedexToken)\r\n        uint256 univ2Balance = univ2Token.balanceOf(address(_voter));\r\n        univ2Balance = univ2Balance.add(ppdexToken.getAddressUniV2StakeAmount(address(_voter)));\r\n\r\n        // Count PPBLZ in Uniswap LP provided by address\r\n        _votes = _votes.add(univ2Balance.mul(ppblzInPool)).div(univ2Supply);\r\n\r\n        // Count PPBLZ held by address\r\n        _votes = _votes.add(ppblzToken.balanceOf(address(_voter)));\r\n\r\n        // Count PPBLZ staked in PepedexToken by address\r\n        _votes = _votes.add(ppdexToken.getAddressPpblzStakeAmount(address(_voter)));\r\n\r\n        return _votes;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_univ2Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ppblzAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ppdexAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ppblzToken\",\"outputs\":[{\"internalType\":\"contract BaseToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ppdexToken\",\"outputs\":[{\"internalType\":\"contract PepedexToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"univ2Token\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PepemonMasterProxy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009479b62fd1cb36f8fed1eebb1bb373d238d082160000000000000000000000004d2ee5dae46c86da2ff521f7657dad98834f97b8000000000000000000000000f1f508c7c9f0d1b15a76fba564eef2d956220cf7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://74395c362fc1798d4071301ff7b7de8e50a68b677096a2f9a6ad44014cbf0e4d"}]}