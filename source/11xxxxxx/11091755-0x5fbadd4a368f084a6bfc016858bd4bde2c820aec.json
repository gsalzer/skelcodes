{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.12;\n\n\n// \n// TODO: Needs testing to make sure math is correct and overflow/underflows are caught in all cases\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= b, \"BoringMath: Overflow\"); return c; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a, \"BoringMath: Underflow\"); return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n        { if (a == 0) {return 0;} uint256 c = a * b; require(c / a == b, \"BoringMath: Overflow\"); return c; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, \"BoringMath: Div by 0\"); return a / b; }\r\n}\n\n// \n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// Edited by BoringCrypto\n// - removed GSN context\n// - removed comments (we all know this contract)\n// - updated solidity version\n// - made _owner public and renamed to owner\n// - simplified code\n// - onlyOwner modifier removed. Just copy the one line. Cheaper in gas, better readability and better error message.\n// TODO: Consider using the version that requires acceptance from new owner\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function renounceOwnership() public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\n\n// \ninterface IOracle {\r\n    // Each oracle should have a set function. The first parameter will be 'address pair' and any parameters can come after.\r\n    // Setting should only be allowed ONCE for each pair.\r\n\r\n    // Get the latest exchange rate, if no valid (recent) rate is available, return false\r\n    function get(address pair) external returns (bool, uint256);\r\n\r\n    // Check the last exchange rate without any state changes\r\n    function peek(address pair) external view returns (uint256);\r\n}\n\n// \ninterface IUniswapAnchoredView {\r\n    function price(string memory symbol) external view returns (uint256);\r\n}\n\ncontract CompoundOracle is IOracle, Ownable {\r\n    using BoringMath for uint256;\r\n\r\n    struct PairInfo {\r\n        string collateralSymbol;\r\n        string supplySymbol;\r\n        uint256 rate;\r\n    }\r\n\r\n    mapping(address => PairInfo) pairs;\r\n\r\n    function init(string calldata collateralSymbol, string calldata supplySymbol, address pair) public {\r\n        require(msg.sender == owner, \"CompoundOracle: not owner\");\r\n\r\n        // The rate can only be set once. It cannot be changed.\r\n        if (bytes(pairs[pair].collateralSymbol).length == 0) {\r\n            pairs[pair].collateralSymbol = collateralSymbol;\r\n            pairs[pair].supplySymbol = supplySymbol;\r\n        }\r\n    }\r\n\r\n    function getInitData(string calldata collateralSymbol, string calldata supplySymbol) public pure returns (bytes memory) {\r\n        return abi.encode(collateralSymbol, supplySymbol);\r\n    }\r\n\r\n    function _get(string memory collateralSymbol, string memory supplySymbol) private view returns (uint256) {\r\n        return uint256(1e18)\r\n            .mul(IUniswapAnchoredView(0xc629C26dcED4277419CDe234012F8160A0278a79).price(collateralSymbol))\r\n            .div(IUniswapAnchoredView(0xc629C26dcED4277419CDe234012F8160A0278a79).price(supplySymbol));\r\n    }\r\n\r\n    // Get the latest exchange rate\r\n    function get(address pair) public override returns (bool, uint256) {\r\n        pairs[pair].rate = _get(pairs[pair].collateralSymbol, pairs[pair].supplySymbol);\r\n        return (true, pairs[pair].rate);\r\n    }\r\n\r\n    // Check the last exchange rate without any state changes\r\n    function peek(address pair) public view override returns (uint256) {\r\n        return _get(pairs[pair].collateralSymbol, pairs[pair].supplySymbol);\r\n    }\r\n\r\n    function test(string calldata collateralSymbol, string calldata supplySymbol) public view returns(uint256) {\r\n        return _get(collateralSymbol, supplySymbol);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collateralSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplySymbol\",\"type\":\"string\"}],\"name\":\"getInitData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collateralSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplySymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collateralSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"supplySymbol\",\"type\":\"string\"}],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}