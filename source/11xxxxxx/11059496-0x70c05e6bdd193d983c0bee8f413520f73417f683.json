{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\ncontract Fisso {\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n   \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        uint256 totalSupply,\r\n        address indexed referredBy\r\n    );\r\n   \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n   \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n   \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n   \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n   \r\n   \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Fisso\";\r\n    string public symbol = \"FSO\";\r\n    uint256 constant public totalSupply_ = 50000000;\r\n    uint8 constant public decimals = 0;\r\n    uint256 constant internal tokenPriceInitial_ = 27027027;\r\n    uint256 constant internal tokenPriceIncremental_ = 216216;\r\n    uint256 public percent = 300;\r\n    uint256 public currentPrice_ = tokenPriceInitial_ + tokenPriceIncremental_;\r\n    uint256 public communityFunds = 0;\r\n    address dev1; //management fees\r\n    address dev2; //development and progress account\r\n    address dev3; //marketing expenditure\r\n    address dev4; //running cost and other expenses\r\n   \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal rewardBalanceLedger_;\r\n    address[] public holders_=new address[](0);\r\n    address sonk;\r\n    uint256 internal tokenSupply_ = 0;\r\n    mapping(address => bool) public administrators;\r\n    mapping(address => address) public genTree;\r\n   \r\n    constructor() public\r\n    {\r\n        sonk = msg.sender;\r\n        administrators[sonk] = true;\r\n    }\r\n   \r\n    function upgradeContract(address[] _users, uint256[] _balances, uint256[] _rewardBalances, address[] _refers, uint modeType)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        if(modeType == 1)\r\n        {\r\n            for(uint i = 0; i<_users.length;i++)\r\n            {\r\n                 genTree[_users[i]] = _refers[i];\r\n                if(_balances[i] > 0)\r\n                {\r\n                    tokenBalanceLedger_[_users[i]] += _balances[i];\r\n                    rewardBalanceLedger_[_users[i]] += _rewardBalances[i];\r\n                    tokenSupply_ += _balances[i];\r\n                    holders_.push(_users[i]);\r\n                    emit Transfer(address(this),_users[i],_balances[i]);\r\n                }\r\n            }\r\n        }\r\n        if(modeType == 2)\r\n        {\r\n            for(i = 0; i<_users.length;i++)\r\n            {\r\n                rewardBalanceLedger_[_users[i]] += _balances[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function upgradeDetails(uint256 _currentPrice, uint256 _commFunds)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        currentPrice_ = _currentPrice;\r\n        communityFunds = _commFunds;\r\n    }\r\n    \r\n    function fundsInjection() public payable returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n   \r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        genTree[msg.sender] = _referredBy;\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n   \r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n   \r\n    function withdrawRewards()\r\n        public\r\n    {\r\n        address customerAddress_ = msg.sender;\r\n        if(rewardBalanceLedger_[customerAddress_]>1000000000)\r\n        {\r\n            customerAddress_.transfer(rewardBalanceLedger_[customerAddress_]);\r\n            rewardBalanceLedger_[customerAddress_] = 0;\r\n        }\r\n    }\r\n   \r\n    function reInvest()\r\n        public\r\n        returns(uint256)\r\n    {\r\n        address customerAddress_ = msg.sender;\r\n        require(rewardBalanceLedger_[customerAddress_] >= (currentPrice_*2), 'Your rewards are too low yet');\r\n        uint256 tokensBought_ = purchaseTokens(rewardBalanceLedger_[customerAddress_], genTree[msg.sender]);\r\n        rewardBalanceLedger_[customerAddress_] = 0;\r\n        return tokensBought_;\r\n    }\r\n   \r\n    function distributeRewards(uint256 amountToDistribute)\r\n    public\r\n    onlyAdministrator()\r\n    {\r\n        if(communityFunds >= amountToDistribute)\r\n        {\r\n            for(uint i = 0; i<holders_.length;i++)\r\n            {\r\n                uint256 _balance = tokenBalanceLedger_[holders_[i]];\r\n                if(_balance>0)\r\n                {\r\n                    rewardBalanceLedger_[holders_[i]] += ((_balance*10000000/tokenSupply_)*(amountToDistribute))/10000000;\r\n                }\r\n            }\r\n            communityFunds -= amountToDistribute;\r\n        }\r\n    }\r\n   \r\n    function exit()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        if(rewardBalanceLedger_[_customerAddress]>0)\r\n        {\r\n            _customerAddress.transfer(rewardBalanceLedger_[_customerAddress]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens,true);\r\n        uint256 _dividends = _ethereum * 200/1000;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        uint256 rewardsToDistribute = _dividends*1000/2000;\r\n        rewardBalanceLedger_[dev1] = rewardBalanceLedger_[dev1]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev2] = rewardBalanceLedger_[dev2]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev3] = rewardBalanceLedger_[dev3]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev4] = rewardBalanceLedger_[dev4]+(rewardsToDistribute*250/1000);\r\n        communityFunds += rewardsToDistribute;\r\n        rewardBalanceLedger_[feeHolder_] += _dividends-(2*rewardsToDistribute);\r\n        // fire event\r\n        emit Transfer(_customerAddress,address(this), _amountOfTokens);\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        _customerAddress.transfer(_taxedEthereum);\r\n    }\r\n    address feeHolder_;\r\n    function registerDev234(address _devAddress1, address _devAddress2, address _devAddress3,address _devAddress4,address _feeHolder)\r\n    onlyAdministrator()\r\n    public\r\n    {\r\n        dev1 = _devAddress1;\r\n        dev2 = _devAddress2;\r\n        dev3 = _devAddress3;\r\n        dev4 = _devAddress4;\r\n        feeHolder_ = _feeHolder;\r\n        administrators[feeHolder_] = true;\r\n    }\r\n   \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n       \r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = _amountOfTokens * 10/100;\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        tokenBalanceLedger_[feeHolder_] += _tokenFee;\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n       \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n   \r\n    function destruct() onlyAdministrator() public{\r\n        selfdestruct(feeHolder_);\r\n    }\r\n   \r\n    function setPercent(uint256 newPercent) onlyAdministrator() public {\r\n        percent = newPercent * 10;\r\n    }\r\n   \r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n   \r\n    function totalSupply()\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    function tokenSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n   \r\n    function getCommunityFunds()\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return communityFunds;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    //check the ethereum reward balance\r\n     function rewardOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return rewardBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(2,false);\r\n            uint256 _dividends = _ethereum * 200/1000;\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return currentPrice_;\r\n    }\r\n   \r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell,false);\r\n        uint256 _dividends = _ethereum * 200/1000;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n   \r\n    event testLog(\r\n        uint256 currBal\r\n    );\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = _ethereumToSpend * percent/1000;\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum, currentPrice_, false);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = _incomingEthereum * percent/1000;\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum , currentPrice_, true);\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        if(tokenBalanceLedger_[_customerAddress] == _amountOfTokens)\r\n        {\r\n            holders_.push(_customerAddress);\r\n        }\r\n        uint256 rewardsToDistribute = _dividends*325/1000;\r\n        communityFunds += rewardsToDistribute;\r\n        rewardBalanceLedger_[_referredBy] += (rewardsToDistribute * 150) / 100;\r\n        rewardBalanceLedger_[feeHolder_] += _dividends-(3*rewardsToDistribute);\r\n        rewardsToDistribute = (rewardsToDistribute * 50) / 100;\r\n        rewardBalanceLedger_[dev1] = rewardBalanceLedger_[dev1]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev2] = rewardBalanceLedger_[dev2]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev3] = rewardBalanceLedger_[dev3]+(rewardsToDistribute*250/1000);\r\n        rewardBalanceLedger_[dev4] = rewardBalanceLedger_[dev4]+(rewardsToDistribute*250/1000);\r\n        require(SafeMath.add(_amountOfTokens,tokenSupply_) <= totalSupply_);\r\n        // fire event\r\n        emit Transfer(address(this),_customerAddress, _amountOfTokens);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function ethereumToTokens_(uint256 _ethereum, uint256 _currentPrice, bool buy)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*(3**(_tokenSupply/5000000)));\r\n        uint256 _totalTokens = 0;\r\n        uint256 _tokensReceived = (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            _tempad**2\r\n                            + (8*_tokenPriceIncremental*_ethereum)\r\n                        )\r\n                    ), _tempad\r\n                )\r\n            )/(2*_tokenPriceIncremental)\r\n        );\r\n        uint256 tempbase = ((_tokenSupply/5000000)+1)*5000000;\r\n        while((_tokensReceived + _tokenSupply) > tempbase){\r\n            _tokensReceived = tempbase - _tokenSupply;\r\n            _ethereum = SafeMath.sub(\r\n                _ethereum,\r\n                ((_tokensReceived)/2)*\r\n                ((2*_currentPrice)+((_tokensReceived-1)\r\n                *_tokenPriceIncremental))\r\n            );\r\n            _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**((_tokensReceived + _tokenSupply)/5000000)));\r\n            _tempad = SafeMath.sub((2*_currentPrice), _tokenPriceIncremental);\r\n            uint256 _tempTokensReceived = (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                _tempad**2\r\n                                + (8*_tokenPriceIncremental*_ethereum)\r\n                            )\r\n                        ), _tempad\r\n                    )\r\n                )/(2*_tokenPriceIncremental)\r\n            );\r\n            _tokenSupply = _tokenSupply + _tokensReceived;\r\n            _totalTokens = _totalTokens + _tokensReceived;\r\n            _tokensReceived = _tempTokensReceived;\r\n            tempbase = ((_tokenSupply/5000000)+1)*5000000;\r\n        }\r\n        _totalTokens = _totalTokens + _tokensReceived;\r\n        _currentPrice = _currentPrice+((_tokensReceived-1)*_tokenPriceIncremental);\r\n        if(buy == true)\r\n        {\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _totalTokens;\r\n    }\r\n   \r\n     function tokensToEthereum_(uint256 _tokens, bool sell)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenSupply = tokenSupply_;\r\n        uint256 _etherReceived = 0;\r\n        uint256 tempbase = ((_tokenSupply/5000000))*5000000;\r\n        uint256 _currentPrice = currentPrice_;\r\n        uint256 _tokenPriceIncremental = (tokenPriceIncremental_*((3)**(_tokenSupply/5000000)));\r\n        while((_tokenSupply - _tokens) < tempbase)\r\n        {\r\n            uint256 tokensToSell = _tokenSupply - tempbase;\r\n            if(tokensToSell == 0)\r\n            {\r\n                _tokenSupply = _tokenSupply - 1;\r\n                tempbase = ((_tokenSupply/5000000))*5000000;\r\n                continue;\r\n            }\r\n            uint256 b = ((tokensToSell-1)*_tokenPriceIncremental);\r\n            uint256 a = _currentPrice - b;\r\n            _tokens = _tokens - tokensToSell;\r\n            _etherReceived = _etherReceived + ((tokensToSell/2)*((2*a)+b));\r\n            _currentPrice = a;\r\n            _tokenSupply = _tokenSupply - tokensToSell;\r\n            _tokenPriceIncremental = (tokenPriceIncremental_*((3)**((_tokenSupply-1)/5000000)));\r\n            tempbase = (((_tokenSupply-1)/5000000))*5000000;\r\n        }\r\n        if(_tokens > 0)\r\n        {\r\n             a = _currentPrice - ((_tokens-1)*_tokenPriceIncremental);\r\n             _etherReceived = _etherReceived + ((_tokens/2)*((2*a)+((_tokens-1)*_tokenPriceIncremental)));\r\n             _tokenSupply = _tokenSupply - _tokens;\r\n             _currentPrice = a;\r\n        }\r\n        if(sell == true)\r\n        {\r\n            currentPrice_ = _currentPrice;\r\n        }\r\n        return _etherReceived;\r\n    }\r\n   \r\n   \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devAddress1\",\"type\":\"address\"},{\"name\":\"_devAddress2\",\"type\":\"address\"},{\"name\":\"_devAddress3\",\"type\":\"address\"},{\"name\":\"_devAddress4\",\"type\":\"address\"},{\"name\":\"_feeHolder\",\"type\":\"address\"}],\"name\":\"registerDev234\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_commFunds\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommunityFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"genTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundsInjection\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"_rewardBalances\",\"type\":\"uint256[]\"},{\"name\":\"_refers\",\"type\":\"address[]\"},{\"name\":\"modeType\",\"type\":\"uint256\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currBal\",\"type\":\"uint256\"}],\"name\":\"testLog\",\"type\":\"event\"}]","ContractName":"Fisso","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://69911f82b9b4d5ed845789992c61ec53ada5997c769558bde01ed646bcda9562"}]}