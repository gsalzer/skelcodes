{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    // function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     // (a + b) / 2 can overflow, so we distribute\r\n    //     return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    // }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    // function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     return mod(a, b, \"SafeMath: modulo by zero\");\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    // function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    //     require(b != 0, errorMessage);\r\n    //     return a % b;\r\n    // }\r\n    \r\n    function sqrt(uint256 y) internal pure returns (uint256) {\r\n        if (y > 3) {\r\n            uint256 z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n            return z;\r\n        } else if (y != 0) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(0));\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                to.transfer(amount);\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                require(msg.value >= amount, \"UniERC20: not enough value\");\r\n                if (msg.value > amount) {\r\n                    // Return remainder if exist\r\n                    msg.sender.transfer(msg.value.sub(amount));\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(msg.sender, address(this), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // function uniSymbol(IERC20 token) internal view returns(string memory) {\r\n    //     if (isETH(token)) {\r\n    //         return \"ETH\";\r\n    //     }\r\n\r\n    //     (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\r\n    //         abi.encodeWithSignature(\"symbol()\")\r\n    //     );\r\n    //     if (!success) {\r\n    //         (success, data) = address(token).staticcall{ gas: 20000 }(\r\n    //             abi.encodeWithSignature(\"SYMBOL()\")\r\n    //         );\r\n    //     }\r\n\r\n    //     if (success && data.length >= 96) {\r\n    //         (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n    //         if (offset == 0x20 && len > 0 && len <= 256) {\r\n    //             return string(abi.decode(data, (bytes)));\r\n    //         }\r\n    //     }\r\n\r\n    //     if (success && data.length == 32) {\r\n    //         uint len = 0;\r\n    //         while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\r\n    //             len++;\r\n    //         }\r\n\r\n    //         if (len > 0) {\r\n    //             bytes memory result = new bytes(len);\r\n    //             for (uint i = 0; i < len; i++) {\r\n    //                 result[i] = data[i];\r\n    //             }\r\n    //             return string(result);\r\n    //         }\r\n    //     }\r\n\r\n    //     return _toHex(address(token));\r\n    // }\r\n\r\n    function _toHex(address account) private pure returns(string memory) {\r\n        return _toHex(abi.encodePacked(account));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        uint j = 2;\r\n        for (uint i = 0; i < data.length; i++) {\r\n            uint a = uint8(data[i]) >> 4;\r\n            uint b = uint8(data[i]) & 0x0f;\r\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\r\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\r\n        }\r\n\r\n        return string(str);\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function fee() external view returns(uint256);\r\n    function ary() external view returns(uint256);\r\n    function year() external view returns(uint256);\r\n    function feeDev() external view returns(uint256);\r\n    function feeFinance() external view returns(uint256);\r\n    function getDeveloper() external view returns(address payable);\r\n    function getFinance() external view returns(address payable);\r\n    function getInvestor() external view returns(address payable);\r\n    function devRatio() external view returns(uint256);\r\n    function investorRatio() external view returns(uint256);\r\n    function weightDenominator() external view returns(uint256);\r\n    function varSwapRatio() external view returns(uint256);\r\n    function dailyStakingReward() external view returns(uint256);\r\n    function varStakingRatio() external view returns(uint256);\r\n    function feeWithdraw() external view returns(uint256);\r\n    function nGenerate() external view returns(uint256);\r\n    function toggleOn() external view returns(bool);\r\n    function standardLiquiditySize() external view returns(uint256);\r\n    function rewardThreshold() external view returns(uint256);\r\n}\r\n\r\ninterface IFactory {\r\n    function uggCollect(address to, uint256 value) external;\r\n}\r\n\r\n\r\nlibrary VirtualBalance {\r\n    using SafeMath for uint256;\r\n\r\n    struct Data {\r\n        uint216 balance;\r\n        uint40 time;\r\n    }\r\n\r\n    uint256 public constant DECAY_PERIOD = 5 minutes;\r\n\r\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\r\n        self.balance = uint216(balance);\r\n        self.time = uint40(block.timestamp);\r\n    }\r\n\r\n    function update(VirtualBalance.Data storage self, uint256 realBalance) internal {\r\n        set(self, current(self, realBalance));\r\n    }\r\n\r\n    function scale(VirtualBalance.Data storage self, uint256 realBalance, uint256 num, uint256 denom) internal {\r\n        set(self, current(self, realBalance).mul(num).add(denom.sub(1)).div(denom));\r\n    }\r\n\r\n    function current(VirtualBalance.Data memory self, uint256 realBalance) internal view returns(uint256) {\r\n        uint256 timePassed = Math.min(DECAY_PERIOD, block.timestamp.sub(self.time));\r\n        uint256 timeRemain = DECAY_PERIOD.sub(timePassed);\r\n        return uint256(self.balance).mul(timeRemain).add(\r\n            realBalance.mul(timePassed)\r\n        ).div(DECAY_PERIOD);\r\n    }\r\n}\r\n\r\n// used for x ARY x（N / 525600）\r\nlibrary DepositValue {\r\n    using SafeMath for uint256;\r\n\r\n    struct Data {\r\n        uint256 stakingSpeed;\r\n        uint40 time;\r\n    }\r\n\r\n    function getSpeed(Data memory self) internal pure returns(uint256) {\r\n        return self.stakingSpeed;\r\n    }\r\n\r\n    function getValue(Data memory self) internal view returns(uint256) {\r\n        uint40 _now = uint40(block.timestamp);\r\n        if(self.stakingSpeed == 0) {\r\n            return 0;\r\n        }\r\n        uint256 value = self.stakingSpeed.mul(uint256(_now - self.time));\r\n        return value;\r\n    }\r\n\r\n    function addValue(Data storage self, uint256 value, uint256 duration) internal {\r\n        self.stakingSpeed = self.stakingSpeed.add(value.div(duration));\r\n        self.time = uint40(block.timestamp);\r\n    }\r\n\r\n    function removeValue(Data storage self, uint256 value, uint256 duration) internal {\r\n        if(self.stakingSpeed > value.div(duration)) {\r\n            self.stakingSpeed = self.stakingSpeed.sub(value.div(duration));\r\n        } else {\r\n            self.stakingSpeed = 0;\r\n        }\r\n        self.time = uint40(block.timestamp);\r\n    }\r\n}\r\n\r\n\r\ncontract UggSwap is ERC20, ReentrancyGuard {\r\n    //using Sqrt for uint256;\r\n    using SafeMath for uint256;\r\n    using UniERC20 for IERC20;\r\n    using VirtualBalance for VirtualBalance.Data;\r\n    using DepositValue for DepositValue.Data;\r\n\r\n    struct Balances {\r\n        uint256 src;\r\n        uint256 dst;\r\n    }\r\n\r\n    struct SwapVolumes {\r\n        uint128 confirmed;\r\n        uint128 result;\r\n    }\r\n\r\n    event Deposited(\r\n        address indexed account,\r\n        uint256 amount\r\n    );\r\n\r\n    event Withdrawn(\r\n        address indexed account,\r\n        uint256 amount\r\n    );\r\n\r\n    event Swapped(\r\n        address indexed account,\r\n        address indexed src,\r\n        address indexed dst,\r\n        uint256 amount,\r\n        uint256 result,\r\n        uint256 srcBalance,\r\n        uint256 dstBalance,\r\n        uint256 totalSupply\r\n    );\r\n\r\n    //uint256 public constant REFERRAL_SHARE = 20; // 1/share = 5% of LPs revenue\r\n    uint256 public constant BASE_SUPPLY = 1000;  // Total supply on first deposit\r\n    uint256 public constant FEE_DENOMINATOR = 1e18;\r\n    uint256 public blockWeight = 1000;\r\n\r\n    IOracle  public oracle;\r\n    IFactory public factory;\r\n    IERC20[] public tokens;\r\n    mapping(IERC20 => bool) public isToken;\r\n    mapping(IERC20 => SwapVolumes) public volumes;\r\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\r\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\r\n\r\n    mapping(address => DepositValue.Data) public depositValues;\r\n\r\n    mapping(address => uint256) public uggBalances; // inner ugg tokens\r\n    uint256 public uggTotalSupply;\r\n    uint256 public lastGenerate;\r\n    uint256 public blockRewardBalance = 0;\r\n\r\n    uint256 public totalStakingSpeed = 0;\r\n    uint256 public totalSwapSpeed = 0;\r\n    uint256 public swapSpeedResetTime = 0;\r\n    uint256 public totalSwapAmount = 0;\r\n\r\n    constructor(IERC20[] memory assets, string memory name, string memory symbol, address _oracle) public ERC20(name, symbol) {\r\n        require(bytes(name).length > 0, \"Uggswap: name is empty\");\r\n        require(bytes(symbol).length > 0, \"Uggswap: symbol is empty\");\r\n        require(assets.length == 2, \"Uggswap: only 2 tokens allowed\");\r\n\r\n        oracle  = IOracle(_oracle);\r\n        factory = IFactory(msg.sender);\r\n        tokens = assets;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            require(!isToken[assets[i]], \"Uggswap: duplicate tokens\");\r\n            isToken[assets[i]] = true;\r\n        }\r\n        lastGenerate = block.timestamp;\r\n    }\r\n\r\n    function generate() internal view returns(uint256) {\r\n        if(lastGenerate == 0) {\r\n            return 0;\r\n        }\r\n        if(oracle.toggleOn() == false) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lpWeight = uint256(1000);\r\n        \r\n        //uint256 poolSize = uggTotalSupply;\r\n        uint256 poolSize = totalSupply();\r\n\r\n        if(uint256(poolSize) <= oracle.standardLiquiditySize()) {\r\n            lpWeight = poolSize.mul(uint256(1000)).div(oracle.standardLiquiditySize());\r\n        }\r\n        uint256 adjustedN = lpWeight.mul(oracle.nGenerate()).div(uint256(1000));\r\n        uint256 adjustedRewardThreshold = lpWeight.mul(oracle.rewardThreshold()).div(uint256(1000));\r\n        uint256 blockReward = 0;\r\n        //uint256 subTotal = block.timestamp.sub(lastGenerate).mul(oracle.nGenerate());\r\n        uint256 subTotal = totalStakingSpeed.add(totalSwapSpeed);\r\n\r\n        if(lpWeight == uint256(1000)) {\r\n            blockReward = adjustedN;\r\n        } else if ((subTotal >= adjustedN) || (subTotal >= adjustedRewardThreshold)) {\r\n            blockReward = 0;\r\n        } else if ((subTotal < adjustedRewardThreshold) && (subTotal >= adjustedRewardThreshold.div(uint256(2)))) {\r\n            blockReward = adjustedRewardThreshold.div(uint256(8));   // 0.125 * adjustedRewardThreshold\r\n        } else if ((subTotal < adjustedRewardThreshold.div(uint256(2))) && (subTotal >= adjustedRewardThreshold.div(uint256(4)))) {\r\n            blockReward = adjustedRewardThreshold.div(uint256(4));   // 0.25 * adjustedRewardThreshold\r\n        } else {\r\n            blockReward = adjustedRewardThreshold.div(uint256(2));\r\n        }\r\n\r\n        blockReward = blockReward.div(uint256(10000)).mul(blockWeight);\r\n\r\n        return blockReward;\r\n    }\r\n\r\n    function setOracle(address _oracle) external {\r\n        require(address(factory) == msg.sender, \"must be called by factory\");\r\n        oracle = IOracle(_oracle);\r\n    }\r\n\r\n    function setBlockWeight(uint256 _weight) external {\r\n        require(address(factory) == msg.sender, \"must be called by factory\");\r\n        blockWeight = _weight;\r\n    }\r\n\r\n    function fee() public view returns(uint256) {\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n        return oracle.fee();\r\n    }\r\n\r\n    function getTokens() external view returns(IERC20[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function decayPeriod() external pure returns(uint256) {\r\n        return VirtualBalance.DECAY_PERIOD;\r\n    }\r\n\r\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\r\n        uint256 balance = token.uniBalanceOf(address(this));\r\n        return Math.max(virtualBalancesForAddition[token].current(balance), balance);\r\n    }\r\n\r\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\r\n        uint256 balance = token.uniBalanceOf(address(this));\r\n        return Math.min(virtualBalancesForRemoval[token].current(balance), balance);\r\n    }\r\n\r\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\r\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst));\r\n    }\r\n\r\n    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable nonReentrant returns(uint256 fairSupply) {\r\n        IERC20[] memory _tokens = tokens;\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n        require(amounts.length == _tokens.length, \"Uggswap: wrong amounts length\");\r\n        require(msg.value == (_tokens[0].isETH() ? amounts[0] : (_tokens[1].isETH() ? amounts[1] : 0)), \"Uggswap: wrong value usage\");\r\n\r\n        uint256[] memory realBalances = new uint256[](amounts.length);\r\n        for (uint256 i = 0; i < realBalances.length; i++) {\r\n            realBalances[i] = _tokens[i].uniBalanceOf(address(this)).sub(_tokens[i].isETH() ? msg.value : 0);\r\n        }\r\n\r\n        uint256 totalSupply = totalSupply();\r\n        if (totalSupply == 0) {\r\n            fairSupply = BASE_SUPPLY.mul(99);\r\n            _mint(address(this), BASE_SUPPLY); // Donate up to 1%\r\n\r\n            // Use the greatest token amount but not less than 99k for the initial supply\r\n            for (uint256 i = 0; i < amounts.length; i++) {\r\n                fairSupply = Math.max(fairSupply, amounts[i]);\r\n            }\r\n        }\r\n        else {\r\n            // Pre-compute fair supply\r\n            fairSupply = type(uint256).max;\r\n            for (uint256 i = 0; i < amounts.length; i++) {\r\n                fairSupply = Math.min(fairSupply, totalSupply.mul(amounts[i]).div(realBalances[i]));\r\n            }\r\n        }\r\n\r\n        uint256 fairSupplyCached = fairSupply;\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            require(amounts[i] > 0, \"Uggswap: amount is zero\");\r\n            uint256 amount = (totalSupply == 0) ? amounts[i] :\r\n                realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\r\n            require(amount >= minAmounts[i], \"Uggswap: minAmount not reached\");\r\n\r\n            _tokens[i].uniTransferFromSenderToThis(amount);\r\n            if (totalSupply > 0) {\r\n                uint256 confirmed = _tokens[i].uniBalanceOf(address(this)).sub(realBalances[i]);\r\n                fairSupply = Math.min(fairSupply, totalSupply.mul(confirmed).div(realBalances[i]));\r\n            }\r\n        }\r\n\r\n        if (totalSupply > 0) {\r\n            for (uint256 i = 0; i < amounts.length; i++) {\r\n                virtualBalancesForRemoval[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\r\n                virtualBalancesForAddition[_tokens[i]].scale(realBalances[i], totalSupply.add(fairSupply), totalSupply);\r\n            }\r\n        }\r\n\r\n        require(fairSupply > 0, \"Uggswap: result is not enough\");\r\n        _mint(msg.sender, fairSupply);\r\n\r\n        // ugg token reward\r\n        uint256 _speedBefore = depositValues[msg.sender].getSpeed();\r\n        uint256 _uggReward = depositValues[msg.sender].getValue();\r\n        if(_uggReward > 0) {\r\n            //factory.rewardDeposit(msg.sender, _uggReward);\r\n            ugg_mint(msg.sender, _uggReward);\r\n        }\r\n        uint256 _newReward = fairSupply.div(uint256(100));\r\n        _newReward = _newReward.mul(uint256(oracle.ary()));\r\n        depositValues[msg.sender].addValue(_newReward, oracle.year()); \r\n\r\n        uint256 _speedAfter = depositValues[msg.sender].getSpeed();\r\n        totalStakingSpeed = totalStakingSpeed.add(_speedAfter).sub(_speedBefore);\r\n\r\n        //reset swap\r\n        uint256 swapTime = 0;\r\n        if(swapSpeedResetTime == 0) {\r\n            swapSpeedResetTime = block.timestamp;\r\n            totalSwapAmount = 0;\r\n            swapTime = 20; \r\n        } else {\r\n            swapTime = block.timestamp.sub(swapSpeedResetTime);\r\n            if(swapTime > 3600) { // reset per hour\r\n                swapSpeedResetTime = block.timestamp;\r\n                totalSwapAmount = 0;\r\n                swapTime = 20;\r\n            } else {\r\n                if(swapTime < 20) {   // swapTime can't be too small\r\n                    swapTime = 20;\r\n                }\r\n            }\r\n        }\r\n        totalSwapSpeed = totalSwapAmount.div(swapTime);\r\n\r\n        // block generator\r\n        uint256 _gen = generate();\r\n        _gen = _gen.mul(block.timestamp.sub(lastGenerate));\r\n        if(_gen > 0) {\r\n            //ugg_mint(msg.sender, _gen);\r\n            blockRewardBalance = blockRewardBalance.add(_gen);\r\n        }\r\n        lastGenerate = block.timestamp;\r\n        totalSupply = totalSupply.add(fairSupply);\r\n        \r\n        uint256 myShare = balanceOf(msg.sender);\r\n        uint256 depositShare = blockRewardBalance.mul(1e12).div(totalSupply);\r\n        uint256 depositReward = depositShare.mul(myShare).div(1e12);\r\n        blockRewardBalance = blockRewardBalance.sub(depositReward);\r\n        ugg_mint(msg.sender, depositReward);\r\n\r\n        emit Deposited(msg.sender, fairSupply);\r\n    }\r\n\r\n    function withdraw(uint256 amount, uint256[] memory minReturns) external nonReentrant {\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n\r\n        uint256 totalSupply = totalSupply();\r\n        _burn(msg.sender, amount);\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            IERC20 token = tokens[i];\r\n\r\n            uint256 preBalance = token.uniBalanceOf(address(this));\r\n            uint256 value = preBalance.mul(amount).div(totalSupply);\r\n            uint256 valueDev = value.mul(oracle.feeWithdraw()).div(uint256(1000));\r\n            uint256 valueUser = value.sub(valueDev);\r\n            token.uniTransfer(msg.sender, valueUser);\r\n            token.uniTransfer(oracle.getDeveloper(), valueDev);\r\n            require(i >= minReturns.length || value >= minReturns[i], \"Uggswap: result is not enough\");\r\n\r\n            virtualBalancesForAddition[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\r\n            virtualBalancesForRemoval[token].scale(preBalance, totalSupply.sub(amount), totalSupply);\r\n        }\r\n\r\n        // ugg token reward\r\n        uint256 _speedBefore = depositValues[msg.sender].getSpeed();\r\n        uint256 _uggReward = depositValues[msg.sender].getValue();\r\n        if(_uggReward > 0) {\r\n            //factory.rewardDeposit(msg.sender, _uggReward);\r\n            ugg_mint(msg.sender, _uggReward);\r\n        }\r\n        uint256 _newReward = amount.div(uint256(100));\r\n        _newReward = _newReward.mul(uint256(oracle.ary()));\r\n        depositValues[msg.sender].removeValue(_newReward, oracle.year()); \r\n        \r\n        uint256 _speedAfter = depositValues[msg.sender].getSpeed();\r\n        totalStakingSpeed = totalStakingSpeed.add(_speedAfter).sub(_speedBefore);\r\n\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    //function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external payable nonReentrant returns(uint256 result) {\r\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn) external payable nonReentrant returns(uint256 result) {\r\n        require(msg.value == (src.isETH() ? amount : 0), \"Uggswap: wrong value usage\");\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n        \r\n        Balances memory balances = Balances({\r\n            src: src.uniBalanceOf(address(this)).sub(src.isETH() ? msg.value : 0),\r\n            dst: dst.uniBalanceOf(address(this))\r\n        });\r\n\r\n        // catch possible airdrops and external balance changes for deflationary tokens\r\n        uint256 srcAdditionBalance = Math.max(virtualBalancesForAddition[src].current(balances.src), balances.src);\r\n        uint256 dstRemovalBalance = Math.min(virtualBalancesForRemoval[dst].current(balances.dst), balances.dst);\r\n\r\n        src.uniTransferFromSenderToThis(amount);\r\n        uint256 confirmed = src.uniBalanceOf(address(this)).sub(balances.src);\r\n        result = _getReturn(src, dst, confirmed, srcAdditionBalance, dstRemovalBalance);\r\n        require(result > 0 && result >= minReturn, \"Uggswap: return is not enough\");\r\n        dst.uniTransfer(msg.sender, result);\r\n\r\n        // Update virtual balances to the same direction only at imbalanced state\r\n        if (srcAdditionBalance != balances.src) {\r\n            virtualBalancesForAddition[src].set(srcAdditionBalance.add(confirmed));\r\n        }\r\n        if (dstRemovalBalance != balances.dst) {\r\n            virtualBalancesForRemoval[dst].set(dstRemovalBalance.sub(result));\r\n        }\r\n\r\n        // Update virtual balances to the opposite direction\r\n        virtualBalancesForRemoval[src].update(balances.src);\r\n        virtualBalancesForAddition[dst].update(balances.dst);\r\n\r\n        // for developer and finance\r\n        uint256 invariantRatio = uint256(1e36);\r\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\r\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\r\n        if (invariantRatio > 1e36) {\r\n            // calculate share only if invariant increased\r\n            uint256 devShare = invariantRatio.sqrt().sub(1e18).mul(totalSupply()).div(1e18).div(oracle.feeDev());\r\n            if (devShare > 0) {\r\n                _mint(oracle.getDeveloper(), devShare);\r\n            }\r\n\r\n            // uint256 financeShare = invariantRatio.sqrt().sub(1e18).mul(totalSupply()).div(1e18).div(oracle.feeFinance());\r\n            // if(financeShare > 0) {\r\n            //     _mint(oracle.getFinance(), financeShare);\r\n            // }\r\n        }\r\n\r\n        // Swap Reward = AVG(daily_staking_reward/var_staking_ratio,  swap_value/var_swap_ratio)\r\n        //uint256 swapAmount = (src == tokens[0]) ? amount : result;\r\n        uint256 swapAmount = (amount < result) ? amount : result;\r\n        swapAmount = swapAmount.div(oracle.varSwapRatio());\r\n        uint256 valueStaking = oracle.dailyStakingReward().div(oracle.varStakingRatio());\r\n        swapAmount = swapAmount.add(valueStaking).div(uint256(2));   \r\n        //swapAmount = swapAmount.div(uint256(2));\r\n        ugg_mint(msg.sender, swapAmount);\r\n\r\n        totalSwapAmount = totalSwapAmount.add(swapAmount);\r\n\r\n        emit Swapped(msg.sender, address(src), address(dst), confirmed, result, balances.src, balances.dst, totalSupply());\r\n\r\n        // Overflow of uint128 is desired\r\n        volumes[src].confirmed += uint128(confirmed);\r\n        volumes[src].result += uint128(result);\r\n    }\r\n\r\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance) internal view returns(uint256) {\r\n        if (isToken[src] && isToken[dst] && src != dst && amount > 0) {\r\n            uint256 taxedAmount = amount.sub(amount.mul(fee()).div(FEE_DENOMINATOR));\r\n            return taxedAmount.mul(dstBalance).div(srcBalance.add(taxedAmount));\r\n        }\r\n    }\r\n\r\n    function ugg_mint(address addr, uint256 value) internal {\r\n        require(addr != address(0));\r\n        uggBalances[addr] = uggBalances[addr].add(value);\r\n        uggTotalSupply = uggTotalSupply.add(value);\r\n    }\r\n\r\n    function ugg_collect(uint256 value) external {\r\n        require(uggBalances[msg.sender] >= value);\r\n        uggBalances[msg.sender] = uggBalances[msg.sender].sub(value);\r\n        uggTotalSupply = uggTotalSupply.sub(value);\r\n        factory.uggCollect(msg.sender, value);\r\n    }\r\n}\r\n\r\ninterface IUggSwapERC20 {\r\n    // function swap_mint(address to, uint256 value) external;\r\n    function collect(address to, uint256 value) external;\r\n}\r\n\r\n//contract UggFactory is Ownable {\r\ncontract UggFactory {\r\n    using UniERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event Deployed(\r\n        address indexed uggswap,\r\n        address indexed token1,\r\n        address indexed token2\r\n    );\r\n\r\n    //uint256 public constant MAX_FEE = 0.003e18; // 0.3%\r\n\r\n    UggSwap[] public allPools;\r\n    mapping(UggSwap => bool) public isPool;\r\n    mapping(IERC20 => mapping(IERC20 => UggSwap)) public pools;\r\n\r\n    IUggSwapERC20 public uggToken;                    // ugg reward address\r\n    mapping(UggSwap => uint256) public poolWeight;\r\n\r\n    IOracle public oracle;\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"new owner must be not null\");\r\n        owner = _owner;\r\n    }\r\n\r\n    function getAllPools() external view returns(UggSwap[] memory) {\r\n        return allPools;\r\n    }\r\n\r\n    //function setUgg(address ugg) external {\r\n    function setUgg(address ugg) external onlyOwner {\r\n        require(ugg != address(0), \"address can not be null\");\r\n        uggToken = IUggSwapERC20(ugg);\r\n    }\r\n\r\n    //function setWeight(address pool, uint256 weight) external {\r\n    function setWeight(address pool, uint256 weight) external onlyOwner {\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n        require(pool != address(0), \"pool can not be null\");\r\n        require(weight < oracle.weightDenominator(), \"weight must be smaller than denominator\");\r\n        poolWeight[UggSwap(pool)] = weight;\r\n    }\r\n\r\n    //function setOracle(address _oracle) external {\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        require(_oracle != address(0), \"address can not be null\");\r\n        oracle = IOracle(_oracle);\r\n    }\r\n\r\n    //function setPoolOracle(address _pool, address _oracle) external {\r\n    function setPoolOracle(address _pool, address _oracle) external onlyOwner {\r\n        require(_pool != address(0), \"pool can not be null\");\r\n        require(isPool[UggSwap(_pool)], \"must be deployed pool\");\r\n        require(_oracle != address(0), \"oracle can not be null\");\r\n        UggSwap(_pool).setOracle(_oracle);\r\n    }\r\n\r\n    function setPoolBlockWeight(address _pool, uint256 w) external onlyOwner {\r\n        require(_pool != address(0), \"pool can not be null\");\r\n        require(isPool[UggSwap(_pool)], \"must be deployed pool\");\r\n        UggSwap(_pool).setBlockWeight(w);\r\n    }\r\n\r\n    //function deploy(IERC20 tokenA, IERC20 tokenB) public onlyOwner returns(UggSwap pool) {\r\n    function deploy(IERC20 tokenA, IERC20 tokenB) public returns(UggSwap pool) {\r\n        require(tokenA != tokenB, \"Factory: not support same tokens\");\r\n        require(pools[tokenA][tokenB] == UggSwap(0), \"Factory: pool already exists\");\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n\r\n        //(IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\r\n        (IERC20 token1, IERC20 token2) = (tokenA, tokenB);\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = token1;\r\n        tokens[1] = token2;\r\n\r\n        // string memory symbol1 = token1.uniSymbol();\r\n        // string memory symbol2 = token2.uniSymbol();\r\n\r\n        pool = new UggSwap(\r\n            tokens,\r\n            string(abi.encodePacked(\"UggSwap\")),\r\n            string(abi.encodePacked(\"UGG\")),\r\n            address(oracle)\r\n        );\r\n\r\n        pools[token1][token2] = pool;\r\n        pools[token2][token1] = pool;\r\n        allPools.push(pool);\r\n        isPool[pool] = true;\r\n\r\n        emit Deployed(\r\n            address(pool),\r\n            address(token1),\r\n            address(token2)\r\n        );\r\n    }\r\n\r\n    // function sortTokens(IERC20 tokenA, IERC20 tokenB) public pure returns(IERC20, IERC20) {\r\n    //     if (tokenA < tokenB) {\r\n    //         return (tokenA, tokenB);\r\n    //     }\r\n    //     return (tokenB, tokenA);\r\n    // }\r\n\r\n    function uggCollect(address to, uint256 value) external {\r\n        require(to != address(0), \"address can not be null\");\r\n        require(isPool[UggSwap(msg.sender)], \"pool must be exists\");\r\n        require(address(uggToken) != address(0), \"uggToken can not be null\");\r\n        require(address(oracle) != address(0), \"oracle can not be null\");\r\n        if(poolWeight[UggSwap(msg.sender)] > 0 && value > 0) {\r\n            uint256 valueNew = value.mul(poolWeight[UggSwap(msg.sender)]);\r\n            valueNew = valueNew.div(oracle.weightDenominator());\r\n            uggToken.collect(to, valueNew);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uggswap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"contract UggSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract UggSwap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"contract UggSwap[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract UggSwap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract UggSwap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract UggSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"}],\"name\":\"setPoolBlockWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setPoolOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ugg\",\"type\":\"address\"}],\"name\":\"setUgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uggCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uggToken\",\"outputs\":[{\"internalType\":\"contract IUggSwapERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UggFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f7d267382e5af185d1a2be4cdd4f4e1acd806f80a9c5864e47c5774ece9c9b91"}]}