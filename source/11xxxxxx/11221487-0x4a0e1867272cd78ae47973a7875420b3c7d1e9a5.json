{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract TokenTimelock {\r\n    struct Timelock {\r\n      uint256 amount; // amount of tokens to lock\r\n      uint256 releaseTime; // timestamp when token release is enabled\r\n    }\r\n\r\n    // tokenAddress => ( ownerAddress => { amount, releaseTime } )\r\n    mapping(address => mapping(address => Timelock)) public timelockMap;\r\n\r\n    event TokenTimelocked(ERC20 indexed token, address indexed tokenOwner, uint256 amount, uint256 releaseTime);\r\n    event TokenTimelockReleased(ERC20 indexed token, address indexed tokenOwner, uint256 amount, uint256 releaseTime, uint256 blockTime);\r\n\r\n    constructor () public {}\r\n\r\n    /**\r\n     * @return the amount of tokens locked by the tokenOwner.\r\n     */\r\n    function getTokenOwnerLockAmount(ERC20 token, address tokenOwner) public view returns (uint256) {\r\n        return timelockMap[address(token)][tokenOwner].amount;\r\n    }\r\n    /**\r\n     * @return the releaseTime set by the tokenOwner.\r\n     */\r\n    function getTokenOwnerLockReleaseTime(ERC20 token, address tokenOwner) public view returns (uint256) {\r\n        return timelockMap[address(token)][tokenOwner].releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Locks senders tokens for the specified time\r\n     * Must approve the contract for transfering tokens before calling this function\r\n     */\r\n    function lock(ERC20 token, uint256 amount, uint256 releaseTime) public returns (bool) {\r\n        require(releaseTime > block.timestamp, \"release time is before current time\");\r\n        require(amount > 0, \"token amount is invalid\");\r\n        \r\n        address _tokenOwner = msg.sender;\r\n        address _tokenAddr = address(token);\r\n        require(_tokenAddr != address(0), \"token address is invalid\");\r\n        \r\n        Timelock storage _lock = timelockMap[_tokenAddr][_tokenOwner];\r\n        require(_lock.amount == 0 && _lock.releaseTime == 0, \"a lock for the token & sender already exists\");\r\n        require(token.transferFrom(_tokenOwner, address(this), amount), \"transferFrom failed\");\r\n\r\n        timelockMap[_tokenAddr][_tokenOwner] = Timelock(amount, releaseTime);\r\n        \r\n        emit TokenTimelocked(token, _tokenOwner, amount, releaseTime);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to tokenOwner.\r\n     */\r\n    function release(ERC20 token) public returns (bool) {\r\n        address _tokenAddr = address(token);\r\n        address _tokenOwner = msg.sender;\r\n        require(_tokenAddr != address(0), \"token address is invalid\");\r\n\r\n        Timelock storage _lock = timelockMap[_tokenAddr][_tokenOwner];\r\n        require(_lock.amount > 0 && _lock.releaseTime > 0, \"a lock for the token & sender doesn't exist\");\r\n        require(block.timestamp >= _lock.releaseTime, \"current time is before release time\");\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(_lock.amount <= balance, \"not enough tokens to release\");\r\n        require(token.transfer(_tokenOwner, _lock.amount), \"transfer failed\");\r\n\r\n        timelockMap[_tokenAddr][_tokenOwner].amount = 0;\r\n        timelockMap[_tokenAddr][_tokenOwner].releaseTime = 0;\r\n\r\n        emit TokenTimelockReleased(token, _tokenOwner, _lock.amount, _lock.releaseTime, block.timestamp);\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelockMap\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getTokenOwnerLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getTokenOwnerLockReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"TokenTimelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"TokenTimelockReleased\",\"type\":\"event\"}]","ContractName":"TokenTimelock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://229ce290872497b2440a7a3c54d97aa2bf9e790ecf85f265075278d5d4fa58e9"}]}