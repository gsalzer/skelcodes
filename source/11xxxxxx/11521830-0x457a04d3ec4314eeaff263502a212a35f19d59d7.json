{"status":"1","message":"OK","result":[{"SourceCode":"library TxDataBuilder {\r\n    string constant public RTTD_FUNCHASH = '0829d713'; // WizRefund - refundTokensTransferredDirectly\r\n    string constant public EFWD_FUNCHASH = 'eee48b02'; // WizRefund - clearFinalWithdrawData\r\n    string constant public FR_FUNCHASH =   '492b2b37'; // WizRefund - forceRegister\r\n    string constant public RP_FUNCHASH =   '422a042e'; // WizRefund - revertPhase\r\n    string constant public WETH_FUNCHASH =   '4782f779'; // WizRefund - withdrawETH\r\n\r\n    function uint2bytes32(uint256 x)\r\n        public\r\n        pure returns (bytes memory b) {\r\n            b = new bytes(32);\r\n            assembly { mstore(add(b, 32), x) }\r\n    }\r\n    \r\n    function uint2bytes8(uint256 x)\r\n        public\r\n        pure returns (bytes memory b) {\r\n            b = new bytes(32);\r\n            assembly { mstore(add(b, 32), x) }\r\n    }\r\n    \r\n    function concatb(bytes memory self, bytes memory other)\r\n        public\r\n        pure returns (bytes memory) {\r\n             return bytes(abi.encodePacked(self, other));\r\n        }\r\n        \r\n    // Convert an hexadecimal character to their value\r\n    function fromHexChar(uint8 c) public pure returns (uint8) {\r\n        if (bytes1(c) >= bytes1('0') && bytes1(c) <= bytes1('9')) {\r\n            return c - uint8(bytes1('0'));\r\n        }\r\n        if (bytes1(c) >= bytes1('a') && bytes1(c) <= bytes1('f')) {\r\n            return 10 + c - uint8(bytes1('a'));\r\n        }\r\n        if (bytes1(c) >= bytes1('A') && bytes1(c) <= bytes1('F')) {\r\n            return 10 + c - uint8(bytes1('A'));\r\n        }\r\n        require(false, \"unknown variant\");\r\n    }\r\n    \r\n    // Convert an hexadecimal string to raw bytes\r\n    function fromHex(string memory s) public pure returns (bytes memory) {\r\n        bytes memory ss = bytes(s);\r\n        require(ss.length%2 == 0); // length must be even\r\n        bytes memory r = new bytes(ss.length/2);\r\n        for (uint i=0; i<ss.length/2; ++i) {\r\n            r[i] = bytes1(fromHexChar(uint8(ss[2*i])) * 16 +\r\n                        fromHexChar(uint8(ss[2*i+1])));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function buildData(string memory function_hash, uint256[] memory argv)\r\n        public\r\n        pure returns (bytes memory data){\r\n            bytes memory f = fromHex(function_hash);\r\n            data = concatb(data, f);\r\n            for(uint i=0;i<argv.length;i++){\r\n                bytes memory d = uint2bytes32(argv[i]);\r\n                data = concatb(data, d);\r\n            }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"EFWD_FUNCHASH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FR_FUNCHASH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RP_FUNCHASH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RTTD_FUNCHASH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_FUNCHASH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"function_hash\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"argv\",\"type\":\"uint256[]\"}],\"name\":\"buildData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"self\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"other\",\"type\":\"bytes\"}],\"name\":\"concatb\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"uint2bytes32\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"uint2bytes8\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TxDataBuilder","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e58acfcc211a3a66701bc4c77e9d18d4ff96261687ea37d8f66e5cf22fc3a49"}]}