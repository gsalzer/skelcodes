{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SPDX-License-Identifier: UNLICENSED\r\n * TrafficLight.Finance -> Token Sale Contract\r\n *       _____          __  __ _    _    _      _   _   \r\n *     |_   _| _ __ _ / _|/ _(_)__| |  (_)__ _| |_| |_ \r\n *       | || '_/ _` |  _|  _| / _| |__| / _` | ' \\  _|\r\n *       |_||_| \\__,_|_| |_| |_\\__|____|_\\__, |_||_\\__|\r\n *                                       |___/          \r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract TrafficLight is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // standard ERC20 variables. \r\n  string public constant name = \"TrafficLight.Finance\";\r\n  string public constant symbol = \"TFL\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 private constant _maximumSupply = 10 ** decimals;\r\n  uint256 public _totalSupply;\r\n  uint256 public light;\r\n  uint256 public reward;\r\n  bool public start;\r\n  uint256 public burnPercent;\r\n  uint256 public rewardPercent;\r\n  uint256 public rewardDistributionPercent;\r\n\r\n  // events\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event changeLight(uint value);\r\n\r\n\r\n  mapping(address => uint256) public _balanceOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  constructor(uint256 _initialSupply) public {\r\n\r\n    _owner = msg.sender;\r\n    _totalSupply = _maximumSupply * _initialSupply;\r\n    _balanceOf[msg.sender] = _maximumSupply * _initialSupply;\r\n    reward = 0;\r\n    start = false;\r\n    light = 1;\r\n    burnPercent = 3;\r\n    rewardPercent = 3;\r\n    rewardDistributionPercent = 10;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256) {\r\n    return _totalSupply; \r\n  }\r\n\r\n  function balanceOf (address who) public view returns (uint256) {\r\n    return _balanceOf[who];\r\n  }\r\n\r\n  function findReward (uint256 value) public view returns (uint256)  {\r\n    uint256 reward_val = value.mul(rewardPercent).div(100);  \r\n    return reward_val;\r\n  }\r\n  \r\n  function findBurn (uint256 value) public view returns (uint256)  {\r\n    uint256 burn_val = value.mul(burnPercent).div(100); \r\n    return burn_val;\r\n  }\r\n\r\n\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n    \r\n    if (light==1)\r\n    {\r\n        if (start==false)\r\n        {\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        } else {\r\n            \r\n            uint256 tokensToBurn = findBurn (_value);\r\n            uint256 valueToSend = _value.sub(tokensToBurn);\r\n            \r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[0x0000000000000000000000000000000000000000] = _balanceOf[0x0000000000000000000000000000000000000000].add(tokensToBurn);\r\n            _balanceOf[_to] = _balanceOf[_to].add(valueToSend);\r\n        \r\n            emit Transfer(_from, 0x0000000000000000000000000000000000000000, tokensToBurn);\r\n            emit Transfer(_from, _to, valueToSend);\r\n            \r\n        }\r\n    } else if (light==2) {\r\n            \r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        if (reward > 2)\r\n        {\r\n            uint256 reward_to_send = reward.div(rewardDistributionPercent);\r\n            _balanceOf[address(this)] = _balanceOf[address(this)].sub(reward_to_send);\r\n            _balanceOf[_to] = _balanceOf[_to].add(reward_to_send);\r\n            reward = reward.sub(reward_to_send);\r\n            emit Transfer(address(this), _to, reward_to_send);\r\n        }\r\n    } else {\r\n        uint256 tokensToReward = findReward(_value);\r\n        uint256 tokensToBurn = findBurn (_value);\r\n        uint256 tokensToTransfer = _value.sub(tokensToReward).sub(tokensToBurn);\r\n        \r\n        \r\n\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        _balanceOf[_to] = _balanceOf[_to].add(tokensToTransfer);\r\n        _balanceOf[address(this)] = _balanceOf[address(this)].add(tokensToReward);\r\n        _balanceOf[0x0000000000000000000000000000000000000000] = _balanceOf[0x0000000000000000000000000000000000000000].add(tokensToBurn);\r\n        reward = reward.add(tokensToReward);\r\n        \r\n        emit Transfer(_from, _to, tokensToTransfer);\r\n        emit Transfer(_from, 0x0000000000000000000000000000000000000000, tokensToBurn);\r\n        emit Transfer(_from, address(this), tokensToReward);\r\n    }\r\n  }\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(_balanceOf[msg.sender] >= _value);//*10 ** decimals\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function burn (uint256 _burnAmount) public onlyOwner returns (bool success) {\r\n    _transfer(_owner, address(0), _burnAmount);\r\n    _totalSupply = _totalSupply.sub(_burnAmount);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    require(_spender != address(0));\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_value <= _balanceOf[_from]);\r\n    require(_value <= allowance[_from][msg.sender]);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function switchlight() public {\r\n        require(msg.sender == _owner);\r\n        if (light==1)\r\n        {\r\n            light=2;\r\n            emit changeLight(2);\r\n        }\r\n        else if (light==2)\r\n        {\r\n            light = 3;\r\n            emit changeLight(3);\r\n        }\r\n        else if (light==3)\r\n        {\r\n            light = 1;\r\n            emit changeLight(1);\r\n        }\r\n        else\r\n        {\r\n            light = 1;\r\n            emit changeLight(1);\r\n        }\r\n    }\r\n  \r\n  \r\n   function switchstart() public {\r\n        require(msg.sender == _owner);\r\n        if (start==false) \r\n            start = true;\r\n        else\r\n            start = false;\r\n   }\r\n   \r\n   function setBurnPercent (uint256 value) public {\r\n        require(msg.sender == _owner);\r\n        burnPercent = value;\r\n   }\r\n   \r\n   function setRewardPercent (uint256 value) public {\r\n        require(msg.sender == _owner);\r\n        rewardPercent = value;\r\n   }\r\n  \r\n   function setRewardDistributionPercent (uint256 value) public {\r\n        require(msg.sender == _owner);\r\n        rewardDistributionPercent = value;\r\n   }\r\n  \r\n}\r\n\r\n\r\ncontract TrafficLightSale {\r\n    address payable public admin;\r\n    TrafficLight public tokenContract;\r\n    uint256 public tokenPrice;\r\n    uint256 public tokensSold;\r\n\tuint256 public constant decimals = 10**18;\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n\r\n    constructor (TrafficLight _tokenContract, uint256 _tokenPrice) public {\r\n        admin = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        tokenPrice = _tokenPrice;\r\n        tokensSold = 0;\r\n    }\r\n\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function buyTokens(uint256 _numberOfTokens) public payable {\r\n        require(msg.value == multiply(_numberOfTokens, tokenPrice));\r\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens*decimals);\r\n        require(tokenContract.transfer(msg.sender, _numberOfTokens*decimals));\r\n\r\n        tokensSold += _numberOfTokens;\r\n\r\n        emit Sell(msg.sender, _numberOfTokens);\r\n    }\r\n\r\n    function endSale() public {\r\n        require(msg.sender == admin);\r\n        require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\r\n        tokensSold = 0;\r\n        admin.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract TrafficLight\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract TrafficLight\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrafficLightSale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000009403ecc36d1f59726361c282bc1fa76aa5d762f00000000000000000000000000000000000000000000000000b1a2bc2ec50000","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dc3829ae461ad32e51b55e05bbf51d663e129881669588c21a7eafc994ff1aa0"}]}