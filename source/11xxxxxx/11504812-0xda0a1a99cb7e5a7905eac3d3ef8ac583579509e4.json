{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n}\r\n\r\ncontract PreSale {\r\n  using SafeMath for uint256;\r\n\r\n  address public token;\r\n  uint256 public totalSold;\r\n  address payable public owner;\r\n  uint256 public startDate;\r\n  uint256 private diver;\r\n  uint256 private multi;\r\n  \r\n  bool ableToClaim;\r\n  bool sellSystem;\r\n  \r\n  struct User {\r\n    uint256 accountBalance;\r\n  }\r\n    \r\n  mapping(address => User) public users;\r\n  \r\n  address[] public allUsers;\r\n   \r\n  constructor() public {\r\n    owner = msg.sender;\r\n    token = address(0);\r\n    ableToClaim = false;\r\n    sellSystem = true;\r\n    startDate = now;\r\n    multi = 1;\r\n    diver = 1;\r\n  }\r\n\r\n  function contribute() external payable {\r\n    require(sellSystem);\r\n    require(msg.value >= 0.01 ether);\r\n    \r\n    uint256 amount = msg.value;\r\n    \r\n    if (now.sub(startDate) <= 1 days) {\r\n       amount = amount.mul(200);\r\n    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {\r\n       amount = amount.mul(190);\r\n    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {\r\n       amount = amount.mul(180);\r\n    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {\r\n       amount = amount.mul(170);\r\n    } else if(now.sub(startDate) > 4 days && now.sub(startDate) <= 5 days) {\r\n       amount = amount.mul(160);\r\n    } else if(now.sub(startDate) > 5 days && now.sub(startDate) <= 6 days) {\r\n       amount = amount.mul(150);\r\n    } else if(now.sub(startDate) > 6 days && now.sub(startDate) <= 7 days) {\r\n       amount = amount.mul(140);\r\n    } else if(now.sub(startDate) > 7 days && now.sub(startDate) <= 8 days) {\r\n       amount = amount.mul(130);\r\n    } else if(now.sub(startDate) > 8 days && now.sub(startDate) <= 9 days) {\r\n       amount = amount.mul(120);\r\n    } else if(now.sub(startDate) > 9 days && now.sub(startDate) <= 10 days) {\r\n       amount = amount.mul(110);\r\n    } else {\r\n       amount = amount.mul(100);\r\n    }\r\n    \r\n    amount = amount.div(100);\r\n    \r\n    totalSold = totalSold.add(amount);\r\n    \r\n    users[msg.sender].accountBalance = users[msg.sender].accountBalance.add(amount);\r\n     \r\n    allUsers.push(msg.sender);\r\n    \r\n    owner.transfer(msg.value);\r\n  }\r\n  \r\n   function returnAllTokens() public {\r\n    require(token != address(0));\r\n    require(msg.sender == owner);\r\n    require(ableToClaim);\r\n        \r\n    for (uint id = 0; id < allUsers.length; id++) {\r\n          address getAddressUser = allUsers[id];\r\n          uint256 value = users[getAddressUser].accountBalance;\r\n          users[getAddressUser].accountBalance = users[getAddressUser].accountBalance.sub(value);\r\n          if(value != 0){\r\n             ERC20(token).transfer(getAddressUser, (value * multi ) / diver);\r\n          }\r\n     }\r\n  }\r\n           \r\n  function claimTokens() public {\r\n    require(token != address(0));\r\n    require(ableToClaim);\r\n    uint256 value = users[msg.sender].accountBalance;\r\n    users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);\r\n    ERC20(token).transfer(msg.sender, (value * multi ) / diver);\r\n  }\r\n  \r\n  function yourTokens() public view returns(uint256) {\r\n    return users[msg.sender].accountBalance;\r\n  }\r\n  \r\n  function setToken(address _token) public {\r\n    require(msg.sender == owner);\r\n    token = _token;\r\n  }\r\n  \r\n  function setValue(uint256 _diver, uint256 _multi) public {\r\n    require(msg.sender == owner);\r\n    diver = _diver;\r\n    multi = _multi;\r\n  }\r\n  \r\n  function setClaimSystem (bool _ableToClaim) public {\r\n    require(msg.sender == owner);\r\n    ableToClaim = _ableToClaim;\r\n  }\r\n  \r\n  function setSellSystem (bool _sellSystem) public {\r\n    require(msg.sender == owner);\r\n    sellSystem = _sellSystem;\r\n  }\r\n  \r\n  function returnVariousTokenFromContract(address tokenAddress) public returns (bool success) {\r\n      require(msg.sender == owner);\r\n      ERC20 tempToken = ERC20(tokenAddress);\r\n      tempToken.transfer(msg.sender, tempToken.balanceOf(address(this)));\r\n      return true;\r\n  }\r\n  \r\n  function returnETHFromContract(uint256 value) public returns (bool success) {\r\n      require(msg.sender == owner);\r\n      msg.sender.transfer(value);\r\n      return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"returnETHFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"returnVariousTokenFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ableToClaim\",\"type\":\"bool\"}],\"name\":\"setClaimSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_sellSystem\",\"type\":\"bool\"}],\"name\":\"setSellSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_diver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multi\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accountBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yourTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PreSale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://caba0a3eb2f9e3a9967feb0dd8ae63551085b82a06670487020924aa04ad254c"}]}