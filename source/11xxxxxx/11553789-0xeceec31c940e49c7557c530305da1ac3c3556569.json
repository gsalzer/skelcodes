{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/proxy/Initializable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n// File: contracts/ZUSDImplementation.sol\r\n\r\npragma solidity 0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ZUSDImplementation\r\n * @dev This contract is a Pausable ERC20 token with issuance\r\n * controlled by a central Issuer. By implementing ZUSDImplementation\r\n * this contract also includes external methods for setting\r\n * a new implementation contract for the Proxy.\r\n * NOTE: The storage defined here will actually be held in the Proxy\r\n * contract and all calls to this contract should be made through\r\n * the proxy, including admin actions done as owner or issuer.\r\n * Any call to transfer against this contract should fail\r\n * since the contract is paused and there are no balances.\r\n */\r\ncontract ZUSDImplementation is IERC20, Initializable {\r\n    /**\r\n     * MATH\r\n     */\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * DATA\r\n     * NOTE: Do NOT reorder any declared variables and ONLY append variables.\r\n     * The proxy relies on existing variables to remain in the same address space.\r\n     */\r\n\r\n    // ERC20 CONSTANT DETAILS\r\n    string public constant name = \"Zytara USD\";\r\n    string public constant symbol = \"ZUSD\";\r\n    uint8 public constant decimals = 6;\r\n\r\n    // ERC20 DATA\r\n    mapping(address => uint256) internal _balances;\r\n    uint256 public override totalSupply;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    // OWNER DATA\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    // PAUSABILITY DATA\r\n    bool public paused;\r\n\r\n    // COMPLIANCE DATA\r\n    address public complianceRole;\r\n    mapping(address => bool) internal _frozen;\r\n\r\n    // ISSUER DATA\r\n    address public issuer;\r\n\r\n    /**\r\n     * EVENTS\r\n     */\r\n\r\n    // ERC20 EVENTS\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // OWNABLE EVENTS\r\n    event OwnershipTransferProposed(\r\n        address indexed currentOwner,\r\n        address indexed proposedOwner\r\n    );\r\n    event OwnershipTransferDisregarded(address indexed oldProposedOwner);\r\n    event OwnershipTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // PAUSABLE EVENTS\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    // COMPLIANCE EVENTS\r\n    event FreezeAddress(address indexed addr);\r\n    event UnfreezeAddress(address indexed addr);\r\n    event WipeFrozenAddress(address indexed addr);\r\n    event ComplianceRoleSet(\r\n        address indexed oldComplianceRole,\r\n        address indexed newComplianceRole\r\n    );\r\n\r\n    // ISSUER EVENTS\r\n    event Mint(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event IssuerSet(address indexed oldIssuer, address indexed newIssuer);\r\n\r\n    /**\r\n     * FUNCTIONALITY\r\n     */\r\n\r\n    // INITIALIZATION FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev sets 0 initial tokens, the owner, and the issuer.\r\n     * this serves as the constructor for the proxy but compiles to the\r\n     * memory model of the Implementation contract.\r\n     */\r\n    function initialize() public initializer {\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n        complianceRole = address(0);\r\n        totalSupply = 0;\r\n        issuer = msg.sender;\r\n        paused = false;\r\n    }\r\n\r\n    // ERC20 FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param addr The address to query the the balance of.\r\n     * Returns a uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address addr) external view override returns (uint256) {\r\n        return _balances[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address from msg.sender\r\n     * Note: the use of Safemath ensures that value is nonnegative.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override whenNotPaused returns (bool) {\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\r\n            value\r\n        );\r\n        _transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param addedValue The increase in the number of tokens that can be spent.\r\n     *\r\n     * This mitigates the problem described in:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param subtractedValue The decrease in the number of tokens that can be spent.\r\n     *\r\n     * This mitigates the problem described in:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param _owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(\r\n        address _owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(!_frozen[_owner] && !_frozen[spender], \"address frozen\");\r\n        require(\r\n            spender != address(0),\r\n            \"cannot approve allowance for zero address\"\r\n        );\r\n\r\n        _allowances[_owner][spender] = value;\r\n        emit Approval(_owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * Returns a uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(to != address(0), \"cannot transfer to address zero\");\r\n        require(!_frozen[from] && !_frozen[to], \"address frozen\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    // OWNER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\r\n     * @param newProposedOwner The address to transfer ownership to.\r\n     */\r\n    function proposeOwner(address newProposedOwner) external onlyOwner {\r\n        require(\r\n            newProposedOwner != address(0),\r\n            \"cannot transfer ownership to address zero\"\r\n        );\r\n        require(msg.sender != newProposedOwner, \"caller already is owner\");\r\n\r\n        proposedOwner = newProposedOwner;\r\n        emit OwnershipTransferProposed(owner, proposedOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\r\n     */\r\n    function disregardProposeOwner() external {\r\n        require(\r\n            msg.sender == proposedOwner || msg.sender == owner,\r\n            \"only proposedOwner or owner\"\r\n        );\r\n        require(\r\n            proposedOwner != address(0),\r\n            \"can only disregard a proposed owner that was previously set\"\r\n        );\r\n\r\n        address oldProposedOwner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferDisregarded(oldProposedOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\r\n     */\r\n    function claimOwnership() external {\r\n        require(msg.sender == proposedOwner, \"onlyProposedOwner\");\r\n\r\n        address oldOwner = owner;\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    // PAUSABILITY FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() external onlyOwner {\r\n        require(!paused, \"already paused\");\r\n\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external onlyOwner {\r\n        require(paused, \"already unpaused\");\r\n\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    // COMPLIANCE FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Gets the frozen status of the specified address.\r\n     * @param addr The address to query the the status of.\r\n     * Returns a bool representing whether the address is frozen.\r\n     */\r\n    function frozen(address addr) external view returns (bool) {\r\n        return _frozen[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new compliance role address.\r\n     * @param newComplianceRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\r\n     */\r\n    function setComplianceRole(address newComplianceRole) external {\r\n        require(\r\n            msg.sender == complianceRole || msg.sender == owner,\r\n            \"only complianceRole or Owner\"\r\n        );\r\n\r\n        emit ComplianceRoleSet(complianceRole, newComplianceRole);\r\n        complianceRole = newComplianceRole;\r\n    }\r\n\r\n    modifier onlyComplianceRole() {\r\n        require(msg.sender == complianceRole, \"onlyComplianceRole\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes an address balance from being transferred.\r\n     * @param addr The new address to freeze.\r\n     */\r\n    function freeze(address addr) external onlyComplianceRole {\r\n        require(!_frozen[addr], \"address already frozen\");\r\n\r\n        _frozen[addr] = true;\r\n        emit FreezeAddress(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes an address balance allowing transfer.\r\n     * @param addr The new address to unfreeze.\r\n     */\r\n    function unfreeze(address addr) external onlyComplianceRole {\r\n        require(_frozen[addr], \"address already unfrozen\");\r\n\r\n        _frozen[addr] = false;\r\n        emit UnfreezeAddress(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Wipes the balance of a frozen address, burning the tokens\r\n     * and setting the approval to zero.\r\n     * @param addr The new frozen address to wipe.\r\n     */\r\n    function wipeFrozenAddress(address addr) external onlyComplianceRole {\r\n        require(_frozen[addr], \"address is not frozen\");\r\n\r\n        uint256 _balance = _balances[addr];\r\n        _burn(addr, _balance);\r\n        emit WipeFrozenAddress(addr);\r\n    }\r\n\r\n    // ISSUER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new issuer address.\r\n     * @param newIssuer The address allowed to mint tokens to control supply.\r\n     */\r\n    function setIssuer(address newIssuer) external onlyOwner {\r\n        require(newIssuer != address(0), \"cannot set issuer to address zero\");\r\n        emit IssuerSet(issuer, newIssuer);\r\n        issuer = newIssuer;\r\n    }\r\n\r\n    modifier onlyIssuer() {\r\n        require(msg.sender == issuer, \"onlyIssuer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the total supply by minting the specified number of tokens to the issuer account.\r\n     * @param value The number of tokens to add.\r\n     * Returns a boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(uint256 value)\r\n        external\r\n        onlyIssuer\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        _mint(issuer, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the total supply by minting the specified number of tokens to the specified account.\r\n     * @param value The number of tokens to add.\r\n     * Returns a boolean that indicates if the operation was successful.\r\n     */\r\n    function mintTo(address to, uint256 value)\r\n        external\r\n        onlyIssuer\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        _mint(to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of _balances such that the\r\n     * proper events are emitted.\r\n     * @param to The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address to, uint256 value) internal {\r\n        require(to != address(0), \"cannot mint to address zero\");\r\n        require(!_frozen[to], \"address frozen\");\r\n\r\n        totalSupply = totalSupply.add(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Mint(to, value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the total supply by burning the specified number of tokens.\r\n     * @param value The number of tokens to remove.\r\n     * Returns a boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(uint256 value) external returns (bool) {\r\n        require(!_frozen[msg.sender], \"address frozen\");\r\n        _burn(msg.sender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the total supply by burning the specified number of tokens from the specified address.\r\n     * @param value The number of tokens to remove.\r\n     * Returns a boolean that indicates if the operation was successful.\r\n     */\r\n    function burnFrom(address from, uint256 value) external returns (bool) {\r\n        require(!_frozen[from] && !_frozen[msg.sender], \"address frozen\");\r\n        _burn(from, value);\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\r\n            value\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param addr The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address addr, uint256 value) internal {\r\n        totalSupply = totalSupply.sub(value);\r\n        _balances[addr] = _balances[addr].sub(value);\r\n        emit Burn(addr, value);\r\n        emit Transfer(addr, address(0), value);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldComplianceRole\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newComplianceRole\",\"type\":\"address\"}],\"name\":\"ComplianceRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FreezeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"IssuerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferDisregarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnfreezeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WipeFrozenAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complianceRole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disregardProposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newComplianceRole\",\"type\":\"address\"}],\"name\":\"setComplianceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZUSDImplementation","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e249daa035c5726ceec5f5c33be0a7400967e2e04d3b18f981a0011867340863"}]}