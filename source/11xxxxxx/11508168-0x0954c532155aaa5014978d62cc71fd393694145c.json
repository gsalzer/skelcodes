{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract HbtcStakingPool {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed staker, uint256 indexed amount, uint256 indexed timestamp);\r\n    event Unstaked(address indexed staker, uint256 indexed amount, uint256 indexed timestamp);\r\n\r\n    /* Pool Settings */\r\n    address public poolToken;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public maxStakeAmount;\r\n    uint256 public totalRewardAmount;\r\n\r\n    /* Live Pool Data */\r\n    uint256 public totalStakeAmount;\r\n    mapping(address => uint256) public stakeAmounts;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    /* Reward Tracking Data */\r\n    uint256 private outputPerSecond;\r\n    uint256 private lastTokenRewardRate;\r\n    uint256 private lastTokenRewardRateUpdateTime;\r\n    mapping(address => uint256) private stakerEntryRewardRates;\r\n\r\n    uint256 public constant TOKEN_REWARD_RATE_MULTIPLIER = 10**20; // Precision loss prevention\r\n\r\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n\r\n    modifier onlyStarted() {\r\n        require(block.timestamp >= startTime, \"HbtcStakingPool: not started\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotEnded() {\r\n        require(block.timestamp < endTime, \"HbtcStakingPool: already ended\");\r\n        _;\r\n    }\r\n\r\n    modifier updateTokenRewardRate() {\r\n        uint256 appliedUpdateTime = Math.min(block.timestamp, endTime);\r\n        uint256 durationInSeconds = appliedUpdateTime.sub(lastTokenRewardRateUpdateTime);\r\n\r\n        // This saves tx cost when being called multiple times in the same block\r\n        if (durationInSeconds > 0) {\r\n            // No need to update the rate if no one staked at all\r\n            if (totalStakeAmount > 0) {\r\n                lastTokenRewardRate = lastTokenRewardRate.add(durationInSeconds.mul(outputPerSecond).div(totalStakeAmount));\r\n            }\r\n            lastTokenRewardRateUpdateTime = appliedUpdateTime;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier updateStakerReward(address staker) {\r\n        uint256 stakeAmount = stakeAmounts[staker];\r\n        uint256 stakerEntryRate = stakerEntryRewardRates[staker];\r\n        uint256 rateDifference = lastTokenRewardRate.sub(stakerEntryRate);\r\n\r\n        if (rateDifference > 0) {\r\n            rewards[staker] = rewards[staker].add(stakeAmount.mul(rateDifference).div(TOKEN_REWARD_RATE_MULTIPLIER));\r\n            stakerEntryRewardRates[staker] = lastTokenRewardRate;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function getReward(address staker) external view returns (uint256) {\r\n        uint256 latestTokenRewardRate =\r\n            totalStakeAmount > 0\r\n                ? lastTokenRewardRate.add(\r\n                    Math.min(block.timestamp, endTime).sub(lastTokenRewardRateUpdateTime).mul(outputPerSecond).div(\r\n                        totalStakeAmount\r\n                    )\r\n                )\r\n                : lastTokenRewardRate;\r\n\r\n        return\r\n            rewards[staker].add(\r\n                stakeAmounts[staker].mul(latestTokenRewardRate.sub(stakerEntryRewardRates[staker])).div(\r\n                    TOKEN_REWARD_RATE_MULTIPLIER\r\n                )\r\n            );\r\n    }\r\n\r\n    constructor(\r\n        address _poolToken,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _maxStakeAmount,\r\n        uint256 _totalRewardAmount\r\n    ) public {\r\n        require(_poolToken != address(0), \"HbtcStakingPool: zero address\");\r\n        require(_startTime > block.timestamp && _endTime > _startTime, \"HbtcStakingPool: invalid time range\");\r\n        require(_maxStakeAmount > 0, \"HbtcStakingPool: max stake amount cannot be zero\");\r\n        require(_totalRewardAmount > 0, \"HbtcStakingPool: total reward amount cannot be zero\");\r\n\r\n        poolToken = _poolToken;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        maxStakeAmount = _maxStakeAmount;\r\n        totalRewardAmount = _totalRewardAmount;\r\n\r\n        outputPerSecond = _totalRewardAmount\r\n            .mul(TOKEN_REWARD_RATE_MULTIPLIER) // avoid precision loss\r\n            .div(_endTime.sub(_startTime));\r\n        lastTokenRewardRate = 0;\r\n        lastTokenRewardRateUpdateTime = _startTime;\r\n    }\r\n\r\n    function stake(uint256 amount) external onlyStarted onlyNotEnded updateTokenRewardRate updateStakerReward(msg.sender) {\r\n        doStake(amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) external onlyStarted updateTokenRewardRate updateStakerReward(msg.sender) {\r\n        doUnstake(amount);\r\n    }\r\n\r\n    function unstakeAll() external onlyStarted updateTokenRewardRate updateStakerReward(msg.sender) {\r\n        doUnstake(stakeAmounts[msg.sender]);\r\n    }\r\n\r\n    function doStake(uint256 amount) private {\r\n        require(amount > 0, \"HbtcStakingPool: cannot stake zero amount\");\r\n\r\n        stakeAmounts[msg.sender] = stakeAmounts[msg.sender].add(amount);\r\n        totalStakeAmount = totalStakeAmount.add(amount);\r\n\r\n        require(totalStakeAmount <= maxStakeAmount, \"HbtcStakingPool: maximum stake amount exceeded\");\r\n\r\n        safeTransferFrom(poolToken, msg.sender, address(this), amount);\r\n\r\n        emit Staked(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function doUnstake(uint256 amount) private {\r\n        require(amount > 0, \"HbtcStakingPool: cannot unstake zero amount\");\r\n\r\n        // No sufficiency check required as sub() will throw anyways\r\n        stakeAmounts[msg.sender] = stakeAmounts[msg.sender].sub(amount);\r\n        totalStakeAmount = totalStakeAmount.sub(amount);\r\n\r\n        safeTransfer(poolToken, msg.sender, amount);\r\n\r\n        emit Unstaked(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"HbtcStakingPool: transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, sender, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"HbtcStakingPool: transfer from failed\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_REWARD_RATE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HbtcStakingPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000000316eb71485b0ab14103307bf65a021042c6d380000000000000000000000000000000000000000000000000000000005fe2f900000000000000000000000000000000000000000000000000000000006007e30000000000000000000000000000000000000000000000000ad78ebc5ac6200000000000000000000000000000000000000000000000108b2a2c28029094000000","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3342e2a09beb980e75db099acba4c1bda0bfe2c00a53fc9d40d54c71d74623da"}]}