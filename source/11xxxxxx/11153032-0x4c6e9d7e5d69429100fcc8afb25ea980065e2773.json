{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Compound\\CTokenI.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface CTokenI{\r\n\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\r\n\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    /**\r\n     * @notice Failure event\r\n     */\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function accrualBlockNumber() external view returns (uint);\r\n    function exchangeRateStored() external view returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function accrueInterest() external returns (uint);\r\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\r\n\r\n    function totalBorrows() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Compound\\CErc20I.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface CErc20I is CTokenI{\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenI cTokenCollateral) external returns (uint);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Compound\\ComptrollerI.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ComptrollerI {\r\n\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cToken) external returns (uint);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\r\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\r\n\r\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\r\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\r\n\r\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\r\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint borrowerIndex) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount) external returns (uint);\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint repayAmount,\r\n        uint seizeTokens) external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external returns (uint);\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint seizeTokens) external;\r\n\r\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\r\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint repayAmount) external view returns (uint, uint);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\r\n\r\n\r\n    /***  Comp claims ****/\r\n    function claimComp(address holder) external;\r\n    function claimComp(address holder, CTokenI[] memory cTokens) external;\r\n    function markets(address ctoken) external view returns (bool, uint, bool);\r\n\r\n    \r\n    function compSpeeds(address ctoken) external view returns (uint);\r\n\r\n    \r\n\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\UniswapInterfaces\\IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\UniswapInterfaces\\IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Yearn\\IController.sol\r\n\r\npragma solidity ^0.6.9;\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function earn(address, uint256) external;\r\n\r\n    function want(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vaults(address) external view returns (address);\r\n\r\n    function approveStrategy(address, address) external;\r\n\r\n    function setStrategy(address, address) external;\r\n\r\n    function strategies(address) external view returns (address);\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\DyDx\\ISoloMargin.sol\r\n\r\npragma solidity >=0.5.7;\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator1;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function getIsGlobalOperator(address operator1) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        external;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator1)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator1, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Rate memory);\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\DyDx\\DydxFlashLoanBase.sol\r\n\r\npragma solidity >=0.5.7;\r\n\r\n\r\n\r\ncontract DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\DyDx\\ICallee.sol\r\n\r\npragma solidity >=0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ninterface ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    )\r\n        external;\r\n}\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Aave\\IFlashLoanReceiver.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n* @title IFlashLoanReceiver interface\r\n* @notice Interface for the Aave fee IFlashLoanReceiver.\r\n* @author Aave\r\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n**/\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Aave\\ILendingPoolAddressesProvider.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n    @title ILendingPoolAddressesProvider interface\r\n    @notice provides the interface to fetch the LendingPoolCore address\r\n */\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\utils\\Withdrawable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n/**\r\n    Ensures that any contract that inherits from this contract is able to\r\n    withdraw funds that are accidentally received or stuck.\r\n */\r\n \r\ncontract Withdrawable is Ownable {\r\n    using SafeERC20 for ERC20;\r\n    address constant ETHER = address(0);\r\n\r\n    event LogWithdraw(\r\n        address indexed _from,\r\n        address indexed _assetAddress,\r\n        uint amount\r\n    );\r\n\r\n    /**\r\n     * @dev Withdraw asset.\r\n     * @param _assetAddress Asset to be withdrawn.\r\n     */\r\n    function withdraw(address _assetAddress) public onlyOwner {\r\n        uint assetBalance;\r\n        if (_assetAddress == ETHER) {\r\n            address self = address(this); // workaround for a possible solidity bug\r\n            assetBalance = self.balance;\r\n            msg.sender.transfer(assetBalance);\r\n        } else {\r\n            assetBalance = ERC20(_assetAddress).balanceOf(address(this));\r\n            ERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\r\n        }\r\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Aave\\FlashLoanReceiverBase.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver, Withdrawable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    constructor(address _addressProvider) public {\r\n        addressesProvider = ILendingPoolAddressesProvider(_addressProvider);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\r\n        address payable core = addressesProvider.getLendingPoolCore();\r\n        transferInternal(core, _reserve, _amount);\r\n    }\r\n\r\n    function transferInternal(\r\n        address payable _destination,\r\n        address _reserve,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_reserve == ethAddress) {\r\n            (bool success, ) = _destination.call{value: _amount}(\"\");\r\n            require(success == true, \"Couldn't transfer ETH\");\r\n            return;\r\n        }\r\n        IERC20(_reserve).safeTransfer(_destination, _amount);\r\n    }\r\n\r\n    function getBalanceInternal(address _target, address _reserve) internal view returns (uint256) {\r\n        if (_reserve == ethAddress) {\r\n            return _target.balance;\r\n        }\r\n        return IERC20(_reserve).balanceOf(_target);\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Aave\\ILendingPool.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface ILendingPool {\r\n  function addressesProvider () external view returns ( address );\r\n  function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\r\n  function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\r\n  function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\r\n  function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\r\n  function swapBorrowRateMode ( address _reserve ) external;\r\n  function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\r\n  function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\r\n  function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\r\n  function flashLoan ( address _receiver, address _reserve, uint256 _amount, bytes calldata _params ) external;\r\n  function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\r\n  function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\r\n  function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\r\n  function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\r\n  function getReserves () external view;\r\n}\r\n\r\n// File: contracts\\strategies\\Interfaces\\Chainlink\\AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      uint256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts\\strategies\\BaseStrategy.sol\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtLimit;\r\n    uint256 rateLimit;\r\n    uint256 lastSync;\r\n    uint256 totalDebt;\r\n    uint256 totalReturns;\r\n}\r\n\r\ninterface VaultAPI {\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /*\r\n     * View how much the Vault would increase this strategy's borrow limit,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /*\r\n     * View how much the Vault expect this strategy to return at the current block,\r\n     * based on it's present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /*\r\n     * This is the main contact point where the strategy interacts with the Vault.\r\n     * It is critical that this call is handled as intended by the Strategy.\r\n     * Therefore, this function will be called by BaseStrategy to make sure the\r\n     * integration is correct.\r\n     */\r\n    function report(uint256 _harvest) external returns (uint256);\r\n\r\n    /*\r\n     * This function is used in the scenario where there is a newer strategy that\r\n     * would hold the same positions as this one, and those positions are easily\r\n     * transferrable to the newer strategy. These positions must be able to be\r\n     * transferred at the moment this call is made, if any prep is required to\r\n     * execute a full transfer in one transaction, that must be accounted for\r\n     * separately from this call.\r\n     */\r\n    function migrateStrategy(address _newStrategy) external;\r\n\r\n    /*\r\n     * This function should only be used in the scenario where the strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits it's position as fast as possible, such as a sudden change in market\r\n     * conditions leading to losses, or an imminent failure in an external\r\n     * dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /*\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     *\r\n     */\r\n    function governance() external view returns (address);\r\n}\r\n\r\n/*\r\n * This interface is here for the keeper bot to use\r\n */\r\ninterface StrategyAPI {\r\n    function vault() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function tendTrigger(uint256 gasCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 gasCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 wantEarned, uint256 lifetimeEarned);\r\n}\r\n\r\n/*\r\n * BaseStrategy implements all of the required functionality to interoperate closely\r\n * with the core protocol. This contract should be inherited and the abstract methods\r\n * implemented to adapt the strategy to the particular needs it has to create a return.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n\r\n    // Version of this contract\r\n    function version() external pure returns (string memory) {\r\n        return \"0.1.1\";\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 wantEarned, uint256 lifetimeEarned);\r\n\r\n    // Adjust this to keep some of the position in reserve in the strategy,\r\n    // to accomodate larger variations needed to sustain the strategy's core positon(s)\r\n    uint256 public reserve = 0;\r\n\r\n    // This gets adjusted every time the Strategy reports to the Vault,\r\n    // and should be used during adjustment of the strategy's positions to \"deleverage\"\r\n    // in order to pay back the amount the next time it reports.\r\n    //\r\n    // NOTE: Do not edit this variable, for safe usage (only read from it)\r\n    // NOTE: Strategy should not expect to increase it's working capital until this value\r\n    //       is zero.\r\n    uint256 public outstanding = 0;\r\n\r\n    bool public emergencyExit;\r\n\r\n    constructor(address _vault) public {\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = msg.sender;\r\n        keeper = msg.sender;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!governance\");\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /*\r\n     * Resolve governance address from Vault contract, used to make\r\n     * assertions on protected functions in the Strategy\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /*\r\n     * Provide an accurate expected value for the return this strategy\r\n     * would provide to the Vault the next time `report()` is called\r\n     * (since the last time it was called)\r\n     */\r\n    function expectedReturn() public virtual view returns (uint256);\r\n\r\n    /*\r\n     * Provide an accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\r\n     * This total should be \"realizable\" e.g. the total value that could *actually* be\r\n     * obtained from this strategy if it were to divest it's entire position based on\r\n     * current on-chain conditions.\r\n     *\r\n     * NOTE: care must be taken in using this function, since it relies on external\r\n     *       systems, which could be manipulated by the attacker to give an inflated\r\n     *       (or reduced) value produced by this function, based on current on-chain\r\n     *       conditions (e.g. this function is possible to influence through flashloan\r\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\r\n     *\r\n     * NOTE: It is up to governance to use this function in order to correctly order\r\n     *       this strategy relative to its peers in order to minimize losses for the\r\n     *       Vault based on sudden withdrawals. This value should be higher than the\r\n     *       total debt of the strategy and higher than it's expected value to be \"safe\".\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /*\r\n     * Perform any strategy unwinding or other calls necessary to capture\r\n     * the \"free return\" this strategy has generated since the last time it's\r\n     * core position(s) were adusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and should\r\n     * be optimized to minimize losses as much as possible. It is okay to report\r\n     * \"no returns\", however this will affect the credit limit extended to the\r\n     * strategy and reduce it's overall position if lower than expected returns\r\n     * are sustained for long periods of time.\r\n     */\r\n    function prepareReturn() internal virtual;\r\n\r\n    /*\r\n     * Perform any adjustments to the core position(s) of this strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * strategy. Note that all \"free capital\" in the strategy after the report\r\n     * was made is available for reinvestment. Also note that this number could\r\n     * be 0, and you should handle that scenario accordingly.\r\n     */\r\n    function adjustPosition() internal virtual;\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed, since when this method is called the strategist is no longer receiving\r\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\r\n     * while not suffering exorbitant losses. This function is used during emergency exit\r\n     * instead of `prepareReturn()`\r\n     */\r\n    function exitPosition() internal virtual;\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     * NOTE: if `tend()` is never intended to be called, it should always return `false`\r\n     */\r\n    function tendTrigger(uint256 gasCost) public virtual view returns (bool);\r\n\r\n    function tend() external {\r\n        if (keeper != address(0)) require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance());\r\n        // NOTE: Don't take profits with this call, but adjust for better gains\r\n        adjustPosition();\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\r\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\r\n     * use that estimate to make a determination if calling it is \"worth it\" for the keeper.\r\n     * This is not the only consideration into issuing this trigger, for example if the position\r\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\r\n     * even if the keeper might be \"at a loss\" (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 gasCost) public virtual view returns (bool);\r\n\r\n    function harvest() external {\r\n        if (keeper != address(0)) require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance());\r\n\r\n        if (emergencyExit) {\r\n            exitPosition(); // Free up as much capital as possible\r\n            // NOTE: Don't take performance fee in this scenario\r\n        } else {\r\n            prepareReturn(); // Free up returns for Vault to pull\r\n        }\r\n\r\n        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract, which is\r\n        // the amount it has earned since the last time it reported to the Vault\r\n        uint256 wantEarned = want.balanceOf(address(this)).sub(reserve);\r\n        outstanding = vault.report(wantEarned);\r\n\r\n        adjustPosition(); // Check if free returns are left, and re-invest them\r\n\r\n        emit Harvested(wantEarned, vault.strategies(address(this)).totalReturns);\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amount`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amount) internal virtual;\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        liquidatePosition(_amount); // Liquidates as much as possible to `want`, up to `_amount`\r\n        want.transfer(msg.sender, want.balanceOf(address(this)).sub(reserve));\r\n    }\r\n\r\n    /*\r\n     * Do anything necesseary to prepare this strategy for migration, such\r\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n    }\r\n\r\n    function setEmergencyExit() external {\r\n        require(msg.sender == strategist || msg.sender == governance());\r\n        emergencyExit = true;\r\n        exitPosition();\r\n        vault.revokeStrategy();\r\n        if (reserve > want.balanceOf(address(this))) reserve = want.balanceOf(address(this));\r\n        outstanding = vault.report(want.balanceOf(address(this)).sub(reserve));\r\n    }\r\n\r\n    // Override this to add all tokens this contract manages on a *persistant* basis\r\n    // (e.g. not just for swapping back to want ephemerally)\r\n    // NOTE: Must inclide `want` token\r\n    function protectedTokens() internal virtual view returns (address[] memory) {\r\n        address[] memory protected = new address[](1);\r\n        protected[0] = address(want);\r\n        return protected;\r\n    }\r\n\r\n    function sweep(address _token) external {\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: contracts\\strategies\\YearnDaiCompStratV2.sol\r\n\r\npragma solidity ^0.6.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************\r\n*   A simple Comp farming strategy from leveraged lending of DAI. \r\n*   Uses Flash Loan to leverage up quicker. But not neccessary for operation\r\n*   https://github.com/Grandthrax/yearnv2/blob/master/contracts/YearnDaiCompStratV2.sol\r\n*\r\n********************* */\r\n\r\ncontract YearnDaiCompStratV2 is BaseStrategy, DydxFlashloanBase, ICallee, FlashLoanReceiverBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    // @notice emitted when trying to do Flash Loan. flashLoan address is 0x00 when no flash loan used\r\n    event Leverage(uint amountRequested, uint amountGiven, bool deficit, address flashLoan);\r\n\r\n    string public constant name = \"LeveragedDaiCompStrategyV2\";\r\n\r\n    //Flash Loan Providers\r\n    address private constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address private constant AAVE_LENDING = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n\r\n    // Chainlink price feed contracts\r\n    address private constant COMP2USD = 0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5;\r\n    address private constant DAI2USD = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\r\n    address private constant ETH2USD = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n\r\n    // Comptroller address for compound.finance\r\n    ComptrollerI public constant compound = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B); \r\n\r\n    //Only three tokens we use\r\n    address public constant comp =  address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n    CErc20I public constant cDAI = CErc20I(address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643));\r\n    address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    address public constant uniswapRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); \r\n\r\n    //Operating variables\r\n    uint256 public collateralTarget = 0.73 ether;  // 73% \r\n    uint256 public blocksToLiquidationDangerZone = 46500;  // 24 hours =  60*60*24*7/13\r\n\r\n    uint256 public minDAI = 10 ether; //Only lend if we have enough DAI to be worth it\r\n    uint256 public minCompToSell = 0.5 ether; //used both as the threshold to sell but also as a trigger for harvest\r\n    uint256 public gasFactor = 50; // multiple before triggering harvest\r\n\r\n    //To deactivate flash loan provider if needed\r\n    bool public DyDxActive = true;\r\n    bool public AaveActive = true;\r\n\r\n    constructor(address _vault) public BaseStrategy(_vault) FlashLoanReceiverBase(AAVE_LENDING)\r\n    {\r\n\r\n        //only accept DAI vault\r\n        require(vault.token() == DAI, \"!DAI\");\r\n                    \r\n        //pre-set approvals\r\n        IERC20(comp).safeApprove(uniswapRouter, uint256(-1));\r\n        want.safeApprove(address(cDAI), uint256(-1));\r\n        want.safeApprove(SOLO, uint256(-1));\r\n\r\n    }\r\n\r\n    /*\r\n    * Control Functions\r\n    */\r\n    function disableDyDx() external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        DyDxActive = false;\r\n    }\r\n    function enableDyDx() external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        DyDxActive = true;\r\n    }\r\n    function disableAave() external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        AaveActive = false;\r\n    }\r\n    function enableAave() external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        AaveActive = true;\r\n    }\r\n    function setGasFactor(uint _gasFactor) external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        gasFactor = _gasFactor;\r\n    }\r\n    function setMinCompToSell(uint _minCompToSell) external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        minCompToSell = _minCompToSell;\r\n    }\r\n    function setCollateralTarget(uint _collateralTarget) external {\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");// dev: not governance or strategist\r\n        collateralTarget = _collateralTarget;\r\n    }\r\n\r\n    /*\r\n    * Base External Facing Functions \r\n    */\r\n\r\n    /*\r\n     * Expected return this strategy would provide to the Vault the next time `report()` is called\r\n     *\r\n     * The total assets currently in strategy minus what vault believes we have\r\n     * Does not include unrealised profit such as comp.\r\n     */\r\n    function expectedReturn() public override view returns (uint256) {\r\n        uint estimateAssets =  estimatedTotalAssets();\r\n\r\n        uint debt = vault.strategies(address(this)).totalDebt;\r\n        if(debt > estimateAssets){\r\n            return 0;\r\n        }else{\r\n            return estimateAssets - debt;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * An accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of DAI tokens.\r\n     */\r\n    function estimatedTotalAssets() public override view returns (uint256) {\r\n        (uint deposits, uint borrows) = getCurrentPosition();\r\n        \r\n        uint256 _claimableComp = predictCompAccrued();\r\n        uint currentComp = IERC20(comp).balanceOf(address(this));\r\n\r\n        // Use chainlink price feed to retrieve COMP and DAI prices expressed in USD. Then convert\r\n        uint256 latestExchangeRate = getLatestExchangeRate();\r\n\r\n        uint256 estimatedDAI = latestExchangeRate.mul(_claimableComp.add(currentComp));\r\n        uint256 conservativeDai = estimatedDAI.mul(9).div(10); //10% pessimist\r\n        \r\n        return want.balanceOf(address(this)).add(deposits).add(conservativeDai).sub(borrows);\r\n\r\n    }\r\n\r\n    /*\r\n     * Aggragate the value in USD for COMP and DAI onchain from different chainlink nodes\r\n     * reducing risk of price manipulation within onchain market.\r\n     * Operation: COMP_PRICE_IN_USD / DAI_PRICE_IN_USD\r\n     */\r\n    function getLatestExchangeRate() public view returns(uint256) {\r\n      ( , uint256 price_comp, , ,  ) = AggregatorV3Interface(COMP2USD).latestRoundData();\r\n      ( , uint256 price_dai, , ,  ) = AggregatorV3Interface(DAI2USD).latestRoundData();\r\n      \r\n      return price_comp.mul(1 ether).div(price_dai).div(1 ether);\r\n    }\r\n\r\n    function getCompValInWei(uint256 _amount) public view returns(uint256) {\r\n      ( , uint256 price_comp, , ,  ) = AggregatorV3Interface(COMP2USD).latestRoundData();\r\n      ( , uint256 price_eth, , ,  ) = AggregatorV3Interface(ETH2USD).latestRoundData();\r\n      \r\n      return price_comp.mul(1 ether).div(price_eth).mul(_amount).div(1 ether);\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called. \r\n     * (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     */\r\n    function tendTrigger(uint256 gasCost) public override view returns (bool) {\r\n        if(harvestTrigger(0)){\r\n            //harvest takes priority\r\n            return false;\r\n        }\r\n\r\n        if(getblocksUntilLiquidation() <= blocksToLiquidationDangerZone){\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called.\r\n     * gasCost is expected_gas_use * gas_price \r\n     * (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 gasCost) public override view returns (bool) {\r\n\r\n        \r\n\r\n        if(vault.creditAvailable() > minDAI.mul(gasFactor))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        // after enough comp has accrued we want the bot to run\r\n        uint256 _claimableComp = predictCompAccrued();\r\n\r\n        if(_claimableComp > minCompToSell) {\r\n            // check value of COMP in wei\r\n            uint256 _compWei = getCompValInWei(_claimableComp.add(IERC20(comp).balanceOf(address(this))));\r\n            if(_compWei > gasCost.mul(gasFactor)) {\r\n                return true;\r\n            }\r\n        }\r\n       \r\n        return false;\r\n    }\r\n\r\n\r\n    /*****************\r\n    * Public non-base function\r\n    ******************/\r\n\r\n    //Calculate how many blocks until we are in liquidation based on current interest rates\r\n    //WARNING does not include compounding so the estimate becomes more innacurate the further ahead we look\r\n    //equation. Compound doesn't include compounding for most blocks\r\n    //((deposits*colateralThreshold - borrows) / (borrows*borrowrate - deposits*colateralThreshold*interestrate));\r\n    function getblocksUntilLiquidation() public view returns (uint256 blocks){\r\n        \r\n        (, uint collateralFactorMantissa,) = compound.markets(address(cDAI));\r\n        \r\n        (uint deposits, uint borrows) = getCurrentPosition();\r\n\r\n        uint borrrowRate = cDAI.borrowRatePerBlock();\r\n\r\n        uint supplyRate = cDAI.supplyRatePerBlock();\r\n\r\n        uint collateralisedDeposit1 = deposits.mul(collateralFactorMantissa);\r\n        uint collateralisedDeposit = collateralisedDeposit1.div(1e18);\r\n\r\n        uint denom1 = borrows.mul(borrrowRate);\r\n        uint denom2 =  collateralisedDeposit.mul(supplyRate);\r\n      \r\n        if(denom2 >= denom1 ){\r\n            blocks = uint256(-1);\r\n        }else{\r\n            uint numer = collateralisedDeposit.sub(borrows);\r\n            uint denom = denom1 - denom2;\r\n\r\n            blocks = numer.mul(1e18).div(denom);\r\n        }\r\n    }\r\n\r\n    // This function makes a prediction on how much comp is accrued\r\n    // It is not 100% accurate as it uses current balances in Compound to predict into the past\r\n    function predictCompAccrued() public view returns (uint) {\r\n        \r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n        if(deposits == 0){\r\n            return 0; // should be impossible to have 0 balance and positive comp accrued\r\n        }\r\n        \r\n        //comp speed is amount to borrow or deposit (so half the total distribution for dai)\r\n        uint256 distributionPerBlock = compound.compSpeeds(address(cDAI));\r\n\r\n        uint256 totalBorrow = cDAI.totalBorrows();\r\n\r\n        //total supply needs to be echanged to underlying using exchange rate\r\n        uint256 totalSupplyCtoken = cDAI.totalSupply();\r\n        uint256 totalSupply = totalSupplyCtoken.mul(cDAI.exchangeRateStored()).div(1e18);\r\n\r\n        uint256 blockShareSupply = deposits.mul(distributionPerBlock).div(totalSupply);\r\n        uint256 blockShareBorrow = borrows.mul(distributionPerBlock).div(totalBorrow);\r\n\r\n        //how much we expect to earn per block\r\n        uint256 blockShare = blockShareSupply.add(blockShareBorrow);\r\n      \r\n        //last time we ran harvest\r\n        uint256 lastReport = vault.strategies(address(this)).lastSync;\r\n        return (block.number.sub(lastReport)).mul(blockShare);\r\n    }\r\n    \r\n    //Returns the current position\r\n    //WARNING - this returns just the balance at last time someone touched the cDAI token. Does not accrue interst in between\r\n    //cDAI is very active so not normally an issue.\r\n    function getCurrentPosition() public view returns (uint deposits, uint borrows) {\r\n\r\n        (, uint ctokenBalance, uint borrowBalance, uint exchangeRate) = cDAI.getAccountSnapshot(address(this));\r\n        borrows = borrowBalance;\r\n\r\n        deposits =  ctokenBalance.mul(exchangeRate).div(1e18);\r\n    }\r\n\r\n    //statechanging version\r\n    function getLivePosition() public returns (uint deposits, uint borrows) {\r\n        deposits = cDAI.balanceOfUnderlying(address(this));\r\n\r\n        //we can use non state changing now because we updated state with balanceOfUnderlying call\r\n        borrows = cDAI.borrowBalanceStored(address(this));\r\n    }\r\n\r\n    //Same warning as above\r\n    function netBalanceLent() public view returns (uint256) {\r\n        (uint deposits, uint borrows) =getCurrentPosition();\r\n        return deposits.sub(borrows);\r\n    }\r\n\r\n\r\n    /***********\r\n    * internal core logic\r\n    *********** */  \r\n    /*\r\n     * A core method. \r\n     * Called at beggining of harvest before providing report to owner\r\n     * 1 - claim accrued comp\r\n     * 2 - if enough to be worth it we sell\r\n     * 3 - because we lose money on our loans we need to offset profit from comp. \r\n     */ \r\n    function prepareReturn() internal override {\r\n        if(cDAI.balanceOf(address(this)) == 0){\r\n            //no position to harvest\r\n            return;\r\n        }\r\n\r\n        //claim comp accrued\r\n        _claimComp();\r\n        //sell comp\r\n        _disposeOfComp();\r\n\r\n        uint daiBalance = want.balanceOf(address(this));\r\n        if(outstanding > daiBalance){\r\n            //withdrawn the money we need. False so we dont use backup and pay aave fees for mature deleverage\r\n            (uint deposits, uint borrows) = getLivePosition();\r\n            _withdrawSome(deposits - borrows, false);\r\n\r\n            return;\r\n        }\r\n\r\n        uint balance = estimatedTotalAssets();\r\n        \r\n        \r\n        uint debt = vault.strategies(address(this)).totalDebt;\r\n\r\n        //Balance - Total Debt is profit\r\n        if(balance > debt){\r\n             uint profit = balance- debt;\r\n            \r\n            if(profit >= daiBalance ){\r\n                //all reserve is profit\r\n                reserve = 0;\r\n            }else{\r\n\r\n                //some dai is not profit and needs to pay off our interest\r\n                //this is most likely situation\r\n                reserve = daiBalance.sub(profit);\r\n            }\r\n        } else{\r\n            //no profit so we set our reserves to our total balance\r\n            reserve = daiBalance;\r\n        }  \r\n    }\r\n\r\n    /*\r\n     * Second core function. Happens after report call.\r\n     *\r\n     * Similar to deposit function from V1 strategy\r\n     */\r\n\r\n    function adjustPosition() internal override {\r\n\r\n        //emergency exit is dealt with in prepareReturn\r\n        if(emergencyExit){\r\n            return;\r\n        }\r\n\r\n        if(reserve != 0){\r\n            //reset reserve so it doesnt interfere anywhere else\r\n            reserve = 0;\r\n        }\r\n\r\n        //we are spending all our cash unless\r\n        //we dont care about outstanding debt until next return\r\n        uint _wantBal = want.balanceOf(address(this));        \r\n\r\n        // We pass in the balance we are adding. \r\n        // We get returned the amount we need to reduce or add to our loan positions to keep at our target collateral ratio\r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_wantBal, true);\r\n        \r\n        //if we are below minimun DAI change it is not worth doing        \r\n        if (position > minDAI) {\r\n\r\n            //if dydx is not active we just try our best with basic leverage\r\n            if(!DyDxActive){\r\n                _noFlashLoan(position, deficit);\r\n            }else{\r\n                //if there is huge position to improve we want to do normal leverage. it is quicker\r\n                if(position > IERC20(DAI).balanceOf(SOLO)){\r\n                    position = position.sub(_noFlashLoan(position, deficit));\r\n                }\r\n           \r\n                //flash loan to position \r\n                doDyDxFlashLoan(deficit, position);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************\r\n    * Very important function\r\n    * Input: amount we want to withdraw and whether we are happy to pay extra for Aave. \r\n    *       cannot be more than we have\r\n    * Returns amount we were able to withdraw. notall if user has some balance left\r\n    *\r\n    * Deleverage position -> redeem our cTokens\r\n    ******************** */\r\n    function _withdrawSome(uint256 _amount, bool _useBackup) internal returns (bool notAll) {\r\n\r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_amount, false);\r\n\r\n        //If there is no deficit we dont need to adjust position\r\n        if(deficit){\r\n\r\n            //we do a flash loan to give us a big gap. from here on out it is cheaper to use normal deleverage. Use Aave for extremely large loans\r\n            if(DyDxActive){\r\n                position = position.sub(doDyDxFlashLoan(deficit, position));\r\n            }\r\n            \r\n            // Will decrease number of interactions using aave as backup\r\n            // because of fee we only use in emergency\r\n            if(position >0 && AaveActive && _useBackup) {\r\n               position = position.sub(doAaveFlashLoan(deficit, position));\r\n            }\r\n\r\n            uint8 i = 0;\r\n            //position will equal 0 unless we haven't been able to deleverage enough with flash loan\r\n            //if we are not in deficit we dont need to do flash loan\r\n            while(position >0){\r\n\r\n                position = position.sub(_noFlashLoan(position, true));\r\n                i++;\r\n\r\n                //A limit set so we don't run out of gas\r\n                if(i >= 5){\r\n                    notAll= true;\r\n                    break;\r\n               }\r\n            }\r\n        }\r\n        \r\n        //now withdraw\r\n        //if we want too much we just take max\r\n\r\n        //This part makes sure our withdrawal does not force us into liquidation        \r\n        (uint depositBalance ,uint borrowBalance) = getCurrentPosition();\r\n        uint AmountNeeded = borrowBalance.mul(1e18).div(collateralTarget);\r\n        if(depositBalance.sub(AmountNeeded) < _amount){\r\n            cDAI.redeemUnderlying(depositBalance.sub(AmountNeeded));\r\n        }else{\r\n            cDAI.redeemUnderlying(_amount);\r\n        }\r\n\r\n        //let's sell some comp if we have more than needed\r\n        //flash loan would have sent us comp if we had some accrued so we don't need to call claim comp\r\n        _disposeOfComp();\r\n    }\r\n\r\n    /***********\r\n    *  This is the main logic for calculating how to change our lends and borrows\r\n    *  Input: balance. The net amount we are going to deposit/withdraw.\r\n    *  Input: dep. Is it a deposit or withdrawal\r\n    *  Output: position. The amount we want to change our current borrow position.                   \r\n    *  Output: deficit. True if we are reducing position size\r\n    *\r\n    *  For instance deficit =false, position 100 means increase borrowed balance by 100\r\n    ****** */\r\n    function _calculateDesiredPosition(uint256 balance, bool dep) internal returns (uint256 position, bool deficit) {\r\n\r\n        //we want to use statechanging for safety\r\n        (uint deposits, uint borrows) = getLivePosition();\r\n\r\n        //When we unwind we end up with the difference between borrow and supply\r\n        uint unwoundDeposit = deposits.sub(borrows);\r\n\r\n        //we want to see how close to collateral target we are. \r\n        //So we take our unwound deposits and add or remove the balance we are are adding/removing.\r\n        //This gives us our desired future undwoundDeposit (desired supply)\r\n\r\n        uint desiredSupply = 0;\r\n        if(dep){\r\n            desiredSupply = unwoundDeposit.add(balance);\r\n        }else{\r\n            desiredSupply = unwoundDeposit.sub(balance);            \r\n        }\r\n\r\n        //(ds *c)/(1-c)\r\n        uint num = desiredSupply.mul(collateralTarget);\r\n        uint den = uint256(1e18).sub(collateralTarget);\r\n\r\n        uint desiredBorrow = num.div(den);\r\n        if(desiredBorrow > 1e18 ){\r\n            //stop us going right up to the wire\r\n            desiredBorrow = desiredBorrow - 1e18;\r\n        }\r\n\r\n        //now we see if we want to add or remove balance\r\n        // if the desired borrow is less than our current borrow we are in deficit. so we want to reduce position\r\n        if(desiredBorrow < borrows){\r\n            deficit = true;\r\n            position = borrows - desiredBorrow; //safemath check done in if statement\r\n\r\n        }else{\r\n            //otherwise we want to increase position\r\n            deficit = false;\r\n            position = desiredBorrow - borrows;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amount`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amount) internal override {\r\n\r\n        uint256 _balance = want.balanceOf(address(this));\r\n        \r\n        if(netBalanceLent().add(_balance) < _amount){\r\n            //if we cant afford to withdraw we take all we can\r\n            //withdraw all we can\r\n            exitPosition();\r\n        }else{\r\n\r\n            if (_balance < _amount) {\r\n                require(!_withdrawSome(_amount.sub(_balance), true), \"DelevFirst\");\r\n            }\r\n        }\r\n    }\r\n\r\n     function _claimComp() internal {\r\n      \r\n        CTokenI[] memory tokens = new CTokenI[](1);\r\n        tokens[0] =  cDAI;\r\n\r\n        compound.claimComp(address(this), tokens);\r\n    }\r\n\r\n    //sell comp function\r\n    function _disposeOfComp() internal {\r\n\r\n        uint256 _comp = IERC20(comp).balanceOf(address(this));\r\n        \r\n        if (_comp > minCompToSell) {\r\n\r\n            address[] memory path = new address[](3);\r\n            path[0] = comp;\r\n            path[1] = weth;\r\n            path[2] = DAI;\r\n\r\n            IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(_comp, uint256(0), path, address(this), now);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed. \r\n     */\r\n    function exitPosition() internal override {\r\n\r\n        //we dont use getCurrentPosition() because it won't be exact\r\n        (uint deposits, uint borrows) = getLivePosition();\r\n        _withdrawSome(deposits.sub(borrows), true);\r\n\r\n    }\r\n\r\n    //lets leave\r\n    function prepareMigration(address _newStrategy) internal override{\r\n        exitPosition();\r\n       \r\n        (, , uint borrowBalance,) = cDAI.getAccountSnapshot(address(this));\r\n\r\n        require(borrowBalance ==0, \"DELEVERAGE_FIRST\");\r\n\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n\r\n        cDAI.transfer(_newStrategy, cDAI.balanceOf(address(this)));\r\n        \r\n        IERC20 _comp = IERC20(comp);\r\n        _comp.safeTransfer(_newStrategy, _comp.balanceOf(address(this)));\r\n\r\n    }\r\n\r\n    //Three functions covering normal leverage and deleverage situations\r\n    // max is the max amount we want to increase our borrowed balance\r\n    // returns the amount we actually did\r\n    function _noFlashLoan(uint256 max, bool deficit) internal returns (uint256 amount){\r\n\r\n        //we can use non-state changing because this function is always called after _calculateDesiredPosition\r\n        (uint lent, uint borrowed) = getCurrentPosition();\r\n       \r\n        if(borrowed == 0){\r\n             return 0;\r\n         }\r\n\r\n        (, uint collateralFactorMantissa,) = compound.markets(address(cDAI));\r\n\r\n        if(deficit){\r\n           amount = _normalDeleverage(max, lent, borrowed, collateralFactorMantissa);\r\n        }else{\r\n           amount = _normalLeverage(max, lent, borrowed, collateralFactorMantissa);\r\n        }\r\n\r\n        emit Leverage(max, amount, deficit,  address(0));\r\n    }\r\n\r\n    //maxDeleverage is how much we want to reduce by\r\n    function _normalDeleverage(uint256 maxDeleverage, uint lent, uint borrowed, uint collatRatio) internal returns (uint256 deleveragedAmount) {\r\n\r\n        uint theoreticalLent = borrowed.mul(1e18).div(collatRatio);\r\n\r\n        deleveragedAmount = lent.sub(theoreticalLent);\r\n        \r\n        if(deleveragedAmount >= borrowed){\r\n            deleveragedAmount = borrowed;\r\n        }\r\n        if(deleveragedAmount >= maxDeleverage){\r\n            deleveragedAmount = maxDeleverage;\r\n        }\r\n\r\n        cDAI.redeemUnderlying(deleveragedAmount);\r\n        \r\n        //our borrow has been increased by no more than maxDeleverage\r\n        cDAI.repayBorrow(deleveragedAmount);\r\n    }\r\n\r\n    //maxDeleverage is how much we want to increase by\r\n    function _normalLeverage(uint256 maxLeverage, uint lent, uint borrowed, uint collatRatio) internal returns (uint256 leveragedAmount){\r\n\r\n        uint theoreticalBorrow = lent.mul(collatRatio).div(1e18);\r\n\r\n        leveragedAmount = theoreticalBorrow.sub(borrowed);\r\n\r\n        if(leveragedAmount >= maxLeverage){\r\n            leveragedAmount = maxLeverage;\r\n        }\r\n\r\n        cDAI.borrow(leveragedAmount);\r\n        cDAI.mint(want.balanceOf(address(this)));\r\n\r\n    }\r\n\r\n    //called by flash loan\r\n    function _loanLogic(bool deficit, uint256 amount, uint256 repayAmount) internal {\r\n        uint bal = want.balanceOf(address(this));\r\n        require(bal >= amount, \"FLASH_FAILED\"); // to stop malicious calls\r\n\r\n        //if in deficit we repay amount and then withdraw\r\n        if(deficit) {\r\n           \r\n\r\n            cDAI.repayBorrow(amount);\r\n\r\n            //if we are withdrawing we take more to cover fee\r\n            cDAI.redeemUnderlying(repayAmount);\r\n        } else {   \r\n      \r\n            require(cDAI.mint(bal) == 0, \"mint error\");\r\n\r\n            //borrow more to cover fee\r\n            // fee is so low for dydx that it does not effect our liquidation risk. \r\n            //DONT USE FOR AAVE\r\n            cDAI.borrow(repayAmount);\r\n\r\n        }\r\n    }\r\n\r\n   function protectedTokens() internal override view returns (address[] memory) {\r\n        address[] memory protected = new address[](3);\r\n        protected[0] = address(want);\r\n        protected[1] = comp;\r\n        protected[2] = address(cDAI);\r\n        return protected;\r\n    }\r\n\r\n    /******************\r\n    * Flash loan stuff\r\n    ****************/\r\n\r\n    // Flash loan DXDY\r\n    // amount desired is how much we are willing for position to change\r\n    function doDyDxFlashLoan(bool deficit, uint256 amountDesired) internal returns (uint256) {\r\n\r\n        uint amount = amountDesired;\r\n        ISoloMargin solo = ISoloMargin(SOLO);\r\n        uint256 marketId = _getMarketIdFromTokenAddress(SOLO, address(want));\r\n\r\n        // Not enough DAI in DyDx. So we take all we can\r\n        uint amountInSolo = want.balanceOf(SOLO);\r\n  \r\n        if(amountInSolo < amount)\r\n        {\r\n            amount = amountInSolo;\r\n        }\r\n\r\n        uint256 repayAmount = _getRepaymentAmountInternal(amount);\r\n\r\n        bytes memory data = abi.encode(deficit, amount, repayAmount);\r\n\r\n        // 1. Withdraw $\r\n        // 2. Call callFunction(...)\r\n        // 3. Deposit back $\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, amount);\r\n        operations[1] = _getCallAction(\r\n            // Encode custom data for callFunction\r\n            data\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        solo.operate(accountInfos, operations);\r\n\r\n        emit Leverage(amountDesired, amount, deficit, SOLO);\r\n\r\n        return amount;\r\n     }\r\n\r\n    //returns our current collateralisation ratio. Should be compared with collateralTarget\r\n     function storedCollateralisation() public view returns (uint256 collat){\r\n          ( uint256 lend, uint256 borrow) = getCurrentPosition();\r\n        if(lend == 0){\r\n            return 0;\r\n        }\r\n         collat = uint(1e18).mul(borrow).div(lend);\r\n     }\r\n\r\n    //DyDx calls this function after doing flash loan\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public override {\r\n        \r\n        (bool deficit, uint256 amount, uint repayAmount) = abi.decode(data,(bool, uint256, uint256));\r\n\r\n        _loanLogic(deficit, amount, repayAmount);\r\n    }\r\n\r\n    function doAaveFlashLoan (\r\n        bool deficit,\r\n        uint256 _flashBackUpAmount\r\n    )   public returns (uint256 amount)\r\n    {\r\n        //we do not want to do aave flash loans for leveraging up. Fee could put us into liquidation\r\n        if(!deficit){\r\n            return _flashBackUpAmount;\r\n        }\r\n\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n\r\n        uint256 availableLiquidity = want.balanceOf(address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3));\r\n\r\n        if(availableLiquidity < _flashBackUpAmount) {\r\n            amount = availableLiquidity;\r\n        }else{\r\n            amount = _flashBackUpAmount;\r\n        }\r\n        \r\n        require(amount <= _flashBackUpAmount); // dev: \"incorrect amount\"\r\n\r\n        bytes memory data = abi.encode(deficit, amount);\r\n       \r\n        lendingPool.flashLoan(\r\n                        address(this), \r\n                        address(want), \r\n                        amount, \r\n                        data);\r\n\r\n        emit Leverage(_flashBackUpAmount, amount, deficit, AAVE_LENDING);\r\n\r\n    }\r\n\r\n    //Aave calls this function after doing flash loan\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    )\r\n        external\r\n        override\r\n    {\r\n        (bool deficit, uint256 amount) = abi.decode(_params,(bool, uint256));\r\n\r\n        _loanLogic(deficit, amount, amount.add(_fee));\r\n\r\n        // return the flash loan plus Aave's flash loan fee back to the lending pool\r\n        uint totalDebt = _amount.add(_fee);\r\n        transferFundsBackToPoolInternal(_reserve, totalDebt);\r\n    }\r\n\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lifetimeEarned\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deficit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashLoan\",\"type\":\"address\"}],\"name\":\"Leverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AaveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DyDxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksToLiquidationDangerZone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDAI\",\"outputs\":[{\"internalType\":\"contract CErc20I\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"contract ComptrollerI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDyDx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"deficit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_flashBackUpAmount\",\"type\":\"uint256\"}],\"name\":\"doAaveFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDyDx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCompValInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLivePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getblocksUntilLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCompToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netBalanceLent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictCompAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralTarget\",\"type\":\"uint256\"}],\"name\":\"setCollateralTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFactor\",\"type\":\"uint256\"}],\"name\":\"setGasFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCompToSell\",\"type\":\"uint256\"}],\"name\":\"setMinCompToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedCollateralisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"YearnDaiCompStratV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009b142c2cdab89941e9dcd0b6c1cf6dea378a8d7c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9bca648a18333a5590080a567b20dee0690771c5cceb79df191265476e02ec0"}]}