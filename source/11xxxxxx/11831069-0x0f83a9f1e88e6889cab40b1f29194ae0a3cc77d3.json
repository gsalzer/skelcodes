{"status":"1","message":"OK","result":[{"SourceCode":"{\"IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s Comptroller\\r\\n */\\r\\ninterface IComptroller {\\r\\n    function claimComp(address holder) external;\\r\\n}\"},\"ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ICToken\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev A simplified interface for Compound\\u0027s cToken\\r\\n */\\r\\ninterface ICToken is IERC20 {\\r\\n    function exchangeRateStored() external view returns (uint);\\r\\n    function accrueInterest() external returns (uint);\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function comptroller() external view returns (address);\\r\\n}\"},\"IdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"Initializable.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\nimport \\\"IIdeaToken.sol\\\";\\r\\nimport \\\"IIdeaTokenNameVerifier.sol\\\";\\r\\nimport \\\"MinimalProxy.sol\\\";\\r\\n/**\\r\\n * @title IdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Manages the creation of markets and IdeaTokens\\r\\n * Sits behind an AdminUpgradabilityProxy\\r\\n */\\r\\ncontract IdeaTokenFactory is IIdeaTokenFactory, Initializable, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Contains details for each market\\r\\n    struct MarketInfo {\\r\\n        mapping(uint =\\u003e TokenInfo) tokens;\\r\\n        mapping(string =\\u003e uint) tokenIDs;\\r\\n        mapping(string =\\u003e bool) tokenNameUsed;\\r\\n\\r\\n        MarketDetails marketDetails;\\r\\n    }\\r\\n\\r\\n    uint constant FEE_SCALE = 10000;\\r\\n\\r\\n    // Address of the IdeaTokenExchange contract\\r\\n    // This is needed to transfer ownership of a newly created IdeaToken to the IdeaTokenExchange\\r\\n    address _ideaTokenExchange;\\r\\n\\r\\n    // Address of the IdeaToken logic contract\\r\\n    address _ideaTokenLogic;\\r\\n\\r\\n    // IdeaTokenAddress =\\u003e IDPair. Stores an IDPair (marketID, tokenID) for an IdeaToken\\r\\n    mapping(address =\\u003e IDPair) _tokenIDPairs;\\r\\n\\r\\n    // marketID =\\u003e MarketInfo. Stores information for a market\\r\\n    mapping(uint =\\u003e MarketInfo) _markets;\\r\\n    // market name =\\u003e marketID. Translates market names to market IDs.\\r\\n    mapping(string =\\u003e uint) _marketIDs;\\r\\n    // The amount of existing markets.\\r\\n    uint _numMarkets;\\r\\n\\r\\n    event NewMarket(uint id,\\r\\n                    string name,\\r\\n                    uint baseCost,\\r\\n                    uint priceRise,\\r\\n                    uint hatchTokens,\\r\\n                    uint tradingFeeRate,\\r\\n                    uint platformFeeRate,\\r\\n                    bool allInterestToPlatform,\\r\\n                    address nameVerifier);\\r\\n\\r\\n    event NewToken(uint id, uint marketID, string name, address addr, address lister);\\r\\n    event NewTradingFee(uint marketID, uint tradingFeeRate);\\r\\n    event NewPlatformFee(uint marketID, uint platformFeeRate);\\r\\n    event NewNameVerifier(uint marketID, address nameVerifier);\\r\\n\\r\\n    /**\\r\\n     * Initializes the contract with all required values\\r\\n     *\\r\\n     * @param owner The owner of the contract\\r\\n     */\\r\\n    function initialize(address owner, address ideaTokenExchange, address ideaTokenLogic) external initializer {\\r\\n        require(ideaTokenExchange != address(0) \\u0026\\u0026 ideaTokenLogic != address(0), \\\"invalid-params\\\");\\r\\n\\r\\n        setOwnerInternal(owner); // Checks owner to be non-zero\\r\\n        _ideaTokenExchange = ideaTokenExchange;\\r\\n        _ideaTokenLogic = ideaTokenLogic;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketName The name of the market\\r\\n     * @param nameVerifier The address of the name verifier\\r\\n     * @param baseCost: The initial cost in Dai per IdeaToken in the first interval\\r\\n     * @param priceRise: The price rise in Dai per IdeaToken per completed interval\\r\\n     * @param hatchTokens: The amount of IdeaTokens for which the price does not change initially\\r\\n     * @param tradingFeeRate: The trading fee rate\\r\\n     * @param platformFeeRate: The platform fee rate\\r\\n     * @param allInterestToPlatform: If true, all interest goes to the platform instead of the token owner\\r\\n     */\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external override onlyOwner {\\r\\n        require(_marketIDs[marketName] == 0, \\\"market-exists\\\");\\r\\n\\r\\n        require(nameVerifier != address(0) \\u0026\\u0026\\r\\n                baseCost \\u003e 0 \\u0026\\u0026\\r\\n                tradingFeeRate.add(platformFeeRate) \\u003c= FEE_SCALE,\\r\\n                \\\"invalid-params\\\");\\r\\n\\r\\n        uint marketID = ++_numMarkets;\\r\\n\\r\\n        MarketInfo memory marketInfo = MarketInfo({\\r\\n            marketDetails: MarketDetails({\\r\\n                exists: true,\\r\\n                id: marketID,\\r\\n                name: marketName,\\r\\n                nameVerifier: IIdeaTokenNameVerifier(nameVerifier),\\r\\n                numTokens: 0,\\r\\n                baseCost: baseCost,\\r\\n                priceRise: priceRise,\\r\\n                hatchTokens: hatchTokens,\\r\\n                tradingFeeRate: tradingFeeRate,\\r\\n                platformFeeRate: platformFeeRate,\\r\\n                allInterestToPlatform: allInterestToPlatform\\r\\n            })\\r\\n        });\\r\\n\\r\\n        _markets[marketID] = marketInfo;\\r\\n        _marketIDs[marketName] = marketID;\\r\\n\\r\\n        emitNewMarketEvent(marketInfo.marketDetails);\\r\\n    }\\r\\n\\r\\n    /// Stack too deep if we do it directly in `addMarket`\\r\\n    function emitNewMarketEvent(MarketDetails memory marketDetails) internal {\\r\\n        emit NewMarket(marketDetails.id,\\r\\n                       marketDetails.name,\\r\\n                       marketDetails.baseCost,\\r\\n                       marketDetails.priceRise,\\r\\n                       marketDetails.hatchTokens,\\r\\n                       marketDetails.tradingFeeRate,\\r\\n                       marketDetails.platformFeeRate,\\r\\n                       marketDetails.allInterestToPlatform,\\r\\n                       address(marketDetails.nameVerifier));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new IdeaToken using MinimalProxy\\r\\n     *\\r\\n     * @param tokenName The name of the token\\r\\n     * @param marketID The ID of the market\\r\\n     * @param lister The address of the account which off-chain software shall see as lister of this token. Only emitted, not stored\\r\\n     */\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external override {\\r\\n        MarketInfo storage marketInfo = _markets[marketID];\\r\\n        require(marketInfo.marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(isValidTokenName(tokenName, marketID), \\\"invalid-name\\\");\\r\\n\\r\\n        IIdeaToken ideaToken = IIdeaToken(address(new MinimalProxy(_ideaTokenLogic)));\\r\\n        ideaToken.initialize(string(abi.encodePacked(marketInfo.marketDetails.name, \\\": \\\", tokenName)), _ideaTokenExchange);\\r\\n\\r\\n        uint tokenID = ++marketInfo.marketDetails.numTokens;\\r\\n        TokenInfo memory tokenInfo = TokenInfo({\\r\\n            exists: true,\\r\\n            id: tokenID,\\r\\n            name: tokenName,\\r\\n            ideaToken: ideaToken\\r\\n        });\\r\\n\\r\\n        marketInfo.tokens[tokenID] = tokenInfo;\\r\\n        marketInfo.tokenIDs[tokenName] = tokenID;\\r\\n        marketInfo.tokenNameUsed[tokenName] = true;\\r\\n        _tokenIDPairs[address(ideaToken)] = IDPair({\\r\\n            exists: true,\\r\\n            marketID: marketID,\\r\\n            tokenID: tokenID\\r\\n        });\\r\\n\\r\\n        emit NewToken(tokenID, marketID, tokenName, address(ideaToken), lister);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Checks whether a token name is allowed and not used already\\r\\n     *\\r\\n     * @param tokenName The intended token name\\r\\n     * @param marketID The market on which the token is to be listed\\r\\n     *\\r\\n     * @return True if the name is allowed, false otherwise\\r\\n     */\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) public view override returns (bool) {\\r\\n\\r\\n        MarketInfo storage marketInfo = _markets[marketID];\\r\\n        MarketDetails storage marketDetails = marketInfo.marketDetails;\\r\\n\\r\\n        if(marketInfo.tokenNameUsed[tokenName] || !marketDetails.nameVerifier.verifyTokenName(tokenName)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market id by the market name\\r\\n     *\\r\\n     * @param marketName The market name\\r\\n     *\\r\\n     * @return The market id\\r\\n     */\\r\\n    function getMarketIDByName(string calldata marketName) external view override returns (uint) {\\r\\n        return _marketIDs[marketName];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market details by the market id\\r\\n     *\\r\\n     * @param marketID The market id\\r\\n     *\\r\\n     * @return The market details\\r\\n     */\\r\\n    function getMarketDetailsByID(uint marketID) external view override returns (MarketDetails memory) {\\r\\n        return _markets[marketID].marketDetails;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the market details by the market name\\r\\n     *\\r\\n     * @param marketName The market name\\r\\n     *\\r\\n     * @return The market details\\r\\n     */\\r\\n    function getMarketDetailsByName(string calldata marketName) external view override returns (MarketDetails memory) {\\r\\n        return _markets[_marketIDs[marketName]].marketDetails;\\r\\n    }\\r\\n\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view override returns (MarketDetails memory) {\\r\\n        return _markets[_tokenIDPairs[ideaToken].marketID].marketDetails;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the amount of existing markets\\r\\n     *\\r\\n     * @return The amount of existing markets\\r\\n     */\\r\\n    function getNumMarkets() external view override  returns (uint) {\\r\\n        return _numMarkets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token id by the token name and market id\\r\\n     *\\r\\n     * @param tokenName The token name\\r\\n     * @param marketID The market id\\r\\n     *\\r\\n     * @return The token id\\r\\n     */\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view override returns (uint) {\\r\\n        return _markets[marketID].tokenIDs[tokenName];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token info by the token id and market id\\r\\n     *\\r\\n     * @param marketID The market id\\r\\n     * @param tokenID The token id\\r\\n     *\\r\\n     * @return The token info\\r\\n     */\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view override returns (TokenInfo memory) {\\r\\n        return _markets[marketID].tokens[tokenID];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the token id pair by the tokens address\\r\\n     *\\r\\n     * @param token The tokens address\\r\\n     *\\r\\n     * @return The token id pair\\r\\n     */\\r\\n    function getTokenIDPair(address token) external view override returns (IDPair memory) {\\r\\n        return _tokenIDPairs[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the trading fee for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The market id for which to set the trading fee\\r\\n     * @param tradingFeeRate The trading fee\\r\\n     */\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external override onlyOwner {\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(marketDetails.platformFeeRate.add(tradingFeeRate) \\u003c= FEE_SCALE, \\\"invalid-fees\\\");\\r\\n        marketDetails.tradingFeeRate = tradingFeeRate;\\r\\n        \\r\\n        emit NewTradingFee(marketID, tradingFeeRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the platform fee for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The market id for which to set the platform fee\\r\\n     * @param platformFeeRate The platform fee\\r\\n     */\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external override onlyOwner {\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        require(marketDetails.tradingFeeRate.add(platformFeeRate) \\u003c= FEE_SCALE, \\\"invalid-fees\\\");\\r\\n        marketDetails.platformFeeRate = platformFeeRate;\\r\\n\\r\\n        emit NewPlatformFee(marketID, platformFeeRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Changes the address of the name verifier for a market\\r\\n     * May only be called by the owner\\r\\n     *\\r\\n     * @param marketID The marketID for which to change the name verifier\\r\\n     * @param nameVerifier The new name verifier address\\r\\n     */\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external override onlyOwner {\\r\\n        require(nameVerifier != address(0), \\\"zero-verifier\\\");\\r\\n\\r\\n        MarketDetails storage marketDetails = _markets[marketID].marketDetails;\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        marketDetails.nameVerifier = IIdeaTokenNameVerifier(nameVerifier);\\r\\n\\r\\n        emit NewNameVerifier(marketID, nameVerifier);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IIdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaToken is IERC20 {\\r\\n    function initialize(string calldata __name, address owner) external;\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\"},\"IIdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct CostAndPriceAmounts {\\r\\n    uint total;\\r\\n    uint raw;\\r\\n    uint tradingFee;\\r\\n    uint platformFee;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenExchange {\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external;\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external;\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function setTokenOwner(address ideaToken, address owner) external;\\r\\n    function setPlatformOwner(uint marketID, address owner) external;\\r\\n    function withdrawTradingFee() external;\\r\\n    function withdrawTokenInterest(address token) external;\\r\\n    function withdrawPlatformInterest(uint marketID) external;\\r\\n    function withdrawPlatformFee(uint marketID) external;\\r\\n    function getInterestPayable(address token) external view returns (uint);\\r\\n    function getPlatformInterestPayable(uint marketID) external view returns (uint);\\r\\n    function getPlatformFeePayable(uint marketID) external view returns (uint);\\r\\n    function getTradingFeePayable() external view returns (uint);\\r\\n    function setAuthorizer(address authorizer) external;\\r\\n    function isTokenFeeDisabled(address ideaToken) external view returns (bool);\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external;\\r\\n}\"},\"IIdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"IIdeaTokenNameVerifier.sol\\\";\\r\\nimport \\\"IIdeaToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct IDPair {\\r\\n    bool exists;\\r\\n    uint marketID;\\r\\n    uint tokenID;\\r\\n}\\r\\n\\r\\nstruct TokenInfo {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n    IIdeaToken ideaToken;\\r\\n}\\r\\n\\r\\nstruct MarketDetails {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n\\r\\n    IIdeaTokenNameVerifier nameVerifier;\\r\\n    uint numTokens;\\r\\n\\r\\n    uint baseCost;\\r\\n    uint priceRise;\\r\\n    uint hatchTokens;\\r\\n    uint tradingFeeRate;\\r\\n    uint platformFeeRate;\\r\\n\\r\\n    bool allInterestToPlatform;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenFactory {\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external;\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external;\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) external view returns (bool);\\r\\n    function getMarketIDByName(string calldata marketName) external view returns (uint);\\r\\n    function getMarketDetailsByID(uint marketID) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByName(string calldata marketName) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view returns (MarketDetails memory);\\r\\n    function getNumMarkets() external view returns (uint);\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view returns (uint);\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view returns (TokenInfo memory);\\r\\n    function getTokenIDPair(address token) external view returns (IDPair memory);\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external;\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external;\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external;\\r\\n}\"},\"IIdeaTokenNameVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenNameVerifier\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Interface for token name verifiers\\r\\n */\\r\\ninterface IIdeaTokenNameVerifier {\\r\\n    function verifyTokenName(string calldata name) external pure returns (bool);\\r\\n}\"},\"IInterestManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IInterestManager\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IInterestManager {\\r\\n    function invest(uint amount) external returns (uint);\\r\\n    function redeem(address recipient, uint amount) external returns (uint);\\r\\n    function redeemInvestmentToken(address recipient, uint amount) external returns (uint);\\r\\n    function donateInterest(uint amount) external;\\r\\n    function redeemDonated(uint amount) external;\\r\\n    function accrueInterest() external;\\r\\n    function underlyingToInvestmentToken(uint underlyingAmount) external view returns (uint);\\r\\n    function investmentTokenToUnderlying(uint investmentTokenAmount) external view returns (uint);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"already-initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"MinimalProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title MinimalProxy\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Minimal proxy contract which delegates to an implementation\\r\\n */\\r\\ncontract MinimalProxy {\\r\\n    // Implementation address storage slot\\r\\n    bytes32 constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\r\\n\\r\\n    /**\\r\\n     * Constructs a new proxy which delegates to the implementation address\\r\\n     */\\r\\n    constructor(address implementation) public {\\r\\n        require(implementation != address(0), \\\"invalid-params\\\");\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n            sstore(slot, implementation)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Every call is delegated to the implementation\\r\\n     */\\r\\n    fallback() payable external {\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n          calldatacopy(0, 0, calldatasize())\\r\\n          let result := delegatecall(gas(), sload(slot), 0, calldatasize(), 0, 0)\\r\\n          returndatacopy(0, 0, returndatasize())\\r\\n    \\r\\n          switch result\\r\\n          case 0 { revert(0, returndatasize()) }\\r\\n          default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev Implements only-owner functionality\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address _owner;\\r\\n\\r\\n    event OwnershipChanged(address oldOwner, address newOwner);\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(_owner == msg.sender, \\\"only-owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        setOwnerInternal(newOwner);\\r\\n    }\\r\\n\\r\\n    function setOwnerInternal(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n\\r\\n        emit OwnershipChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"NewNameVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"NewPlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"}],\"name\":\"NewTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getMarketDetailsByID\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"getMarketDetailsByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"}],\"name\":\"getMarketDetailsByTokenAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"getMarketIDByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getTokenIDByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIDPair\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"internalType\":\"struct IDPair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaToken\",\"name\":\"ideaToken\",\"type\":\"address\"}],\"internalType\":\"struct TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ideaTokenExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ideaTokenLogic\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"isValidTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nameVerifier\",\"type\":\"address\"}],\"name\":\"setNameVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdeaTokenFactory","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7a3d66318b080b4f76407bc1e5c12c9b9e2dbb740c185ffe2ac241c67aed5ed"}]}