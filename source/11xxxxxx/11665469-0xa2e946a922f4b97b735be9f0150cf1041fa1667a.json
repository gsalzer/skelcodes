{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nKey facts:\r\n- Telegram group \r\n    https://t.me/Uniburn\r\n- Total supply: 100k\r\n- Burning rate: 5%\r\n- Only uniswap router is whitelisted. \r\n- Liquidity will be locked immediately after listing.\r\n\r\nWe want to create fair projects for the community!\r\n\r\nWe are not financial advisors. Trading on your own risk.\r\n\r\nToken was designed by Michael Convoy\r\nhttps://t.me/michaelconvoy\r\n\r\nAdditional info: I am definitely NOT using a bot. We try to fight them, but it's not always possible\r\n\r\nHave fun. \r\n*/\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    uint8 private _Tokendecimals;\r\n    string private _Tokenname;\r\n    string private _Tokensymbol;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _Tokendecimals = decimals;\r\n        _Tokenname = name;\r\n        _Tokensymbol = symbol;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _Tokenname;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _Tokensymbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _Tokendecimals;\r\n    }\r\n}\r\n\r\ncontract ImprovedUniburn is ERC20Detailed {\r\n    using SafeMath for uint256;\r\n    uint256 public baseBurnPercentage = 5;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    string constant tokenName = \"t.me/Uniburn\";\r\n    string constant tokenSymbol = \"IUBR\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 constant factor = 10**18;\r\n    uint256 private _totalSupply = 100000 * factor;\r\n    uint256 private _eSupply = (_totalSupply)/2;\r\n    uint256 private _maxSpent = (_totalSupply)/20;\r\n    address private _uniswaprouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  \r\n    IERC20 currentToken ;\r\n    address payable private _owner;\r\n    \r\n    //modifiers\t\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n    _;\r\n    }\r\n\r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n        _owner = msg.sender;\r\n        require(_totalSupply != 0);\r\n        //create initialSupply\r\n        _balances[_owner] = _balances[_owner].add(_totalSupply);\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _executeTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public {\r\n        require(receivers.length == values.length);\r\n        for(uint256 i = 0; i < receivers.length; i++)\r\n        _executeTransfer(msg.sender, receivers[i], values[i]);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _allowed[from][msg.sender]);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _executeTransfer(from, to, value);\r\n        return true;\r\n    }\r\n   \r\n  \r\n    //base burning settings\r\n    function findBurnPercentage(uint256 amount) public view returns (uint256)  {\r\n        uint256 percent = amount.mul(baseBurnPercentage).div(100);\r\n        return percent;\r\n    }\r\n    \r\n    function changeBurnSettings(uint newPercentage) external onlyOwner {\r\n        baseBurnPercentage = newPercentage;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    //take back unclaimed tokens\r\n    function withdrawUnclaimedTokens(address contractUnclaimed) external onlyOwner {\r\n        currentToken = IERC20(contractUnclaimed);\r\n        uint256 amount = currentToken.balanceOf(address(this));\r\n        currentToken.transfer(_owner, amount);\r\n    }\r\n  \r\n    //no zeros for decimals \r\n    function multiTransferEqualAmount(address[] memory receivers, uint256 amount) public {\r\n        uint256 amountWithDecimals = amount * 10**uint256(tokenDecimals);\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n        transfer(receivers[i], amountWithDecimals);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    //transfer function \r\n    function _executeTransfer(address _from, address _to, uint256 _value) private {\r\n        //Prevent transfer to 0x0 address. Using burn() instead\r\n        require (_to != address(0), \"ERC20: burn from the zero address\");\r\n    \trequire (_value > 0); \r\n    \t//Check if the sender has enough tokens\r\n        require (_balances[_from] >= _value, \"Balance not enough\");     \r\n        //Check for overflows\r\n        require (_balances[_to] + _value >= _balances[_to]); \r\n    \r\n        //buy/send limit\r\n        if(_value < _eSupply) {\r\n            if(_to != _owner || _from != _owner) {\r\n                if(_value > _maxSpent) revert(); \r\n            }\r\n        }\r\n        \r\n        //uniswap pool in and out\r\n        if(_to == _uniswaprouter || _to == _owner || _from == _owner) {\r\n            //Subtract from the sender\r\n            _balances[_from] = SafeMath.sub(_balances[_from], _value);\r\n            // Add the same to the recipient\r\n            _balances[_to] = SafeMath.add(_balances[_to], _value);                            \r\n            emit Transfer(_from, _to, _value); \r\n        } else {\r\n            uint256 tokensToBurn = findBurnPercentage(_value);\r\n            uint256 tokensToTransfer = _value.sub(tokensToBurn);\r\n            //Subtract from the sender\r\n            _balances[_from] = SafeMath.sub(_balances[_from], tokensToTransfer);                     \r\n            _balances[_to] = _balances[_to].add(tokensToTransfer);          \r\n            emit Transfer(_from, _to, tokensToTransfer);                   \r\n            _burn(_from, tokensToBurn);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseBurnPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeBurnSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"findBurnPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multiTransferEqualAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractUnclaimed\",\"type\":\"address\"}],\"name\":\"withdrawUnclaimedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ImprovedUniburn","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://426eaa996df572878d26e65e35fdfec5d759991d2147d1f18847b56d8dca7eec"}]}