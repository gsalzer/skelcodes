{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nimport \\\"./Latinum.sol\\\";\\nimport \\\"./Dilithium.sol\\\";\\nimport \\\"./libraries/math/Math.sol\\\";\\n\\n/// Claim represents a bidder's claim to a bidding\\n/// period Latinum supply.\\nstruct Claim {\\n    uint256 period;\\n    uint256 bid;\\n}\\n\\n/// @dev Period represents an auction period\\nstruct Period {\\n    uint256 endTime;\\n    uint256 ltnSupply;\\n    uint256 totalBids;\\n}\\n\\n/// @author The MakeOS Team\\n/// @title The contract that provides the Latinum dutch auction functionality.\\ncontract Auction is Latinum(address(0)) {\\n    // periods contain the auction periods\\n    Period[] public periods;\\n\\n    // claims store all bidders Latinum claims\\n    mapping(address => Claim[]) public claims;\\n\\n    // MAX_PERIODS is the maximum allowed periods\\n    uint256 public maxPeriods;\\n\\n    // numPeriods keeps count of the number of periods\\n    uint256 public numPeriods;\\n\\n    // ltnSupplyPerPeriod is the maximum amount of LTN distributed per auction.\\n    uint256 public ltnSupplyPerPeriod;\\n\\n    // minBid is the minimum bid\\n    uint256 public minBid;\\n\\n    // fee is the auction fee paid for each DIL in a bid.\\n    uint256 public fee;\\n\\n    // fundingAddress is the address where contract fund can be transfered to.\\n    address public fundingAddress;\\n\\n    // minReqDILSupply is the amount of DIL supply required to create the first period.\\n    uint256 public minReqDILSupply;\\n\\n    event NewPeriod(uint256 index, uint256 endTime);\\n    event NewBid(address addr, uint256 amount, uint256 periodIndex);\\n    event NewClaim(address addr, uint256 amount, uint256 index);\\n\\n    /// @dev isAuctionClosed is a modifier to check if the auction has closed.\\n    modifier isAuctionClosed() {\\n        require(\\n            periods.length < uint256(maxPeriods) ||\\n                periods[periods.length - 1].endTime > block.timestamp,\\n            \\\"Auction has closed\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev isBidAmountUnlocked is a modifier to check if a bidder has unlocked\\n    /// the bid amount\\n    modifier isBidAmountUnlocked(address bidder, uint256 bidAmt) {\\n        // Ensure the bidder has unlocked the bid amount\\n        uint256 allowance = dil.allowance(bidder, address(this));\\n        require(allowance >= bidAmt, \\\"Amount not unlocked\\\");\\n        _;\\n    }\\n\\n    /// @notice The constructor\\n    /// @param _dilAddress is the address of the Dilithium contract.\\n    /// @param _minReqDILSupply is minimum number of DIL supply required to start a\\n    //  bid period.\\n    /// @param _maxPeriods is the number of auction periods.\\n    /// @param _ltnSupplyPerPeriod is the supply of Latinum per period.\\n    /// @param _minBid is minimum bid per period.\\n    /// @param _fee is the auction fee\\n    constructor(\\n        address _dilAddress,\\n        uint256 _minReqDILSupply,\\n        uint256 _maxPeriods,\\n        uint256 _ltnSupplyPerPeriod,\\n        uint256 _minBid,\\n        address _fundingAddress,\\n        uint256 _fee\\n    ) public {\\n        dil = Dilithium(_dilAddress);\\n        minBid = _minBid;\\n        maxPeriods = _maxPeriods;\\n        ltnSupplyPerPeriod = _ltnSupplyPerPeriod;\\n        minReqDILSupply = _minReqDILSupply;\\n        fundingAddress = _fundingAddress;\\n        fee = _fee;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /// @dev setFee sets the auction fee.\\n    /// @param _fee is the new auction fee.\\n    function setFee(uint256 _fee) public isOwner() {\\n        fee = _fee;\\n    }\\n\\n    /// @dev setFundingAddress sets the funding address\\n    /// @param addr is the address to change to.\\n    function setFundingAddress(address addr) public isOwner() {\\n        fundingAddress = addr;\\n    }\\n\\n    /// @dev withdraw sends ETH to the funding address.\\n    /// @param amount is the amount to be withdrawn.\\n    function withdraw(uint256 amount) external {\\n        require(msg.sender == fundingAddress, \\\"Not authorized\\\");\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @notice makePeriod creates and returns a period. If the\\n    /// most recent period has not ended, it is returned instead\\n    /// of creating a new one.\\n    function makePeriod() public isAuctionClosed() returns (uint256) {\\n        require(\\n            periods.length > 0 || dil.totalSupply() >= minReqDILSupply,\\n            \\\"Minimum Dilithium supply not reached\\\"\\n        );\\n\\n        Period memory period;\\n        uint256 index;\\n\\n        // If no period, create one\\n        if (periods.length == 0) {\\n            period = Period(block.timestamp + 24 hours, ltnSupplyPerPeriod, 0);\\n            periods.push(period);\\n            index = periods.length - 1;\\n            numPeriods++;\\n            emit NewPeriod(index, period.endTime);\\n        }\\n\\n        // Get the current period\\n        if (period.endTime == 0 && periods.length > 0) {\\n            period = periods[periods.length - 1];\\n            index = periods.length - 1;\\n        }\\n\\n        // If period has ended, start a new one\\n        if (period.endTime <= block.timestamp) {\\n            period = Period(block.timestamp + 24 hours, ltnSupplyPerPeriod, 0);\\n            periods.push(period);\\n            index = periods.length - 1;\\n            numPeriods++;\\n            emit NewPeriod(index, period.endTime);\\n        }\\n\\n        return index;\\n    }\\n\\n    /// @dev updatePeriodTotalBids updates the total bid of a period.\\n    function updatePeriodTotalBids(uint256 idx, uint256 newBid) internal {\\n        periods[idx].totalBids = SM.add(periods[idx].totalBids, newBid);\\n    }\\n\\n    /// @notice bid lets an account place a bid.\\n    /// @param bidAmt is the amount of the DIL to be placed as bid. This amount\\n    /// must have been unlocked in the DIL contract.\\n    function bid(uint256 bidAmt)\\n        public\\n        payable\\n        isAuctionClosed()\\n        isBidAmountUnlocked(msg.sender, bidAmt)\\n        returns (bool)\\n    {\\n        require(getNumOfClaims() + 1 <= 5, \\\"Too many unprocessed claims\\\");\\n        uint256 index = makePeriod();\\n\\n        if (\\n            (index <= 6 && bidAmt < minBid) ||\\n            (index > 6 && bidAmt < minBid * 50)\\n        ) {\\n            revert(\\\"Bid amount too small\\\");\\n        }\\n\\n        if ((index <= 6 && bidAmt > minBid * 10)) {\\n            revert(\\\"Bid amount too high\\\");\\n        }\\n\\n        if (index > 6 && msg.value < (bidAmt / 1 ether) * fee) {\\n            revert(\\\"Auction fee too low\\\");\\n        }\\n\\n        // Burn the the bid amount\\n        dil.transferFrom(msg.sender, address(this), bidAmt);\\n        dil.burn(bidAmt);\\n\\n        // Increase the period's bid count\\n        updatePeriodTotalBids(index, bidAmt);\\n\\n        // Add a new claim\\n        claims[msg.sender].push(Claim(index, bidAmt));\\n\\n        emit NewBid(msg.sender, bidAmt, index);\\n\\n        return true;\\n    }\\n\\n    /// @dev getNumOfPeriods returns the number of periods.\\n    function getNumOfPeriods() public view returns (uint256) {\\n        return periods.length;\\n    }\\n\\n    /// @dev getNumOfClaims returns the number of claims the sender has.\\n    function getNumOfClaims() public view returns (uint256 n) {\\n        for (uint256 i = 0; i < claims[msg.sender].length; i++) {\\n            if (claims[msg.sender][i].bid > 0) {\\n                n++;\\n            }\\n        }\\n    }\\n\\n    /// @dev getNumOfClaimsOfAddr returns the number of an address.\\n    function getNumOfClaimsOfAddr(address addr)\\n        public\\n        view\\n        returns (uint256 n)\\n    {\\n        for (uint256 i = 0; i < claims[addr].length; i++) {\\n            if (claims[addr][i].bid > 0) {\\n                n++;\\n            }\\n        }\\n    }\\n\\n    /// @dev claim\\n    function claim() public {\\n        uint256 nClaims = claims[msg.sender].length;\\n        uint256 deleted = 0;\\n        for (uint256 i = 0; i < nClaims; i++) {\\n            Claim memory claim_ = claims[msg.sender][i];\\n            if (claim_.bid == 0) {\\n                deleted++;\\n                continue;\\n            }\\n\\n            // Skip claim in current, unexpired period\\n            Period memory period = periods[claim_.period];\\n            if (period.endTime > block.timestamp) {\\n                continue;\\n            }\\n\\n            // Delete claim\\n            delete claims[msg.sender][i];\\n            deleted++;\\n\\n            // Get base point for the claim\\n            uint256 bps = SM.getBPSOfAInB(claim_.bid, period.totalBids);\\n            uint256 ltnReward = (period.ltnSupply * bps) / 10000;\\n            _mint(msg.sender, ltnReward);\\n\\n            emit NewClaim(msg.sender, ltnReward, claim_.period);\\n        }\\n\\n        if (deleted == nClaims) {\\n            delete claims[msg.sender];\\n        }\\n    }\\n\\n    /// @dev transferUnallocated transfers unallocated Latinum supply to an\\n    /// account.\\n    /// @param to is the account to transfer to.\\n    /// @param amt is the amount to tranfer.\\n    function transferUnallocated(address to, uint256 amt) public isOwner() {\\n        require(\\n            periods.length == maxPeriods &&\\n                periods[periods.length - 1].endTime <= block.timestamp,\\n            \\\"Auction must end\\\"\\n        );\\n\\n        uint256 remaining = SM.sub(maxSupply, totalSupply());\\n        require(remaining >= amt, \\\"Insufficient remaining supply\\\");\\n        _mint(to, amt);\\n    }\\n\\n    /// @dev setMaxPeriods updates the number of auction periods.\\n    /// @param n is the new number of periods\\n    function setMaxPeriods(uint256 n) public isOwner() {\\n        maxPeriods = n;\\n    }\\n\\n    /// @dev setMinReqDILTotalSupply updates the required min DIL supply.\\n    /// @param n is the new value\\n    function setMinReqDILTotalSupply(uint256 n) public isOwner() {\\n        minReqDILSupply = n;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/Dilithium.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nimport \\\"./Owner.sol\\\";\\nimport \\\"./libraries/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Auction.sol\\\";\\nimport \\\"./libraries/math/Math.sol\\\";\\n\\n/// @dev Dilithium ERC20 contract\\ncontract Dilithium is ERC20(\\\"Dilithium\\\", \\\"DIL\\\"), Owner {\\n    /// @dev mint allocates new DIL supply to an account.\\n    /// @param account is the beneficiary.\\n    /// @param amount is the number of DIL to issue.\\n    function mint(address account, uint256 amount) public isOwner() {\\n        _mint(account, amount);\\n    }\\n\\n    /// @dev burn destroys the given amount of the sender's balance .\\n    /// @param amount is the number of DIL to destroy.\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/Latinum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nimport \\\"./Owner.sol\\\";\\nimport \\\"./Dilithium.sol\\\";\\nimport \\\"./libraries/token/ERC20/ERC20.sol\\\";\\n\\n/// @dev Latinum ERC20 contract\\ncontract Latinum is ERC20(\\\"Latinum\\\", \\\"LTN\\\"), Owner {\\n    Dilithium public dil;\\n\\n    // maxSupply is the initial maximum number of Latinum\\n    uint256 public maxSupply = 150000000000000000000000000;\\n\\n    /// @dev constructor.\\n    /// @dev dilAddr is the Dilithium token contract.\\n    constructor(address dilAddr) public {\\n        dil = Dilithium(dilAddr);\\n    }\\n\\n    /// @dev mint mints and allocates new Latinum to an account.\\n    /// @param account is the recipient account.\\n    /// @param amt is the amount of Latinum minted.\\n    function mint(address account, uint256 amt) public isOwner() {\\n        require(totalSupply() + amt <= maxSupply, \\\"Cannot exceed max supply\\\");\\n        _mint(account, amt);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\ncontract Owner {\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    // isOwner checks whether the sender is the owner\\n    modifier isOwner() {\\n        require(owner == msg.sender, \\\"Sender is not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev setOwner sets the owner\\n    ///\\n    /// Requires the caller to be the current owner.\\n    ///\\n    /// @param owner_ is the new owner.\\n    function setOwner(address owner_) public isOwner() {\\n        owner = owner_;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/libraries/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nlibrary SM {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    /// @dev getBPSOfAInB calculate the percentage of a in b and returns the\\n    /// base point of the percentage. 'a' is called up before use and scaled\\n    /// back down before base point calculation.\\n    function getBPSOfAInB(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 scale = 10**18;\\n        uint256 scaledA = mul(a, scale);\\n        uint256 x = mul(div(scaledA, b), 100);\\n        uint256 bps = div(mul(x, 100), scale);\\n        return bps;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ncodes/projects/makeos/makeos-contracts/contracts/libraries/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.6;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../../math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SM for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    event BurnForMainnet(uint256 amount, bytes32 mainnetAddr);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev burnForMainnet burns all account balance and emits an event.\\n     * @param mainnetAddr is the MakeOS address that will be credited.\\n     */\\n    function burnForMainnet(bytes32 mainnetAddr) public {\\n        uint256 amt = balanceOf(_msgSender());\\n        _burn(_msgSender(), amt);\\n        emit BurnForMainnet(amt, mainnetAddr);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mainnetAddr\",\"type\":\"bytes32\"}],\"name\":\"BurnForMainnet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mainnetAddr\",\"type\":\"bytes32\"}],\"name\":\"burnForMainnet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Dilithium","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}