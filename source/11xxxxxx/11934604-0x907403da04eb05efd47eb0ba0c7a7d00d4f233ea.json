{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-25\r\n*/\r\n\r\npragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract ComptrollerLike {\r\n    function getAllMarkets() public view returns (address[] memory);\r\n    function allMarkets(uint m) public view returns(address);\r\n    function markets(address cTokenAddress) public view returns (bool, uint, bool);\r\n    function oracle() public view returns(address);\r\n    function claimComp(address holder) public;    \r\n    function compAccrued(address holder) public view returns(uint);\r\n    function getCompAddress() public view returns (address);\r\n    function getAssetsIn(address account) public view returns(address[] memory);\r\n}\r\n\r\ncontract BComptrollerLike {\r\n    function c2b(address ctoken) public view returns(address);\r\n}\r\n\r\ncontract OracleLike {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ncontract ERC20Like {\r\n    function decimals() public returns(uint);\r\n    function name() public returns(string memory);\r\n    function balanceOf(address user) public returns(uint);\r\n    function allowance(address owner, address spender) public returns(uint);\r\n}\r\n\r\ncontract CTokenLike {\r\n    function underlying() public returns(address);\r\n    function exchangeRateCurrent() public returns (uint);\r\n    function borrowRatePerBlock() public returns (uint);\r\n    function supplyRatePerBlock() public returns (uint);\r\n    function borrowBalanceCurrent(address account) public returns (uint);\r\n    function totalSupply() public returns (uint);\r\n}\r\n\r\ncontract RegistryLike {\r\n    function getAvatar(address user) public returns(address);\r\n    function avatarLength() public view returns(uint);\r\n    function avatars(uint i) public view returns(address);\r\n    function comptroller() public view returns(address);\r\n    function score() public view returns(address);\r\n}\r\n\r\ncontract JarConnectorLike {\r\n    function getUserScore(address user) external view returns (uint);\r\n    function getGlobalScore() external view returns (uint);    \r\n    function getUserScoreProgressPerSec(address user) external view returns (uint);\r\n}\r\n\r\ncontract ScoreLike {\r\n    function updateIndex(address[] calldata cTokens) external;\r\n}\r\n\r\n\r\ncontract UserInfo {\r\n    struct TokenInfo {\r\n        address[] btoken;\r\n        address[] ctoken;\r\n        uint[] ctokenDecimals;\r\n        address[] underlying;\r\n        uint[] underlyingDecimals;\r\n        uint[] ctokenExchangeRate;\r\n        uint[] underlyingPrice;\r\n        uint[] borrowRate;\r\n        uint[] supplyRate;\r\n        bool[] listed;\r\n        uint[] collateralFactor;\r\n        uint[] bTotalSupply;\r\n    }\r\n    \r\n    struct PerUserInfo {\r\n        uint[] ctokenBalance;\r\n        uint[] ctokenBorrowBalance;\r\n        uint[] underlyingWalletBalance;\r\n        uint[] underlyingAllowance;\r\n    }\r\n\r\n    struct ScoreInfo {\r\n        uint userScore;\r\n        uint userScoreProgressPerSec;        \r\n        uint totalScore;\r\n    }\r\n\r\n    struct ImportInfo {\r\n        address avatar;\r\n        uint[]  ctokenAllowance;\r\n        uint    availableEthBalance; \r\n    }\r\n\r\n    struct CompTokenInfo {\r\n        uint    compBalance;\r\n        address comp;\r\n    }\r\n\r\n    struct JarInfo {\r\n        uint[] ctokenBalance;\r\n    }\r\n    \r\n    struct TvlInfo {\r\n        uint numAccounts;\r\n        uint[] ctokenBalance;\r\n    }\r\n\r\n    struct Info {\r\n        TokenInfo     tokenInfo;\r\n        PerUserInfo   cUser; // data on compound\r\n        PerUserInfo   bUser; // data on B\r\n        ImportInfo    importInfo;\r\n        ScoreInfo     scoreInfo;\r\n        CompTokenInfo compTokenInfo;\r\n        JarInfo       jarInfo;\r\n        TvlInfo       tvlInfo;\r\n    }\r\n    \r\n    address constant ETH = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n    function isCETH(address ctoken) internal returns(bool) {\r\n        string memory name = ERC20Like(ctoken).name();\r\n        if(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"Compound ETH\"))) return true;\r\n        if(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"Compound Ether\"))) return true;\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function getNumMarkets(address comptroller) public returns(uint) {\r\n        bool succ = true;\r\n        uint i;\r\n        for(i = 0 ; ; i++) {\r\n            (succ,) = comptroller.call.gas(1e6)(abi.encodeWithSignature(\"allMarkets(uint256)\", i));\r\n            \r\n            if(! succ) return i;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function getTokenInfo(address comptroller, address bComptroller) public returns(TokenInfo memory info) {\r\n        address[] memory markets = ComptrollerLike(comptroller).getAllMarkets();\r\n        uint numMarkets = markets.length;\r\n        info.btoken = new address[](numMarkets);        \r\n        info.ctoken = new address[](numMarkets);\r\n        for(uint m = 0 ; m < numMarkets ; m++) {\r\n            info.ctoken[m] = markets[m];\r\n            info.btoken[m] = BComptrollerLike(bComptroller).c2b(info.ctoken[m]);\r\n        }\r\n        info.ctokenDecimals = new uint[](info.ctoken.length);\r\n        info.underlying = new address[](info.ctoken.length);\r\n        info.underlyingDecimals = new uint[](info.ctoken.length);\r\n        info.ctokenExchangeRate = new uint[](info.ctoken.length);\r\n        info.underlyingPrice = new uint[](info.ctoken.length);\r\n        info.borrowRate = new uint[](info.ctoken.length);\r\n        info.supplyRate = new uint[](info.ctoken.length);\r\n        info.listed = new bool[](info.ctoken.length);\r\n        info.collateralFactor = new uint[](info.ctoken.length);\r\n        info.bTotalSupply = new uint[](info.ctoken.length);\r\n\r\n        for(uint i = 0 ; i < info.ctoken.length ; i++) {\r\n            info.ctokenDecimals[i] = ERC20Like(info.ctoken[i]).decimals();\r\n            if(isCETH(info.ctoken[i])) {\r\n                info.underlying[i] = ETH;\r\n                info.underlyingDecimals[i] = 18;\r\n            }\r\n            else {\r\n                info.underlying[i] = CTokenLike(info.ctoken[i]).underlying();\r\n                info.underlyingDecimals[i] = ERC20Like(info.underlying[i]).decimals();\r\n            }\r\n            \r\n            info.ctokenExchangeRate[i] = CTokenLike(info.ctoken[i]).exchangeRateCurrent();\r\n            info.underlyingPrice[i] = OracleLike(ComptrollerLike(comptroller).oracle()).getUnderlyingPrice(info.ctoken[i]);\r\n            info.borrowRate[i] = CTokenLike(info.ctoken[i]).borrowRatePerBlock();\r\n            info.supplyRate[i] = CTokenLike(info.ctoken[i]).supplyRatePerBlock();\r\n            \r\n            (info.listed[i], info.collateralFactor[i], ) = ComptrollerLike(comptroller).markets(info.ctoken[i]);\r\n\r\n            if(info.btoken[i] != address(0)) info.bTotalSupply[i] = CTokenLike(info.btoken[i]).totalSupply();\r\n        }\r\n        \r\n        return info;\r\n    }\r\n    \r\n    function isIn(address[] memory array, address elm) internal pure returns(bool) {\r\n        for(uint i = 0 ; i < array.length ; i++) {\r\n            if(elm == array[i]) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getPerUserInfo(address user, address[] memory ctoken, address[] memory assetsIn, address[] memory underlying) public returns(PerUserInfo memory info) {\r\n        info.ctokenBalance = new uint[](ctoken.length);\r\n        info.ctokenBorrowBalance = new uint[](ctoken.length);\r\n        info.underlyingWalletBalance = new uint[](ctoken.length);\r\n        info.underlyingAllowance = new uint[](ctoken.length);\r\n\r\n        \r\n        for(uint i = 0 ; i < ctoken.length ; i++) {\r\n            if(ctoken[i] == address(0)) continue;\r\n\r\n            info.ctokenBalance[i] = isIn(assetsIn, ctoken[i]) ? ERC20Like(ctoken[i]).balanceOf(user) : 0;\r\n            info.ctokenBorrowBalance[i] = CTokenLike(ctoken[i]).borrowBalanceCurrent(user);\r\n            if(underlying[i] == ETH) {\r\n                info.underlyingWalletBalance[i] = user.balance;\r\n                info.underlyingAllowance[i] = uint(-1);\r\n            }\r\n            else {\r\n                info.underlyingWalletBalance[i] = ERC20Like(underlying[i]).balanceOf(user);\r\n                info.underlyingAllowance[i] = ERC20Like(underlying[i]).allowance(user, ctoken[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getImportInfo(address user, address[] memory ctoken, address registry, address sugarDaddy) public returns(ImportInfo memory info) {\r\n        info.avatar = RegistryLike(registry).getAvatar(user);\r\n        info.ctokenAllowance = new uint[](ctoken.length);\r\n        for(uint i = 0 ; i < ctoken.length ; i++) {\r\n            info.ctokenAllowance[i] = ERC20Like(ctoken[i]).allowance(user, info.avatar);\r\n        }\r\n        info.availableEthBalance = sugarDaddy.balance;\r\n    }\r\n\r\n    function getScoreInfo(address user, address jarConnector) public view returns(ScoreInfo memory info) {\r\n        info.userScore = JarConnectorLike(jarConnector).getUserScore(user);\r\n        info.userScoreProgressPerSec = JarConnectorLike(jarConnector).getUserScoreProgressPerSec(user);\r\n        info.totalScore = JarConnectorLike(jarConnector).getGlobalScore();\r\n    }\r\n\r\n\r\n    function getCompTokenInfo(address user, address comptroller, address registry) public returns(CompTokenInfo memory info) {\r\n        address avatar = RegistryLike(registry).getAvatar(user);\r\n        address comp = ComptrollerLike(comptroller).getCompAddress();\r\n        ComptrollerLike(comptroller).claimComp(avatar);\r\n        uint heldComp = ComptrollerLike(comptroller).compAccrued(avatar);\r\n\r\n        info.compBalance = ERC20Like(comp).balanceOf(avatar) + heldComp;\r\n        info.comp = comp;\r\n    }\r\n\r\n    function getJarInfo(address jar, address[] memory ctoken) public returns(JarInfo memory info) {\r\n        info.ctokenBalance = new uint[](ctoken.length);\r\n        for(uint i = 0 ; i < ctoken.length ; i++) {\r\n            info.ctokenBalance[i] = ERC20Like(ctoken[i]).balanceOf(jar); \r\n        }\r\n    }\r\n\r\n    function getTvlInfo(address[] memory ctokens, address registry) public returns(TvlInfo memory info) {\r\n        info.ctokenBalance = new uint[](ctokens.length);\r\n        uint numAvatars = RegistryLike(registry).avatarLength();\r\n        for(uint i = 0 ; i < numAvatars ; i++) {\r\n            address avatar = RegistryLike(registry).avatars(i);\r\n            for(uint j = 0 ; j < ctokens.length ; j++) {\r\n                info.ctokenBalance[j] += ERC20Like(ctokens[j]).balanceOf(avatar);\r\n            }\r\n        }\r\n        \r\n        info.numAccounts = numAvatars;\r\n    }\r\n\r\n    function getUserInfo(address user,\r\n                         address comptroller,\r\n                         address bComptroller,\r\n                         address registry,\r\n                         address sugarDaddy,\r\n                         address jarConnector,\r\n                         address jar,\r\n                         bool    getTvl) public returns(Info memory info) {\r\n        info.tokenInfo = getTokenInfo(comptroller, bComptroller);\r\n        // check which assets are in\r\n        address avatar = RegistryLike(registry).getAvatar(user);\r\n        address[] memory assetsIn = ComptrollerLike(comptroller).getAssetsIn(avatar);\r\n        address[] memory bAssetsIn = new address[](assetsIn.length);\r\n        for(uint i = 0 ; i < assetsIn.length ; i++) {\r\n            bAssetsIn[i] = BComptrollerLike(bComptroller).c2b(assetsIn[i]);\r\n        }\r\n        info.bUser = getPerUserInfo(user, info.tokenInfo.btoken, bAssetsIn, info.tokenInfo.underlying);\r\n        // all tokens are assumed to be in - since we want to import all of them\r\n        info.cUser = getPerUserInfo(user, info.tokenInfo.ctoken, info.tokenInfo.ctoken, info.tokenInfo.underlying);\r\n        info.importInfo = getImportInfo(user, info.tokenInfo.ctoken, registry, sugarDaddy);\r\n\r\n        address score = RegistryLike(registry).score();\r\n        ScoreLike(score).updateIndex(info.tokenInfo.ctoken);\r\n        info.scoreInfo = getScoreInfo(user, jarConnector);\r\n        info.compTokenInfo = getCompTokenInfo(user, comptroller, registry);\r\n        info.jarInfo = getJarInfo(jar, info.tokenInfo.ctoken);\r\n        if(getTvl) info.tvlInfo = getTvlInfo(info.tokenInfo.ctoken, registry);\r\n    }\r\n}\r\n\r\ncontract FakeBComptroller {\r\n    function c2b(address a) pure public returns(address) { return a;}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"getCompTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"compBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"comp\",\"type\":\"address\"}],\"internalType\":\"struct UserInfo.CompTokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sugarDaddy\",\"type\":\"address\"}],\"name\":\"getImportInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"avatar\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenAllowance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"availableEthBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct UserInfo.ImportInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"jar\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"}],\"name\":\"getJarInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.JarInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getNumMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetsIn\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlying\",\"type\":\"address[]\"}],\"name\":\"getPerUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBorrowBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingWalletBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAllowance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.PerUserInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jarConnector\",\"type\":\"address\"}],\"name\":\"getScoreInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userScoreProgressPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"}],\"internalType\":\"struct UserInfo.ScoreInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bComptroller\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"btoken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"underlying\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenExchangeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyRate\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"listed\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralFactor\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bTotalSupply\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ctokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"getTvlInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numAccounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.TvlInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bComptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sugarDaddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jarConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jar\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"getTvl\",\"type\":\"bool\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"btoken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"underlying\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenExchangeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyRate\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"listed\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralFactor\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bTotalSupply\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBorrowBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingWalletBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAllowance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.PerUserInfo\",\"name\":\"cUser\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBorrowBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingWalletBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAllowance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.PerUserInfo\",\"name\":\"bUser\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"avatar\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenAllowance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"availableEthBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct UserInfo.ImportInfo\",\"name\":\"importInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userScoreProgressPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"}],\"internalType\":\"struct UserInfo.ScoreInfo\",\"name\":\"scoreInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"compBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"comp\",\"type\":\"address\"}],\"internalType\":\"struct UserInfo.CompTokenInfo\",\"name\":\"compTokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.JarInfo\",\"name\":\"jarInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numAccounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.TvlInfo\",\"name\":\"tvlInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct UserInfo.Info\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UserInfo","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f5c16e71c423bd47898f3e3e4b2a2456d0d4d1dfd4c5bcde1e655b9f07465504"}]}