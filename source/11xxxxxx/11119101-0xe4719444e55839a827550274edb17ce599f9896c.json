{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract FSD_Staking is Owned{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalRewards;\r\n    uint256 public stakingRate = 100; // 100% APY\r\n    uint256 public totalStakes;\r\n    \r\n    address public FSD = 0x94989cB638Eb46e04bb4bD12751d1E56bB9B57C1;\r\n    \r\n    struct DepositedToken{\r\n        uint256 activeDeposit;\r\n        uint256 totalDeposits;\r\n        uint256 startTime;\r\n        uint256 pendingGains;\r\n        uint256 lastClaimedDate;\r\n        uint256 totalGained;\r\n    }\r\n    \r\n    mapping(address => DepositedToken) users;\r\n    \r\n    event StakeStarted(address indexed _staker, uint256 indexed _amount);\r\n    event RewardsCollected(address indexed _staker, uint256 indexed _rewards);\r\n    event StakingStopped(address indexed _staker, uint256 indexed _refunded);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Add tokens to stake\r\n    // @param _amount amount of tokens to stake\r\n    // ------------------------------------------------------------------------\r\n    function Stake(uint256 _amount) external{\r\n        require(_amount > 0, \"amount of stake cannot be zero\");\r\n        \r\n        // transfer tokens from user to the contract balance\r\n        require(IERC20(FSD).transferFrom(msg.sender, address(this), _amount));\r\n        \r\n        uint256 fsdBurned = onePercent(_amount).mul(3); //3% of the staked amount is burned in transaction\r\n        \r\n        _amount = _amount.sub(fsdBurned);\r\n        \r\n        // add to stake\r\n        _addToStake(_amount);\r\n        \r\n        emit StakeStarted(msg.sender, _amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Withdraw accumulated rewards\r\n    // ------------------------------------------------------------------------\r\n    function ClaimReward() external {\r\n        require(PendingReward(msg.sender) > 0, \"No pending rewards\");\r\n        require(IERC20(FSD).balanceOf(address(this)) > totalStakes);\r\n        uint256 _pendingReward = PendingReward(msg.sender);\r\n        \r\n        // Global stats update\r\n        totalRewards = totalRewards.add(_pendingReward);\r\n        \r\n        // update the record\r\n        users[msg.sender].totalGained = users[msg.sender].totalGained.add(_pendingReward);\r\n        users[msg.sender].lastClaimedDate = now;\r\n        users[msg.sender].pendingGains = 0;\r\n        \r\n        // mint more tokens inside token contract equivalent to _pendingReward\r\n        require(IERC20(FSD).transfer(msg.sender, _pendingReward));\r\n        \r\n        uint256 fsdBurned = onePercent(_pendingReward).mul(3); //3% of the claimed amount is burned in transaction\r\n        \r\n        emit RewardsCollected(msg.sender, _pendingReward.sub(fsdBurned));\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // This will stop the existing staking\r\n    // ------------------------------------------------------------------------\r\n    function StopStaking() external {\r\n        require(users[msg.sender].activeDeposit >= 0, \"No active stake\");\r\n        uint256 _activeDeposit = users[msg.sender].activeDeposit;\r\n        \r\n        // update staking stats\r\n            // check if we have any pending rewards, add it to previousGains var\r\n            users[msg.sender].pendingGains = PendingReward(msg.sender);\r\n            // update amount \r\n            users[msg.sender].activeDeposit = 0;\r\n            // reset last claimed figure as well\r\n            users[msg.sender].lastClaimedDate = now;\r\n        \r\n        // withdraw the tokens and move from contract to the caller\r\n        require(IERC20(FSD).transfer(msg.sender, _activeDeposit));\r\n        \r\n        emit StakingStopped(msg.sender, _activeDeposit);\r\n    }\r\n    \r\n    \r\n    \r\n    //#########################################################################################################################################################//\r\n    //##########################################################QUERIES################################################################################//\r\n    //#########################################################################################################################################################//\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the pending reward\r\n    // @param _caller address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function PendingReward(address _caller) public view returns(uint256 _pendingRewardWeis){\r\n        uint256 _totalStakingTime = now.sub(users[_caller].lastClaimedDate);\r\n        \r\n        uint256 _reward_token_second = ((stakingRate).mul(10 ** 21)).div(365 days); // added extra 10^21\r\n        \r\n        uint256 reward = ((users[_caller].activeDeposit).mul(_totalStakingTime.mul(_reward_token_second))).div(10 ** 23); // remove extra 10^21 // 10^2 are for 100 (%)\r\n        \r\n        return reward.add(users[_caller].pendingGains);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the active stake of the user\r\n    // @param _user wallet address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function ActiveStakeDeposit(address _user) external view returns(uint256 _activeDeposit){\r\n        return users[_user].activeDeposit;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the total staking of the user\r\n    // @param _user wallet address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function YourTotalStakingTillToday(address _user) external view returns(uint256 _totalStaking){\r\n        return users[_user].totalDeposits;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get the time of last staking of user\r\n    // ------------------------------------------------------------------------\r\n    function LastStakedOn(address _user) external view returns(uint256 _unixLastStakedTime){\r\n        return users[_user].startTime;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Query to get total earned rewards\r\n    // @param _user wallet address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function TotalStakingRewards(address _user) external view returns(uint256 _totalEarned){\r\n        return users[_user].totalGained;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Internal function to add new deposit\r\n    // ------------------------------------------------------------------------        \r\n    function _addToStake(uint256 _amount) internal{\r\n        \r\n        // add that token into the contract balance\r\n        // check if we have any pending reward, add it to pendingGains variable\r\n        users[msg.sender].pendingGains = PendingReward(msg.sender);\r\n            \r\n        // update current deposited amount \r\n        users[msg.sender].activeDeposit = users[msg.sender].activeDeposit.add(_amount);\r\n        users[msg.sender].totalDeposits = users[msg.sender].totalDeposits.add(_amount);\r\n        users[msg.sender].startTime = now;\r\n        users[msg.sender].lastClaimedDate = now;\r\n        \r\n        // update global stats\r\n        totalStakes = totalStakes.add(_amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) internal pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_refunded\",\"type\":\"uint256\"}],\"name\":\"StakingStopped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ActiveStakeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LastStakedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastStakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingRewardWeis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StopStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalStakingTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaking\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FSD_Staking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f5e80cd1ef776632a1abe4635a41c6101001fe039337ddc98fa1efcd0b58e049"}]}