{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function strategies(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function approvedStrategies(address, address) external view returns (bool);\r\n    // v no need\r\n    function approveStrategy(address, address) external;\r\n    function setStrategy(address, address) external;\r\n    function withdrawAll(address) external;\r\n}\r\n\r\ninterface yvERC20 {\r\n    function deposit(uint) external;\r\n    function withdraw(uint) external;\r\n    function getPricePerFullShare() external view returns (uint);\r\n}\r\n\r\ninterface ICurveFi {\r\n    function get_virtual_price() external view returns (uint);\r\n    function balances(uint) external view returns (uint);\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n    function remove_liquidity(\r\n        uint256 _amount,\r\n        uint256[3] calldata min_amounts\r\n    ) external;\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount, \r\n        int128 i, \r\n        uint256 min_amount\r\n    ) external;\r\n    function remove_liquidity_imbalance(\r\n        uint256[3] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n    function exchange(\r\n        int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n    ) external;\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\n\r\ncontract StrategyUSDT3pool {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address constant public want = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public _3pool = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n    address constant public _3crv = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n    address constant public y3crv = address(0x9cA85572E6A3EbF24dEDd195623F188735A5179f);\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    uint constant public DENOMINATOR = 10000;\r\n    uint public treasuryFee = 1000;\r\n    uint public withdrawalFee = 50;\r\n    uint public strategistReward = 1000;\r\n    uint public threshold = 8000;\r\n    uint public slip = 5;\r\n    uint public tank = 0;\r\n    uint public p = 0;\r\n    uint public maxAmount = 1e12;\r\n\r\n    modifier isAuthorized() {\r\n        require(msg.sender == strategist || \r\n                msg.sender == governance || \r\n                msg.sender == controller ||\r\n                msg.sender == address(this), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _controller) public {\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n        keeper = msg.sender;\r\n        controller = _controller;\r\n    }\r\n    \r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyUSDT3pool\";\r\n    }\r\n    \r\n    function harvest() external {\r\n        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance, \"!ksg\");\r\n        rebalance();\r\n        uint _want = (IERC20(want).balanceOf(address(this))).sub(tank);\r\n        if (_want > 0) {\r\n            if (_want > maxAmount) _want = maxAmount;\r\n            IERC20(want).safeApprove(_3pool, 0);\r\n            IERC20(want).safeApprove(_3pool, _want);\r\n            uint v = _want.mul(1e30).div(ICurveFi(_3pool).get_virtual_price());\r\n            ICurveFi(_3pool).add_liquidity([0, 0, _want], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\r\n        }\r\n        uint _bal = IERC20(_3crv).balanceOf(address(this));\r\n        if (_bal > 0) {\r\n            IERC20(_3crv).safeApprove(y3crv, 0);\r\n            IERC20(_3crv).safeApprove(y3crv, _bal);\r\n            yvERC20(y3crv).deposit(_bal);\r\n        }\r\n    }\r\n\r\n    function deposit() public {}\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(_3crv != address(_asset), \"3crv\");\r\n        require(y3crv != address(_asset), \"y3crv\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n\r\n        rebalance();\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n            tank = 0;\r\n        }\r\n        else {\r\n            if (tank >= _amount) tank = tank.sub(_amount);\r\n            else tank = 0;\r\n        }\r\n\r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        uint _fee = _amount.mul(withdrawalFee).div(DENOMINATOR);\r\n        IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n    }\r\n\r\n    function _withdrawSome(uint _amount) internal returns (uint) {\r\n        uint _amnt = _amount.mul(1e30).div(ICurveFi(_3pool).get_virtual_price());\r\n        uint _amt = _amnt.mul(1e18).div(yvERC20(y3crv).getPricePerFullShare());\r\n        uint _bal = IERC20(y3crv).balanceOf(address(this));\r\n        if (_amt > _bal) _amt = _bal;\r\n        uint _before = IERC20(_3crv).balanceOf(address(this));\r\n        yvERC20(y3crv).withdraw(_amt);\r\n        uint _after = IERC20(_3crv).balanceOf(address(this));\r\n        return _withdrawOne(_after.sub(_before));\r\n    }\r\n\r\n    function _withdrawOne(uint _amnt) internal returns (uint) {\r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        IERC20(_3crv).safeApprove(_3pool, 0);\r\n        IERC20(_3crv).safeApprove(_3pool, _amnt);\r\n        ICurveFi(_3pool).remove_liquidity_one_coin(_amnt, 2, _amnt.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR).div(1e12));\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n        \r\n        return _after.sub(_before);\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n        \r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n    \r\n    function _withdrawAll() internal {\r\n        uint _y3crv = IERC20(y3crv).balanceOf(address(this));\r\n        if (_y3crv > 0) {\r\n            yvERC20(y3crv).withdraw(_y3crv);\r\n            _withdrawOne(IERC20(_3crv).balanceOf(address(this)));\r\n        }\r\n    }\r\n    \r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOf3CRV() public view returns (uint) {\r\n        return IERC20(_3crv).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOf3CRVinWant() public view returns (uint) {\r\n        return balanceOf3CRV().mul(ICurveFi(_3pool).get_virtual_price()).div(1e30);\r\n    }\r\n\r\n    function balanceOfy3CRV() public view returns (uint) {\r\n        return IERC20(y3crv).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfy3CRVin3CRV() public view returns (uint) {\r\n        return balanceOfy3CRV().mul(yvERC20(y3crv).getPricePerFullShare()).div(1e18);\r\n    }\r\n\r\n    function balanceOfy3CRVinWant() public view returns (uint) {\r\n        return balanceOfy3CRVin3CRV().mul(ICurveFi(_3pool).get_virtual_price()).div(1e30);\r\n    }\r\n\r\n    function lick() public view returns (uint l) {\r\n        uint _p = yvERC20(y3crv).getPricePerFullShare();\r\n        _p = _p.mul(ICurveFi(_3pool).get_virtual_price()).div(1e18);\r\n        if (_p >= p) {\r\n            l = (_p.sub(p)).mul(balanceOfy3CRV()).div(1e18);\r\n            l = l.mul(treasuryFee.add(strategistReward)).div(DENOMINATOR).div(1e12);\r\n        }\r\n    }\r\n    \r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant().add(balanceOfy3CRVinWant()).sub(lick());\r\n    }\r\n\r\n    function migrate(address _strategy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(Controller(controller).approvedStrategies(want, _strategy), \"!stategyAllowed\");\r\n        IERC20(y3crv).safeTransfer(_strategy, IERC20(y3crv).balanceOf(address(this)));\r\n        IERC20(_3crv).safeTransfer(_strategy, IERC20(_3crv).balanceOf(address(this)));\r\n        IERC20(want).safeTransfer(_strategy, IERC20(want).balanceOf(address(this)));\r\n    }\r\n\r\n    function forceD(uint _amount) external isAuthorized {\r\n        drip();\r\n        IERC20(want).safeApprove(_3pool, 0);\r\n        IERC20(want).safeApprove(_3pool, _amount);\r\n        uint v = _amount.mul(1e30).div(ICurveFi(_3pool).get_virtual_price());\r\n        ICurveFi(_3pool).add_liquidity([0, 0, _amount], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\r\n        if (_amount < tank) tank = tank.sub(_amount);\r\n        else tank = 0;\r\n\r\n        uint _bal = IERC20(_3crv).balanceOf(address(this));\r\n        IERC20(_3crv).safeApprove(y3crv, 0);\r\n        IERC20(_3crv).safeApprove(y3crv, _bal);\r\n        yvERC20(y3crv).deposit(_bal);\r\n    }\r\n\r\n    function forceW(uint _amt) external isAuthorized {\r\n        drip();\r\n        uint _before = IERC20(_3crv).balanceOf(address(this));\r\n        yvERC20(y3crv).withdraw(_amt);\r\n        uint _after = IERC20(_3crv).balanceOf(address(this));\r\n        _amt = _after.sub(_before);\r\n        \r\n        IERC20(_3crv).safeApprove(_3pool, 0);\r\n        IERC20(_3crv).safeApprove(_3pool, _amt);\r\n        _before = IERC20(want).balanceOf(address(this));\r\n        ICurveFi(_3pool).remove_liquidity_one_coin(_amt, 2, _amt.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR).div(1e12));\r\n        _after = IERC20(want).balanceOf(address(this));\r\n        tank = tank.add(_after.sub(_before));\r\n    }\r\n\r\n    function drip() public isAuthorized {\r\n        uint _p = yvERC20(y3crv).getPricePerFullShare();\r\n        _p = _p.mul(ICurveFi(_3pool).get_virtual_price()).div(1e18);\r\n        require(_p >= p, 'backward');\r\n        uint _r = (_p.sub(p)).mul(balanceOfy3CRV()).div(1e18);\r\n        uint _s = _r.mul(strategistReward).div(DENOMINATOR);\r\n        IERC20(y3crv).safeTransfer(strategist, _s.mul(1e18).div(_p));\r\n        uint _t = _r.mul(treasuryFee).div(DENOMINATOR);\r\n        IERC20(y3crv).safeTransfer(Controller(controller).rewards(), _t.mul(1e18).div(_p));\r\n        p = _p;\r\n    }\r\n\r\n    function tick() public view returns (uint _t, uint _c) {\r\n        _t = ICurveFi(_3pool).balances(2).mul(threshold).div(DENOMINATOR);\r\n        _c = balanceOfy3CRVinWant();\r\n    }\r\n\r\n    function rebalance() public isAuthorized {\r\n        drip();\r\n        (uint _t, uint _c) = tick();\r\n        if (_c > _t) {\r\n            _withdrawSome(_c.sub(_t));\r\n            tank = IERC20(want).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!gs\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!sg\");\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint _treasuryFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setStrategistReward(uint _strategistReward) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategistReward = _strategistReward;\r\n    }\r\n\r\n    function setThreshold(uint _threshold) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!sg\");\r\n        threshold = _threshold;\r\n    }\r\n\r\n    function setSlip(uint _slip) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!sg\");\r\n        slip = _slip;\r\n    }\r\n\r\n    function setMaxAmount(uint _maxAmount) external {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!sg\");\r\n        maxAmount = _maxAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_3pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf3CRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf3CRVinWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfy3CRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfy3CRVin3CRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfy3CRVinWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"forceW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slip\",\"type\":\"uint256\"}],\"name\":\"setSlip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategistReward\",\"type\":\"uint256\"}],\"name\":\"setStrategistReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategistReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"y3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyUSDT3pool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009e65ad11b299ca0abefc2799ddb6314ef2d91080","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a90a7d634e00c9b2bfe34a88b80bbc5a149bedc867ab9ec172080e1d937f4dcf"}]}