{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n\r\n    mapping(bytes32 => uint256[]) internal uintArrayStorage;\r\n    mapping(bytes32 => string[]) internal stringArrayStorage;\r\n    mapping(bytes32 => address[]) internal addressArrayStorage;\r\n    //mapping(bytes32 => bytes[]) internal bytesArrayStorage;\r\n    mapping(bytes32 => bool[]) internal boolArrayStorage;\r\n    mapping(bytes32 => int256[]) internal intArrayStorage;\r\n    mapping(bytes32 => bytes32[]) internal bytes32ArrayStorage;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/EternalOwnable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title EternalOwnable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract EternalOwnable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event EternalOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"owner\"))];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit EternalOwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(abi.encodePacked(\"owner\"))] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function initialize(uint256 _requiredSignatures, address[] _initialValidators, address _owner) external returns(bool);\r\n    function isValidator(address _validator) external view returns(bool);\r\n    function requiredSignatures() external view returns(uint256);\r\n    function owner() external view returns(address);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BridgeValidators is IBridgeValidators, EternalStorage, EternalOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    event ValidatorAdded (address indexed validator);\r\n    event ValidatorRemoved (address indexed validator);\r\n    event RequiredSignaturesChanged (uint256 requiredSignatures);\r\n\r\n    bytes32 internal constant REQUIRED_SIGNATURES = keccak256(abi.encodePacked(\"requiredSignatures\"));\r\n    \r\n    function initialize(uint256 _requiredSignatures, address[] _initialValidators, address _owner)\r\n      external returns(bool)\r\n    {\r\n        require(!isInitialized());\r\n        require(_owner != address(0));\r\n        setOwner(_owner);\r\n        require(_requiredSignatures != 0);\r\n        require(_initialValidators.length >= _requiredSignatures);\r\n        for (uint256 i = 0; i < _initialValidators.length; i++) {\r\n            require(_initialValidators[i] != address(0));\r\n            assert(validators(_initialValidators[i]) != true);\r\n            setValidatorCount(validatorCount().add(1));\r\n            setValidator(_initialValidators[i], true);\r\n            emit ValidatorAdded(_initialValidators[i]);\r\n        }\r\n        uintStorage[REQUIRED_SIGNATURES] = _requiredSignatures;\r\n        uintStorage[keccak256(\"deployedAtBlock\")] = block.number;\r\n        setInitialize(true);\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n        return isInitialized();\r\n    }\r\n\r\n    function addValidator(address _validator) external onlyOwner {\r\n        require(_validator != address(0));\r\n        require(!isValidator(_validator));\r\n        setValidatorCount(validatorCount().add(1));\r\n        setValidator(_validator, true);\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    function removeValidator(address _validator) external onlyOwner {\r\n        require(validatorCount() > requiredSignatures());\r\n        require(isValidator(_validator));\r\n        setValidator(_validator, false);\r\n        setValidatorCount(validatorCount().sub(1));\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    function setRequiredSignatures(uint256 _requiredSignatures) external onlyOwner {\r\n        require(validatorCount() >= _requiredSignatures);\r\n        require(_requiredSignatures != 0);\r\n        uintStorage[REQUIRED_SIGNATURES] = _requiredSignatures;\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n    }\r\n\r\n    function getBridgeValidatorsInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\r\n        return (2, 0, 0);\r\n    }\r\n\r\n    function requiredSignatures() public view returns(uint256) {\r\n        return uintStorage[REQUIRED_SIGNATURES];\r\n    }\r\n\r\n    function validatorCount() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"validatorCount\"))];\r\n    }\r\n\r\n    function validators(address _validator) public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"validators\", _validator))];\r\n    }\r\n\r\n    function isValidator(address _validator) public view returns(bool) {\r\n        return validators(_validator) == true;\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"deployedAtBlock\")];\r\n    }\r\n\r\n    function setValidatorCount(uint256 _validatorCount) private {\r\n        uintStorage[keccak256(abi.encodePacked(\"validatorCount\"))] = _validatorCount;\r\n    }\r\n\r\n    function setValidator(address _validator, bool _status) private {\r\n        boolStorage[keccak256(abi.encodePacked(\"validators\", _validator))] = _status;\r\n    }\r\n\r\n    function setInitialize(bool _status) private {\r\n        boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))] = _status;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeValidatorsInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"},{\"name\":\"_initialValidators\",\"type\":\"address[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"setRequiredSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"RequiredSignaturesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"EternalOwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BridgeValidators","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://78baa382aee67cc03077b880a18ba305987aef985a3235b71871ef138701436c"}]}