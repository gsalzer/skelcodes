{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\ncontract SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n    function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return (value*_quotient/1000000000000000000);\r\n    }\r\n}\r\n\r\ncontract HumanToken is SafeMath {\r\n    string public constant name     \t\t            = \"Human Protocol Finance\";         // Name of the token\r\n    string public constant symbol   \t\t            = \"HUMAN\";                          // Symbol of token\r\n    uint256 public constant decimals  \t\t            = 18;                               // Decimal of token\r\n    uint256 public _totalsupply        \t\t            = 100000 * 10 ** decimals;          // Total supply\r\n    uint256 public _circulatingSupply        \t        = 65000 * 10 ** decimals;           // Circulating supply\r\n    uint256 public _mintingTokens        \t            = 50000 * 10 ** decimals;           // Minting tokens\r\n    uint256 public _founderTokens        \t            = 20000 * 10 ** decimals;           // Founder tokens\r\n    uint256 public _privateSeedTokens        \t        = 15000 * 10 ** decimals;           // Private seed tokens\r\n    uint256 public _mintingTokensUnlocked       \t\t= 0;\r\n    uint256 public _founderTokensUnlocked       \t\t= 0;\r\n    uint256 public _privateSeedTokensUnlocked       \t= 0;\r\n    uint256 public _lastMintingUnlock                   = 0;\r\n    uint256 public _lastFounderUnlock                   = 0;\r\n    uint256 public _lastPrivateUnlock                   = 0;\r\n    address public owner                                = msg.sender;                       // Owner of smart contract\r\n    address public admin                                = msg.sender;   \r\n    address public mintingAdmin                         = 0x8a4dc7E004A27EaEC1ac8b5e5A8D6f09E4df245f;   \r\n    address public founderAdmin                         = 0x5b821E68d694D3AB059eDBbC91CADfE501dAcc3D;   \r\n    address public privateAdmin                         = 0x6Dccf4274894347f8736CE463a3A8C7B933D13b7;    \r\n    uint256 public _contractTime       \t\t            = now; \r\n    mapping (address => uint256) balances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // Only owner can access the function\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Only admin can access the function\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != admin) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        balances[msg.sender]        = _circulatingSupply;\r\n        emit Transfer(0, msg.sender, _circulatingSupply);\r\n    }\r\n    \r\n    // Show token balance of address owner\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    // Token transfer function\r\n    // Token amount should be in 18 decimals (eg. 199 * 10 ** 18)\r\n    function transfer(address _to, uint256 _amount ) public {\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender]            = sub(balances[msg.sender], _amount);\r\n        balances[_to]                   = add(balances[_to], _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n    }\r\n    \r\n    // Burn Tokens\r\n    function burntokens(uint256 _amount) external onlyOwner {\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        _totalsupply                    = sub(_totalsupply, _amount);\r\n        balances[msg.sender]            = sub(balances[msg.sender], _amount);\r\n    }\r\n    \r\n    // Minting Tokens\r\n    function unlockMintingTokens(uint256 _amount) external onlyAdmin {\r\n        require(_mintingTokensUnlocked <= _mintingTokens);\r\n        _mintingTokensUnlocked          = add(_mintingTokensUnlocked, _amount);\r\n        _totalsupply                    = add(_totalsupply, _amount);\r\n        balances[mintingAdmin]          = add(balances[mintingAdmin], _amount);\r\n        _lastMintingUnlock              = now;\r\n        emit Transfer(0, mintingAdmin, _amount);\r\n    }\r\n    \r\n    // Founder Tokens\r\n    function unlockFounderTokens(uint256 _amount) external onlyAdmin {\r\n        require(now > (_contractTime+180 days)); // After 6months\r\n        require(_amount <= 2000*10**18);\r\n        require(now > (_lastFounderUnlock+30 days)); // Once in a month\r\n        require(_founderTokensUnlocked <= _founderTokens);\r\n        _founderTokensUnlocked          = add(_founderTokensUnlocked, _amount);\r\n        balances[founderAdmin]          = add(balances[founderAdmin], _amount);\r\n        _lastFounderUnlock              = now;\r\n        emit Transfer(0, founderAdmin, _amount);\r\n    }\r\n    \r\n    // Private Seed Tokens\r\n    function unlockPrivateSeedTokens() external onlyAdmin {\r\n        uint256 unlockPrivateAmount     = 5000*10**18;\r\n        require(now > (_lastPrivateUnlock+30 days)); // Once in a month\r\n        require(_privateSeedTokensUnlocked <= _privateSeedTokens);\r\n        _privateSeedTokensUnlocked      = add(_privateSeedTokensUnlocked, unlockPrivateAmount);\r\n        balances[privateAdmin]          = add(balances[privateAdmin], unlockPrivateAmount);\r\n        _lastPrivateUnlock              = now;\r\n        emit Transfer(0, privateAdmin, unlockPrivateAmount);\r\n    }\r\n    \r\n    // Total Supply of HumanToken\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    // Change Admin of this contract\r\n    function changeAdmin(address _newAdminAddress) external onlyOwner {\r\n        admin = _newAdminAddress;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_privateSeedTokensUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_founderTokensUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contractTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_privateSeedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_founderTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockPrivateSeedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockMintingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burntokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintingTokensUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockFounderTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lastFounderUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lastMintingUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lastPrivateUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HumanToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b3e931d9af7af5eb79b1883196d724177c307362b3e0cb912c39a25ace9c7e9f"}]}