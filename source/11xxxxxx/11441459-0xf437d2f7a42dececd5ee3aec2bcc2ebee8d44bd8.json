{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/CurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICurveDeposit.sol\\\";\\n\\ncontract CurveRegistry is Ownable {\\n  struct Depositor {\\n    address contractAddress;\\n    uint8 numTokens;\\n    mapping(address => int128) coinToIndex;\\n  }\\n\\n  mapping(address => Depositor) private lpTokenToDepositor;\\n  bool public locked;\\n\\n  event AdapterRegistered(address adapter, bool isExit);\\n\\n  constructor() public {\\n    // Needs to be explicitly set since we deploy through a Create2 proxy\\n    transferOwnership(tx.origin);\\n  }\\n\\n  function addDepositor(ICurveDeposit depositor, address lpToken) external onlyOwner {\\n    require(lpTokenToDepositor[lpToken].contractAddress == address(0));\\n    lpTokenToDepositor[lpToken].contractAddress = address(depositor);\\n\\n    bool usesUnderlying = depositorUsesUnderlying(depositor);\\n\\n    for(int128 i = 0; true; i += 1) {\\n      address coin = getDepositorCoin(depositor, i, usesUnderlying);\\n      if (coin == address(0)) {\\n        lpTokenToDepositor[lpToken].numTokens = uint8(i);\\n        break;\\n      }\\n\\n      lpTokenToDepositor[lpToken].coinToIndex[coin] = i + 1;\\n    }\\n  }\\n\\n  function getDepositorAddress(address lpToken) external view returns (address) {\\n    return lpTokenToDepositor[lpToken].contractAddress;\\n  }\\n\\n  function getDepositor(address lpToken, address coin) external view returns (address, uint8, int128) {\\n    Depositor storage depositor = lpTokenToDepositor[lpToken];\\n\\n    int128 index = depositor.coinToIndex[coin];\\n    if (index == 0) {\\n      revert('UNSUPPORTED');\\n    }\\n\\n    return (depositor.contractAddress, depositor.numTokens, index - 1);\\n  }\\n\\n  function depositorUsesUnderlying(ICurveDeposit depositor) private view returns (bool) {\\n    try depositor.underlying_coins(0) {\\n      return true;\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  function getDepositorCoin(ICurveDeposit depositor, int128 index, bool usesUnderlying) private view returns (address) {\\n    if (usesUnderlying) {\\n      try depositor.underlying_coins(index) returns (address coin) {\\n        return coin;\\n      } catch {\\n        return address(0);\\n      }\\n    } else {\\n      try depositor.coins(index) returns (address coin) {\\n        return coin;\\n      } catch {\\n        return address(0);\\n      }\\n    }\\n  }\\n\\n  function setLocked(bool _locked) external onlyOwner {\\n    locked = _locked;\\n  }\\n\\n  function registerAdapter(bool isExit) external {\\n    require(!locked);\\n    emit AdapterRegistered(msg.sender, isExit);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/interfaces/ICurveDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ICurveDeposit {\\n  // function get_virtual_price() external view returns (uint);\\n\\n  function token() external returns (address);\\n\\n  function coins(int128 i) external view returns (address);\\n\\n  function underlying_coins(int128 i) external view returns (address);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount\\n  ) external;\\n\\n  function add_liquidity(\\n    uint256[3] calldata amounts,\\n    uint256 min_mint_amount\\n  ) external;\\n\\n  function add_liquidity(\\n    uint256[4] calldata amounts,\\n    uint256 min_mint_amount\\n  ) external;\\n\\n  function remove_liquidity_imbalance(\\n    uint256[2] calldata amounts,\\n    uint256 max_burn_amount\\n  ) external;\\n\\n  function remove_liquidity_imbalance(\\n    uint256[3] calldata amounts,\\n    uint256 max_burn_amount\\n  ) external;\\n\\n  function remove_liquidity_imbalance(\\n    uint256[4] calldata amounts,\\n    uint256 max_burn_amount\\n  ) external;\\n\\n  // function remove_liquidity(\\n  //   uint256 _amount,\\n  //   uint256[4] calldata amounts\\n  // ) external;\\n\\n  // function exchange(\\n  //   int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\\n  // ) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExit\",\"type\":\"bool\"}],\"name\":\"AdapterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ICurveDeposit\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"addDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"getDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getDepositorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isExit\",\"type\":\"bool\"}],\"name\":\"registerAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}