{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity=0.8.0;\r\n\r\ninterface Mith {\r\n    function getReward() external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address,uint) external returns (bool);\r\n}\r\n\r\ninterface Uniswap {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract DumpMic {\r\n    address constant sushiswap = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address constant cash = 0x368B3a58B5f49392e5C9E4C998cb0bB966752E51;\r\n    address constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address constant yfi = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\r\n\r\n    function crop(address pool) public {\r\n        Mith(pool).getReward();\r\n        uint amount = ERC20(cash).balanceOf(address(this));\r\n        require(amount > 0); // dev: no reward\r\n        address[] memory path = new address[](4);\r\n        path[0] = cash;\r\n        path[1] = usdt; // route via trap pool\r\n        path[2] = weth;\r\n        path[3] = yfi;\r\n        ERC20(cash).approve(sushiswap, amount);\r\n        Uniswap(sushiswap).swapExactTokensForTokens(\r\n            ERC20(cash).balanceOf(address(this)),\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"crop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DumpMic","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4de41f511b94c4752ea3c22738015744ec99e2cece13eb334b197255caffb623"}]}